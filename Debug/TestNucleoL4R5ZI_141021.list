
TestNucleoL4R5ZI_141021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014864  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08014a24  08014a24  00024a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bbc  08014bbc  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08014bbc  08014bbc  00024bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bc4  08014bc4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bc4  08014bc4  00024bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014bc8  08014bc8  00024bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08014bcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004abc  200001f8  08014dc4  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cb4  08014dc4  00034cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005276b  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a32  00000000  00000000  00082997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000033b8  00000000  00000000  0008c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002fb8  00000000  00000000  0008f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012f85  00000000  00000000  00092740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004d2c1  00000000  00000000  000a56c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001964d8  00000000  00000000  000f2986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00288e5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d94c  00000000  00000000  00288eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014a0c 	.word	0x08014a0c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	08014a0c 	.word	0x08014a0c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <SetSuspendGPIO>:
static void SetBaudRate(USART_TypeDef *UartBase, unsigned int BaudRate)
{
}

static void SetSuspendGPIO(Boolean_t Suspend)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <RxInterrupt>:
}

   /* The following function is the Interrupt Service Routine for the   */
   /* UART RX interrupt.                                                */
static void RxInterrupt(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   /* Continue reading data from the fifo until it is empty or the      */
   /* buffer is full.                                                   */
	// while
   if((UartContext.RxBytesFree))
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <RxInterrupt+0x8c>)
 8000516:	8a1b      	ldrh	r3, [r3, #16]
 8000518:	b29b      	uxth	r3, r3
 800051a:	2b00      	cmp	r3, #0
 800051c:	d020      	beq.n	8000560 <RxInterrupt+0x50>
   {
      if(HCITR_UART_BASE->ISR & USART_ISR_ORE) {
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <RxInterrupt+0x90>)
 8000520:	69db      	ldr	r3, [r3, #28]
         DBG_MSG(DBG_ZONE_GENERAL, ("Receive Overflow\r\n"));
      }

      /* Read a character from the port into the receive buffer         */
      UartContext.RxBuffer[UartContext.RxInIndex] = HCITR_UART_BASE->RDR;
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <RxInterrupt+0x90>)
 8000524:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <RxInterrupt+0x8c>)
 800052a:	899b      	ldrh	r3, [r3, #12]
 800052c:	4619      	mov	r1, r3
 800052e:	b2d2      	uxtb	r2, r2
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <RxInterrupt+0x8c>)
 8000532:	440b      	add	r3, r1
 8000534:	749a      	strb	r2, [r3, #18]
      //printHex(UartContext.RxBuffer[UartContext.RxInIndex], 1);
      //printString("\n");
      /* Update the count variables.                                    */
      UartContext.RxBytesFree--;
 8000536:	4b19      	ldr	r3, [pc, #100]	; (800059c <RxInterrupt+0x8c>)
 8000538:	8a1b      	ldrh	r3, [r3, #16]
 800053a:	b29b      	uxth	r3, r3
 800053c:	3b01      	subs	r3, #1
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <RxInterrupt+0x8c>)
 8000542:	821a      	strh	r2, [r3, #16]
      UartContext.RxInIndex++;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <RxInterrupt+0x8c>)
 8000546:	899b      	ldrh	r3, [r3, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <RxInterrupt+0x8c>)
 800054e:	819a      	strh	r2, [r3, #12]
      if(UartContext.RxInIndex == INPUT_BUFFER_SIZE) {
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <RxInterrupt+0x8c>)
 8000552:	899b      	ldrh	r3, [r3, #12]
 8000554:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8000558:	d102      	bne.n	8000560 <RxInterrupt+0x50>
         UartContext.RxInIndex = 0;
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <RxInterrupt+0x8c>)
 800055c:	2200      	movs	r2, #0
 800055e:	819a      	strh	r2, [r3, #12]
      }
   }

  /* If the buffer is full, disable the receive interrupt.          */
  if(!UartContext.RxBytesFree) {
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <RxInterrupt+0x8c>)
 8000562:	8a1b      	ldrh	r3, [r3, #16]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d10b      	bne.n	8000582 <RxInterrupt+0x72>
	  FlowOff();
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <RxInterrupt+0x94>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <RxInterrupt+0x94>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	6153      	str	r3, [r2, #20]
	  USARTDisableRXInterrupt();
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <RxInterrupt+0x90>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <RxInterrupt+0x90>)
 800057c:	f023 0320 	bic.w	r3, r3, #32
 8000580:	6013      	str	r3, [r2, #0]
  }

   if(UartContext.SuspendState == hssSuspendWait)
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <RxInterrupt+0x8c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d102      	bne.n	8000590 <RxInterrupt+0x80>
   {
      /* Indicate the suspend is interrupted.                           */
      UartContext.SuspendState = hssSuspendWaitInterrupted;
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <RxInterrupt+0x8c>)
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
   }
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000214 	.word	0x20000214
 80005a0:	40004400 	.word	0x40004400
 80005a4:	48000c00 	.word	0x48000c00

080005a8 <EXTI3_IRQHandler>:

void HCITR_CTS_IRQ_HANDLER(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	//EXTI->PR |= EXTI_PR_PR9;
	//printString("CTS\n");
	if(UartContext.SuspendState == hssSuspended) {
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <EXTI3_IRQHandler+0x6c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d10c      	bne.n	80005ce <EXTI3_IRQHandler+0x26>
	  /* Resume the UART.                                               */
	  EnableUartPeriphClock();
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <EXTI3_IRQHandler+0x70>)
 80005b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b8:	4a17      	ldr	r2, [pc, #92]	; (8000618 <EXTI3_IRQHandler+0x70>)
 80005ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005be:	6593      	str	r3, [r2, #88]	; 0x58
	  SetSuspendGPIO(FALSE);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ff99 	bl	80004f8 <SetSuspendGPIO>
	  UartContext.SuspendState = hssNormal;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <EXTI3_IRQHandler+0x6c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e006      	b.n	80005dc <EXTI3_IRQHandler+0x34>
	} else {
	  if(UartContext.SuspendState == hssSuspendWait) {
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <EXTI3_IRQHandler+0x6c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d102      	bne.n	80005dc <EXTI3_IRQHandler+0x34>
		 /* Indicate the suspend is interrupted.                        */
		 UartContext.SuspendState = hssSuspendWaitInterrupted;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <EXTI3_IRQHandler+0x6c>)
 80005d8:	2202      	movs	r2, #2
 80005da:	701a      	strb	r2, [r3, #0]
	  }
	}
	/* Enable the UART transmit interrupt if there is data in the buffer.*/
	if(UartContext.TxBytesFree != OUTPUT_BUFFER_SIZE) {
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <EXTI3_IRQHandler+0x6c>)
 80005de:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80005e8:	d005      	beq.n	80005f6 <EXTI3_IRQHandler+0x4e>
	   USARTEnableTXInterrupt();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <EXTI3_IRQHandler+0x74>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <EXTI3_IRQHandler+0x74>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6013      	str	r3, [r2, #0]
	   //TxInterrupt();
	   //printString("USARTEnableTXInterrupt\n");
	}
	USARTEnableRXInterrupt();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <EXTI3_IRQHandler+0x74>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <EXTI3_IRQHandler+0x74>)
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	6013      	str	r3, [r2, #0]
	FlowOn();
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <EXTI3_IRQHandler+0x78>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <EXTI3_IRQHandler+0x78>)
 8000608:	f023 0310 	bic.w	r3, r3, #16
 800060c:	6153      	str	r3, [r2, #20]
	printHex(HCITR_UART_BASE->CR2, 2);
	printString("\nCR3:");
	printHex(HCITR_UART_BASE->CR3, 2);
	printString("\n");
	*/
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000214 	.word	0x20000214
 8000618:	40021000 	.word	0x40021000
 800061c:	40004400 	.word	0x40004400
 8000620:	48000c00 	.word	0x48000c00

08000624 <HAL_UARTEx_RxEventCallback>:
#endif

   return(ret_val);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_UARTEx_RxEventCallback+0x24>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_UARTEx_RxEventCallback+0x1a>
		RxInterrupt();
 800063a:	f7ff ff69 	bl	8000510 <RxInterrupt>
	}
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40004400 	.word	0x40004400

0800064c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <MX_ADC1_Init+0xbc>)
 8000664:	4a29      	ldr	r2, [pc, #164]	; (800070c <MX_ADC1_Init+0xc0>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000668:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_ADC1_Init+0xbc>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <MX_ADC1_Init+0xbc>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_ADC1_Init+0xbc>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_ADC1_Init+0xbc>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_ADC1_Init+0xbc>)
 8000682:	2204      	movs	r2, #4
 8000684:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_ADC1_Init+0xbc>)
 8000688:	2200      	movs	r2, #0
 800068a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_ADC1_Init+0xbc>)
 800068e:	2200      	movs	r2, #0
 8000690:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_ADC1_Init+0xbc>)
 8000694:	2201      	movs	r2, #1
 8000696:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_ADC1_Init+0xbc>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006c4:	f002 f850 	bl	8002768 <HAL_ADC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006ce:	f000 fd51 	bl	8001174 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_ADC1_Init+0xc4>)
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d6:	2306      	movs	r3, #6
 80006d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006de:	237f      	movs	r3, #127	; 0x7f
 80006e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e2:	2304      	movs	r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_ADC1_Init+0xbc>)
 80006f0:	f002 f986 	bl	8002a00 <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006fa:	f000 fd3b 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20002634 	.word	0x20002634
 800070c:	50040000 	.word	0x50040000
 8000710:	04300002 	.word	0x04300002

08000714 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <HAL_ADC_MspInit+0x74>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d123      	bne.n	800077e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <HAL_ADC_MspInit+0x78>)
 800073c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_ADC_MspInit+0x78>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_ADC_MspInit+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000766:	2301      	movs	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800076a:	230b      	movs	r3, #11
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <HAL_ADC_MspInit+0x7c>)
 800077a:	f003 fb5b 	bl	8003e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	50040000 	.word	0x50040000
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800

08000794 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <MX_CRC_Init+0x3c>)
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <MX_CRC_Init+0x40>)
 800079c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_CRC_Init+0x3c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_CRC_Init+0x3c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_CRC_Init+0x3c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_CRC_Init+0x3c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_CRC_Init+0x3c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_CRC_Init+0x3c>)
 80007be:	f002 fdfd 	bl	80033bc <HAL_CRC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007c8:	f000 fcd4 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000269c 	.word	0x2000269c
 80007d4:	40023000 	.word	0x40023000

080007d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_CRC_MspInit+0x38>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d10b      	bne.n	8000802 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_CRC_MspInit+0x3c>)
 80007ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ee:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_CRC_MspInit+0x3c>)
 80007f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f4:	6493      	str	r3, [r2, #72]	; 0x48
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HAL_CRC_MspInit+0x3c>)
 80007f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023000 	.word	0x40023000
 8000814:	40021000 	.word	0x40021000

08000818 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2228      	movs	r2, #40	; 0x28
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f014 f823 	bl	8014870 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_DAC1_Init+0x74>)
 800082c:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_DAC1_Init+0x78>)
 800082e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_DAC1_Init+0x74>)
 8000832:	f002 fead 	bl	8003590 <HAL_DAC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800083c:	f000 fc9a 	bl	8001174 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_DAC1_Init+0x74>)
 8000860:	f002 ff1c 	bl	800369c <HAL_DAC_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800086a:	f000 fc83 	bl	8001174 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2210      	movs	r2, #16
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_DAC1_Init+0x74>)
 8000876:	f002 ff11 	bl	800369c <HAL_DAC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000880:	f000 fc78 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200026c0 	.word	0x200026c0
 8000890:	40007400 	.word	0x40007400

08000894 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_DAC_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12c      	bne.n	8000910 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_DAC_MspInit+0x88>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_DAC_MspInit+0x88>)
 80008bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_DAC_MspInit+0x88>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_DAC_MspInit+0x88>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_DAC_MspInit+0x88>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_DAC_MspInit+0x88>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008e6:	2330      	movs	r3, #48	; 0x30
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ea:	2303      	movs	r3, #3
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f003 fa9a 	bl	8003e34 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2105      	movs	r1, #5
 8000904:	2036      	movs	r0, #54	; 0x36
 8000906:	f002 fd2f 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800090a:	2036      	movs	r0, #54	; 0x36
 800090c:	f002 fd48 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40007400 	.word	0x40007400
 800091c:	40021000 	.word	0x40021000

08000920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_DMA_Init+0xb8>)
 8000928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800092a:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <MX_DMA_Init+0xb8>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6493      	str	r3, [r2, #72]	; 0x48
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_DMA_Init+0xb8>)
 8000934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_DMA_Init+0xb8>)
 8000940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000942:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <MX_DMA_Init+0xb8>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6493      	str	r3, [r2, #72]	; 0x48
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_DMA_Init+0xb8>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_DMA_Init+0xb8>)
 8000958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_DMA_Init+0xb8>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6493      	str	r3, [r2, #72]	; 0x48
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_DMA_Init+0xb8>)
 8000964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2105      	movs	r1, #5
 8000972:	2011      	movs	r0, #17
 8000974:	f002 fcf8 	bl	8003368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000978:	2011      	movs	r0, #17
 800097a:	f002 fd11 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2038      	movs	r0, #56	; 0x38
 8000984:	f002 fcf0 	bl	8003368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000988:	2038      	movs	r0, #56	; 0x38
 800098a:	f002 fd09 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	203b      	movs	r0, #59	; 0x3b
 8000994:	f002 fce8 	bl	8003368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000998:	203b      	movs	r0, #59	; 0x3b
 800099a:	f002 fd01 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	203c      	movs	r0, #60	; 0x3c
 80009a4:	f002 fce0 	bl	8003368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80009a8:	203c      	movs	r0, #60	; 0x3c
 80009aa:	f002 fcf9 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2105      	movs	r1, #5
 80009b2:	2044      	movs	r0, #68	; 0x44
 80009b4:	f002 fcd8 	bl	8003368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80009b8:	2044      	movs	r0, #68	; 0x44
 80009ba:	f002 fcf1 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	2045      	movs	r0, #69	; 0x45
 80009c4:	f002 fcd0 	bl	8003368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80009c8:	2045      	movs	r0, #69	; 0x45
 80009ca:	f002 fce9 	bl	80033a0 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <MX_FREERTOS_Init+0x18>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_FREERTOS_Init+0x1c>)
 80009e6:	f010 f9c8 	bl	8010d7a <osThreadNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <MX_FREERTOS_Init+0x20>)
 80009ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08014ab4 	.word	0x08014ab4
 80009f8:	08000a01 	.word	0x08000a01
 80009fc:	200026d4 	.word	0x200026d4

08000a00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a08:	f013 f8e8 	bl	8013bdc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <StartDefaultTask+0x20>)
 8000a12:	f003 fbd1 	bl	80041b8 <HAL_GPIO_TogglePin>
	  osDelay(250);
 8000a16:	20fa      	movs	r0, #250	; 0xfa
 8000a18:	f010 fa41 	bl	8010e9e <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a1c:	e7f6      	b.n	8000a0c <StartDefaultTask+0xc>
 8000a1e:	bf00      	nop
 8000a20:	48000400 	.word	0x48000400

08000a24 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA2   ------> RCC_LSCO
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a68      	ldr	r2, [pc, #416]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b66      	ldr	r3, [pc, #408]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b63      	ldr	r3, [pc, #396]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a62      	ldr	r2, [pc, #392]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a5c      	ldr	r2, [pc, #368]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	61bb      	str	r3, [r7, #24]
 8000a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a56      	ldr	r2, [pc, #344]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b51      	ldr	r3, [pc, #324]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a50      	ldr	r2, [pc, #320]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae2:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b3c      	ldr	r3, [pc, #240]	; (8000be0 <MX_GPIO_Init+0x1bc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000afa:	f005 fc9f 	bl	800643c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b04:	4837      	ldr	r0, [pc, #220]	; (8000be4 <MX_GPIO_Init+0x1c0>)
 8000b06:	f003 fb3f 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4836      	ldr	r0, [pc, #216]	; (8000be8 <MX_GPIO_Init+0x1c4>)
 8000b10:	f003 fb3a 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_HCI_RESET_GPIO_Port, BT_HCI_RESET_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2102      	movs	r1, #2
 8000b18:	4834      	ldr	r0, [pc, #208]	; (8000bec <MX_GPIO_Init+0x1c8>)
 8000b1a:	f003 fb35 	bl	8004188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_GPIO_Init+0x1cc>)
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4830      	ldr	r0, [pc, #192]	; (8000bf4 <MX_GPIO_Init+0x1d0>)
 8000b34:	f003 f97e 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f003 f971 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b52:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <MX_GPIO_Init+0x1c0>)
 8000b6c:	f003 f962 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b70:	2320      	movs	r3, #32
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_GPIO_Init+0x1c4>)
 8000b88:	f003 f954 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b8c:	2340      	movs	r3, #64	; 0x40
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4812      	ldr	r0, [pc, #72]	; (8000be8 <MX_GPIO_Init+0x1c4>)
 8000ba0:	f003 f948 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_PLG_Pin;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDIO_PLG_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_GPIO_Init+0x1c8>)
 8000bb8:	f003 f93c 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_HCI_RESET_Pin;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BT_HCI_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_GPIO_Init+0x1c8>)
 8000bd4:	f003 f92e 	bl	8003e34 <HAL_GPIO_Init>

}
 8000bd8:	bf00      	nop
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48001800 	.word	0x48001800
 8000bec:	48000c00 	.word	0x48000c00
 8000bf0:	10110000 	.word	0x10110000
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_I2C1_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00501E6C;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <MX_I2C1_Init+0x7c>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c34:	f003 fada 	bl	80041ec <HAL_I2C_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c3e:	f000 fa99 	bl	8001174 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c46:	f004 f8f8 	bl	8004e3a <HAL_I2CEx_ConfigAnalogFilter>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c50:	f000 fa90 	bl	8001174 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_I2C1_Init+0x74>)
 8000c58:	f004 f93a 	bl	8004ed0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c62:	f000 fa87 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20002724 	.word	0x20002724
 8000c70:	40005400 	.word	0x40005400
 8000c74:	00501e6c 	.word	0x00501e6c

08000c78 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_I2C2_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <MX_I2C2_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501E6C;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_I2C2_Init+0x74>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <MX_I2C2_Init+0x7c>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_I2C2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_I2C2_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_I2C2_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_I2C2_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_I2C2_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_I2C2_Init+0x74>)
 8000cb4:	f003 fa9a 	bl	80041ec <HAL_I2C_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 fa59 	bl	8001174 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <MX_I2C2_Init+0x74>)
 8000cc6:	f004 f8b8 	bl	8004e3a <HAL_I2CEx_ConfigAnalogFilter>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 fa50 	bl	8001174 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_I2C2_Init+0x74>)
 8000cd8:	f004 f8fa 	bl	8004ed0 <HAL_I2CEx_ConfigDigitalFilter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 fa47 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20002770 	.word	0x20002770
 8000cf0:	40005800 	.word	0x40005800
 8000cf4:	00501e6c 	.word	0x00501e6c

08000cf8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_I2C4_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00501E6C;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_I2C4_Init+0x7c>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d34:	f003 fa5a 	bl	80041ec <HAL_I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000d3e:	f000 fa19 	bl	8001174 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d46:	f004 f878 	bl	8004e3a <HAL_I2CEx_ConfigAnalogFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d50:	f000 fa10 	bl	8001174 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_I2C4_Init+0x74>)
 8000d58:	f004 f8ba 	bl	8004ed0 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fa07 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200026d8 	.word	0x200026d8
 8000d70:	40008400 	.word	0x40008400
 8000d74:	00501e6c 	.word	0x00501e6c

08000d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0b2      	sub	sp, #200	; 0xc8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	2294      	movs	r2, #148	; 0x94
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f013 fd69 	bl	8014870 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a7d      	ldr	r2, [pc, #500]	; (8000f98 <HAL_I2C_MspInit+0x220>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d14e      	bne.n	8000e46 <HAL_I2C_MspInit+0xce>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fa5b 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dc0:	f000 f9d8 	bl	8001174 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc4:	4b75      	ldr	r3, [pc, #468]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	4a74      	ldr	r2, [pc, #464]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
    HAL_PWREx_EnableVddIO2();
 8000ddc:	f005 fb2e 	bl	800643c <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000de0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de8:	2312      	movs	r3, #18
 8000dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4866      	ldr	r0, [pc, #408]	; (8000fa0 <HAL_I2C_MspInit+0x228>)
 8000e08:	f003 f814 	bl	8003e34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e0c:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	4a62      	ldr	r2, [pc, #392]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e16:	6593      	str	r3, [r2, #88]	; 0x58
 8000e18:	4b60      	ldr	r3, [pc, #384]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2105      	movs	r1, #5
 8000e28:	201f      	movs	r0, #31
 8000e2a:	f002 fa9d 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e2e:	201f      	movs	r0, #31
 8000e30:	f002 fab6 	bl	80033a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2105      	movs	r1, #5
 8000e38:	2020      	movs	r0, #32
 8000e3a:	f002 fa95 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e3e:	2020      	movs	r0, #32
 8000e40:	f002 faae 	bl	80033a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000e44:	e0a3      	b.n	8000f8e <HAL_I2C_MspInit+0x216>
  else if(i2cHandle->Instance==I2C2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a56      	ldr	r2, [pc, #344]	; (8000fa4 <HAL_I2C_MspInit+0x22c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d14b      	bne.n	8000ee8 <HAL_I2C_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fa07 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_I2C_MspInit+0xf4>
      Error_Handler();
 8000e68:	f000 f984 	bl	8001174 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000e72:	f043 0320 	orr.w	r3, r3, #32
 8000e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e78:	4b48      	ldr	r3, [pc, #288]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 0320 	and.w	r3, r3, #32
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e84:	2303      	movs	r3, #3
 8000e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	483f      	ldr	r0, [pc, #252]	; (8000fa8 <HAL_I2C_MspInit+0x230>)
 8000eaa:	f002 ffc3 	bl	8003e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a3a      	ldr	r2, [pc, #232]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2021      	movs	r0, #33	; 0x21
 8000ecc:	f002 fa4c 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ed0:	2021      	movs	r0, #33	; 0x21
 8000ed2:	f002 fa65 	bl	80033a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	2022      	movs	r0, #34	; 0x22
 8000edc:	f002 fa44 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000ee0:	2022      	movs	r0, #34	; 0x22
 8000ee2:	f002 fa5d 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	e052      	b.n	8000f8e <HAL_I2C_MspInit+0x216>
  else if(i2cHandle->Instance==I2C4)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <HAL_I2C_MspInit+0x234>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d14d      	bne.n	8000f8e <HAL_I2C_MspInit+0x216>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ef2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ef6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efe:	f107 0320 	add.w	r3, r7, #32
 8000f02:	4618      	mov	r0, r3
 8000f04:	f006 f9b4 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2C_MspInit+0x19a>
      Error_Handler();
 8000f0e:	f000 f931 	bl	8001174 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000f18:	f043 0320 	orr.w	r3, r3, #32
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0320 	and.w	r3, r3, #32
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f2a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4815      	ldr	r0, [pc, #84]	; (8000fa8 <HAL_I2C_MspInit+0x230>)
 8000f52:	f002 ff6f 	bl	8003e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_I2C_MspInit+0x224>)
 8000f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2105      	movs	r1, #5
 8000f72:	2054      	movs	r0, #84	; 0x54
 8000f74:	f002 f9f8 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000f78:	2054      	movs	r0, #84	; 0x54
 8000f7a:	f002 fa11 	bl	80033a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	2053      	movs	r0, #83	; 0x53
 8000f84:	f002 f9f0 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8000f88:	2053      	movs	r0, #83	; 0x53
 8000f8a:	f002 fa09 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	37c8      	adds	r7, #200	; 0xc8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48001800 	.word	0x48001800
 8000fa4:	40005800 	.word	0x40005800
 8000fa8:	48001400 	.word	0x48001400
 8000fac:	40008400 	.word	0x40008400

08000fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f001 f9db 	bl	800236e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f830 	bl	800101c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fbc:	f000 f896 	bl	80010ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc0:	f7ff fd30 	bl	8000a24 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000fc4:	f000 fe74 	bl	8001cb0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000fc8:	f000 ff5c 	bl	8001e84 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000fcc:	f7ff fca8 	bl	8000920 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd0:	f7ff fb3c 	bl	800064c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fd4:	f7ff fc20 	bl	8000818 <MX_DAC1_Init>
  MX_I2C1_Init();
 8000fd8:	f7ff fe0e 	bl	8000bf8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fdc:	f7ff fe4c 	bl	8000c78 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000fe0:	f7ff fe8a 	bl	8000cf8 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 8000fe4:	f000 feb2 	bl	8001d4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fe8:	f000 fefe 	bl	8001de8 <MX_USART2_UART_Init>
  MX_OPAMP1_Init();
 8000fec:	f000 f8c8 	bl	8001180 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8000ff0:	f000 f8ee 	bl	80011d0 <MX_OPAMP2_Init>
  MX_SAI1_Init();
 8000ff4:	f000 fa3c 	bl	8001470 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000ff8:	f000 fbe6 	bl	80017c8 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8000ffc:	f000 fb10 	bl	8001620 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 8001000:	f7ff fbc8 	bl	8000794 <MX_CRC_Init>
  MX_RTC_Init();
 8001004:	f000 f9a6 	bl	8001354 <MX_RTC_Init>
  MX_FATFS_Init();
 8001008:	f00d feac 	bl	800ed64 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800100c:	f00f fe34 	bl	8010c78 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001010:	f7ff fce4 	bl	80009dc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001014:	f00f fe76 	bl	8010d04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0x68>
	...

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b096      	sub	sp, #88	; 0x58
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2244      	movs	r2, #68	; 0x44
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f013 fc20 	bl	8014870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800103e:	2000      	movs	r0, #0
 8001040:	f005 f948 	bl	80062d4 <HAL_PWREx_ControlVoltageScaling>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800104a:	f000 f893 	bl	8001174 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800104e:	f005 f901 	bl	8006254 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <SystemClock_Config+0xcc>)
 8001054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <SystemClock_Config+0xcc>)
 800105a:	f023 0318 	bic.w	r3, r3, #24
 800105e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001062:	231c      	movs	r3, #28
 8001064:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800106a:	2301      	movs	r3, #1
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800106e:	2301      	movs	r3, #1
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001076:	2360      	movs	r3, #96	; 0x60
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800107e:	2301      	movs	r3, #1
 8001080:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001082:	2301      	movs	r3, #1
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001086:	233c      	movs	r3, #60	; 0x3c
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4618      	mov	r0, r3
 800109c:	f005 f9de 	bl	800645c <HAL_RCC_OscConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010a6:	f000 f865 	bl	8001174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010aa:	230f      	movs	r3, #15
 80010ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ae:	2303      	movs	r3, #3
 80010b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	2105      	movs	r1, #5
 80010c4:	4618      	mov	r0, r3
 80010c6:	f005 fdef 	bl	8006ca8 <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010d0:	f000 f850 	bl	8001174 <Error_Handler>
  }
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 80010d4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80010d8:	f007 fb18 	bl	800870c <HAL_RCCEx_EnableLSCO>
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010dc:	f007 fb80 	bl	80087e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010e0:	bf00      	nop
 80010e2:	3758      	adds	r7, #88	; 0x58
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000

080010ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a6      	sub	sp, #152	; 0x98
 80010f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2294      	movs	r2, #148	; 0x94
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f013 fbb9 	bl	8014870 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 80010fe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001102:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001104:	2300      	movs	r3, #0
 8001106:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800110c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001110:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001114:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001116:	2301      	movs	r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800111e:	2318      	movs	r3, #24
 8001120:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <PeriphCommonClock_Config+0x60>)
 8001130:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f006 f89b 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001140:	f000 f818 	bl	8001174 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3798      	adds	r7, #152	; 0x98
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	01110000 	.word	0x01110000

08001150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001162:	f001 f91d 	bl	80023a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40014800 	.word	0x40014800

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp1;
OPAMP_HandleTypeDef hopamp2;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <MX_OPAMP1_Init+0x4c>)
 8001188:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 8001192:	2208      	movs	r2, #8
 8001194:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_OPAMP1_Init+0x48>)
 80011b6:	f003 fed7 	bl	8004f68 <HAL_OPAMP_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 80011c0:	f7ff ffd8 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200027f0 	.word	0x200027f0
 80011cc:	40007800 	.word	0x40007800

080011d0 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <MX_OPAMP2_Init+0x4c>)
 80011d8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011e2:	2208      	movs	r2, #8
 80011e4:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <MX_OPAMP2_Init+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_OPAMP2_Init+0x48>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_OPAMP2_Init+0x48>)
 8001206:	f003 feaf 	bl	8004f68 <HAL_OPAMP_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8001210:	f7ff ffb0 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200027bc 	.word	0x200027bc
 800121c:	40007810 	.word	0x40007810

08001220 <HAL_OPAMP_MspInit>:

static uint32_t HAL_RCC_OPAMP_CLK_ENABLED=0;

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	; 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a40      	ldr	r2, [pc, #256]	; (8001340 <HAL_OPAMP_MspInit+0x120>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12e      	bne.n	80012a0 <HAL_OPAMP_MspInit+0x80>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* OPAMP1 clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 8001242:	4b40      	ldr	r3, [pc, #256]	; (8001344 <HAL_OPAMP_MspInit+0x124>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <HAL_OPAMP_MspInit+0x124>)
 800124a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <HAL_OPAMP_MspInit+0x124>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d10b      	bne.n	800126c <HAL_OPAMP_MspInit+0x4c>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 8001254:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4a3b      	ldr	r2, [pc, #236]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 800125a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800125e:	6593      	str	r3, [r2, #88]	; 0x58
 8001260:	4b39      	ldr	r3, [pc, #228]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126c:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001270:	4a35      	ldr	r2, [pc, #212]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA1     ------> OPAMP1_VINM
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001284:	230b      	movs	r3, #11
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129a:	f002 fdcb 	bl	8003e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 800129e:	e04a      	b.n	8001336 <HAL_OPAMP_MspInit+0x116>
  else if(opampHandle->Instance==OPAMP2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a29      	ldr	r2, [pc, #164]	; (800134c <HAL_OPAMP_MspInit+0x12c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d145      	bne.n	8001336 <HAL_OPAMP_MspInit+0x116>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_OPAMP_MspInit+0x124>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <HAL_OPAMP_MspInit+0x124>)
 80012b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <HAL_OPAMP_MspInit+0x124>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10b      	bne.n	80012d4 <HAL_OPAMP_MspInit+0xb4>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_OPAMP_MspInit+0x128>)
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f002 fd8b 	bl	8003e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800131e:	2301      	movs	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <HAL_OPAMP_MspInit+0x130>)
 8001332:	f002 fd7f 	bl	8003e34 <HAL_GPIO_Init>
}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	; 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40007800 	.word	0x40007800
 8001344:	20000a6c 	.word	0x20000a6c
 8001348:	40021000 	.word	0x40021000
 800134c:	40007810 	.word	0x40007810
 8001350:	48000400 	.word	0x48000400

08001354 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <MX_RTC_Init+0xb0>)
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <MX_RTC_Init+0xb4>)
 8001370:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001372:	4b24      	ldr	r3, [pc, #144]	; (8001404 <MX_RTC_Init+0xb0>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_RTC_Init+0xb0>)
 800137a:	227f      	movs	r2, #127	; 0x7f
 800137c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_RTC_Init+0xb0>)
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_RTC_Init+0xb0>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_RTC_Init+0xb0>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_RTC_Init+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001396:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_RTC_Init+0xb0>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800139c:	4819      	ldr	r0, [pc, #100]	; (8001404 <MX_RTC_Init+0xb0>)
 800139e:	f007 fd29 	bl	8008df4 <HAL_RTC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80013a8:	f7ff fee4 	bl	8001174 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	2201      	movs	r2, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <MX_RTC_Init+0xb0>)
 80013c8:	f007 fd8f 	bl	8008eea <HAL_RTC_SetTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80013d2:	f7ff fecf 	bl	8001174 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013d6:	2301      	movs	r3, #1
 80013d8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013da:	2301      	movs	r3, #1
 80013dc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80013de:	2301      	movs	r3, #1
 80013e0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2201      	movs	r2, #1
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_RTC_Init+0xb0>)
 80013ee:	f007 fe19 	bl	8009024 <HAL_RTC_SetDate>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80013f8:	f7ff febc 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20002824 	.word	0x20002824
 8001408:	40002800 	.word	0x40002800

0800140c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0a8      	sub	sp, #160	; 0xa0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2294      	movs	r2, #148	; 0x94
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f013 fa27 	bl	8014870 <memset>
  if(rtcHandle->Instance==RTC)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <HAL_RTC_MspInit+0x5c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d118      	bne.n	800145e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800142c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001430:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4618      	mov	r0, r3
 8001440:	f005 ff16 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800144a:	f7ff fe93 	bl	8001174 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <HAL_RTC_MspInit+0x60>)
 8001450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001454:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_RTC_MspInit+0x60>)
 8001456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	37a0      	adds	r7, #160	; 0xa0
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40002800 	.word	0x40002800
 800146c:	40021000 	.word	0x40021000

08001470 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <MX_SAI1_Init+0xac>)
 8001476:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <MX_SAI1_Init+0xb0>)
 8001478:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <MX_SAI1_Init+0xac>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001480:	4b26      	ldr	r3, [pc, #152]	; (800151c <MX_SAI1_Init+0xac>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_SAI1_Init+0xac>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <MX_SAI1_Init+0xac>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_SAI1_Init+0xac>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <MX_SAI1_Init+0xac>)
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <MX_SAI1_Init+0xb4>)
 800149c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_SAI1_Init+0xac>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_SAI1_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_SAI1_Init+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_SAI1_Init+0xac>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80014b6:	2302      	movs	r3, #2
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	4817      	ldr	r0, [pc, #92]	; (800151c <MX_SAI1_Init+0xac>)
 80014be:	f007 feef 	bl	80092a0 <HAL_SAI_InitProtocol>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_SAI1_Init+0x5c>
  {
    Error_Handler();
 80014c8:	f7ff fe54 	bl	8001174 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <MX_SAI1_Init+0xbc>)
 80014d0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <MX_SAI1_Init+0xb8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8001502:	2302      	movs	r3, #2
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_SAI1_Init+0xb8>)
 800150a:	f007 fec9 	bl	80092a0 <HAL_SAI_InitProtocol>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_SAI1_Init+0xa8>
  {
    Error_Handler();
 8001514:	f7ff fe2e 	bl	8001174 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200028dc 	.word	0x200028dc
 8001520:	40015404 	.word	0x40015404
 8001524:	0002ee00 	.word	0x0002ee00
 8001528:	20002848 	.word	0x20002848
 800152c:	40015424 	.word	0x40015424

08001530 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a32      	ldr	r2, [pc, #200]	; (8001608 <HAL_SAI_MspInit+0xd8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d134      	bne.n	80015ac <HAL_SAI_MspInit+0x7c>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_SAI_MspInit+0xdc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10b      	bne.n	8001562 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_SAI_MspInit+0xe0>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a30      	ldr	r2, [pc, #192]	; (8001610 <HAL_SAI_MspInit+0xe0>)
 8001550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_SAI_MspInit+0xe0>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_SAI_MspInit+0xdc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a28      	ldr	r2, [pc, #160]	; (800160c <HAL_SAI_MspInit+0xdc>)
 800156a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800156c:	2330      	movs	r3, #48	; 0x30
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800157c:	230d      	movs	r3, #13
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4823      	ldr	r0, [pc, #140]	; (8001614 <HAL_SAI_MspInit+0xe4>)
 8001588:	f002 fc54 	bl	8003e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800159c:	230d      	movs	r3, #13
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	481c      	ldr	r0, [pc, #112]	; (8001618 <HAL_SAI_MspInit+0xe8>)
 80015a8:	f002 fc44 	bl	8003e34 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_SAI_MspInit+0xec>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d124      	bne.n	8001600 <HAL_SAI_MspInit+0xd0>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_SAI_MspInit+0xdc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10b      	bne.n	80015d6 <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_SAI_MspInit+0xe0>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <HAL_SAI_MspInit+0xe0>)
 80015c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_SAI_MspInit+0xe0>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_SAI_MspInit+0xdc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_SAI_MspInit+0xdc>)
 80015de:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015e0:	2308      	movs	r3, #8
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015f0:	230d      	movs	r3, #13
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <HAL_SAI_MspInit+0xe4>)
 80015fc:	f002 fc1a 	bl	8003e34 <HAL_GPIO_Init>

    }
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40015404 	.word	0x40015404
 800160c:	20000a70 	.word	0x20000a70
 8001610:	40021000 	.word	0x40021000
 8001614:	48001000 	.word	0x48001000
 8001618:	48000800 	.word	0x48000800
 800161c:	40015424 	.word	0x40015424

08001620 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <MX_SDMMC1_SD_Init+0x40>)
 8001628:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 8001638:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <MX_SDMMC1_SD_Init+0x3c>)
 800164c:	2201      	movs	r2, #1
 800164e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20002970 	.word	0x20002970
 8001660:	50062400 	.word	0x50062400

08001664 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b0b0      	sub	sp, #192	; 0xc0
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	2294      	movs	r2, #148	; 0x94
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f013 f8f3 	bl	8014870 <memset>
  if(sdHandle->Instance==SDMMC1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_SD_MspInit+0x150>)
 8001690:	4293      	cmp	r3, r2
 8001692:	f040 808a 	bne.w	80017aa <HAL_SD_MspInit+0x146>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001696:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800169a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 800169c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 fde1 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80016b4:	f7ff fd5e 	bl	8001174 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016b8:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c4:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f4:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <HAL_SD_MspInit+0x154>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <HAL_SD_MspInit+0x154>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001704:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <HAL_SD_MspInit+0x154>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170c:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_SD_MspInit+0x154>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001718:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001732:	230c      	movs	r3, #12
 8001734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800173c:	4619      	mov	r1, r3
 800173e:	481f      	ldr	r0, [pc, #124]	; (80017bc <HAL_SD_MspInit+0x158>)
 8001740:	f002 fb78 	bl	8003e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001744:	2304      	movs	r3, #4
 8001746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800175c:	230c      	movs	r3, #12
 800175e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001762:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001766:	4619      	mov	r1, r3
 8001768:	4815      	ldr	r0, [pc, #84]	; (80017c0 <HAL_SD_MspInit+0x15c>)
 800176a:	f002 fb63 	bl	8003e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800176e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001788:	2308      	movs	r3, #8
 800178a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001792:	4619      	mov	r1, r3
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <HAL_SD_MspInit+0x160>)
 8001796:	f002 fb4d 	bl	8003e34 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2105      	movs	r1, #5
 800179e:	2031      	movs	r0, #49	; 0x31
 80017a0:	f001 fde2 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017a4:	2031      	movs	r0, #49	; 0x31
 80017a6:	f001 fdfb 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80017aa:	bf00      	nop
 80017ac:	37c0      	adds	r7, #192	; 0xc0
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	50062400 	.word	0x50062400
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48000400 	.word	0x48000400

080017c8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_SPI1_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_SPI1_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_SPI1_Init+0x74>)
 80017d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_SPI1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_SPI1_Init+0x74>)
 80017e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_SPI1_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_SPI1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_SPI1_Init+0x74>)
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_SPI1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_SPI1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_SPI1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_SPI1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_SPI1_Init+0x74>)
 8001816:	2207      	movs	r2, #7
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_SPI1_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_SPI1_Init+0x74>)
 8001822:	2208      	movs	r2, #8
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_SPI1_Init+0x74>)
 8001828:	f009 fdbd 	bl	800b3a6 <HAL_SPI_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001832:	f7ff fc9f 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200029f0 	.word	0x200029f0
 8001840:	40013000 	.word	0x40013000

08001844 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_SPI_MspInit+0x134>)
 8001862:	4293      	cmp	r3, r2
 8001864:	f040 8083 	bne.w	800196e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001868:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_SPI_MspInit+0x138>)
 800186a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186c:	4a43      	ldr	r2, [pc, #268]	; (800197c <HAL_SPI_MspInit+0x138>)
 800186e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001872:	6613      	str	r3, [r2, #96]	; 0x60
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_SPI_MspInit+0x138>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001880:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_SPI_MspInit+0x138>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	4a3d      	ldr	r2, [pc, #244]	; (800197c <HAL_SPI_MspInit+0x138>)
 8001886:	f043 0310 	orr.w	r3, r3, #16
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188c:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_SPI_MspInit+0x138>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001898:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018aa:	2305      	movs	r3, #5
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4832      	ldr	r0, [pc, #200]	; (8001980 <HAL_SPI_MspInit+0x13c>)
 80018b6:	f002 fabd 	bl	8003e34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel7;
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018bc:	4a32      	ldr	r2, [pc, #200]	; (8001988 <HAL_SPI_MspInit+0x144>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018c2:	220a      	movs	r2, #10
 80018c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c6:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80018f0:	4824      	ldr	r0, [pc, #144]	; (8001984 <HAL_SPI_MspInit+0x140>)
 80018f2:	f002 f81d 	bl	8003930 <HAL_DMA_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80018fc:	f7ff fc3a 	bl	8001174 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_SPI_MspInit+0x140>)
 8001904:	659a      	str	r2, [r3, #88]	; 0x58
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_SPI_MspInit+0x140>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Channel1;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_SPI_MspInit+0x148>)
 800190e:	4a20      	ldr	r2, [pc, #128]	; (8001990 <HAL_SPI_MspInit+0x14c>)
 8001910:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001914:	220b      	movs	r2, #11
 8001916:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_SPI_MspInit+0x148>)
 800191a:	2210      	movs	r2, #16
 800191c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_SPI_MspInit+0x148>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_SPI_MspInit+0x148>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001942:	4812      	ldr	r0, [pc, #72]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001944:	f001 fff4 	bl	8003930 <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 800194e:	f7ff fc11 	bl	8001174 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_SPI_MspInit+0x148>)
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_SPI_MspInit+0x148>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2105      	movs	r1, #5
 8001962:	2023      	movs	r0, #35	; 0x23
 8001964:	f001 fd00 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001968:	2023      	movs	r0, #35	; 0x23
 800196a:	f001 fd19 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40013000 	.word	0x40013000
 800197c:	40021000 	.word	0x40021000
 8001980:	48001000 	.word	0x48001000
 8001984:	20002a54 	.word	0x20002a54
 8001988:	40020080 	.word	0x40020080
 800198c:	20002ab4 	.word	0x20002ab4
 8001990:	40020408 	.word	0x40020408

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_MspInit+0x4c>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6613      	str	r3, [r2, #96]	; 0x60
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_MspInit+0x4c>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_MspInit+0x4c>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f001 fcc9 	bl	8003368 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	201a      	movs	r0, #26
 80019fa:	f001 fcb5 	bl	8003368 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019fe:	201a      	movs	r0, #26
 8001a00:	f001 fcce 	bl	80033a0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_InitTick+0x9c>)
 8001a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_InitTick+0x9c>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_InitTick+0x9c>)
 8001a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a1c:	f107 0210 	add.w	r2, r7, #16
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 fb2e 	bl	8007088 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a2c:	f005 fb16 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8001a30:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_InitTick+0xa0>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0c9b      	lsrs	r3, r3, #18
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <HAL_InitTick+0xa8>)
 8001a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a4c:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a52:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001a60:	4809      	ldr	r0, [pc, #36]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a62:	f009 fe62 	bl	800b72a <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8001a6c:	4806      	ldr	r0, [pc, #24]	; (8001a88 <HAL_InitTick+0xa4>)
 8001a6e:	f009 febd 	bl	800b7ec <HAL_TIM_Base_Start_IT>
 8001a72:	4603      	mov	r3, r0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3730      	adds	r7, #48	; 0x30
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	431bde83 	.word	0x431bde83
 8001a88:	20002b14 	.word	0x20002b14
 8001a8c:	40014800 	.word	0x40014800

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA1_Channel7_IRQHandler+0x10>)
 8001ac2:	f002 f898 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20002a54 	.word	0x20002a54

08001ad0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001ad6:	f009 fef9 	bl	800b8cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20002b14 	.word	0x20002b14

08001ae4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <I2C1_EV_IRQHandler+0x10>)
 8001aea:	f002 fc0e 	bl	800430a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20002724 	.word	0x20002724

08001af8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <I2C1_ER_IRQHandler+0x10>)
 8001afe:	f002 fc1e 	bl	800433e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20002724 	.word	0x20002724

08001b0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <I2C2_EV_IRQHandler+0x10>)
 8001b12:	f002 fbfa 	bl	800430a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20002770 	.word	0x20002770

08001b20 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <I2C2_ER_IRQHandler+0x10>)
 8001b26:	f002 fc0a 	bl	800433e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20002770 	.word	0x20002770

08001b34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <SPI1_IRQHandler+0x10>)
 8001b3a:	f009 fcd7 	bl	800b4ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200029f0 	.word	0x200029f0

08001b48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <USART1_IRQHandler+0x10>)
 8001b4e:	f00a f90d 	bl	800bd6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20002e00 	.word	0x20002e00

08001b5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <USART2_IRQHandler+0x10>)
 8001b62:	f00a f903 	bl	800bd6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20002e90 	.word	0x20002e90

08001b70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <USART3_IRQHandler+0x10>)
 8001b76:	f00a f8f9 	bl	800bd6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20002bc0 	.word	0x20002bc0

08001b84 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <SDMMC1_IRQHandler+0x10>)
 8001b8a:	f008 f991 	bl	8009eb0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20002970 	.word	0x20002970

08001b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <TIM6_DAC_IRQHandler+0x10>)
 8001b9e:	f001 fd19 	bl	80035d4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200026c0 	.word	0x200026c0

08001bac <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA2_Channel1_IRQHandler+0x10>)
 8001bb2:	f002 f820 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20002ab4 	.word	0x20002ab4

08001bc0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <DMA2_Channel4_IRQHandler+0x10>)
 8001bc6:	f002 f816 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20002d40 	.word	0x20002d40

08001bd4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <DMA2_Channel5_IRQHandler+0x10>)
 8001bda:	f002 f80c 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20002ce0 	.word	0x20002ce0

08001be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <OTG_FS_IRQHandler+0x10>)
 8001bee:	f003 fbe4 	bl	80053ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200048a0 	.word	0x200048a0

08001bfc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DMA2_Channel6_IRQHandler+0x10>)
 8001c02:	f001 fff8 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20002b60 	.word	0x20002b60

08001c10 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <DMA2_Channel7_IRQHandler+0x10>)
 8001c16:	f001 ffee 	bl	8003bf6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20002da0 	.word	0x20002da0

08001c24 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <I2C4_EV_IRQHandler+0x10>)
 8001c2a:	f002 fb6e 	bl	800430a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200026d8 	.word	0x200026d8

08001c38 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <I2C4_ER_IRQHandler+0x10>)
 8001c3e:	f002 fb7e 	bl	800433e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200026d8 	.word	0x200026d8

08001c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <SystemInit+0x5c>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <SystemInit+0x5c>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <SystemInit+0x60>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a11      	ldr	r2, [pc, #68]	; (8001cac <SystemInit+0x60>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <SystemInit+0x60>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <SystemInit+0x60>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <SystemInit+0x60>)
 8001c78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <SystemInit+0x60>)
 8001c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <SystemInit+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <SystemInit+0x60>)
 8001c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SystemInit+0x60>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	40021000 	.word	0x40021000

08001cb0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <MX_LPUART1_UART_Init+0x94>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cbc:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <MX_LPUART1_UART_Init+0x98>)
 8001cbe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cc6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cf8:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001cfa:	f009 ffe7 	bl	800bccc <HAL_UART_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001d04:	f7ff fa36 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	480d      	ldr	r0, [pc, #52]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001d0c:	f00a ff66 	bl	800cbdc <HAL_UARTEx_SetTxFifoThreshold>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001d16:	f7ff fa2d 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4808      	ldr	r0, [pc, #32]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001d1e:	f00a ff9b 	bl	800cc58 <HAL_UARTEx_SetRxFifoThreshold>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001d28:	f7ff fa24 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_LPUART1_UART_Init+0x90>)
 8001d2e:	f00a ff1c 	bl	800cb6a <HAL_UARTEx_DisableFifoMode>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001d38:	f7ff fa1c 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20002c50 	.word	0x20002c50
 8001d44:	40008000 	.word	0x40008000
 8001d48:	00033324 	.word	0x00033324

08001d4c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d50:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d52:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <MX_USART1_UART_Init+0x98>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d78:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d7c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d96:	4812      	ldr	r0, [pc, #72]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001d98:	f009 ff98 	bl	800bccc <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001da2:	f7ff f9e7 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da6:	2100      	movs	r1, #0
 8001da8:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001daa:	f00a ff17 	bl	800cbdc <HAL_UARTEx_SetTxFifoThreshold>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001db4:	f7ff f9de 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001db8:	2100      	movs	r1, #0
 8001dba:	4809      	ldr	r0, [pc, #36]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001dbc:	f00a ff4c 	bl	800cc58 <HAL_UARTEx_SetRxFifoThreshold>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001dc6:	f7ff f9d5 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART1_UART_Init+0x94>)
 8001dcc:	f00a fecd 	bl	800cb6a <HAL_UARTEx_DisableFifoMode>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001dd6:	f7ff f9cd 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20002e00 	.word	0x20002e00
 8001de4:	40013800 	.word	0x40013800

08001de8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001dee:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <MX_USART2_UART_Init+0x98>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df2:	4b22      	ldr	r3, [pc, #136]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e14:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e18:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e32:	4812      	ldr	r0, [pc, #72]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e34:	f009 ff4a 	bl	800bccc <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001e3e:	f7ff f999 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e46:	f00a fec9 	bl	800cbdc <HAL_UARTEx_SetTxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001e50:	f7ff f990 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e54:	2100      	movs	r1, #0
 8001e56:	4809      	ldr	r0, [pc, #36]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e58:	f00a fefe 	bl	800cc58 <HAL_UARTEx_SetRxFifoThreshold>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001e62:	f7ff f987 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_USART2_UART_Init+0x94>)
 8001e68:	f00a fe7f 	bl	800cb6a <HAL_UARTEx_DisableFifoMode>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001e72:	f7ff f97f 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20002e90 	.word	0x20002e90
 8001e80:	40004400 	.word	0x40004400

08001e84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e8a:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <MX_USART3_UART_Init+0x94>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ecc:	4811      	ldr	r0, [pc, #68]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ece:	f009 fefd 	bl	800bccc <HAL_UART_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ed8:	f7ff f94c 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001edc:	2100      	movs	r1, #0
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ee0:	f00a fe7c 	bl	800cbdc <HAL_UARTEx_SetTxFifoThreshold>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001eea:	f7ff f943 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ef2:	f00a feb1 	bl	800cc58 <HAL_UARTEx_SetRxFifoThreshold>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001efc:	f7ff f93a 	bl	8001174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <MX_USART3_UART_Init+0x90>)
 8001f02:	f00a fe32 	bl	800cb6a <HAL_UARTEx_DisableFifoMode>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f0c:	f7ff f932 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20002bc0 	.word	0x20002bc0
 8001f18:	40004800 	.word	0x40004800

08001f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0b4      	sub	sp, #208	; 0xd0
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f38:	2294      	movs	r2, #148	; 0x94
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f012 fc97 	bl	8014870 <memset>
  if(uartHandle->Instance==LPUART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a70      	ldr	r2, [pc, #448]	; (8002108 <HAL_UART_MspInit+0x1ec>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d13e      	bne.n	8001fca <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f005 f989 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f64:	f7ff f906 	bl	8001174 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f68:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f80:	4b62      	ldr	r3, [pc, #392]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	4a61      	ldr	r2, [pc, #388]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8c:	4b5f      	ldr	r3, [pc, #380]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8001f98:	f004 fa50 	bl	800643c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001f9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4853      	ldr	r0, [pc, #332]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 8001fc4:	f001 ff36 	bl	8003e34 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fc8:	e193      	b.n	80022f2 <HAL_UART_MspInit+0x3d6>
  else if(uartHandle->Instance==USART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a51      	ldr	r2, [pc, #324]	; (8002114 <HAL_UART_MspInit+0x1f8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	f040 80a9 	bne.w	8002128 <HAL_UART_MspInit+0x20c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f005 f944 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001fee:	f7ff f8c1 	bl	8001174 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff2:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff6:	4a45      	ldr	r2, [pc, #276]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8001ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800200a:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_UART_MspInit+0x1f0>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a3f      	ldr	r2, [pc, #252]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8002010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_UART_MspInit+0x1f0>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8002022:	f004 fa0b 	bl	800643c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002026:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800202a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002040:	2307      	movs	r3, #7
 8002042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002046:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800204a:	4619      	mov	r1, r3
 800204c:	4830      	ldr	r0, [pc, #192]	; (8002110 <HAL_UART_MspInit+0x1f4>)
 800204e:	f001 fef1 	bl	8003e34 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel4;
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8002054:	4a31      	ldr	r2, [pc, #196]	; (800211c <HAL_UART_MspInit+0x200>)
 8002056:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 800205a:	2218      	movs	r2, #24
 800205c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002088:	4823      	ldr	r0, [pc, #140]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 800208a:	f001 fc51 	bl	8003930 <HAL_DMA_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8002094:	f7ff f86e 	bl	8001174 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 800209c:	67da      	str	r2, [r3, #124]	; 0x7c
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_UART_MspInit+0x1fc>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA2_Channel5;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_UART_MspInit+0x208>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020ac:	2219      	movs	r2, #25
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020b2:	2210      	movs	r2, #16
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80020da:	4811      	ldr	r0, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020dc:	f001 fc28 	bl	8003930 <HAL_DMA_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 80020e6:	f7ff f845 	bl	8001174 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020ee:	679a      	str	r2, [r3, #120]	; 0x78
 80020f0:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_UART_MspInit+0x204>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	2025      	movs	r0, #37	; 0x25
 80020fc:	f001 f934 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002100:	2025      	movs	r0, #37	; 0x25
 8002102:	f001 f94d 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 8002106:	e0f4      	b.n	80022f2 <HAL_UART_MspInit+0x3d6>
 8002108:	40008000 	.word	0x40008000
 800210c:	40021000 	.word	0x40021000
 8002110:	48001800 	.word	0x48001800
 8002114:	40013800 	.word	0x40013800
 8002118:	20002d40 	.word	0x20002d40
 800211c:	40020444 	.word	0x40020444
 8002120:	20002ce0 	.word	0x20002ce0
 8002124:	40020458 	.word	0x40020458
  else if(uartHandle->Instance==USART2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a73      	ldr	r2, [pc, #460]	; (80022fc <HAL_UART_MspInit+0x3e0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f040 8096 	bne.w	8002260 <HAL_UART_MspInit+0x344>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002134:	2302      	movs	r3, #2
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002138:	2300      	movs	r3, #0
 800213a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002140:	4618      	mov	r0, r3
 8002142:	f005 f895 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_MspInit+0x234>
      Error_Handler();
 800214c:	f7ff f812 	bl	8001174 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	6593      	str	r3, [r2, #88]	; 0x58
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	4a64      	ldr	r2, [pc, #400]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002180:	2378      	movs	r3, #120	; 0x78
 8002182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002198:	2307      	movs	r3, #7
 800219a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800219e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a2:	4619      	mov	r1, r3
 80021a4:	4857      	ldr	r0, [pc, #348]	; (8002304 <HAL_UART_MspInit+0x3e8>)
 80021a6:	f001 fe45 	bl	8003e34 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel6;
 80021aa:	4b57      	ldr	r3, [pc, #348]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_UART_MspInit+0x3f0>)
 80021ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80021b0:	4b55      	ldr	r3, [pc, #340]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021b2:	221a      	movs	r2, #26
 80021b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c8:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021d4:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021e0:	4849      	ldr	r0, [pc, #292]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021e2:	f001 fba5 	bl	8003930 <HAL_DMA_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 80021ec:	f7fe ffc2 	bl	8001174 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a45      	ldr	r2, [pc, #276]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021f4:	67da      	str	r2, [r3, #124]	; 0x7c
 80021f6:	4a44      	ldr	r2, [pc, #272]	; (8002308 <HAL_UART_MspInit+0x3ec>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA2_Channel7;
 80021fc:	4b44      	ldr	r3, [pc, #272]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 80021fe:	4a45      	ldr	r2, [pc, #276]	; (8002314 <HAL_UART_MspInit+0x3f8>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002204:	221b      	movs	r2, #27
 8002206:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 800220a:	2210      	movs	r2, #16
 800220c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800222c:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002232:	4837      	ldr	r0, [pc, #220]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002234:	f001 fb7c 	bl	8003930 <HAL_DMA_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_UART_MspInit+0x326>
      Error_Handler();
 800223e:	f7fe ff99 	bl	8001174 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 8002246:	679a      	str	r2, [r3, #120]	; 0x78
 8002248:	4a31      	ldr	r2, [pc, #196]	; (8002310 <HAL_UART_MspInit+0x3f4>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2105      	movs	r1, #5
 8002252:	2026      	movs	r0, #38	; 0x26
 8002254:	f001 f888 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002258:	2026      	movs	r0, #38	; 0x26
 800225a:	f001 f8a1 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 800225e:	e048      	b.n	80022f2 <HAL_UART_MspInit+0x3d6>
  else if(uartHandle->Instance==USART3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <HAL_UART_MspInit+0x3fc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d143      	bne.n	80022f2 <HAL_UART_MspInit+0x3d6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800226a:	2304      	movs	r3, #4
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800226e:	2300      	movs	r3, #0
 8002270:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fffa 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 8002282:	f7fe ff77 	bl	8001174 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6593      	str	r3, [r2, #88]	; 0x58
 8002292:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_UART_MspInit+0x3e4>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022d0:	2307      	movs	r3, #7
 80022d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022da:	4619      	mov	r1, r3
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <HAL_UART_MspInit+0x3e8>)
 80022de:	f001 fda9 	bl	8003e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2105      	movs	r1, #5
 80022e6:	2027      	movs	r0, #39	; 0x27
 80022e8:	f001 f83e 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022ec:	2027      	movs	r0, #39	; 0x27
 80022ee:	f001 f857 	bl	80033a0 <HAL_NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	37d0      	adds	r7, #208	; 0xd0
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40004400 	.word	0x40004400
 8002300:	40021000 	.word	0x40021000
 8002304:	48000c00 	.word	0x48000c00
 8002308:	20002b60 	.word	0x20002b60
 800230c:	4002046c 	.word	0x4002046c
 8002310:	20002da0 	.word	0x20002da0
 8002314:	40020480 	.word	0x40020480
 8002318:	40004800 	.word	0x40004800

0800231c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002354 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002320:	f7ff fc94 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002324:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002326:	e003      	b.n	8002330 <LoopCopyDataInit>

08002328 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800232a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800232c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800232e:	3104      	adds	r1, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002334:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002336:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002338:	d3f6      	bcc.n	8002328 <CopyDataInit>
	ldr	r2, =_sbss
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <LoopForever+0x12>)
	b	LoopFillZerobss
 800233c:	e002      	b.n	8002344 <LoopFillZerobss>

0800233e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800233e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002340:	f842 3b04 	str.w	r3, [r2], #4

08002344 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <LoopForever+0x16>)
	cmp	r2, r3
 8002346:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002348:	d3f9      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800234a:	f012 fa5d 	bl	8014808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800234e:	f7fe fe2f 	bl	8000fb0 <main>

08002352 <LoopForever>:

LoopForever:
    b LoopForever
 8002352:	e7fe      	b.n	8002352 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002354:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002358:	08014bcc 	.word	0x08014bcc
	ldr	r0, =_sdata
 800235c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002360:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8002364:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002368:	20004cb4 	.word	0x20004cb4

0800236c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC1_IRQHandler>

0800236e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 ffea 	bl	8003352 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237e:	200f      	movs	r0, #15
 8002380:	f7ff fb30 	bl	80019e4 <HAL_InitTick>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	71fb      	strb	r3, [r7, #7]
 800238e:	e001      	b.n	8002394 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002390:	f7ff fb00 	bl	8001994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002394:	79fb      	ldrb	r3, [r7, #7]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20002f20 	.word	0x20002f20

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20002f20 	.word	0x20002f20

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000008 	.word	0x20000008

08002428 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3360      	adds	r3, #96	; 0x60
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <LL_ADC_SetOffset+0x44>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	4313      	orrs	r3, r2
 80024c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	03fff000 	.word	0x03fff000

080024d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3360      	adds	r3, #96	; 0x60
 80024e6:	461a      	mov	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800252e:	bf00      	nop
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	615a      	str	r2, [r3, #20]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3330      	adds	r3, #48	; 0x30
 8002570:	461a      	mov	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	4413      	add	r3, r2
 800257e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	211f      	movs	r1, #31
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 011f 	and.w	r1, r3, #31
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	431a      	orrs	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3314      	adds	r3, #20
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	0e5b      	lsrs	r3, r3, #25
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	0d1b      	lsrs	r3, r3, #20
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2107      	movs	r1, #7
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	401a      	ands	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0d1b      	lsrs	r3, r3, #20
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	431a      	orrs	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0318 	and.w	r3, r3, #24
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002634:	40d9      	lsrs	r1, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	400b      	ands	r3, r1
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	0007ffff 	.word	0x0007ffff

08002658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6093      	str	r3, [r2, #8]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002690:	d101      	bne.n	8002696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80026b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026e0:	d101      	bne.n	80026e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <LL_ADC_IsEnabled+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_ADC_IsEnabled+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d101      	bne.n	8002732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12f      	b.n	80029e2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fd ffbf 	bl	8000714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff67 	bl	800267c <LL_ADC_IsDeepPowerDownEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff4d 	bl	8002658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff82 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d115      	bne.n	80027fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff66 	bl	80026a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b84      	ldr	r3, [pc, #528]	; (80029ec <HAL_ADC_Init+0x284>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a84      	ldr	r2, [pc, #528]	; (80029f0 <HAL_ADC_Init+0x288>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ec:	e002      	b.n	80027f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f9      	bne.n	80027ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff64 	bl	80026cc <LL_ADC_IsInternalRegulatorEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10d      	bne.n	8002826 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f043 0210 	orr.w	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff75 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002830:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 80c8 	bne.w	80029d0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 80c4 	bne.w	80029d0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002850:	f043 0202 	orr.w	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff49 	bl	80026f4 <LL_ADC_IsEnabled>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002868:	4862      	ldr	r0, [pc, #392]	; (80029f4 <HAL_ADC_Init+0x28c>)
 800286a:	f7ff ff43 	bl	80026f4 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d105      	bne.n	8002880 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	485f      	ldr	r0, [pc, #380]	; (80029f8 <HAL_ADC_Init+0x290>)
 800287c:	f7ff fdd4 	bl	8002428 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7e5b      	ldrb	r3, [r3, #25]
 8002884:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800288a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002890:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002896:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	3b01      	subs	r3, #1
 80028b4:	045b      	lsls	r3, r3, #17
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_ADC_Init+0x294>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff12 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 80028f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff1f 	bl	8002740 <LL_ADC_INJ_IsConversionOngoing>
 8002902:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d140      	bne.n	800298c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13d      	bne.n	800298c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7e1b      	ldrb	r3, [r3, #24]
 8002918:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800291a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002922:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002932:	f023 0306 	bic.w	r3, r3, #6
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	69b9      	ldr	r1, [r7, #24]
 800293c:	430b      	orrs	r3, r1
 800293e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002946:	2b01      	cmp	r3, #1
 8002948:	d118      	bne.n	800297c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002960:	4311      	orrs	r1, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800296c:	430a      	orrs	r2, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	e007      	b.n	800298c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d10c      	bne.n	80029ae <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f023 010f 	bic.w	r1, r3, #15
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	1e5a      	subs	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
 80029ac:	e007      	b.n	80029be <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 020f 	bic.w	r2, r2, #15
 80029bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	f043 0201 	orr.w	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	659a      	str	r2, [r3, #88]	; 0x58
 80029ce:	e007      	b.n	80029e0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f043 0210 	orr.w	r2, r3, #16
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000000 	.word	0x20000000
 80029f0:	053e2d63 	.word	0x053e2d63
 80029f4:	50040000 	.word	0x50040000
 80029f8:	50040300 	.word	0x50040300
 80029fc:	fff0c007 	.word	0xfff0c007

08002a00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0b6      	sub	sp, #216	; 0xd8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x22>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e3d5      	b.n	80031ce <HAL_ADC_ConfigChannel+0x7ce>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fe73 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 83ba 	bne.w	80031b0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d824      	bhi.n	8002a8e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	3b02      	subs	r3, #2
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d81b      	bhi.n	8002a86 <HAL_ADC_ConfigChannel+0x86>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_ADC_ConfigChannel+0x54>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a6d 	.word	0x08002a6d
 8002a5c:	08002a75 	.word	0x08002a75
 8002a60:	08002a7d 	.word	0x08002a7d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	220c      	movs	r2, #12
 8002a68:	605a      	str	r2, [r3, #4]
          break;
 8002a6a:	e011      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2212      	movs	r2, #18
 8002a70:	605a      	str	r2, [r3, #4]
          break;
 8002a72:	e00d      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2218      	movs	r2, #24
 8002a78:	605a      	str	r2, [r3, #4]
          break;
 8002a7a:	e009      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a82:	605a      	str	r2, [r3, #4]
          break;
 8002a84:	e004      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2206      	movs	r2, #6
 8002a8a:	605a      	str	r2, [r3, #4]
          break;
 8002a8c:	e000      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a8e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f7ff fd5f 	bl	8002560 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fe37 	bl	800271a <LL_ADC_REG_IsConversionOngoing>
 8002aac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe43 	bl	8002740 <LL_ADC_INJ_IsConversionOngoing>
 8002aba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002abe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 81c1 	bne.w	8002e4a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f040 81bc 	bne.w	8002e4a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ada:	d10f      	bne.n	8002afc <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7ff fd66 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fd20 	bl	800253a <LL_ADC_SetSamplingTimeCommonConfig>
 8002afa:	e00e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f7ff fd55 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fd10 	bl	800253a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d00a      	beq.n	8002b52 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6919      	ldr	r1, [r3, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b4c:	f7ff fca0 	bl	8002490 <LL_ADC_SetOffset>
 8002b50:	e17b      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fcbd 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x17e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fcb2 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	0e9b      	lsrs	r3, r3, #26
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	e01e      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x1bc>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fca7 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e004      	b.n	8002bba <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d4>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	e018      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x206>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e004      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d106      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fc76 	bl	8002504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fc5a 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x244>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2101      	movs	r1, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fc4f 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	0e9b      	lsrs	r3, r3, #26
 8002c3e:	f003 021f 	and.w	r2, r3, #31
 8002c42:	e01e      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x282>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fc44 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002c72:	2320      	movs	r3, #32
 8002c74:	e004      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002c76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x29a>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0e9b      	lsrs	r3, r3, #26
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	e018      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x2cc>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	e004      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002cc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fc13 	bl	8002504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fbf7 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x30a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fbec 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	e01e      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x348>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fbe1 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e004      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002d3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x360>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	e016      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x38e>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e004      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d106      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fbb2 	bl	8002504 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2103      	movs	r1, #3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb96 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x3cc>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2103      	movs	r1, #3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fb8b 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	f003 021f 	and.w	r2, r3, #31
 8002dca:	e017      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x3fc>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2103      	movs	r1, #3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fb80 	bl	80024d8 <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002dee:	2320      	movs	r3, #32
 8002df0:	e003      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x414>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	e011      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x438>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d106      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2103      	movs	r1, #3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fb5d 	bl	8002504 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fc50 	bl	80026f4 <LL_ADC_IsEnabled>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8140 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f7ff fbd1 	bl	8002610 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a8f      	ldr	r2, [pc, #572]	; (80030b0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f040 8131 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x4a2>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	3301      	adds	r3, #1
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	2b09      	cmp	r3, #9
 8002e98:	bf94      	ite	ls
 8002e9a:	2301      	movls	r3, #1
 8002e9c:	2300      	movhi	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	e019      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x4d6>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002eb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d079      	beq.n	8002fce <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d107      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x4f6>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	3301      	adds	r3, #1
 8002eee:	069b      	lsls	r3, r3, #26
 8002ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef4:	e015      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x522>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e003      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	069b      	lsls	r3, r3, #26
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x542>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	e017      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x572>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e003      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	3301      	adds	r3, #1
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	ea42 0103 	orr.w	r1, r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x598>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	0e9b      	lsrs	r3, r3, #26
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 021f 	and.w	r2, r3, #31
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	051b      	lsls	r3, r3, #20
 8002f96:	e018      	b.n	8002fca <HAL_ADC_ConfigChannel+0x5ca>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	e003      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	e081      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x5ea>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	069b      	lsls	r3, r3, #26
 8002fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fe8:	e015      	b.n	8003016 <HAL_ADC_ConfigChannel+0x616>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e003      	b.n	800300e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	fab3 f383 	clz	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3301      	adds	r3, #1
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x636>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	0e9b      	lsrs	r3, r3, #26
 8003028:	3301      	adds	r3, #1
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f303 	lsl.w	r3, r1, r3
 8003034:	e017      	b.n	8003066 <HAL_ADC_ConfigChannel+0x666>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	61fb      	str	r3, [r7, #28]
  return result;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	2101      	movs	r1, #1
 8003062:	fa01 f303 	lsl.w	r3, r1, r3
 8003066:	ea42 0103 	orr.w	r1, r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x692>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	3301      	adds	r3, #1
 800307e:	f003 021f 	and.w	r2, r3, #31
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	3b1e      	subs	r3, #30
 800308a:	051b      	lsls	r3, r3, #20
 800308c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003090:	e01e      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x6d0>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	613b      	str	r3, [r7, #16]
  return result;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d104      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e006      	b.n	80030bc <HAL_ADC_ConfigChannel+0x6bc>
 80030ae:	bf00      	nop
 80030b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	3b1e      	subs	r3, #30
 80030ca:	051b      	lsls	r3, r3, #20
 80030cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d0:	430b      	orrs	r3, r1
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7ff fa6e 	bl	80025b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <HAL_ADC_ConfigChannel+0x7d8>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d06c      	beq.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e8:	483c      	ldr	r0, [pc, #240]	; (80031dc <HAL_ADC_ConfigChannel+0x7dc>)
 80030ea:	f7ff f9c3 	bl	8002474 <LL_ADC_GetCommonPathInternalCh>
 80030ee:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_ADC_ConfigChannel+0x7e0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d127      	bne.n	800314c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d121      	bne.n	800314c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a35      	ldr	r2, [pc, #212]	; (80031e4 <HAL_ADC_ConfigChannel+0x7e4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d157      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003116:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800311a:	4619      	mov	r1, r3
 800311c:	482f      	ldr	r0, [pc, #188]	; (80031dc <HAL_ADC_ConfigChannel+0x7dc>)
 800311e:	f7ff f996 	bl	800244e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	4a30      	ldr	r2, [pc, #192]	; (80031ec <HAL_ADC_ConfigChannel+0x7ec>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800313c:	e002      	b.n	8003144 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b01      	subs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f9      	bne.n	800313e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800314a:	e03a      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d113      	bne.n	800317e <HAL_ADC_ConfigChannel+0x77e>
 8003156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800315a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d12a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003174:	4619      	mov	r1, r3
 8003176:	4819      	ldr	r0, [pc, #100]	; (80031dc <HAL_ADC_ConfigChannel+0x7dc>)
 8003178:	f7ff f969 	bl	800244e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800317c:	e021      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d11c      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800318c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_ADC_ConfigChannel+0x7e4>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800319e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031a6:	4619      	mov	r1, r3
 80031a8:	480c      	ldr	r0, [pc, #48]	; (80031dc <HAL_ADC_ConfigChannel+0x7dc>)
 80031aa:	f7ff f950 	bl	800244e <LL_ADC_SetCommonPathInternalCh>
 80031ae:	e008      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80031ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	37d8      	adds	r7, #216	; 0xd8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	80080000 	.word	0x80080000
 80031dc:	50040300 	.word	0x50040300
 80031e0:	c7520000 	.word	0xc7520000
 80031e4:	50040000 	.word	0x50040000
 80031e8:	20000000 	.word	0x20000000
 80031ec:	053e2d63 	.word	0x053e2d63
 80031f0:	cb840000 	.word	0xcb840000
 80031f4:	80000001 	.word	0x80000001

080031f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <__NVIC_GetPriorityGrouping+0x18>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 0307 	and.w	r3, r3, #7
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	2b00      	cmp	r3, #0
 800326c:	db0b      	blt.n	8003286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4907      	ldr	r1, [pc, #28]	; (8003294 <__NVIC_EnableIRQ+0x38>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2001      	movs	r0, #1
 800327e:	fa00 f202 	lsl.w	r2, r0, r2
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	db0a      	blt.n	80032c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	490c      	ldr	r1, [pc, #48]	; (80032e4 <__NVIC_SetPriority+0x4c>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c0:	e00a      	b.n	80032d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4908      	ldr	r1, [pc, #32]	; (80032e8 <__NVIC_SetPriority+0x50>)
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3b04      	subs	r3, #4
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	761a      	strb	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000e100 	.word	0xe000e100
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	bf28      	it	cs
 800330a:	2304      	movcs	r3, #4
 800330c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3304      	adds	r3, #4
 8003312:	2b06      	cmp	r3, #6
 8003314:	d902      	bls.n	800331c <NVIC_EncodePriority+0x30>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3b03      	subs	r3, #3
 800331a:	e000      	b.n	800331e <NVIC_EncodePriority+0x32>
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43d9      	mvns	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	4313      	orrs	r3, r2
         );
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff4c 	bl	80031f8 <__NVIC_SetPriorityGrouping>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800337a:	f7ff ff61 	bl	8003240 <__NVIC_GetPriorityGrouping>
 800337e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	6978      	ldr	r0, [r7, #20]
 8003386:	f7ff ffb1 	bl	80032ec <NVIC_EncodePriority>
 800338a:	4602      	mov	r2, r0
 800338c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff80 	bl	8003298 <__NVIC_SetPriority>
}
 8003398:	bf00      	nop
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff54 	bl	800325c <__NVIC_EnableIRQ>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e054      	b.n	8003478 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	7f5b      	ldrb	r3, [r3, #29]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd f9fa 	bl	80007d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	791b      	ldrb	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_CRC_Init+0xc4>)
 80033f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0218 	bic.w	r2, r2, #24
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	e00c      	b.n	8003426 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	461a      	mov	r2, r3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f834 	bl	8003484 <HAL_CRCEx_Polynomial_Set>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e028      	b.n	8003478 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	795b      	ldrb	r3, [r3, #5]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d105      	bne.n	800343a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003436:	611a      	str	r2, [r3, #16]
 8003438:	e004      	b.n	8003444 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6912      	ldr	r2, [r2, #16]
 8003442:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	04c11db7 	.word	0x04c11db7

08003484 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003494:	231f      	movs	r3, #31
 8003496:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003498:	bf00      	nop
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	613a      	str	r2, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_CRCEx_Polynomial_Set+0x16>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b18      	cmp	r3, #24
 80034bc:	d846      	bhi.n	800354c <HAL_CRCEx_Polynomial_Set+0xc8>
 80034be:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	08003553 	.word	0x08003553
 80034c8:	0800354d 	.word	0x0800354d
 80034cc:	0800354d 	.word	0x0800354d
 80034d0:	0800354d 	.word	0x0800354d
 80034d4:	0800354d 	.word	0x0800354d
 80034d8:	0800354d 	.word	0x0800354d
 80034dc:	0800354d 	.word	0x0800354d
 80034e0:	0800354d 	.word	0x0800354d
 80034e4:	08003541 	.word	0x08003541
 80034e8:	0800354d 	.word	0x0800354d
 80034ec:	0800354d 	.word	0x0800354d
 80034f0:	0800354d 	.word	0x0800354d
 80034f4:	0800354d 	.word	0x0800354d
 80034f8:	0800354d 	.word	0x0800354d
 80034fc:	0800354d 	.word	0x0800354d
 8003500:	0800354d 	.word	0x0800354d
 8003504:	08003535 	.word	0x08003535
 8003508:	0800354d 	.word	0x0800354d
 800350c:	0800354d 	.word	0x0800354d
 8003510:	0800354d 	.word	0x0800354d
 8003514:	0800354d 	.word	0x0800354d
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800354d 	.word	0x0800354d
 8003520:	0800354d 	.word	0x0800354d
 8003524:	08003529 	.word	0x08003529
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b06      	cmp	r3, #6
 800352c:	d913      	bls.n	8003556 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003532:	e010      	b.n	8003556 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b07      	cmp	r3, #7
 8003538:	d90f      	bls.n	800355a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800353e:	e00c      	b.n	800355a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d90b      	bls.n	800355e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800354a:	e008      	b.n	800355e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	75fb      	strb	r3, [r7, #23]
      break;
 8003550:	e006      	b.n	8003560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003552:	bf00      	nop
 8003554:	e004      	b.n	8003560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800355e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10d      	bne.n	8003582 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 0118 	bic.w	r1, r3, #24
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003582:	7dfb      	ldrb	r3, [r7, #23]
}
 8003584:	4618      	mov	r0, r3
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e014      	b.n	80035cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd f96e 	bl	8000894 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	d120      	bne.n	800362e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fa:	d118      	bne.n	800362e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2204      	movs	r2, #4
 8003600:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003616:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003626:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f82d 	bl	8003688 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003638:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800363c:	d120      	bne.n	8003680 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364c:	d118      	bne.n	8003680 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f043 0202 	orr.w	r2, r3, #2
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003678:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f94e 	bl	800391c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	795b      	ldrb	r3, [r3, #5]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_DAC_ConfigChannel+0x1c>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e12a      	b.n	800390e <HAL_DAC_ConfigChannel+0x272>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2202      	movs	r2, #2
 80036c2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d174      	bne.n	80037b6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80036cc:	f7fe fe7c 	bl	80023c8 <HAL_GetTick>
 80036d0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d134      	bne.n	8003742 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036d8:	e011      	b.n	80036fe <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036da:	f7fe fe75 	bl	80023c8 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d90a      	bls.n	80036fe <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f043 0208 	orr.w	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2203      	movs	r2, #3
 80036f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e107      	b.n	800390e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e6      	bne.n	80036da <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800370c:	2001      	movs	r0, #1
 800370e:	f7fe fe67 	bl	80023e0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	69d2      	ldr	r2, [r2, #28]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
 800371c:	e01e      	b.n	800375c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800371e:	f7fe fe53 	bl	80023c8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d90a      	bls.n	8003742 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f043 0208 	orr.w	r2, r3, #8
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2203      	movs	r2, #3
 800373c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0e5      	b.n	800390e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	2b00      	cmp	r3, #0
 800374a:	dbe8      	blt.n	800371e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800374c:	2001      	movs	r0, #1
 800374e:	f7fe fe47 	bl	80023e0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	69d2      	ldr	r2, [r2, #28]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	ea02 0103 	and.w	r1, r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	6a1a      	ldr	r2, [r3, #32]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	409a      	lsls	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	21ff      	movs	r1, #255	; 0xff
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	ea02 0103 	and.w	r1, r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d11d      	bne.n	80037fa <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	221f      	movs	r2, #31
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2207      	movs	r2, #7
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43db      	mvns	r3, r3
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	4013      	ands	r3, r2
 8003814:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	431a      	orrs	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	4313      	orrs	r3, r2
 8003838:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6819      	ldr	r1, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	400a      	ands	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	4013      	ands	r3, r2
 800387c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	4313      	orrs	r3, r2
 8003894:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389e:	d104      	bne.n	80038aa <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	e018      	b.n	80038dc <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e00f      	b.n	80038dc <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80038bc:	f003 fbac 	bl	8007018 <HAL_RCC_GetHCLKFreq>
 80038c0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_DAC_ConfigChannel+0x27c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d904      	bls.n	80038d4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e003      	b.n	80038dc <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038da:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	22c0      	movs	r2, #192	; 0xc0
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	400a      	ands	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3720      	adds	r7, #32
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	04c4b400 	.word	0x04c4b400

0800391c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e08d      	b.n	8003a5e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_DMA_Init+0x138>)
 800394a:	429a      	cmp	r2, r3
 800394c:	d80f      	bhi.n	800396e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <HAL_DMA_Init+0x13c>)
 8003956:	4413      	add	r3, r2
 8003958:	4a45      	ldr	r2, [pc, #276]	; (8003a70 <HAL_DMA_Init+0x140>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	009a      	lsls	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <HAL_DMA_Init+0x144>)
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
 800396c:	e00e      	b.n	800398c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <HAL_DMA_Init+0x148>)
 8003976:	4413      	add	r3, r2
 8003978:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <HAL_DMA_Init+0x140>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <HAL_DMA_Init+0x14c>)
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f9c6 	bl	8003d70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d102      	bne.n	80039f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a08:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d010      	beq.n	8003a34 <HAL_DMA_Init+0x104>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d80c      	bhi.n	8003a34 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9e6 	bl	8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	e008      	b.n	8003a46 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40020407 	.word	0x40020407
 8003a6c:	bffdfff8 	.word	0xbffdfff8
 8003a70:	cccccccd 	.word	0xcccccccd
 8003a74:	40020000 	.word	0x40020000
 8003a78:	bffdfbf8 	.word	0xbffdfbf8
 8003a7c:	40020400 	.word	0x40020400

08003a80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e040      	b.n	8003b2c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 020e 	bic.w	r2, r2, #14
 8003ab8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f003 021c 	and.w	r2, r3, #28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003af6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00c      	beq.n	8003b1a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b18:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d005      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2204      	movs	r2, #4
 8003b54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	e047      	b.n	8003bec <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020e 	bic.w	r2, r2, #14
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f003 021c 	and.w	r2, r3, #28
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ba8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00c      	beq.n	8003bcc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bca:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
    }
  }
  return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f003 031c 	and.w	r3, r3, #28
 8003c16:	2204      	movs	r2, #4
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d026      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x7a>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d021      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0204 	bic.w	r2, r2, #4
 8003c48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f003 021c 	and.w	r2, r3, #28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2104      	movs	r1, #4
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d071      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c6e:	e06c      	b.n	8003d4a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	f003 031c 	and.w	r3, r3, #28
 8003c78:	2202      	movs	r2, #2
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02e      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xec>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d029      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 020a 	bic.w	r2, r2, #10
 8003caa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f003 021c 	and.w	r2, r3, #28
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d038      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ce0:	e033      	b.n	8003d4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f003 031c 	and.w	r3, r3, #28
 8003cea:	2208      	movs	r2, #8
 8003cec:	409a      	lsls	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02a      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x156>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d025      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 020e 	bic.w	r2, r2, #14
 8003d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	f003 021c 	and.w	r2, r3, #28
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
}
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d62:	b2db      	uxtb	r3, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d80a      	bhi.n	8003d9a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d90:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6493      	str	r3, [r2, #72]	; 0x48
 8003d98:	e007      	b.n	8003daa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	009a      	lsls	r2, r3, #2
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003da4:	4413      	add	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	3b08      	subs	r3, #8
 8003db2:	4a0c      	ldr	r2, [pc, #48]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40020407 	.word	0x40020407
 8003de0:	4002081c 	.word	0x4002081c
 8003de4:	cccccccd 	.word	0xcccccccd
 8003de8:	40020880 	.word	0x40020880

08003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	461a      	mov	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e0e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2201      	movs	r2, #1
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	1000823f 	.word	0x1000823f
 8003e30:	40020940 	.word	0x40020940

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e166      	b.n	8004112 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8158 	beq.w	800410c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d00b      	beq.n	8003e7c <HAL_GPIO_Init+0x48>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d007      	beq.n	8003e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e70:	2b11      	cmp	r3, #17
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d130      	bne.n	8003ede <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	2203      	movs	r2, #3
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 0201 	and.w	r2, r3, #1
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0xea>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b12      	cmp	r3, #18
 8003f1c:	d123      	bne.n	8003f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	08da      	lsrs	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3208      	adds	r2, #8
 8003f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	6939      	ldr	r1, [r7, #16]
 8003f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	2203      	movs	r2, #3
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 0203 	and.w	r2, r3, #3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80b2 	beq.w	800410c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_GPIO_Init+0x2fc>)
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	4a60      	ldr	r2, [pc, #384]	; (8004130 <HAL_GPIO_Init+0x2fc>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	; (8004130 <HAL_GPIO_Init+0x2fc>)
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fc0:	4a5c      	ldr	r2, [pc, #368]	; (8004134 <HAL_GPIO_Init+0x300>)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fea:	d02b      	beq.n	8004044 <HAL_GPIO_Init+0x210>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_GPIO_Init+0x304>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d025      	beq.n	8004040 <HAL_GPIO_Init+0x20c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a51      	ldr	r2, [pc, #324]	; (800413c <HAL_GPIO_Init+0x308>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01f      	beq.n	800403c <HAL_GPIO_Init+0x208>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_GPIO_Init+0x30c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d019      	beq.n	8004038 <HAL_GPIO_Init+0x204>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_GPIO_Init+0x310>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d013      	beq.n	8004034 <HAL_GPIO_Init+0x200>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a4e      	ldr	r2, [pc, #312]	; (8004148 <HAL_GPIO_Init+0x314>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00d      	beq.n	8004030 <HAL_GPIO_Init+0x1fc>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a4d      	ldr	r2, [pc, #308]	; (800414c <HAL_GPIO_Init+0x318>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <HAL_GPIO_Init+0x1f8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a4c      	ldr	r2, [pc, #304]	; (8004150 <HAL_GPIO_Init+0x31c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_GPIO_Init+0x1f4>
 8004024:	2307      	movs	r3, #7
 8004026:	e00e      	b.n	8004046 <HAL_GPIO_Init+0x212>
 8004028:	2308      	movs	r3, #8
 800402a:	e00c      	b.n	8004046 <HAL_GPIO_Init+0x212>
 800402c:	2306      	movs	r3, #6
 800402e:	e00a      	b.n	8004046 <HAL_GPIO_Init+0x212>
 8004030:	2305      	movs	r3, #5
 8004032:	e008      	b.n	8004046 <HAL_GPIO_Init+0x212>
 8004034:	2304      	movs	r3, #4
 8004036:	e006      	b.n	8004046 <HAL_GPIO_Init+0x212>
 8004038:	2303      	movs	r3, #3
 800403a:	e004      	b.n	8004046 <HAL_GPIO_Init+0x212>
 800403c:	2302      	movs	r3, #2
 800403e:	e002      	b.n	8004046 <HAL_GPIO_Init+0x212>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_GPIO_Init+0x212>
 8004044:	2300      	movs	r3, #0
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	f002 0203 	and.w	r2, r2, #3
 800404c:	0092      	lsls	r2, r2, #2
 800404e:	4093      	lsls	r3, r2
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004056:	4937      	ldr	r1, [pc, #220]	; (8004134 <HAL_GPIO_Init+0x300>)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004064:	4b3b      	ldr	r3, [pc, #236]	; (8004154 <HAL_GPIO_Init+0x320>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	43db      	mvns	r3, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004088:	4a32      	ldr	r2, [pc, #200]	; (8004154 <HAL_GPIO_Init+0x320>)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_GPIO_Init+0x320>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040b2:	4a28      	ldr	r2, [pc, #160]	; (8004154 <HAL_GPIO_Init+0x320>)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040b8:	4b26      	ldr	r3, [pc, #152]	; (8004154 <HAL_GPIO_Init+0x320>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040dc:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_GPIO_Init+0x320>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_GPIO_Init+0x320>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <HAL_GPIO_Init+0x320>)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3301      	adds	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	f47f ae91 	bne.w	8003e44 <HAL_GPIO_Init+0x10>
  }
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40021000 	.word	0x40021000
 8004134:	40010000 	.word	0x40010000
 8004138:	48000400 	.word	0x48000400
 800413c:	48000800 	.word	0x48000800
 8004140:	48000c00 	.word	0x48000c00
 8004144:	48001000 	.word	0x48001000
 8004148:	48001400 	.word	0x48001400
 800414c:	48001800 	.word	0x48001800
 8004150:	48001c00 	.word	0x48001c00
 8004154:	40010400 	.word	0x40010400

08004158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
 8004174:	e001      	b.n	800417a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43d9      	mvns	r1, r3
 80041d6:	887b      	ldrh	r3, [r7, #2]
 80041d8:	400b      	ands	r3, r1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	619a      	str	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e081      	b.n	8004302 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fc fdb0 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2224      	movs	r2, #36	; 0x24
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0201 	bic.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800423c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	e006      	b.n	8004274 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004272:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d104      	bne.n	8004286 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	ea42 0103 	orr.w	r1, r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	021a      	lsls	r2, r3, #8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69d9      	ldr	r1, [r3, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
  }
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b086      	sub	sp, #24
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_I2C_ER_IRQHandler+0x46>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	09db      	lsrs	r3, r3, #7
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004382:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	0a9b      	lsrs	r3, r3, #10
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d010      	beq.n	80043b2 <HAL_I2C_ER_IRQHandler+0x74>
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	09db      	lsrs	r3, r3, #7
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	f043 0208 	orr.w	r2, r3, #8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043b0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	0a5b      	lsrs	r3, r3, #9
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d010      	beq.n	80043e0 <HAL_I2C_ER_IRQHandler+0xa2>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	09db      	lsrs	r3, r3, #7
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	f043 0202 	orr.w	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043de:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 030b 	and.w	r3, r3, #11
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fb8a 	bl	8004b0c <I2C_ITError>
  }
}
 80043f8:	bf00      	nop
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
 8004434:	4613      	mov	r3, r2
 8004436:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <I2C_Slave_ISR_IT+0x24>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0ec      	b.n	800467e <I2C_Slave_ISR_IT+0x1fe>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <I2C_Slave_ISR_IT+0x4c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f9c0 	bl	800484c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d04d      	beq.n	8004574 <I2C_Slave_ISR_IT+0xf4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d047      	beq.n	8004574 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d128      	bne.n	8004540 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b28      	cmp	r3, #40	; 0x28
 80044f8:	d108      	bne.n	800450c <I2C_Slave_ISR_IT+0x8c>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004500:	d104      	bne.n	800450c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004502:	6939      	ldr	r1, [r7, #16]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 faab 	bl	8004a60 <I2C_ITListenCplt>
 800450a:	e032      	b.n	8004572 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b29      	cmp	r3, #41	; 0x29
 8004516:	d10e      	bne.n	8004536 <I2C_Slave_ISR_IT+0xb6>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451e:	d00a      	beq.n	8004536 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2210      	movs	r2, #16
 8004526:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 fbe6 	bl	8004cfa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f92d 	bl	800478e <I2C_ITSlaveSeqCplt>
 8004534:	e01d      	b.n	8004572 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800453e:	e096      	b.n	800466e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	f043 0204 	orr.w	r2, r3, #4
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <I2C_Slave_ISR_IT+0xe4>
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004560:	f040 8085 	bne.w	800466e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004568:	4619      	mov	r1, r3
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 face 	bl	8004b0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004570:	e07d      	b.n	800466e <I2C_Slave_ISR_IT+0x1ee>
 8004572:	e07c      	b.n	800466e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d030      	beq.n	80045e2 <I2C_Slave_ISR_IT+0x162>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d02a      	beq.n	80045e2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d018      	beq.n	80045c8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d14f      	bne.n	8004672 <I2C_Slave_ISR_IT+0x1f2>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045d8:	d04b      	beq.n	8004672 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f8d7 	bl	800478e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045e0:	e047      	b.n	8004672 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	08db      	lsrs	r3, r3, #3
 80045f2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f842 	bl	8004686 <I2C_ITAddrCplt>
 8004602:	e037      	b.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d031      	beq.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02b      	beq.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
 8004656:	e00d      	b.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800465e:	d002      	beq.n	8004666 <I2C_Slave_ISR_IT+0x1e6>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f891 	bl	800478e <I2C_ITSlaveSeqCplt>
 800466c:	e002      	b.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800466e:	bf00      	nop
 8004670:	e000      	b.n	8004674 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004672:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800469c:	2b28      	cmp	r3, #40	; 0x28
 800469e:	d16a      	bne.n	8004776 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	0c1b      	lsrs	r3, r3, #16
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	0c1b      	lsrs	r3, r3, #16
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80046be:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046cc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80046da:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d138      	bne.n	8004756 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80046e4:	897b      	ldrh	r3, [r7, #10]
 80046e6:	09db      	lsrs	r3, r3, #7
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	89bb      	ldrh	r3, [r7, #12]
 80046ec:	4053      	eors	r3, r2
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f003 0306 	and.w	r3, r3, #6
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11c      	bne.n	8004732 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80046f8:	897b      	ldrh	r3, [r7, #10]
 80046fa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470a:	2b02      	cmp	r3, #2
 800470c:	d13b      	bne.n	8004786 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2208      	movs	r2, #8
 800471a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004724:	89ba      	ldrh	r2, [r7, #12]
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff fe7c 	bl	8004428 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004730:	e029      	b.n	8004786 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fb1f 	bl	8004d7e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004748:	89ba      	ldrh	r2, [r7, #12]
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff fe6a 	bl	8004428 <HAL_I2C_AddrCallback>
}
 8004754:	e017      	b.n	8004786 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fb0f 	bl	8004d7e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004768:	89ba      	ldrh	r2, [r7, #12]
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fe5a 	bl	8004428 <HAL_I2C_AddrCallback>
}
 8004774:	e007      	b.n	8004786 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2208      	movs	r2, #8
 800477c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	0b9b      	lsrs	r3, r3, #14
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e00d      	b.n	80047e0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	0bdb      	lsrs	r3, r3, #15
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047de:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b29      	cmp	r3, #41	; 0x29
 80047ea:	d112      	bne.n	8004812 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2228      	movs	r2, #40	; 0x28
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2221      	movs	r2, #33	; 0x21
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047fa:	2101      	movs	r1, #1
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fabe 	bl	8004d7e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fdf8 	bl	8004400 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004810:	e017      	b.n	8004842 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b2a      	cmp	r3, #42	; 0x2a
 800481c:	d111      	bne.n	8004842 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2228      	movs	r2, #40	; 0x28
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2222      	movs	r2, #34	; 0x22
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800482c:	2102      	movs	r1, #2
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 faa5 	bl	8004d7e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff fde9 	bl	8004414 <HAL_I2C_SlaveRxCpltCallback>
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2220      	movs	r2, #32
 8004870:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b21      	cmp	r3, #33	; 0x21
 8004876:	d002      	beq.n	800487e <I2C_ITSlaveCplt+0x32>
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b29      	cmp	r3, #41	; 0x29
 800487c:	d108      	bne.n	8004890 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800487e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa7b 	bl	8004d7e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2221      	movs	r2, #33	; 0x21
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
 800488e:	e00d      	b.n	80048ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b22      	cmp	r3, #34	; 0x22
 8004894:	d002      	beq.n	800489c <I2C_ITSlaveCplt+0x50>
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b2a      	cmp	r3, #42	; 0x2a
 800489a:	d107      	bne.n	80048ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800489c:	f248 0102 	movw	r1, #32770	; 0x8002
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa6c 	bl	8004d7e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2222      	movs	r2, #34	; 0x22
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6859      	ldr	r1, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b64      	ldr	r3, [pc, #400]	; (8004a58 <I2C_ITSlaveCplt+0x20c>)
 80048c8:	400b      	ands	r3, r1
 80048ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa14 	bl	8004cfa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	0b9b      	lsrs	r3, r3, #14
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d020      	beq.n	8004938 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004904:	e018      	b.n	8004938 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	0bdb      	lsrs	r3, r3, #15
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d012      	beq.n	8004938 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004920:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	d006      	beq.n	8004938 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	089b      	lsrs	r3, r3, #2
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0304 	bic.w	r3, r3, #4
 800494a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8a7 	bl	8004b0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b28      	cmp	r3, #40	; 0x28
 80049c8:	d141      	bne.n	8004a4e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80049ca:	6979      	ldr	r1, [r7, #20]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f847 	bl	8004a60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049d2:	e03c      	b.n	8004a4e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049dc:	d014      	beq.n	8004a08 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fed5 	bl	800478e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <I2C_ITSlaveCplt+0x210>)
 80049e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff fd1f 	bl	8004444 <HAL_I2C_ListenCpltCallback>
}
 8004a06:	e022      	b.n	8004a4e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b22      	cmp	r3, #34	; 0x22
 8004a12:	d10e      	bne.n	8004a32 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fcf2 	bl	8004414 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a30:	e00d      	b.n	8004a4e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff fcd9 	bl	8004400 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	fe00e800 	.word	0xfe00e800
 8004a5c:	ffff0000 	.word	0xffff0000

08004a60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <I2C_ITListenCplt+0xa8>)
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	089b      	lsrs	r3, r3, #2
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d022      	beq.n	8004ade <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d012      	beq.n	8004ade <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ade:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f94b 	bl	8004d7e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2210      	movs	r2, #16
 8004aee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fca3 	bl	8004444 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	ffff0000 	.word	0xffff0000

08004b0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a5d      	ldr	r2, [pc, #372]	; (8004ca0 <I2C_ITError+0x194>)
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	2b28      	cmp	r3, #40	; 0x28
 8004b42:	d005      	beq.n	8004b50 <I2C_ITError+0x44>
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b29      	cmp	r3, #41	; 0x29
 8004b48:	d002      	beq.n	8004b50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b4e:	d10b      	bne.n	8004b68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b50:	2103      	movs	r1, #3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f913 	bl	8004d7e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2228      	movs	r2, #40	; 0x28
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a50      	ldr	r2, [pc, #320]	; (8004ca4 <I2C_ITError+0x198>)
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34
 8004b66:	e011      	b.n	8004b8c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b68:	f248 0103 	movw	r1, #32771	; 0x8003
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f906 	bl	8004d7e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b60      	cmp	r3, #96	; 0x60
 8004b7c:	d003      	beq.n	8004b86 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d039      	beq.n	8004c0e <I2C_ITError+0x102>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b11      	cmp	r3, #17
 8004b9e:	d002      	beq.n	8004ba6 <I2C_ITError+0x9a>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b21      	cmp	r3, #33	; 0x21
 8004ba4:	d133      	bne.n	8004c0e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d107      	bne.n	8004bc6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff f8c2 	bl	8003d54 <HAL_DMA_GetState>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d017      	beq.n	8004c06 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <I2C_ITError+0x19c>)
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe ffa4 	bl	8003b38 <HAL_DMA_Abort_IT>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04d      	beq.n	8004c92 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c04:	e045      	b.n	8004c92 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f850 	bl	8004cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c0c:	e041      	b.n	8004c92 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d039      	beq.n	8004c8a <I2C_ITError+0x17e>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b12      	cmp	r3, #18
 8004c1a:	d002      	beq.n	8004c22 <I2C_ITError+0x116>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b22      	cmp	r3, #34	; 0x22
 8004c20:	d133      	bne.n	8004c8a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c30:	d107      	bne.n	8004c42 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c40:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff f884 	bl	8003d54 <HAL_DMA_GetState>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d017      	beq.n	8004c82 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <I2C_ITError+0x19c>)
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe ff66 	bl	8003b38 <HAL_DMA_Abort_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c80:	e009      	b.n	8004c96 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f812 	bl	8004cac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c88:	e005      	b.n	8004c96 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f80e 	bl	8004cac <I2C_TreatErrorCallback>
  }
}
 8004c90:	e002      	b.n	8004c98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c96:	bf00      	nop
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	ffff0000 	.word	0xffff0000
 8004ca4:	08004481 	.word	0x08004481
 8004ca8:	08004d43 	.word	0x08004d43

08004cac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d10e      	bne.n	8004cde <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff fbc8 	bl	800446c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cdc:	e009      	b.n	8004cf2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff fbb3 	bl	8004458 <HAL_I2C_ErrorCallback>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d103      	bne.n	8004d18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d007      	beq.n	8004d36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	619a      	str	r2, [r3, #24]
  }
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff9b 	bl	8004cac <I2C_TreatErrorCallback>
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	460b      	mov	r3, r1
 8004d88:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00f      	beq.n	8004db8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004d9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dac:	2b28      	cmp	r3, #40	; 0x28
 8004dae:	d003      	beq.n	8004db8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004db6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004db8:	887b      	ldrh	r3, [r7, #2]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004dc8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dd6:	2b28      	cmp	r3, #40	; 0x28
 8004dd8:	d003      	beq.n	8004de2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004de0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004de2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da03      	bge.n	8004df2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004df2:	887b      	ldrh	r3, [r7, #2]
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d103      	bne.n	8004e00 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e00:	887b      	ldrh	r3, [r7, #2]
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d103      	bne.n	8004e0e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f043 0320 	orr.w	r3, r3, #32
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d103      	bne.n	8004e1c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	43da      	mvns	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	400a      	ands	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d138      	bne.n	8004ec2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e032      	b.n	8004ec4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2224      	movs	r2, #36	; 0x24
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d139      	bne.n	8004f5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e033      	b.n	8004f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0201 	orr.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0c3      	b.n	8005106 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d101      	bne.n	8004f8e <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e0bb      	b.n	8005106 <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d101      	bne.n	8004f9e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e0b3      	b.n	8005106 <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fc f930 	bl	8001220 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fce:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d11b      	bne.n	8005010 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8004fe2:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6891      	ldr	r1, [r2, #8]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68d2      	ldr	r2, [r2, #12]
 8004fee:	4311      	orrs	r1, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6992      	ldr	r2, [r2, #24]
 8004ff4:	4311      	orrs	r1, r2
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6912      	ldr	r2, [r2, #16]
 8004ffa:	4311      	orrs	r1, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6952      	ldr	r2, [r2, #20]
 8005000:	4311      	orrs	r1, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	69d2      	ldr	r2, [r2, #28]
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	430b      	orrs	r3, r1
 800500e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b0c      	cmp	r3, #12
 8005016:	d115      	bne.n	8005044 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8005022:	f023 030e 	bic.w	r3, r3, #14
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6891      	ldr	r1, [r2, #8]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68d2      	ldr	r2, [r2, #12]
 800502e:	4311      	orrs	r1, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6952      	ldr	r2, [r2, #20]
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	69d2      	ldr	r2, [r2, #28]
 800503a:	4311      	orrs	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	430b      	orrs	r3, r1
 8005042:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d118      	bne.n	800507e <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8005056:	f023 030e 	bic.w	r3, r3, #14
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6891      	ldr	r1, [r2, #8]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68d2      	ldr	r2, [r2, #12]
 8005062:	4311      	orrs	r1, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6912      	ldr	r2, [r2, #16]
 8005068:	4311      	orrs	r1, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6952      	ldr	r2, [r2, #20]
 800506e:	4311      	orrs	r1, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	69d2      	ldr	r2, [r2, #28]
 8005074:	4311      	orrs	r1, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	430b      	orrs	r3, r1
 800507c:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005086:	d12a      	bne.n	80050de <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d013      	beq.n	80050b8 <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800509a:	4313      	orrs	r3, r2
 800509c:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80050a8:	f023 031f 	bic.w	r3, r3, #31
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	430b      	orrs	r3, r1
 80050b4:	6053      	str	r3, [r2, #4]
 80050b6:	e012      	b.n	80050de <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80050d0:	f023 031f 	bic.w	r3, r3, #31
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	430b      	orrs	r3, r1
 80050dc:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_OPAMP_Init+0x1a8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4909      	ldr	r1, [pc, #36]	; (8005110 <HAL_OPAMP_Init+0x1a8>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d103      	bne.n	8005104 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40007800 	.word	0x40007800

08005114 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005116:	b08f      	sub	sp, #60	; 0x3c
 8005118:	af0a      	add	r7, sp, #40	; 0x28
 800511a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e116      	b.n	8005354 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f00e ff3d 	bl	8013fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2203      	movs	r2, #3
 800514a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d102      	bne.n	8005160 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f008 fcc2 	bl	800daee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	687e      	ldr	r6, [r7, #4]
 8005172:	466d      	mov	r5, sp
 8005174:	f106 0410 	add.w	r4, r6, #16
 8005178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800517c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005180:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005184:	e885 0003 	stmia.w	r5, {r0, r1}
 8005188:	1d33      	adds	r3, r6, #4
 800518a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	f008 fbd5 	bl	800d93c <USB_CoreInit>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0d7      	b.n	8005354 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f008 fcb0 	bl	800db10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]
 80051b4:	e04a      	b.n	800524c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	333d      	adds	r3, #61	; 0x3d
 80051c6:	2201      	movs	r2, #1
 80051c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051ca:	7bfa      	ldrb	r2, [r7, #15]
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	333c      	adds	r3, #60	; 0x3c
 80051da:	7bfa      	ldrb	r2, [r7, #15]
 80051dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051de:	7bfa      	ldrb	r2, [r7, #15]
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	b298      	uxth	r0, r3
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3342      	adds	r3, #66	; 0x42
 80051f2:	4602      	mov	r2, r0
 80051f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	333f      	adds	r3, #63	; 0x3f
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3344      	adds	r3, #68	; 0x44
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	4613      	mov	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	440b      	add	r3, r1
 800522c:	3348      	adds	r3, #72	; 0x48
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005232:	7bfa      	ldrb	r2, [r7, #15]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	3350      	adds	r3, #80	; 0x50
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	3301      	adds	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d3af      	bcc.n	80051b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	e044      	b.n	80052e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800529e:	7bfa      	ldrb	r2, [r7, #15]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052b4:	7bfa      	ldrb	r2, [r7, #15]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	3301      	adds	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
 80052e6:	7bfa      	ldrb	r2, [r7, #15]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d3b5      	bcc.n	800525c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	687e      	ldr	r6, [r7, #4]
 80052f8:	466d      	mov	r5, sp
 80052fa:	f106 0410 	add.w	r4, r6, #16
 80052fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005306:	e894 0003 	ldmia.w	r4, {r0, r1}
 800530a:	e885 0003 	stmia.w	r5, {r0, r1}
 800530e:	1d33      	adds	r3, r6, #4
 8005310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005312:	6838      	ldr	r0, [r7, #0]
 8005314:	f008 fc26 	bl	800db64 <USB_DevInit>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e014      	b.n	8005354 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	2b01      	cmp	r3, #1
 8005340:	d102      	bne.n	8005348 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 ff62 	bl	800620c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f009 fba8 	bl	800eaa2 <USB_DevDisconnect>

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800535c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_PCD_Start+0x1c>
 8005374:	2302      	movs	r3, #2
 8005376:	e01c      	b.n	80053b2 <HAL_PCD_Start+0x56>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f008 fb97 	bl	800dacc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f009 fb5c 	bl	800ea60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053ba:	b590      	push	{r4, r7, lr}
 80053bc:	b08d      	sub	sp, #52	; 0x34
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f009 fc1a 	bl	800ec0a <USB_GetMode>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 838f 	bne.w	8005afc <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f009 fb7e 	bl	800eae4 <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8385 	beq.w	8005afa <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f009 fb75 	bl	800eae4 <USB_ReadInterrupts>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b02      	cmp	r3, #2
 8005402:	d107      	bne.n	8005414 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f002 0202 	and.w	r2, r2, #2
 8005412:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f009 fb63 	bl	800eae4 <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d161      	bne.n	80054ec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0210 	bic.w	r2, r2, #16
 8005436:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	3304      	adds	r3, #4
 8005456:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	0c5b      	lsrs	r3, r3, #17
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	2b02      	cmp	r3, #2
 8005462:	d124      	bne.n	80054ae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d035      	beq.n	80054dc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800547a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	6a38      	ldr	r0, [r7, #32]
 8005484:	f009 f9c9 	bl	800e81a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005494:	441a      	add	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054a6:	441a      	add	r2, r3
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	619a      	str	r2, [r3, #24]
 80054ac:	e016      	b.n	80054dc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	0c5b      	lsrs	r3, r3, #17
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d110      	bne.n	80054dc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054c0:	2208      	movs	r2, #8
 80054c2:	4619      	mov	r1, r3
 80054c4:	6a38      	ldr	r0, [r7, #32]
 80054c6:	f009 f9a8 	bl	800e81a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054d6:	441a      	add	r2, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0210 	orr.w	r2, r2, #16
 80054ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f009 faf7 	bl	800eae4 <USB_ReadInterrupts>
 80054f6:	4603      	mov	r3, r0
 80054f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005500:	d16e      	bne.n	80055e0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f009 fafd 	bl	800eb0a <USB_ReadDevAllOutEpInterrupt>
 8005510:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005512:	e062      	b.n	80055da <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d057      	beq.n	80055ce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f009 fb22 	bl	800eb72 <USB_ReadDevOutEPInterrupt>
 800552e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	461a      	mov	r2, r3
 8005548:	2301      	movs	r3, #1
 800554a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800554c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fd82 	bl	8006058 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	2308      	movs	r3, #8
 800556e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fdbe 	bl	80060f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	2310      	movs	r3, #16
 8005592:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	2320      	movs	r3, #32
 80055ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	3301      	adds	r3, #1
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d199      	bne.n	8005514 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f009 fa7d 	bl	800eae4 <USB_ReadInterrupts>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055f4:	f040 8087 	bne.w	8005706 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f009 fa9e 	bl	800eb3e <USB_ReadDevAllInEpInterrupt>
 8005602:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005608:	e07a      	b.n	8005700 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d06f      	beq.n	80056f4 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	4611      	mov	r1, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f009 fac5 	bl	800ebae <USB_ReadDevInEPInterrupt>
 8005624:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	2201      	movs	r2, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	43db      	mvns	r3, r3
 800564a:	69f9      	ldr	r1, [r7, #28]
 800564c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005650:	4013      	ands	r3, r2
 8005652:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	461a      	mov	r2, r3
 8005662:	2301      	movs	r3, #1
 8005664:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f00e fd48 	bl	8014102 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	461a      	mov	r2, r3
 800568a:	2308      	movs	r3, #8
 800568c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	461a      	mov	r2, r3
 80056a6:	2310      	movs	r3, #16
 80056a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	461a      	mov	r2, r3
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056dc:	461a      	mov	r2, r3
 80056de:	2302      	movs	r3, #2
 80056e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fc29 	bl	8005f46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	3301      	adds	r3, #1
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d181      	bne.n	800560a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f009 f9ea 	bl	800eae4 <USB_ReadInterrupts>
 8005710:	4603      	mov	r3, r0
 8005712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571a:	d122      	bne.n	8005762 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005736:	2b01      	cmp	r3, #1
 8005738:	d108      	bne.n	800574c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005742:	2100      	movs	r1, #0
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f00e fff3 	bl	8014730 <HAL_PCDEx_LPM_Callback>
 800574a:	e002      	b.n	8005752 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f00e fd45 	bl	80141dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f009 f9bc 	bl	800eae4 <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005776:	d112      	bne.n	800579e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d102      	bne.n	800578e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f00e fd01 	bl	8014190 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800579c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f009 f99e 	bl	800eae4 <USB_ReadInterrupts>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b2:	d121      	bne.n	80057f8 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80057c2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d111      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	f003 020f 	and.w	r2, r3, #15
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80057e8:	2101      	movs	r1, #1
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f00e ffa0 	bl	8014730 <HAL_PCDEx_LPM_Callback>
 80057f0:	e002      	b.n	80057f8 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f00e fccc 	bl	8014190 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f009 f971 	bl	800eae4 <USB_ReadInterrupts>
 8005802:	4603      	mov	r3, r0
 8005804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580c:	f040 80c5 	bne.w	800599a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2110      	movs	r1, #16
 800582a:	4618      	mov	r0, r3
 800582c:	f008 fae6 	bl	800ddfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005830:	2300      	movs	r3, #0
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005834:	e056      	b.n	80058e4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	461a      	mov	r2, r3
 8005844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005848:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005868:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005888:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800589c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	3301      	adds	r3, #1
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3a3      	bcc.n	8005836 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005900:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591a:	f043 030b 	orr.w	r3, r3, #11
 800591e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005930:	f043 030b 	orr.w	r3, r3, #11
 8005934:	6453      	str	r3, [r2, #68]	; 0x44
 8005936:	e015      	b.n	8005964 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005946:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800594a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800594e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800595e:	f043 030b 	orr.w	r3, r3, #11
 8005962:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005972:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005976:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f009 f971 	bl	800ec6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f009 f8a0 	bl	800eae4 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ae:	d124      	bne.n	80059fa <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f009 f936 	bl	800ec26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f008 fa7d 	bl	800debe <USB_GetDevSpeed>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681c      	ldr	r4, [r3, #0]
 80059d0:	f001 fb22 	bl	8007018 <HAL_RCC_GetHCLKFreq>
 80059d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	4620      	mov	r0, r4
 80059e0:	f007 ffd8 	bl	800d994 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f00e fbb4 	bl	8014152 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80059f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f009 f870 	bl	800eae4 <USB_ReadInterrupts>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d10a      	bne.n	8005a24 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f00e fb91 	bl	8014136 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f002 0208 	and.w	r2, r2, #8
 8005a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f009 f85b 	bl	800eae4 <USB_ReadInterrupts>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a38:	d10f      	bne.n	8005a5a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f00e fc03 	bl	8014250 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f009 f840 	bl	800eae4 <USB_ReadInterrupts>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a6e:	d10f      	bne.n	8005a90 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f00e fbd6 	bl	801422c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f009 f825 	bl	800eae4 <USB_ReadInterrupts>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa4:	d10a      	bne.n	8005abc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f00e fbe4 	bl	8014274 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f009 f80f 	bl	800eae4 <USB_ReadInterrupts>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d115      	bne.n	8005afc <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f00e fbd4 	bl	8014290 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	e000      	b.n	8005afc <HAL_PCD_IRQHandler+0x742>
      return;
 8005afa:	bf00      	nop
    }
  }
}
 8005afc:	3734      	adds	r7, #52	; 0x34
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd90      	pop	{r4, r7, pc}

08005b02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_PCD_SetAddress+0x1a>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e013      	b.n	8005b44 <HAL_PCD_SetAddress+0x42>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	78fa      	ldrb	r2, [r7, #3]
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f008 ff6d 	bl	800ea14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	70fb      	strb	r3, [r7, #3]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	803b      	strh	r3, [r7, #0]
 8005b62:	4613      	mov	r3, r2
 8005b64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da0f      	bge.n	8005b92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b72:	78fb      	ldrb	r3, [r7, #3]
 8005b74:	f003 020f 	and.w	r2, r3, #15
 8005b78:	4613      	mov	r3, r2
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	3338      	adds	r3, #56	; 0x38
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4413      	add	r3, r2
 8005b86:	3304      	adds	r3, #4
 8005b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	705a      	strb	r2, [r3, #1]
 8005b90:	e00f      	b.n	8005bb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	f003 020f 	and.w	r2, r3, #15
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3304      	adds	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bbe:	883a      	ldrh	r2, [r7, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	78ba      	ldrb	r2, [r7, #2]
 8005bc8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bdc:	78bb      	ldrb	r3, [r7, #2]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d102      	bne.n	8005be8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_PCD_EP_Open+0xaa>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e00e      	b.n	8005c14 <HAL_PCD_EP_Open+0xc8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f008 f979 	bl	800defc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005c12:	7afb      	ldrb	r3, [r7, #11]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da0f      	bge.n	8005c50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	f003 020f 	and.w	r2, r3, #15
 8005c36:	4613      	mov	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	3338      	adds	r3, #56	; 0x38
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	4413      	add	r3, r2
 8005c44:	3304      	adds	r3, #4
 8005c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	705a      	strb	r2, [r3, #1]
 8005c4e:	e00f      	b.n	8005c70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	f003 020f 	and.w	r2, r3, #15
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	4413      	add	r3, r2
 8005c66:	3304      	adds	r3, #4
 8005c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <HAL_PCD_EP_Close+0x6e>
 8005c86:	2302      	movs	r3, #2
 8005c88:	e00e      	b.n	8005ca8 <HAL_PCD_EP_Close+0x8c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f008 f9b7 	bl	800e00c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cc0:	7afb      	ldrb	r3, [r7, #11]
 8005cc2:	f003 020f 	and.w	r2, r3, #15
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6979      	ldr	r1, [r7, #20]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f008 fc34 	bl	800e57c <USB_EP0StartXfer>
 8005d14:	e005      	b.n	8005d22 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6979      	ldr	r1, [r7, #20]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f008 fa51 	bl	800e1c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d38:	78fb      	ldrb	r3, [r7, #3]
 8005d3a:	f003 020f 	and.w	r2, r3, #15
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	3338      	adds	r3, #56	; 0x38
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	3304      	adds	r3, #4
 8005d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005da8:	7afb      	ldrb	r3, [r7, #11]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6979      	ldr	r1, [r7, #20]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f008 fbdf 	bl	800e57c <USB_EP0StartXfer>
 8005dbe:	e005      	b.n	8005dcc <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6979      	ldr	r1, [r7, #20]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f008 f9fc 	bl	800e1c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d901      	bls.n	8005df4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e04e      	b.n	8005e92 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	da0f      	bge.n	8005e1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 020f 	and.w	r2, r3, #15
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	3338      	adds	r3, #56	; 0x38
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3304      	adds	r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	705a      	strb	r2, [r3, #1]
 8005e1a:	e00d      	b.n	8005e38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e1c:	78fa      	ldrb	r2, [r7, #3]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3304      	adds	r3, #4
 8005e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_PCD_EP_SetStall+0x82>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e01c      	b.n	8005e92 <HAL_PCD_EP_SetStall+0xbc>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68f9      	ldr	r1, [r7, #12]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f008 fd00 	bl	800e86c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d108      	bne.n	8005e88 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f008 fef2 	bl	800ec6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d901      	bls.n	8005eb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e042      	b.n	8005f3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da0f      	bge.n	8005ee0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	f003 020f 	and.w	r2, r3, #15
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	3338      	adds	r3, #56	; 0x38
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	705a      	strb	r2, [r3, #1]
 8005ede:	e00f      	b.n	8005f00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_PCD_EP_ClrStall+0x86>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e00e      	b.n	8005f3e <HAL_PCD_EP_ClrStall+0xa4>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f008 fd0a 	bl	800e948 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	3338      	adds	r3, #56	; 0x38
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d901      	bls.n	8005f7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e067      	b.n	800604e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	695a      	ldr	r2, [r3, #20]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d902      	bls.n	8005f9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fa2:	e026      	b.n	8005ff2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d902      	bls.n	8005fc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	3303      	adds	r3, #3
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68d9      	ldr	r1, [r3, #12]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	6978      	ldr	r0, [r7, #20]
 8005fd6:	f008 fbef 	bl	800e7b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	b29b      	uxth	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	d809      	bhi.n	800601c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006010:	429a      	cmp	r2, r3
 8006012:	d203      	bcs.n	800601c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1c3      	bne.n	8005fa4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	429a      	cmp	r2, r3
 8006026:	d811      	bhi.n	800604c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	2201      	movs	r2, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	43db      	mvns	r3, r3
 8006042:	6939      	ldr	r1, [r7, #16]
 8006044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006048:	4013      	ands	r3, r2
 800604a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	333c      	adds	r3, #60	; 0x3c
 8006070:	3304      	adds	r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <PCD_EP_OutXfrComplete_int+0x98>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d124      	bne.n	80060d8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a4:	461a      	mov	r2, r3
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	6093      	str	r3, [r2, #8]
 80060ac:	e01a      	b.n	80060e4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	461a      	mov	r2, r3
 80060c6:	2320      	movs	r3, #32
 80060c8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f00d fffb 	bl	80140cc <HAL_PCD_DataOutStageCallback>
 80060d6:	e005      	b.n	80060e4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f00d fff4 	bl	80140cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	4f54310a 	.word	0x4f54310a

080060f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	333c      	adds	r3, #60	; 0x3c
 800610c:	3304      	adds	r3, #4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4a0c      	ldr	r2, [pc, #48]	; (8006158 <PCD_EP_OutSetupPacket_int+0x64>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d90e      	bls.n	8006148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	461a      	mov	r2, r3
 8006142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f00d ffad 	bl	80140a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	4f54300a 	.word	0x4f54300a

0800615c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
 8006168:	4613      	mov	r3, r2
 800616a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d107      	bne.n	800618a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800617a:	883b      	ldrh	r3, [r7, #0]
 800617c:	0419      	lsls	r1, r3, #16
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	430a      	orrs	r2, r1
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
 8006188:	e028      	b.n	80061dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	0c1b      	lsrs	r3, r3, #16
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4413      	add	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
 800619c:	e00d      	b.n	80061ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	3340      	adds	r3, #64	; 0x40
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	0c1b      	lsrs	r3, r3, #16
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	3301      	adds	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	3b01      	subs	r3, #1
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3ec      	bcc.n	800619e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061c4:	883b      	ldrh	r3, [r7, #0]
 80061c6:	0418      	lsls	r0, r3, #16
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6819      	ldr	r1, [r3, #0]
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	4302      	orrs	r2, r0
 80061d4:	3340      	adds	r3, #64	; 0x40
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	887a      	ldrh	r2, [r7, #2]
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623e:	f043 0303 	orr.w	r3, r3, #3
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800625e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006262:	6013      	str	r3, [r2, #0]
}
 8006264:	bf00      	nop
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40007000 	.word	0x40007000

08006274 <HAL_PWR_DisableBkUpAccess>:
  * @brief Disable access to the backup domain
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_PWR_DisableBkUpAccess+0x1c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <HAL_PWR_DisableBkUpAccess+0x1c>)
 800627e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40007000 	.word	0x40007000

08006294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006298:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a4:	d102      	bne.n	80062ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80062a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062aa:	e00b      	b.n	80062c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ba:	d102      	bne.n	80062c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80062bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c0:	e000      	b.n	80062c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80062c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40007000 	.word	0x40007000

080062d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d141      	bne.n	8006366 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062e2:	4b4b      	ldr	r3, [pc, #300]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ee:	d131      	bne.n	8006354 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062f0:	4b47      	ldr	r3, [pc, #284]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f6:	4a46      	ldr	r2, [pc, #280]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006300:	4b43      	ldr	r3, [pc, #268]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006308:	4a41      	ldr	r2, [pc, #260]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800630a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800630e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006310:	4b40      	ldr	r3, [pc, #256]	; (8006414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2232      	movs	r2, #50	; 0x32
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	4a3f      	ldr	r2, [pc, #252]	; (8006418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	0c9b      	lsrs	r3, r3, #18
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006326:	e002      	b.n	800632e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3b01      	subs	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800632e:	4b38      	ldr	r3, [pc, #224]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d102      	bne.n	8006342 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f2      	bne.n	8006328 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006342:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800634e:	d158      	bne.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e057      	b.n	8006404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006354:	4b2e      	ldr	r3, [pc, #184]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635a:	4a2d      	ldr	r2, [pc, #180]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006364:	e04d      	b.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d141      	bne.n	80063f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800636e:	4b28      	ldr	r3, [pc, #160]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d131      	bne.n	80063e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800637c:	4b24      	ldr	r3, [pc, #144]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006382:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006388:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006394:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800639a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2232      	movs	r2, #50	; 0x32
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	0c9b      	lsrs	r3, r3, #18
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b2:	e002      	b.n	80063ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ba:	4b15      	ldr	r3, [pc, #84]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c6:	d102      	bne.n	80063ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1f2      	bne.n	80063b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063ce:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063da:	d112      	bne.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e011      	b.n	8006404 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e0:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e6:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063f0:	e007      	b.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063f2:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063fa:	4a05      	ldr	r2, [pc, #20]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006400:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	40007000 	.word	0x40007000
 8006414:	20000000 	.word	0x20000000
 8006418:	431bde83 	.word	0x431bde83

0800641c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006420:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	4a04      	ldr	r2, [pc, #16]	; (8006438 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800642a:	6053      	str	r3, [r2, #4]
}
 800642c:	bf00      	nop
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40007000 	.word	0x40007000

0800643c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006440:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a04      	ldr	r2, [pc, #16]	; (8006458 <HAL_PWREx_EnableVddIO2+0x1c>)
 8006446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800644a:	6053      	str	r3, [r2, #4]
}
 800644c:	bf00      	nop
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40007000 	.word	0x40007000

0800645c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f000 bc16 	b.w	8006c9c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006470:	4ba0      	ldr	r3, [pc, #640]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 030c 	and.w	r3, r3, #12
 8006478:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800647a:	4b9e      	ldr	r3, [pc, #632]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80e4 	beq.w	800665a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <HAL_RCC_OscConfig+0x4c>
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b0c      	cmp	r3, #12
 800649c:	f040 808b 	bne.w	80065b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	f040 8087 	bne.w	80065b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064a8:	4b92      	ldr	r3, [pc, #584]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_OscConfig+0x64>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e3ed      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1a      	ldr	r2, [r3, #32]
 80064c4:	4b8b      	ldr	r3, [pc, #556]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_RCC_OscConfig+0x7e>
 80064d0:	4b88      	ldr	r3, [pc, #544]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d8:	e005      	b.n	80064e6 <HAL_RCC_OscConfig+0x8a>
 80064da:	4b86      	ldr	r3, [pc, #536]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80064dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d223      	bcs.n	8006532 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fdfc 	bl	80070ec <RCC_SetFlashLatencyFromMSIRange>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e3ce      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064fe:	4b7d      	ldr	r3, [pc, #500]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a7c      	ldr	r2, [pc, #496]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006504:	f043 0308 	orr.w	r3, r3, #8
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b7a      	ldr	r3, [pc, #488]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	4977      	ldr	r1, [pc, #476]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800651c:	4b75      	ldr	r3, [pc, #468]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	4972      	ldr	r1, [pc, #456]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800652c:	4313      	orrs	r3, r2
 800652e:	604b      	str	r3, [r1, #4]
 8006530:	e025      	b.n	800657e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006532:	4b70      	ldr	r3, [pc, #448]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a6f      	ldr	r2, [pc, #444]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006538:	f043 0308 	orr.w	r3, r3, #8
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	4b6d      	ldr	r3, [pc, #436]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	496a      	ldr	r1, [pc, #424]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006550:	4b68      	ldr	r3, [pc, #416]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	4965      	ldr	r1, [pc, #404]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006560:	4313      	orrs	r3, r2
 8006562:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fdbc 	bl	80070ec <RCC_SetFlashLatencyFromMSIRange>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e38e      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800657e:	f000 fcbf 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8006582:	4602      	mov	r2, r0
 8006584:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	495a      	ldr	r1, [pc, #360]	; (80066f8 <HAL_RCC_OscConfig+0x29c>)
 8006590:	5ccb      	ldrb	r3, [r1, r3]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	fa22 f303 	lsr.w	r3, r2, r3
 800659a:	4a58      	ldr	r2, [pc, #352]	; (80066fc <HAL_RCC_OscConfig+0x2a0>)
 800659c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800659e:	4b58      	ldr	r3, [pc, #352]	; (8006700 <HAL_RCC_OscConfig+0x2a4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fb fa1e 	bl	80019e4 <HAL_InitTick>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d052      	beq.n	8006658 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	e372      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d032      	beq.n	8006624 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065be:	4b4d      	ldr	r3, [pc, #308]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a4c      	ldr	r2, [pc, #304]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065ca:	f7fb fefd 	bl	80023c8 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065d2:	f7fb fef9 	bl	80023c8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e35b      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065e4:	4b43      	ldr	r3, [pc, #268]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065f0:	4b40      	ldr	r3, [pc, #256]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a3f      	ldr	r2, [pc, #252]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80065f6:	f043 0308 	orr.w	r3, r3, #8
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	4b3d      	ldr	r3, [pc, #244]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	493a      	ldr	r1, [pc, #232]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	4935      	ldr	r1, [pc, #212]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800661e:	4313      	orrs	r3, r2
 8006620:	604b      	str	r3, [r1, #4]
 8006622:	e01a      	b.n	800665a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006624:	4b33      	ldr	r3, [pc, #204]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a32      	ldr	r2, [pc, #200]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006630:	f7fb feca 	bl	80023c8 <HAL_GetTick>
 8006634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006636:	e008      	b.n	800664a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006638:	f7fb fec6 	bl	80023c8 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d901      	bls.n	800664a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e328      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800664a:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f0      	bne.n	8006638 <HAL_RCC_OscConfig+0x1dc>
 8006656:	e000      	b.n	800665a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006658:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d073      	beq.n	800674e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d005      	beq.n	8006678 <HAL_RCC_OscConfig+0x21c>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b0c      	cmp	r3, #12
 8006670:	d10e      	bne.n	8006690 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d10b      	bne.n	8006690 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006678:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d063      	beq.n	800674c <HAL_RCC_OscConfig+0x2f0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d15f      	bne.n	800674c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e305      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006698:	d106      	bne.n	80066a8 <HAL_RCC_OscConfig+0x24c>
 800669a:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e01d      	b.n	80066e4 <HAL_RCC_OscConfig+0x288>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066b0:	d10c      	bne.n	80066cc <HAL_RCC_OscConfig+0x270>
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0f      	ldr	r2, [pc, #60]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e00b      	b.n	80066e4 <HAL_RCC_OscConfig+0x288>
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a08      	ldr	r2, [pc, #32]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a05      	ldr	r2, [pc, #20]	; (80066f4 <HAL_RCC_OscConfig+0x298>)
 80066de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01b      	beq.n	8006724 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fb fe6c 	bl	80023c8 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066f2:	e010      	b.n	8006716 <HAL_RCC_OscConfig+0x2ba>
 80066f4:	40021000 	.word	0x40021000
 80066f8:	08014ad8 	.word	0x08014ad8
 80066fc:	20000000 	.word	0x20000000
 8006700:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006704:	f7fb fe60 	bl	80023c8 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b64      	cmp	r3, #100	; 0x64
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e2c2      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006716:	4baf      	ldr	r3, [pc, #700]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCC_OscConfig+0x2a8>
 8006722:	e014      	b.n	800674e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fb fe50 	bl	80023c8 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800672c:	f7fb fe4c 	bl	80023c8 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	; 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e2ae      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800673e:	4ba5      	ldr	r3, [pc, #660]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x2d0>
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d060      	beq.n	800681c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d005      	beq.n	800676c <HAL_RCC_OscConfig+0x310>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b0c      	cmp	r3, #12
 8006764:	d119      	bne.n	800679a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d116      	bne.n	800679a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800676c:	4b99      	ldr	r3, [pc, #612]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_OscConfig+0x328>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e28b      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006784:	4b93      	ldr	r3, [pc, #588]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	061b      	lsls	r3, r3, #24
 8006792:	4990      	ldr	r1, [pc, #576]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006794:	4313      	orrs	r3, r2
 8006796:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006798:	e040      	b.n	800681c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d023      	beq.n	80067ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067a2:	4b8c      	ldr	r3, [pc, #560]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a8b      	ldr	r2, [pc, #556]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ae:	f7fb fe0b 	bl	80023c8 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067b6:	f7fb fe07 	bl	80023c8 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e269      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067c8:	4b82      	ldr	r3, [pc, #520]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0f0      	beq.n	80067b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d4:	4b7f      	ldr	r3, [pc, #508]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	497c      	ldr	r1, [pc, #496]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	604b      	str	r3, [r1, #4]
 80067e8:	e018      	b.n	800681c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ea:	4b7a      	ldr	r3, [pc, #488]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a79      	ldr	r2, [pc, #484]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80067f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f6:	f7fb fde7 	bl	80023c8 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067fe:	f7fb fde3 	bl	80023c8 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e245      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006810:	4b70      	ldr	r3, [pc, #448]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f0      	bne.n	80067fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d03c      	beq.n	80068a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01c      	beq.n	800686a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006830:	4b68      	ldr	r3, [pc, #416]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006836:	4a67      	ldr	r2, [pc, #412]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006840:	f7fb fdc2 	bl	80023c8 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006848:	f7fb fdbe 	bl	80023c8 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e220      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800685a:	4b5e      	ldr	r3, [pc, #376]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 800685c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ef      	beq.n	8006848 <HAL_RCC_OscConfig+0x3ec>
 8006868:	e01b      	b.n	80068a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800686a:	4b5a      	ldr	r3, [pc, #360]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 800686c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006870:	4a58      	ldr	r2, [pc, #352]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687a:	f7fb fda5 	bl	80023c8 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006882:	f7fb fda1 	bl	80023c8 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e203      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006894:	4b4f      	ldr	r3, [pc, #316]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1ef      	bne.n	8006882 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80a6 	beq.w	80069fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b0:	2300      	movs	r3, #0
 80068b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068b4:	4b47      	ldr	r3, [pc, #284]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c0:	4b44      	ldr	r3, [pc, #272]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80068c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c4:	4a43      	ldr	r2, [pc, #268]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80068c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ca:	6593      	str	r3, [r2, #88]	; 0x58
 80068cc:	4b41      	ldr	r3, [pc, #260]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068d8:	2301      	movs	r3, #1
 80068da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068dc:	4b3e      	ldr	r3, [pc, #248]	; (80069d8 <HAL_RCC_OscConfig+0x57c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d118      	bne.n	800691a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068e8:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <HAL_RCC_OscConfig+0x57c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a3a      	ldr	r2, [pc, #232]	; (80069d8 <HAL_RCC_OscConfig+0x57c>)
 80068ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068f4:	f7fb fd68 	bl	80023c8 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068fc:	f7fb fd64 	bl	80023c8 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e1c6      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800690e:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <HAL_RCC_OscConfig+0x57c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0f0      	beq.n	80068fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d108      	bne.n	8006934 <HAL_RCC_OscConfig+0x4d8>
 8006922:	4b2c      	ldr	r3, [pc, #176]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	4a2a      	ldr	r2, [pc, #168]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006932:	e024      	b.n	800697e <HAL_RCC_OscConfig+0x522>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b05      	cmp	r3, #5
 800693a:	d110      	bne.n	800695e <HAL_RCC_OscConfig+0x502>
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 800693e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006942:	4a24      	ldr	r2, [pc, #144]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006944:	f043 0304 	orr.w	r3, r3, #4
 8006948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800694c:	4b21      	ldr	r3, [pc, #132]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	4a20      	ldr	r2, [pc, #128]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800695c:	e00f      	b.n	800697e <HAL_RCC_OscConfig+0x522>
 800695e:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800696e:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006974:	4a17      	ldr	r2, [pc, #92]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 8006976:	f023 0304 	bic.w	r3, r3, #4
 800697a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d016      	beq.n	80069b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006986:	f7fb fd1f 	bl	80023c8 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698c:	e00a      	b.n	80069a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fb fd1b 	bl	80023c8 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	; 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e17b      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_RCC_OscConfig+0x578>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0ed      	beq.n	800698e <HAL_RCC_OscConfig+0x532>
 80069b2:	e01a      	b.n	80069ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b4:	f7fb fd08 	bl	80023c8 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069ba:	e00f      	b.n	80069dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fb fd04 	bl	80023c8 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d906      	bls.n	80069dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e164      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
 80069d2:	bf00      	nop
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069dc:	4ba8      	ldr	r3, [pc, #672]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e8      	bne.n	80069bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ea:	7ffb      	ldrb	r3, [r7, #31]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d105      	bne.n	80069fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f0:	4ba3      	ldr	r3, [pc, #652]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 80069f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f4:	4aa2      	ldr	r2, [pc, #648]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 80069f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d03c      	beq.n	8006a82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01c      	beq.n	8006a4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a10:	4b9b      	ldr	r3, [pc, #620]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a16:	4a9a      	ldr	r2, [pc, #616]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a20:	f7fb fcd2 	bl	80023c8 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a28:	f7fb fcce 	bl	80023c8 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e130      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a3a:	4b91      	ldr	r3, [pc, #580]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0ef      	beq.n	8006a28 <HAL_RCC_OscConfig+0x5cc>
 8006a48:	e01b      	b.n	8006a82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a50:	4a8b      	ldr	r2, [pc, #556]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a5a:	f7fb fcb5 	bl	80023c8 <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a62:	f7fb fcb1 	bl	80023c8 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e113      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a74:	4b82      	ldr	r3, [pc, #520]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1ef      	bne.n	8006a62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8107 	beq.w	8006c9a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	f040 80cb 	bne.w	8006c2c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a96:	4b7a      	ldr	r3, [pc, #488]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f003 0203 	and.w	r2, r3, #3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d12c      	bne.n	8006b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d123      	bne.n	8006b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d11b      	bne.n	8006b04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d113      	bne.n	8006b04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d109      	bne.n	8006b04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	085b      	lsrs	r3, r3, #1
 8006afc:	3b01      	subs	r3, #1
 8006afe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d06d      	beq.n	8006be0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b0c      	cmp	r3, #12
 8006b08:	d068      	beq.n	8006bdc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b0a:	4b5d      	ldr	r3, [pc, #372]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d105      	bne.n	8006b22 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006b16:	4b5a      	ldr	r3, [pc, #360]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e0ba      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b26:	4b56      	ldr	r3, [pc, #344]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a55      	ldr	r2, [pc, #340]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b32:	f7fb fc49 	bl	80023c8 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b3a:	f7fb fc45 	bl	80023c8 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e0a7      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b4c:	4b4c      	ldr	r3, [pc, #304]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b58:	4b49      	ldr	r3, [pc, #292]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	4b49      	ldr	r3, [pc, #292]	; (8006c84 <HAL_RCC_OscConfig+0x828>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	0112      	lsls	r2, r2, #4
 8006b6c:	4311      	orrs	r1, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b72:	0212      	lsls	r2, r2, #8
 8006b74:	4311      	orrs	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b7a:	0852      	lsrs	r2, r2, #1
 8006b7c:	3a01      	subs	r2, #1
 8006b7e:	0552      	lsls	r2, r2, #21
 8006b80:	4311      	orrs	r1, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b86:	0852      	lsrs	r2, r2, #1
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	0652      	lsls	r2, r2, #25
 8006b8c:	4311      	orrs	r1, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b92:	06d2      	lsls	r2, r2, #27
 8006b94:	430a      	orrs	r2, r1
 8006b96:	493a      	ldr	r1, [pc, #232]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b9c:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a37      	ldr	r2, [pc, #220]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ba8:	4b35      	ldr	r3, [pc, #212]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	4a34      	ldr	r2, [pc, #208]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bb4:	f7fb fc08 	bl	80023c8 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bbc:	f7fb fc04 	bl	80023c8 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e066      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bce:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bda:	e05e      	b.n	8006c9a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e05d      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be0:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d156      	bne.n	8006c9a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bec:	4b24      	ldr	r3, [pc, #144]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a23      	ldr	r2, [pc, #140]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bf8:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4a20      	ldr	r2, [pc, #128]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c04:	f7fb fbe0 	bl	80023c8 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c0c:	f7fb fbdc 	bl	80023c8 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e03e      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCC_OscConfig+0x7b0>
 8006c2a:	e036      	b.n	8006c9a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b0c      	cmp	r3, #12
 8006c30:	d031      	beq.n	8006c96 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c32:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c50:	f023 0303 	bic.w	r3, r3, #3
 8006c54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	4a09      	ldr	r2, [pc, #36]	; (8006c80 <HAL_RCC_OscConfig+0x824>)
 8006c5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fb fbaf 	bl	80023c8 <HAL_GetTick>
 8006c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c6c:	e00c      	b.n	8006c88 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6e:	f7fb fbab 	bl	80023c8 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d905      	bls.n	8006c88 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e00d      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
 8006c80:	40021000 	.word	0x40021000
 8006c84:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c88:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <HAL_RCC_OscConfig+0x848>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1ec      	bne.n	8006c6e <HAL_RCC_OscConfig+0x812>
 8006c94:	e001      	b.n	8006c9a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	40021000 	.word	0x40021000

08006ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e10f      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cc0:	4b89      	ldr	r3, [pc, #548]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d910      	bls.n	8006cf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cce:	4b86      	ldr	r3, [pc, #536]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f023 020f 	bic.w	r2, r3, #15
 8006cd6:	4984      	ldr	r1, [pc, #528]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cde:	4b82      	ldr	r3, [pc, #520]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0f7      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8089 	beq.w	8006e10 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b03      	cmp	r3, #3
 8006d04:	d133      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d06:	4b79      	ldr	r3, [pc, #484]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e0e4      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006d16:	f000 fa43 	bl	80071a0 <RCC_GetSysClockFreqFromPLLSource>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4a74      	ldr	r2, [pc, #464]	; (8006ef0 <HAL_RCC_ClockConfig+0x248>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d955      	bls.n	8006dce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006d22:	4b72      	ldr	r3, [pc, #456]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d2e:	4b6f      	ldr	r3, [pc, #444]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d36:	4a6d      	ldr	r2, [pc, #436]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d3e:	2380      	movs	r3, #128	; 0x80
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e044      	b.n	8006dce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d03e      	beq.n	8006dce <HAL_RCC_ClockConfig+0x126>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d13a      	bne.n	8006dce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d58:	4b64      	ldr	r3, [pc, #400]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d60:	4a62      	ldr	r2, [pc, #392]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e02f      	b.n	8006dce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d107      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d76:	4b5d      	ldr	r3, [pc, #372]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d115      	bne.n	8006dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e0ac      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d107      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d8e:	4b57      	ldr	r3, [pc, #348]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e0a0      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d9e:	4b53      	ldr	r3, [pc, #332]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e098      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006dae:	f000 f8a7 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8006db2:	4603      	mov	r3, r0
 8006db4:	4a4e      	ldr	r2, [pc, #312]	; (8006ef0 <HAL_RCC_ClockConfig+0x248>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d909      	bls.n	8006dce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dba:	4b4c      	ldr	r3, [pc, #304]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc2:	4a4a      	ldr	r2, [pc, #296]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006dca:	2380      	movs	r3, #128	; 0x80
 8006dcc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dce:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f023 0203 	bic.w	r2, r3, #3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4944      	ldr	r1, [pc, #272]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de0:	f7fb faf2 	bl	80023c8 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de6:	e00a      	b.n	8006dfe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f7fb faee 	bl	80023c8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e070      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfe:	4b3b      	ldr	r3, [pc, #236]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 020c 	and.w	r2, r3, #12
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d1eb      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e1c:	4b33      	ldr	r3, [pc, #204]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	4930      	ldr	r1, [pc, #192]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b80      	cmp	r3, #128	; 0x80
 8006e34:	d105      	bne.n	8006e42 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e36:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4a2c      	ldr	r2, [pc, #176]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e40:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e42:	4b29      	ldr	r3, [pc, #164]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d210      	bcs.n	8006e72 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e50:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f023 020f 	bic.w	r2, r3, #15
 8006e58:	4923      	ldr	r1, [pc, #140]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e60:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <HAL_RCC_ClockConfig+0x240>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d001      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e036      	b.n	8006ee0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0304 	and.w	r3, r3, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	4918      	ldr	r1, [pc, #96]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d009      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4910      	ldr	r1, [pc, #64]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006eb0:	f000 f826 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <HAL_RCC_ClockConfig+0x244>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	091b      	lsrs	r3, r3, #4
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	490c      	ldr	r1, [pc, #48]	; (8006ef4 <HAL_RCC_ClockConfig+0x24c>)
 8006ec2:	5ccb      	ldrb	r3, [r1, r3]
 8006ec4:	f003 031f 	and.w	r3, r3, #31
 8006ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <HAL_RCC_ClockConfig+0x250>)
 8006ece:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <HAL_RCC_ClockConfig+0x254>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fa fd85 	bl	80019e4 <HAL_InitTick>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73fb      	strb	r3, [r7, #15]

  return status;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40022000 	.word	0x40022000
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	04c4b400 	.word	0x04c4b400
 8006ef4:	08014ad8 	.word	0x08014ad8
 8006ef8:	20000000 	.word	0x20000000
 8006efc:	20000004 	.word	0x20000004

08006f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f0e:	4b3e      	ldr	r3, [pc, #248]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 030c 	and.w	r3, r3, #12
 8006f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f18:	4b3b      	ldr	r3, [pc, #236]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0303 	and.w	r3, r3, #3
 8006f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_GetSysClockFreq+0x34>
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b0c      	cmp	r3, #12
 8006f2c:	d121      	bne.n	8006f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d11e      	bne.n	8006f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f34:	4b34      	ldr	r3, [pc, #208]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f40:	4b31      	ldr	r3, [pc, #196]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	e005      	b.n	8006f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f50:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f5c:	4a2b      	ldr	r2, [pc, #172]	; (800700c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10d      	bne.n	8006f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f70:	e00a      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d102      	bne.n	8006f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e004      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d101      	bne.n	8006f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f84:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b0c      	cmp	r3, #12
 8006f8c:	d134      	bne.n	8006ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0303 	and.w	r3, r3, #3
 8006f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d003      	beq.n	8006fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d003      	beq.n	8006fac <HAL_RCC_GetSysClockFreq+0xac>
 8006fa4:	e005      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	; (8007010 <HAL_RCC_GetSysClockFreq+0x110>)
 8006fa8:	617b      	str	r3, [r7, #20]
      break;
 8006faa:	e005      	b.n	8006fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006fac:	4b19      	ldr	r3, [pc, #100]	; (8007014 <HAL_RCC_GetSysClockFreq+0x114>)
 8006fae:	617b      	str	r3, [r7, #20]
      break;
 8006fb0:	e002      	b.n	8006fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	617b      	str	r3, [r7, #20]
      break;
 8006fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	091b      	lsrs	r3, r3, #4
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	fb02 f203 	mul.w	r2, r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fde:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <HAL_RCC_GetSysClockFreq+0x108>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	0e5b      	lsrs	r3, r3, #25
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	3301      	adds	r3, #1
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3724      	adds	r7, #36	; 0x24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40021000 	.word	0x40021000
 800700c:	08014af0 	.word	0x08014af0
 8007010:	00f42400 	.word	0x00f42400
 8007014:	007a1200 	.word	0x007a1200

08007018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <HAL_RCC_GetHCLKFreq+0x14>)
 800701e:	681b      	ldr	r3, [r3, #0]
}
 8007020:	4618      	mov	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000000 	.word	0x20000000

08007030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007034:	f7ff fff0 	bl	8007018 <HAL_RCC_GetHCLKFreq>
 8007038:	4602      	mov	r2, r0
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	f003 0307 	and.w	r3, r3, #7
 8007044:	4904      	ldr	r1, [pc, #16]	; (8007058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007046:	5ccb      	ldrb	r3, [r1, r3]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40021000 	.word	0x40021000
 8007058:	08014ae8 	.word	0x08014ae8

0800705c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007060:	f7ff ffda 	bl	8007018 <HAL_RCC_GetHCLKFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0adb      	lsrs	r3, r3, #11
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	4904      	ldr	r1, [pc, #16]	; (8007084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007072:	5ccb      	ldrb	r3, [r1, r3]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40021000 	.word	0x40021000
 8007084:	08014ae8 	.word	0x08014ae8

08007088 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	220f      	movs	r2, #15
 8007096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <HAL_RCC_GetClockConfig+0x5c>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0203 	and.w	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <HAL_RCC_GetClockConfig+0x5c>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <HAL_RCC_GetClockConfig+0x5c>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_GetClockConfig+0x5c>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	08db      	lsrs	r3, r3, #3
 80070c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80070ca:	4b07      	ldr	r3, [pc, #28]	; (80070e8 <HAL_RCC_GetClockConfig+0x60>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40021000 	.word	0x40021000
 80070e8:	40022000 	.word	0x40022000

080070ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007104:	f7ff f8c6 	bl	8006294 <HAL_PWREx_GetVoltageRange>
 8007108:	6178      	str	r0, [r7, #20]
 800710a:	e014      	b.n	8007136 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800710c:	4b22      	ldr	r3, [pc, #136]	; (8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800710e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007110:	4a21      	ldr	r2, [pc, #132]	; (8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007116:	6593      	str	r3, [r2, #88]	; 0x58
 8007118:	4b1f      	ldr	r3, [pc, #124]	; (8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800711a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007124:	f7ff f8b6 	bl	8006294 <HAL_PWREx_GetVoltageRange>
 8007128:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800712a:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	4a1a      	ldr	r2, [pc, #104]	; (8007198 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007134:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713c:	d10b      	bne.n	8007156 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b80      	cmp	r3, #128	; 0x80
 8007142:	d913      	bls.n	800716c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2ba0      	cmp	r3, #160	; 0xa0
 8007148:	d902      	bls.n	8007150 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800714a:	2302      	movs	r3, #2
 800714c:	613b      	str	r3, [r7, #16]
 800714e:	e00d      	b.n	800716c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007150:	2301      	movs	r3, #1
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	e00a      	b.n	800716c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b7f      	cmp	r3, #127	; 0x7f
 800715a:	d902      	bls.n	8007162 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800715c:	2302      	movs	r3, #2
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	e004      	b.n	800716c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b70      	cmp	r3, #112	; 0x70
 8007166:	d101      	bne.n	800716c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007168:	2301      	movs	r3, #1
 800716a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f023 020f 	bic.w	r2, r3, #15
 8007174:	4909      	ldr	r1, [pc, #36]	; (800719c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800717c:	4b07      	ldr	r3, [pc, #28]	; (800719c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	429a      	cmp	r2, r3
 8007188:	d001      	beq.n	800718e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000
 800719c:	40022000 	.word	0x40022000

080071a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80071aa:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d118      	bne.n	80071e8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80071b6:	4b2a      	ldr	r3, [pc, #168]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d107      	bne.n	80071d2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80071c2:	4b27      	ldr	r3, [pc, #156]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80071c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	617b      	str	r3, [r7, #20]
 80071d0:	e005      	b.n	80071de <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80071d2:	4b23      	ldr	r3, [pc, #140]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	091b      	lsrs	r3, r3, #4
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80071de:	4a21      	ldr	r2, [pc, #132]	; (8007264 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071e8:	4b1d      	ldr	r3, [pc, #116]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0303 	and.w	r3, r3, #3
 80071f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d003      	beq.n	8007200 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d003      	beq.n	8007206 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80071fe:	e005      	b.n	800720c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007200:	4b19      	ldr	r3, [pc, #100]	; (8007268 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007202:	613b      	str	r3, [r7, #16]
    break;
 8007204:	e005      	b.n	8007212 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007206:	4b19      	ldr	r3, [pc, #100]	; (800726c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8007208:	613b      	str	r3, [r7, #16]
    break;
 800720a:	e002      	b.n	8007212 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	613b      	str	r3, [r7, #16]
    break;
 8007210:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007212:	4b13      	ldr	r3, [pc, #76]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	3301      	adds	r3, #1
 800721e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	fb02 f203 	mul.w	r2, r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	fbb2 f3f3 	udiv	r3, r2, r3
 8007236:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	0e5b      	lsrs	r3, r3, #25
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	3301      	adds	r3, #1
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007252:	683b      	ldr	r3, [r7, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	40021000 	.word	0x40021000
 8007264:	08014af0 	.word	0x08014af0
 8007268:	00f42400 	.word	0x00f42400
 800726c:	007a1200 	.word	0x007a1200

08007270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007278:	2300      	movs	r3, #0
 800727a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800727c:	2300      	movs	r3, #0
 800727e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007288:	2b00      	cmp	r3, #0
 800728a:	d040      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d02a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d825      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007298:	2b60      	cmp	r3, #96	; 0x60
 800729a:	d026      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800729c:	2b60      	cmp	r3, #96	; 0x60
 800729e:	d821      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d006      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80072a4:	2b40      	cmp	r3, #64	; 0x40
 80072a6:	d81d      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d010      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80072b0:	e018      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072b2:	4b89      	ldr	r3, [pc, #548]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	4a88      	ldr	r2, [pc, #544]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072be:	e015      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 fa9a 	bl	8008800 <RCCEx_PLLSAI1_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072d0:	e00c      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3320      	adds	r3, #32
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 fb85 	bl	80089e8 <RCCEx_PLLSAI2_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072e2:	e003      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	74fb      	strb	r3, [r7, #19]
      break;
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80072ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ec:	7cfb      	ldrb	r3, [r7, #19]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072f2:	4b79      	ldr	r3, [pc, #484]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072f8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007300:	4975      	ldr	r1, [pc, #468]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007308:	e001      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	7cfb      	ldrb	r3, [r7, #19]
 800730c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d047      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007322:	d030      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d82a      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800732a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732e:	d02a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8007330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007334:	d824      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800733a:	d008      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800733c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007340:	d81e      	bhi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734a:	d010      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800734c:	e018      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800734e:	4b62      	ldr	r3, [pc, #392]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	4a61      	ldr	r2, [pc, #388]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007358:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800735a:	e015      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	2100      	movs	r1, #0
 8007362:	4618      	mov	r0, r3
 8007364:	f001 fa4c 	bl	8008800 <RCCEx_PLLSAI1_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800736c:	e00c      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3320      	adds	r3, #32
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fb37 	bl	80089e8 <RCCEx_PLLSAI2_Config>
 800737a:	4603      	mov	r3, r0
 800737c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800737e:	e003      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	74fb      	strb	r3, [r7, #19]
      break;
 8007384:	e000      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007386:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007388:	7cfb      	ldrb	r3, [r7, #19]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800738e:	4b52      	ldr	r3, [pc, #328]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739c:	494e      	ldr	r1, [pc, #312]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80073a4:	e001      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a6:	7cfb      	ldrb	r3, [r7, #19]
 80073a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 809f 	beq.w	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b8:	2300      	movs	r3, #0
 80073ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073bc:	4b46      	ldr	r3, [pc, #280]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00d      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d2:	4b41      	ldr	r3, [pc, #260]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d6:	4a40      	ldr	r2, [pc, #256]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073dc:	6593      	str	r3, [r2, #88]	; 0x58
 80073de:	4b3e      	ldr	r3, [pc, #248]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ea:	2301      	movs	r3, #1
 80073ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073ee:	4b3b      	ldr	r3, [pc, #236]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a3a      	ldr	r2, [pc, #232]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80073f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073fa:	f7fa ffe5 	bl	80023c8 <HAL_GetTick>
 80073fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007400:	e009      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007402:	f7fa ffe1 	bl	80023c8 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d902      	bls.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	74fb      	strb	r3, [r7, #19]
        break;
 8007414:	e005      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007416:	4b31      	ldr	r3, [pc, #196]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0ef      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8007422:	7cfb      	ldrb	r3, [r7, #19]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d15b      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007428:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007432:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01f      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	429a      	cmp	r2, r3
 8007444:	d019      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007446:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007450:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007452:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007458:	4a1f      	ldr	r2, [pc, #124]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800745a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800745e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007462:	4b1d      	ldr	r3, [pc, #116]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800746a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007472:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d016      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007484:	f7fa ffa0 	bl	80023c8 <HAL_GetTick>
 8007488:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800748a:	e00b      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748c:	f7fa ff9c 	bl	80023c8 <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f241 3288 	movw	r2, #5000	; 0x1388
 800749a:	4293      	cmp	r3, r2
 800749c:	d902      	bls.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	74fb      	strb	r3, [r7, #19]
            break;
 80074a2:	e006      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0ec      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80074b2:	7cfb      	ldrb	r3, [r7, #19]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10c      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074b8:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	4903      	ldr	r1, [pc, #12]	; (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074d0:	e008      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074d2:	7cfb      	ldrb	r3, [r7, #19]
 80074d4:	74bb      	strb	r3, [r7, #18]
 80074d6:	e005      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80074d8:	40021000 	.word	0x40021000
 80074dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e4:	7c7b      	ldrb	r3, [r7, #17]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d105      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ea:	4ba0      	ldr	r3, [pc, #640]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	4a9f      	ldr	r2, [pc, #636]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007502:	4b9a      	ldr	r3, [pc, #616]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007508:	f023 0203 	bic.w	r2, r3, #3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	4996      	ldr	r1, [pc, #600]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007524:	4b91      	ldr	r3, [pc, #580]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752a:	f023 020c 	bic.w	r2, r3, #12
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	498e      	ldr	r1, [pc, #568]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007546:	4b89      	ldr	r3, [pc, #548]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007554:	4985      	ldr	r1, [pc, #532]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007568:	4b80      	ldr	r3, [pc, #512]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007576:	497d      	ldr	r1, [pc, #500]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0310 	and.w	r3, r3, #16
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800758a:	4b78      	ldr	r3, [pc, #480]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007598:	4974      	ldr	r1, [pc, #464]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075ac:	4b6f      	ldr	r3, [pc, #444]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ba:	496c      	ldr	r1, [pc, #432]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ce:	4b67      	ldr	r3, [pc, #412]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075dc:	4963      	ldr	r1, [pc, #396]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075f0:	4b5e      	ldr	r3, [pc, #376]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075fe:	495b      	ldr	r1, [pc, #364]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007612:	4b56      	ldr	r3, [pc, #344]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007618:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	4952      	ldr	r1, [pc, #328]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007634:	4b4d      	ldr	r3, [pc, #308]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	494a      	ldr	r1, [pc, #296]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007656:	4b45      	ldr	r3, [pc, #276]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007664:	4941      	ldr	r1, [pc, #260]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007678:	4b3c      	ldr	r3, [pc, #240]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800767a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767e:	f023 0203 	bic.w	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007686:	4939      	ldr	r1, [pc, #228]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d028      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800769a:	4b34      	ldr	r3, [pc, #208]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a8:	4930      	ldr	r1, [pc, #192]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b8:	d106      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076ba:	4b2c      	ldr	r3, [pc, #176]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4a2b      	ldr	r2, [pc, #172]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c4:	60d3      	str	r3, [r2, #12]
 80076c6:	e011      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d0:	d10c      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f891 	bl	8008800 <RCCEx_PLLSAI1_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80076e2:	7cfb      	ldrb	r3, [r7, #19]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
 80076ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d04d      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007700:	d108      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007702:	4b1a      	ldr	r3, [pc, #104]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007708:	4a18      	ldr	r2, [pc, #96]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800770a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800770e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007712:	e012      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800771a:	4a14      	ldr	r2, [pc, #80]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800771c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007720:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007724:	4b11      	ldr	r3, [pc, #68]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007732:	490e      	ldr	r1, [pc, #56]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007734:	4313      	orrs	r3, r2
 8007736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800773e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007742:	d106      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007744:	4b09      	ldr	r3, [pc, #36]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	4a08      	ldr	r2, [pc, #32]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800774a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774e:	60d3      	str	r3, [r2, #12]
 8007750:	e020      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800775a:	d109      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800775c:	4b03      	ldr	r3, [pc, #12]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4a02      	ldr	r2, [pc, #8]	; (800776c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007766:	60d3      	str	r3, [r2, #12]
 8007768:	e014      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800776a:	bf00      	nop
 800776c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007778:	d10c      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3304      	adds	r3, #4
 800777e:	2101      	movs	r1, #1
 8007780:	4618      	mov	r0, r3
 8007782:	f001 f83d 	bl	8008800 <RCCEx_PLLSAI1_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800778a:	7cfb      	ldrb	r3, [r7, #19]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007790:	7cfb      	ldrb	r3, [r7, #19]
 8007792:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d028      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077a0:	4b4a      	ldr	r3, [pc, #296]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ae:	4947      	ldr	r1, [pc, #284]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077be:	d106      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077c0:	4b42      	ldr	r3, [pc, #264]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	4a41      	ldr	r2, [pc, #260]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ca:	60d3      	str	r3, [r2, #12]
 80077cc:	e011      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077d6:	d10c      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 f80e 	bl	8008800 <RCCEx_PLLSAI1_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077e8:	7cfb      	ldrb	r3, [r7, #19]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80077ee:	7cfb      	ldrb	r3, [r7, #19]
 80077f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01e      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077fe:	4b33      	ldr	r3, [pc, #204]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007804:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780e:	492f      	ldr	r1, [pc, #188]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800781c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007820:	d10c      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3304      	adds	r3, #4
 8007826:	2102      	movs	r1, #2
 8007828:	4618      	mov	r0, r3
 800782a:	f000 ffe9 	bl	8008800 <RCCEx_PLLSAI1_Config>
 800782e:	4603      	mov	r3, r0
 8007830:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007832:	7cfb      	ldrb	r3, [r7, #19]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007838:	7cfb      	ldrb	r3, [r7, #19]
 800783a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007848:	4b20      	ldr	r3, [pc, #128]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800784a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800784e:	f023 0204 	bic.w	r2, r3, #4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007858:	491c      	ldr	r1, [pc, #112]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800786c:	4b17      	ldr	r3, [pc, #92]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800786e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007872:	f023 0218 	bic.w	r2, r3, #24
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787c:	4913      	ldr	r1, [pc, #76]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d017      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007890:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a0:	490a      	ldr	r1, [pc, #40]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078b2:	d105      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4a04      	ldr	r2, [pc, #16]	; (80078cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80078c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	40021000 	.word	0x40021000

080078d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078e2:	d13e      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80078e4:	4bbd      	ldr	r3, [pc, #756]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ee:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f6:	d028      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fe:	f200 86ee 	bhi.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007908:	d005      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007910:	d00e      	beq.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007912:	f000 bee4 	b.w	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007916:	4bb1      	ldr	r3, [pc, #708]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b02      	cmp	r3, #2
 8007922:	f040 86e5 	bne.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
        frequency = LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792a:	61fb      	str	r3, [r7, #28]
      break;
 800792c:	f000 bee0 	b.w	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007930:	4baa      	ldr	r3, [pc, #680]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8007932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b02      	cmp	r3, #2
 800793c:	f040 86da 	bne.w	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
          frequency = LSI_VALUE;
 8007940:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007944:	61fb      	str	r3, [r7, #28]
      break;
 8007946:	f000 bed5 	b.w	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800794a:	4ba4      	ldr	r3, [pc, #656]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007956:	f040 86cf 	bne.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
        frequency = HSE_VALUE / 32U;
 800795a:	4ba1      	ldr	r3, [pc, #644]	; (8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800795c:	61fb      	str	r3, [r7, #28]
      break;
 800795e:	f000 becb 	b.w	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007962:	4b9e      	ldr	r3, [pc, #632]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	2b03      	cmp	r3, #3
 8007970:	d036      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b03      	cmp	r3, #3
 8007976:	d840      	bhi.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d003      	beq.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d020      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007984:	e039      	b.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007986:	4b95      	ldr	r3, [pc, #596]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d116      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007992:	4b92      	ldr	r3, [pc, #584]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800799e:	4b8f      	ldr	r3, [pc, #572]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	091b      	lsrs	r3, r3, #4
 80079a4:	f003 030f 	and.w	r3, r3, #15
 80079a8:	e005      	b.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80079aa:	4b8c      	ldr	r3, [pc, #560]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80079ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079b0:	0a1b      	lsrs	r3, r3, #8
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	4a8b      	ldr	r2, [pc, #556]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80079b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80079be:	e01f      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]
      break;
 80079c4:	e01c      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079c6:	4b85      	ldr	r3, [pc, #532]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d2:	d102      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80079d4:	4b84      	ldr	r3, [pc, #528]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80079d6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80079d8:	e012      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	61bb      	str	r3, [r7, #24]
      break;
 80079de:	e00f      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80079e0:	4b7e      	ldr	r3, [pc, #504]	; (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ec:	d102      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80079ee:	4b7f      	ldr	r3, [pc, #508]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 80079f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80079f2:	e005      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61bb      	str	r3, [r7, #24]
      break;
 80079f8:	e002      	b.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
      break;
 80079fe:	bf00      	nop
    }

    switch(PeriphClk)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a06:	f000 8600 	beq.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a10:	f200 8674 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a1a:	f000 8468 	beq.w	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a24:	f200 866a 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2e:	f000 852f 	beq.w	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a38:	f200 8660 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a42:	f000 8185 	beq.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a4c:	f200 8656 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a56:	f000 80cb 	beq.w	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a60:	f200 864c 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6a:	f000 842f 	beq.w	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a74:	f200 8642 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a7e:	f000 83e3 	beq.w	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a88:	f200 8638 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a92:	f000 80ad 	beq.w	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9c:	f200 862e 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa6:	f000 8091 	beq.w	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab0:	f200 8624 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aba:	d07f      	beq.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac2:	f200 861b 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007acc:	f000 8553 	beq.w	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad6:	f200 8611 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae0:	f000 84ff 	beq.w	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aea:	f200 8607 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af4:	f000 84a0 	beq.w	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afe:	f200 85fd 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b80      	cmp	r3, #128	; 0x80
 8007b06:	f000 8465 	beq.w	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	f200 85f5 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d84b      	bhi.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 85ee 	beq.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	2b1f      	cmp	r3, #31
 8007b26:	f200 85e9 	bhi.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007f43 	.word	0x08007f43
 8007b34:	08007fb3 	.word	0x08007fb3
 8007b38:	080086fd 	.word	0x080086fd
 8007b3c:	08008047 	.word	0x08008047
 8007b40:	080086fd 	.word	0x080086fd
 8007b44:	080086fd 	.word	0x080086fd
 8007b48:	080086fd 	.word	0x080086fd
 8007b4c:	080080bf 	.word	0x080080bf
 8007b50:	080086fd 	.word	0x080086fd
 8007b54:	080086fd 	.word	0x080086fd
 8007b58:	080086fd 	.word	0x080086fd
 8007b5c:	080086fd 	.word	0x080086fd
 8007b60:	080086fd 	.word	0x080086fd
 8007b64:	080086fd 	.word	0x080086fd
 8007b68:	080086fd 	.word	0x080086fd
 8007b6c:	08008137 	.word	0x08008137
 8007b70:	080086fd 	.word	0x080086fd
 8007b74:	080086fd 	.word	0x080086fd
 8007b78:	080086fd 	.word	0x080086fd
 8007b7c:	080086fd 	.word	0x080086fd
 8007b80:	080086fd 	.word	0x080086fd
 8007b84:	080086fd 	.word	0x080086fd
 8007b88:	080086fd 	.word	0x080086fd
 8007b8c:	080086fd 	.word	0x080086fd
 8007b90:	080086fd 	.word	0x080086fd
 8007b94:	080086fd 	.word	0x080086fd
 8007b98:	080086fd 	.word	0x080086fd
 8007b9c:	080086fd 	.word	0x080086fd
 8007ba0:	080086fd 	.word	0x080086fd
 8007ba4:	080086fd 	.word	0x080086fd
 8007ba8:	080086fd 	.word	0x080086fd
 8007bac:	080081c7 	.word	0x080081c7
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b40      	cmp	r3, #64	; 0x40
 8007bb4:	f000 83e2 	beq.w	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007bb8:	f000 bda0 	b.w	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007bbc:	69b9      	ldr	r1, [r7, #24]
 8007bbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007bc2:	f001 f805 	bl	8008bd0 <RCCEx_GetSAIxPeriphCLKFreq>
 8007bc6:	61f8      	str	r0, [r7, #28]
      break;
 8007bc8:	f000 bd9b 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007bcc:	69b9      	ldr	r1, [r7, #24]
 8007bce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007bd2:	f000 fffd 	bl	8008bd0 <RCCEx_GetSAIxPeriphCLKFreq>
 8007bd6:	61f8      	str	r0, [r7, #28]
      break;
 8007bd8:	f000 bd93 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
 8007bdc:	40021000 	.word	0x40021000
 8007be0:	0003d090 	.word	0x0003d090
 8007be4:	08014af0 	.word	0x08014af0
 8007be8:	00f42400 	.word	0x00f42400
 8007bec:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007bf0:	4bb0      	ldr	r3, [pc, #704]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c02:	d015      	beq.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c0a:	f200 8092 	bhi.w	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c14:	d029      	beq.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c1c:	f200 8089 	bhi.w	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d07b      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c2c:	d04a      	beq.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8007c2e:	e080      	b.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c30:	4ba0      	ldr	r3, [pc, #640]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d17d      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c3c:	4b9d      	ldr	r3, [pc, #628]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0308 	and.w	r3, r3, #8
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8007c48:	4b9a      	ldr	r3, [pc, #616]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	e005      	b.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8007c54:	4b97      	ldr	r3, [pc, #604]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c5a:	0a1b      	lsrs	r3, r3, #8
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	4a95      	ldr	r2, [pc, #596]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c66:	61fb      	str	r3, [r7, #28]
          break;
 8007c68:	e066      	b.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007c6a:	4b92      	ldr	r3, [pc, #584]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c76:	d162      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007c78:	4b8e      	ldr	r3, [pc, #568]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c84:	d15b      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007c86:	4b8b      	ldr	r3, [pc, #556]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	0a1b      	lsrs	r3, r3, #8
 8007c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c90:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	fb02 f203 	mul.w	r2, r2, r3
 8007c9a:	4b86      	ldr	r3, [pc, #536]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007caa:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007cac:	4b81      	ldr	r3, [pc, #516]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	0d5b      	lsrs	r3, r3, #21
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc0:	61fb      	str	r3, [r7, #28]
          break;
 8007cc2:	e03c      	b.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007cc4:	4b7b      	ldr	r3, [pc, #492]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd0:	d138      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007cd2:	4b78      	ldr	r3, [pc, #480]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cde:	d131      	bne.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007ce0:	4b74      	ldr	r3, [pc, #464]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	0a1b      	lsrs	r3, r3, #8
 8007ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cea:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	fb02 f203 	mul.w	r2, r2, r3
 8007cf4:	4b6f      	ldr	r3, [pc, #444]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	091b      	lsrs	r3, r3, #4
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	3301      	adds	r3, #1
 8007d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d04:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007d06:	4b6b      	ldr	r3, [pc, #428]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	0d5b      	lsrs	r3, r3, #21
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	3301      	adds	r3, #1
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d1a:	61fb      	str	r3, [r7, #28]
          break;
 8007d1c:	e012      	b.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007d1e:	4b65      	ldr	r3, [pc, #404]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d10e      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8007d2c:	4b63      	ldr	r3, [pc, #396]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>)
 8007d2e:	61fb      	str	r3, [r7, #28]
          break;
 8007d30:	e00b      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8007d32:	bf00      	nop
 8007d34:	f000 bce5 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8007d38:	bf00      	nop
 8007d3a:	f000 bce2 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8007d3e:	bf00      	nop
 8007d40:	f000 bcdf 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8007d44:	bf00      	nop
 8007d46:	f000 bcdc 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8007d4a:	bf00      	nop
        break;
 8007d4c:	f000 bcd9 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007d50:	4b58      	ldr	r3, [pc, #352]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d5e:	d13d      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007d60:	4b54      	ldr	r3, [pc, #336]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d6c:	f040 84c8 	bne.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007d70:	4b50      	ldr	r3, [pc, #320]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7c:	f040 84c0 	bne.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007d80:	4b4c      	ldr	r3, [pc, #304]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d8a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	fb02 f203 	mul.w	r2, r2, r3
 8007d94:	4b47      	ldr	r3, [pc, #284]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	091b      	lsrs	r3, r3, #4
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	3301      	adds	r3, #1
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007da6:	4b43      	ldr	r3, [pc, #268]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	0edb      	lsrs	r3, r3, #27
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007db8:	4b3e      	ldr	r3, [pc, #248]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8007dc4:	2311      	movs	r3, #17
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	e001      	b.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8007dca:	2307      	movs	r3, #7
 8007dcc:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	61fb      	str	r3, [r7, #28]
      break;
 8007dd8:	f000 bc92 	b.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007ddc:	4b35      	ldr	r3, [pc, #212]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007dee:	d016      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007df6:	f200 809a 	bhi.w	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e00:	d02b      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e08:	f200 8091 	bhi.w	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8083 	beq.w	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e1a:	d051      	beq.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
          break;
 8007e1c:	e087      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e1e:	4b25      	ldr	r3, [pc, #148]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	f040 8083 	bne.w	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e2c:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0308 	and.w	r3, r3, #8
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8007e38:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	091b      	lsrs	r3, r3, #4
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	e005      	b.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8007e44:	4b1b      	ldr	r3, [pc, #108]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e4a:	0a1b      	lsrs	r3, r3, #8
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8007e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e56:	61fb      	str	r3, [r7, #28]
          break;
 8007e58:	e06b      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007e5a:	4b16      	ldr	r3, [pc, #88]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e66:	d166      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007e68:	4b12      	ldr	r3, [pc, #72]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e74:	d15f      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e80:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	fb02 f203 	mul.w	r2, r2, r3
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	091b      	lsrs	r3, r3, #4
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	3301      	adds	r3, #1
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007e9c:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	0d5b      	lsrs	r3, r3, #21
 8007ea2:	f003 0303 	and.w	r3, r3, #3
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	61fb      	str	r3, [r7, #28]
          break;
 8007eb2:	e040      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	08014af0 	.word	0x08014af0
 8007ebc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007ec0:	4bae      	ldr	r3, [pc, #696]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ecc:	d135      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007ece:	4bab      	ldr	r3, [pc, #684]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d12e      	bne.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007edc:	4ba7      	ldr	r3, [pc, #668]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	0a1b      	lsrs	r3, r3, #8
 8007ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ee6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	fb02 f203 	mul.w	r2, r2, r3
 8007ef0:	4ba2      	ldr	r3, [pc, #648]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	091b      	lsrs	r3, r3, #4
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	3301      	adds	r3, #1
 8007efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f00:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007f02:	4b9e      	ldr	r3, [pc, #632]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	0d5b      	lsrs	r3, r3, #21
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f16:	61fb      	str	r3, [r7, #28]
          break;
 8007f18:	e00f      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007f1a:	4b98      	ldr	r3, [pc, #608]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d10a      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            frequency = HSI48_VALUE;
 8007f28:	4b95      	ldr	r3, [pc, #596]	; (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8007f2a:	61fb      	str	r3, [r7, #28]
          break;
 8007f2c:	e007      	b.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          break;
 8007f2e:	bf00      	nop
 8007f30:	e3e6      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f32:	bf00      	nop
 8007f34:	e3e4      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f36:	bf00      	nop
 8007f38:	e3e2      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f3a:	bf00      	nop
 8007f3c:	e3e0      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007f3e:	bf00      	nop
      break;
 8007f40:	e3de      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007f42:	4b8e      	ldr	r3, [pc, #568]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d828      	bhi.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f75 	.word	0x08007f75
 8007f64:	08007f7d 	.word	0x08007f7d
 8007f68:	08007f91 	.word	0x08007f91
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f6c:	f7ff f876 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 8007f70:	61f8      	str	r0, [r7, #28]
          break;
 8007f72:	e01d      	b.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f74:	f7fe ffc4 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8007f78:	61f8      	str	r0, [r7, #28]
          break;
 8007f7a:	e019      	b.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f7c:	4b7f      	ldr	r3, [pc, #508]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f88:	d10f      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8007f8a:	4b7e      	ldr	r3, [pc, #504]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
 8007f8c:	61fb      	str	r3, [r7, #28]
          break;
 8007f8e:	e00c      	b.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f90:	4b7a      	ldr	r3, [pc, #488]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d107      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8007f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fa2:	61fb      	str	r3, [r7, #28]
          break;
 8007fa4:	e003      	b.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8007fa6:	bf00      	nop
 8007fa8:	e3ab      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8007faa:	bf00      	nop
 8007fac:	e3a9      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8007fae:	bf00      	nop
        break;
 8007fb0:	e3a7      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007fb2:	4b72      	ldr	r3, [pc, #456]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb8:	f003 030c 	and.w	r3, r3, #12
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b0c      	cmp	r3, #12
 8007fc2:	d83a      	bhi.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08008001 	.word	0x08008001
 8007fd0:	0800803b 	.word	0x0800803b
 8007fd4:	0800803b 	.word	0x0800803b
 8007fd8:	0800803b 	.word	0x0800803b
 8007fdc:	08008009 	.word	0x08008009
 8007fe0:	0800803b 	.word	0x0800803b
 8007fe4:	0800803b 	.word	0x0800803b
 8007fe8:	0800803b 	.word	0x0800803b
 8007fec:	08008011 	.word	0x08008011
 8007ff0:	0800803b 	.word	0x0800803b
 8007ff4:	0800803b 	.word	0x0800803b
 8007ff8:	0800803b 	.word	0x0800803b
 8007ffc:	08008025 	.word	0x08008025
          frequency = HAL_RCC_GetPCLK1Freq();
 8008000:	f7ff f816 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008004:	61f8      	str	r0, [r7, #28]
          break;
 8008006:	e01d      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8008008:	f7fe ff7a 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800800c:	61f8      	str	r0, [r7, #28]
          break;
 800800e:	e019      	b.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008010:	4b5a      	ldr	r3, [pc, #360]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801c:	d10f      	bne.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800801e:	4b59      	ldr	r3, [pc, #356]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
 8008020:	61fb      	str	r3, [r7, #28]
          break;
 8008022:	e00c      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008024:	4b55      	ldr	r3, [pc, #340]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b02      	cmp	r3, #2
 8008030:	d107      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 8008032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008036:	61fb      	str	r3, [r7, #28]
          break;
 8008038:	e003      	b.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800803a:	bf00      	nop
 800803c:	e361      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 800803e:	bf00      	nop
 8008040:	e35f      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008042:	bf00      	nop
        break;
 8008044:	e35d      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008046:	4b4d      	ldr	r3, [pc, #308]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b30      	cmp	r3, #48	; 0x30
 8008056:	d021      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b30      	cmp	r3, #48	; 0x30
 800805c:	d829      	bhi.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b20      	cmp	r3, #32
 8008062:	d011      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b20      	cmp	r3, #32
 8008068:	d823      	bhi.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b10      	cmp	r3, #16
 8008074:	d004      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8008076:	e01c      	b.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008078:	f7fe ffda 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 800807c:	61f8      	str	r0, [r7, #28]
          break;
 800807e:	e01d      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8008080:	f7fe ff3e 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8008084:	61f8      	str	r0, [r7, #28]
          break;
 8008086:	e019      	b.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008088:	4b3c      	ldr	r3, [pc, #240]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008094:	d10f      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8008096:	4b3b      	ldr	r3, [pc, #236]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
 8008098:	61fb      	str	r3, [r7, #28]
          break;
 800809a:	e00c      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800809c:	4b37      	ldr	r3, [pc, #220]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d107      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80080aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ae:	61fb      	str	r3, [r7, #28]
          break;
 80080b0:	e003      	b.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80080b2:	bf00      	nop
 80080b4:	e325      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80080b6:	bf00      	nop
 80080b8:	e323      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80080ba:	bf00      	nop
        break;
 80080bc:	e321      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80080be:	4b2f      	ldr	r3, [pc, #188]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80080c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2bc0      	cmp	r3, #192	; 0xc0
 80080ce:	d021      	beq.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2bc0      	cmp	r3, #192	; 0xc0
 80080d4:	d829      	bhi.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d011      	beq.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b80      	cmp	r3, #128	; 0x80
 80080e0:	d823      	bhi.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	d004      	beq.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80080ee:	e01c      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080f0:	f7fe ff9e 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 80080f4:	61f8      	str	r0, [r7, #28]
          break;
 80080f6:	e01d      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          frequency = HAL_RCC_GetSysClockFreq();
 80080f8:	f7fe ff02 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 80080fc:	61f8      	str	r0, [r7, #28]
          break;
 80080fe:	e019      	b.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008100:	4b1e      	ldr	r3, [pc, #120]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810c:	d10f      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = HSI_VALUE;
 800810e:	4b1d      	ldr	r3, [pc, #116]	; (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
 8008110:	61fb      	str	r3, [r7, #28]
          break;
 8008112:	e00c      	b.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008114:	4b19      	ldr	r3, [pc, #100]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b02      	cmp	r3, #2
 8008120:	d107      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
            frequency = LSE_VALUE;
 8008122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008126:	61fb      	str	r3, [r7, #28]
          break;
 8008128:	e003      	b.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          break;
 800812a:	bf00      	nop
 800812c:	e2e9      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 800812e:	bf00      	nop
 8008130:	e2e7      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008132:	bf00      	nop
        break;
 8008134:	e2e5      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008136:	4b11      	ldr	r3, [pc, #68]	; (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008148:	d02c      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008150:	d833      	bhi.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008158:	d01a      	beq.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d82b      	bhi.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d004      	beq.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d00b      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          break;
 8008170:	e023      	b.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008172:	f7fe ff5d 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008176:	61f8      	str	r0, [r7, #28]
          break;
 8008178:	e024      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 800817a:	bf00      	nop
 800817c:	40021000 	.word	0x40021000
 8008180:	02dc6c00 	.word	0x02dc6c00
 8008184:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 8008188:	f7fe feba 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800818c:	61f8      	str	r0, [r7, #28]
          break;
 800818e:	e019      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008190:	4ba6      	ldr	r3, [pc, #664]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d10f      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 800819e:	4ba4      	ldr	r3, [pc, #656]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 80081a0:	61fb      	str	r3, [r7, #28]
          break;
 80081a2:	e00c      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081a4:	4ba1      	ldr	r3, [pc, #644]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d107      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
            frequency = LSE_VALUE;
 80081b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b6:	61fb      	str	r3, [r7, #28]
          break;
 80081b8:	e003      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          break;
 80081ba:	bf00      	nop
 80081bc:	e2a1      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80081be:	bf00      	nop
 80081c0:	e29f      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80081c2:	bf00      	nop
        break;
 80081c4:	e29d      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80081c6:	4b99      	ldr	r3, [pc, #612]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081d8:	d025      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e0:	d82c      	bhi.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e8:	d013      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d824      	bhi.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fe:	d004      	beq.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
          break;
 8008200:	e01c      	b.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008202:	f7fe ff15 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008206:	61f8      	str	r0, [r7, #28]
          break;
 8008208:	e01d      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          frequency = HAL_RCC_GetSysClockFreq();
 800820a:	f7fe fe79 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800820e:	61f8      	str	r0, [r7, #28]
          break;
 8008210:	e019      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008212:	4b86      	ldr	r3, [pc, #536]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800821a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800821e:	d10f      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = HSI_VALUE;
 8008220:	4b83      	ldr	r3, [pc, #524]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 8008222:	61fb      	str	r3, [r7, #28]
          break;
 8008224:	e00c      	b.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008226:	4b81      	ldr	r3, [pc, #516]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b02      	cmp	r3, #2
 8008232:	d107      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
            frequency = LSE_VALUE;
 8008234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008238:	61fb      	str	r3, [r7, #28]
          break;
 800823a:	e003      	b.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          break;
 800823c:	bf00      	nop
 800823e:	e260      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008240:	bf00      	nop
 8008242:	e25e      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008244:	bf00      	nop
        break;
 8008246:	e25c      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008248:	4b78      	ldr	r3, [pc, #480]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800824a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800825a:	d007      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008262:	d12f      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008264:	f7fe fe4c 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8008268:	61f8      	str	r0, [r7, #28]
          break;
 800826a:	e02e      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800826c:	4b6f      	ldr	r3, [pc, #444]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008278:	d126      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 800827a:	4b6c      	ldr	r3, [pc, #432]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d020      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008286:	4b69      	ldr	r3, [pc, #420]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008290:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	fb02 f203 	mul.w	r2, r2, r3
 800829a:	4b64      	ldr	r3, [pc, #400]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	091b      	lsrs	r3, r3, #4
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	3301      	adds	r3, #1
 80082a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082aa:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80082ac:	4b5f      	ldr	r3, [pc, #380]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	0e5b      	lsrs	r3, r3, #25
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	3301      	adds	r3, #1
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c0:	61fb      	str	r3, [r7, #28]
          break;
 80082c2:	e001      	b.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          break;
 80082c4:	bf00      	nop
 80082c6:	e21c      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80082c8:	bf00      	nop
        break;
 80082ca:	e21a      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80082cc:	4b57      	ldr	r3, [pc, #348]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80082ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
          frequency = HAL_RCC_GetPCLK2Freq();
 80082de:	f7fe febd 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 80082e2:	61f8      	str	r0, [r7, #28]
        break;
 80082e4:	e20d      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          frequency = HAL_RCC_GetSysClockFreq();
 80082e6:	f7fe fe0b 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 80082ea:	61f8      	str	r0, [r7, #28]
        break;
 80082ec:	e209      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80082ee:	4b4f      	ldr	r3, [pc, #316]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80082f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082f4:	f003 0318 	and.w	r3, r3, #24
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b10      	cmp	r3, #16
 80082fe:	d010      	beq.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2b10      	cmp	r3, #16
 8008304:	d834      	bhi.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d024      	beq.n	800835c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>
          break;
 8008312:	e02d      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800831a:	f000 fc59 	bl	8008bd0 <RCCEx_GetSAIxPeriphCLKFreq>
 800831e:	61f8      	str	r0, [r7, #28]
          break;
 8008320:	e02b      	b.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8008322:	4b42      	ldr	r3, [pc, #264]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d122      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800832e:	4b3f      	ldr	r3, [pc, #252]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800833a:	4b3c      	ldr	r3, [pc, #240]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	e005      	b.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008346:	4b39      	ldr	r3, [pc, #228]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	4a38      	ldr	r2, [pc, #224]	; (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>)
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	61fb      	str	r3, [r7, #28]
          break;
 800835a:	e00b      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800835c:	4b33      	ldr	r3, [pc, #204]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008368:	d106      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
            frequency = HSI_VALUE;
 800836a:	4b31      	ldr	r3, [pc, #196]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 800836c:	61fb      	str	r3, [r7, #28]
          break;
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          break;
 8008370:	bf00      	nop
 8008372:	e1c6      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008374:	bf00      	nop
 8008376:	e1c4      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008378:	bf00      	nop
        break;
 800837a:	e1c2      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800837c:	4b2b      	ldr	r3, [pc, #172]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800837e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008382:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800838e:	d013      	beq.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008396:	d819      	bhi.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d004      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a4:	d004      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          break;
 80083a6:	e011      	b.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083a8:	f7fe fe42 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 80083ac:	61f8      	str	r0, [r7, #28]
          break;
 80083ae:	e010      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          frequency = HAL_RCC_GetSysClockFreq();
 80083b0:	f7fe fda6 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 80083b4:	61f8      	str	r0, [r7, #28]
          break;
 80083b6:	e00c      	b.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083b8:	4b1c      	ldr	r3, [pc, #112]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c4:	d104      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
            frequency = HSI_VALUE;
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 80083c8:	61fb      	str	r3, [r7, #28]
          break;
 80083ca:	e001      	b.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          break;
 80083cc:	bf00      	nop
 80083ce:	e198      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80083d0:	bf00      	nop
        break;
 80083d2:	e196      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80083d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083e6:	d013      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ee:	d819      	bhi.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083fc:	d004      	beq.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
          break;
 80083fe:	e011      	b.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008400:	f7fe fe16 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008404:	61f8      	str	r0, [r7, #28]
          break;
 8008406:	e010      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008408:	f7fe fd7a 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800840c:	61f8      	str	r0, [r7, #28]
          break;
 800840e:	e00c      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008410:	4b06      	ldr	r3, [pc, #24]	; (800842c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800841c:	d104      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>
            frequency = HSI_VALUE;
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 8008420:	61fb      	str	r3, [r7, #28]
          break;
 8008422:	e001      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>
          break;
 8008424:	bf00      	nop
 8008426:	e16c      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008428:	bf00      	nop
        break;
 800842a:	e16a      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
 800842c:	40021000 	.word	0x40021000
 8008430:	00f42400 	.word	0x00f42400
 8008434:	08014af0 	.word	0x08014af0
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008438:	4baa      	ldr	r3, [pc, #680]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800843a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800844a:	d013      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008452:	d819      	bhi.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008460:	d004      	beq.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 8008462:	e011      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008464:	f7fe fde4 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008468:	61f8      	str	r0, [r7, #28]
          break;
 800846a:	e010      	b.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 800846c:	f7fe fd48 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 8008470:	61f8      	str	r0, [r7, #28]
          break;
 8008472:	e00c      	b.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008474:	4b9b      	ldr	r3, [pc, #620]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008480:	d104      	bne.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 8008482:	4b99      	ldr	r3, [pc, #612]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 8008484:	61fb      	str	r3, [r7, #28]
          break;
 8008486:	e001      	b.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8008488:	bf00      	nop
 800848a:	e13a      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 800848c:	bf00      	nop
        break;
 800848e:	e138      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008490:	4b94      	ldr	r3, [pc, #592]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d011      	beq.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d818      	bhi.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d004      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80084b4:	e011      	b.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80084b6:	f7fe fdbb 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 80084ba:	61f8      	str	r0, [r7, #28]
          break;
 80084bc:	e010      	b.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80084be:	f7fe fd1f 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 80084c2:	61f8      	str	r0, [r7, #28]
          break;
 80084c4:	e00c      	b.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084c6:	4b87      	ldr	r3, [pc, #540]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d2:	d104      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80084d4:	4b84      	ldr	r3, [pc, #528]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 80084d6:	61fb      	str	r3, [r7, #28]
          break;
 80084d8:	e001      	b.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80084da:	bf00      	nop
 80084dc:	e111      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80084de:	bf00      	nop
        break;
 80084e0:	e10f      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80084e2:	4b80      	ldr	r3, [pc, #512]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80084f4:	d02c      	beq.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80084fc:	d833      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008504:	d01a      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800850c:	d82b      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800851a:	d004      	beq.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 800851c:	e023      	b.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800851e:	f7fe fd87 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 8008522:	61f8      	str	r0, [r7, #28]
          break;
 8008524:	e026      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008526:	4b6f      	ldr	r3, [pc, #444]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b02      	cmp	r3, #2
 8008532:	d11a      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8008534:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008538:	61fb      	str	r3, [r7, #28]
          break;
 800853a:	e016      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800853c:	4b69      	ldr	r3, [pc, #420]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008548:	d111      	bne.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800854a:	4b67      	ldr	r3, [pc, #412]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 800854c:	61fb      	str	r3, [r7, #28]
          break;
 800854e:	e00e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008550:	4b64      	ldr	r3, [pc, #400]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b02      	cmp	r3, #2
 800855c:	d109      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800855e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008562:	61fb      	str	r3, [r7, #28]
          break;
 8008564:	e005      	b.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8008566:	bf00      	nop
 8008568:	e0cb      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 800856a:	bf00      	nop
 800856c:	e0c9      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 800856e:	bf00      	nop
 8008570:	e0c7      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008572:	bf00      	nop
        break;
 8008574:	e0c5      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008576:	4b5b      	ldr	r3, [pc, #364]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008588:	d02c      	beq.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008590:	d833      	bhi.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008598:	d01a      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085a0:	d82b      	bhi.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ae:	d004      	beq.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80085b0:	e023      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80085b2:	f7fe fd3d 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 80085b6:	61f8      	str	r0, [r7, #28]
          break;
 80085b8:	e026      	b.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085ba:	4b4a      	ldr	r3, [pc, #296]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80085bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d11a      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
              frequency = LSI_VALUE;
 80085c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80085cc:	61fb      	str	r3, [r7, #28]
          break;
 80085ce:	e016      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085d0:	4b44      	ldr	r3, [pc, #272]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085dc:	d111      	bne.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = HSI_VALUE;
 80085de:	4b42      	ldr	r3, [pc, #264]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 80085e0:	61fb      	str	r3, [r7, #28]
          break;
 80085e2:	e00e      	b.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80085e4:	4b3f      	ldr	r3, [pc, #252]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d109      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
            frequency = LSE_VALUE;
 80085f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085f6:	61fb      	str	r3, [r7, #28]
          break;
 80085f8:	e005      	b.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          break;
 80085fa:	bf00      	nop
 80085fc:	e081      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80085fe:	bf00      	nop
 8008600:	e07f      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008602:	bf00      	nop
 8008604:	e07d      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 8008606:	bf00      	nop
        break;
 8008608:	e07b      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800860a:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800860c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800861c:	d02c      	beq.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008624:	d855      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008632:	d004      	beq.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
          break;
 8008634:	e04d      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          frequency = HAL_RCC_GetSysClockFreq();
 8008636:	f7fe fc63 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800863a:	61f8      	str	r0, [r7, #28]
          break;
 800863c:	e04e      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800863e:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b02      	cmp	r3, #2
 8008648:	d145      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800864a:	4b26      	ldr	r3, [pc, #152]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0xd92>
 8008656:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	e005      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	f003 030f 	and.w	r3, r3, #15
 800866e:	4a1f      	ldr	r2, [pc, #124]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>)
 8008670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008674:	61fb      	str	r3, [r7, #28]
          break;
 8008676:	e02e      	b.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008678:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008684:	d129      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008686:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800868e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008692:	d122      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008694:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	0a1b      	lsrs	r3, r3, #8
 800869a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	fb02 f203 	mul.w	r2, r2, r3
 80086a8:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	091b      	lsrs	r3, r3, #4
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	3301      	adds	r3, #1
 80086b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	0d5b      	lsrs	r3, r3, #21
 80086c0:	f003 0303 	and.w	r3, r3, #3
 80086c4:	3301      	adds	r3, #1
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	69ba      	ldr	r2, [r7, #24]
 80086ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ce:	61fb      	str	r3, [r7, #28]
          break;
 80086d0:	e003      	b.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          break;
 80086d2:	bf00      	nop
 80086d4:	e015      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80086d6:	bf00      	nop
 80086d8:	e013      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
          break;
 80086da:	bf00      	nop
        break;
 80086dc:	e011      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      break;
 80086de:	bf00      	nop
 80086e0:	e00f      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
 80086e2:	bf00      	nop
 80086e4:	40021000 	.word	0x40021000
 80086e8:	00f42400 	.word	0x00f42400
 80086ec:	08014af0 	.word	0x08014af0
      break;
 80086f0:	bf00      	nop
 80086f2:	e006      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      break;
 80086f4:	bf00      	nop
 80086f6:	e004      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      break;
 80086f8:	bf00      	nop
 80086fa:	e002      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      break;
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
      break;
 8008700:	bf00      	nop
    }
  }

  return(frequency);
 8008702:	69fb      	ldr	r3, [r7, #28]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_RCCEx_EnableLSCO>:
  *            @arg @ref RCC_LSCOSOURCE_LSI  LSI clock selected as LSCO source
  *            @arg @ref RCC_LSCOSOURCE_LSE  LSE clock selected as LSCO source
  * @retval None
  */
void HAL_RCCEx_EnableLSCO(uint32_t LSCOSource)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  FlagStatus       pwrclkchanged = RESET;
 8008714:	2300      	movs	r3, #0
 8008716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FlagStatus       backupchanged = RESET;
 800871a:	2300      	movs	r3, #0
 800871c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* Check the parameters */
  assert_param(IS_RCC_LSCOSOURCE(LSCOSource));

  /* LSCO Pin Clock Enable */
  __LSCO_CLK_ENABLE();
 8008720:	4b2d      	ldr	r3, [pc, #180]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008724:	4a2c      	ldr	r2, [pc, #176]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800872c:	4b2a      	ldr	r3, [pc, #168]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008730:	f003 0301 	and.w	r3, r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]

  /* Configue the LSCO pin in analog mode */
  GPIO_InitStruct.Pin = LSCO_PIN;
 8008738:	2304      	movs	r3, #4
 800873a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800873c:	2303      	movs	r3, #3
 800873e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008740:	2302      	movs	r3, #2
 8008742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008744:	2300      	movs	r3, #0
 8008746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 8008748:	f107 0310 	add.w	r3, r7, #16
 800874c:	4619      	mov	r1, r3
 800874e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008752:	f7fb fb6f 	bl	8003e34 <HAL_GPIO_Init>

  /* Update LSCOSEL clock source in Backup Domain control register */
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008756:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10e      	bne.n	8008780 <HAL_RCCEx_EnableLSCO+0x74>
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008762:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008766:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800876c:	6593      	str	r3, [r2, #88]	; 0x58
 800876e:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008776:	60bb      	str	r3, [r7, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
    pwrclkchanged = SET;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008780:	4b16      	ldr	r3, [pc, #88]	; (80087dc <HAL_RCCEx_EnableLSCO+0xd0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <HAL_RCCEx_EnableLSCO+0x8a>
  {
    HAL_PWR_EnableBkUpAccess();
 800878c:	f7fd fd62 	bl	8006254 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 8008790:	2301      	movs	r3, #1
 8008792:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }

  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 8008798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800879c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	4a0c      	ldr	r2, [pc, #48]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 80087a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  if(backupchanged == SET)
 80087ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d101      	bne.n	80087ba <HAL_RCCEx_EnableLSCO+0xae>
  {
    HAL_PWR_DisableBkUpAccess();
 80087b6:	f7fd fd5d 	bl	8006274 <HAL_PWR_DisableBkUpAccess>
  }
  if(pwrclkchanged == SET)
 80087ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d105      	bne.n	80087ce <HAL_RCCEx_EnableLSCO+0xc2>
  {
    __HAL_RCC_PWR_CLK_DISABLE();
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 80087c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c6:	4a04      	ldr	r2, [pc, #16]	; (80087d8 <HAL_RCCEx_EnableLSCO+0xcc>)
 80087c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
}
 80087ce:	bf00      	nop
 80087d0:	3728      	adds	r7, #40	; 0x28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	40021000 	.word	0x40021000
 80087dc:	40007000 	.word	0x40007000

080087e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80087e4:	4b05      	ldr	r3, [pc, #20]	; (80087fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a04      	ldr	r2, [pc, #16]	; (80087fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80087ea:	f043 0304 	orr.w	r3, r3, #4
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40021000 	.word	0x40021000

08008800 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800880e:	4b72      	ldr	r3, [pc, #456]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800881a:	4b6f      	ldr	r3, [pc, #444]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f003 0203 	and.w	r2, r3, #3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d103      	bne.n	8008832 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
       ||
 800882e:	2b00      	cmp	r3, #0
 8008830:	d142      	bne.n	80088b8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]
 8008836:	e03f      	b.n	80088b8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d018      	beq.n	8008872 <RCCEx_PLLSAI1_Config+0x72>
 8008840:	2b03      	cmp	r3, #3
 8008842:	d825      	bhi.n	8008890 <RCCEx_PLLSAI1_Config+0x90>
 8008844:	2b01      	cmp	r3, #1
 8008846:	d002      	beq.n	800884e <RCCEx_PLLSAI1_Config+0x4e>
 8008848:	2b02      	cmp	r3, #2
 800884a:	d009      	beq.n	8008860 <RCCEx_PLLSAI1_Config+0x60>
 800884c:	e020      	b.n	8008890 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800884e:	4b62      	ldr	r3, [pc, #392]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d11d      	bne.n	8008896 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800885e:	e01a      	b.n	8008896 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008860:	4b5d      	ldr	r3, [pc, #372]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008868:	2b00      	cmp	r3, #0
 800886a:	d116      	bne.n	800889a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008870:	e013      	b.n	800889a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008872:	4b59      	ldr	r3, [pc, #356]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10f      	bne.n	800889e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800887e:	4b56      	ldr	r3, [pc, #344]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800888e:	e006      	b.n	800889e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
      break;
 8008894:	e004      	b.n	80088a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008896:	bf00      	nop
 8008898:	e002      	b.n	80088a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800889a:	bf00      	nop
 800889c:	e000      	b.n	80088a0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800889e:	bf00      	nop
    }

    if(status == HAL_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d108      	bne.n	80088b8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80088a6:	4b4c      	ldr	r3, [pc, #304]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f023 0203 	bic.w	r2, r3, #3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4949      	ldr	r1, [pc, #292]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f040 8086 	bne.w	80089cc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80088c0:	4b45      	ldr	r3, [pc, #276]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a44      	ldr	r2, [pc, #272]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088cc:	f7f9 fd7c 	bl	80023c8 <HAL_GetTick>
 80088d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088d2:	e009      	b.n	80088e8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088d4:	f7f9 fd78 	bl	80023c8 <HAL_GetTick>
 80088d8:	4602      	mov	r2, r0
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d902      	bls.n	80088e8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	73fb      	strb	r3, [r7, #15]
        break;
 80088e6:	e005      	b.n	80088f4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80088e8:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1ef      	bne.n	80088d4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d168      	bne.n	80089cc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d113      	bne.n	8008928 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008900:	4b35      	ldr	r3, [pc, #212]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	4b35      	ldr	r3, [pc, #212]	; (80089dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008906:	4013      	ands	r3, r2
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6892      	ldr	r2, [r2, #8]
 800890c:	0211      	lsls	r1, r2, #8
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	68d2      	ldr	r2, [r2, #12]
 8008912:	06d2      	lsls	r2, r2, #27
 8008914:	4311      	orrs	r1, r2
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	6852      	ldr	r2, [r2, #4]
 800891a:	3a01      	subs	r2, #1
 800891c:	0112      	lsls	r2, r2, #4
 800891e:	430a      	orrs	r2, r1
 8008920:	492d      	ldr	r1, [pc, #180]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008922:	4313      	orrs	r3, r2
 8008924:	610b      	str	r3, [r1, #16]
 8008926:	e02d      	b.n	8008984 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d115      	bne.n	800895a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800892e:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	4b2b      	ldr	r3, [pc, #172]	; (80089e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008934:	4013      	ands	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6892      	ldr	r2, [r2, #8]
 800893a:	0211      	lsls	r1, r2, #8
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6912      	ldr	r2, [r2, #16]
 8008940:	0852      	lsrs	r2, r2, #1
 8008942:	3a01      	subs	r2, #1
 8008944:	0552      	lsls	r2, r2, #21
 8008946:	4311      	orrs	r1, r2
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6852      	ldr	r2, [r2, #4]
 800894c:	3a01      	subs	r2, #1
 800894e:	0112      	lsls	r2, r2, #4
 8008950:	430a      	orrs	r2, r1
 8008952:	4921      	ldr	r1, [pc, #132]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008954:	4313      	orrs	r3, r2
 8008956:	610b      	str	r3, [r1, #16]
 8008958:	e014      	b.n	8008984 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800895a:	4b1f      	ldr	r3, [pc, #124]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800895c:	691a      	ldr	r2, [r3, #16]
 800895e:	4b21      	ldr	r3, [pc, #132]	; (80089e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6892      	ldr	r2, [r2, #8]
 8008966:	0211      	lsls	r1, r2, #8
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6952      	ldr	r2, [r2, #20]
 800896c:	0852      	lsrs	r2, r2, #1
 800896e:	3a01      	subs	r2, #1
 8008970:	0652      	lsls	r2, r2, #25
 8008972:	4311      	orrs	r1, r2
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6852      	ldr	r2, [r2, #4]
 8008978:	3a01      	subs	r2, #1
 800897a:	0112      	lsls	r2, r2, #4
 800897c:	430a      	orrs	r2, r1
 800897e:	4916      	ldr	r1, [pc, #88]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008980:	4313      	orrs	r3, r2
 8008982:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008984:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a13      	ldr	r2, [pc, #76]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800898a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800898e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008990:	f7f9 fd1a 	bl	80023c8 <HAL_GetTick>
 8008994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008996:	e009      	b.n	80089ac <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008998:	f7f9 fd16 	bl	80023c8 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d902      	bls.n	80089ac <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	73fb      	strb	r3, [r7, #15]
          break;
 80089aa:	e005      	b.n	80089b8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0ef      	beq.n	8008998 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	4904      	ldr	r1, [pc, #16]	; (80089d8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	40021000 	.word	0x40021000
 80089dc:	07ff800f 	.word	0x07ff800f
 80089e0:	ff9f800f 	.word	0xff9f800f
 80089e4:	f9ff800f 	.word	0xf9ff800f

080089e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089f6:	4b72      	ldr	r3, [pc, #456]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f003 0303 	and.w	r3, r3, #3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00e      	beq.n	8008a20 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008a02:	4b6f      	ldr	r3, [pc, #444]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0203 	and.w	r2, r3, #3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d103      	bne.n	8008a1a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
       ||
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d142      	bne.n	8008aa0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	73fb      	strb	r3, [r7, #15]
 8008a1e:	e03f      	b.n	8008aa0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d018      	beq.n	8008a5a <RCCEx_PLLSAI2_Config+0x72>
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d825      	bhi.n	8008a78 <RCCEx_PLLSAI2_Config+0x90>
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d002      	beq.n	8008a36 <RCCEx_PLLSAI2_Config+0x4e>
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d009      	beq.n	8008a48 <RCCEx_PLLSAI2_Config+0x60>
 8008a34:	e020      	b.n	8008a78 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a36:	4b62      	ldr	r3, [pc, #392]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11d      	bne.n	8008a7e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a46:	e01a      	b.n	8008a7e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a48:	4b5d      	ldr	r3, [pc, #372]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d116      	bne.n	8008a82 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a58:	e013      	b.n	8008a82 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a5a:	4b59      	ldr	r3, [pc, #356]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10f      	bne.n	8008a86 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a66:	4b56      	ldr	r3, [pc, #344]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a76:	e006      	b.n	8008a86 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7c:	e004      	b.n	8008a88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a7e:	bf00      	nop
 8008a80:	e002      	b.n	8008a88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a82:	bf00      	nop
 8008a84:	e000      	b.n	8008a88 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d108      	bne.n	8008aa0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8008a8e:	4b4c      	ldr	r3, [pc, #304]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f023 0203 	bic.w	r2, r3, #3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4949      	ldr	r1, [pc, #292]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f040 8086 	bne.w	8008bb4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008aa8:	4b45      	ldr	r3, [pc, #276]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a44      	ldr	r2, [pc, #272]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab4:	f7f9 fc88 	bl	80023c8 <HAL_GetTick>
 8008ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008aba:	e009      	b.n	8008ad0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008abc:	f7f9 fc84 	bl	80023c8 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d902      	bls.n	8008ad0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	73fb      	strb	r3, [r7, #15]
        break;
 8008ace:	e005      	b.n	8008adc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008ad0:	4b3b      	ldr	r3, [pc, #236]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1ef      	bne.n	8008abc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d168      	bne.n	8008bb4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d113      	bne.n	8008b10 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008ae8:	4b35      	ldr	r3, [pc, #212]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008aea:	695a      	ldr	r2, [r3, #20]
 8008aec:	4b35      	ldr	r3, [pc, #212]	; (8008bc4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6892      	ldr	r2, [r2, #8]
 8008af4:	0211      	lsls	r1, r2, #8
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68d2      	ldr	r2, [r2, #12]
 8008afa:	06d2      	lsls	r2, r2, #27
 8008afc:	4311      	orrs	r1, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6852      	ldr	r2, [r2, #4]
 8008b02:	3a01      	subs	r2, #1
 8008b04:	0112      	lsls	r2, r2, #4
 8008b06:	430a      	orrs	r2, r1
 8008b08:	492d      	ldr	r1, [pc, #180]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	614b      	str	r3, [r1, #20]
 8008b0e:	e02d      	b.n	8008b6c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d115      	bne.n	8008b42 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008b16:	4b2a      	ldr	r3, [pc, #168]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b18:	695a      	ldr	r2, [r3, #20]
 8008b1a:	4b2b      	ldr	r3, [pc, #172]	; (8008bc8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6892      	ldr	r2, [r2, #8]
 8008b22:	0211      	lsls	r1, r2, #8
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6912      	ldr	r2, [r2, #16]
 8008b28:	0852      	lsrs	r2, r2, #1
 8008b2a:	3a01      	subs	r2, #1
 8008b2c:	0552      	lsls	r2, r2, #21
 8008b2e:	4311      	orrs	r1, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6852      	ldr	r2, [r2, #4]
 8008b34:	3a01      	subs	r2, #1
 8008b36:	0112      	lsls	r2, r2, #4
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	4921      	ldr	r1, [pc, #132]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	614b      	str	r3, [r1, #20]
 8008b40:	e014      	b.n	8008b6c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008b42:	4b1f      	ldr	r3, [pc, #124]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b44:	695a      	ldr	r2, [r3, #20]
 8008b46:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <RCCEx_PLLSAI2_Config+0x1e4>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	6892      	ldr	r2, [r2, #8]
 8008b4e:	0211      	lsls	r1, r2, #8
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	6952      	ldr	r2, [r2, #20]
 8008b54:	0852      	lsrs	r2, r2, #1
 8008b56:	3a01      	subs	r2, #1
 8008b58:	0652      	lsls	r2, r2, #25
 8008b5a:	4311      	orrs	r1, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	6852      	ldr	r2, [r2, #4]
 8008b60:	3a01      	subs	r2, #1
 8008b62:	0112      	lsls	r2, r2, #4
 8008b64:	430a      	orrs	r2, r1
 8008b66:	4916      	ldr	r1, [pc, #88]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008b6c:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a13      	ldr	r2, [pc, #76]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b78:	f7f9 fc26 	bl	80023c8 <HAL_GetTick>
 8008b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b7e:	e009      	b.n	8008b94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008b80:	f7f9 fc22 	bl	80023c8 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d902      	bls.n	8008b94 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
          break;
 8008b92:	e005      	b.n	8008ba0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008b94:	4b0a      	ldr	r3, [pc, #40]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0ef      	beq.n	8008b80 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	07ff800f 	.word	0x07ff800f
 8008bc8:	ff9f800f 	.word	0xff9f800f
 8008bcc:	f9ff800f 	.word	0xf9ff800f

08008bd0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b089      	sub	sp, #36	; 0x24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bec:	d10b      	bne.n	8008c06 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008bee:	4b7e      	ldr	r3, [pc, #504]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bf4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008bf8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b60      	cmp	r3, #96	; 0x60
 8008bfe:	d112      	bne.n	8008c26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008c00:	4b7a      	ldr	r3, [pc, #488]	; (8008dec <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008c02:	61fb      	str	r3, [r7, #28]
 8008c04:	e00f      	b.n	8008c26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	d10b      	bne.n	8008c26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008c0e:	4b76      	ldr	r3, [pc, #472]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c18:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c20:	d101      	bne.n	8008c26 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008c22:	4b72      	ldr	r3, [pc, #456]	; (8008dec <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8008c24:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f040 80d6 	bne.w	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b40      	cmp	r3, #64	; 0x40
 8008c36:	d003      	beq.n	8008c40 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c3e:	d13b      	bne.n	8008cb8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008c40:	4b69      	ldr	r3, [pc, #420]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c4c:	f040 80c4 	bne.w	8008dd8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008c50:	4b65      	ldr	r3, [pc, #404]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 80bd 	beq.w	8008dd8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c5e:	4b62      	ldr	r3, [pc, #392]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	091b      	lsrs	r3, r3, #4
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	3301      	adds	r3, #1
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c70:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008c72:	4b5d      	ldr	r3, [pc, #372]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	0a1b      	lsrs	r3, r3, #8
 8008c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c7c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008c7e:	4b5a      	ldr	r3, [pc, #360]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	0edb      	lsrs	r3, r3, #27
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008c90:	4b55      	ldr	r3, [pc, #340]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8008c9c:	2311      	movs	r3, #17
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e001      	b.n	8008ca6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8008ca2:	2307      	movs	r3, #7
 8008ca4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	fb02 f203 	mul.w	r2, r2, r3
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008cb6:	e08f      	b.n	8008dd8 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d13a      	bne.n	8008d34 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008cbe:	4b4a      	ldr	r3, [pc, #296]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cca:	f040 8086 	bne.w	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008cce:	4b46      	ldr	r3, [pc, #280]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d07f      	beq.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8008cda:	4b43      	ldr	r3, [pc, #268]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	091b      	lsrs	r3, r3, #4
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cec:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008cee:	4b3e      	ldr	r3, [pc, #248]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008cfa:	4b3b      	ldr	r3, [pc, #236]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	0edb      	lsrs	r3, r3, #27
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008d18:	2311      	movs	r3, #17
 8008d1a:	617b      	str	r3, [r7, #20]
 8008d1c:	e001      	b.n	8008d22 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008d1e:	2307      	movs	r3, #7
 8008d20:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	fb02 f203 	mul.w	r2, r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e052      	b.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	2b80      	cmp	r3, #128	; 0x80
 8008d38:	d003      	beq.n	8008d42 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d40:	d109      	bne.n	8008d56 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d42:	4b29      	ldr	r3, [pc, #164]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d4e:	d144      	bne.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008d50:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8008d52:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d54:	e041      	b.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d003      	beq.n	8008d64 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d13a      	bne.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008d64:	4b20      	ldr	r3, [pc, #128]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d70:	d133      	bne.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8008d72:	4b1d      	ldr	r3, [pc, #116]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d02d      	beq.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	091b      	lsrs	r3, r3, #4
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	3301      	adds	r3, #1
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d90:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8008d9e:	4b12      	ldr	r3, [pc, #72]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	0edb      	lsrs	r3, r3, #27
 8008da4:	f003 031f 	and.w	r3, r3, #31
 8008da8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008db0:	4b0d      	ldr	r3, [pc, #52]	; (8008de8 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8008dbc:	2311      	movs	r3, #17
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	e001      	b.n	8008dc6 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8008dc2:	2307      	movs	r3, #7
 8008dc4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	fb02 f203 	mul.w	r2, r2, r3
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e000      	b.n	8008dda <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008dd8:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008dda:	69fb      	ldr	r3, [r7, #28]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3724      	adds	r7, #36	; 0x24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	40021000 	.word	0x40021000
 8008dec:	001fff68 	.word	0x001fff68
 8008df0:	00f42400 	.word	0x00f42400

08008df4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d06c      	beq.n	8008ee0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7f8 faf6 	bl	800140c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	22ca      	movs	r2, #202	; 0xca
 8008e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2253      	movs	r2, #83	; 0x53
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f9a0 	bl	800917e <RTC_EnterInitMode>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d14b      	bne.n	8008ee0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e5a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6899      	ldr	r1, [r3, #8]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	68d2      	ldr	r2, [r2, #12]
 8008e82:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6919      	ldr	r1, [r3, #16]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	041a      	lsls	r2, r3, #16
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f9a3 	bl	80091e4 <RTC_ExitInitMode>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d11b      	bne.n	8008ee0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0203 	bic.w	r2, r2, #3
 8008eb6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69da      	ldr	r2, [r3, #28]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	22ff      	movs	r2, #255	; 0xff
 8008ed6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008eea:	b590      	push	{r4, r7, lr}
 8008eec:	b087      	sub	sp, #28
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_RTC_SetTime+0x1a>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e08b      	b.n	800901c <HAL_RTC_SetTime+0x132>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	22ca      	movs	r2, #202	; 0xca
 8008f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2253      	movs	r2, #83	; 0x53
 8008f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f92a 	bl	800917e <RTC_EnterInitMode>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008f2e:	7cfb      	ldrb	r3, [r7, #19]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d163      	bne.n	8008ffc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d126      	bne.n	8008f88 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f984 	bl	8009260 <RTC_ByteToBcd2>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	785b      	ldrb	r3, [r3, #1]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f97d 	bl	8009260 <RTC_ByteToBcd2>
 8008f66:	4603      	mov	r3, r0
 8008f68:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f6a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	789b      	ldrb	r3, [r3, #2]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 f975 	bl	8009260 <RTC_ByteToBcd2>
 8008f76:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f78:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	78db      	ldrb	r3, [r3, #3]
 8008f80:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e018      	b.n	8008fba <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008fa8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fae:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	78db      	ldrb	r3, [r3, #3]
 8008fb4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008fc4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008fc8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6899      	ldr	r1, [r3, #8]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f8f6 	bl	80091e4 <RTC_ExitInitMode>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	22ff      	movs	r2, #255	; 0xff
 8009002:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009004:	7cfb      	ldrb	r3, [r7, #19]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d103      	bne.n	8009012 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800901a:	7cfb      	ldrb	r3, [r7, #19]
}
 800901c:	4618      	mov	r0, r3
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	bd90      	pop	{r4, r7, pc}

08009024 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_RTC_SetDate+0x1a>
 800903a:	2302      	movs	r3, #2
 800903c:	e075      	b.n	800912a <HAL_RTC_SetDate+0x106>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2202      	movs	r2, #2
 800904a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10e      	bne.n	8009072 <HAL_RTC_SetDate+0x4e>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	785b      	ldrb	r3, [r3, #1]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b00      	cmp	r3, #0
 800905e:	d008      	beq.n	8009072 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	f023 0310 	bic.w	r3, r3, #16
 8009068:	b2db      	uxtb	r3, r3
 800906a:	330a      	adds	r3, #10
 800906c:	b2da      	uxtb	r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11c      	bne.n	80090b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	78db      	ldrb	r3, [r3, #3]
 800907c:	4618      	mov	r0, r3
 800907e:	f000 f8ef 	bl	8009260 <RTC_ByteToBcd2>
 8009082:	4603      	mov	r3, r0
 8009084:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	4618      	mov	r0, r3
 800908c:	f000 f8e8 	bl	8009260 <RTC_ByteToBcd2>
 8009090:	4603      	mov	r3, r0
 8009092:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009094:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	789b      	ldrb	r3, [r3, #2]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f8e0 	bl	8009260 <RTC_ByteToBcd2>
 80090a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80090a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	e00e      	b.n	80090d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	78db      	ldrb	r3, [r3, #3]
 80090b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80090be:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80090c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	22ca      	movs	r2, #202	; 0xca
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2253      	movs	r2, #83	; 0x53
 80090de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f84c 	bl	800917e <RTC_EnterInitMode>
 80090e6:	4603      	mov	r3, r0
 80090e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80090ea:	7cfb      	ldrb	r3, [r7, #19]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10c      	bne.n	800910a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80090fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090fe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 f86f 	bl	80091e4 <RTC_ExitInitMode>
 8009106:	4603      	mov	r3, r0
 8009108:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	22ff      	movs	r2, #255	; 0xff
 8009110:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009112:	7cfb      	ldrb	r3, [r7, #19]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d103      	bne.n	8009120 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009128:	7cfb      	ldrb	r3, [r7, #19]
}
 800912a:	4618      	mov	r0, r3
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	bd90      	pop	{r4, r7, pc}

08009132 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009148:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800914a:	f7f9 f93d 	bl	80023c8 <HAL_GetTick>
 800914e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009150:	e009      	b.n	8009166 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009152:	f7f9 f939 	bl	80023c8 <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009160:	d901      	bls.n	8009166 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e007      	b.n	8009176 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0320 	and.w	r3, r3, #32
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0ee      	beq.n	8009152 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009194:	2b00      	cmp	r3, #0
 8009196:	d120      	bne.n	80091da <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80091a2:	f7f9 f911 	bl	80023c8 <HAL_GetTick>
 80091a6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80091a8:	e00d      	b.n	80091c6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80091aa:	f7f9 f90d 	bl	80023c8 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091b8:	d905      	bls.n	80091c6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2203      	movs	r2, #3
 80091c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <RTC_EnterInitMode+0x5c>
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d1e7      	bne.n	80091aa <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80091f0:	4b1a      	ldr	r3, [pc, #104]	; (800925c <RTC_ExitInitMode+0x78>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	4a19      	ldr	r2, [pc, #100]	; (800925c <RTC_ExitInitMode+0x78>)
 80091f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091fa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80091fc:	4b17      	ldr	r3, [pc, #92]	; (800925c <RTC_ExitInitMode+0x78>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 0320 	and.w	r3, r3, #32
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10c      	bne.n	8009222 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ff92 	bl	8009132 <HAL_RTC_WaitForSynchro>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01e      	beq.n	8009252 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2203      	movs	r2, #3
 8009218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	73fb      	strb	r3, [r7, #15]
 8009220:	e017      	b.n	8009252 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009222:	4b0e      	ldr	r3, [pc, #56]	; (800925c <RTC_ExitInitMode+0x78>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	4a0d      	ldr	r2, [pc, #52]	; (800925c <RTC_ExitInitMode+0x78>)
 8009228:	f023 0320 	bic.w	r3, r3, #32
 800922c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff ff7f 	bl	8009132 <HAL_RTC_WaitForSynchro>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2203      	movs	r2, #3
 800923e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <RTC_ExitInitMode+0x78>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	4a04      	ldr	r2, [pc, #16]	; (800925c <RTC_ExitInitMode+0x78>)
 800924c:	f043 0320 	orr.w	r3, r3, #32
 8009250:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	40002800 	.word	0x40002800

08009260 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	4603      	mov	r3, r0
 8009268:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009272:	e005      	b.n	8009280 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	3b0a      	subs	r3, #10
 800927e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	2b09      	cmp	r3, #9
 8009284:	d8f6      	bhi.n	8009274 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	b2da      	uxtb	r2, r3
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	4313      	orrs	r3, r2
 8009292:	b2db      	uxtb	r3, r3
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
 80092ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d904      	bls.n	80092be <HAL_SAI_InitProtocol+0x1e>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	3b03      	subs	r3, #3
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d812      	bhi.n	80092e2 <HAL_SAI_InitProtocol+0x42>
 80092bc:	e008      	b.n	80092d0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f9fb 	bl	80096c0 <SAI_InitI2S>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]
      break;
 80092ce:	e00b      	b.n	80092e8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 faa4 	bl	8009824 <SAI_InitPCM>
 80092dc:	4603      	mov	r3, r0
 80092de:	75fb      	strb	r3, [r7, #23]
      break;
 80092e0:	e002      	b.n	80092e8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
      break;
 80092e6:	bf00      	nop
  }

  if (status == HAL_OK)
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d104      	bne.n	80092f8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f000 f808 	bl	8009304 <HAL_SAI_Init>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	; 0x28
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e1c7      	b.n	80096a6 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10e      	bne.n	800933e <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a81      	ldr	r2, [pc, #516]	; (800952c <HAL_SAI_Init+0x228>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d107      	bne.n	800933a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800932e:	2b01      	cmp	r3, #1
 8009330:	d103      	bne.n	800933a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e1b3      	b.n	80096a6 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7f8 f8ec 	bl	8001530 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fae5 	bl	8009928 <SAI_Disable>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e19e      	b.n	80096a6 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b02      	cmp	r3, #2
 8009376:	d00c      	beq.n	8009392 <HAL_SAI_Init+0x8e>
 8009378:	2b02      	cmp	r3, #2
 800937a:	d80d      	bhi.n	8009398 <HAL_SAI_Init+0x94>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_SAI_Init+0x82>
 8009380:	2b01      	cmp	r3, #1
 8009382:	d003      	beq.n	800938c <HAL_SAI_Init+0x88>
 8009384:	e008      	b.n	8009398 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800938a:	e008      	b.n	800939e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800938c:	2310      	movs	r3, #16
 800938e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009390:	e005      	b.n	800939e <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009392:	2320      	movs	r3, #32
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8009396:	e002      	b.n	800939e <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800939c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d81d      	bhi.n	80093e2 <HAL_SAI_Init+0xde>
 80093a6:	a201      	add	r2, pc, #4	; (adr r2, 80093ac <HAL_SAI_Init+0xa8>)
 80093a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ac:	080093bd 	.word	0x080093bd
 80093b0:	080093c3 	.word	0x080093c3
 80093b4:	080093cb 	.word	0x080093cb
 80093b8:	080093d3 	.word	0x080093d3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80093bc:	2300      	movs	r3, #0
 80093be:	61fb      	str	r3, [r7, #28]
      break;
 80093c0:	e012      	b.n	80093e8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80093c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c6:	61fb      	str	r3, [r7, #28]
      break;
 80093c8:	e00e      	b.n	80093e8 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80093ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093ce:	61fb      	str	r3, [r7, #28]
      break;
 80093d0:	e00a      	b.n	80093e8 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80093d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	f043 0301 	orr.w	r3, r3, #1
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80093e0:	e002      	b.n	80093e8 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61fb      	str	r3, [r7, #28]
      break;
 80093e6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a4f      	ldr	r2, [pc, #316]	; (800952c <HAL_SAI_Init+0x228>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d004      	beq.n	80093fc <HAL_SAI_Init+0xf8>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a4e      	ldr	r2, [pc, #312]	; (8009530 <HAL_SAI_Init+0x22c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d103      	bne.n	8009404 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 80093fc:	4a4d      	ldr	r2, [pc, #308]	; (8009534 <HAL_SAI_Init+0x230>)
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	6013      	str	r3, [r2, #0]
 8009402:	e002      	b.n	800940a <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009404:	4a4c      	ldr	r2, [pc, #304]	; (8009538 <HAL_SAI_Init+0x234>)
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d073      	beq.n	80094fa <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a45      	ldr	r2, [pc, #276]	; (800952c <HAL_SAI_Init+0x228>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d004      	beq.n	8009426 <HAL_SAI_Init+0x122>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a43      	ldr	r2, [pc, #268]	; (8009530 <HAL_SAI_Init+0x22c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d105      	bne.n	8009432 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009426:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800942a:	f7fe fa51 	bl	80078d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800942e:	61b8      	str	r0, [r7, #24]
 8009430:	e004      	b.n	800943c <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009432:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009436:	f7fe fa4b 	bl	80078d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800943a:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009444:	d120      	bne.n	8009488 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	2b04      	cmp	r3, #4
 800944c:	d102      	bne.n	8009454 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800944e:	2340      	movs	r3, #64	; 0x40
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	e00a      	b.n	800946a <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	2b08      	cmp	r3, #8
 800945a:	d103      	bne.n	8009464 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800945c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	e002      	b.n	800946a <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	005b      	lsls	r3, r3, #1
 8009474:	4619      	mov	r1, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	fb02 f303 	mul.w	r3, r2, r3
 8009480:	fbb1 f3f3 	udiv	r3, r1, r3
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e017      	b.n	80094b8 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009490:	d101      	bne.n	8009496 <HAL_SAI_Init+0x192>
 8009492:	2302      	movs	r3, #2
 8009494:	e000      	b.n	8009498 <HAL_SAI_Init+0x194>
 8009496:	2301      	movs	r3, #1
 8009498:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	4619      	mov	r1, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80094b6:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	4a20      	ldr	r2, [pc, #128]	; (800953c <HAL_SAI_Init+0x238>)
 80094bc:	fba2 2303 	umull	r2, r3, r2, r3
 80094c0:	08da      	lsrs	r2, r3, #3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80094c6:	6979      	ldr	r1, [r7, #20]
 80094c8:	4b1c      	ldr	r3, [pc, #112]	; (800953c <HAL_SAI_Init+0x238>)
 80094ca:	fba3 2301 	umull	r2, r3, r3, r1
 80094ce:	08da      	lsrs	r2, r3, #3
 80094d0:	4613      	mov	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	1aca      	subs	r2, r1, r3
 80094da:	2a08      	cmp	r2, #8
 80094dc:	d904      	bls.n	80094e8 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d104      	bne.n	80094fa <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	085a      	lsrs	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_SAI_Init+0x206>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	2b02      	cmp	r3, #2
 8009508:	d109      	bne.n	800951e <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <HAL_SAI_Init+0x212>
 8009512:	2300      	movs	r3, #0
 8009514:	e001      	b.n	800951a <HAL_SAI_Init+0x216>
 8009516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800951a:	623b      	str	r3, [r7, #32]
 800951c:	e012      	b.n	8009544 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009522:	2b01      	cmp	r3, #1
 8009524:	d10c      	bne.n	8009540 <HAL_SAI_Init+0x23c>
 8009526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800952a:	e00a      	b.n	8009542 <HAL_SAI_Init+0x23e>
 800952c:	40015404 	.word	0x40015404
 8009530:	40015424 	.word	0x40015424
 8009534:	40015400 	.word	0x40015400
 8009538:	40015800 	.word	0x40015800
 800953c:	cccccccd 	.word	0xcccccccd
 8009540:	2300      	movs	r3, #0
 8009542:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	6819      	ldr	r1, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	4b58      	ldr	r3, [pc, #352]	; (80096b0 <HAL_SAI_Init+0x3ac>)
 8009550:	400b      	ands	r3, r1
 8009552:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6819      	ldr	r1, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009568:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800956e:	431a      	orrs	r2, r3
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800957c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009588:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	051b      	lsls	r3, r3, #20
 8009590:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009596:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80095ae:	f023 030f 	bic.w	r3, r3, #15
 80095b2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6859      	ldr	r1, [r3, #4]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699a      	ldr	r2, [r3, #24]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	431a      	orrs	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	430a      	orrs	r2, r1
 80095d0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6899      	ldr	r1, [r3, #8]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	4b35      	ldr	r3, [pc, #212]	; (80096b4 <HAL_SAI_Init+0x3b0>)
 80095de:	400b      	ands	r3, r1
 80095e0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6899      	ldr	r1, [r3, #8]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ec:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80095f2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 80095f8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 80095fe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	3b01      	subs	r3, #1
 8009606:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009608:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68d9      	ldr	r1, [r3, #12]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009620:	400b      	ands	r3, r1
 8009622:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68d9      	ldr	r1, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009632:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009638:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800963a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009640:	3b01      	subs	r3, #1
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a19      	ldr	r2, [pc, #100]	; (80096b8 <HAL_SAI_Init+0x3b4>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d119      	bne.n	800968c <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8009658:	4b18      	ldr	r3, [pc, #96]	; (80096bc <HAL_SAI_Init+0x3b8>)
 800965a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965c:	4a17      	ldr	r2, [pc, #92]	; (80096bc <HAL_SAI_Init+0x3b8>)
 800965e:	f023 0301 	bic.w	r3, r3, #1
 8009662:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800966a:	2b01      	cmp	r3, #1
 800966c:	d10e      	bne.n	800968c <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	3b01      	subs	r3, #1
 8009678:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800967a:	4910      	ldr	r1, [pc, #64]	; (80096bc <HAL_SAI_Init+0x3b8>)
 800967c:	4313      	orrs	r3, r2
 800967e:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8009680:	4b0e      	ldr	r3, [pc, #56]	; (80096bc <HAL_SAI_Init+0x3b8>)
 8009682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009684:	4a0d      	ldr	r2, [pc, #52]	; (80096bc <HAL_SAI_Init+0x3b8>)
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3728      	adds	r7, #40	; 0x28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	f805c010 	.word	0xf805c010
 80096b4:	fff88000 	.word	0xfff88000
 80096b8:	40015404 	.word	0x40015404
 80096bc:	40015400 	.word	0x40015400

080096c0 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ce:	2300      	movs	r3, #0
 80096d0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <SAI_InitI2S+0x2e>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d103      	bne.n	80096f6 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80096f4:	e002      	b.n	80096fc <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2201      	movs	r2, #1
 80096fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009702:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800970a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e077      	b.n	8009816 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d107      	bne.n	800973c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009738:	661a      	str	r2, [r3, #96]	; 0x60
 800973a:	e006      	b.n	800974a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009742:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	661a      	str	r2, [r3, #96]	; 0x60
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b03      	cmp	r3, #3
 800974e:	d84f      	bhi.n	80097f0 <SAI_InitI2S+0x130>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <SAI_InitI2S+0x98>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	08009769 	.word	0x08009769
 800975c:	0800978b 	.word	0x0800978b
 8009760:	080097ad 	.word	0x080097ad
 8009764:	080097cf 	.word	0x080097cf

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2280      	movs	r2, #128	; 0x80
 800976c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	085b      	lsrs	r3, r3, #1
 800977c:	011a      	lsls	r2, r3, #4
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2240      	movs	r2, #64	; 0x40
 8009786:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8009788:	e035      	b.n	80097f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2280      	movs	r2, #128	; 0x80
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	085b      	lsrs	r3, r3, #1
 8009794:	019a      	lsls	r2, r3, #6
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	085b      	lsrs	r3, r3, #1
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2280      	movs	r2, #128	; 0x80
 80097a8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80097aa:	e024      	b.n	80097f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	22c0      	movs	r2, #192	; 0xc0
 80097b0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	085b      	lsrs	r3, r3, #1
 80097b6:	019a      	lsls	r2, r3, #6
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2280      	movs	r2, #128	; 0x80
 80097ca:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80097cc:	e013      	b.n	80097f6 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	22e0      	movs	r2, #224	; 0xe0
 80097d2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	019a      	lsls	r2, r3, #6
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	085b      	lsrs	r3, r3, #1
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2280      	movs	r2, #128	; 0x80
 80097ec:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80097ee:	e002      	b.n	80097f6 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	75fb      	strb	r3, [r7, #23]
      break;
 80097f4:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d10b      	bne.n	8009814 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d102      	bne.n	8009808 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2210      	movs	r2, #16
 8009806:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b02      	cmp	r3, #2
 800980c:	d102      	bne.n	8009814 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2208      	movs	r2, #8
 8009812:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop

08009824 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <SAI_InitPCM+0x2e>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	2b02      	cmp	r3, #2
 8009850:	d103      	bne.n	800985a <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	64da      	str	r2, [r3, #76]	; 0x4c
 8009858:	e002      	b.n	8009860 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800986c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009874:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009888:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b04      	cmp	r3, #4
 800988e:	d103      	bne.n	8009898 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2201      	movs	r2, #1
 8009894:	655a      	str	r2, [r3, #84]	; 0x54
 8009896:	e002      	b.n	800989e <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	220d      	movs	r2, #13
 800989c:	655a      	str	r2, [r3, #84]	; 0x54
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d837      	bhi.n	8009914 <SAI_InitPCM+0xf0>
 80098a4:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <SAI_InitPCM+0x88>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080098d3 	.word	0x080098d3
 80098b4:	080098e9 	.word	0x080098e9
 80098b8:	080098ff 	.word	0x080098ff
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2280      	movs	r2, #128	; 0x80
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	011a      	lsls	r2, r3, #4
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2240      	movs	r2, #64	; 0x40
 80098ce:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80098d0:	e023      	b.n	800991a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2280      	movs	r2, #128	; 0x80
 80098d6:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2280      	movs	r2, #128	; 0x80
 80098e4:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80098e6:	e018      	b.n	800991a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	22c0      	movs	r2, #192	; 0xc0
 80098ec:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2280      	movs	r2, #128	; 0x80
 80098fa:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80098fc:	e00d      	b.n	800991a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	22e0      	movs	r2, #224	; 0xe0
 8009902:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2280      	movs	r2, #128	; 0x80
 8009910:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8009912:	e002      	b.n	800991a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	75fb      	strb	r3, [r7, #23]
      break;
 8009918:	bf00      	nop
  }

  return status;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
}
 800991c:	4618      	mov	r0, r3
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009930:	4b18      	ldr	r3, [pc, #96]	; (8009994 <SAI_Disable+0x6c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a18      	ldr	r2, [pc, #96]	; (8009998 <SAI_Disable+0x70>)
 8009936:	fba2 2303 	umull	r2, r3, r2, r3
 800993a:	0b1b      	lsrs	r3, r3, #12
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009952:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800996a:	2303      	movs	r3, #3
 800996c:	72fb      	strb	r3, [r7, #11]
      break;
 800996e:	e009      	b.n	8009984 <SAI_Disable+0x5c>
    }
    count--;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3b01      	subs	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e7      	bne.n	8009954 <SAI_Disable+0x2c>

  return status;
 8009984:	7afb      	ldrb	r3, [r7, #11]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000000 	.word	0x20000000
 8009998:	95cbec1b 	.word	0x95cbec1b

0800999c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	; 0x28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d101      	bne.n	80099ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e078      	b.n	8009aa0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7f7 fe4f 	bl	8001664 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2203      	movs	r2, #3
 80099ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f86a 	bl	8009aa8 <HAL_SD_InitCard>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e060      	b.n	8009aa0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80099de:	f107 0308 	add.w	r3, r7, #8
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fdc7 	bl	800a578 <HAL_SD_GetCardStatus>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e055      	b.n	8009aa0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80099f4:	7e3b      	ldrb	r3, [r7, #24]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80099fa:	7e7b      	ldrb	r3, [r7, #25]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d10a      	bne.n	8009a1e <HAL_SD_Init+0x82>
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <HAL_SD_Init+0x78>
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d004      	beq.n	8009a1e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a1c:	e00b      	b.n	8009a36 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d104      	bne.n	8009a30 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a2e:	e002      	b.n	8009a36 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fe7d 	bl	800a73c <HAL_SD_ConfigWideBusOperation>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e029      	b.n	8009aa0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009a4c:	f7f8 fcbc 	bl	80023c8 <HAL_GetTick>
 8009a50:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a52:	e014      	b.n	8009a7e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009a54:	f7f8 fcb8 	bl	80023c8 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a62:	d10c      	bne.n	8009a7e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e010      	b.n	8009aa0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 ff70 	bl	800a964 <HAL_SD_GetCardState>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d1e4      	bne.n	8009a54 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3728      	adds	r7, #40	; 0x28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009aa8:	b5b0      	push	{r4, r5, r7, lr}
 8009aaa:	b090      	sub	sp, #64	; 0x40
 8009aac:	af04      	add	r7, sp, #16
 8009aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009abc:	2300      	movs	r3, #0
 8009abe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8009ac0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009ac4:	f7fd ff04 	bl	80078d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ac8:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e08b      	b.n	8009bfc <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	0a1b      	lsrs	r3, r3, #8
 8009ae8:	4a46      	ldr	r2, [pc, #280]	; (8009c04 <HAL_SD_InitCard+0x15c>)
 8009aea:	fba2 2303 	umull	r2, r3, r2, r3
 8009aee:	091b      	lsrs	r3, r3, #4
 8009af0:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d107      	bne.n	8009b10 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0210 	orr.w	r2, r2, #16
 8009b0e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681d      	ldr	r5, [r3, #0]
 8009b14:	466c      	mov	r4, sp
 8009b16:	f107 0318 	add.w	r3, r7, #24
 8009b1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b22:	f107 030c 	add.w	r3, r7, #12
 8009b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b28:	4628      	mov	r0, r5
 8009b2a:	f003 f921 	bl	800cd70 <SDMMC_Init>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8009b34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e05d      	b.n	8009bfc <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f003 f95b 	bl	800ce00 <SDMMC_PowerState_ON>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8009b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e04f      	b.n	8009bfc <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b66:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009b68:	4a27      	ldr	r2, [pc, #156]	; (8009c08 <HAL_SD_InitCard+0x160>)
 8009b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b70:	3301      	adds	r3, #1
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f8 fc34 	bl	80023e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 ffd1 	bl	800ab20 <SD_PowerON>
 8009b7e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e02e      	b.n	8009bfc <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 ff00 	bl	800a9a4 <SD_InitCard>
 8009ba4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	e01b      	b.n	8009bfc <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f003 f9ad 	bl	800cf2c <SDMMC_CmdBlockLength>
 8009bd2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00f      	beq.n	8009bfa <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a0b      	ldr	r2, [pc, #44]	; (8009c0c <HAL_SD_InitCard+0x164>)
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3730      	adds	r7, #48	; 0x30
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bdb0      	pop	{r4, r5, r7, pc}
 8009c04:	014f8b59 	.word	0x014f8b59
 8009c08:	00012110 	.word	0x00012110
 8009c0c:	1fe00fff 	.word	0x1fe00fff

08009c10 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08c      	sub	sp, #48	; 0x30
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d107      	bne.n	8009c38 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e08d      	b.n	8009d54 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	f040 8086 	bne.w	8009d52 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	441a      	add	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d907      	bls.n	8009c6a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e074      	b.n	8009d54 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2203      	movs	r2, #3
 8009c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2200      	movs	r2, #0
 8009c78:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	025a      	lsls	r2, r3, #9
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d002      	beq.n	8009c96 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	025b      	lsls	r3, r3, #9
 8009c94:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c9a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	025b      	lsls	r3, r3, #9
 8009ca0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009ca2:	2390      	movs	r3, #144	; 0x90
 8009ca4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f107 0210 	add.w	r2, r7, #16
 8009cba:	4611      	mov	r1, r2
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f003 f909 	bl	800ced4 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cd0:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d90a      	bls.n	8009cfe <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2282      	movs	r2, #130	; 0x82
 8009cec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f003 f95f 	bl	800cfb8 <SDMMC_CmdReadMultiBlock>
 8009cfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009cfc:	e009      	b.n	8009d12 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2281      	movs	r2, #129	; 0x81
 8009d02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f003 f931 	bl	800cf72 <SDMMC_CmdReadSingleBlock>
 8009d10:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d012      	beq.n	8009d3e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a0f      	ldr	r2, [pc, #60]	; (8009d5c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009d1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	431a      	orrs	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e00a      	b.n	8009d54 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009d4c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e000      	b.n	8009d54 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009d52:	2302      	movs	r3, #2
  }
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3730      	adds	r7, #48	; 0x30
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	1fe00fff 	.word	0x1fe00fff

08009d60 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08c      	sub	sp, #48	; 0x30
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d107      	bne.n	8009d88 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e08d      	b.n	8009ea4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	f040 8086 	bne.w	8009ea2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	441a      	add	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d907      	bls.n	8009dba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e074      	b.n	8009ea4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2203      	movs	r2, #3
 8009dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	025a      	lsls	r2, r3, #9
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d002      	beq.n	8009de6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	025b      	lsls	r3, r3, #9
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dea:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	025b      	lsls	r3, r3, #9
 8009df0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009df2:	2390      	movs	r3, #144	; 0x90
 8009df4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f107 0210 	add.w	r2, r7, #16
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f003 f861 	bl	800ced4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e20:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d90a      	bls.n	8009e4e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	22a0      	movs	r2, #160	; 0xa0
 8009e3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e44:	4618      	mov	r0, r3
 8009e46:	f003 f8fd 	bl	800d044 <SDMMC_CmdWriteMultiBlock>
 8009e4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009e4c:	e009      	b.n	8009e62 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2290      	movs	r2, #144	; 0x90
 8009e52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f003 f8cf 	bl	800cffe <SDMMC_CmdWriteSingleBlock>
 8009e60:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d012      	beq.n	8009e8e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a0f      	ldr	r2, [pc, #60]	; (8009eac <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	431a      	orrs	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e00a      	b.n	8009ea4 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009e9c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e000      	b.n	8009ea4 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8009ea2:	2302      	movs	r3, #2
  }
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3730      	adds	r7, #48	; 0x30
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	1fe00fff 	.word	0x1fe00fff

08009eb0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d008      	beq.n	8009ede <HAL_SD_IRQHandler+0x2e>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f003 0308 	and.w	r3, r3, #8
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f98c 	bl	800b1f4 <SD_Read_IT>
 8009edc:	e199      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 80ae 	beq.w	800a04a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ef6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	6812      	ldr	r2, [r2, #0]
 8009f02:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009f06:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009f0a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f2a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f003 0308 	and.w	r3, r3, #8
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d038      	beq.n	8009fa8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f003 0302 	and.w	r3, r3, #2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d104      	bne.n	8009f4a <HAL_SD_IRQHandler+0x9a>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d011      	beq.n	8009f6e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f003 f89c 	bl	800d08c <SDMMC_CmdStopTransfer>
 8009f54:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d008      	beq.n	8009f6e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f957 	bl	800a21c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4aa0      	ldr	r2, [pc, #640]	; (800a1f4 <HAL_SD_IRQHandler+0x344>)
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d104      	bne.n	8009f98 <HAL_SD_IRQHandler+0xe8>
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f004 ff77 	bl	800ee8c <HAL_SD_RxCpltCallback>
 8009f9e:	e138      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f004 ff69 	bl	800ee78 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8009fa6:	e134      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 812f 	beq.w	800a212 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d104      	bne.n	8009fe0 <HAL_SD_IRQHandler+0x130>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d011      	beq.n	800a004 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f003 f851 	bl	800d08c <SDMMC_CmdStopTransfer>
 8009fea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d008      	beq.n	800a004 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f90c 	bl	800a21c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f003 0310 	and.w	r3, r3, #16
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <HAL_SD_IRQHandler+0x176>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f004 ff26 	bl	800ee78 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d105      	bne.n	800a042 <HAL_SD_IRQHandler+0x192>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f003 0302 	and.w	r3, r3, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 80e8 	beq.w	800a212 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f004 ff22 	bl	800ee8c <HAL_SD_RxCpltCallback>
}
 800a048:	e0e3      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d008      	beq.n	800a06a <HAL_SD_IRQHandler+0x1ba>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 0308 	and.w	r3, r3, #8
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 f917 	bl	800b296 <SD_Write_IT>
 800a068:	e0d3      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 809d 	beq.w	800a1b4 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08c:	f043 0202 	orr.w	r2, r3, #2
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09a:	f003 0308 	and.w	r3, r3, #8
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	f043 0208 	orr.w	r2, r3, #8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b4:	f003 0320 	and.w	r3, r3, #32
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d005      	beq.n	800a0c8 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	f043 0220 	orr.w	r2, r3, #32
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ce:	f003 0310 	and.w	r3, r3, #16
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	f043 0210 	orr.w	r2, r3, #16
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a43      	ldr	r2, [pc, #268]	; (800a1f4 <HAL_SD_IRQHandler+0x344>)
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a0f8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68da      	ldr	r2, [r3, #12]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a108:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a118:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68da      	ldr	r2, [r3, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a128:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f002 ffac 	bl	800d08c <SDMMC_CmdStopTransfer>
 800a134:	4602      	mov	r2, r0
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13a:	431a      	orrs	r2, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68da      	ldr	r2, [r3, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a14e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a158:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f003 0308 	and.w	r3, r3, #8
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00a      	beq.n	800a17a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f852 	bl	800a21c <HAL_SD_ErrorCallback>
}
 800a178:	e04b      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a180:	2b00      	cmp	r3, #0
 800a182:	d046      	beq.n	800a212 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d042      	beq.n	800a212 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a19a:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f835 	bl	800a21c <HAL_SD_ErrorCallback>
}
 800a1b2:	e02e      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d027      	beq.n	800a212 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10e      	bne.n	800a1f8 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d003      	beq.n	800a1ec <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 f8d4 	bl	800b392 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 800a1ea:	e012      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f001 f8bc 	bl	800b36a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800a1f2:	e00e      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
 800a1f4:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f003 0320 	and.w	r3, r3, #32
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f001 f8bb 	bl	800b37e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 800a208:	e003      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 f8a3 	bl	800b356 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800a210:	e7ff      	b.n	800a212 <HAL_SD_IRQHandler+0x362>
 800a212:	bf00      	nop
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop

0800a21c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a23e:	0f9b      	lsrs	r3, r3, #30
 800a240:	b2da      	uxtb	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a24a:	0e9b      	lsrs	r3, r3, #26
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	f003 030f 	and.w	r3, r3, #15
 800a252:	b2da      	uxtb	r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a25c:	0e1b      	lsrs	r3, r3, #24
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	b2da      	uxtb	r2, r3
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a27a:	0a1b      	lsrs	r3, r3, #8
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a286:	b2da      	uxtb	r2, r3
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a290:	0d1b      	lsrs	r3, r3, #20
 800a292:	b29a      	uxth	r2, r3
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a29c:	0c1b      	lsrs	r3, r3, #16
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	f003 030f 	and.w	r3, r3, #15
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2ae:	0bdb      	lsrs	r3, r3, #15
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2c0:	0b9b      	lsrs	r3, r3, #14
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2d2:	0b5b      	lsrs	r3, r3, #13
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 0301 	and.w	r3, r3, #1
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2e4:	0b1b      	lsrs	r3, r3, #12
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	b2da      	uxtb	r2, r3
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d163      	bne.n	800a3c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a304:	009a      	lsls	r2, r3, #2
 800a306:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a30a:	4013      	ands	r3, r2
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a310:	0f92      	lsrs	r2, r2, #30
 800a312:	431a      	orrs	r2, r3
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a31c:	0edb      	lsrs	r3, r3, #27
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	f003 0307 	and.w	r3, r3, #7
 800a324:	b2da      	uxtb	r2, r3
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a32e:	0e1b      	lsrs	r3, r3, #24
 800a330:	b2db      	uxtb	r3, r3
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	b2da      	uxtb	r2, r3
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a340:	0d5b      	lsrs	r3, r3, #21
 800a342:	b2db      	uxtb	r3, r3
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	b2da      	uxtb	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a352:	0c9b      	lsrs	r3, r3, #18
 800a354:	b2db      	uxtb	r3, r3
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a364:	0bdb      	lsrs	r3, r3, #15
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0307 	and.w	r3, r3, #7
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	7e1b      	ldrb	r3, [r3, #24]
 800a380:	b2db      	uxtb	r3, r3
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	3302      	adds	r3, #2
 800a388:	2201      	movs	r2, #1
 800a38a:	fa02 f303 	lsl.w	r3, r2, r3
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a392:	fb02 f203 	mul.w	r2, r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	7a1b      	ldrb	r3, [r3, #8]
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	f003 030f 	and.w	r3, r3, #15
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	409a      	lsls	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a3b4:	0a52      	lsrs	r2, r2, #9
 800a3b6:	fb02 f203 	mul.w	r2, r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3c4:	659a      	str	r2, [r3, #88]	; 0x58
 800a3c6:	e031      	b.n	800a42c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d11d      	bne.n	800a40c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3d4:	041b      	lsls	r3, r3, #16
 800a3d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3de:	0c1b      	lsrs	r3, r3, #16
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	029a      	lsls	r2, r3, #10
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a400:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	659a      	str	r2, [r3, #88]	; 0x58
 800a40a:	e00f      	b.n	800a42c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a58      	ldr	r2, [pc, #352]	; (800a574 <HAL_SD_GetCardCSD+0x344>)
 800a412:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e09d      	b.n	800a568 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a430:	0b9b      	lsrs	r3, r3, #14
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a442:	09db      	lsrs	r3, r3, #7
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a454:	b2db      	uxtb	r3, r3
 800a456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a464:	0fdb      	lsrs	r3, r3, #31
 800a466:	b2da      	uxtb	r2, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a470:	0f5b      	lsrs	r3, r3, #29
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a482:	0e9b      	lsrs	r3, r3, #26
 800a484:	b2db      	uxtb	r3, r3
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a494:	0d9b      	lsrs	r3, r3, #22
 800a496:	b2db      	uxtb	r3, r3
 800a498:	f003 030f 	and.w	r3, r3, #15
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a6:	0d5b      	lsrs	r3, r3, #21
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c2:	0c1b      	lsrs	r3, r3, #16
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	b2da      	uxtb	r2, r3
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4d6:	0bdb      	lsrs	r3, r3, #15
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ea:	0b9b      	lsrs	r3, r3, #14
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4fe:	0b5b      	lsrs	r3, r3, #13
 800a500:	b2db      	uxtb	r3, r3
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	b2da      	uxtb	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a512:	0b1b      	lsrs	r3, r3, #12
 800a514:	b2db      	uxtb	r3, r3
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a526:	0a9b      	lsrs	r3, r3, #10
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a53a:	0a1b      	lsrs	r3, r3, #8
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	b2da      	uxtb	r2, r3
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a54e:	085b      	lsrs	r3, r3, #1
 800a550:	b2db      	uxtb	r3, r3
 800a552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a556:	b2da      	uxtb	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	1fe00fff 	.word	0x1fe00fff

0800a578 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b094      	sub	sp, #80	; 0x50
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a588:	f107 0308 	add.w	r3, r7, #8
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fbd2 	bl	800ad38 <SD_SendSDStatus>
 800a594:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d011      	beq.n	800a5c0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a4f      	ldr	r2, [pc, #316]	; (800a6e0 <HAL_SD_GetCardStatus+0x168>)
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a5be:	e070      	b.n	800a6a2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	099b      	lsrs	r3, r3, #6
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 0303 	and.w	r3, r3, #3
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	095b      	lsrs	r3, r3, #5
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	0a1b      	lsrs	r3, r3, #8
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	0e1b      	lsrs	r3, r3, #24
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	061a      	lsls	r2, r3, #24
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	021b      	lsls	r3, r3, #8
 800a602:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a606:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	0a1b      	lsrs	r3, r3, #8
 800a60c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a610:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	0e1b      	lsrs	r3, r3, #24
 800a616:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	0a1b      	lsrs	r3, r3, #8
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	0d1b      	lsrs	r3, r3, #20
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 030f 	and.w	r3, r3, #15
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	0c1b      	lsrs	r3, r3, #16
 800a642:	b29b      	uxth	r3, r3
 800a644:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a648:	b29a      	uxth	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	4313      	orrs	r3, r2
 800a654:	b29a      	uxth	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	0a9b      	lsrs	r3, r3, #10
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a664:	b2da      	uxtb	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	0a1b      	lsrs	r3, r3, #8
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 0303 	and.w	r3, r3, #3
 800a674:	b2da      	uxtb	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	091b      	lsrs	r3, r3, #4
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	f003 030f 	and.w	r3, r3, #15
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 030f 	and.w	r3, r3, #15
 800a692:	b2da      	uxtb	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	0e1b      	lsrs	r3, r3, #24
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f002 fc3e 	bl	800cf2c <SDMMC_CmdBlockLength>
 800a6b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00d      	beq.n	800a6d4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a08      	ldr	r2, [pc, #32]	; (800a6e0 <HAL_SD_GetCardStatus+0x168>)
 800a6be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a6d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3750      	adds	r7, #80	; 0x50
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	1fe00fff 	.word	0x1fe00fff

0800a6e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a73c:	b5b0      	push	{r4, r5, r7, lr}
 800a73e:	b090      	sub	sp, #64	; 0x40
 800a740:	af04      	add	r7, sp, #16
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2203      	movs	r2, #3
 800a750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a758:	2b03      	cmp	r3, #3
 800a75a:	d02e      	beq.n	800a7ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a762:	d106      	bne.n	800a772 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a768:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
 800a770:	e029      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a778:	d10a      	bne.n	800a790 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fbd4 	bl	800af28 <SD_WideBus_Enable>
 800a780:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a788:	431a      	orrs	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	639a      	str	r2, [r3, #56]	; 0x38
 800a78e:	e01a      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fc11 	bl	800afbe <SD_WideBus_Disable>
 800a79c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	639a      	str	r2, [r3, #56]	; 0x38
 800a7aa:	e00c      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38
 800a7b8:	e005      	b.n	800a7c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d007      	beq.n	800a7de <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a60      	ldr	r2, [pc, #384]	; (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a7d4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a7dc:	e097      	b.n	800a90e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800a7de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a7e2:	f7fd f875 	bl	80078d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7e6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f000 8086 	beq.w	800a8fc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	4952      	ldr	r1, [pc, #328]	; (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a80e:	fba1 1303 	umull	r1, r3, r1, r3
 800a812:	0e1b      	lsrs	r3, r3, #24
 800a814:	429a      	cmp	r2, r3
 800a816:	d303      	bcc.n	800a820 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	e05a      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a828:	d103      	bne.n	800a832 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	695b      	ldr	r3, [r3, #20]
 800a82e:	61fb      	str	r3, [r7, #28]
 800a830:	e051      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a83a:	d126      	bne.n	800a88a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10e      	bne.n	800a862 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a846:	4a45      	ldr	r2, [pc, #276]	; (800a95c <HAL_SD_ConfigWideBusOperation+0x220>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d906      	bls.n	800a85a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84e:	4a42      	ldr	r2, [pc, #264]	; (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a850:	fba2 2303 	umull	r2, r3, r2, r3
 800a854:	0e5b      	lsrs	r3, r3, #25
 800a856:	61fb      	str	r3, [r7, #28]
 800a858:	e03d      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	61fb      	str	r3, [r7, #28]
 800a860:	e039      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a86e:	4a3b      	ldr	r2, [pc, #236]	; (800a95c <HAL_SD_ConfigWideBusOperation+0x220>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d906      	bls.n	800a882 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	4a38      	ldr	r2, [pc, #224]	; (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a878:	fba2 2303 	umull	r2, r3, r2, r3
 800a87c:	0e5b      	lsrs	r3, r3, #25
 800a87e:	61fb      	str	r3, [r7, #28]
 800a880:	e029      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e025      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10e      	bne.n	800a8b0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	4a32      	ldr	r2, [pc, #200]	; (800a960 <HAL_SD_ConfigWideBusOperation+0x224>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d906      	bls.n	800a8a8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	4a2e      	ldr	r2, [pc, #184]	; (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a89e:	fba2 2303 	umull	r2, r3, r2, r3
 800a8a2:	0e1b      	lsrs	r3, r3, #24
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e016      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e012      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8bc:	4a28      	ldr	r2, [pc, #160]	; (800a960 <HAL_SD_ConfigWideBusOperation+0x224>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d906      	bls.n	800a8d0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	4a24      	ldr	r2, [pc, #144]	; (800a958 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ca:	0e1b      	lsrs	r3, r3, #24
 800a8cc:	61fb      	str	r3, [r7, #28]
 800a8ce:	e002      	b.n	800a8d6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681d      	ldr	r5, [r3, #0]
 800a8e0:	466c      	mov	r4, sp
 800a8e2:	f107 0318 	add.w	r3, r7, #24
 800a8e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a8ee:	f107 030c 	add.w	r3, r7, #12
 800a8f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f002 fa3b 	bl	800cd70 <SDMMC_Init>
 800a8fa:	e008      	b.n	800a90e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a916:	4618      	mov	r0, r3
 800a918:	f002 fb08 	bl	800cf2c <SDMMC_CmdBlockLength>
 800a91c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	2b00      	cmp	r3, #0
 800a922:	d00c      	beq.n	800a93e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a0a      	ldr	r2, [pc, #40]	; (800a954 <HAL_SD_ConfigWideBusOperation+0x218>)
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	431a      	orrs	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3730      	adds	r7, #48	; 0x30
 800a94e:	46bd      	mov	sp, r7
 800a950:	bdb0      	pop	{r4, r5, r7, pc}
 800a952:	bf00      	nop
 800a954:	1fe00fff 	.word	0x1fe00fff
 800a958:	55e63b89 	.word	0x55e63b89
 800a95c:	02faf080 	.word	0x02faf080
 800a960:	017d7840 	.word	0x017d7840

0800a964 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a970:	f107 030c 	add.w	r3, r7, #12
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 faae 	bl	800aed8 <SD_SendStatus>
 800a97c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	431a      	orrs	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	0a5b      	lsrs	r3, r3, #9
 800a994:	f003 030f 	and.w	r3, r3, #15
 800a998:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a99a:	693b      	ldr	r3, [r7, #16]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b090      	sub	sp, #64	; 0x40
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f002 fa35 	bl	800ce24 <SDMMC_GetPowerState>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a9c4:	e0a7      	b.n	800ab16 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d02e      	beq.n	800aa2c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f002 fc7a 	bl	800d2cc <SDMMC_CmdSendCID>
 800a9d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e2:	e098      	b.n	800ab16 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f002 fa5f 	bl	800ceae <SDMMC_GetResponse>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f002 fa56 	bl	800ceae <SDMMC_GetResponse>
 800aa02:	4602      	mov	r2, r0
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	2108      	movs	r1, #8
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f002 fa4d 	bl	800ceae <SDMMC_GetResponse>
 800aa14:	4602      	mov	r2, r0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	210c      	movs	r1, #12
 800aa20:	4618      	mov	r0, r3
 800aa22:	f002 fa44 	bl	800ceae <SDMMC_GetResponse>
 800aa26:	4602      	mov	r2, r0
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	d00d      	beq.n	800aa50 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f107 020e 	add.w	r2, r7, #14
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f002 fc83 	bl	800d34a <SDMMC_CmdSetRelAdd>
 800aa44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <SD_InitCard+0xac>
    {
      return errorstate;
 800aa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa4e:	e062      	b.n	800ab16 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa54:	2b03      	cmp	r3, #3
 800aa56:	d036      	beq.n	800aac6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aa58:	89fb      	ldrh	r3, [r7, #14]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa68:	041b      	lsls	r3, r3, #16
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	4610      	mov	r0, r2
 800aa6e:	f002 fc4c 	bl	800d30a <SDMMC_CmdSendCSD>
 800aa72:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <SD_InitCard+0xda>
    {
      return errorstate;
 800aa7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7c:	e04b      	b.n	800ab16 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f002 fa12 	bl	800ceae <SDMMC_GetResponse>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2104      	movs	r1, #4
 800aa96:	4618      	mov	r0, r3
 800aa98:	f002 fa09 	bl	800ceae <SDMMC_GetResponse>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2108      	movs	r1, #8
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f002 fa00 	bl	800ceae <SDMMC_GetResponse>
 800aaae:	4602      	mov	r2, r0
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	210c      	movs	r1, #12
 800aaba:	4618      	mov	r0, r3
 800aabc:	f002 f9f7 	bl	800ceae <SDMMC_GetResponse>
 800aac0:	4602      	mov	r2, r0
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2104      	movs	r1, #4
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 f9ee 	bl	800ceae <SDMMC_GetResponse>
 800aad2:	4603      	mov	r3, r0
 800aad4:	0d1a      	lsrs	r2, r3, #20
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aada:	f107 0310 	add.w	r3, r7, #16
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f7ff fba5 	bl	800a230 <HAL_SD_GetCardCSD>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aaf0:	e011      	b.n	800ab16 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6819      	ldr	r1, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aafa:	041b      	lsls	r3, r3, #16
 800aafc:	461a      	mov	r2, r3
 800aafe:	f04f 0300 	mov.w	r3, #0
 800ab02:	4608      	mov	r0, r1
 800ab04:	f002 faf8 	bl	800d0f8 <SDMMC_CmdSelDesel>
 800ab08:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <SD_InitCard+0x170>
  {
    return errorstate;
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	e000      	b.n	800ab16 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3740      	adds	r7, #64	; 0x40
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
	...

0800ab20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	2300      	movs	r3, #0
 800ab32:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800ab34:	f7f7 fc48 	bl	80023c8 <HAL_GetTick>
 800ab38:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f002 fafe 	bl	800d140 <SDMMC_CmdGoIdleState>
 800ab44:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <SD_PowerON+0x30>
  {
    return errorstate;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	e0ed      	b.n	800ad2c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f002 fb11 	bl	800d17c <SDMMC_CmdOperCond>
 800ab5a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00d      	beq.n	800ab7e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f002 fae7 	bl	800d140 <SDMMC_CmdGoIdleState>
 800ab72:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d004      	beq.n	800ab84 <SD_PowerON+0x64>
    {
      return errorstate;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	e0d6      	b.n	800ad2c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d137      	bne.n	800abfc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f002 fb12 	bl	800d1bc <SDMMC_CmdAppCommand>
 800ab98:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d02d      	beq.n	800abfc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aba4:	e0c2      	b.n	800ad2c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f002 fb05 	bl	800d1bc <SDMMC_CmdAppCommand>
 800abb2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <SD_PowerON+0x9e>
    {
      return errorstate;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	e0b6      	b.n	800ad2c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	495c      	ldr	r1, [pc, #368]	; (800ad34 <SD_PowerON+0x214>)
 800abc4:	4618      	mov	r0, r3
 800abc6:	f002 fb1c 	bl	800d202 <SDMMC_CmdAppOperCommand>
 800abca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800abd6:	e0a9      	b.n	800ad2c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f002 f965 	bl	800ceae <SDMMC_GetResponse>
 800abe4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	0fdb      	lsrs	r3, r3, #31
 800abea:	2b01      	cmp	r3, #1
 800abec:	d101      	bne.n	800abf2 <SD_PowerON+0xd2>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <SD_PowerON+0xd4>
 800abf2:	2300      	movs	r3, #0
 800abf4:	61bb      	str	r3, [r7, #24]

    count++;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d802      	bhi.n	800ac0c <SD_PowerON+0xec>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0cc      	beq.n	800aba6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d902      	bls.n	800ac1c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ac16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac1a:	e087      	b.n	800ad2c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d07e      	beq.n	800ad24 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d17a      	bne.n	800ad2a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d075      	beq.n	800ad2a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac44:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0208 	orr.w	r2, r2, #8
 800ac54:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f002 fbdc 	bl	800d418 <SDMMC_CmdVoltageSwitch>
 800ac60:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00c      	beq.n	800ac82 <SD_PowerON+0x162>
        {
          return errorstate;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	e05f      	b.n	800ad2c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac6c:	f7f7 fbac 	bl	80023c8 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac7a:	d102      	bne.n	800ac82 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800ac7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac80:	e054      	b.n	800ad2c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac90:	d1ec      	bne.n	800ac6c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acaa:	d002      	beq.n	800acb2 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800acac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800acb0:	e03c      	b.n	800ad2c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800acb2:	2001      	movs	r0, #1
 800acb4:	f000 fb44 	bl	800b340 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f042 0204 	orr.w	r2, r2, #4
 800acc6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800acc8:	e00a      	b.n	800ace0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800acca:	f7f7 fb7d 	bl	80023c8 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acd8:	d102      	bne.n	800ace0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800acda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acde:	e025      	b.n	800ad2c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acee:	d1ec      	bne.n	800acca <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad08:	d102      	bne.n	800ad10 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad0e:	e00d      	b.n	800ad2c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2213      	movs	r2, #19
 800ad16:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
 800ad22:	e002      	b.n	800ad2a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	c1100000 	.word	0xc1100000

0800ad38 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08c      	sub	sp, #48	; 0x30
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ad42:	f7f7 fb41 	bl	80023c8 <HAL_GetTick>
 800ad46:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2100      	movs	r1, #0
 800ad52:	4618      	mov	r0, r3
 800ad54:	f002 f8ab 	bl	800ceae <SDMMC_GetResponse>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad62:	d102      	bne.n	800ad6a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad68:	e0b0      	b.n	800aecc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2140      	movs	r1, #64	; 0x40
 800ad70:	4618      	mov	r0, r3
 800ad72:	f002 f8db 	bl	800cf2c <SDMMC_CmdBlockLength>
 800ad76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	e0a0      	b.n	800aecc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad92:	041b      	lsls	r3, r3, #16
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f002 fa10 	bl	800d1bc <SDMMC_CmdAppCommand>
 800ad9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d005      	beq.n	800adb0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	e08d      	b.n	800aecc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adb4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800adba:	2360      	movs	r3, #96	; 0x60
 800adbc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800adbe:	2302      	movs	r3, #2
 800adc0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800adc6:	2301      	movs	r3, #1
 800adc8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f107 0208 	add.w	r2, r7, #8
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f002 f87d 	bl	800ced4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f002 faf8 	bl	800d3d4 <SDMMC_CmdStatusRegister>
 800ade4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d02b      	beq.n	800ae44 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	e069      	b.n	800aecc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d013      	beq.n	800ae2e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ae06:	2300      	movs	r3, #0
 800ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae0a:	e00d      	b.n	800ae28 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f001 ffd7 	bl	800cdc4 <SDMMC_ReadFIFO>
 800ae16:	4602      	mov	r2, r0
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	601a      	str	r2, [r3, #0]
        pData++;
 800ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1e:	3304      	adds	r3, #4
 800ae20:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	3301      	adds	r3, #1
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	2b07      	cmp	r3, #7
 800ae2c:	d9ee      	bls.n	800ae0c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae2e:	f7f7 facb 	bl	80023c8 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3c:	d102      	bne.n	800ae44 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ae3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae42:	e043      	b.n	800aecc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0d2      	beq.n	800adf8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ae60:	2308      	movs	r3, #8
 800ae62:	e033      	b.n	800aecc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae72:	2302      	movs	r3, #2
 800ae74:	e02a      	b.n	800aecc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7c:	f003 0320 	and.w	r3, r3, #32
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d017      	beq.n	800aeb4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ae84:	2320      	movs	r3, #32
 800ae86:	e021      	b.n	800aecc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f001 ff99 	bl	800cdc4 <SDMMC_ReadFIFO>
 800ae92:	4602      	mov	r2, r0
 800ae94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae96:	601a      	str	r2, [r3, #0]
    pData++;
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ae9e:	f7f7 fa93 	bl	80023c8 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeac:	d102      	bne.n	800aeb4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aeae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aeb2:	e00b      	b.n	800aecc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e2      	bne.n	800ae88 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a03      	ldr	r2, [pc, #12]	; (800aed4 <SD_SendSDStatus+0x19c>)
 800aec8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3730      	adds	r7, #48	; 0x30
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	18000f3a 	.word	0x18000f3a

0800aed8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800aee8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aeec:	e018      	b.n	800af20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aef6:	041b      	lsls	r3, r3, #16
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f002 fa47 	bl	800d38e <SDMMC_CmdSendStatus>
 800af00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <SD_SendStatus+0x34>
  {
    return errorstate;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	e009      	b.n	800af20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2100      	movs	r1, #0
 800af12:	4618      	mov	r0, r3
 800af14:	f001 ffcb 	bl	800ceae <SDMMC_GetResponse>
 800af18:	4602      	mov	r2, r0
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	2300      	movs	r3, #0
 800af36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2100      	movs	r1, #0
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 ffb5 	bl	800ceae <SDMMC_GetResponse>
 800af44:	4603      	mov	r3, r0
 800af46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4e:	d102      	bne.n	800af56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af54:	e02f      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f879 	bl	800b054 <SD_FindSCR>
 800af62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	e023      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d01c      	beq.n	800afb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af80:	041b      	lsls	r3, r3, #16
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f002 f919 	bl	800d1bc <SDMMC_CmdAppCommand>
 800af8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	e00f      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2102      	movs	r1, #2
 800af9c:	4618      	mov	r0, r3
 800af9e:	f002 f950 	bl	800d242 <SDMMC_CmdBusWidth>
 800afa2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	e003      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800afae:	2300      	movs	r3, #0
 800afb0:	e001      	b.n	800afb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	2300      	movs	r3, #0
 800afcc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2100      	movs	r1, #0
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 ff6a 	bl	800ceae <SDMMC_GetResponse>
 800afda:	4603      	mov	r3, r0
 800afdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afe0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe4:	d102      	bne.n	800afec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800afe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afea:	e02f      	b.n	800b04c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800afec:	f107 030c 	add.w	r3, r7, #12
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f82e 	bl	800b054 <SD_FindSCR>
 800aff8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	e023      	b.n	800b04c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d01c      	beq.n	800b048 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b016:	041b      	lsls	r3, r3, #16
 800b018:	4619      	mov	r1, r3
 800b01a:	4610      	mov	r0, r2
 800b01c:	f002 f8ce 	bl	800d1bc <SDMMC_CmdAppCommand>
 800b020:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	e00f      	b.n	800b04c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2100      	movs	r1, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f002 f905 	bl	800d242 <SDMMC_CmdBusWidth>
 800b038:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	e003      	b.n	800b04c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b044:	2300      	movs	r3, #0
 800b046:	e001      	b.n	800b04c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b048:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b05e:	f7f7 f9b3 	bl	80023c8 <HAL_GetTick>
 800b062:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b068:	2300      	movs	r3, #0
 800b06a:	60bb      	str	r3, [r7, #8]
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2108      	movs	r1, #8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f001 ff56 	bl	800cf2c <SDMMC_CmdBlockLength>
 800b080:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	e0ad      	b.n	800b1e8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b094:	041b      	lsls	r3, r3, #16
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f002 f88f 	bl	800d1bc <SDMMC_CmdAppCommand>
 800b09e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d001      	beq.n	800b0aa <SD_FindSCR+0x56>
  {
    return errorstate;
 800b0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a8:	e09e      	b.n	800b1e8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b0b4:	2330      	movs	r3, #48	; 0x30
 800b0b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f107 0210 	add.w	r2, r7, #16
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 ff00 	bl	800ced4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 f8d5 	bl	800d288 <SDMMC_CmdSendSCR>
 800b0de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d027      	beq.n	800b136 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	e07e      	b.n	800b1e8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d113      	bne.n	800b120 <SD_FindSCR+0xcc>
 800b0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d110      	bne.n	800b120 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4618      	mov	r0, r3
 800b104:	f001 fe5e 	bl	800cdc4 <SDMMC_ReadFIFO>
 800b108:	4603      	mov	r3, r0
 800b10a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f001 fe57 	bl	800cdc4 <SDMMC_ReadFIFO>
 800b116:	4603      	mov	r3, r0
 800b118:	60fb      	str	r3, [r7, #12]
      index++;
 800b11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11c:	3301      	adds	r3, #1
 800b11e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b120:	f7f7 f952 	bl	80023c8 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b12e:	d102      	bne.n	800b136 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b134:	e058      	b.n	800b1e8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b13c:	f240 532a 	movw	r3, #1322	; 0x52a
 800b140:	4013      	ands	r3, r2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0d1      	beq.n	800b0ea <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	2b00      	cmp	r3, #0
 800b152:	d005      	beq.n	800b160 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2208      	movs	r2, #8
 800b15a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b15c:	2308      	movs	r3, #8
 800b15e:	e043      	b.n	800b1e8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	f003 0302 	and.w	r3, r3, #2
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2202      	movs	r2, #2
 800b174:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b176:	2302      	movs	r3, #2
 800b178:	e036      	b.n	800b1e8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b180:	f003 0320 	and.w	r3, r3, #32
 800b184:	2b00      	cmp	r3, #0
 800b186:	d005      	beq.n	800b194 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	2220      	movs	r2, #32
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b190:	2320      	movs	r3, #32
 800b192:	e029      	b.n	800b1e8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a15      	ldr	r2, [pc, #84]	; (800b1f0 <SD_FindSCR+0x19c>)
 800b19a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	061a      	lsls	r2, r3, #24
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	0a1b      	lsrs	r3, r3, #8
 800b1ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	0e1b      	lsrs	r3, r3, #24
 800b1b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	601a      	str	r2, [r3, #0]
    scr++;
 800b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	061a      	lsls	r2, r3, #24
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	021b      	lsls	r3, r3, #8
 800b1cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	0a1b      	lsrs	r3, r3, #8
 800b1d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	0e1b      	lsrs	r3, r3, #24
 800b1e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3738      	adds	r7, #56	; 0x38
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	18000f3a 	.word	0x18000f3a

0800b1f4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b200:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d03f      	beq.n	800b28e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b20e:	2300      	movs	r3, #0
 800b210:	617b      	str	r3, [r7, #20]
 800b212:	e033      	b.n	800b27c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	f001 fdd3 	bl	800cdc4 <SDMMC_ReadFIFO>
 800b21e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	b2da      	uxtb	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3301      	adds	r3, #1
 800b22c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3b01      	subs	r3, #1
 800b232:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	0a1b      	lsrs	r3, r3, #8
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	3b01      	subs	r3, #1
 800b248:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	0c1b      	lsrs	r3, r3, #16
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	0e1b      	lsrs	r3, r3, #24
 800b264:	b2da      	uxtb	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3301      	adds	r3, #1
 800b26e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	3b01      	subs	r3, #1
 800b274:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	3301      	adds	r3, #1
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2b07      	cmp	r3, #7
 800b280:	d9c8      	bls.n	800b214 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b28e:	bf00      	nop
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b086      	sub	sp, #24
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d043      	beq.n	800b338 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	e037      	b.n	800b326 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	021a      	lsls	r2, r3, #8
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	041a      	lsls	r2, r3, #16
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	061a      	lsls	r2, r3, #24
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	4313      	orrs	r3, r2
 800b302:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f107 0208 	add.w	r2, r7, #8
 800b318:	4611      	mov	r1, r2
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 fd5f 	bl	800cdde <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	3301      	adds	r3, #1
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b07      	cmp	r3, #7
 800b32a:	d9c4      	bls.n	800b2b6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b338:	bf00      	nop
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800b34a:	bf00      	nop
 800b34c:	370c      	adds	r7, #12
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr

0800b356 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b356:	b480      	push	{r7}
 800b358:	b083      	sub	sp, #12
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800b35e:	bf00      	nop
 800b360:	370c      	adds	r7, #12
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr

0800b36a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b36a:	b480      	push	{r7}
 800b36c:	b083      	sub	sp, #12
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800b372:	bf00      	nop
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b37e:	b480      	push	{r7}
 800b380:	b083      	sub	sp, #12
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b392:	b480      	push	{r7}
 800b394:	b083      	sub	sp, #12
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800b39a:	bf00      	nop
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b084      	sub	sp, #16
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	e095      	b.n	800b4e4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d108      	bne.n	800b3d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3c8:	d009      	beq.n	800b3de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	61da      	str	r2, [r3, #28]
 800b3d0:	e005      	b.n	800b3de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d106      	bne.n	800b3fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7f6 fa23 	bl	8001844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2202      	movs	r2, #2
 800b402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b414:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b41e:	d902      	bls.n	800b426 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b420:	2300      	movs	r3, #0
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e002      	b.n	800b42c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b42a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b434:	d007      	beq.n	800b446 <HAL_SPI_Init+0xa0>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b43e:	d002      	beq.n	800b446 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b456:	431a      	orrs	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	f003 0302 	and.w	r3, r3, #2
 800b460:	431a      	orrs	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	695b      	ldr	r3, [r3, #20]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	431a      	orrs	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b474:	431a      	orrs	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b47e:	431a      	orrs	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b488:	ea42 0103 	orr.w	r1, r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	430a      	orrs	r2, r1
 800b49a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	0c1b      	lsrs	r3, r3, #16
 800b4a2:	f003 0204 	and.w	r2, r3, #4
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	f003 0310 	and.w	r3, r3, #16
 800b4ae:	431a      	orrs	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b4:	f003 0308 	and.w	r3, r3, #8
 800b4b8:	431a      	orrs	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b4c2:	ea42 0103 	orr.w	r1, r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	099b      	lsrs	r3, r3, #6
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10f      	bne.n	800b530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00a      	beq.n	800b530 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	099b      	lsrs	r3, r3, #6
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
    return;
 800b52e:	e0d7      	b.n	800b6e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	085b      	lsrs	r3, r3, #1
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00a      	beq.n	800b552 <HAL_SPI_IRQHandler+0x66>
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	09db      	lsrs	r3, r3, #7
 800b540:	f003 0301 	and.w	r3, r3, #1
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	4798      	blx	r3
    return;
 800b550:	e0c6      	b.n	800b6e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	095b      	lsrs	r3, r3, #5
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10c      	bne.n	800b578 <HAL_SPI_IRQHandler+0x8c>
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	099b      	lsrs	r3, r3, #6
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	0a1b      	lsrs	r3, r3, #8
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	f000 80b4 	beq.w	800b6e0 <HAL_SPI_IRQHandler+0x1f4>
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	095b      	lsrs	r3, r3, #5
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 80ad 	beq.w	800b6e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	099b      	lsrs	r3, r3, #6
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d023      	beq.n	800b5da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d011      	beq.n	800b5c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a2:	f043 0204 	orr.w	r2, r3, #4
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	e00b      	b.n	800b5da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	613b      	str	r3, [r7, #16]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	613b      	str	r3, [r7, #16]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	613b      	str	r3, [r7, #16]
 800b5d6:	693b      	ldr	r3, [r7, #16]
        return;
 800b5d8:	e082      	b.n	800b6e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	095b      	lsrs	r3, r3, #5
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d014      	beq.n	800b610 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5ea:	f043 0201 	orr.w	r2, r3, #1
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60fb      	str	r3, [r7, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b60c:	601a      	str	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	0a1b      	lsrs	r3, r3, #8
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00c      	beq.n	800b636 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b620:	f043 0208 	orr.w	r2, r3, #8
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b628:	2300      	movs	r3, #0
 800b62a:	60bb      	str	r3, [r7, #8]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	60bb      	str	r3, [r7, #8]
 800b634:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d04f      	beq.n	800b6de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	685a      	ldr	r2, [r3, #4]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b64c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	f003 0302 	and.w	r3, r3, #2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d104      	bne.n	800b66a <HAL_SPI_IRQHandler+0x17e>
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	2b00      	cmp	r3, #0
 800b668:	d034      	beq.n	800b6d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	685a      	ldr	r2, [r3, #4]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f022 0203 	bic.w	r2, r2, #3
 800b678:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d011      	beq.n	800b6a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b686:	4a18      	ldr	r2, [pc, #96]	; (800b6e8 <HAL_SPI_IRQHandler+0x1fc>)
 800b688:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b68e:	4618      	mov	r0, r3
 800b690:	f7f8 fa52 	bl	8003b38 <HAL_DMA_Abort_IT>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b69e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d016      	beq.n	800b6dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b2:	4a0d      	ldr	r2, [pc, #52]	; (800b6e8 <HAL_SPI_IRQHandler+0x1fc>)
 800b6b4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7f8 fa3c 	bl	8003b38 <HAL_DMA_Abort_IT>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00a      	beq.n	800b6dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800b6d2:	e003      	b.n	800b6dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f809 	bl	800b6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b6da:	e000      	b.n	800b6de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b6dc:	bf00      	nop
    return;
 800b6de:	bf00      	nop
  }
}
 800b6e0:	3720      	adds	r7, #32
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	0800b701 	.word	0x0800b701

0800b6ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b6f4:	bf00      	nop
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff ffe5 	bl	800b6ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b722:	bf00      	nop
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	e049      	b.n	800b7d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b00      	cmp	r3, #0
 800b746:	d106      	bne.n	800b756 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f841 	bl	800b7d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2202      	movs	r2, #2
 800b75a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3304      	adds	r3, #4
 800b766:	4619      	mov	r1, r3
 800b768:	4610      	mov	r0, r2
 800b76a:	f000 f9f7 	bl	800bb5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d001      	beq.n	800b804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e04f      	b.n	800b8a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2202      	movs	r2, #2
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f042 0201 	orr.w	r2, r2, #1
 800b81a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a23      	ldr	r2, [pc, #140]	; (800b8b0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d01d      	beq.n	800b862 <HAL_TIM_Base_Start_IT+0x76>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82e:	d018      	beq.n	800b862 <HAL_TIM_Base_Start_IT+0x76>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a1f      	ldr	r2, [pc, #124]	; (800b8b4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d013      	beq.n	800b862 <HAL_TIM_Base_Start_IT+0x76>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a1e      	ldr	r2, [pc, #120]	; (800b8b8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d00e      	beq.n	800b862 <HAL_TIM_Base_Start_IT+0x76>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a1c      	ldr	r2, [pc, #112]	; (800b8bc <HAL_TIM_Base_Start_IT+0xd0>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d009      	beq.n	800b862 <HAL_TIM_Base_Start_IT+0x76>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a1b      	ldr	r2, [pc, #108]	; (800b8c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d004      	beq.n	800b862 <HAL_TIM_Base_Start_IT+0x76>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a19      	ldr	r2, [pc, #100]	; (800b8c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d115      	bne.n	800b88e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	4b17      	ldr	r3, [pc, #92]	; (800b8c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b86a:	4013      	ands	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b06      	cmp	r3, #6
 800b872:	d015      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0xb4>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b87a:	d011      	beq.n	800b8a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f042 0201 	orr.w	r2, r2, #1
 800b88a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88c:	e008      	b.n	800b8a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f042 0201 	orr.w	r2, r2, #1
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	e000      	b.n	800b8a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	40012c00 	.word	0x40012c00
 800b8b4:	40000400 	.word	0x40000400
 800b8b8:	40000800 	.word	0x40000800
 800b8bc:	40000c00 	.word	0x40000c00
 800b8c0:	40013400 	.word	0x40013400
 800b8c4:	40014000 	.word	0x40014000
 800b8c8:	00010007 	.word	0x00010007

0800b8cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d122      	bne.n	800b928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d11b      	bne.n	800b928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f06f 0202 	mvn.w	r2, #2
 800b8f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d003      	beq.n	800b916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f905 	bl	800bb1e <HAL_TIM_IC_CaptureCallback>
 800b914:	e005      	b.n	800b922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f8f7 	bl	800bb0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f908 	bl	800bb32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	f003 0304 	and.w	r3, r3, #4
 800b932:	2b04      	cmp	r3, #4
 800b934:	d122      	bne.n	800b97c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f003 0304 	and.w	r3, r3, #4
 800b940:	2b04      	cmp	r3, #4
 800b942:	d11b      	bne.n	800b97c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f06f 0204 	mvn.w	r2, #4
 800b94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2202      	movs	r2, #2
 800b952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 f8db 	bl	800bb1e <HAL_TIM_IC_CaptureCallback>
 800b968:	e005      	b.n	800b976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f8cd 	bl	800bb0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f8de 	bl	800bb32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f003 0308 	and.w	r3, r3, #8
 800b986:	2b08      	cmp	r3, #8
 800b988:	d122      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b08      	cmp	r3, #8
 800b996:	d11b      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0208 	mvn.w	r2, #8
 800b9a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2204      	movs	r2, #4
 800b9a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f003 0303 	and.w	r3, r3, #3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f8b1 	bl	800bb1e <HAL_TIM_IC_CaptureCallback>
 800b9bc:	e005      	b.n	800b9ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f8a3 	bl	800bb0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f8b4 	bl	800bb32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	f003 0310 	and.w	r3, r3, #16
 800b9da:	2b10      	cmp	r3, #16
 800b9dc:	d122      	bne.n	800ba24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f003 0310 	and.w	r3, r3, #16
 800b9e8:	2b10      	cmp	r3, #16
 800b9ea:	d11b      	bne.n	800ba24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f06f 0210 	mvn.w	r2, #16
 800b9f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2208      	movs	r2, #8
 800b9fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f887 	bl	800bb1e <HAL_TIM_IC_CaptureCallback>
 800ba10:	e005      	b.n	800ba1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f879 	bl	800bb0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f88a 	bl	800bb32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d10e      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d107      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f06f 0201 	mvn.w	r2, #1
 800ba48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7f5 fb80 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba5a:	2b80      	cmp	r3, #128	; 0x80
 800ba5c:	d10e      	bne.n	800ba7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d107      	bne.n	800ba7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f914 	bl	800bca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	691b      	ldr	r3, [r3, #16]
 800ba82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba8a:	d10e      	bne.n	800baaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba96:	2b80      	cmp	r3, #128	; 0x80
 800ba98:	d107      	bne.n	800baaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800baa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f907 	bl	800bcb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab4:	2b40      	cmp	r3, #64	; 0x40
 800bab6:	d10e      	bne.n	800bad6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bac2:	2b40      	cmp	r3, #64	; 0x40
 800bac4:	d107      	bne.n	800bad6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f838 	bl	800bb46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	f003 0320 	and.w	r3, r3, #32
 800bae0:	2b20      	cmp	r3, #32
 800bae2:	d10e      	bne.n	800bb02 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	2b20      	cmp	r3, #32
 800baf0:	d107      	bne.n	800bb02 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f06f 0220 	mvn.w	r2, #32
 800bafa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f8c7 	bl	800bc90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb12:	bf00      	nop
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb26:	bf00      	nop
 800bb28:	370c      	adds	r7, #12
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b083      	sub	sp, #12
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb3a:	bf00      	nop
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
	...

0800bb5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a40      	ldr	r2, [pc, #256]	; (800bc70 <TIM_Base_SetConfig+0x114>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d013      	beq.n	800bb9c <TIM_Base_SetConfig+0x40>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb7a:	d00f      	beq.n	800bb9c <TIM_Base_SetConfig+0x40>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a3d      	ldr	r2, [pc, #244]	; (800bc74 <TIM_Base_SetConfig+0x118>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00b      	beq.n	800bb9c <TIM_Base_SetConfig+0x40>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a3c      	ldr	r2, [pc, #240]	; (800bc78 <TIM_Base_SetConfig+0x11c>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d007      	beq.n	800bb9c <TIM_Base_SetConfig+0x40>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a3b      	ldr	r2, [pc, #236]	; (800bc7c <TIM_Base_SetConfig+0x120>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d003      	beq.n	800bb9c <TIM_Base_SetConfig+0x40>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a3a      	ldr	r2, [pc, #232]	; (800bc80 <TIM_Base_SetConfig+0x124>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d108      	bne.n	800bbae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a2f      	ldr	r2, [pc, #188]	; (800bc70 <TIM_Base_SetConfig+0x114>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d01f      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbbc:	d01b      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a2c      	ldr	r2, [pc, #176]	; (800bc74 <TIM_Base_SetConfig+0x118>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d017      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a2b      	ldr	r2, [pc, #172]	; (800bc78 <TIM_Base_SetConfig+0x11c>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d013      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a2a      	ldr	r2, [pc, #168]	; (800bc7c <TIM_Base_SetConfig+0x120>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d00f      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a29      	ldr	r2, [pc, #164]	; (800bc80 <TIM_Base_SetConfig+0x124>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d00b      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a28      	ldr	r2, [pc, #160]	; (800bc84 <TIM_Base_SetConfig+0x128>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d007      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a27      	ldr	r2, [pc, #156]	; (800bc88 <TIM_Base_SetConfig+0x12c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d003      	beq.n	800bbf6 <TIM_Base_SetConfig+0x9a>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a26      	ldr	r2, [pc, #152]	; (800bc8c <TIM_Base_SetConfig+0x130>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d108      	bne.n	800bc08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	689a      	ldr	r2, [r3, #8]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a10      	ldr	r2, [pc, #64]	; (800bc70 <TIM_Base_SetConfig+0x114>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d00f      	beq.n	800bc54 <TIM_Base_SetConfig+0xf8>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a12      	ldr	r2, [pc, #72]	; (800bc80 <TIM_Base_SetConfig+0x124>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d00b      	beq.n	800bc54 <TIM_Base_SetConfig+0xf8>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a11      	ldr	r2, [pc, #68]	; (800bc84 <TIM_Base_SetConfig+0x128>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d007      	beq.n	800bc54 <TIM_Base_SetConfig+0xf8>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a10      	ldr	r2, [pc, #64]	; (800bc88 <TIM_Base_SetConfig+0x12c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d003      	beq.n	800bc54 <TIM_Base_SetConfig+0xf8>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a0f      	ldr	r2, [pc, #60]	; (800bc8c <TIM_Base_SetConfig+0x130>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d103      	bne.n	800bc5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	691a      	ldr	r2, [r3, #16]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	615a      	str	r2, [r3, #20]
}
 800bc62:	bf00      	nop
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	40012c00 	.word	0x40012c00
 800bc74:	40000400 	.word	0x40000400
 800bc78:	40000800 	.word	0x40000800
 800bc7c:	40000c00 	.word	0x40000c00
 800bc80:	40013400 	.word	0x40013400
 800bc84:	40014000 	.word	0x40014000
 800bc88:	40014400 	.word	0x40014400
 800bc8c:	40014800 	.word	0x40014800

0800bc90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcac:	bf00      	nop
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e042      	b.n	800bd64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d106      	bne.n	800bcf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7f6 f913 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2224      	movs	r2, #36	; 0x24
 800bcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f022 0201 	bic.w	r2, r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa74 	bl	800c1fc <UART_SetConfig>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d101      	bne.n	800bd1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e022      	b.n	800bd64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f000 fd32 	bl	800c790 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f042 0201 	orr.w	r2, r2, #1
 800bd5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fdb9 	bl	800c8d4 <UART_CheckIdleState>
 800bd62:	4603      	mov	r3, r0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd8c:	69fa      	ldr	r2, [r7, #28]
 800bd8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd92:	4013      	ands	r3, r2
 800bd94:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d118      	bne.n	800bdce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f003 0320 	and.w	r3, r3, #32
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d013      	beq.n	800bdce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	f003 0320 	and.w	r3, r3, #32
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d104      	bne.n	800bdba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <HAL_UART_IRQHandler+0x62>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	f000 81fb 	beq.w	800c1ba <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4798      	blx	r3
      }
      return;
 800bdcc:	e1f5      	b.n	800c1ba <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 80ef 	beq.w	800bfb4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bdd6:	697a      	ldr	r2, [r7, #20]
 800bdd8:	4b73      	ldr	r3, [pc, #460]	; (800bfa8 <HAL_UART_IRQHandler+0x23c>)
 800bdda:	4013      	ands	r3, r2
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d105      	bne.n	800bdec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bde0:	69ba      	ldr	r2, [r7, #24]
 800bde2:	4b72      	ldr	r3, [pc, #456]	; (800bfac <HAL_UART_IRQHandler+0x240>)
 800bde4:	4013      	ands	r3, r2
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 80e4 	beq.w	800bfb4 <HAL_UART_IRQHandler+0x248>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d010      	beq.n	800be18 <HAL_UART_IRQHandler+0xac>
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00b      	beq.n	800be18 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2201      	movs	r2, #1
 800be06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be0e:	f043 0201 	orr.w	r2, r3, #1
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	f003 0302 	and.w	r3, r3, #2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d010      	beq.n	800be44 <HAL_UART_IRQHandler+0xd8>
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2202      	movs	r2, #2
 800be32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be3a:	f043 0204 	orr.w	r2, r3, #4
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	f003 0304 	and.w	r3, r3, #4
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d010      	beq.n	800be70 <HAL_UART_IRQHandler+0x104>
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2204      	movs	r2, #4
 800be5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be66:	f043 0202 	orr.w	r2, r3, #2
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	f003 0308 	and.w	r3, r3, #8
 800be76:	2b00      	cmp	r3, #0
 800be78:	d015      	beq.n	800bea6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	f003 0320 	and.w	r3, r3, #32
 800be80:	2b00      	cmp	r3, #0
 800be82:	d104      	bne.n	800be8e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be84:	697a      	ldr	r2, [r7, #20]
 800be86:	4b48      	ldr	r3, [pc, #288]	; (800bfa8 <HAL_UART_IRQHandler+0x23c>)
 800be88:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00b      	beq.n	800bea6 <HAL_UART_IRQHandler+0x13a>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2208      	movs	r2, #8
 800be94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be9c:	f043 0208 	orr.w	r2, r3, #8
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beac:	2b00      	cmp	r3, #0
 800beae:	d011      	beq.n	800bed4 <HAL_UART_IRQHandler+0x168>
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00c      	beq.n	800bed4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beca:	f043 0220 	orr.w	r2, r3, #32
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 816f 	beq.w	800c1be <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d011      	beq.n	800bf0e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	f003 0320 	and.w	r3, r3, #32
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d104      	bne.n	800befe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d007      	beq.n	800bf0e <HAL_UART_IRQHandler+0x1a2>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf14:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf20:	2b40      	cmp	r3, #64	; 0x40
 800bf22:	d004      	beq.n	800bf2e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d031      	beq.n	800bf92 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fd9b 	bl	800ca6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf3e:	2b40      	cmp	r3, #64	; 0x40
 800bf40:	d123      	bne.n	800bf8a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf50:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d013      	beq.n	800bf82 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf5e:	4a14      	ldr	r2, [pc, #80]	; (800bfb0 <HAL_UART_IRQHandler+0x244>)
 800bf60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7f7 fde6 	bl	8003b38 <HAL_DMA_Abort_IT>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d017      	beq.n	800bfa2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf80:	e00f      	b.n	800bfa2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f930 	bl	800c1e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf88:	e00b      	b.n	800bfa2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f92c 	bl	800c1e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf90:	e007      	b.n	800bfa2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f928 	bl	800c1e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bfa0:	e10d      	b.n	800c1be <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa2:	bf00      	nop
    return;
 800bfa4:	e10b      	b.n	800c1be <HAL_UART_IRQHandler+0x452>
 800bfa6:	bf00      	nop
 800bfa8:	10000001 	.word	0x10000001
 800bfac:	04000120 	.word	0x04000120
 800bfb0:	0800cacf 	.word	0x0800cacf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	f040 80ab 	bne.w	800c114 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	f003 0310 	and.w	r3, r3, #16
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 80a5 	beq.w	800c114 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	f003 0310 	and.w	r3, r3, #16
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 809f 	beq.w	800c114 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2210      	movs	r2, #16
 800bfdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe8:	2b40      	cmp	r3, #64	; 0x40
 800bfea:	d155      	bne.n	800c098 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800bff6:	893b      	ldrh	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 80e2 	beq.w	800c1c2 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c004:	893a      	ldrh	r2, [r7, #8]
 800c006:	429a      	cmp	r2, r3
 800c008:	f080 80db 	bcs.w	800c1c2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	893a      	ldrh	r2, [r7, #8]
 800c010:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 0320 	and.w	r3, r3, #32
 800c020:	2b00      	cmp	r3, #0
 800c022:	d12b      	bne.n	800c07c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c032:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689a      	ldr	r2, [r3, #8]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f022 0201 	bic.w	r2, r2, #1
 800c042:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689a      	ldr	r2, [r3, #8]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c052:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2220      	movs	r2, #32
 800c058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f022 0210 	bic.w	r2, r2, #16
 800c070:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c076:	4618      	mov	r0, r3
 800c078:	f7f7 fd02 	bl	8003a80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c088:	b29b      	uxth	r3, r3
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7f4 fac7 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800c096:	e094      	b.n	800c1c2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 8087 	beq.w	800c1c6 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 800c0b8:	897b      	ldrh	r3, [r7, #10]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 8083 	beq.w	800c1c6 <HAL_UART_IRQHandler+0x45a>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c0ce:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0de:	f023 0301 	bic.w	r3, r3, #1
 800c0e2:	6093      	str	r3, [r2, #8]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2220      	movs	r2, #32
 800c0e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f022 0210 	bic.w	r2, r2, #16
 800c106:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c108:	897b      	ldrh	r3, [r7, #10]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7f4 fa89 	bl	8000624 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800c112:	e058      	b.n	800c1c6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00d      	beq.n	800c13a <HAL_UART_IRQHandler+0x3ce>
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d008      	beq.n	800c13a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fcfb 	bl	800cb2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c138:	e048      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c140:	2b00      	cmp	r3, #0
 800c142:	d012      	beq.n	800c16a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d104      	bne.n	800c158 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d008      	beq.n	800c16a <HAL_UART_IRQHandler+0x3fe>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d034      	beq.n	800c1ca <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	4798      	blx	r3
    }
    return;
 800c168:	e02f      	b.n	800c1ca <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c170:	2b00      	cmp	r3, #0
 800c172:	d008      	beq.n	800c186 <HAL_UART_IRQHandler+0x41a>
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fcbb 	bl	800cafa <UART_EndTransmit_IT>
    return;
 800c184:	e022      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x436>
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fcdb 	bl	800cb56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1a0:	e014      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00f      	beq.n	800c1cc <HAL_UART_IRQHandler+0x460>
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	da0c      	bge.n	800c1cc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fcc5 	bl	800cb42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1b8:	e008      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
      return;
 800c1ba:	bf00      	nop
 800c1bc:	e006      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
    return;
 800c1be:	bf00      	nop
 800c1c0:	e004      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
      return;
 800c1c2:	bf00      	nop
 800c1c4:	e002      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
      return;
 800c1c6:	bf00      	nop
 800c1c8:	e000      	b.n	800c1cc <HAL_UART_IRQHandler+0x460>
    return;
 800c1ca:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800c1cc:	3720      	adds	r7, #32
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop

0800c1d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1fc:	b5b0      	push	{r4, r5, r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c204:	2300      	movs	r3, #0
 800c206:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	689a      	ldr	r2, [r3, #8]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	431a      	orrs	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	431a      	orrs	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	69db      	ldr	r3, [r3, #28]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	4bb1      	ldr	r3, [pc, #708]	; (800c4ec <UART_SetConfig+0x2f0>)
 800c228:	4013      	ands	r3, r2
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	6812      	ldr	r2, [r2, #0]
 800c22e:	69f9      	ldr	r1, [r7, #28]
 800c230:	430b      	orrs	r3, r1
 800c232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68da      	ldr	r2, [r3, #12]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	430a      	orrs	r2, r1
 800c248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4aa6      	ldr	r2, [pc, #664]	; (800c4f0 <UART_SetConfig+0x2f4>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d004      	beq.n	800c264 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	69fa      	ldr	r2, [r7, #28]
 800c260:	4313      	orrs	r3, r2
 800c262:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c26e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	6812      	ldr	r2, [r2, #0]
 800c276:	69f9      	ldr	r1, [r7, #28]
 800c278:	430b      	orrs	r3, r1
 800c27a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c282:	f023 010f 	bic.w	r1, r3, #15
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	430a      	orrs	r2, r1
 800c290:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a97      	ldr	r2, [pc, #604]	; (800c4f4 <UART_SetConfig+0x2f8>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d120      	bne.n	800c2de <UART_SetConfig+0xe2>
 800c29c:	4b96      	ldr	r3, [pc, #600]	; (800c4f8 <UART_SetConfig+0x2fc>)
 800c29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a2:	f003 0303 	and.w	r3, r3, #3
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d816      	bhi.n	800c2d8 <UART_SetConfig+0xdc>
 800c2aa:	a201      	add	r2, pc, #4	; (adr r2, 800c2b0 <UART_SetConfig+0xb4>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c2c1 	.word	0x0800c2c1
 800c2b4:	0800c2cd 	.word	0x0800c2cd
 800c2b8:	0800c2c7 	.word	0x0800c2c7
 800c2bc:	0800c2d3 	.word	0x0800c2d3
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	76fb      	strb	r3, [r7, #27]
 800c2c4:	e0e7      	b.n	800c496 <UART_SetConfig+0x29a>
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	76fb      	strb	r3, [r7, #27]
 800c2ca:	e0e4      	b.n	800c496 <UART_SetConfig+0x29a>
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	76fb      	strb	r3, [r7, #27]
 800c2d0:	e0e1      	b.n	800c496 <UART_SetConfig+0x29a>
 800c2d2:	2308      	movs	r3, #8
 800c2d4:	76fb      	strb	r3, [r7, #27]
 800c2d6:	e0de      	b.n	800c496 <UART_SetConfig+0x29a>
 800c2d8:	2310      	movs	r3, #16
 800c2da:	76fb      	strb	r3, [r7, #27]
 800c2dc:	e0db      	b.n	800c496 <UART_SetConfig+0x29a>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a86      	ldr	r2, [pc, #536]	; (800c4fc <UART_SetConfig+0x300>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d132      	bne.n	800c34e <UART_SetConfig+0x152>
 800c2e8:	4b83      	ldr	r3, [pc, #524]	; (800c4f8 <UART_SetConfig+0x2fc>)
 800c2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ee:	f003 030c 	and.w	r3, r3, #12
 800c2f2:	2b0c      	cmp	r3, #12
 800c2f4:	d828      	bhi.n	800c348 <UART_SetConfig+0x14c>
 800c2f6:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <UART_SetConfig+0x100>)
 800c2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fc:	0800c331 	.word	0x0800c331
 800c300:	0800c349 	.word	0x0800c349
 800c304:	0800c349 	.word	0x0800c349
 800c308:	0800c349 	.word	0x0800c349
 800c30c:	0800c33d 	.word	0x0800c33d
 800c310:	0800c349 	.word	0x0800c349
 800c314:	0800c349 	.word	0x0800c349
 800c318:	0800c349 	.word	0x0800c349
 800c31c:	0800c337 	.word	0x0800c337
 800c320:	0800c349 	.word	0x0800c349
 800c324:	0800c349 	.word	0x0800c349
 800c328:	0800c349 	.word	0x0800c349
 800c32c:	0800c343 	.word	0x0800c343
 800c330:	2300      	movs	r3, #0
 800c332:	76fb      	strb	r3, [r7, #27]
 800c334:	e0af      	b.n	800c496 <UART_SetConfig+0x29a>
 800c336:	2302      	movs	r3, #2
 800c338:	76fb      	strb	r3, [r7, #27]
 800c33a:	e0ac      	b.n	800c496 <UART_SetConfig+0x29a>
 800c33c:	2304      	movs	r3, #4
 800c33e:	76fb      	strb	r3, [r7, #27]
 800c340:	e0a9      	b.n	800c496 <UART_SetConfig+0x29a>
 800c342:	2308      	movs	r3, #8
 800c344:	76fb      	strb	r3, [r7, #27]
 800c346:	e0a6      	b.n	800c496 <UART_SetConfig+0x29a>
 800c348:	2310      	movs	r3, #16
 800c34a:	76fb      	strb	r3, [r7, #27]
 800c34c:	e0a3      	b.n	800c496 <UART_SetConfig+0x29a>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a6b      	ldr	r2, [pc, #428]	; (800c500 <UART_SetConfig+0x304>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d120      	bne.n	800c39a <UART_SetConfig+0x19e>
 800c358:	4b67      	ldr	r3, [pc, #412]	; (800c4f8 <UART_SetConfig+0x2fc>)
 800c35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c35e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c362:	2b30      	cmp	r3, #48	; 0x30
 800c364:	d013      	beq.n	800c38e <UART_SetConfig+0x192>
 800c366:	2b30      	cmp	r3, #48	; 0x30
 800c368:	d814      	bhi.n	800c394 <UART_SetConfig+0x198>
 800c36a:	2b20      	cmp	r3, #32
 800c36c:	d009      	beq.n	800c382 <UART_SetConfig+0x186>
 800c36e:	2b20      	cmp	r3, #32
 800c370:	d810      	bhi.n	800c394 <UART_SetConfig+0x198>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d002      	beq.n	800c37c <UART_SetConfig+0x180>
 800c376:	2b10      	cmp	r3, #16
 800c378:	d006      	beq.n	800c388 <UART_SetConfig+0x18c>
 800c37a:	e00b      	b.n	800c394 <UART_SetConfig+0x198>
 800c37c:	2300      	movs	r3, #0
 800c37e:	76fb      	strb	r3, [r7, #27]
 800c380:	e089      	b.n	800c496 <UART_SetConfig+0x29a>
 800c382:	2302      	movs	r3, #2
 800c384:	76fb      	strb	r3, [r7, #27]
 800c386:	e086      	b.n	800c496 <UART_SetConfig+0x29a>
 800c388:	2304      	movs	r3, #4
 800c38a:	76fb      	strb	r3, [r7, #27]
 800c38c:	e083      	b.n	800c496 <UART_SetConfig+0x29a>
 800c38e:	2308      	movs	r3, #8
 800c390:	76fb      	strb	r3, [r7, #27]
 800c392:	e080      	b.n	800c496 <UART_SetConfig+0x29a>
 800c394:	2310      	movs	r3, #16
 800c396:	76fb      	strb	r3, [r7, #27]
 800c398:	e07d      	b.n	800c496 <UART_SetConfig+0x29a>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a59      	ldr	r2, [pc, #356]	; (800c504 <UART_SetConfig+0x308>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d120      	bne.n	800c3e6 <UART_SetConfig+0x1ea>
 800c3a4:	4b54      	ldr	r3, [pc, #336]	; (800c4f8 <UART_SetConfig+0x2fc>)
 800c3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c3ae:	2bc0      	cmp	r3, #192	; 0xc0
 800c3b0:	d013      	beq.n	800c3da <UART_SetConfig+0x1de>
 800c3b2:	2bc0      	cmp	r3, #192	; 0xc0
 800c3b4:	d814      	bhi.n	800c3e0 <UART_SetConfig+0x1e4>
 800c3b6:	2b80      	cmp	r3, #128	; 0x80
 800c3b8:	d009      	beq.n	800c3ce <UART_SetConfig+0x1d2>
 800c3ba:	2b80      	cmp	r3, #128	; 0x80
 800c3bc:	d810      	bhi.n	800c3e0 <UART_SetConfig+0x1e4>
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <UART_SetConfig+0x1cc>
 800c3c2:	2b40      	cmp	r3, #64	; 0x40
 800c3c4:	d006      	beq.n	800c3d4 <UART_SetConfig+0x1d8>
 800c3c6:	e00b      	b.n	800c3e0 <UART_SetConfig+0x1e4>
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	76fb      	strb	r3, [r7, #27]
 800c3cc:	e063      	b.n	800c496 <UART_SetConfig+0x29a>
 800c3ce:	2302      	movs	r3, #2
 800c3d0:	76fb      	strb	r3, [r7, #27]
 800c3d2:	e060      	b.n	800c496 <UART_SetConfig+0x29a>
 800c3d4:	2304      	movs	r3, #4
 800c3d6:	76fb      	strb	r3, [r7, #27]
 800c3d8:	e05d      	b.n	800c496 <UART_SetConfig+0x29a>
 800c3da:	2308      	movs	r3, #8
 800c3dc:	76fb      	strb	r3, [r7, #27]
 800c3de:	e05a      	b.n	800c496 <UART_SetConfig+0x29a>
 800c3e0:	2310      	movs	r3, #16
 800c3e2:	76fb      	strb	r3, [r7, #27]
 800c3e4:	e057      	b.n	800c496 <UART_SetConfig+0x29a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a47      	ldr	r2, [pc, #284]	; (800c508 <UART_SetConfig+0x30c>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d125      	bne.n	800c43c <UART_SetConfig+0x240>
 800c3f0:	4b41      	ldr	r3, [pc, #260]	; (800c4f8 <UART_SetConfig+0x2fc>)
 800c3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3fe:	d017      	beq.n	800c430 <UART_SetConfig+0x234>
 800c400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c404:	d817      	bhi.n	800c436 <UART_SetConfig+0x23a>
 800c406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c40a:	d00b      	beq.n	800c424 <UART_SetConfig+0x228>
 800c40c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c410:	d811      	bhi.n	800c436 <UART_SetConfig+0x23a>
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <UART_SetConfig+0x222>
 800c416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c41a:	d006      	beq.n	800c42a <UART_SetConfig+0x22e>
 800c41c:	e00b      	b.n	800c436 <UART_SetConfig+0x23a>
 800c41e:	2300      	movs	r3, #0
 800c420:	76fb      	strb	r3, [r7, #27]
 800c422:	e038      	b.n	800c496 <UART_SetConfig+0x29a>
 800c424:	2302      	movs	r3, #2
 800c426:	76fb      	strb	r3, [r7, #27]
 800c428:	e035      	b.n	800c496 <UART_SetConfig+0x29a>
 800c42a:	2304      	movs	r3, #4
 800c42c:	76fb      	strb	r3, [r7, #27]
 800c42e:	e032      	b.n	800c496 <UART_SetConfig+0x29a>
 800c430:	2308      	movs	r3, #8
 800c432:	76fb      	strb	r3, [r7, #27]
 800c434:	e02f      	b.n	800c496 <UART_SetConfig+0x29a>
 800c436:	2310      	movs	r3, #16
 800c438:	76fb      	strb	r3, [r7, #27]
 800c43a:	e02c      	b.n	800c496 <UART_SetConfig+0x29a>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a2b      	ldr	r2, [pc, #172]	; (800c4f0 <UART_SetConfig+0x2f4>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d125      	bne.n	800c492 <UART_SetConfig+0x296>
 800c446:	4b2c      	ldr	r3, [pc, #176]	; (800c4f8 <UART_SetConfig+0x2fc>)
 800c448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c44c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c454:	d017      	beq.n	800c486 <UART_SetConfig+0x28a>
 800c456:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c45a:	d817      	bhi.n	800c48c <UART_SetConfig+0x290>
 800c45c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c460:	d00b      	beq.n	800c47a <UART_SetConfig+0x27e>
 800c462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c466:	d811      	bhi.n	800c48c <UART_SetConfig+0x290>
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <UART_SetConfig+0x278>
 800c46c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c470:	d006      	beq.n	800c480 <UART_SetConfig+0x284>
 800c472:	e00b      	b.n	800c48c <UART_SetConfig+0x290>
 800c474:	2300      	movs	r3, #0
 800c476:	76fb      	strb	r3, [r7, #27]
 800c478:	e00d      	b.n	800c496 <UART_SetConfig+0x29a>
 800c47a:	2302      	movs	r3, #2
 800c47c:	76fb      	strb	r3, [r7, #27]
 800c47e:	e00a      	b.n	800c496 <UART_SetConfig+0x29a>
 800c480:	2304      	movs	r3, #4
 800c482:	76fb      	strb	r3, [r7, #27]
 800c484:	e007      	b.n	800c496 <UART_SetConfig+0x29a>
 800c486:	2308      	movs	r3, #8
 800c488:	76fb      	strb	r3, [r7, #27]
 800c48a:	e004      	b.n	800c496 <UART_SetConfig+0x29a>
 800c48c:	2310      	movs	r3, #16
 800c48e:	76fb      	strb	r3, [r7, #27]
 800c490:	e001      	b.n	800c496 <UART_SetConfig+0x29a>
 800c492:	2310      	movs	r3, #16
 800c494:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a15      	ldr	r2, [pc, #84]	; (800c4f0 <UART_SetConfig+0x2f4>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	f040 809f 	bne.w	800c5e0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4a2:	7efb      	ldrb	r3, [r7, #27]
 800c4a4:	2b08      	cmp	r3, #8
 800c4a6:	d837      	bhi.n	800c518 <UART_SetConfig+0x31c>
 800c4a8:	a201      	add	r2, pc, #4	; (adr r2, 800c4b0 <UART_SetConfig+0x2b4>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c4d5 	.word	0x0800c4d5
 800c4b4:	0800c519 	.word	0x0800c519
 800c4b8:	0800c4dd 	.word	0x0800c4dd
 800c4bc:	0800c519 	.word	0x0800c519
 800c4c0:	0800c4e3 	.word	0x0800c4e3
 800c4c4:	0800c519 	.word	0x0800c519
 800c4c8:	0800c519 	.word	0x0800c519
 800c4cc:	0800c519 	.word	0x0800c519
 800c4d0:	0800c511 	.word	0x0800c511
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4d4:	f7fa fdac 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 800c4d8:	6178      	str	r0, [r7, #20]
        break;
 800c4da:	e022      	b.n	800c522 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4dc:	4b0b      	ldr	r3, [pc, #44]	; (800c50c <UART_SetConfig+0x310>)
 800c4de:	617b      	str	r3, [r7, #20]
        break;
 800c4e0:	e01f      	b.n	800c522 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4e2:	f7fa fd0d 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800c4e6:	6178      	str	r0, [r7, #20]
        break;
 800c4e8:	e01b      	b.n	800c522 <UART_SetConfig+0x326>
 800c4ea:	bf00      	nop
 800c4ec:	cfff69f3 	.word	0xcfff69f3
 800c4f0:	40008000 	.word	0x40008000
 800c4f4:	40013800 	.word	0x40013800
 800c4f8:	40021000 	.word	0x40021000
 800c4fc:	40004400 	.word	0x40004400
 800c500:	40004800 	.word	0x40004800
 800c504:	40004c00 	.word	0x40004c00
 800c508:	40005000 	.word	0x40005000
 800c50c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c514:	617b      	str	r3, [r7, #20]
        break;
 800c516:	e004      	b.n	800c522 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800c518:	2300      	movs	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	76bb      	strb	r3, [r7, #26]
        break;
 800c520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 811b 	beq.w	800c760 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52e:	4a96      	ldr	r2, [pc, #600]	; (800c788 <UART_SetConfig+0x58c>)
 800c530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c534:	461a      	mov	r2, r3
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	fbb3 f3f2 	udiv	r3, r3, r2
 800c53c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	685a      	ldr	r2, [r3, #4]
 800c542:	4613      	mov	r3, r2
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	4413      	add	r3, r2
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d305      	bcc.n	800c55a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	429a      	cmp	r2, r3
 800c558:	d902      	bls.n	800c560 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	76bb      	strb	r3, [r7, #26]
 800c55e:	e0ff      	b.n	800c760 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	4618      	mov	r0, r3
 800c564:	f04f 0100 	mov.w	r1, #0
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56c:	4a86      	ldr	r2, [pc, #536]	; (800c788 <UART_SetConfig+0x58c>)
 800c56e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c572:	b29a      	uxth	r2, r3
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	f7f3 fe42 	bl	8000200 <__aeabi_uldivmod>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	4610      	mov	r0, r2
 800c582:	4619      	mov	r1, r3
 800c584:	f04f 0200 	mov.w	r2, #0
 800c588:	f04f 0300 	mov.w	r3, #0
 800c58c:	020b      	lsls	r3, r1, #8
 800c58e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c592:	0202      	lsls	r2, r0, #8
 800c594:	6879      	ldr	r1, [r7, #4]
 800c596:	6849      	ldr	r1, [r1, #4]
 800c598:	0849      	lsrs	r1, r1, #1
 800c59a:	4608      	mov	r0, r1
 800c59c:	f04f 0100 	mov.w	r1, #0
 800c5a0:	1814      	adds	r4, r2, r0
 800c5a2:	eb43 0501 	adc.w	r5, r3, r1
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f04f 0300 	mov.w	r3, #0
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	f7f3 fe24 	bl	8000200 <__aeabi_uldivmod>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4613      	mov	r3, r2
 800c5be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5c6:	d308      	bcc.n	800c5da <UART_SetConfig+0x3de>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5ce:	d204      	bcs.n	800c5da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	693a      	ldr	r2, [r7, #16]
 800c5d6:	60da      	str	r2, [r3, #12]
 800c5d8:	e0c2      	b.n	800c760 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	76bb      	strb	r3, [r7, #26]
 800c5de:	e0bf      	b.n	800c760 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	69db      	ldr	r3, [r3, #28]
 800c5e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e8:	d165      	bne.n	800c6b6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800c5ea:	7efb      	ldrb	r3, [r7, #27]
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d828      	bhi.n	800c642 <UART_SetConfig+0x446>
 800c5f0:	a201      	add	r2, pc, #4	; (adr r2, 800c5f8 <UART_SetConfig+0x3fc>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c61d 	.word	0x0800c61d
 800c5fc:	0800c625 	.word	0x0800c625
 800c600:	0800c62d 	.word	0x0800c62d
 800c604:	0800c643 	.word	0x0800c643
 800c608:	0800c633 	.word	0x0800c633
 800c60c:	0800c643 	.word	0x0800c643
 800c610:	0800c643 	.word	0x0800c643
 800c614:	0800c643 	.word	0x0800c643
 800c618:	0800c63b 	.word	0x0800c63b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c61c:	f7fa fd08 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 800c620:	6178      	str	r0, [r7, #20]
        break;
 800c622:	e013      	b.n	800c64c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c624:	f7fa fd1a 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 800c628:	6178      	str	r0, [r7, #20]
        break;
 800c62a:	e00f      	b.n	800c64c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c62c:	4b57      	ldr	r3, [pc, #348]	; (800c78c <UART_SetConfig+0x590>)
 800c62e:	617b      	str	r3, [r7, #20]
        break;
 800c630:	e00c      	b.n	800c64c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c632:	f7fa fc65 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800c636:	6178      	str	r0, [r7, #20]
        break;
 800c638:	e008      	b.n	800c64c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c63e:	617b      	str	r3, [r7, #20]
        break;
 800c640:	e004      	b.n	800c64c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800c642:	2300      	movs	r3, #0
 800c644:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	76bb      	strb	r3, [r7, #26]
        break;
 800c64a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8086 	beq.w	800c760 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c658:	4a4b      	ldr	r2, [pc, #300]	; (800c788 <UART_SetConfig+0x58c>)
 800c65a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c65e:	461a      	mov	r2, r3
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	fbb3 f3f2 	udiv	r3, r3, r2
 800c666:	005a      	lsls	r2, r3, #1
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	085b      	lsrs	r3, r3, #1
 800c66e:	441a      	add	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	fbb2 f3f3 	udiv	r3, r2, r3
 800c678:	b29b      	uxth	r3, r3
 800c67a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2b0f      	cmp	r3, #15
 800c680:	d916      	bls.n	800c6b0 <UART_SetConfig+0x4b4>
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c688:	d212      	bcs.n	800c6b0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	f023 030f 	bic.w	r3, r3, #15
 800c692:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	085b      	lsrs	r3, r3, #1
 800c698:	b29b      	uxth	r3, r3
 800c69a:	f003 0307 	and.w	r3, r3, #7
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	89fa      	ldrh	r2, [r7, #14]
 800c6ac:	60da      	str	r2, [r3, #12]
 800c6ae:	e057      	b.n	800c760 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	76bb      	strb	r3, [r7, #26]
 800c6b4:	e054      	b.n	800c760 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6b6:	7efb      	ldrb	r3, [r7, #27]
 800c6b8:	2b08      	cmp	r3, #8
 800c6ba:	d828      	bhi.n	800c70e <UART_SetConfig+0x512>
 800c6bc:	a201      	add	r2, pc, #4	; (adr r2, 800c6c4 <UART_SetConfig+0x4c8>)
 800c6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c2:	bf00      	nop
 800c6c4:	0800c6e9 	.word	0x0800c6e9
 800c6c8:	0800c6f1 	.word	0x0800c6f1
 800c6cc:	0800c6f9 	.word	0x0800c6f9
 800c6d0:	0800c70f 	.word	0x0800c70f
 800c6d4:	0800c6ff 	.word	0x0800c6ff
 800c6d8:	0800c70f 	.word	0x0800c70f
 800c6dc:	0800c70f 	.word	0x0800c70f
 800c6e0:	0800c70f 	.word	0x0800c70f
 800c6e4:	0800c707 	.word	0x0800c707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6e8:	f7fa fca2 	bl	8007030 <HAL_RCC_GetPCLK1Freq>
 800c6ec:	6178      	str	r0, [r7, #20]
        break;
 800c6ee:	e013      	b.n	800c718 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6f0:	f7fa fcb4 	bl	800705c <HAL_RCC_GetPCLK2Freq>
 800c6f4:	6178      	str	r0, [r7, #20]
        break;
 800c6f6:	e00f      	b.n	800c718 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6f8:	4b24      	ldr	r3, [pc, #144]	; (800c78c <UART_SetConfig+0x590>)
 800c6fa:	617b      	str	r3, [r7, #20]
        break;
 800c6fc:	e00c      	b.n	800c718 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6fe:	f7fa fbff 	bl	8006f00 <HAL_RCC_GetSysClockFreq>
 800c702:	6178      	str	r0, [r7, #20]
        break;
 800c704:	e008      	b.n	800c718 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c70a:	617b      	str	r3, [r7, #20]
        break;
 800c70c:	e004      	b.n	800c718 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800c70e:	2300      	movs	r3, #0
 800c710:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	76bb      	strb	r3, [r7, #26]
        break;
 800c716:	bf00      	nop
    }

    if (pclk != 0U)
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d020      	beq.n	800c760 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c722:	4a19      	ldr	r2, [pc, #100]	; (800c788 <UART_SetConfig+0x58c>)
 800c724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c728:	461a      	mov	r2, r3
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	085b      	lsrs	r3, r3, #1
 800c736:	441a      	add	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c740:	b29b      	uxth	r3, r3
 800c742:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b0f      	cmp	r3, #15
 800c748:	d908      	bls.n	800c75c <UART_SetConfig+0x560>
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c750:	d204      	bcs.n	800c75c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	693a      	ldr	r2, [r7, #16]
 800c758:	60da      	str	r2, [r3, #12]
 800c75a:	e001      	b.n	800c760 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2201      	movs	r2, #1
 800c76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c77c:	7ebb      	ldrb	r3, [r7, #26]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3720      	adds	r7, #32
 800c782:	46bd      	mov	sp, r7
 800c784:	bdb0      	pop	{r4, r5, r7, pc}
 800c786:	bf00      	nop
 800c788:	08014b20 	.word	0x08014b20
 800c78c:	00f42400 	.word	0x00f42400

0800c790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00a      	beq.n	800c7ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	430a      	orrs	r2, r1
 800c7b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c802:	f003 0308 	and.w	r3, r3, #8
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	430a      	orrs	r2, r1
 800c81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c824:	f003 0310 	and.w	r3, r3, #16
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00a      	beq.n	800c842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	430a      	orrs	r2, r1
 800c840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00a      	beq.n	800c864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	430a      	orrs	r2, r1
 800c862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d01a      	beq.n	800c8a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c88a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c88e:	d10a      	bne.n	800c8a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	605a      	str	r2, [r3, #4]
  }
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8e4:	f7f5 fd70 	bl	80023c8 <HAL_GetTick>
 800c8e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 0308 	and.w	r3, r3, #8
 800c8f4:	2b08      	cmp	r3, #8
 800c8f6:	d10e      	bne.n	800c916 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f82f 	bl	800c96a <UART_WaitOnFlagUntilTimeout>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d001      	beq.n	800c916 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c912:	2303      	movs	r3, #3
 800c914:	e025      	b.n	800c962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	2b04      	cmp	r3, #4
 800c922:	d10e      	bne.n	800c942 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c928:	9300      	str	r3, [sp, #0]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f819 	bl	800c96a <UART_WaitOnFlagUntilTimeout>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e00f      	b.n	800c962 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2220      	movs	r2, #32
 800c946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2220      	movs	r2, #32
 800c94e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	603b      	str	r3, [r7, #0]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c97a:	e062      	b.n	800ca42 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c982:	d05e      	beq.n	800ca42 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c984:	f7f5 fd20 	bl	80023c8 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	69ba      	ldr	r2, [r7, #24]
 800c990:	429a      	cmp	r2, r3
 800c992:	d302      	bcc.n	800c99a <UART_WaitOnFlagUntilTimeout+0x30>
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d11d      	bne.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c9a8:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f022 0201 	bic.w	r2, r2, #1
 800c9b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e045      	b.n	800ca62 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d02e      	beq.n	800ca42 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	69db      	ldr	r3, [r3, #28]
 800c9ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9f2:	d126      	bne.n	800ca42 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ca0c:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	689a      	ldr	r2, [r3, #8]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f022 0201 	bic.w	r2, r2, #1
 800ca1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2220      	movs	r2, #32
 800ca32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e00f      	b.n	800ca62 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	69da      	ldr	r2, [r3, #28]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	bf0c      	ite	eq
 800ca52:	2301      	moveq	r3, #1
 800ca54:	2300      	movne	r3, #0
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	461a      	mov	r2, r3
 800ca5a:	79fb      	ldrb	r3, [r7, #7]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d08d      	beq.n	800c97c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca80:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	6812      	ldr	r2, [r2, #0]
 800ca8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca90:	f023 0301 	bic.w	r3, r3, #1
 800ca94:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d107      	bne.n	800caae <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f022 0210 	bic.w	r2, r2, #16
 800caac:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cac2:	bf00      	nop
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f7ff fb7b 	bl	800c1e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b082      	sub	sp, #8
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb10:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2220      	movs	r2, #32
 800cb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fb57 	bl	800c1d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb26:	bf00      	nop
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb36:	bf00      	nop
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b085      	sub	sp, #20
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d101      	bne.n	800cb80 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	e027      	b.n	800cbd0 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2224      	movs	r2, #36	; 0x24
 800cb8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f022 0201 	bic.w	r2, r2, #1
 800cba6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cbae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68fa      	ldr	r2, [r7, #12]
 800cbbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2220      	movs	r2, #32
 800cbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d101      	bne.n	800cbf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbf0:	2302      	movs	r3, #2
 800cbf2:	e02d      	b.n	800cc50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2224      	movs	r2, #36	; 0x24
 800cc00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f022 0201 	bic.w	r2, r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f84f 	bl	800ccd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2220      	movs	r2, #32
 800cc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d101      	bne.n	800cc70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	e02d      	b.n	800cccc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2201      	movs	r2, #1
 800cc74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2224      	movs	r2, #36	; 0x24
 800cc7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f022 0201 	bic.w	r2, r2, #1
 800cc96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	683a      	ldr	r2, [r7, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f811 	bl	800ccd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2220      	movs	r2, #32
 800ccbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d108      	bne.n	800ccf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccf4:	e031      	b.n	800cd5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccf6:	2308      	movs	r3, #8
 800ccf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccfa:	2308      	movs	r3, #8
 800ccfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	0e5b      	lsrs	r3, r3, #25
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	f003 0307 	and.w	r3, r3, #7
 800cd0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	689b      	ldr	r3, [r3, #8]
 800cd14:	0f5b      	lsrs	r3, r3, #29
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	f003 0307 	and.w	r3, r3, #7
 800cd1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd1e:	7bbb      	ldrb	r3, [r7, #14]
 800cd20:	7b3a      	ldrb	r2, [r7, #12]
 800cd22:	4911      	ldr	r1, [pc, #68]	; (800cd68 <UARTEx_SetNbDataToProcess+0x94>)
 800cd24:	5c8a      	ldrb	r2, [r1, r2]
 800cd26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd2a:	7b3a      	ldrb	r2, [r7, #12]
 800cd2c:	490f      	ldr	r1, [pc, #60]	; (800cd6c <UARTEx_SetNbDataToProcess+0x98>)
 800cd2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd30:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	7b7a      	ldrb	r2, [r7, #13]
 800cd40:	4909      	ldr	r1, [pc, #36]	; (800cd68 <UARTEx_SetNbDataToProcess+0x94>)
 800cd42:	5c8a      	ldrb	r2, [r1, r2]
 800cd44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd48:	7b7a      	ldrb	r2, [r7, #13]
 800cd4a:	4908      	ldr	r1, [pc, #32]	; (800cd6c <UARTEx_SetNbDataToProcess+0x98>)
 800cd4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd5a:	bf00      	nop
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	08014b38 	.word	0x08014b38
 800cd6c:	08014b40 	.word	0x08014b40

0800cd70 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cd70:	b084      	sub	sp, #16
 800cd72:	b480      	push	{r7}
 800cd74:	b085      	sub	sp, #20
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	f107 001c 	add.w	r0, r7, #28
 800cd7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800cd86:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800cd88:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cd8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800cd8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800cd92:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800cd96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	4b07      	ldr	r3, [pc, #28]	; (800cdc0 <SDMMC_Init+0x50>)
 800cda4:	4013      	ands	r3, r2
 800cda6:	68fa      	ldr	r2, [r7, #12]
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	b004      	add	sp, #16
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	ffc02c00 	.word	0xffc02c00

0800cdc4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f043 0203 	orr.w	r2, r3, #3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ce14:	2002      	movs	r0, #2
 800ce16:	f7f5 fae3 	bl	80023e0 <HAL_Delay>

  return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 0303 	and.w	r3, r3, #3
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	370c      	adds	r7, #12
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce5e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ce64:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ce6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	68da      	ldr	r2, [r3, #12]
 800ce76:	4b06      	ldr	r3, [pc, #24]	; (800ce90 <SDMMC_SendCommand+0x50>)
 800ce78:	4013      	ands	r3, r2
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	fffee0c0 	.word	0xfffee0c0

0800ce94 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	691b      	ldr	r3, [r3, #16]
 800cea0:	b2db      	uxtb	r3, r3
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b085      	sub	sp, #20
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
 800ceb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3314      	adds	r3, #20
 800cebc:	461a      	mov	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	4413      	add	r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cefa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cf00:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cf06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	431a      	orrs	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cf1e:	2300      	movs	r3, #0

}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cf3a:	2310      	movs	r3, #16
 800cf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf44:	2300      	movs	r3, #0
 800cf46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf4e:	f107 0308 	add.w	r3, r7, #8
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff ff73 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800cf5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf5e:	2110      	movs	r1, #16
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fa7b 	bl	800d45c <SDMMC_GetCmdResp1>
 800cf66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf68:	69fb      	ldr	r3, [r7, #28]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3720      	adds	r7, #32
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b088      	sub	sp, #32
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf80:	2311      	movs	r3, #17
 800cf82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cf84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cf8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cf94:	f107 0308 	add.w	r3, r7, #8
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff ff50 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cfa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfa4:	2111      	movs	r1, #17
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fa58 	bl	800d45c <SDMMC_GetCmdResp1>
 800cfac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfae:	69fb      	ldr	r3, [r7, #28]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cfc6:	2312      	movs	r3, #18
 800cfc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cfca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cfd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7ff ff2d 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cfe6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfea:	2112      	movs	r1, #18
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fa35 	bl	800d45c <SDMMC_GetCmdResp1>
 800cff2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cff4:	69fb      	ldr	r3, [r7, #28]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3720      	adds	r7, #32
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b088      	sub	sp, #32
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d00c:	2318      	movs	r3, #24
 800d00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d016:	2300      	movs	r3, #0
 800d018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d01a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d01e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d020:	f107 0308 	add.w	r3, r7, #8
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff ff0a 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d030:	2118      	movs	r1, #24
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fa12 	bl	800d45c <SDMMC_GetCmdResp1>
 800d038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03a:	69fb      	ldr	r3, [r7, #28]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d052:	2319      	movs	r3, #25
 800d054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d05a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d05c:	2300      	movs	r3, #0
 800d05e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d064:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d066:	f107 0308 	add.w	r3, r7, #8
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff fee7 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d072:	f241 3288 	movw	r2, #5000	; 0x1388
 800d076:	2119      	movs	r1, #25
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f9ef 	bl	800d45c <SDMMC_GetCmdResp1>
 800d07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d080:	69fb      	ldr	r3, [r7, #28]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
	...

0800d08c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b088      	sub	sp, #32
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d094:	2300      	movs	r3, #0
 800d096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d098:	230c      	movs	r3, #12
 800d09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d09c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d0a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0aa:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d0c4:	f107 0308 	add.w	r3, r7, #8
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff feb8 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d0d0:	4a08      	ldr	r2, [pc, #32]	; (800d0f4 <SDMMC_CmdStopTransfer+0x68>)
 800d0d2:	210c      	movs	r1, #12
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f9c1 	bl	800d45c <SDMMC_GetCmdResp1>
 800d0da:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800d0e8:	69fb      	ldr	r3, [r7, #28]
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3720      	adds	r7, #32
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	05f5e100 	.word	0x05f5e100

0800d0f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	; 0x28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d108:	2307      	movs	r3, #7
 800d10a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d10c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d110:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d112:	2300      	movs	r3, #0
 800d114:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d11a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d11c:	f107 0310 	add.w	r3, r7, #16
 800d120:	4619      	mov	r1, r3
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f7ff fe8c 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d128:	f241 3288 	movw	r2, #5000	; 0x1388
 800d12c:	2107      	movs	r1, #7
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 f994 	bl	800d45c <SDMMC_GetCmdResp1>
 800d134:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3728      	adds	r7, #40	; 0x28
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d148:	2300      	movs	r3, #0
 800d14a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d14c:	2300      	movs	r3, #0
 800d14e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d150:	2300      	movs	r3, #0
 800d152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d154:	2300      	movs	r3, #0
 800d156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d15c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d15e:	f107 0308 	add.w	r3, r7, #8
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f7ff fe6b 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fbb8 	bl	800d8e0 <SDMMC_GetCmdError>
 800d170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d172:	69fb      	ldr	r3, [r7, #28]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3720      	adds	r7, #32
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b088      	sub	sp, #32
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d184:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d18a:	2308      	movs	r3, #8
 800d18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d18e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d192:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d194:	2300      	movs	r3, #0
 800d196:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d19c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d19e:	f107 0308 	add.w	r3, r7, #8
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f7ff fe4b 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fb4a 	bl	800d844 <SDMMC_GetCmdResp7>
 800d1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1b2:	69fb      	ldr	r3, [r7, #28]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3720      	adds	r7, #32
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b088      	sub	sp, #32
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d1ca:	2337      	movs	r3, #55	; 0x37
 800d1cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1de:	f107 0308 	add.w	r3, r7, #8
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7ff fe2b 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ee:	2137      	movs	r1, #55	; 0x37
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f933 	bl	800d45c <SDMMC_GetCmdResp1>
 800d1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1f8:	69fb      	ldr	r3, [r7, #28]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b088      	sub	sp, #32
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d210:	2329      	movs	r3, #41	; 0x29
 800d212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d214:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d21a:	2300      	movs	r3, #0
 800d21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d21e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff fe08 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fa4f 	bl	800d6d4 <SDMMC_GetCmdResp3>
 800d236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d238:	69fb      	ldr	r3, [r7, #28]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3720      	adds	r7, #32
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b088      	sub	sp, #32
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d250:	2306      	movs	r3, #6
 800d252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d25e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d262:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d264:	f107 0308 	add.w	r3, r7, #8
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff fde8 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d270:	f241 3288 	movw	r2, #5000	; 0x1388
 800d274:	2106      	movs	r1, #6
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 f8f0 	bl	800d45c <SDMMC_GetCmdResp1>
 800d27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d27e:	69fb      	ldr	r3, [r7, #28]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3720      	adds	r7, #32
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b088      	sub	sp, #32
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d290:	2300      	movs	r3, #0
 800d292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d294:	2333      	movs	r3, #51	; 0x33
 800d296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2a8:	f107 0308 	add.w	r3, r7, #8
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff fdc6 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b8:	2133      	movs	r1, #51	; 0x33
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f8ce 	bl	800d45c <SDMMC_GetCmdResp1>
 800d2c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3720      	adds	r7, #32
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b088      	sub	sp, #32
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d2d8:	2302      	movs	r3, #2
 800d2da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d2dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d2e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ec:	f107 0308 	add.w	r3, r7, #8
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff fda4 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f9a1 	bl	800d640 <SDMMC_GetCmdResp2>
 800d2fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d300:	69fb      	ldr	r3, [r7, #28]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b088      	sub	sp, #32
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d318:	2309      	movs	r3, #9
 800d31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d31c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d322:	2300      	movs	r3, #0
 800d324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d32a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d32c:	f107 0308 	add.w	r3, r7, #8
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff fd84 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 f981 	bl	800d640 <SDMMC_GetCmdResp2>
 800d33e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d340:	69fb      	ldr	r3, [r7, #28]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3720      	adds	r7, #32
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b088      	sub	sp, #32
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d358:	2303      	movs	r3, #3
 800d35a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d35c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d36a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d36c:	f107 0308 	add.w	r3, r7, #8
 800d370:	4619      	mov	r1, r3
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f7ff fd64 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	2103      	movs	r1, #3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f9e9 	bl	800d754 <SDMMC_GetCmdResp6>
 800d382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d384:	69fb      	ldr	r3, [r7, #28]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3720      	adds	r7, #32
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b088      	sub	sp, #32
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d39c:	230d      	movs	r3, #13
 800d39e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3b0:	f107 0308 	add.w	r3, r7, #8
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff fd42 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c0:	210d      	movs	r1, #13
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f84a 	bl	800d45c <SDMMC_GetCmdResp1>
 800d3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d3e0:	230d      	movs	r3, #13
 800d3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fd20 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d400:	f241 3288 	movw	r2, #5000	; 0x1388
 800d404:	210d      	movs	r1, #13
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f828 	bl	800d45c <SDMMC_GetCmdResp1>
 800d40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40e:	69fb      	ldr	r3, [r7, #28]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3720      	adds	r7, #32
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d420:	2300      	movs	r3, #0
 800d422:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d424:	230b      	movs	r3, #11
 800d426:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d42c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d436:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d438:	f107 0308 	add.w	r3, r7, #8
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff fcfe 	bl	800ce40 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d444:	f241 3288 	movw	r2, #5000	; 0x1388
 800d448:	210b      	movs	r1, #11
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f806 	bl	800d45c <SDMMC_GetCmdResp1>
 800d450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d452:	69fb      	ldr	r3, [r7, #28]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3720      	adds	r7, #32
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b088      	sub	sp, #32
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	460b      	mov	r3, r1
 800d466:	607a      	str	r2, [r7, #4]
 800d468:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d46a:	4b70      	ldr	r3, [pc, #448]	; (800d62c <SDMMC_GetCmdResp1+0x1d0>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a70      	ldr	r2, [pc, #448]	; (800d630 <SDMMC_GetCmdResp1+0x1d4>)
 800d470:	fba2 2303 	umull	r2, r3, r2, r3
 800d474:	0a5a      	lsrs	r2, r3, #9
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	fb02 f303 	mul.w	r3, r2, r3
 800d47c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	1e5a      	subs	r2, r3, #1
 800d482:	61fa      	str	r2, [r7, #28]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d102      	bne.n	800d48e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d48c:	e0c9      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d492:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d494:	69ba      	ldr	r2, [r7, #24]
 800d496:	4b67      	ldr	r3, [pc, #412]	; (800d634 <SDMMC_GetCmdResp1+0x1d8>)
 800d498:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0ef      	beq.n	800d47e <SDMMC_GetCmdResp1+0x22>
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d1ea      	bne.n	800d47e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ac:	f003 0304 	and.w	r3, r3, #4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2204      	movs	r2, #4
 800d4b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4ba:	2304      	movs	r3, #4
 800d4bc:	e0b1      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c2:	f003 0301 	and.w	r3, r3, #1
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d004      	beq.n	800d4d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e0a6      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	4a58      	ldr	r2, [pc, #352]	; (800d638 <SDMMC_GetCmdResp1+0x1dc>)
 800d4d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f7ff fcda 	bl	800ce94 <SDMMC_GetCommandResponse>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	7afb      	ldrb	r3, [r7, #11]
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d001      	beq.n	800d4ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e099      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f7ff fcdc 	bl	800ceae <SDMMC_GetResponse>
 800d4f6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	4b50      	ldr	r3, [pc, #320]	; (800d63c <SDMMC_GetCmdResp1+0x1e0>)
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d101      	bne.n	800d506 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
 800d504:	e08d      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	da02      	bge.n	800d512 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d50c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d510:	e087      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	e080      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d526:	2b00      	cmp	r3, #0
 800d528:	d001      	beq.n	800d52e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d52a:	2380      	movs	r3, #128	; 0x80
 800d52c:	e079      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d53c:	e071      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d54c:	e069      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d55c:	e061      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d56c:	e059      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d57c:	e051      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d58c:	e049      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d59c:	e041      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d5a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5ac:	e039      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d5b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d5bc:	e031      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d5c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d5cc:	e029      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d002      	beq.n	800d5de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d5d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d5dc:	e021      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d5e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d5ec:	e019      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d5f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d5fc:	e011      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d608:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d60c:	e009      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	f003 0308 	and.w	r3, r3, #8
 800d614:	2b00      	cmp	r3, #0
 800d616:	d002      	beq.n	800d61e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d618:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d61c:	e001      	b.n	800d622 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d61e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d622:	4618      	mov	r0, r3
 800d624:	3720      	adds	r7, #32
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20000000 	.word	0x20000000
 800d630:	10624dd3 	.word	0x10624dd3
 800d634:	00200045 	.word	0x00200045
 800d638:	002000c5 	.word	0x002000c5
 800d63c:	fdffe008 	.word	0xfdffe008

0800d640 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d648:	4b1f      	ldr	r3, [pc, #124]	; (800d6c8 <SDMMC_GetCmdResp2+0x88>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a1f      	ldr	r2, [pc, #124]	; (800d6cc <SDMMC_GetCmdResp2+0x8c>)
 800d64e:	fba2 2303 	umull	r2, r3, r2, r3
 800d652:	0a5b      	lsrs	r3, r3, #9
 800d654:	f241 3288 	movw	r2, #5000	; 0x1388
 800d658:	fb02 f303 	mul.w	r3, r2, r3
 800d65c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	1e5a      	subs	r2, r3, #1
 800d662:	60fa      	str	r2, [r7, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d668:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d66c:	e026      	b.n	800d6bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d672:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d0ef      	beq.n	800d65e <SDMMC_GetCmdResp2+0x1e>
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1ea      	bne.n	800d65e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b00      	cmp	r3, #0
 800d692:	d004      	beq.n	800d69e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2204      	movs	r2, #4
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d69a:	2304      	movs	r3, #4
 800d69c:	e00e      	b.n	800d6bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d004      	beq.n	800d6b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e003      	b.n	800d6bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <SDMMC_GetCmdResp2+0x90>)
 800d6b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	20000000 	.word	0x20000000
 800d6cc:	10624dd3 	.word	0x10624dd3
 800d6d0:	002000c5 	.word	0x002000c5

0800d6d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6dc:	4b1a      	ldr	r3, [pc, #104]	; (800d748 <SDMMC_GetCmdResp3+0x74>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a1a      	ldr	r2, [pc, #104]	; (800d74c <SDMMC_GetCmdResp3+0x78>)
 800d6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6e6:	0a5b      	lsrs	r3, r3, #9
 800d6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6ec:	fb02 f303 	mul.w	r3, r2, r3
 800d6f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	1e5a      	subs	r2, r3, #1
 800d6f6:	60fa      	str	r2, [r7, #12]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d102      	bne.n	800d702 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d700:	e01b      	b.n	800d73a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d706:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0ef      	beq.n	800d6f2 <SDMMC_GetCmdResp3+0x1e>
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1ea      	bne.n	800d6f2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d720:	f003 0304 	and.w	r3, r3, #4
 800d724:	2b00      	cmp	r3, #0
 800d726:	d004      	beq.n	800d732 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2204      	movs	r2, #4
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d72e:	2304      	movs	r3, #4
 800d730:	e003      	b.n	800d73a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a06      	ldr	r2, [pc, #24]	; (800d750 <SDMMC_GetCmdResp3+0x7c>)
 800d736:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	20000000 	.word	0x20000000
 800d74c:	10624dd3 	.word	0x10624dd3
 800d750:	002000c5 	.word	0x002000c5

0800d754 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b088      	sub	sp, #32
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	460b      	mov	r3, r1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d762:	4b35      	ldr	r3, [pc, #212]	; (800d838 <SDMMC_GetCmdResp6+0xe4>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a35      	ldr	r2, [pc, #212]	; (800d83c <SDMMC_GetCmdResp6+0xe8>)
 800d768:	fba2 2303 	umull	r2, r3, r2, r3
 800d76c:	0a5b      	lsrs	r3, r3, #9
 800d76e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d772:	fb02 f303 	mul.w	r3, r2, r3
 800d776:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	1e5a      	subs	r2, r3, #1
 800d77c:	61fa      	str	r2, [r7, #28]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d102      	bne.n	800d788 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d782:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d786:	e052      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d794:	2b00      	cmp	r3, #0
 800d796:	d0ef      	beq.n	800d778 <SDMMC_GetCmdResp6+0x24>
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1ea      	bne.n	800d778 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a6:	f003 0304 	and.w	r3, r3, #4
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d004      	beq.n	800d7b8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2204      	movs	r2, #4
 800d7b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7b4:	2304      	movs	r3, #4
 800d7b6:	e03a      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d004      	beq.n	800d7ce <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e02f      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7ff fb60 	bl	800ce94 <SDMMC_GetCommandResponse>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	7afb      	ldrb	r3, [r7, #11]
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d001      	beq.n	800d7e2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e025      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4a16      	ldr	r2, [pc, #88]	; (800d840 <SDMMC_GetCmdResp6+0xec>)
 800d7e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d7e8:	2100      	movs	r1, #0
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f7ff fb5f 	bl	800ceae <SDMMC_GetResponse>
 800d7f0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	0c1b      	lsrs	r3, r3, #16
 800d800:	b29a      	uxth	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800d806:	2300      	movs	r3, #0
 800d808:	e011      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d818:	e009      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d828:	e001      	b.n	800d82e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d82a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3720      	adds	r7, #32
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20000000 	.word	0x20000000
 800d83c:	10624dd3 	.word	0x10624dd3
 800d840:	002000c5 	.word	0x002000c5

0800d844 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d84c:	4b22      	ldr	r3, [pc, #136]	; (800d8d8 <SDMMC_GetCmdResp7+0x94>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a22      	ldr	r2, [pc, #136]	; (800d8dc <SDMMC_GetCmdResp7+0x98>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	0a5b      	lsrs	r3, r3, #9
 800d858:	f241 3288 	movw	r2, #5000	; 0x1388
 800d85c:	fb02 f303 	mul.w	r3, r2, r3
 800d860:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	1e5a      	subs	r2, r3, #1
 800d866:	60fa      	str	r2, [r7, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d86c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d870:	e02c      	b.n	800d8cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d876:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0ef      	beq.n	800d862 <SDMMC_GetCmdResp7+0x1e>
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1ea      	bne.n	800d862 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d890:	f003 0304 	and.w	r3, r3, #4
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2204      	movs	r2, #4
 800d89c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d89e:	2304      	movs	r3, #4
 800d8a0:	e014      	b.n	800d8cc <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d004      	beq.n	800d8b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e009      	b.n	800d8cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d002      	beq.n	800d8ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2240      	movs	r2, #64	; 0x40
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d8ca:	2300      	movs	r3, #0

}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	20000000 	.word	0x20000000
 800d8dc:	10624dd3 	.word	0x10624dd3

0800d8e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8e8:	4b11      	ldr	r3, [pc, #68]	; (800d930 <SDMMC_GetCmdError+0x50>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a11      	ldr	r2, [pc, #68]	; (800d934 <SDMMC_GetCmdError+0x54>)
 800d8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f2:	0a5b      	lsrs	r3, r3, #9
 800d8f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f8:	fb02 f303 	mul.w	r3, r2, r3
 800d8fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	1e5a      	subs	r2, r3, #1
 800d902:	60fa      	str	r2, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d90c:	e009      	b.n	800d922 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d916:	2b00      	cmp	r3, #0
 800d918:	d0f1      	beq.n	800d8fe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	4a06      	ldr	r2, [pc, #24]	; (800d938 <SDMMC_GetCmdError+0x58>)
 800d91e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20000000 	.word	0x20000000
 800d934:	10624dd3 	.word	0x10624dd3
 800d938:	002000c5 	.word	0x002000c5

0800d93c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d93c:	b084      	sub	sp, #16
 800d93e:	b580      	push	{r7, lr}
 800d940:	b084      	sub	sp, #16
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	f107 001c 	add.w	r0, r7, #28
 800d94a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f001 f9ce 	bl	800ecfc <USB_CoreReset>
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d966:	2b00      	cmp	r3, #0
 800d968:	d106      	bne.n	800d978 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	639a      	str	r2, [r3, #56]	; 0x38
 800d976:	e005      	b.n	800d984 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d984:	7bfb      	ldrb	r3, [r7, #15]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d990:	b004      	add	sp, #16
 800d992:	4770      	bx	lr

0800d994 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d994:	b480      	push	{r7}
 800d996:	b087      	sub	sp, #28
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d165      	bne.n	800da74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	4a3e      	ldr	r2, [pc, #248]	; (800daa4 <USB_SetTurnaroundTime+0x110>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d906      	bls.n	800d9be <USB_SetTurnaroundTime+0x2a>
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	4a3d      	ldr	r2, [pc, #244]	; (800daa8 <USB_SetTurnaroundTime+0x114>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d202      	bcs.n	800d9be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d9b8:	230f      	movs	r3, #15
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	e05c      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	4a39      	ldr	r2, [pc, #228]	; (800daa8 <USB_SetTurnaroundTime+0x114>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d306      	bcc.n	800d9d4 <USB_SetTurnaroundTime+0x40>
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	4a38      	ldr	r2, [pc, #224]	; (800daac <USB_SetTurnaroundTime+0x118>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d202      	bcs.n	800d9d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d9ce:	230e      	movs	r3, #14
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	e051      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	4a35      	ldr	r2, [pc, #212]	; (800daac <USB_SetTurnaroundTime+0x118>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d306      	bcc.n	800d9ea <USB_SetTurnaroundTime+0x56>
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	4a34      	ldr	r2, [pc, #208]	; (800dab0 <USB_SetTurnaroundTime+0x11c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d202      	bcs.n	800d9ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d9e4:	230d      	movs	r3, #13
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	e046      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	4a30      	ldr	r2, [pc, #192]	; (800dab0 <USB_SetTurnaroundTime+0x11c>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d306      	bcc.n	800da00 <USB_SetTurnaroundTime+0x6c>
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	4a2f      	ldr	r2, [pc, #188]	; (800dab4 <USB_SetTurnaroundTime+0x120>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d802      	bhi.n	800da00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d9fa:	230c      	movs	r3, #12
 800d9fc:	617b      	str	r3, [r7, #20]
 800d9fe:	e03b      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	4a2c      	ldr	r2, [pc, #176]	; (800dab4 <USB_SetTurnaroundTime+0x120>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d906      	bls.n	800da16 <USB_SetTurnaroundTime+0x82>
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	4a2b      	ldr	r2, [pc, #172]	; (800dab8 <USB_SetTurnaroundTime+0x124>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d802      	bhi.n	800da16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800da10:	230b      	movs	r3, #11
 800da12:	617b      	str	r3, [r7, #20]
 800da14:	e030      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	4a27      	ldr	r2, [pc, #156]	; (800dab8 <USB_SetTurnaroundTime+0x124>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d906      	bls.n	800da2c <USB_SetTurnaroundTime+0x98>
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	4a26      	ldr	r2, [pc, #152]	; (800dabc <USB_SetTurnaroundTime+0x128>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d802      	bhi.n	800da2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800da26:	230a      	movs	r3, #10
 800da28:	617b      	str	r3, [r7, #20]
 800da2a:	e025      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	4a23      	ldr	r2, [pc, #140]	; (800dabc <USB_SetTurnaroundTime+0x128>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d906      	bls.n	800da42 <USB_SetTurnaroundTime+0xae>
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	4a22      	ldr	r2, [pc, #136]	; (800dac0 <USB_SetTurnaroundTime+0x12c>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d202      	bcs.n	800da42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800da3c:	2309      	movs	r3, #9
 800da3e:	617b      	str	r3, [r7, #20]
 800da40:	e01a      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	4a1e      	ldr	r2, [pc, #120]	; (800dac0 <USB_SetTurnaroundTime+0x12c>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d306      	bcc.n	800da58 <USB_SetTurnaroundTime+0xc4>
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	4a1d      	ldr	r2, [pc, #116]	; (800dac4 <USB_SetTurnaroundTime+0x130>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d802      	bhi.n	800da58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800da52:	2308      	movs	r3, #8
 800da54:	617b      	str	r3, [r7, #20]
 800da56:	e00f      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	4a1a      	ldr	r2, [pc, #104]	; (800dac4 <USB_SetTurnaroundTime+0x130>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d906      	bls.n	800da6e <USB_SetTurnaroundTime+0xda>
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	4a19      	ldr	r2, [pc, #100]	; (800dac8 <USB_SetTurnaroundTime+0x134>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d202      	bcs.n	800da6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800da68:	2307      	movs	r3, #7
 800da6a:	617b      	str	r3, [r7, #20]
 800da6c:	e004      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800da6e:	2306      	movs	r3, #6
 800da70:	617b      	str	r3, [r7, #20]
 800da72:	e001      	b.n	800da78 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800da74:	2309      	movs	r3, #9
 800da76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	68da      	ldr	r2, [r3, #12]
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	029b      	lsls	r3, r3, #10
 800da8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800da90:	431a      	orrs	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800da96:	2300      	movs	r3, #0
}
 800da98:	4618      	mov	r0, r3
 800da9a:	371c      	adds	r7, #28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr
 800daa4:	00d8acbf 	.word	0x00d8acbf
 800daa8:	00e4e1c0 	.word	0x00e4e1c0
 800daac:	00f42400 	.word	0x00f42400
 800dab0:	01067380 	.word	0x01067380
 800dab4:	011a499f 	.word	0x011a499f
 800dab8:	01312cff 	.word	0x01312cff
 800dabc:	014ca43f 	.word	0x014ca43f
 800dac0:	016e3600 	.word	0x016e3600
 800dac4:	01a6ab1f 	.word	0x01a6ab1f
 800dac8:	01e84800 	.word	0x01e84800

0800dacc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	f043 0201 	orr.w	r2, r3, #1
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	f023 0201 	bic.w	r2, r3, #1
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db28:	78fb      	ldrb	r3, [r7, #3]
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d106      	bne.n	800db3c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	60da      	str	r2, [r3, #12]
 800db3a:	e00b      	b.n	800db54 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800db3c:	78fb      	ldrb	r3, [r7, #3]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d106      	bne.n	800db50 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	60da      	str	r2, [r3, #12]
 800db4e:	e001      	b.n	800db54 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	e003      	b.n	800db5c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800db54:	2032      	movs	r0, #50	; 0x32
 800db56:	f7f4 fc43 	bl	80023e0 <HAL_Delay>

  return HAL_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db64:	b084      	sub	sp, #16
 800db66:	b580      	push	{r7, lr}
 800db68:	b086      	sub	sp, #24
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800db72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db7e:	2300      	movs	r3, #0
 800db80:	613b      	str	r3, [r7, #16]
 800db82:	e009      	b.n	800db98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	3340      	adds	r3, #64	; 0x40
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	4413      	add	r3, r2
 800db8e:	2200      	movs	r2, #0
 800db90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	3301      	adds	r3, #1
 800db96:	613b      	str	r3, [r7, #16]
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	2b0e      	cmp	r3, #14
 800db9c:	d9f2      	bls.n	800db84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d11c      	bne.n	800dbde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbb2:	f043 0302 	orr.w	r3, r3, #2
 800dbb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	601a      	str	r2, [r3, #0]
 800dbdc:	e005      	b.n	800dbea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc04:	461a      	mov	r2, r3
 800dc06:	680b      	ldr	r3, [r1, #0]
 800dc08:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc0a:	2103      	movs	r1, #3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f93d 	bl	800de8c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc12:	2110      	movs	r1, #16
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f8f1 	bl	800ddfc <USB_FlushTxFifo>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f90f 	bl	800de48 <USB_FlushRxFifo>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc46:	461a      	mov	r2, r3
 800dc48:	2300      	movs	r3, #0
 800dc4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc52:	461a      	mov	r2, r3
 800dc54:	2300      	movs	r3, #0
 800dc56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc58:	2300      	movs	r3, #0
 800dc5a:	613b      	str	r3, [r7, #16]
 800dc5c:	e043      	b.n	800dce6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	015a      	lsls	r2, r3, #5
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	4413      	add	r3, r2
 800dc66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc74:	d118      	bne.n	800dca8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d10a      	bne.n	800dc92 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc88:	461a      	mov	r2, r3
 800dc8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	e013      	b.n	800dcba <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	015a      	lsls	r2, r3, #5
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	4413      	add	r3, r2
 800dc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc9e:	461a      	mov	r2, r3
 800dca0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	e008      	b.n	800dcba <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	015a      	lsls	r2, r3, #5
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	2300      	movs	r3, #0
 800dcca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd8:	461a      	mov	r2, r3
 800dcda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dcde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	3301      	adds	r3, #1
 800dce4:	613b      	str	r3, [r7, #16]
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	693a      	ldr	r2, [r7, #16]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d3b7      	bcc.n	800dc5e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcee:	2300      	movs	r3, #0
 800dcf0:	613b      	str	r3, [r7, #16]
 800dcf2:	e043      	b.n	800dd7c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	015a      	lsls	r2, r3, #5
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd0a:	d118      	bne.n	800dd3e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d10a      	bne.n	800dd28 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	015a      	lsls	r2, r3, #5
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4413      	add	r3, r2
 800dd1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1e:	461a      	mov	r2, r3
 800dd20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd24:	6013      	str	r3, [r2, #0]
 800dd26:	e013      	b.n	800dd50 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd34:	461a      	mov	r2, r3
 800dd36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd3a:	6013      	str	r3, [r2, #0]
 800dd3c:	e008      	b.n	800dd50 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	2300      	movs	r3, #0
 800dd60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	015a      	lsls	r2, r3, #5
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	4413      	add	r3, r2
 800dd6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd6e:	461a      	mov	r2, r3
 800dd70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	613b      	str	r3, [r7, #16]
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	693a      	ldr	r2, [r7, #16]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d3b7      	bcc.n	800dcf4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd8a:	691b      	ldr	r3, [r3, #16]
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dda4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	f043 0210 	orr.w	r2, r3, #16
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	699a      	ldr	r2, [r3, #24]
 800ddb6:	4b10      	ldr	r3, [pc, #64]	; (800ddf8 <USB_DevInit+0x294>)
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	699b      	ldr	r3, [r3, #24]
 800ddc8:	f043 0208 	orr.w	r2, r3, #8
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d107      	bne.n	800dde6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	699b      	ldr	r3, [r3, #24]
 800ddda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddde:	f043 0304 	orr.w	r3, r3, #4
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	3718      	adds	r7, #24
 800ddec:	46bd      	mov	sp, r7
 800ddee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddf2:	b004      	add	sp, #16
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	803c3800 	.word	0x803c3800

0800ddfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800de06:	2300      	movs	r3, #0
 800de08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	019b      	lsls	r3, r3, #6
 800de0e:	f043 0220 	orr.w	r2, r3, #32
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	3301      	adds	r3, #1
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	4a09      	ldr	r2, [pc, #36]	; (800de44 <USB_FlushTxFifo+0x48>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d901      	bls.n	800de28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800de24:	2303      	movs	r3, #3
 800de26:	e006      	b.n	800de36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	f003 0320 	and.w	r3, r3, #32
 800de30:	2b20      	cmp	r3, #32
 800de32:	d0f0      	beq.n	800de16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800de34:	2300      	movs	r3, #0
}
 800de36:	4618      	mov	r0, r3
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	00030d40 	.word	0x00030d40

0800de48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2210      	movs	r2, #16
 800de58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3301      	adds	r3, #1
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4a09      	ldr	r2, [pc, #36]	; (800de88 <USB_FlushRxFifo+0x40>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d901      	bls.n	800de6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800de68:	2303      	movs	r3, #3
 800de6a:	e006      	b.n	800de7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	f003 0310 	and.w	r3, r3, #16
 800de74:	2b10      	cmp	r3, #16
 800de76:	d0f0      	beq.n	800de5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3714      	adds	r7, #20
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	00030d40 	.word	0x00030d40

0800de8c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	460b      	mov	r3, r1
 800de96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	78fb      	ldrb	r3, [r7, #3]
 800dea6:	68f9      	ldr	r1, [r7, #12]
 800dea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800deac:	4313      	orrs	r3, r2
 800deae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800deb0:	2300      	movs	r3, #0
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3714      	adds	r7, #20
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr

0800debe <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800debe:	b480      	push	{r7}
 800dec0:	b087      	sub	sp, #28
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	f003 0306 	and.w	r3, r3, #6
 800ded6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d002      	beq.n	800dee4 <USB_GetDevSpeed+0x26>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b06      	cmp	r3, #6
 800dee2:	d102      	bne.n	800deea <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800dee4:	2302      	movs	r3, #2
 800dee6:	75fb      	strb	r3, [r7, #23]
 800dee8:	e001      	b.n	800deee <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800deea:	230f      	movs	r3, #15
 800deec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800deee:	7dfb      	ldrb	r3, [r7, #23]
}
 800def0:	4618      	mov	r0, r3
 800def2:	371c      	adds	r7, #28
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	785b      	ldrb	r3, [r3, #1]
 800df14:	2b01      	cmp	r3, #1
 800df16:	d13a      	bne.n	800df8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df1e:	69da      	ldr	r2, [r3, #28]
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f003 030f 	and.w	r3, r3, #15
 800df28:	2101      	movs	r1, #1
 800df2a:	fa01 f303 	lsl.w	r3, r1, r3
 800df2e:	b29b      	uxth	r3, r3
 800df30:	68f9      	ldr	r1, [r7, #12]
 800df32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df36:	4313      	orrs	r3, r2
 800df38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	015a      	lsls	r2, r3, #5
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4413      	add	r3, r2
 800df42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d155      	bne.n	800dffc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	015a      	lsls	r2, r3, #5
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	4413      	add	r3, r2
 800df58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	78db      	ldrb	r3, [r3, #3]
 800df6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	059b      	lsls	r3, r3, #22
 800df72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df74:	4313      	orrs	r3, r2
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	0151      	lsls	r1, r2, #5
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	440a      	add	r2, r1
 800df7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	e036      	b.n	800dffc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df94:	69da      	ldr	r2, [r3, #28]
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	f003 030f 	and.w	r3, r3, #15
 800df9e:	2101      	movs	r1, #1
 800dfa0:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa4:	041b      	lsls	r3, r3, #16
 800dfa6:	68f9      	ldr	r1, [r7, #12]
 800dfa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfac:	4313      	orrs	r3, r2
 800dfae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	015a      	lsls	r2, r3, #5
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d11a      	bne.n	800dffc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	78db      	ldrb	r3, [r3, #3]
 800dfe0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfe2:	430b      	orrs	r3, r1
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	0151      	lsls	r1, r2, #5
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	440a      	add	r2, r1
 800dfee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dffa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dffc:	2300      	movs	r3, #0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3714      	adds	r7, #20
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
	...

0800e00c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	785b      	ldrb	r3, [r3, #1]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d161      	bne.n	800e0ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	015a      	lsls	r2, r3, #5
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	4413      	add	r3, r2
 800e030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e03a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e03e:	d11f      	bne.n	800e080 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	015a      	lsls	r2, r3, #5
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	4413      	add	r3, r2
 800e048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	0151      	lsls	r1, r2, #5
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	440a      	add	r2, r1
 800e056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e05a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e05e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	015a      	lsls	r2, r3, #5
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	0151      	lsls	r1, r2, #5
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	440a      	add	r2, r1
 800e076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e07a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e07e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	f003 030f 	and.w	r3, r3, #15
 800e090:	2101      	movs	r1, #1
 800e092:	fa01 f303 	lsl.w	r3, r1, r3
 800e096:	b29b      	uxth	r3, r3
 800e098:	43db      	mvns	r3, r3
 800e09a:	68f9      	ldr	r1, [r7, #12]
 800e09c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0aa:	69da      	ldr	r2, [r3, #28]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	f003 030f 	and.w	r3, r3, #15
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	43db      	mvns	r3, r3
 800e0be:	68f9      	ldr	r1, [r7, #12]
 800e0c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	015a      	lsls	r2, r3, #5
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	0159      	lsls	r1, r3, #5
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	440b      	add	r3, r1
 800e0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	4b35      	ldr	r3, [pc, #212]	; (800e1bc <USB_DeactivateEndpoint+0x1b0>)
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	600b      	str	r3, [r1, #0]
 800e0ea:	e060      	b.n	800e1ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	015a      	lsls	r2, r3, #5
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e102:	d11f      	bne.n	800e144 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	015a      	lsls	r2, r3, #5
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	4413      	add	r3, r2
 800e10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	68ba      	ldr	r2, [r7, #8]
 800e114:	0151      	lsls	r1, r2, #5
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	440a      	add	r2, r1
 800e11a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e11e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e122:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	0151      	lsls	r1, r2, #5
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	440a      	add	r2, r1
 800e13a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e13e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e142:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e14a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	f003 030f 	and.w	r3, r3, #15
 800e154:	2101      	movs	r1, #1
 800e156:	fa01 f303 	lsl.w	r3, r1, r3
 800e15a:	041b      	lsls	r3, r3, #16
 800e15c:	43db      	mvns	r3, r3
 800e15e:	68f9      	ldr	r1, [r7, #12]
 800e160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e164:	4013      	ands	r3, r2
 800e166:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e16e:	69da      	ldr	r2, [r3, #28]
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f003 030f 	and.w	r3, r3, #15
 800e178:	2101      	movs	r1, #1
 800e17a:	fa01 f303 	lsl.w	r3, r1, r3
 800e17e:	041b      	lsls	r3, r3, #16
 800e180:	43db      	mvns	r3, r3
 800e182:	68f9      	ldr	r1, [r7, #12]
 800e184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e188:	4013      	ands	r3, r2
 800e18a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	015a      	lsls	r2, r3, #5
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	4413      	add	r3, r2
 800e194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	0159      	lsls	r1, r3, #5
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	440b      	add	r3, r1
 800e1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4b05      	ldr	r3, [pc, #20]	; (800e1c0 <USB_DeactivateEndpoint+0x1b4>)
 800e1aa:	4013      	ands	r3, r2
 800e1ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3714      	adds	r7, #20
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr
 800e1bc:	ec337800 	.word	0xec337800
 800e1c0:	eff37800 	.word	0xeff37800

0800e1c4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	785b      	ldrb	r3, [r3, #1]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	f040 810a 	bne.w	800e3f6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d132      	bne.n	800e250 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	015a      	lsls	r2, r3, #5
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f6:	691b      	ldr	r3, [r3, #16]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	0151      	lsls	r1, r2, #5
 800e1fc:	697a      	ldr	r2, [r7, #20]
 800e1fe:	440a      	add	r2, r1
 800e200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e204:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e208:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e20c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	015a      	lsls	r2, r3, #5
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	4413      	add	r3, r2
 800e216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e21a:	691b      	ldr	r3, [r3, #16]
 800e21c:	693a      	ldr	r2, [r7, #16]
 800e21e:	0151      	lsls	r1, r2, #5
 800e220:	697a      	ldr	r2, [r7, #20]
 800e222:	440a      	add	r2, r1
 800e224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e22c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	015a      	lsls	r2, r3, #5
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	4413      	add	r3, r2
 800e236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e23a:	691b      	ldr	r3, [r3, #16]
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	0151      	lsls	r1, r2, #5
 800e240:	697a      	ldr	r2, [r7, #20]
 800e242:	440a      	add	r2, r1
 800e244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e248:	0cdb      	lsrs	r3, r3, #19
 800e24a:	04db      	lsls	r3, r3, #19
 800e24c:	6113      	str	r3, [r2, #16]
 800e24e:	e074      	b.n	800e33a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e25c:	691b      	ldr	r3, [r3, #16]
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	0151      	lsls	r1, r2, #5
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	440a      	add	r2, r1
 800e266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e26a:	0cdb      	lsrs	r3, r3, #19
 800e26c:	04db      	lsls	r3, r3, #19
 800e26e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	015a      	lsls	r2, r3, #5
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	4413      	add	r3, r2
 800e278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	693a      	ldr	r2, [r7, #16]
 800e280:	0151      	lsls	r1, r2, #5
 800e282:	697a      	ldr	r2, [r7, #20]
 800e284:	440a      	add	r2, r1
 800e286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e28a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e28e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	015a      	lsls	r2, r3, #5
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	4413      	add	r3, r2
 800e29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2a0:	691a      	ldr	r2, [r3, #16]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	6959      	ldr	r1, [r3, #20]
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	440b      	add	r3, r1
 800e2ac:	1e59      	subs	r1, r3, #1
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800e2b6:	04d9      	lsls	r1, r3, #19
 800e2b8:	4baf      	ldr	r3, [pc, #700]	; (800e578 <USB_EPStartXfer+0x3b4>)
 800e2ba:	400b      	ands	r3, r1
 800e2bc:	6939      	ldr	r1, [r7, #16]
 800e2be:	0148      	lsls	r0, r1, #5
 800e2c0:	6979      	ldr	r1, [r7, #20]
 800e2c2:	4401      	add	r1, r0
 800e2c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d8:	691a      	ldr	r2, [r3, #16]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2e2:	6939      	ldr	r1, [r7, #16]
 800e2e4:	0148      	lsls	r0, r1, #5
 800e2e6:	6979      	ldr	r1, [r7, #20]
 800e2e8:	4401      	add	r1, r0
 800e2ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	78db      	ldrb	r3, [r3, #3]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d11f      	bne.n	800e33a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	015a      	lsls	r2, r3, #5
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	4413      	add	r3, r2
 800e302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	0151      	lsls	r1, r2, #5
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	440a      	add	r2, r1
 800e310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e314:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e318:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	0151      	lsls	r1, r2, #5
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	440a      	add	r2, r1
 800e330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e338:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	015a      	lsls	r2, r3, #5
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	4413      	add	r3, r2
 800e342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	693a      	ldr	r2, [r7, #16]
 800e34a:	0151      	lsls	r1, r2, #5
 800e34c:	697a      	ldr	r2, [r7, #20]
 800e34e:	440a      	add	r2, r1
 800e350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e358:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	78db      	ldrb	r3, [r3, #3]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d015      	beq.n	800e38e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	695b      	ldr	r3, [r3, #20]
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 8100 	beq.w	800e56c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	f003 030f 	and.w	r3, r3, #15
 800e37c:	2101      	movs	r1, #1
 800e37e:	fa01 f303 	lsl.w	r3, r1, r3
 800e382:	6979      	ldr	r1, [r7, #20]
 800e384:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e388:	4313      	orrs	r3, r2
 800e38a:	634b      	str	r3, [r1, #52]	; 0x34
 800e38c:	e0ee      	b.n	800e56c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d110      	bne.n	800e3c0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	015a      	lsls	r2, r3, #5
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	0151      	lsls	r1, r2, #5
 800e3b0:	697a      	ldr	r2, [r7, #20]
 800e3b2:	440a      	add	r2, r1
 800e3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e3bc:	6013      	str	r3, [r2, #0]
 800e3be:	e00f      	b.n	800e3e0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	0151      	lsls	r1, r2, #5
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	440a      	add	r2, r1
 800e3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3de:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	68d9      	ldr	r1, [r3, #12]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	781a      	ldrb	r2, [r3, #0]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f9e2 	bl	800e7b8 <USB_WritePacket>
 800e3f4:	e0ba      	b.n	800e56c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	015a      	lsls	r2, r3, #5
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	693a      	ldr	r2, [r7, #16]
 800e406:	0151      	lsls	r1, r2, #5
 800e408:	697a      	ldr	r2, [r7, #20]
 800e40a:	440a      	add	r2, r1
 800e40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e410:	0cdb      	lsrs	r3, r3, #19
 800e412:	04db      	lsls	r3, r3, #19
 800e414:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	015a      	lsls	r2, r3, #5
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	4413      	add	r3, r2
 800e41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	0151      	lsls	r1, r2, #5
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	440a      	add	r2, r1
 800e42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e430:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e434:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e438:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d123      	bne.n	800e48a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	015a      	lsls	r2, r3, #5
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	4413      	add	r3, r2
 800e44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44e:	691a      	ldr	r2, [r3, #16]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e458:	6939      	ldr	r1, [r7, #16]
 800e45a:	0148      	lsls	r0, r1, #5
 800e45c:	6979      	ldr	r1, [r7, #20]
 800e45e:	4401      	add	r1, r0
 800e460:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e464:	4313      	orrs	r3, r2
 800e466:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	015a      	lsls	r2, r3, #5
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	4413      	add	r3, r2
 800e470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	693a      	ldr	r2, [r7, #16]
 800e478:	0151      	lsls	r1, r2, #5
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	440a      	add	r2, r1
 800e47e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e486:	6113      	str	r3, [r2, #16]
 800e488:	e033      	b.n	800e4f2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	695a      	ldr	r2, [r3, #20]
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	689b      	ldr	r3, [r3, #8]
 800e492:	4413      	add	r3, r2
 800e494:	1e5a      	subs	r2, r3, #1
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e49e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	015a      	lsls	r2, r3, #5
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ac:	691a      	ldr	r2, [r3, #16]
 800e4ae:	89fb      	ldrh	r3, [r7, #14]
 800e4b0:	04d9      	lsls	r1, r3, #19
 800e4b2:	4b31      	ldr	r3, [pc, #196]	; (800e578 <USB_EPStartXfer+0x3b4>)
 800e4b4:	400b      	ands	r3, r1
 800e4b6:	6939      	ldr	r1, [r7, #16]
 800e4b8:	0148      	lsls	r0, r1, #5
 800e4ba:	6979      	ldr	r1, [r7, #20]
 800e4bc:	4401      	add	r1, r0
 800e4be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	015a      	lsls	r2, r3, #5
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4d2:	691a      	ldr	r2, [r3, #16]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	89f9      	ldrh	r1, [r7, #14]
 800e4da:	fb01 f303 	mul.w	r3, r1, r3
 800e4de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4e2:	6939      	ldr	r1, [r7, #16]
 800e4e4:	0148      	lsls	r0, r1, #5
 800e4e6:	6979      	ldr	r1, [r7, #20]
 800e4e8:	4401      	add	r1, r0
 800e4ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	78db      	ldrb	r3, [r3, #3]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d128      	bne.n	800e54c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e506:	2b00      	cmp	r3, #0
 800e508:	d110      	bne.n	800e52c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	015a      	lsls	r2, r3, #5
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	4413      	add	r3, r2
 800e512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	693a      	ldr	r2, [r7, #16]
 800e51a:	0151      	lsls	r1, r2, #5
 800e51c:	697a      	ldr	r2, [r7, #20]
 800e51e:	440a      	add	r2, r1
 800e520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e528:	6013      	str	r3, [r2, #0]
 800e52a:	e00f      	b.n	800e54c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	015a      	lsls	r2, r3, #5
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	4413      	add	r3, r2
 800e534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	693a      	ldr	r2, [r7, #16]
 800e53c:	0151      	lsls	r1, r2, #5
 800e53e:	697a      	ldr	r2, [r7, #20]
 800e540:	440a      	add	r2, r1
 800e542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e54a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	015a      	lsls	r2, r3, #5
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	4413      	add	r3, r2
 800e554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	693a      	ldr	r2, [r7, #16]
 800e55c:	0151      	lsls	r1, r2, #5
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	440a      	add	r2, r1
 800e562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e56a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	1ff80000 	.word	0x1ff80000

0800e57c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	785b      	ldrb	r3, [r3, #1]
 800e594:	2b01      	cmp	r3, #1
 800e596:	f040 80ab 	bne.w	800e6f0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	695b      	ldr	r3, [r3, #20]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d132      	bne.n	800e608 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	015a      	lsls	r2, r3, #5
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	0151      	lsls	r1, r2, #5
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	440a      	add	r2, r1
 800e5b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e5c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e5c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	015a      	lsls	r2, r3, #5
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	0151      	lsls	r1, r2, #5
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	440a      	add	r2, r1
 800e5dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	015a      	lsls	r2, r3, #5
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	0151      	lsls	r1, r2, #5
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	440a      	add	r2, r1
 800e5fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e600:	0cdb      	lsrs	r3, r3, #19
 800e602:	04db      	lsls	r3, r3, #19
 800e604:	6113      	str	r3, [r2, #16]
 800e606:	e04e      	b.n	800e6a6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	015a      	lsls	r2, r3, #5
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	4413      	add	r3, r2
 800e610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	0151      	lsls	r1, r2, #5
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	440a      	add	r2, r1
 800e61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e622:	0cdb      	lsrs	r3, r3, #19
 800e624:	04db      	lsls	r3, r3, #19
 800e626:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	015a      	lsls	r2, r3, #5
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	4413      	add	r3, r2
 800e630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	0151      	lsls	r1, r2, #5
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	440a      	add	r2, r1
 800e63e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e642:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e646:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e64a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	695a      	ldr	r2, [r3, #20]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	689b      	ldr	r3, [r3, #8]
 800e654:	429a      	cmp	r2, r3
 800e656:	d903      	bls.n	800e660 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	015a      	lsls	r2, r3, #5
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	4413      	add	r3, r2
 800e668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	68ba      	ldr	r2, [r7, #8]
 800e670:	0151      	lsls	r1, r2, #5
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	440a      	add	r2, r1
 800e676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e67a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e67e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e68c:	691a      	ldr	r2, [r3, #16]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e696:	68b9      	ldr	r1, [r7, #8]
 800e698:	0148      	lsls	r0, r1, #5
 800e69a:	68f9      	ldr	r1, [r7, #12]
 800e69c:	4401      	add	r1, r0
 800e69e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	015a      	lsls	r2, r3, #5
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	68ba      	ldr	r2, [r7, #8]
 800e6b6:	0151      	lsls	r1, r2, #5
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	440a      	add	r2, r1
 800e6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e6c4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	695b      	ldr	r3, [r3, #20]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d06d      	beq.n	800e7aa <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	f003 030f 	and.w	r3, r3, #15
 800e6de:	2101      	movs	r1, #1
 800e6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e4:	68f9      	ldr	r1, [r7, #12]
 800e6e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	634b      	str	r3, [r1, #52]	; 0x34
 800e6ee:	e05c      	b.n	800e7aa <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	0151      	lsls	r1, r2, #5
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	440a      	add	r2, r1
 800e706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e70a:	0cdb      	lsrs	r3, r3, #19
 800e70c:	04db      	lsls	r3, r3, #19
 800e70e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	015a      	lsls	r2, r3, #5
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	4413      	add	r3, r2
 800e718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	0151      	lsls	r1, r2, #5
 800e722:	68fa      	ldr	r2, [r7, #12]
 800e724:	440a      	add	r2, r1
 800e726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e72a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e72e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e732:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d003      	beq.n	800e744 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	015a      	lsls	r2, r3, #5
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	4413      	add	r3, r2
 800e74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	68ba      	ldr	r2, [r7, #8]
 800e754:	0151      	lsls	r1, r2, #5
 800e756:	68fa      	ldr	r2, [r7, #12]
 800e758:	440a      	add	r2, r1
 800e75a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e75e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e762:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	015a      	lsls	r2, r3, #5
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e770:	691a      	ldr	r2, [r3, #16]
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	689b      	ldr	r3, [r3, #8]
 800e776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	0148      	lsls	r0, r1, #5
 800e77e:	68f9      	ldr	r1, [r7, #12]
 800e780:	4401      	add	r1, r0
 800e782:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e786:	4313      	orrs	r3, r2
 800e788:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	015a      	lsls	r2, r3, #5
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	4413      	add	r3, r2
 800e792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68ba      	ldr	r2, [r7, #8]
 800e79a:	0151      	lsls	r1, r2, #5
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b089      	sub	sp, #36	; 0x24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	71fb      	strb	r3, [r7, #7]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e7d6:	88bb      	ldrh	r3, [r7, #4]
 800e7d8:	3303      	adds	r3, #3
 800e7da:	089b      	lsrs	r3, r3, #2
 800e7dc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e7de:	2300      	movs	r3, #0
 800e7e0:	61bb      	str	r3, [r7, #24]
 800e7e2:	e00f      	b.n	800e804 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e7e4:	79fb      	ldrb	r3, [r7, #7]
 800e7e6:	031a      	lsls	r2, r3, #12
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	3304      	adds	r3, #4
 800e7fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	3301      	adds	r3, #1
 800e802:	61bb      	str	r3, [r7, #24]
 800e804:	69ba      	ldr	r2, [r7, #24]
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d3eb      	bcc.n	800e7e4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3724      	adds	r7, #36	; 0x24
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b089      	sub	sp, #36	; 0x24
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	4613      	mov	r3, r2
 800e826:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e830:	88fb      	ldrh	r3, [r7, #6]
 800e832:	3303      	adds	r3, #3
 800e834:	089b      	lsrs	r3, r3, #2
 800e836:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e838:	2300      	movs	r3, #0
 800e83a:	61bb      	str	r3, [r7, #24]
 800e83c:	e00b      	b.n	800e856 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	601a      	str	r2, [r3, #0]
    pDest++;
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	3304      	adds	r3, #4
 800e84e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	3301      	adds	r3, #1
 800e854:	61bb      	str	r3, [r7, #24]
 800e856:	69ba      	ldr	r2, [r7, #24]
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d3ef      	bcc.n	800e83e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e85e:	69fb      	ldr	r3, [r7, #28]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3724      	adds	r7, #36	; 0x24
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	785b      	ldrb	r3, [r3, #1]
 800e884:	2b01      	cmp	r3, #1
 800e886:	d12c      	bne.n	800e8e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	015a      	lsls	r2, r3, #5
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	4413      	add	r3, r2
 800e890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	db12      	blt.n	800e8c0 <USB_EPSetStall+0x54>
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00f      	beq.n	800e8c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	0151      	lsls	r1, r2, #5
 800e8b2:	68fa      	ldr	r2, [r7, #12]
 800e8b4:	440a      	add	r2, r1
 800e8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e8be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	015a      	lsls	r2, r3, #5
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	68ba      	ldr	r2, [r7, #8]
 800e8d0:	0151      	lsls	r1, r2, #5
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	440a      	add	r2, r1
 800e8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	e02b      	b.n	800e93a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	015a      	lsls	r2, r3, #5
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	db12      	blt.n	800e91a <USB_EPSetStall+0xae>
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00f      	beq.n	800e91a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	015a      	lsls	r2, r3, #5
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	4413      	add	r3, r2
 800e902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68ba      	ldr	r2, [r7, #8]
 800e90a:	0151      	lsls	r1, r2, #5
 800e90c:	68fa      	ldr	r2, [r7, #12]
 800e90e:	440a      	add	r2, r1
 800e910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e914:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e918:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	015a      	lsls	r2, r3, #5
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	4413      	add	r3, r2
 800e922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	0151      	lsls	r1, r2, #5
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	440a      	add	r2, r1
 800e930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e934:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	785b      	ldrb	r3, [r3, #1]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d128      	bne.n	800e9b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	015a      	lsls	r2, r3, #5
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	4413      	add	r3, r2
 800e96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	0151      	lsls	r1, r2, #5
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	440a      	add	r2, r1
 800e97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e97e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e982:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	78db      	ldrb	r3, [r3, #3]
 800e988:	2b03      	cmp	r3, #3
 800e98a:	d003      	beq.n	800e994 <USB_EPClearStall+0x4c>
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	78db      	ldrb	r3, [r3, #3]
 800e990:	2b02      	cmp	r3, #2
 800e992:	d138      	bne.n	800ea06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	015a      	lsls	r2, r3, #5
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	0151      	lsls	r1, r2, #5
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	440a      	add	r2, r1
 800e9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9b2:	6013      	str	r3, [r2, #0]
 800e9b4:	e027      	b.n	800ea06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	015a      	lsls	r2, r3, #5
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	4413      	add	r3, r2
 800e9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	0151      	lsls	r1, r2, #5
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	440a      	add	r2, r1
 800e9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e9d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	78db      	ldrb	r3, [r3, #3]
 800e9da:	2b03      	cmp	r3, #3
 800e9dc:	d003      	beq.n	800e9e6 <USB_EPClearStall+0x9e>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	78db      	ldrb	r3, [r3, #3]
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d10f      	bne.n	800ea06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	015a      	lsls	r2, r3, #5
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	0151      	lsls	r1, r2, #5
 800e9f8:	68fa      	ldr	r2, [r7, #12]
 800e9fa:	440a      	add	r2, r1
 800e9fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ea36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	78fb      	ldrb	r3, [r7, #3]
 800ea42:	011b      	lsls	r3, r3, #4
 800ea44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ea48:	68f9      	ldr	r1, [r7, #12]
 800ea4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3714      	adds	r7, #20
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68fa      	ldr	r2, [r7, #12]
 800ea76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea7a:	f023 0303 	bic.w	r3, r3, #3
 800ea7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea8e:	f023 0302 	bic.w	r3, r3, #2
 800ea92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3714      	adds	r7, #20
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b085      	sub	sp, #20
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eabc:	f023 0303 	bic.w	r3, r3, #3
 800eac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	68fa      	ldr	r2, [r7, #12]
 800eacc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ead0:	f043 0302 	orr.w	r3, r3, #2
 800ead4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ead6:	2300      	movs	r3, #0
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3714      	adds	r7, #20
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	699b      	ldr	r3, [r3, #24]
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	4013      	ands	r3, r2
 800eafa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eafc:	68fb      	ldr	r3, [r7, #12]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb1c:	699b      	ldr	r3, [r3, #24]
 800eb1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb26:	69db      	ldr	r3, [r3, #28]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	0c1b      	lsrs	r3, r3, #16
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b085      	sub	sp, #20
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb50:	699b      	ldr	r3, [r3, #24]
 800eb52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb5a:	69db      	ldr	r3, [r3, #28]
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	4013      	ands	r3, r2
 800eb60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	b29b      	uxth	r3, r3
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b085      	sub	sp, #20
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	460b      	mov	r3, r1
 800eb7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	4013      	ands	r3, r2
 800eb9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800eba0:	68bb      	ldr	r3, [r7, #8]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b087      	sub	sp, #28
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc4:	691b      	ldr	r3, [r3, #16]
 800ebc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ebd2:	78fb      	ldrb	r3, [r7, #3]
 800ebd4:	f003 030f 	and.w	r3, r3, #15
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	fa22 f303 	lsr.w	r3, r2, r3
 800ebde:	01db      	lsls	r3, r3, #7
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ebe8:	78fb      	ldrb	r3, [r7, #3]
 800ebea:	015a      	lsls	r2, r3, #5
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	4413      	add	r3, r2
 800ebf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	693a      	ldr	r2, [r7, #16]
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ebfc:	68bb      	ldr	r3, [r7, #8]
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	f003 0301 	and.w	r3, r3, #1
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec40:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ec44:	f023 0307 	bic.w	r3, r3, #7
 800ec48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec5e:	2300      	movs	r3, #0
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	333c      	adds	r3, #60	; 0x3c
 800ec7e:	3304      	adds	r3, #4
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	4a1c      	ldr	r2, [pc, #112]	; (800ecf8 <USB_EP0_OutStart+0x8c>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d90a      	bls.n	800eca2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec9c:	d101      	bne.n	800eca2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e024      	b.n	800ecec <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca8:	461a      	mov	r2, r3
 800ecaa:	2300      	movs	r3, #0
 800ecac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecd0:	f043 0318 	orr.w	r3, r3, #24
 800ecd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ece4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ece8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	4f54300a 	.word	0x4f54300a

0800ecfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b085      	sub	sp, #20
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ed04:	2300      	movs	r3, #0
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	60fb      	str	r3, [r7, #12]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	4a13      	ldr	r2, [pc, #76]	; (800ed60 <USB_CoreReset+0x64>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d901      	bls.n	800ed1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ed16:	2303      	movs	r3, #3
 800ed18:	e01b      	b.n	800ed52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	691b      	ldr	r3, [r3, #16]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	daf2      	bge.n	800ed08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ed22:	2300      	movs	r3, #0
 800ed24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	f043 0201 	orr.w	r2, r3, #1
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3301      	adds	r3, #1
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	4a09      	ldr	r2, [pc, #36]	; (800ed60 <USB_CoreReset+0x64>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d901      	bls.n	800ed44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ed40:	2303      	movs	r3, #3
 800ed42:	e006      	b.n	800ed52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	f003 0301 	and.w	r3, r3, #1
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d0f0      	beq.n	800ed32 <USB_CoreReset+0x36>

  return HAL_OK;
 800ed50:	2300      	movs	r3, #0
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3714      	adds	r7, #20
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	00030d40 	.word	0x00030d40

0800ed64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ed68:	4904      	ldr	r1, [pc, #16]	; (800ed7c <MX_FATFS_Init+0x18>)
 800ed6a:	4805      	ldr	r0, [pc, #20]	; (800ed80 <MX_FATFS_Init+0x1c>)
 800ed6c:	f001 ff30 	bl	8010bd0 <FATFS_LinkDriver>
 800ed70:	4603      	mov	r3, r0
 800ed72:	461a      	mov	r2, r3
 800ed74:	4b03      	ldr	r3, [pc, #12]	; (800ed84 <MX_FATFS_Init+0x20>)
 800ed76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ed78:	bf00      	nop
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	20002f28 	.word	0x20002f28
 800ed80:	08014b48 	.word	0x08014b48
 800ed84:	20002f24 	.word	0x20002f24

0800ed88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ed92:	f000 f885 	bl	800eea0 <BSP_SD_IsDetected>
 800ed96:	4603      	mov	r3, r0
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d001      	beq.n	800eda0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	e012      	b.n	800edc6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eda0:	480b      	ldr	r0, [pc, #44]	; (800edd0 <BSP_SD_Init+0x48>)
 800eda2:	f7fa fdfb 	bl	800999c <HAL_SD_Init>
 800eda6:	4603      	mov	r3, r0
 800eda8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d109      	bne.n	800edc4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800edb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800edb4:	4806      	ldr	r0, [pc, #24]	; (800edd0 <BSP_SD_Init+0x48>)
 800edb6:	f7fb fcc1 	bl	800a73c <HAL_SD_ConfigWideBusOperation>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d001      	beq.n	800edc4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800edc0:	2301      	movs	r3, #1
 800edc2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800edc4:	79fb      	ldrb	r3, [r7, #7]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20002970 	.word	0x20002970

0800edd4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	68ba      	ldr	r2, [r7, #8]
 800ede8:	68f9      	ldr	r1, [r7, #12]
 800edea:	4806      	ldr	r0, [pc, #24]	; (800ee04 <BSP_SD_ReadBlocks_DMA+0x30>)
 800edec:	f7fa ff10 	bl	8009c10 <HAL_SD_ReadBlocks_DMA>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d001      	beq.n	800edfa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800edf6:	2301      	movs	r3, #1
 800edf8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800edfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3718      	adds	r7, #24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	20002970 	.word	0x20002970

0800ee08 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b086      	sub	sp, #24
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	68ba      	ldr	r2, [r7, #8]
 800ee1c:	68f9      	ldr	r1, [r7, #12]
 800ee1e:	4806      	ldr	r0, [pc, #24]	; (800ee38 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ee20:	f7fa ff9e 	bl	8009d60 <HAL_SD_WriteBlocks_DMA>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20002970 	.word	0x20002970

0800ee3c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ee40:	4805      	ldr	r0, [pc, #20]	; (800ee58 <BSP_SD_GetCardState+0x1c>)
 800ee42:	f7fb fd8f 	bl	800a964 <HAL_SD_GetCardState>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20002970 	.word	0x20002970

0800ee5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	4803      	ldr	r0, [pc, #12]	; (800ee74 <BSP_SD_GetCardInfo+0x18>)
 800ee68:	f7fb fc3c 	bl	800a6e4 <HAL_SD_GetCardInfo>
}
 800ee6c:	bf00      	nop
 800ee6e:	3708      	adds	r7, #8
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	20002970 	.word	0x20002970

0800ee78 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ee80:	f000 f9ac 	bl	800f1dc <BSP_SD_WriteCpltCallback>
}
 800ee84:	bf00      	nop
 800ee86:	3708      	adds	r7, #8
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ee94:	f000 f9b4 	bl	800f200 <BSP_SD_ReadCpltCallback>
}
 800ee98:	bf00      	nop
 800ee9a:	3708      	adds	r7, #8
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800eea6:	2301      	movs	r3, #1
 800eea8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800eeaa:	f000 f80b 	bl	800eec4 <BSP_PlatformIsDetected>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d101      	bne.n	800eeb8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800eeb8:	79fb      	ldrb	r3, [r7, #7]
 800eeba:	b2db      	uxtb	r3, r3
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eeca:	2301      	movs	r3, #1
 800eecc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eece:	2101      	movs	r1, #1
 800eed0:	4806      	ldr	r0, [pc, #24]	; (800eeec <BSP_PlatformIsDetected+0x28>)
 800eed2:	f7f5 f941 	bl	8004158 <HAL_GPIO_ReadPin>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800eedc:	2300      	movs	r3, #0
 800eede:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eee0:	79fb      	ldrb	r3, [r7, #7]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	48000c00 	.word	0x48000c00

0800eef0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800eef8:	f001 ff2a 	bl	8010d50 <osKernelGetTickCount>
 800eefc:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800eefe:	e006      	b.n	800ef0e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef00:	f7ff ff9c 	bl	800ee3c <BSP_SD_GetCardState>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d101      	bne.n	800ef0e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	e009      	b.n	800ef22 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800ef0e:	f001 ff1f 	bl	8010d50 <osKernelGetTickCount>
 800ef12:	4602      	mov	r2, r0
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d8f0      	bhi.n	800ef00 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ef1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef36:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <SD_CheckStatus+0x38>)
 800ef38:	2201      	movs	r2, #1
 800ef3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef3c:	f7ff ff7e 	bl	800ee3c <BSP_SD_GetCardState>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d107      	bne.n	800ef56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef46:	4b07      	ldr	r3, [pc, #28]	; (800ef64 <SD_CheckStatus+0x38>)
 800ef48:	781b      	ldrb	r3, [r3, #0]
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	f023 0301 	bic.w	r3, r3, #1
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	4b04      	ldr	r3, [pc, #16]	; (800ef64 <SD_CheckStatus+0x38>)
 800ef54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ef56:	4b03      	ldr	r3, [pc, #12]	; (800ef64 <SD_CheckStatus+0x38>)
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	b2db      	uxtb	r3, r3
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3708      	adds	r7, #8
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	20000009 	.word	0x20000009

0800ef68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ef72:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <SD_initialize+0x7c>)
 800ef74:	2201      	movs	r2, #1
 800ef76:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800ef78:	f001 fea2 	bl	8010cc0 <osKernelGetState>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	d129      	bne.n	800efd6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ef82:	f7ff ff01 	bl	800ed88 <BSP_SD_Init>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d107      	bne.n	800ef9c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ef8c:	79fb      	ldrb	r3, [r7, #7]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7ff ffcc 	bl	800ef2c <SD_CheckStatus>
 800ef94:	4603      	mov	r3, r0
 800ef96:	461a      	mov	r2, r3
 800ef98:	4b12      	ldr	r3, [pc, #72]	; (800efe4 <SD_initialize+0x7c>)
 800ef9a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ef9c:	4b11      	ldr	r3, [pc, #68]	; (800efe4 <SD_initialize+0x7c>)
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d017      	beq.n	800efd6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800efa6:	4b10      	ldr	r3, [pc, #64]	; (800efe8 <SD_initialize+0x80>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d107      	bne.n	800efbe <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800efae:	2200      	movs	r2, #0
 800efb0:	2102      	movs	r1, #2
 800efb2:	200a      	movs	r0, #10
 800efb4:	f001 ff8e 	bl	8010ed4 <osMessageQueueNew>
 800efb8:	4603      	mov	r3, r0
 800efba:	4a0b      	ldr	r2, [pc, #44]	; (800efe8 <SD_initialize+0x80>)
 800efbc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800efbe:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <SD_initialize+0x80>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d107      	bne.n	800efd6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800efc6:	4b07      	ldr	r3, [pc, #28]	; (800efe4 <SD_initialize+0x7c>)
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	b2db      	uxtb	r3, r3
 800efcc:	f043 0301 	orr.w	r3, r3, #1
 800efd0:	b2da      	uxtb	r2, r3
 800efd2:	4b04      	ldr	r3, [pc, #16]	; (800efe4 <SD_initialize+0x7c>)
 800efd4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800efd6:	4b03      	ldr	r3, [pc, #12]	; (800efe4 <SD_initialize+0x7c>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	b2db      	uxtb	r3, r3
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	20000009 	.word	0x20000009
 800efe8:	20000a74 	.word	0x20000a74

0800efec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	4603      	mov	r3, r0
 800eff4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7ff ff97 	bl	800ef2c <SD_CheckStatus>
 800effe:	4603      	mov	r3, r0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b088      	sub	sp, #32
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60b9      	str	r1, [r7, #8]
 800f010:	607a      	str	r2, [r7, #4]
 800f012:	603b      	str	r3, [r7, #0]
 800f014:	4603      	mov	r3, r0
 800f016:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f01c:	f247 5030 	movw	r0, #30000	; 0x7530
 800f020:	f7ff ff66 	bl	800eef0 <SD_CheckStatusWithTimeout>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	da01      	bge.n	800f02e <SD_read+0x26>
  {
    return res;
 800f02a:	7ffb      	ldrb	r3, [r7, #31]
 800f02c:	e02f      	b.n	800f08e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	6879      	ldr	r1, [r7, #4]
 800f032:	68b8      	ldr	r0, [r7, #8]
 800f034:	f7ff fece 	bl	800edd4 <BSP_SD_ReadBlocks_DMA>
 800f038:	4603      	mov	r3, r0
 800f03a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f03c:	7fbb      	ldrb	r3, [r7, #30]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d124      	bne.n	800f08c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f042:	4b15      	ldr	r3, [pc, #84]	; (800f098 <SD_read+0x90>)
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	f107 0112 	add.w	r1, r7, #18
 800f04a:	f247 5330 	movw	r3, #30000	; 0x7530
 800f04e:	2200      	movs	r2, #0
 800f050:	f002 f814 	bl	801107c <osMessageQueueGet>
 800f054:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d117      	bne.n	800f08c <SD_read+0x84>
 800f05c:	8a7b      	ldrh	r3, [r7, #18]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d114      	bne.n	800f08c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f062:	f001 fe75 	bl	8010d50 <osKernelGetTickCount>
 800f066:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f068:	e007      	b.n	800f07a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f06a:	f7ff fee7 	bl	800ee3c <BSP_SD_GetCardState>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d102      	bne.n	800f07a <SD_read+0x72>
              {
                res = RES_OK;
 800f074:	2300      	movs	r3, #0
 800f076:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f078:	e008      	b.n	800f08c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f07a:	f001 fe69 	bl	8010d50 <osKernelGetTickCount>
 800f07e:	4602      	mov	r2, r0
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	f247 522f 	movw	r2, #29999	; 0x752f
 800f088:	4293      	cmp	r3, r2
 800f08a:	d9ee      	bls.n	800f06a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f08c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3720      	adds	r7, #32
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20000a74 	.word	0x20000a74

0800f09c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b088      	sub	sp, #32
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60b9      	str	r1, [r7, #8]
 800f0a4:	607a      	str	r2, [r7, #4]
 800f0a6:	603b      	str	r3, [r7, #0]
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f0b0:	f247 5030 	movw	r0, #30000	; 0x7530
 800f0b4:	f7ff ff1c 	bl	800eef0 <SD_CheckStatusWithTimeout>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	da01      	bge.n	800f0c2 <SD_write+0x26>
  {
    return res;
 800f0be:	7ffb      	ldrb	r3, [r7, #31]
 800f0c0:	e02d      	b.n	800f11e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	68b8      	ldr	r0, [r7, #8]
 800f0c8:	f7ff fe9e 	bl	800ee08 <BSP_SD_WriteBlocks_DMA>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d124      	bne.n	800f11c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f0d2:	4b15      	ldr	r3, [pc, #84]	; (800f128 <SD_write+0x8c>)
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f107 0112 	add.w	r1, r7, #18
 800f0da:	f247 5330 	movw	r3, #30000	; 0x7530
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f001 ffcc 	bl	801107c <osMessageQueueGet>
 800f0e4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d117      	bne.n	800f11c <SD_write+0x80>
 800f0ec:	8a7b      	ldrh	r3, [r7, #18]
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d114      	bne.n	800f11c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f0f2:	f001 fe2d 	bl	8010d50 <osKernelGetTickCount>
 800f0f6:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f0f8:	e007      	b.n	800f10a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0fa:	f7ff fe9f 	bl	800ee3c <BSP_SD_GetCardState>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d102      	bne.n	800f10a <SD_write+0x6e>
          {
            res = RES_OK;
 800f104:	2300      	movs	r3, #0
 800f106:	77fb      	strb	r3, [r7, #31]
            break;
 800f108:	e008      	b.n	800f11c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f10a:	f001 fe21 	bl	8010d50 <osKernelGetTickCount>
 800f10e:	4602      	mov	r2, r0
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	f247 522f 	movw	r2, #29999	; 0x752f
 800f118:	4293      	cmp	r3, r2
 800f11a:	d9ee      	bls.n	800f0fa <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f11c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3720      	adds	r7, #32
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20000a74 	.word	0x20000a74

0800f12c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08c      	sub	sp, #48	; 0x30
 800f130:	af00      	add	r7, sp, #0
 800f132:	4603      	mov	r3, r0
 800f134:	603a      	str	r2, [r7, #0]
 800f136:	71fb      	strb	r3, [r7, #7]
 800f138:	460b      	mov	r3, r1
 800f13a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f13c:	2301      	movs	r3, #1
 800f13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f142:	4b25      	ldr	r3, [pc, #148]	; (800f1d8 <SD_ioctl+0xac>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	b2db      	uxtb	r3, r3
 800f148:	f003 0301 	and.w	r3, r3, #1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <SD_ioctl+0x28>
 800f150:	2303      	movs	r3, #3
 800f152:	e03c      	b.n	800f1ce <SD_ioctl+0xa2>

  switch (cmd)
 800f154:	79bb      	ldrb	r3, [r7, #6]
 800f156:	2b03      	cmp	r3, #3
 800f158:	d834      	bhi.n	800f1c4 <SD_ioctl+0x98>
 800f15a:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <SD_ioctl+0x34>)
 800f15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f160:	0800f171 	.word	0x0800f171
 800f164:	0800f179 	.word	0x0800f179
 800f168:	0800f191 	.word	0x0800f191
 800f16c:	0800f1ab 	.word	0x0800f1ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f176:	e028      	b.n	800f1ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f178:	f107 0308 	add.w	r3, r7, #8
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff fe6d 	bl	800ee5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f182:	6a3a      	ldr	r2, [r7, #32]
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f18e:	e01c      	b.n	800f1ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f190:	f107 0308 	add.w	r3, r7, #8
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff fe61 	bl	800ee5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1a8:	e00f      	b.n	800f1ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f1aa:	f107 0308 	add.w	r3, r7, #8
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7ff fe54 	bl	800ee5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	0a5a      	lsrs	r2, r3, #9
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f1c2:	e002      	b.n	800f1ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f1c4:	2304      	movs	r3, #4
 800f1c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f1ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3730      	adds	r7, #48	; 0x30
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20000009 	.word	0x20000009

0800f1dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b082      	sub	sp, #8
 800f1e0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f1e6:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <BSP_SD_WriteCpltCallback+0x20>)
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	1db9      	adds	r1, r7, #6
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	f001 fee4 	bl	8010fbc <osMessageQueuePut>
#endif
}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20000a74 	.word	0x20000a74

0800f200 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f206:	2301      	movs	r3, #1
 800f208:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800f20a:	4b05      	ldr	r3, [pc, #20]	; (800f220 <BSP_SD_ReadCpltCallback+0x20>)
 800f20c:	6818      	ldr	r0, [r3, #0]
 800f20e:	1db9      	adds	r1, r7, #6
 800f210:	2300      	movs	r3, #0
 800f212:	2200      	movs	r2, #0
 800f214:	f001 fed2 	bl	8010fbc <osMessageQueuePut>
#endif
}
 800f218:	bf00      	nop
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	20000a74 	.word	0x20000a74

0800f224 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	460b      	mov	r3, r1
 800f22e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f230:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f234:	f005 faca 	bl	80147cc <USBD_static_malloc>
 800f238:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d105      	bne.n	800f24c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f248:	2302      	movs	r3, #2
 800f24a:	e066      	b.n	800f31a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	7c1b      	ldrb	r3, [r3, #16]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d119      	bne.n	800f290 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f25c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f260:	2202      	movs	r2, #2
 800f262:	2181      	movs	r1, #129	; 0x81
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f005 f89d 	bl	80143a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2201      	movs	r2, #1
 800f26e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f270:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f274:	2202      	movs	r2, #2
 800f276:	2101      	movs	r1, #1
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f005 f893 	bl	80143a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2201      	movs	r2, #1
 800f282:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2210      	movs	r2, #16
 800f28a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f28e:	e016      	b.n	800f2be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f290:	2340      	movs	r3, #64	; 0x40
 800f292:	2202      	movs	r2, #2
 800f294:	2181      	movs	r1, #129	; 0x81
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f005 f884 	bl	80143a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f2a2:	2340      	movs	r3, #64	; 0x40
 800f2a4:	2202      	movs	r2, #2
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f005 f87b 	bl	80143a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2210      	movs	r2, #16
 800f2ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f2be:	2308      	movs	r3, #8
 800f2c0:	2203      	movs	r2, #3
 800f2c2:	2182      	movs	r1, #130	; 0x82
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f005 f86d 	bl	80143a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7c1b      	ldrb	r3, [r3, #16]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d109      	bne.n	800f308 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f2fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f2fe:	2101      	movs	r1, #1
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f005 f9c9 	bl	8014698 <USBD_LL_PrepareReceive>
 800f306:	e007      	b.n	800f318 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f30e:	2340      	movs	r3, #64	; 0x40
 800f310:	2101      	movs	r1, #1
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f005 f9c0 	bl	8014698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	460b      	mov	r3, r1
 800f32c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f32e:	2181      	movs	r1, #129	; 0x81
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f005 f875 	bl	8014420 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f33c:	2101      	movs	r1, #1
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f005 f86e 	bl	8014420 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f34c:	2182      	movs	r1, #130	; 0x82
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f005 f866 	bl	8014420 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00e      	beq.n	800f38c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f37e:	4618      	mov	r0, r3
 800f380:	f005 fa32 	bl	80147e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
	...

0800f398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b086      	sub	sp, #24
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	e0af      	b.n	800f520 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d03f      	beq.n	800f44c <USBD_CDC_Setup+0xb4>
 800f3cc:	2b20      	cmp	r3, #32
 800f3ce:	f040 809f 	bne.w	800f510 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	88db      	ldrh	r3, [r3, #6]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d02e      	beq.n	800f438 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	b25b      	sxtb	r3, r3
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	da16      	bge.n	800f412 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f3f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	88d2      	ldrh	r2, [r2, #6]
 800f3f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	88db      	ldrh	r3, [r3, #6]
 800f3fc:	2b07      	cmp	r3, #7
 800f3fe:	bf28      	it	cs
 800f400:	2307      	movcs	r3, #7
 800f402:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	89fa      	ldrh	r2, [r7, #14]
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f001 fb13 	bl	8010a36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f410:	e085      	b.n	800f51e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	785a      	ldrb	r2, [r3, #1]
 800f416:	693b      	ldr	r3, [r7, #16]
 800f418:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	88db      	ldrh	r3, [r3, #6]
 800f420:	b2da      	uxtb	r2, r3
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f428:	6939      	ldr	r1, [r7, #16]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	88db      	ldrh	r3, [r3, #6]
 800f42e:	461a      	mov	r2, r3
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f001 fb2c 	bl	8010a8e <USBD_CtlPrepareRx>
      break;
 800f436:	e072      	b.n	800f51e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	7850      	ldrb	r0, [r2, #1]
 800f444:	2200      	movs	r2, #0
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	4798      	blx	r3
      break;
 800f44a:	e068      	b.n	800f51e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	2b0b      	cmp	r3, #11
 800f452:	d852      	bhi.n	800f4fa <USBD_CDC_Setup+0x162>
 800f454:	a201      	add	r2, pc, #4	; (adr r2, 800f45c <USBD_CDC_Setup+0xc4>)
 800f456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45a:	bf00      	nop
 800f45c:	0800f48d 	.word	0x0800f48d
 800f460:	0800f509 	.word	0x0800f509
 800f464:	0800f4fb 	.word	0x0800f4fb
 800f468:	0800f4fb 	.word	0x0800f4fb
 800f46c:	0800f4fb 	.word	0x0800f4fb
 800f470:	0800f4fb 	.word	0x0800f4fb
 800f474:	0800f4fb 	.word	0x0800f4fb
 800f478:	0800f4fb 	.word	0x0800f4fb
 800f47c:	0800f4fb 	.word	0x0800f4fb
 800f480:	0800f4fb 	.word	0x0800f4fb
 800f484:	0800f4b7 	.word	0x0800f4b7
 800f488:	0800f4e1 	.word	0x0800f4e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b03      	cmp	r3, #3
 800f496:	d107      	bne.n	800f4a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f498:	f107 030a 	add.w	r3, r7, #10
 800f49c:	2202      	movs	r2, #2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f001 fac8 	bl	8010a36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f4a6:	e032      	b.n	800f50e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f001 fa52 	bl	8010954 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	75fb      	strb	r3, [r7, #23]
          break;
 800f4b4:	e02b      	b.n	800f50e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d107      	bne.n	800f4d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f4c2:	f107 030d 	add.w	r3, r7, #13
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f001 fab3 	bl	8010a36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f4d0:	e01d      	b.n	800f50e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f4d2:	6839      	ldr	r1, [r7, #0]
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f001 fa3d 	bl	8010954 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4da:	2303      	movs	r3, #3
 800f4dc:	75fb      	strb	r3, [r7, #23]
          break;
 800f4de:	e016      	b.n	800f50e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b03      	cmp	r3, #3
 800f4ea:	d00f      	beq.n	800f50c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f001 fa30 	bl	8010954 <USBD_CtlError>
            ret = USBD_FAIL;
 800f4f4:	2303      	movs	r3, #3
 800f4f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f4f8:	e008      	b.n	800f50c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f001 fa29 	bl	8010954 <USBD_CtlError>
          ret = USBD_FAIL;
 800f502:	2303      	movs	r3, #3
 800f504:	75fb      	strb	r3, [r7, #23]
          break;
 800f506:	e002      	b.n	800f50e <USBD_CDC_Setup+0x176>
          break;
 800f508:	bf00      	nop
 800f50a:	e008      	b.n	800f51e <USBD_CDC_Setup+0x186>
          break;
 800f50c:	bf00      	nop
      }
      break;
 800f50e:	e006      	b.n	800f51e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f001 fa1e 	bl	8010954 <USBD_CtlError>
      ret = USBD_FAIL;
 800f518:	2303      	movs	r3, #3
 800f51a:	75fb      	strb	r3, [r7, #23]
      break;
 800f51c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f53a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f542:	2b00      	cmp	r3, #0
 800f544:	d101      	bne.n	800f54a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f546:	2303      	movs	r3, #3
 800f548:	e04f      	b.n	800f5ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f550:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f552:	78fa      	ldrb	r2, [r7, #3]
 800f554:	6879      	ldr	r1, [r7, #4]
 800f556:	4613      	mov	r3, r2
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	4413      	add	r3, r2
 800f55c:	009b      	lsls	r3, r3, #2
 800f55e:	440b      	add	r3, r1
 800f560:	3318      	adds	r3, #24
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d029      	beq.n	800f5bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f568:	78fa      	ldrb	r2, [r7, #3]
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	4613      	mov	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	4413      	add	r3, r2
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	440b      	add	r3, r1
 800f576:	3318      	adds	r3, #24
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	78f9      	ldrb	r1, [r7, #3]
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	460b      	mov	r3, r1
 800f580:	00db      	lsls	r3, r3, #3
 800f582:	1a5b      	subs	r3, r3, r1
 800f584:	009b      	lsls	r3, r3, #2
 800f586:	4403      	add	r3, r0
 800f588:	3344      	adds	r3, #68	; 0x44
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	fbb2 f1f3 	udiv	r1, r2, r3
 800f590:	fb03 f301 	mul.w	r3, r3, r1
 800f594:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f596:	2b00      	cmp	r3, #0
 800f598:	d110      	bne.n	800f5bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f59a:	78fa      	ldrb	r2, [r7, #3]
 800f59c:	6879      	ldr	r1, [r7, #4]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	440b      	add	r3, r1
 800f5a8:	3318      	adds	r3, #24
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f5ae:	78f9      	ldrb	r1, [r7, #3]
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f005 f837 	bl	8014628 <USBD_LL_Transmit>
 800f5ba:	e015      	b.n	800f5e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5ca:	691b      	ldr	r3, [r3, #16]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00b      	beq.n	800f5e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f5e4:	78fa      	ldrb	r2, [r7, #3]
 800f5e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b084      	sub	sp, #16
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f604:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d101      	bne.n	800f614 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f610:	2303      	movs	r3, #3
 800f612:	e015      	b.n	800f640 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f614:	78fb      	ldrb	r3, [r7, #3]
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f005 f875 	bl	8014708 <USBD_LL_GetRxDataSize>
 800f61e:	4602      	mov	r2, r0
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	68fa      	ldr	r2, [r7, #12]
 800f630:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f63a:	4611      	mov	r1, r2
 800f63c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f63e:	2300      	movs	r3, #0
}
 800f640:	4618      	mov	r0, r3
 800f642:	3710      	adds	r7, #16
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f656:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f65e:	2303      	movs	r3, #3
 800f660:	e01b      	b.n	800f69a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d015      	beq.n	800f698 <USBD_CDC_EP0_RxReady+0x50>
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f672:	2bff      	cmp	r3, #255	; 0xff
 800f674:	d010      	beq.n	800f698 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f684:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f68c:	b292      	uxth	r2, r2
 800f68e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	22ff      	movs	r2, #255	; 0xff
 800f694:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
	...

0800f6a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2243      	movs	r2, #67	; 0x43
 800f6b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f6b2:	4b03      	ldr	r3, [pc, #12]	; (800f6c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr
 800f6c0:	20000094 	.word	0x20000094

0800f6c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2243      	movs	r2, #67	; 0x43
 800f6d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f6d2:	4b03      	ldr	r3, [pc, #12]	; (800f6e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	20000050 	.word	0x20000050

0800f6e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2243      	movs	r2, #67	; 0x43
 800f6f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f6f2:	4b03      	ldr	r3, [pc, #12]	; (800f700 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	200000d8 	.word	0x200000d8

0800f704 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f704:	b480      	push	{r7}
 800f706:	b083      	sub	sp, #12
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	220a      	movs	r2, #10
 800f710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f712:	4b03      	ldr	r3, [pc, #12]	; (800f720 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr
 800f720:	2000000c 	.word	0x2000000c

0800f724 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f734:	2303      	movs	r3, #3
 800f736:	e004      	b.n	800f742 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f74e:	b480      	push	{r7}
 800f750:	b087      	sub	sp, #28
 800f752:	af00      	add	r7, sp, #0
 800f754:	60f8      	str	r0, [r7, #12]
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f760:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d101      	bne.n	800f76c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f768:	2303      	movs	r3, #3
 800f76a:	e008      	b.n	800f77e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	371c      	adds	r7, #28
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b085      	sub	sp, #20
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f79a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d101      	bne.n	800f7a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	e004      	b.n	800f7b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	683a      	ldr	r2, [r7, #0]
 800f7aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f7ae:	2300      	movs	r3, #0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3714      	adds	r7, #20
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d101      	bne.n	800f7da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f7d6:	2303      	movs	r3, #3
 800f7d8:	e016      	b.n	800f808 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	7c1b      	ldrb	r3, [r3, #16]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d109      	bne.n	800f7f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f7e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f7ec:	2101      	movs	r1, #1
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f004 ff52 	bl	8014698 <USBD_LL_PrepareReceive>
 800f7f4:	e007      	b.n	800f806 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f7fc:	2340      	movs	r3, #64	; 0x40
 800f7fe:	2101      	movs	r1, #1
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f004 ff49 	bl	8014698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	4613      	mov	r3, r2
 800f81c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f824:	2303      	movs	r3, #3
 800f826:	e01f      	b.n	800f868 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	2200      	movs	r2, #0
 800f834:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2200      	movs	r2, #0
 800f83c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d003      	beq.n	800f84e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	68ba      	ldr	r2, [r7, #8]
 800f84a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2201      	movs	r2, #1
 800f852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	79fa      	ldrb	r2, [r7, #7]
 800f85a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f004 fd25 	bl	80142ac <USBD_LL_Init>
 800f862:	4603      	mov	r3, r0
 800f864:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f866:	7dfb      	ldrb	r3, [r7, #23]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3718      	adds	r7, #24
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f87a:	2300      	movs	r3, #0
 800f87c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f884:	2303      	movs	r3, #3
 800f886:	e016      	b.n	800f8b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00b      	beq.n	800f8b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a4:	f107 020e 	add.w	r2, r7, #14
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	4798      	blx	r3
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3710      	adds	r7, #16
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f004 fd3a 	bl	8014340 <USBD_LL_Start>
 800f8cc:	4603      	mov	r3, r0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f902:	2b00      	cmp	r3, #0
 800f904:	d009      	beq.n	800f91a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	78fa      	ldrb	r2, [r7, #3]
 800f910:	4611      	mov	r1, r2
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	4798      	blx	r3
 800f916:	4603      	mov	r3, r0
 800f918:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	460b      	mov	r3, r1
 800f92e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f936:	2b00      	cmp	r3, #0
 800f938:	d007      	beq.n	800f94a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	78fa      	ldrb	r2, [r7, #3]
 800f944:	4611      	mov	r1, r2
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	4798      	blx	r3
  }

  return USBD_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f964:	6839      	ldr	r1, [r7, #0]
 800f966:	4618      	mov	r0, r3
 800f968:	f000 ffba 	bl	80108e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f97a:	461a      	mov	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f988:	f003 031f 	and.w	r3, r3, #31
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d01a      	beq.n	800f9c6 <USBD_LL_SetupStage+0x72>
 800f990:	2b02      	cmp	r3, #2
 800f992:	d822      	bhi.n	800f9da <USBD_LL_SetupStage+0x86>
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <USBD_LL_SetupStage+0x4a>
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d00a      	beq.n	800f9b2 <USBD_LL_SetupStage+0x5e>
 800f99c:	e01d      	b.n	800f9da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 fa62 	bl	800fe70 <USBD_StdDevReq>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f9b0:	e020      	b.n	800f9f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 fac6 	bl	800ff4c <USBD_StdItfReq>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f9c4:	e016      	b.n	800f9f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fb05 	bl	800ffde <USBD_StdEPReq>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f9d8:	e00c      	b.n	800f9f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f9e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f004 fd4f 	bl	801448c <USBD_LL_StallEP>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f2:	bf00      	nop
  }

  return ret;
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b086      	sub	sp, #24
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	60f8      	str	r0, [r7, #12]
 800fa06:	460b      	mov	r3, r1
 800fa08:	607a      	str	r2, [r7, #4]
 800fa0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fa0c:	7afb      	ldrb	r3, [r7, #11]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d138      	bne.n	800fa84 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fa18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d14a      	bne.n	800faba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	689a      	ldr	r2, [r3, #8]
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d913      	bls.n	800fa58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	1ad2      	subs	r2, r2, r3
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	68da      	ldr	r2, [r3, #12]
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	689b      	ldr	r3, [r3, #8]
 800fa46:	4293      	cmp	r3, r2
 800fa48:	bf28      	it	cs
 800fa4a:	4613      	movcs	r3, r2
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	6879      	ldr	r1, [r7, #4]
 800fa50:	68f8      	ldr	r0, [r7, #12]
 800fa52:	f001 f839 	bl	8010ac8 <USBD_CtlContinueRx>
 800fa56:	e030      	b.n	800faba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	2b03      	cmp	r3, #3
 800fa62:	d10b      	bne.n	800fa7c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa6a:	691b      	ldr	r3, [r3, #16]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d005      	beq.n	800fa7c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa76:	691b      	ldr	r3, [r3, #16]
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f001 f834 	bl	8010aea <USBD_CtlSendStatus>
 800fa82:	e01a      	b.n	800faba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d114      	bne.n	800faba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d00e      	beq.n	800faba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa2:	699b      	ldr	r3, [r3, #24]
 800faa4:	7afa      	ldrb	r2, [r7, #11]
 800faa6:	4611      	mov	r1, r2
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	4798      	blx	r3
 800faac:	4603      	mov	r3, r0
 800faae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fab0:	7dfb      	ldrb	r3, [r7, #23]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fab6:	7dfb      	ldrb	r3, [r7, #23]
 800fab8:	e000      	b.n	800fabc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3718      	adds	r7, #24
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b086      	sub	sp, #24
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	460b      	mov	r3, r1
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fad2:	7afb      	ldrb	r3, [r7, #11]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d16b      	bne.n	800fbb0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	3314      	adds	r3, #20
 800fadc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d156      	bne.n	800fb96 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	689a      	ldr	r2, [r3, #8]
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d914      	bls.n	800fb1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	689a      	ldr	r2, [r3, #8]
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	1ad2      	subs	r2, r2, r3
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	461a      	mov	r2, r3
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	68f8      	ldr	r0, [r7, #12]
 800fb0c:	f000 ffae 	bl	8010a6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb10:	2300      	movs	r3, #0
 800fb12:	2200      	movs	r2, #0
 800fb14:	2100      	movs	r1, #0
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f004 fdbe 	bl	8014698 <USBD_LL_PrepareReceive>
 800fb1c:	e03b      	b.n	800fb96 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	68da      	ldr	r2, [r3, #12]
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	689b      	ldr	r3, [r3, #8]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d11c      	bne.n	800fb64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	685a      	ldr	r2, [r3, #4]
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d316      	bcc.n	800fb64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	685a      	ldr	r2, [r3, #4]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d20f      	bcs.n	800fb64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fb44:	2200      	movs	r2, #0
 800fb46:	2100      	movs	r1, #0
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f000 ff8f 	bl	8010a6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fb56:	2300      	movs	r3, #0
 800fb58:	2200      	movs	r2, #0
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f004 fd9b 	bl	8014698 <USBD_LL_PrepareReceive>
 800fb62:	e018      	b.n	800fb96 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	2b03      	cmp	r3, #3
 800fb6e:	d10b      	bne.n	800fb88 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d005      	beq.n	800fb88 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb88:	2180      	movs	r1, #128	; 0x80
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	f004 fc7e 	bl	801448c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f000 ffbd 	bl	8010b10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d122      	bne.n	800fbe6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f7ff fe98 	bl	800f8d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fbae:	e01a      	b.n	800fbe6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	2b03      	cmp	r3, #3
 800fbba:	d114      	bne.n	800fbe6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00e      	beq.n	800fbe6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	7afa      	ldrb	r2, [r7, #11]
 800fbd2:	4611      	mov	r1, r2
 800fbd4:	68f8      	ldr	r0, [r7, #12]
 800fbd6:	4798      	blx	r3
 800fbd8:	4603      	mov	r3, r0
 800fbda:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fbe2:	7dfb      	ldrb	r3, [r7, #23]
 800fbe4:	e000      	b.n	800fbe8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3718      	adds	r7, #24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d101      	bne.n	800fc24 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fc20:	2303      	movs	r3, #3
 800fc22:	e02f      	b.n	800fc84 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00f      	beq.n	800fc4e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d009      	beq.n	800fc4e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	6852      	ldr	r2, [r2, #4]
 800fc46:	b2d2      	uxtb	r2, r2
 800fc48:	4611      	mov	r1, r2
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc4e:	2340      	movs	r3, #64	; 0x40
 800fc50:	2200      	movs	r2, #0
 800fc52:	2100      	movs	r1, #0
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f004 fba5 	bl	80143a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2240      	movs	r2, #64	; 0x40
 800fc66:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fc6a:	2340      	movs	r3, #64	; 0x40
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	2180      	movs	r1, #128	; 0x80
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f004 fb97 	bl	80143a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2201      	movs	r2, #1
 800fc7a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2240      	movs	r2, #64	; 0x40
 800fc80:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fc82:	2300      	movs	r3, #0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b083      	sub	sp, #12
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	460b      	mov	r3, r1
 800fc96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	78fa      	ldrb	r2, [r7, #3]
 800fc9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fc9e:	2300      	movs	r3, #0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2204      	movs	r2, #4
 800fcc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	2b04      	cmp	r3, #4
 800fcea:	d106      	bne.n	800fcfa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d101      	bne.n	800fd1e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e012      	b.n	800fd44 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d10b      	bne.n	800fd42 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd30:	69db      	ldr	r3, [r3, #28]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d005      	beq.n	800fd42 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fd42:	2300      	movs	r3, #0
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	460b      	mov	r3, r1
 800fd56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d101      	bne.n	800fd66 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e014      	b.n	800fd90 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b03      	cmp	r3, #3
 800fd70:	d10d      	bne.n	800fd8e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd78:	6a1b      	ldr	r3, [r3, #32]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d007      	beq.n	800fd8e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd84:	6a1b      	ldr	r3, [r3, #32]
 800fd86:	78fa      	ldrb	r2, [r7, #3]
 800fd88:	4611      	mov	r1, r2
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fd8e:	2300      	movs	r3, #0
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3708      	adds	r7, #8
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d101      	bne.n	800fdb2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fdae:	2303      	movs	r3, #3
 800fdb0:	e014      	b.n	800fddc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d10d      	bne.n	800fdda <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d007      	beq.n	800fdda <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd2:	78fa      	ldrb	r2, [r7, #3]
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fdda:	2300      	movs	r3, #0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	370c      	adds	r7, #12
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr

0800fdfa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b082      	sub	sp, #8
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2201      	movs	r2, #1
 800fe06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d009      	beq.n	800fe28 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	6852      	ldr	r2, [r2, #4]
 800fe20:	b2d2      	uxtb	r2, r2
 800fe22:	4611      	mov	r1, r2
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	4798      	blx	r3
  }

  return USBD_OK;
 800fe28:	2300      	movs	r3, #0
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b087      	sub	sp, #28
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	3301      	adds	r3, #1
 800fe48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fe50:	8a3b      	ldrh	r3, [r7, #16]
 800fe52:	021b      	lsls	r3, r3, #8
 800fe54:	b21a      	sxth	r2, r3
 800fe56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	b21b      	sxth	r3, r3
 800fe5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fe60:	89fb      	ldrh	r3, [r7, #14]
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	371c      	adds	r7, #28
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
	...

0800fe70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe86:	2b40      	cmp	r3, #64	; 0x40
 800fe88:	d005      	beq.n	800fe96 <USBD_StdDevReq+0x26>
 800fe8a:	2b40      	cmp	r3, #64	; 0x40
 800fe8c:	d853      	bhi.n	800ff36 <USBD_StdDevReq+0xc6>
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00b      	beq.n	800feaa <USBD_StdDevReq+0x3a>
 800fe92:	2b20      	cmp	r3, #32
 800fe94:	d14f      	bne.n	800ff36 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	6839      	ldr	r1, [r7, #0]
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	4798      	blx	r3
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]
      break;
 800fea8:	e04a      	b.n	800ff40 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	785b      	ldrb	r3, [r3, #1]
 800feae:	2b09      	cmp	r3, #9
 800feb0:	d83b      	bhi.n	800ff2a <USBD_StdDevReq+0xba>
 800feb2:	a201      	add	r2, pc, #4	; (adr r2, 800feb8 <USBD_StdDevReq+0x48>)
 800feb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb8:	0800ff0d 	.word	0x0800ff0d
 800febc:	0800ff21 	.word	0x0800ff21
 800fec0:	0800ff2b 	.word	0x0800ff2b
 800fec4:	0800ff17 	.word	0x0800ff17
 800fec8:	0800ff2b 	.word	0x0800ff2b
 800fecc:	0800feeb 	.word	0x0800feeb
 800fed0:	0800fee1 	.word	0x0800fee1
 800fed4:	0800ff2b 	.word	0x0800ff2b
 800fed8:	0800ff03 	.word	0x0800ff03
 800fedc:	0800fef5 	.word	0x0800fef5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fee0:	6839      	ldr	r1, [r7, #0]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f9de 	bl	80102a4 <USBD_GetDescriptor>
          break;
 800fee8:	e024      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800feea:	6839      	ldr	r1, [r7, #0]
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 fb6d 	bl	80105cc <USBD_SetAddress>
          break;
 800fef2:	e01f      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fef4:	6839      	ldr	r1, [r7, #0]
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 fbac 	bl	8010654 <USBD_SetConfig>
 800fefc:	4603      	mov	r3, r0
 800fefe:	73fb      	strb	r3, [r7, #15]
          break;
 800ff00:	e018      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 fc4b 	bl	80107a0 <USBD_GetConfig>
          break;
 800ff0a:	e013      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ff0c:	6839      	ldr	r1, [r7, #0]
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 fc7c 	bl	801080c <USBD_GetStatus>
          break;
 800ff14:	e00e      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fcab 	bl	8010874 <USBD_SetFeature>
          break;
 800ff1e:	e009      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ff20:	6839      	ldr	r1, [r7, #0]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 fcba 	bl	801089c <USBD_ClrFeature>
          break;
 800ff28:	e004      	b.n	800ff34 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fd11 	bl	8010954 <USBD_CtlError>
          break;
 800ff32:	bf00      	nop
      }
      break;
 800ff34:	e004      	b.n	800ff40 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ff36:	6839      	ldr	r1, [r7, #0]
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 fd0b 	bl	8010954 <USBD_CtlError>
      break;
 800ff3e:	bf00      	nop
  }

  return ret;
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop

0800ff4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff62:	2b40      	cmp	r3, #64	; 0x40
 800ff64:	d005      	beq.n	800ff72 <USBD_StdItfReq+0x26>
 800ff66:	2b40      	cmp	r3, #64	; 0x40
 800ff68:	d82f      	bhi.n	800ffca <USBD_StdItfReq+0x7e>
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <USBD_StdItfReq+0x26>
 800ff6e:	2b20      	cmp	r3, #32
 800ff70:	d12b      	bne.n	800ffca <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	d81d      	bhi.n	800ffbc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	889b      	ldrh	r3, [r3, #4]
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d813      	bhi.n	800ffb2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	4798      	blx	r3
 800ff98:	4603      	mov	r3, r0
 800ff9a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	88db      	ldrh	r3, [r3, #6]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d110      	bne.n	800ffc6 <USBD_StdItfReq+0x7a>
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10d      	bne.n	800ffc6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fd9d 	bl	8010aea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ffb0:	e009      	b.n	800ffc6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ffb2:	6839      	ldr	r1, [r7, #0]
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 fccd 	bl	8010954 <USBD_CtlError>
          break;
 800ffba:	e004      	b.n	800ffc6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ffbc:	6839      	ldr	r1, [r7, #0]
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f000 fcc8 	bl	8010954 <USBD_CtlError>
          break;
 800ffc4:	e000      	b.n	800ffc8 <USBD_StdItfReq+0x7c>
          break;
 800ffc6:	bf00      	nop
      }
      break;
 800ffc8:	e004      	b.n	800ffd4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ffca:	6839      	ldr	r1, [r7, #0]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 fcc1 	bl	8010954 <USBD_CtlError>
      break;
 800ffd2:	bf00      	nop
  }

  return ret;
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}

0800ffde <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b084      	sub	sp, #16
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
 800ffe6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	889b      	ldrh	r3, [r3, #4]
 800fff0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fffa:	2b40      	cmp	r3, #64	; 0x40
 800fffc:	d007      	beq.n	801000e <USBD_StdEPReq+0x30>
 800fffe:	2b40      	cmp	r3, #64	; 0x40
 8010000:	f200 8145 	bhi.w	801028e <USBD_StdEPReq+0x2b0>
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00c      	beq.n	8010022 <USBD_StdEPReq+0x44>
 8010008:	2b20      	cmp	r3, #32
 801000a:	f040 8140 	bne.w	801028e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	6839      	ldr	r1, [r7, #0]
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	4798      	blx	r3
 801001c:	4603      	mov	r3, r0
 801001e:	73fb      	strb	r3, [r7, #15]
      break;
 8010020:	e13a      	b.n	8010298 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	785b      	ldrb	r3, [r3, #1]
 8010026:	2b03      	cmp	r3, #3
 8010028:	d007      	beq.n	801003a <USBD_StdEPReq+0x5c>
 801002a:	2b03      	cmp	r3, #3
 801002c:	f300 8129 	bgt.w	8010282 <USBD_StdEPReq+0x2a4>
 8010030:	2b00      	cmp	r3, #0
 8010032:	d07f      	beq.n	8010134 <USBD_StdEPReq+0x156>
 8010034:	2b01      	cmp	r3, #1
 8010036:	d03c      	beq.n	80100b2 <USBD_StdEPReq+0xd4>
 8010038:	e123      	b.n	8010282 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010040:	b2db      	uxtb	r3, r3
 8010042:	2b02      	cmp	r3, #2
 8010044:	d002      	beq.n	801004c <USBD_StdEPReq+0x6e>
 8010046:	2b03      	cmp	r3, #3
 8010048:	d016      	beq.n	8010078 <USBD_StdEPReq+0x9a>
 801004a:	e02c      	b.n	80100a6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801004c:	7bbb      	ldrb	r3, [r7, #14]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00d      	beq.n	801006e <USBD_StdEPReq+0x90>
 8010052:	7bbb      	ldrb	r3, [r7, #14]
 8010054:	2b80      	cmp	r3, #128	; 0x80
 8010056:	d00a      	beq.n	801006e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010058:	7bbb      	ldrb	r3, [r7, #14]
 801005a:	4619      	mov	r1, r3
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f004 fa15 	bl	801448c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010062:	2180      	movs	r1, #128	; 0x80
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f004 fa11 	bl	801448c <USBD_LL_StallEP>
 801006a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801006c:	e020      	b.n	80100b0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801006e:	6839      	ldr	r1, [r7, #0]
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 fc6f 	bl	8010954 <USBD_CtlError>
              break;
 8010076:	e01b      	b.n	80100b0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	885b      	ldrh	r3, [r3, #2]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d10e      	bne.n	801009e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010080:	7bbb      	ldrb	r3, [r7, #14]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00b      	beq.n	801009e <USBD_StdEPReq+0xc0>
 8010086:	7bbb      	ldrb	r3, [r7, #14]
 8010088:	2b80      	cmp	r3, #128	; 0x80
 801008a:	d008      	beq.n	801009e <USBD_StdEPReq+0xc0>
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	88db      	ldrh	r3, [r3, #6]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d104      	bne.n	801009e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010094:	7bbb      	ldrb	r3, [r7, #14]
 8010096:	4619      	mov	r1, r3
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f004 f9f7 	bl	801448c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 fd23 	bl	8010aea <USBD_CtlSendStatus>

              break;
 80100a4:	e004      	b.n	80100b0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80100a6:	6839      	ldr	r1, [r7, #0]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f000 fc53 	bl	8010954 <USBD_CtlError>
              break;
 80100ae:	bf00      	nop
          }
          break;
 80100b0:	e0ec      	b.n	801028c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100b8:	b2db      	uxtb	r3, r3
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d002      	beq.n	80100c4 <USBD_StdEPReq+0xe6>
 80100be:	2b03      	cmp	r3, #3
 80100c0:	d016      	beq.n	80100f0 <USBD_StdEPReq+0x112>
 80100c2:	e030      	b.n	8010126 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80100c4:	7bbb      	ldrb	r3, [r7, #14]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d00d      	beq.n	80100e6 <USBD_StdEPReq+0x108>
 80100ca:	7bbb      	ldrb	r3, [r7, #14]
 80100cc:	2b80      	cmp	r3, #128	; 0x80
 80100ce:	d00a      	beq.n	80100e6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80100d0:	7bbb      	ldrb	r3, [r7, #14]
 80100d2:	4619      	mov	r1, r3
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f004 f9d9 	bl	801448c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80100da:	2180      	movs	r1, #128	; 0x80
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f004 f9d5 	bl	801448c <USBD_LL_StallEP>
 80100e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80100e4:	e025      	b.n	8010132 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80100e6:	6839      	ldr	r1, [r7, #0]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 fc33 	bl	8010954 <USBD_CtlError>
              break;
 80100ee:	e020      	b.n	8010132 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	885b      	ldrh	r3, [r3, #2]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d11b      	bne.n	8010130 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80100f8:	7bbb      	ldrb	r3, [r7, #14]
 80100fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d004      	beq.n	801010c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010102:	7bbb      	ldrb	r3, [r7, #14]
 8010104:	4619      	mov	r1, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f004 f9f6 	bl	80144f8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fcec 	bl	8010aea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	6839      	ldr	r1, [r7, #0]
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	4798      	blx	r3
 8010120:	4603      	mov	r3, r0
 8010122:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010124:	e004      	b.n	8010130 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010126:	6839      	ldr	r1, [r7, #0]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 fc13 	bl	8010954 <USBD_CtlError>
              break;
 801012e:	e000      	b.n	8010132 <USBD_StdEPReq+0x154>
              break;
 8010130:	bf00      	nop
          }
          break;
 8010132:	e0ab      	b.n	801028c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b02      	cmp	r3, #2
 801013e:	d002      	beq.n	8010146 <USBD_StdEPReq+0x168>
 8010140:	2b03      	cmp	r3, #3
 8010142:	d032      	beq.n	80101aa <USBD_StdEPReq+0x1cc>
 8010144:	e097      	b.n	8010276 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010146:	7bbb      	ldrb	r3, [r7, #14]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d007      	beq.n	801015c <USBD_StdEPReq+0x17e>
 801014c:	7bbb      	ldrb	r3, [r7, #14]
 801014e:	2b80      	cmp	r3, #128	; 0x80
 8010150:	d004      	beq.n	801015c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010152:	6839      	ldr	r1, [r7, #0]
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fbfd 	bl	8010954 <USBD_CtlError>
                break;
 801015a:	e091      	b.n	8010280 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801015c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010160:	2b00      	cmp	r3, #0
 8010162:	da0b      	bge.n	801017c <USBD_StdEPReq+0x19e>
 8010164:	7bbb      	ldrb	r3, [r7, #14]
 8010166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801016a:	4613      	mov	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	4413      	add	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	3310      	adds	r3, #16
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	4413      	add	r3, r2
 8010178:	3304      	adds	r3, #4
 801017a:	e00b      	b.n	8010194 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801017c:	7bbb      	ldrb	r3, [r7, #14]
 801017e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010182:	4613      	mov	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4413      	add	r3, r2
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	4413      	add	r3, r2
 8010192:	3304      	adds	r3, #4
 8010194:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	2200      	movs	r2, #0
 801019a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2202      	movs	r2, #2
 80101a0:	4619      	mov	r1, r3
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fc47 	bl	8010a36 <USBD_CtlSendData>
              break;
 80101a8:	e06a      	b.n	8010280 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80101aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	da11      	bge.n	80101d6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80101b2:	7bbb      	ldrb	r3, [r7, #14]
 80101b4:	f003 020f 	and.w	r2, r3, #15
 80101b8:	6879      	ldr	r1, [r7, #4]
 80101ba:	4613      	mov	r3, r2
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4413      	add	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	440b      	add	r3, r1
 80101c4:	3324      	adds	r3, #36	; 0x24
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d117      	bne.n	80101fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80101cc:	6839      	ldr	r1, [r7, #0]
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 fbc0 	bl	8010954 <USBD_CtlError>
                  break;
 80101d4:	e054      	b.n	8010280 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80101d6:	7bbb      	ldrb	r3, [r7, #14]
 80101d8:	f003 020f 	and.w	r2, r3, #15
 80101dc:	6879      	ldr	r1, [r7, #4]
 80101de:	4613      	mov	r3, r2
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	440b      	add	r3, r1
 80101e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d104      	bne.n	80101fc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80101f2:	6839      	ldr	r1, [r7, #0]
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 fbad 	bl	8010954 <USBD_CtlError>
                  break;
 80101fa:	e041      	b.n	8010280 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80101fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010200:	2b00      	cmp	r3, #0
 8010202:	da0b      	bge.n	801021c <USBD_StdEPReq+0x23e>
 8010204:	7bbb      	ldrb	r3, [r7, #14]
 8010206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801020a:	4613      	mov	r3, r2
 801020c:	009b      	lsls	r3, r3, #2
 801020e:	4413      	add	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	3310      	adds	r3, #16
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	4413      	add	r3, r2
 8010218:	3304      	adds	r3, #4
 801021a:	e00b      	b.n	8010234 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801021c:	7bbb      	ldrb	r3, [r7, #14]
 801021e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010222:	4613      	mov	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	4413      	add	r3, r2
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	4413      	add	r3, r2
 8010232:	3304      	adds	r3, #4
 8010234:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010236:	7bbb      	ldrb	r3, [r7, #14]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d002      	beq.n	8010242 <USBD_StdEPReq+0x264>
 801023c:	7bbb      	ldrb	r3, [r7, #14]
 801023e:	2b80      	cmp	r3, #128	; 0x80
 8010240:	d103      	bne.n	801024a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	2200      	movs	r2, #0
 8010246:	601a      	str	r2, [r3, #0]
 8010248:	e00e      	b.n	8010268 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801024a:	7bbb      	ldrb	r3, [r7, #14]
 801024c:	4619      	mov	r1, r3
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f004 f988 	bl	8014564 <USBD_LL_IsStallEP>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	2201      	movs	r2, #1
 801025e:	601a      	str	r2, [r3, #0]
 8010260:	e002      	b.n	8010268 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	2200      	movs	r2, #0
 8010266:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	2202      	movs	r2, #2
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 fbe1 	bl	8010a36 <USBD_CtlSendData>
              break;
 8010274:	e004      	b.n	8010280 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8010276:	6839      	ldr	r1, [r7, #0]
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 fb6b 	bl	8010954 <USBD_CtlError>
              break;
 801027e:	bf00      	nop
          }
          break;
 8010280:	e004      	b.n	801028c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fb65 	bl	8010954 <USBD_CtlError>
          break;
 801028a:	bf00      	nop
      }
      break;
 801028c:	e004      	b.n	8010298 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f000 fb5f 	bl	8010954 <USBD_CtlError>
      break;
 8010296:	bf00      	nop
  }

  return ret;
 8010298:	7bfb      	ldrb	r3, [r7, #15]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
	...

080102a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b084      	sub	sp, #16
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80102ae:	2300      	movs	r3, #0
 80102b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80102b6:	2300      	movs	r3, #0
 80102b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	885b      	ldrh	r3, [r3, #2]
 80102be:	0a1b      	lsrs	r3, r3, #8
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	3b01      	subs	r3, #1
 80102c4:	2b0e      	cmp	r3, #14
 80102c6:	f200 8152 	bhi.w	801056e <USBD_GetDescriptor+0x2ca>
 80102ca:	a201      	add	r2, pc, #4	; (adr r2, 80102d0 <USBD_GetDescriptor+0x2c>)
 80102cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102d0:	08010341 	.word	0x08010341
 80102d4:	08010359 	.word	0x08010359
 80102d8:	08010399 	.word	0x08010399
 80102dc:	0801056f 	.word	0x0801056f
 80102e0:	0801056f 	.word	0x0801056f
 80102e4:	0801050f 	.word	0x0801050f
 80102e8:	0801053b 	.word	0x0801053b
 80102ec:	0801056f 	.word	0x0801056f
 80102f0:	0801056f 	.word	0x0801056f
 80102f4:	0801056f 	.word	0x0801056f
 80102f8:	0801056f 	.word	0x0801056f
 80102fc:	0801056f 	.word	0x0801056f
 8010300:	0801056f 	.word	0x0801056f
 8010304:	0801056f 	.word	0x0801056f
 8010308:	0801030d 	.word	0x0801030d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010312:	69db      	ldr	r3, [r3, #28]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00b      	beq.n	8010330 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801031e:	69db      	ldr	r3, [r3, #28]
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	7c12      	ldrb	r2, [r2, #16]
 8010324:	f107 0108 	add.w	r1, r7, #8
 8010328:	4610      	mov	r0, r2
 801032a:	4798      	blx	r3
 801032c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801032e:	e126      	b.n	801057e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010330:	6839      	ldr	r1, [r7, #0]
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f000 fb0e 	bl	8010954 <USBD_CtlError>
        err++;
 8010338:	7afb      	ldrb	r3, [r7, #11]
 801033a:	3301      	adds	r3, #1
 801033c:	72fb      	strb	r3, [r7, #11]
      break;
 801033e:	e11e      	b.n	801057e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	7c12      	ldrb	r2, [r2, #16]
 801034c:	f107 0108 	add.w	r1, r7, #8
 8010350:	4610      	mov	r0, r2
 8010352:	4798      	blx	r3
 8010354:	60f8      	str	r0, [r7, #12]
      break;
 8010356:	e112      	b.n	801057e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	7c1b      	ldrb	r3, [r3, #16]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10d      	bne.n	801037c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010368:	f107 0208 	add.w	r2, r7, #8
 801036c:	4610      	mov	r0, r2
 801036e:	4798      	blx	r3
 8010370:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	3301      	adds	r3, #1
 8010376:	2202      	movs	r2, #2
 8010378:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801037a:	e100      	b.n	801057e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010384:	f107 0208 	add.w	r2, r7, #8
 8010388:	4610      	mov	r0, r2
 801038a:	4798      	blx	r3
 801038c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3301      	adds	r3, #1
 8010392:	2202      	movs	r2, #2
 8010394:	701a      	strb	r2, [r3, #0]
      break;
 8010396:	e0f2      	b.n	801057e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	885b      	ldrh	r3, [r3, #2]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b05      	cmp	r3, #5
 80103a0:	f200 80ac 	bhi.w	80104fc <USBD_GetDescriptor+0x258>
 80103a4:	a201      	add	r2, pc, #4	; (adr r2, 80103ac <USBD_GetDescriptor+0x108>)
 80103a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103aa:	bf00      	nop
 80103ac:	080103c5 	.word	0x080103c5
 80103b0:	080103f9 	.word	0x080103f9
 80103b4:	0801042d 	.word	0x0801042d
 80103b8:	08010461 	.word	0x08010461
 80103bc:	08010495 	.word	0x08010495
 80103c0:	080104c9 	.word	0x080104c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00b      	beq.n	80103e8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	7c12      	ldrb	r2, [r2, #16]
 80103dc:	f107 0108 	add.w	r1, r7, #8
 80103e0:	4610      	mov	r0, r2
 80103e2:	4798      	blx	r3
 80103e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80103e6:	e091      	b.n	801050c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80103e8:	6839      	ldr	r1, [r7, #0]
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 fab2 	bl	8010954 <USBD_CtlError>
            err++;
 80103f0:	7afb      	ldrb	r3, [r7, #11]
 80103f2:	3301      	adds	r3, #1
 80103f4:	72fb      	strb	r3, [r7, #11]
          break;
 80103f6:	e089      	b.n	801050c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103fe:	689b      	ldr	r3, [r3, #8]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00b      	beq.n	801041c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	7c12      	ldrb	r2, [r2, #16]
 8010410:	f107 0108 	add.w	r1, r7, #8
 8010414:	4610      	mov	r0, r2
 8010416:	4798      	blx	r3
 8010418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801041a:	e077      	b.n	801050c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 fa98 	bl	8010954 <USBD_CtlError>
            err++;
 8010424:	7afb      	ldrb	r3, [r7, #11]
 8010426:	3301      	adds	r3, #1
 8010428:	72fb      	strb	r3, [r7, #11]
          break;
 801042a:	e06f      	b.n	801050c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d00b      	beq.n	8010450 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	7c12      	ldrb	r2, [r2, #16]
 8010444:	f107 0108 	add.w	r1, r7, #8
 8010448:	4610      	mov	r0, r2
 801044a:	4798      	blx	r3
 801044c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801044e:	e05d      	b.n	801050c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	6878      	ldr	r0, [r7, #4]
 8010454:	f000 fa7e 	bl	8010954 <USBD_CtlError>
            err++;
 8010458:	7afb      	ldrb	r3, [r7, #11]
 801045a:	3301      	adds	r3, #1
 801045c:	72fb      	strb	r3, [r7, #11]
          break;
 801045e:	e055      	b.n	801050c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010466:	691b      	ldr	r3, [r3, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d00b      	beq.n	8010484 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	7c12      	ldrb	r2, [r2, #16]
 8010478:	f107 0108 	add.w	r1, r7, #8
 801047c:	4610      	mov	r0, r2
 801047e:	4798      	blx	r3
 8010480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010482:	e043      	b.n	801050c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010484:	6839      	ldr	r1, [r7, #0]
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f000 fa64 	bl	8010954 <USBD_CtlError>
            err++;
 801048c:	7afb      	ldrb	r3, [r7, #11]
 801048e:	3301      	adds	r3, #1
 8010490:	72fb      	strb	r3, [r7, #11]
          break;
 8010492:	e03b      	b.n	801050c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801049a:	695b      	ldr	r3, [r3, #20]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00b      	beq.n	80104b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104a6:	695b      	ldr	r3, [r3, #20]
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	7c12      	ldrb	r2, [r2, #16]
 80104ac:	f107 0108 	add.w	r1, r7, #8
 80104b0:	4610      	mov	r0, r2
 80104b2:	4798      	blx	r3
 80104b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104b6:	e029      	b.n	801050c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80104b8:	6839      	ldr	r1, [r7, #0]
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 fa4a 	bl	8010954 <USBD_CtlError>
            err++;
 80104c0:	7afb      	ldrb	r3, [r7, #11]
 80104c2:	3301      	adds	r3, #1
 80104c4:	72fb      	strb	r3, [r7, #11]
          break;
 80104c6:	e021      	b.n	801050c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104ce:	699b      	ldr	r3, [r3, #24]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00b      	beq.n	80104ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104da:	699b      	ldr	r3, [r3, #24]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	7c12      	ldrb	r2, [r2, #16]
 80104e0:	f107 0108 	add.w	r1, r7, #8
 80104e4:	4610      	mov	r0, r2
 80104e6:	4798      	blx	r3
 80104e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104ea:	e00f      	b.n	801050c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80104ec:	6839      	ldr	r1, [r7, #0]
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f000 fa30 	bl	8010954 <USBD_CtlError>
            err++;
 80104f4:	7afb      	ldrb	r3, [r7, #11]
 80104f6:	3301      	adds	r3, #1
 80104f8:	72fb      	strb	r3, [r7, #11]
          break;
 80104fa:	e007      	b.n	801050c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80104fc:	6839      	ldr	r1, [r7, #0]
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f000 fa28 	bl	8010954 <USBD_CtlError>
          err++;
 8010504:	7afb      	ldrb	r3, [r7, #11]
 8010506:	3301      	adds	r3, #1
 8010508:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801050a:	bf00      	nop
      }
      break;
 801050c:	e037      	b.n	801057e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	7c1b      	ldrb	r3, [r3, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d109      	bne.n	801052a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801051c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801051e:	f107 0208 	add.w	r2, r7, #8
 8010522:	4610      	mov	r0, r2
 8010524:	4798      	blx	r3
 8010526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010528:	e029      	b.n	801057e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801052a:	6839      	ldr	r1, [r7, #0]
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f000 fa11 	bl	8010954 <USBD_CtlError>
        err++;
 8010532:	7afb      	ldrb	r3, [r7, #11]
 8010534:	3301      	adds	r3, #1
 8010536:	72fb      	strb	r3, [r7, #11]
      break;
 8010538:	e021      	b.n	801057e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	7c1b      	ldrb	r3, [r3, #16]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10d      	bne.n	801055e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801054a:	f107 0208 	add.w	r2, r7, #8
 801054e:	4610      	mov	r0, r2
 8010550:	4798      	blx	r3
 8010552:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	3301      	adds	r3, #1
 8010558:	2207      	movs	r2, #7
 801055a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801055c:	e00f      	b.n	801057e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 f9f7 	bl	8010954 <USBD_CtlError>
        err++;
 8010566:	7afb      	ldrb	r3, [r7, #11]
 8010568:	3301      	adds	r3, #1
 801056a:	72fb      	strb	r3, [r7, #11]
      break;
 801056c:	e007      	b.n	801057e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801056e:	6839      	ldr	r1, [r7, #0]
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f9ef 	bl	8010954 <USBD_CtlError>
      err++;
 8010576:	7afb      	ldrb	r3, [r7, #11]
 8010578:	3301      	adds	r3, #1
 801057a:	72fb      	strb	r3, [r7, #11]
      break;
 801057c:	bf00      	nop
  }

  if (err != 0U)
 801057e:	7afb      	ldrb	r3, [r7, #11]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d11e      	bne.n	80105c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	88db      	ldrh	r3, [r3, #6]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d016      	beq.n	80105ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801058c:	893b      	ldrh	r3, [r7, #8]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00e      	beq.n	80105b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	88da      	ldrh	r2, [r3, #6]
 8010596:	893b      	ldrh	r3, [r7, #8]
 8010598:	4293      	cmp	r3, r2
 801059a:	bf28      	it	cs
 801059c:	4613      	movcs	r3, r2
 801059e:	b29b      	uxth	r3, r3
 80105a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80105a2:	893b      	ldrh	r3, [r7, #8]
 80105a4:	461a      	mov	r2, r3
 80105a6:	68f9      	ldr	r1, [r7, #12]
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 fa44 	bl	8010a36 <USBD_CtlSendData>
 80105ae:	e009      	b.n	80105c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80105b0:	6839      	ldr	r1, [r7, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 f9ce 	bl	8010954 <USBD_CtlError>
 80105b8:	e004      	b.n	80105c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 fa95 	bl	8010aea <USBD_CtlSendStatus>
 80105c0:	e000      	b.n	80105c4 <USBD_GetDescriptor+0x320>
    return;
 80105c2:	bf00      	nop
  }
}
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop

080105cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	889b      	ldrh	r3, [r3, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d131      	bne.n	8010642 <USBD_SetAddress+0x76>
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	88db      	ldrh	r3, [r3, #6]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d12d      	bne.n	8010642 <USBD_SetAddress+0x76>
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	885b      	ldrh	r3, [r3, #2]
 80105ea:	2b7f      	cmp	r3, #127	; 0x7f
 80105ec:	d829      	bhi.n	8010642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	885b      	ldrh	r3, [r3, #2]
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80105f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010600:	b2db      	uxtb	r3, r3
 8010602:	2b03      	cmp	r3, #3
 8010604:	d104      	bne.n	8010610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010606:	6839      	ldr	r1, [r7, #0]
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f000 f9a3 	bl	8010954 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801060e:	e01d      	b.n	801064c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	7bfa      	ldrb	r2, [r7, #15]
 8010614:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010618:	7bfb      	ldrb	r3, [r7, #15]
 801061a:	4619      	mov	r1, r3
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f003 ffcd 	bl	80145bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 fa61 	bl	8010aea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010628:	7bfb      	ldrb	r3, [r7, #15]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d004      	beq.n	8010638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2202      	movs	r2, #2
 8010632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010636:	e009      	b.n	801064c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010640:	e004      	b.n	801064c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010642:	6839      	ldr	r1, [r7, #0]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f985 	bl	8010954 <USBD_CtlError>
  }
}
 801064a:	bf00      	nop
 801064c:	bf00      	nop
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	885b      	ldrh	r3, [r3, #2]
 8010666:	b2da      	uxtb	r2, r3
 8010668:	4b4c      	ldr	r3, [pc, #304]	; (801079c <USBD_SetConfig+0x148>)
 801066a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801066c:	4b4b      	ldr	r3, [pc, #300]	; (801079c <USBD_SetConfig+0x148>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d905      	bls.n	8010680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010674:	6839      	ldr	r1, [r7, #0]
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f96c 	bl	8010954 <USBD_CtlError>
    return USBD_FAIL;
 801067c:	2303      	movs	r3, #3
 801067e:	e088      	b.n	8010792 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010686:	b2db      	uxtb	r3, r3
 8010688:	2b02      	cmp	r3, #2
 801068a:	d002      	beq.n	8010692 <USBD_SetConfig+0x3e>
 801068c:	2b03      	cmp	r3, #3
 801068e:	d025      	beq.n	80106dc <USBD_SetConfig+0x88>
 8010690:	e071      	b.n	8010776 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010692:	4b42      	ldr	r3, [pc, #264]	; (801079c <USBD_SetConfig+0x148>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d01c      	beq.n	80106d4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801069a:	4b40      	ldr	r3, [pc, #256]	; (801079c <USBD_SetConfig+0x148>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	461a      	mov	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80106a4:	4b3d      	ldr	r3, [pc, #244]	; (801079c <USBD_SetConfig+0x148>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	4619      	mov	r1, r3
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7ff f91e 	bl	800f8ec <USBD_SetClassConfig>
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d004      	beq.n	80106c4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f949 	bl	8010954 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80106c2:	e065      	b.n	8010790 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 fa10 	bl	8010aea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2203      	movs	r2, #3
 80106ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80106d2:	e05d      	b.n	8010790 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f000 fa08 	bl	8010aea <USBD_CtlSendStatus>
      break;
 80106da:	e059      	b.n	8010790 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80106dc:	4b2f      	ldr	r3, [pc, #188]	; (801079c <USBD_SetConfig+0x148>)
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d112      	bne.n	801070a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2202      	movs	r2, #2
 80106e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80106ec:	4b2b      	ldr	r3, [pc, #172]	; (801079c <USBD_SetConfig+0x148>)
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80106f6:	4b29      	ldr	r3, [pc, #164]	; (801079c <USBD_SetConfig+0x148>)
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	4619      	mov	r1, r3
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f7ff f911 	bl	800f924 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f9f1 	bl	8010aea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010708:	e042      	b.n	8010790 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801070a:	4b24      	ldr	r3, [pc, #144]	; (801079c <USBD_SetConfig+0x148>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d02a      	beq.n	801076e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	b2db      	uxtb	r3, r3
 801071e:	4619      	mov	r1, r3
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7ff f8ff 	bl	800f924 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010726:	4b1d      	ldr	r3, [pc, #116]	; (801079c <USBD_SetConfig+0x148>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010730:	4b1a      	ldr	r3, [pc, #104]	; (801079c <USBD_SetConfig+0x148>)
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff f8d8 	bl	800f8ec <USBD_SetClassConfig>
 801073c:	4603      	mov	r3, r0
 801073e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00f      	beq.n	8010766 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 f903 	bl	8010954 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	b2db      	uxtb	r3, r3
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff f8e4 	bl	800f924 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2202      	movs	r2, #2
 8010760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010764:	e014      	b.n	8010790 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f9bf 	bl	8010aea <USBD_CtlSendStatus>
      break;
 801076c:	e010      	b.n	8010790 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 f9bb 	bl	8010aea <USBD_CtlSendStatus>
      break;
 8010774:	e00c      	b.n	8010790 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010776:	6839      	ldr	r1, [r7, #0]
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 f8eb 	bl	8010954 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801077e:	4b07      	ldr	r3, [pc, #28]	; (801079c <USBD_SetConfig+0x148>)
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff f8cd 	bl	800f924 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801078a:	2303      	movs	r3, #3
 801078c:	73fb      	strb	r3, [r7, #15]
      break;
 801078e:	bf00      	nop
  }

  return ret;
 8010790:	7bfb      	ldrb	r3, [r7, #15]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	20000a78 	.word	0x20000a78

080107a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	88db      	ldrh	r3, [r3, #6]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d004      	beq.n	80107bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80107b2:	6839      	ldr	r1, [r7, #0]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f000 f8cd 	bl	8010954 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80107ba:	e023      	b.n	8010804 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	dc02      	bgt.n	80107ce <USBD_GetConfig+0x2e>
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dc03      	bgt.n	80107d4 <USBD_GetConfig+0x34>
 80107cc:	e015      	b.n	80107fa <USBD_GetConfig+0x5a>
 80107ce:	2b03      	cmp	r3, #3
 80107d0:	d00b      	beq.n	80107ea <USBD_GetConfig+0x4a>
 80107d2:	e012      	b.n	80107fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2200      	movs	r2, #0
 80107d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	3308      	adds	r3, #8
 80107de:	2201      	movs	r2, #1
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 f927 	bl	8010a36 <USBD_CtlSendData>
        break;
 80107e8:	e00c      	b.n	8010804 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	3304      	adds	r3, #4
 80107ee:	2201      	movs	r2, #1
 80107f0:	4619      	mov	r1, r3
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f000 f91f 	bl	8010a36 <USBD_CtlSendData>
        break;
 80107f8:	e004      	b.n	8010804 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80107fa:	6839      	ldr	r1, [r7, #0]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 f8a9 	bl	8010954 <USBD_CtlError>
        break;
 8010802:	bf00      	nop
}
 8010804:	bf00      	nop
 8010806:	3708      	adds	r7, #8
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801081c:	b2db      	uxtb	r3, r3
 801081e:	3b01      	subs	r3, #1
 8010820:	2b02      	cmp	r3, #2
 8010822:	d81e      	bhi.n	8010862 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	88db      	ldrh	r3, [r3, #6]
 8010828:	2b02      	cmp	r3, #2
 801082a:	d004      	beq.n	8010836 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f890 	bl	8010954 <USBD_CtlError>
        break;
 8010834:	e01a      	b.n	801086c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2201      	movs	r2, #1
 801083a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010842:	2b00      	cmp	r3, #0
 8010844:	d005      	beq.n	8010852 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	f043 0202 	orr.w	r2, r3, #2
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	330c      	adds	r3, #12
 8010856:	2202      	movs	r2, #2
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 f8eb 	bl	8010a36 <USBD_CtlSendData>
      break;
 8010860:	e004      	b.n	801086c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f875 	bl	8010954 <USBD_CtlError>
      break;
 801086a:	bf00      	nop
  }
}
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b082      	sub	sp, #8
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	885b      	ldrh	r3, [r3, #2]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d106      	bne.n	8010894 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2201      	movs	r2, #1
 801088a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 f92b 	bl	8010aea <USBD_CtlSendStatus>
  }
}
 8010894:	bf00      	nop
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	3b01      	subs	r3, #1
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	d80b      	bhi.n	80108cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	885b      	ldrh	r3, [r3, #2]
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d10c      	bne.n	80108d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f000 f910 	bl	8010aea <USBD_CtlSendStatus>
      }
      break;
 80108ca:	e004      	b.n	80108d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80108cc:	6839      	ldr	r1, [r7, #0]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 f840 	bl	8010954 <USBD_CtlError>
      break;
 80108d4:	e000      	b.n	80108d8 <USBD_ClrFeature+0x3c>
      break;
 80108d6:	bf00      	nop
  }
}
 80108d8:	bf00      	nop
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	781a      	ldrb	r2, [r3, #0]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	3301      	adds	r3, #1
 80108fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	781a      	ldrb	r2, [r3, #0]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	3301      	adds	r3, #1
 8010908:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801090a:	68f8      	ldr	r0, [r7, #12]
 801090c:	f7ff fa91 	bl	800fe32 <SWAPBYTE>
 8010910:	4603      	mov	r3, r0
 8010912:	461a      	mov	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	3301      	adds	r3, #1
 801091c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	3301      	adds	r3, #1
 8010922:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f7ff fa84 	bl	800fe32 <SWAPBYTE>
 801092a:	4603      	mov	r3, r0
 801092c:	461a      	mov	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	3301      	adds	r3, #1
 8010936:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	3301      	adds	r3, #1
 801093c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f7ff fa77 	bl	800fe32 <SWAPBYTE>
 8010944:	4603      	mov	r3, r0
 8010946:	461a      	mov	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	80da      	strh	r2, [r3, #6]
}
 801094c:	bf00      	nop
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801095e:	2180      	movs	r1, #128	; 0x80
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f003 fd93 	bl	801448c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010966:	2100      	movs	r1, #0
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f003 fd8f 	bl	801448c <USBD_LL_StallEP>
}
 801096e:	bf00      	nop
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b086      	sub	sp, #24
 801097a:	af00      	add	r7, sp, #0
 801097c:	60f8      	str	r0, [r7, #12]
 801097e:	60b9      	str	r1, [r7, #8]
 8010980:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010982:	2300      	movs	r3, #0
 8010984:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d036      	beq.n	80109fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010990:	6938      	ldr	r0, [r7, #16]
 8010992:	f000 f836 	bl	8010a02 <USBD_GetLen>
 8010996:	4603      	mov	r3, r0
 8010998:	3301      	adds	r3, #1
 801099a:	b29b      	uxth	r3, r3
 801099c:	005b      	lsls	r3, r3, #1
 801099e:	b29a      	uxth	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	68ba      	ldr	r2, [r7, #8]
 80109a8:	4413      	add	r3, r2
 80109aa:	687a      	ldr	r2, [r7, #4]
 80109ac:	7812      	ldrb	r2, [r2, #0]
 80109ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80109b0:	7dfb      	ldrb	r3, [r7, #23]
 80109b2:	3301      	adds	r3, #1
 80109b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80109b6:	7dfb      	ldrb	r3, [r7, #23]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	4413      	add	r3, r2
 80109bc:	2203      	movs	r2, #3
 80109be:	701a      	strb	r2, [r3, #0]
  idx++;
 80109c0:	7dfb      	ldrb	r3, [r7, #23]
 80109c2:	3301      	adds	r3, #1
 80109c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80109c6:	e013      	b.n	80109f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80109c8:	7dfb      	ldrb	r3, [r7, #23]
 80109ca:	68ba      	ldr	r2, [r7, #8]
 80109cc:	4413      	add	r3, r2
 80109ce:	693a      	ldr	r2, [r7, #16]
 80109d0:	7812      	ldrb	r2, [r2, #0]
 80109d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	3301      	adds	r3, #1
 80109d8:	613b      	str	r3, [r7, #16]
    idx++;
 80109da:	7dfb      	ldrb	r3, [r7, #23]
 80109dc:	3301      	adds	r3, #1
 80109de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80109e0:	7dfb      	ldrb	r3, [r7, #23]
 80109e2:	68ba      	ldr	r2, [r7, #8]
 80109e4:	4413      	add	r3, r2
 80109e6:	2200      	movs	r2, #0
 80109e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80109ea:	7dfb      	ldrb	r3, [r7, #23]
 80109ec:	3301      	adds	r3, #1
 80109ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80109f0:	693b      	ldr	r3, [r7, #16]
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1e7      	bne.n	80109c8 <USBD_GetString+0x52>
 80109f8:	e000      	b.n	80109fc <USBD_GetString+0x86>
    return;
 80109fa:	bf00      	nop
  }
}
 80109fc:	3718      	adds	r7, #24
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010a02:	b480      	push	{r7}
 8010a04:	b085      	sub	sp, #20
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010a12:	e005      	b.n	8010a20 <USBD_GetLen+0x1e>
  {
    len++;
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	3301      	adds	r3, #1
 8010a18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1f5      	bne.n	8010a14 <USBD_GetLen+0x12>
  }

  return len;
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3714      	adds	r7, #20
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a34:	4770      	bx	lr

08010a36 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b084      	sub	sp, #16
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	60f8      	str	r0, [r7, #12]
 8010a3e:	60b9      	str	r1, [r7, #8]
 8010a40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2202      	movs	r2, #2
 8010a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	68ba      	ldr	r2, [r7, #8]
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	f003 fde3 	bl	8014628 <USBD_LL_Transmit>

  return USBD_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	68f8      	ldr	r0, [r7, #12]
 8010a80:	f003 fdd2 	bl	8014628 <USBD_LL_Transmit>

  return USBD_OK;
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b084      	sub	sp, #16
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	60f8      	str	r0, [r7, #12]
 8010a96:	60b9      	str	r1, [r7, #8]
 8010a98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2203      	movs	r2, #3
 8010a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	687a      	ldr	r2, [r7, #4]
 8010aa6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68ba      	ldr	r2, [r7, #8]
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f003 fded 	bl	8014698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010abe:	2300      	movs	r3, #0
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	2100      	movs	r1, #0
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f003 fddc 	bl	8014698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b082      	sub	sp, #8
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2204      	movs	r2, #4
 8010af6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010afa:	2300      	movs	r3, #0
 8010afc:	2200      	movs	r2, #0
 8010afe:	2100      	movs	r1, #0
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f003 fd91 	bl	8014628 <USBD_LL_Transmit>

  return USBD_OK;
 8010b06:	2300      	movs	r3, #0
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2205      	movs	r2, #5
 8010b1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010b20:	2300      	movs	r3, #0
 8010b22:	2200      	movs	r2, #0
 8010b24:	2100      	movs	r1, #0
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f003 fdb6 	bl	8014698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
	...

08010b38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b087      	sub	sp, #28
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	4613      	mov	r3, r2
 8010b44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b46:	2301      	movs	r3, #1
 8010b48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010b4e:	4b1f      	ldr	r3, [pc, #124]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b50:	7a5b      	ldrb	r3, [r3, #9]
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d131      	bne.n	8010bbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b58:	4b1c      	ldr	r3, [pc, #112]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b5a:	7a5b      	ldrb	r3, [r3, #9]
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	461a      	mov	r2, r3
 8010b60:	4b1a      	ldr	r3, [pc, #104]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b62:	2100      	movs	r1, #0
 8010b64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b66:	4b19      	ldr	r3, [pc, #100]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b68:	7a5b      	ldrb	r3, [r3, #9]
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	4a17      	ldr	r2, [pc, #92]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	4413      	add	r3, r2
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b76:	4b15      	ldr	r3, [pc, #84]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b78:	7a5b      	ldrb	r3, [r3, #9]
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	4b13      	ldr	r3, [pc, #76]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b80:	4413      	add	r3, r2
 8010b82:	79fa      	ldrb	r2, [r7, #7]
 8010b84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b86:	4b11      	ldr	r3, [pc, #68]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b88:	7a5b      	ldrb	r3, [r3, #9]
 8010b8a:	b2db      	uxtb	r3, r3
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	b2d1      	uxtb	r1, r2
 8010b90:	4a0e      	ldr	r2, [pc, #56]	; (8010bcc <FATFS_LinkDriverEx+0x94>)
 8010b92:	7251      	strb	r1, [r2, #9]
 8010b94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b96:	7dbb      	ldrb	r3, [r7, #22]
 8010b98:	3330      	adds	r3, #48	; 0x30
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	223a      	movs	r2, #58	; 0x3a
 8010ba6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	3302      	adds	r3, #2
 8010bac:	222f      	movs	r2, #47	; 0x2f
 8010bae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	3303      	adds	r3, #3
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	371c      	adds	r7, #28
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	20000a7c 	.word	0x20000a7c

08010bd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010bda:	2200      	movs	r2, #0
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff ffaa 	bl	8010b38 <FATFS_LinkDriverEx>
 8010be4:	4603      	mov	r3, r0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
	...

08010bf0 <__NVIC_SetPriority>:
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	6039      	str	r1, [r7, #0]
 8010bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	db0a      	blt.n	8010c1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	490c      	ldr	r1, [pc, #48]	; (8010c3c <__NVIC_SetPriority+0x4c>)
 8010c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c0e:	0112      	lsls	r2, r2, #4
 8010c10:	b2d2      	uxtb	r2, r2
 8010c12:	440b      	add	r3, r1
 8010c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010c18:	e00a      	b.n	8010c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	4908      	ldr	r1, [pc, #32]	; (8010c40 <__NVIC_SetPriority+0x50>)
 8010c20:	79fb      	ldrb	r3, [r7, #7]
 8010c22:	f003 030f 	and.w	r3, r3, #15
 8010c26:	3b04      	subs	r3, #4
 8010c28:	0112      	lsls	r2, r2, #4
 8010c2a:	b2d2      	uxtb	r2, r2
 8010c2c:	440b      	add	r3, r1
 8010c2e:	761a      	strb	r2, [r3, #24]
}
 8010c30:	bf00      	nop
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	e000e100 	.word	0xe000e100
 8010c40:	e000ed00 	.word	0xe000ed00

08010c44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010c44:	b580      	push	{r7, lr}
 8010c46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010c48:	4b05      	ldr	r3, [pc, #20]	; (8010c60 <SysTick_Handler+0x1c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010c4c:	f001 ff5c 	bl	8012b08 <xTaskGetSchedulerState>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d001      	beq.n	8010c5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010c56:	f002 fd47 	bl	80136e8 <xPortSysTickHandler>
  }
}
 8010c5a:	bf00      	nop
 8010c5c:	bd80      	pop	{r7, pc}
 8010c5e:	bf00      	nop
 8010c60:	e000e010 	.word	0xe000e010

08010c64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010c64:	b580      	push	{r7, lr}
 8010c66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010c68:	2100      	movs	r1, #0
 8010c6a:	f06f 0004 	mvn.w	r0, #4
 8010c6e:	f7ff ffbf 	bl	8010bf0 <__NVIC_SetPriority>
#endif
}
 8010c72:	bf00      	nop
 8010c74:	bd80      	pop	{r7, pc}
	...

08010c78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c7e:	f3ef 8305 	mrs	r3, IPSR
 8010c82:	603b      	str	r3, [r7, #0]
  return(result);
 8010c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d003      	beq.n	8010c92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010c8a:	f06f 0305 	mvn.w	r3, #5
 8010c8e:	607b      	str	r3, [r7, #4]
 8010c90:	e00c      	b.n	8010cac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010c92:	4b0a      	ldr	r3, [pc, #40]	; (8010cbc <osKernelInitialize+0x44>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d105      	bne.n	8010ca6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010c9a:	4b08      	ldr	r3, [pc, #32]	; (8010cbc <osKernelInitialize+0x44>)
 8010c9c:	2201      	movs	r2, #1
 8010c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	607b      	str	r3, [r7, #4]
 8010ca4:	e002      	b.n	8010cac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010cac:	687b      	ldr	r3, [r7, #4]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	370c      	adds	r7, #12
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	20000a88 	.word	0x20000a88

08010cc0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010cc6:	f001 ff1f 	bl	8012b08 <xTaskGetSchedulerState>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d004      	beq.n	8010cda <osKernelGetState+0x1a>
 8010cd0:	2b02      	cmp	r3, #2
 8010cd2:	d105      	bne.n	8010ce0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8010cd4:	2302      	movs	r3, #2
 8010cd6:	607b      	str	r3, [r7, #4]
      break;
 8010cd8:	e00c      	b.n	8010cf4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8010cda:	2303      	movs	r3, #3
 8010cdc:	607b      	str	r3, [r7, #4]
      break;
 8010cde:	e009      	b.n	8010cf4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8010ce0:	4b07      	ldr	r3, [pc, #28]	; (8010d00 <osKernelGetState+0x40>)
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d102      	bne.n	8010cee <osKernelGetState+0x2e>
        state = osKernelReady;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8010cec:	e001      	b.n	8010cf2 <osKernelGetState+0x32>
        state = osKernelInactive;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	607b      	str	r3, [r7, #4]
      break;
 8010cf2:	bf00      	nop
  }

  return (state);
 8010cf4:	687b      	ldr	r3, [r7, #4]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20000a88 	.word	0x20000a88

08010d04 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d0a:	f3ef 8305 	mrs	r3, IPSR
 8010d0e:	603b      	str	r3, [r7, #0]
  return(result);
 8010d10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d003      	beq.n	8010d1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8010d16:	f06f 0305 	mvn.w	r3, #5
 8010d1a:	607b      	str	r3, [r7, #4]
 8010d1c:	e010      	b.n	8010d40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010d1e:	4b0b      	ldr	r3, [pc, #44]	; (8010d4c <osKernelStart+0x48>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d109      	bne.n	8010d3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010d26:	f7ff ff9d 	bl	8010c64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010d2a:	4b08      	ldr	r3, [pc, #32]	; (8010d4c <osKernelStart+0x48>)
 8010d2c:	2202      	movs	r2, #2
 8010d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010d30:	f001 fa7c 	bl	801222c <vTaskStartScheduler>
      stat = osOK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	607b      	str	r3, [r7, #4]
 8010d38:	e002      	b.n	8010d40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010d40:	687b      	ldr	r3, [r7, #4]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	20000a88 	.word	0x20000a88

08010d50 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b082      	sub	sp, #8
 8010d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d56:	f3ef 8305 	mrs	r3, IPSR
 8010d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8010d5c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d003      	beq.n	8010d6a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8010d62:	f001 fb8f 	bl	8012484 <xTaskGetTickCountFromISR>
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	e002      	b.n	8010d70 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8010d6a:	f001 fb7b 	bl	8012464 <xTaskGetTickCount>
 8010d6e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8010d70:	687b      	ldr	r3, [r7, #4]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b08e      	sub	sp, #56	; 0x38
 8010d7e:	af04      	add	r7, sp, #16
 8010d80:	60f8      	str	r0, [r7, #12]
 8010d82:	60b9      	str	r1, [r7, #8]
 8010d84:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d8a:	f3ef 8305 	mrs	r3, IPSR
 8010d8e:	617b      	str	r3, [r7, #20]
  return(result);
 8010d90:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d17e      	bne.n	8010e94 <osThreadNew+0x11a>
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d07b      	beq.n	8010e94 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010d9c:	2380      	movs	r3, #128	; 0x80
 8010d9e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010da0:	2318      	movs	r3, #24
 8010da2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010da4:	2300      	movs	r3, #0
 8010da6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d045      	beq.n	8010e40 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <osThreadNew+0x48>
        name = attr->name;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	699b      	ldr	r3, [r3, #24]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	699b      	ldr	r3, [r3, #24]
 8010dce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d008      	beq.n	8010de8 <osThreadNew+0x6e>
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	2b38      	cmp	r3, #56	; 0x38
 8010dda:	d805      	bhi.n	8010de8 <osThreadNew+0x6e>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d001      	beq.n	8010dec <osThreadNew+0x72>
        return (NULL);
 8010de8:	2300      	movs	r3, #0
 8010dea:	e054      	b.n	8010e96 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	695b      	ldr	r3, [r3, #20]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d003      	beq.n	8010dfc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	695b      	ldr	r3, [r3, #20]
 8010df8:	089b      	lsrs	r3, r3, #2
 8010dfa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	689b      	ldr	r3, [r3, #8]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00e      	beq.n	8010e22 <osThreadNew+0xa8>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	2bbb      	cmp	r3, #187	; 0xbb
 8010e0a:	d90a      	bls.n	8010e22 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d006      	beq.n	8010e22 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	695b      	ldr	r3, [r3, #20]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <osThreadNew+0xa8>
        mem = 1;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	61bb      	str	r3, [r7, #24]
 8010e20:	e010      	b.n	8010e44 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10c      	bne.n	8010e44 <osThreadNew+0xca>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d108      	bne.n	8010e44 <osThreadNew+0xca>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	691b      	ldr	r3, [r3, #16]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d104      	bne.n	8010e44 <osThreadNew+0xca>
          mem = 0;
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	61bb      	str	r3, [r7, #24]
 8010e3e:	e001      	b.n	8010e44 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010e40:	2300      	movs	r3, #0
 8010e42:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d110      	bne.n	8010e6c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010e52:	9202      	str	r2, [sp, #8]
 8010e54:	9301      	str	r3, [sp, #4]
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	9300      	str	r3, [sp, #0]
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	6a3a      	ldr	r2, [r7, #32]
 8010e5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f000 fff7 	bl	8011e54 <xTaskCreateStatic>
 8010e66:	4603      	mov	r3, r0
 8010e68:	613b      	str	r3, [r7, #16]
 8010e6a:	e013      	b.n	8010e94 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d110      	bne.n	8010e94 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010e72:	6a3b      	ldr	r3, [r7, #32]
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	f107 0310 	add.w	r3, r7, #16
 8010e7a:	9301      	str	r3, [sp, #4]
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	9300      	str	r3, [sp, #0]
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e84:	68f8      	ldr	r0, [r7, #12]
 8010e86:	f001 f842 	bl	8011f0e <xTaskCreate>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d001      	beq.n	8010e94 <osThreadNew+0x11a>
            hTask = NULL;
 8010e90:	2300      	movs	r3, #0
 8010e92:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010e94:	693b      	ldr	r3, [r7, #16]
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3728      	adds	r7, #40	; 0x28
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b084      	sub	sp, #16
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ea6:	f3ef 8305 	mrs	r3, IPSR
 8010eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8010eac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d003      	beq.n	8010eba <osDelay+0x1c>
    stat = osErrorISR;
 8010eb2:	f06f 0305 	mvn.w	r3, #5
 8010eb6:	60fb      	str	r3, [r7, #12]
 8010eb8:	e007      	b.n	8010eca <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <osDelay+0x2c>
      vTaskDelay(ticks);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f001 f97d 	bl	80121c4 <vTaskDelay>
    }
  }

  return (stat);
 8010eca:	68fb      	ldr	r3, [r7, #12]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b08a      	sub	sp, #40	; 0x28
 8010ed8:	af02      	add	r7, sp, #8
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ee4:	f3ef 8305 	mrs	r3, IPSR
 8010ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8010eea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d15f      	bne.n	8010fb0 <osMessageQueueNew+0xdc>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d05c      	beq.n	8010fb0 <osMessageQueueNew+0xdc>
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d059      	beq.n	8010fb0 <osMessageQueueNew+0xdc>
    mem = -1;
 8010efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d029      	beq.n	8010f5c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	689b      	ldr	r3, [r3, #8]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d012      	beq.n	8010f36 <osMessageQueueNew+0x62>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	2b4f      	cmp	r3, #79	; 0x4f
 8010f16:	d90e      	bls.n	8010f36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00a      	beq.n	8010f36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	695a      	ldr	r2, [r3, #20]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	68b9      	ldr	r1, [r7, #8]
 8010f28:	fb01 f303 	mul.w	r3, r1, r3
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	d302      	bcc.n	8010f36 <osMessageQueueNew+0x62>
        mem = 1;
 8010f30:	2301      	movs	r3, #1
 8010f32:	61bb      	str	r3, [r7, #24]
 8010f34:	e014      	b.n	8010f60 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d110      	bne.n	8010f60 <osMessageQueueNew+0x8c>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10c      	bne.n	8010f60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d108      	bne.n	8010f60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	695b      	ldr	r3, [r3, #20]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d104      	bne.n	8010f60 <osMessageQueueNew+0x8c>
          mem = 0;
 8010f56:	2300      	movs	r3, #0
 8010f58:	61bb      	str	r3, [r7, #24]
 8010f5a:	e001      	b.n	8010f60 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	2b01      	cmp	r3, #1
 8010f64:	d10b      	bne.n	8010f7e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	691a      	ldr	r2, [r3, #16]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	2100      	movs	r1, #0
 8010f70:	9100      	str	r1, [sp, #0]
 8010f72:	68b9      	ldr	r1, [r7, #8]
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f000 fa2f 	bl	80113d8 <xQueueGenericCreateStatic>
 8010f7a:	61f8      	str	r0, [r7, #28]
 8010f7c:	e008      	b.n	8010f90 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d105      	bne.n	8010f90 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010f84:	2200      	movs	r2, #0
 8010f86:	68b9      	ldr	r1, [r7, #8]
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f000 fa9d 	bl	80114c8 <xQueueGenericCreate>
 8010f8e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d00c      	beq.n	8010fb0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d003      	beq.n	8010fa4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	617b      	str	r3, [r7, #20]
 8010fa2:	e001      	b.n	8010fa8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010fa8:	6979      	ldr	r1, [r7, #20]
 8010faa:	69f8      	ldr	r0, [r7, #28]
 8010fac:	f000 fef4 	bl	8011d98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010fb0:	69fb      	ldr	r3, [r7, #28]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3720      	adds	r7, #32
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b088      	sub	sp, #32
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	60f8      	str	r0, [r7, #12]
 8010fc4:	60b9      	str	r1, [r7, #8]
 8010fc6:	603b      	str	r3, [r7, #0]
 8010fc8:	4613      	mov	r3, r2
 8010fca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fd4:	f3ef 8305 	mrs	r3, IPSR
 8010fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8010fda:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d028      	beq.n	8011032 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010fe0:	69bb      	ldr	r3, [r7, #24]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d005      	beq.n	8010ff2 <osMessageQueuePut+0x36>
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d002      	beq.n	8010ff2 <osMessageQueuePut+0x36>
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d003      	beq.n	8010ffa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010ff2:	f06f 0303 	mvn.w	r3, #3
 8010ff6:	61fb      	str	r3, [r7, #28]
 8010ff8:	e038      	b.n	801106c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010ffe:	f107 0210 	add.w	r2, r7, #16
 8011002:	2300      	movs	r3, #0
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	69b8      	ldr	r0, [r7, #24]
 8011008:	f000 fbba 	bl	8011780 <xQueueGenericSendFromISR>
 801100c:	4603      	mov	r3, r0
 801100e:	2b01      	cmp	r3, #1
 8011010:	d003      	beq.n	801101a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8011012:	f06f 0302 	mvn.w	r3, #2
 8011016:	61fb      	str	r3, [r7, #28]
 8011018:	e028      	b.n	801106c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d025      	beq.n	801106c <osMessageQueuePut+0xb0>
 8011020:	4b15      	ldr	r3, [pc, #84]	; (8011078 <osMessageQueuePut+0xbc>)
 8011022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011026:	601a      	str	r2, [r3, #0]
 8011028:	f3bf 8f4f 	dsb	sy
 801102c:	f3bf 8f6f 	isb	sy
 8011030:	e01c      	b.n	801106c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <osMessageQueuePut+0x82>
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d103      	bne.n	8011046 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801103e:	f06f 0303 	mvn.w	r3, #3
 8011042:	61fb      	str	r3, [r7, #28]
 8011044:	e012      	b.n	801106c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011046:	2300      	movs	r3, #0
 8011048:	683a      	ldr	r2, [r7, #0]
 801104a:	68b9      	ldr	r1, [r7, #8]
 801104c:	69b8      	ldr	r0, [r7, #24]
 801104e:	f000 fa99 	bl	8011584 <xQueueGenericSend>
 8011052:	4603      	mov	r3, r0
 8011054:	2b01      	cmp	r3, #1
 8011056:	d009      	beq.n	801106c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d003      	beq.n	8011066 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801105e:	f06f 0301 	mvn.w	r3, #1
 8011062:	61fb      	str	r3, [r7, #28]
 8011064:	e002      	b.n	801106c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011066:	f06f 0302 	mvn.w	r3, #2
 801106a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801106c:	69fb      	ldr	r3, [r7, #28]
}
 801106e:	4618      	mov	r0, r3
 8011070:	3720      	adds	r7, #32
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	e000ed04 	.word	0xe000ed04

0801107c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801107c:	b580      	push	{r7, lr}
 801107e:	b088      	sub	sp, #32
 8011080:	af00      	add	r7, sp, #0
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	607a      	str	r2, [r7, #4]
 8011088:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801108e:	2300      	movs	r3, #0
 8011090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011092:	f3ef 8305 	mrs	r3, IPSR
 8011096:	617b      	str	r3, [r7, #20]
  return(result);
 8011098:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801109a:	2b00      	cmp	r3, #0
 801109c:	d028      	beq.n	80110f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d005      	beq.n	80110b0 <osMessageQueueGet+0x34>
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d002      	beq.n	80110b0 <osMessageQueueGet+0x34>
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d003      	beq.n	80110b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80110b0:	f06f 0303 	mvn.w	r3, #3
 80110b4:	61fb      	str	r3, [r7, #28]
 80110b6:	e037      	b.n	8011128 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80110b8:	2300      	movs	r3, #0
 80110ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80110bc:	f107 0310 	add.w	r3, r7, #16
 80110c0:	461a      	mov	r2, r3
 80110c2:	68b9      	ldr	r1, [r7, #8]
 80110c4:	69b8      	ldr	r0, [r7, #24]
 80110c6:	f000 fcd7 	bl	8011a78 <xQueueReceiveFromISR>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d003      	beq.n	80110d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80110d0:	f06f 0302 	mvn.w	r3, #2
 80110d4:	61fb      	str	r3, [r7, #28]
 80110d6:	e027      	b.n	8011128 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d024      	beq.n	8011128 <osMessageQueueGet+0xac>
 80110de:	4b15      	ldr	r3, [pc, #84]	; (8011134 <osMessageQueueGet+0xb8>)
 80110e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	f3bf 8f6f 	isb	sy
 80110ee:	e01b      	b.n	8011128 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d002      	beq.n	80110fc <osMessageQueueGet+0x80>
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d103      	bne.n	8011104 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80110fc:	f06f 0303 	mvn.w	r3, #3
 8011100:	61fb      	str	r3, [r7, #28]
 8011102:	e011      	b.n	8011128 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011104:	683a      	ldr	r2, [r7, #0]
 8011106:	68b9      	ldr	r1, [r7, #8]
 8011108:	69b8      	ldr	r0, [r7, #24]
 801110a:	f000 fbd5 	bl	80118b8 <xQueueReceive>
 801110e:	4603      	mov	r3, r0
 8011110:	2b01      	cmp	r3, #1
 8011112:	d009      	beq.n	8011128 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d003      	beq.n	8011122 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801111a:	f06f 0301 	mvn.w	r3, #1
 801111e:	61fb      	str	r3, [r7, #28]
 8011120:	e002      	b.n	8011128 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8011122:	f06f 0302 	mvn.w	r3, #2
 8011126:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011128:	69fb      	ldr	r3, [r7, #28]
}
 801112a:	4618      	mov	r0, r3
 801112c:	3720      	adds	r7, #32
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	e000ed04 	.word	0xe000ed04

08011138 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011138:	b480      	push	{r7}
 801113a:	b085      	sub	sp, #20
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	4a07      	ldr	r2, [pc, #28]	; (8011164 <vApplicationGetIdleTaskMemory+0x2c>)
 8011148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	4a06      	ldr	r2, [pc, #24]	; (8011168 <vApplicationGetIdleTaskMemory+0x30>)
 801114e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2280      	movs	r2, #128	; 0x80
 8011154:	601a      	str	r2, [r3, #0]
}
 8011156:	bf00      	nop
 8011158:	3714      	adds	r7, #20
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	20000a8c 	.word	0x20000a8c
 8011168:	20000b48 	.word	0x20000b48

0801116c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801116c:	b480      	push	{r7}
 801116e:	b085      	sub	sp, #20
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	4a07      	ldr	r2, [pc, #28]	; (8011198 <vApplicationGetTimerTaskMemory+0x2c>)
 801117c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	4a06      	ldr	r2, [pc, #24]	; (801119c <vApplicationGetTimerTaskMemory+0x30>)
 8011182:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f44f 7280 	mov.w	r2, #256	; 0x100
 801118a:	601a      	str	r2, [r3, #0]
}
 801118c:	bf00      	nop
 801118e:	3714      	adds	r7, #20
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr
 8011198:	20000d48 	.word	0x20000d48
 801119c:	20000e04 	.word	0x20000e04

080111a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80111a0:	b480      	push	{r7}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f103 0208 	add.w	r2, r3, #8
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80111b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f103 0208 	add.w	r2, r3, #8
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f103 0208 	add.w	r2, r3, #8
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2200      	movs	r2, #0
 80111d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80111d4:	bf00      	nop
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80111ee:	bf00      	nop
 80111f0:	370c      	adds	r7, #12
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80111fa:	b480      	push	{r7}
 80111fc:	b085      	sub	sp, #20
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	689a      	ldr	r2, [r3, #8]
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	683a      	ldr	r2, [r7, #0]
 801121e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	601a      	str	r2, [r3, #0]
}
 8011236:	bf00      	nop
 8011238:	3714      	adds	r7, #20
 801123a:	46bd      	mov	sp, r7
 801123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011240:	4770      	bx	lr

08011242 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011242:	b480      	push	{r7}
 8011244:	b085      	sub	sp, #20
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
 801124a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011258:	d103      	bne.n	8011262 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	60fb      	str	r3, [r7, #12]
 8011260:	e00c      	b.n	801127c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	3308      	adds	r3, #8
 8011266:	60fb      	str	r3, [r7, #12]
 8011268:	e002      	b.n	8011270 <vListInsert+0x2e>
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	60fb      	str	r3, [r7, #12]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	685b      	ldr	r3, [r3, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	429a      	cmp	r2, r3
 801127a:	d2f6      	bcs.n	801126a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	685a      	ldr	r2, [r3, #4]
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	683a      	ldr	r2, [r7, #0]
 801128a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	68fa      	ldr	r2, [r7, #12]
 8011290:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	683a      	ldr	r2, [r7, #0]
 8011296:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	1c5a      	adds	r2, r3, #1
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	601a      	str	r2, [r3, #0]
}
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr

080112b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80112b4:	b480      	push	{r7}
 80112b6:	b085      	sub	sp, #20
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	6892      	ldr	r2, [r2, #8]
 80112ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	689b      	ldr	r3, [r3, #8]
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	6852      	ldr	r2, [r2, #4]
 80112d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d103      	bne.n	80112e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	689a      	ldr	r2, [r3, #8]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	1e5a      	subs	r2, r3, #1
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3714      	adds	r7, #20
 8011300:	46bd      	mov	sp, r7
 8011302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011306:	4770      	bx	lr

08011308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d10a      	bne.n	8011332 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801131c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011320:	f383 8811 	msr	BASEPRI, r3
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	f3bf 8f4f 	dsb	sy
 801132c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801132e:	bf00      	nop
 8011330:	e7fe      	b.n	8011330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011332:	f002 f947 	bl	80135c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801133e:	68f9      	ldr	r1, [r7, #12]
 8011340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011342:	fb01 f303 	mul.w	r3, r1, r3
 8011346:	441a      	add	r2, r3
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2200      	movs	r2, #0
 8011350:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011362:	3b01      	subs	r3, #1
 8011364:	68f9      	ldr	r1, [r7, #12]
 8011366:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011368:	fb01 f303 	mul.w	r3, r1, r3
 801136c:	441a      	add	r2, r3
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	22ff      	movs	r2, #255	; 0xff
 8011376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	22ff      	movs	r2, #255	; 0xff
 801137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d114      	bne.n	80113b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	691b      	ldr	r3, [r3, #16]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d01a      	beq.n	80113c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	3310      	adds	r3, #16
 8011394:	4618      	mov	r0, r3
 8011396:	f001 f9f5 	bl	8012784 <xTaskRemoveFromEventList>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d012      	beq.n	80113c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80113a0:	4b0c      	ldr	r3, [pc, #48]	; (80113d4 <xQueueGenericReset+0xcc>)
 80113a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	e009      	b.n	80113c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3310      	adds	r3, #16
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff fef2 	bl	80111a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	3324      	adds	r3, #36	; 0x24
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7ff feed 	bl	80111a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80113c6:	f002 f92d 	bl	8013624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80113ca:	2301      	movs	r3, #1
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3710      	adds	r7, #16
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	e000ed04 	.word	0xe000ed04

080113d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b08e      	sub	sp, #56	; 0x38
 80113dc:	af02      	add	r7, sp, #8
 80113de:	60f8      	str	r0, [r7, #12]
 80113e0:	60b9      	str	r1, [r7, #8]
 80113e2:	607a      	str	r2, [r7, #4]
 80113e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d10a      	bne.n	8011402 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80113fe:	bf00      	nop
 8011400:	e7fe      	b.n	8011400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10a      	bne.n	801141e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140c:	f383 8811 	msr	BASEPRI, r3
 8011410:	f3bf 8f6f 	isb	sy
 8011414:	f3bf 8f4f 	dsb	sy
 8011418:	627b      	str	r3, [r7, #36]	; 0x24
}
 801141a:	bf00      	nop
 801141c:	e7fe      	b.n	801141c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d002      	beq.n	801142a <xQueueGenericCreateStatic+0x52>
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d001      	beq.n	801142e <xQueueGenericCreateStatic+0x56>
 801142a:	2301      	movs	r3, #1
 801142c:	e000      	b.n	8011430 <xQueueGenericCreateStatic+0x58>
 801142e:	2300      	movs	r3, #0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10a      	bne.n	801144a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	623b      	str	r3, [r7, #32]
}
 8011446:	bf00      	nop
 8011448:	e7fe      	b.n	8011448 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <xQueueGenericCreateStatic+0x7e>
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d101      	bne.n	801145a <xQueueGenericCreateStatic+0x82>
 8011456:	2301      	movs	r3, #1
 8011458:	e000      	b.n	801145c <xQueueGenericCreateStatic+0x84>
 801145a:	2300      	movs	r3, #0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10a      	bne.n	8011476 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011464:	f383 8811 	msr	BASEPRI, r3
 8011468:	f3bf 8f6f 	isb	sy
 801146c:	f3bf 8f4f 	dsb	sy
 8011470:	61fb      	str	r3, [r7, #28]
}
 8011472:	bf00      	nop
 8011474:	e7fe      	b.n	8011474 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011476:	2350      	movs	r3, #80	; 0x50
 8011478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	2b50      	cmp	r3, #80	; 0x50
 801147e:	d00a      	beq.n	8011496 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	61bb      	str	r3, [r7, #24]
}
 8011492:	bf00      	nop
 8011494:	e7fe      	b.n	8011494 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00d      	beq.n	80114be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80114a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a4:	2201      	movs	r2, #1
 80114a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80114aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80114ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	4613      	mov	r3, r2
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	68b9      	ldr	r1, [r7, #8]
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f000 f83f 	bl	801153c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80114be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3730      	adds	r7, #48	; 0x30
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b08a      	sub	sp, #40	; 0x28
 80114cc:	af02      	add	r7, sp, #8
 80114ce:	60f8      	str	r0, [r7, #12]
 80114d0:	60b9      	str	r1, [r7, #8]
 80114d2:	4613      	mov	r3, r2
 80114d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d10a      	bne.n	80114f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80114dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	613b      	str	r3, [r7, #16]
}
 80114ee:	bf00      	nop
 80114f0:	e7fe      	b.n	80114f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	fb02 f303 	mul.w	r3, r2, r3
 80114fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	3350      	adds	r3, #80	; 0x50
 8011500:	4618      	mov	r0, r3
 8011502:	f002 f981 	bl	8013808 <pvPortMalloc>
 8011506:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d011      	beq.n	8011532 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	3350      	adds	r3, #80	; 0x50
 8011516:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	2200      	movs	r2, #0
 801151c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011520:	79fa      	ldrb	r2, [r7, #7]
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	9300      	str	r3, [sp, #0]
 8011526:	4613      	mov	r3, r2
 8011528:	697a      	ldr	r2, [r7, #20]
 801152a:	68b9      	ldr	r1, [r7, #8]
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	f000 f805 	bl	801153c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011532:	69bb      	ldr	r3, [r7, #24]
	}
 8011534:	4618      	mov	r0, r3
 8011536:	3720      	adds	r7, #32
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
 8011548:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d103      	bne.n	8011558 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011550:	69bb      	ldr	r3, [r7, #24]
 8011552:	69ba      	ldr	r2, [r7, #24]
 8011554:	601a      	str	r2, [r3, #0]
 8011556:	e002      	b.n	801155e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011558:	69bb      	ldr	r3, [r7, #24]
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011564:	69bb      	ldr	r3, [r7, #24]
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801156a:	2101      	movs	r1, #1
 801156c:	69b8      	ldr	r0, [r7, #24]
 801156e:	f7ff fecb 	bl	8011308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	78fa      	ldrb	r2, [r7, #3]
 8011576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801157a:	bf00      	nop
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
	...

08011584 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b08e      	sub	sp, #56	; 0x38
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011592:	2300      	movs	r3, #0
 8011594:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	2b00      	cmp	r3, #0
 801159e:	d10a      	bne.n	80115b6 <xQueueGenericSend+0x32>
	__asm volatile
 80115a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80115b2:	bf00      	nop
 80115b4:	e7fe      	b.n	80115b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d103      	bne.n	80115c4 <xQueueGenericSend+0x40>
 80115bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d101      	bne.n	80115c8 <xQueueGenericSend+0x44>
 80115c4:	2301      	movs	r3, #1
 80115c6:	e000      	b.n	80115ca <xQueueGenericSend+0x46>
 80115c8:	2300      	movs	r3, #0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d10a      	bne.n	80115e4 <xQueueGenericSend+0x60>
	__asm volatile
 80115ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d2:	f383 8811 	msr	BASEPRI, r3
 80115d6:	f3bf 8f6f 	isb	sy
 80115da:	f3bf 8f4f 	dsb	sy
 80115de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80115e0:	bf00      	nop
 80115e2:	e7fe      	b.n	80115e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d103      	bne.n	80115f2 <xQueueGenericSend+0x6e>
 80115ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d101      	bne.n	80115f6 <xQueueGenericSend+0x72>
 80115f2:	2301      	movs	r3, #1
 80115f4:	e000      	b.n	80115f8 <xQueueGenericSend+0x74>
 80115f6:	2300      	movs	r3, #0
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d10a      	bne.n	8011612 <xQueueGenericSend+0x8e>
	__asm volatile
 80115fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011600:	f383 8811 	msr	BASEPRI, r3
 8011604:	f3bf 8f6f 	isb	sy
 8011608:	f3bf 8f4f 	dsb	sy
 801160c:	623b      	str	r3, [r7, #32]
}
 801160e:	bf00      	nop
 8011610:	e7fe      	b.n	8011610 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011612:	f001 fa79 	bl	8012b08 <xTaskGetSchedulerState>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d102      	bne.n	8011622 <xQueueGenericSend+0x9e>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d101      	bne.n	8011626 <xQueueGenericSend+0xa2>
 8011622:	2301      	movs	r3, #1
 8011624:	e000      	b.n	8011628 <xQueueGenericSend+0xa4>
 8011626:	2300      	movs	r3, #0
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10a      	bne.n	8011642 <xQueueGenericSend+0xbe>
	__asm volatile
 801162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011630:	f383 8811 	msr	BASEPRI, r3
 8011634:	f3bf 8f6f 	isb	sy
 8011638:	f3bf 8f4f 	dsb	sy
 801163c:	61fb      	str	r3, [r7, #28]
}
 801163e:	bf00      	nop
 8011640:	e7fe      	b.n	8011640 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011642:	f001 ffbf 	bl	80135c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801164e:	429a      	cmp	r2, r3
 8011650:	d302      	bcc.n	8011658 <xQueueGenericSend+0xd4>
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	2b02      	cmp	r3, #2
 8011656:	d129      	bne.n	80116ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	68b9      	ldr	r1, [r7, #8]
 801165c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801165e:	f000 fa8b 	bl	8011b78 <prvCopyDataToQueue>
 8011662:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011668:	2b00      	cmp	r3, #0
 801166a:	d010      	beq.n	801168e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166e:	3324      	adds	r3, #36	; 0x24
 8011670:	4618      	mov	r0, r3
 8011672:	f001 f887 	bl	8012784 <xTaskRemoveFromEventList>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d013      	beq.n	80116a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801167c:	4b3f      	ldr	r3, [pc, #252]	; (801177c <xQueueGenericSend+0x1f8>)
 801167e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	f3bf 8f4f 	dsb	sy
 8011688:	f3bf 8f6f 	isb	sy
 801168c:	e00a      	b.n	80116a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011690:	2b00      	cmp	r3, #0
 8011692:	d007      	beq.n	80116a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011694:	4b39      	ldr	r3, [pc, #228]	; (801177c <xQueueGenericSend+0x1f8>)
 8011696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801169a:	601a      	str	r2, [r3, #0]
 801169c:	f3bf 8f4f 	dsb	sy
 80116a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80116a4:	f001 ffbe 	bl	8013624 <vPortExitCritical>
				return pdPASS;
 80116a8:	2301      	movs	r3, #1
 80116aa:	e063      	b.n	8011774 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d103      	bne.n	80116ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80116b2:	f001 ffb7 	bl	8013624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80116b6:	2300      	movs	r3, #0
 80116b8:	e05c      	b.n	8011774 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80116ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d106      	bne.n	80116ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80116c0:	f107 0314 	add.w	r3, r7, #20
 80116c4:	4618      	mov	r0, r3
 80116c6:	f001 f8c1 	bl	801284c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80116ca:	2301      	movs	r3, #1
 80116cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80116ce:	f001 ffa9 	bl	8013624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80116d2:	f000 fe1b 	bl	801230c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80116d6:	f001 ff75 	bl	80135c4 <vPortEnterCritical>
 80116da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116e0:	b25b      	sxtb	r3, r3
 80116e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116e6:	d103      	bne.n	80116f0 <xQueueGenericSend+0x16c>
 80116e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ea:	2200      	movs	r2, #0
 80116ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116f6:	b25b      	sxtb	r3, r3
 80116f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116fc:	d103      	bne.n	8011706 <xQueueGenericSend+0x182>
 80116fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011700:	2200      	movs	r2, #0
 8011702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011706:	f001 ff8d 	bl	8013624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801170a:	1d3a      	adds	r2, r7, #4
 801170c:	f107 0314 	add.w	r3, r7, #20
 8011710:	4611      	mov	r1, r2
 8011712:	4618      	mov	r0, r3
 8011714:	f001 f8b0 	bl	8012878 <xTaskCheckForTimeOut>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d124      	bne.n	8011768 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801171e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011720:	f000 fb22 	bl	8011d68 <prvIsQueueFull>
 8011724:	4603      	mov	r3, r0
 8011726:	2b00      	cmp	r3, #0
 8011728:	d018      	beq.n	801175c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172c:	3310      	adds	r3, #16
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f000 ffd6 	bl	80126e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801173a:	f000 faad 	bl	8011c98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801173e:	f000 fdf3 	bl	8012328 <xTaskResumeAll>
 8011742:	4603      	mov	r3, r0
 8011744:	2b00      	cmp	r3, #0
 8011746:	f47f af7c 	bne.w	8011642 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801174a:	4b0c      	ldr	r3, [pc, #48]	; (801177c <xQueueGenericSend+0x1f8>)
 801174c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	f3bf 8f4f 	dsb	sy
 8011756:	f3bf 8f6f 	isb	sy
 801175a:	e772      	b.n	8011642 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801175c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801175e:	f000 fa9b 	bl	8011c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011762:	f000 fde1 	bl	8012328 <xTaskResumeAll>
 8011766:	e76c      	b.n	8011642 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801176a:	f000 fa95 	bl	8011c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801176e:	f000 fddb 	bl	8012328 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011772:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011774:	4618      	mov	r0, r3
 8011776:	3738      	adds	r7, #56	; 0x38
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	e000ed04 	.word	0xe000ed04

08011780 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b090      	sub	sp, #64	; 0x40
 8011784:	af00      	add	r7, sp, #0
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
 801178c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011794:	2b00      	cmp	r3, #0
 8011796:	d10a      	bne.n	80117ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80117aa:	bf00      	nop
 80117ac:	e7fe      	b.n	80117ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d103      	bne.n	80117bc <xQueueGenericSendFromISR+0x3c>
 80117b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d101      	bne.n	80117c0 <xQueueGenericSendFromISR+0x40>
 80117bc:	2301      	movs	r3, #1
 80117be:	e000      	b.n	80117c2 <xQueueGenericSendFromISR+0x42>
 80117c0:	2300      	movs	r3, #0
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10a      	bne.n	80117dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80117c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ca:	f383 8811 	msr	BASEPRI, r3
 80117ce:	f3bf 8f6f 	isb	sy
 80117d2:	f3bf 8f4f 	dsb	sy
 80117d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80117d8:	bf00      	nop
 80117da:	e7fe      	b.n	80117da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d103      	bne.n	80117ea <xQueueGenericSendFromISR+0x6a>
 80117e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d101      	bne.n	80117ee <xQueueGenericSendFromISR+0x6e>
 80117ea:	2301      	movs	r3, #1
 80117ec:	e000      	b.n	80117f0 <xQueueGenericSendFromISR+0x70>
 80117ee:	2300      	movs	r3, #0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10a      	bne.n	801180a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80117f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f8:	f383 8811 	msr	BASEPRI, r3
 80117fc:	f3bf 8f6f 	isb	sy
 8011800:	f3bf 8f4f 	dsb	sy
 8011804:	623b      	str	r3, [r7, #32]
}
 8011806:	bf00      	nop
 8011808:	e7fe      	b.n	8011808 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801180a:	f001 ffbd 	bl	8013788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801180e:	f3ef 8211 	mrs	r2, BASEPRI
 8011812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	61fa      	str	r2, [r7, #28]
 8011824:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011826:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011828:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011832:	429a      	cmp	r2, r3
 8011834:	d302      	bcc.n	801183c <xQueueGenericSendFromISR+0xbc>
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	2b02      	cmp	r3, #2
 801183a:	d12f      	bne.n	801189c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801184a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801184c:	683a      	ldr	r2, [r7, #0]
 801184e:	68b9      	ldr	r1, [r7, #8]
 8011850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011852:	f000 f991 	bl	8011b78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011856:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801185a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801185e:	d112      	bne.n	8011886 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011864:	2b00      	cmp	r3, #0
 8011866:	d016      	beq.n	8011896 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186a:	3324      	adds	r3, #36	; 0x24
 801186c:	4618      	mov	r0, r3
 801186e:	f000 ff89 	bl	8012784 <xTaskRemoveFromEventList>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d00e      	beq.n	8011896 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00b      	beq.n	8011896 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2201      	movs	r2, #1
 8011882:	601a      	str	r2, [r3, #0]
 8011884:	e007      	b.n	8011896 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011886:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801188a:	3301      	adds	r3, #1
 801188c:	b2db      	uxtb	r3, r3
 801188e:	b25a      	sxtb	r2, r3
 8011890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011896:	2301      	movs	r3, #1
 8011898:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801189a:	e001      	b.n	80118a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801189c:	2300      	movs	r3, #0
 801189e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80118aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80118ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80118ae:	4618      	mov	r0, r3
 80118b0:	3740      	adds	r7, #64	; 0x40
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}
	...

080118b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b08c      	sub	sp, #48	; 0x30
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	60b9      	str	r1, [r7, #8]
 80118c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80118c4:	2300      	movs	r3, #0
 80118c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80118cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d10a      	bne.n	80118e8 <xQueueReceive+0x30>
	__asm volatile
 80118d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	623b      	str	r3, [r7, #32]
}
 80118e4:	bf00      	nop
 80118e6:	e7fe      	b.n	80118e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d103      	bne.n	80118f6 <xQueueReceive+0x3e>
 80118ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d101      	bne.n	80118fa <xQueueReceive+0x42>
 80118f6:	2301      	movs	r3, #1
 80118f8:	e000      	b.n	80118fc <xQueueReceive+0x44>
 80118fa:	2300      	movs	r3, #0
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d10a      	bne.n	8011916 <xQueueReceive+0x5e>
	__asm volatile
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	f383 8811 	msr	BASEPRI, r3
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	61fb      	str	r3, [r7, #28]
}
 8011912:	bf00      	nop
 8011914:	e7fe      	b.n	8011914 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011916:	f001 f8f7 	bl	8012b08 <xTaskGetSchedulerState>
 801191a:	4603      	mov	r3, r0
 801191c:	2b00      	cmp	r3, #0
 801191e:	d102      	bne.n	8011926 <xQueueReceive+0x6e>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d101      	bne.n	801192a <xQueueReceive+0x72>
 8011926:	2301      	movs	r3, #1
 8011928:	e000      	b.n	801192c <xQueueReceive+0x74>
 801192a:	2300      	movs	r3, #0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d10a      	bne.n	8011946 <xQueueReceive+0x8e>
	__asm volatile
 8011930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011934:	f383 8811 	msr	BASEPRI, r3
 8011938:	f3bf 8f6f 	isb	sy
 801193c:	f3bf 8f4f 	dsb	sy
 8011940:	61bb      	str	r3, [r7, #24]
}
 8011942:	bf00      	nop
 8011944:	e7fe      	b.n	8011944 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011946:	f001 fe3d 	bl	80135c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801194e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011952:	2b00      	cmp	r3, #0
 8011954:	d01f      	beq.n	8011996 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011956:	68b9      	ldr	r1, [r7, #8]
 8011958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801195a:	f000 f977 	bl	8011c4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011960:	1e5a      	subs	r2, r3, #1
 8011962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011964:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011968:	691b      	ldr	r3, [r3, #16]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d00f      	beq.n	801198e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011970:	3310      	adds	r3, #16
 8011972:	4618      	mov	r0, r3
 8011974:	f000 ff06 	bl	8012784 <xTaskRemoveFromEventList>
 8011978:	4603      	mov	r3, r0
 801197a:	2b00      	cmp	r3, #0
 801197c:	d007      	beq.n	801198e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801197e:	4b3d      	ldr	r3, [pc, #244]	; (8011a74 <xQueueReceive+0x1bc>)
 8011980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801198e:	f001 fe49 	bl	8013624 <vPortExitCritical>
				return pdPASS;
 8011992:	2301      	movs	r3, #1
 8011994:	e069      	b.n	8011a6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d103      	bne.n	80119a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801199c:	f001 fe42 	bl	8013624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80119a0:	2300      	movs	r3, #0
 80119a2:	e062      	b.n	8011a6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80119a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d106      	bne.n	80119b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80119aa:	f107 0310 	add.w	r3, r7, #16
 80119ae:	4618      	mov	r0, r3
 80119b0:	f000 ff4c 	bl	801284c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119b4:	2301      	movs	r3, #1
 80119b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119b8:	f001 fe34 	bl	8013624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119bc:	f000 fca6 	bl	801230c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119c0:	f001 fe00 	bl	80135c4 <vPortEnterCritical>
 80119c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119ca:	b25b      	sxtb	r3, r3
 80119cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119d0:	d103      	bne.n	80119da <xQueueReceive+0x122>
 80119d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d4:	2200      	movs	r2, #0
 80119d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119e0:	b25b      	sxtb	r3, r3
 80119e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119e6:	d103      	bne.n	80119f0 <xQueueReceive+0x138>
 80119e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ea:	2200      	movs	r2, #0
 80119ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119f0:	f001 fe18 	bl	8013624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119f4:	1d3a      	adds	r2, r7, #4
 80119f6:	f107 0310 	add.w	r3, r7, #16
 80119fa:	4611      	mov	r1, r2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f000 ff3b 	bl	8012878 <xTaskCheckForTimeOut>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d123      	bne.n	8011a50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a0a:	f000 f997 	bl	8011d3c <prvIsQueueEmpty>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d017      	beq.n	8011a44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a16:	3324      	adds	r3, #36	; 0x24
 8011a18:	687a      	ldr	r2, [r7, #4]
 8011a1a:	4611      	mov	r1, r2
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f000 fe61 	bl	80126e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a24:	f000 f938 	bl	8011c98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011a28:	f000 fc7e 	bl	8012328 <xTaskResumeAll>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d189      	bne.n	8011946 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011a32:	4b10      	ldr	r3, [pc, #64]	; (8011a74 <xQueueReceive+0x1bc>)
 8011a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a38:	601a      	str	r2, [r3, #0]
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	f3bf 8f6f 	isb	sy
 8011a42:	e780      	b.n	8011946 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a46:	f000 f927 	bl	8011c98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a4a:	f000 fc6d 	bl	8012328 <xTaskResumeAll>
 8011a4e:	e77a      	b.n	8011946 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a52:	f000 f921 	bl	8011c98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a56:	f000 fc67 	bl	8012328 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a5c:	f000 f96e 	bl	8011d3c <prvIsQueueEmpty>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f43f af6f 	beq.w	8011946 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3730      	adds	r7, #48	; 0x30
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	e000ed04 	.word	0xe000ed04

08011a78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08e      	sub	sp, #56	; 0x38
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10a      	bne.n	8011aa4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8011a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a92:	f383 8811 	msr	BASEPRI, r3
 8011a96:	f3bf 8f6f 	isb	sy
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	623b      	str	r3, [r7, #32]
}
 8011aa0:	bf00      	nop
 8011aa2:	e7fe      	b.n	8011aa2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d103      	bne.n	8011ab2 <xQueueReceiveFromISR+0x3a>
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d101      	bne.n	8011ab6 <xQueueReceiveFromISR+0x3e>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e000      	b.n	8011ab8 <xQueueReceiveFromISR+0x40>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d10a      	bne.n	8011ad2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8011abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac0:	f383 8811 	msr	BASEPRI, r3
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	61fb      	str	r3, [r7, #28]
}
 8011ace:	bf00      	nop
 8011ad0:	e7fe      	b.n	8011ad0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ad2:	f001 fe59 	bl	8013788 <vPortValidateInterruptPriority>
	__asm volatile
 8011ad6:	f3ef 8211 	mrs	r2, BASEPRI
 8011ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ade:	f383 8811 	msr	BASEPRI, r3
 8011ae2:	f3bf 8f6f 	isb	sy
 8011ae6:	f3bf 8f4f 	dsb	sy
 8011aea:	61ba      	str	r2, [r7, #24]
 8011aec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011aee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011af6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d02f      	beq.n	8011b5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b08:	68b9      	ldr	r1, [r7, #8]
 8011b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b0c:	f000 f89e 	bl	8011c4c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b12:	1e5a      	subs	r2, r3, #1
 8011b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011b18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b20:	d112      	bne.n	8011b48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b24:	691b      	ldr	r3, [r3, #16]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d016      	beq.n	8011b58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b2c:	3310      	adds	r3, #16
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f000 fe28 	bl	8012784 <xTaskRemoveFromEventList>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d00e      	beq.n	8011b58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d00b      	beq.n	8011b58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2201      	movs	r2, #1
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	e007      	b.n	8011b58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	b2db      	uxtb	r3, r3
 8011b50:	b25a      	sxtb	r2, r3
 8011b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011b58:	2301      	movs	r3, #1
 8011b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8011b5c:	e001      	b.n	8011b62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011b5e:	2300      	movs	r3, #0
 8011b60:	637b      	str	r3, [r7, #52]	; 0x34
 8011b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	f383 8811 	msr	BASEPRI, r3
}
 8011b6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3738      	adds	r7, #56	; 0x38
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011b84:	2300      	movs	r3, #0
 8011b86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d10d      	bne.n	8011bb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d14d      	bne.n	8011c3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 ffce 	bl	8012b44 <xTaskPriorityDisinherit>
 8011ba8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2200      	movs	r2, #0
 8011bae:	609a      	str	r2, [r3, #8]
 8011bb0:	e043      	b.n	8011c3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d119      	bne.n	8011bec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	6858      	ldr	r0, [r3, #4]
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	68b9      	ldr	r1, [r7, #8]
 8011bc4:	f002 fe46 	bl	8014854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	685a      	ldr	r2, [r3, #4]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bd0:	441a      	add	r2, r3
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	685a      	ldr	r2, [r3, #4]
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d32b      	bcc.n	8011c3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	605a      	str	r2, [r3, #4]
 8011bea:	e026      	b.n	8011c3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	68d8      	ldr	r0, [r3, #12]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	68b9      	ldr	r1, [r7, #8]
 8011bf8:	f002 fe2c 	bl	8014854 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	68da      	ldr	r2, [r3, #12]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c04:	425b      	negs	r3, r3
 8011c06:	441a      	add	r2, r3
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	68da      	ldr	r2, [r3, #12]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d207      	bcs.n	8011c28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	689a      	ldr	r2, [r3, #8]
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c20:	425b      	negs	r3, r3
 8011c22:	441a      	add	r2, r3
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b02      	cmp	r3, #2
 8011c2c:	d105      	bne.n	8011c3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d002      	beq.n	8011c3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	3b01      	subs	r3, #1
 8011c38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	1c5a      	adds	r2, r3, #1
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011c42:	697b      	ldr	r3, [r7, #20]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	3718      	adds	r7, #24
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}

08011c4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d018      	beq.n	8011c90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	68da      	ldr	r2, [r3, #12]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c66:	441a      	add	r2, r3
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	68da      	ldr	r2, [r3, #12]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d303      	bcc.n	8011c80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	68d9      	ldr	r1, [r3, #12]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c88:	461a      	mov	r2, r3
 8011c8a:	6838      	ldr	r0, [r7, #0]
 8011c8c:	f002 fde2 	bl	8014854 <memcpy>
	}
}
 8011c90:	bf00      	nop
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011ca0:	f001 fc90 	bl	80135c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011caa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011cac:	e011      	b.n	8011cd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d012      	beq.n	8011cdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	3324      	adds	r3, #36	; 0x24
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 fd62 	bl	8012784 <xTaskRemoveFromEventList>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d001      	beq.n	8011cca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011cc6:	f000 fe39 	bl	801293c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011cca:	7bfb      	ldrb	r3, [r7, #15]
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	dce9      	bgt.n	8011cae <prvUnlockQueue+0x16>
 8011cda:	e000      	b.n	8011cde <prvUnlockQueue+0x46>
					break;
 8011cdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	22ff      	movs	r2, #255	; 0xff
 8011ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011ce6:	f001 fc9d 	bl	8013624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011cea:	f001 fc6b 	bl	80135c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011cf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011cf6:	e011      	b.n	8011d1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	691b      	ldr	r3, [r3, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d012      	beq.n	8011d26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	3310      	adds	r3, #16
 8011d04:	4618      	mov	r0, r3
 8011d06:	f000 fd3d 	bl	8012784 <xTaskRemoveFromEventList>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d001      	beq.n	8011d14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011d10:	f000 fe14 	bl	801293c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011d14:	7bbb      	ldrb	r3, [r7, #14]
 8011d16:	3b01      	subs	r3, #1
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	dce9      	bgt.n	8011cf8 <prvUnlockQueue+0x60>
 8011d24:	e000      	b.n	8011d28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011d26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	22ff      	movs	r2, #255	; 0xff
 8011d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011d30:	f001 fc78 	bl	8013624 <vPortExitCritical>
}
 8011d34:	bf00      	nop
 8011d36:	3710      	adds	r7, #16
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}

08011d3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d44:	f001 fc3e 	bl	80135c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d102      	bne.n	8011d56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011d50:	2301      	movs	r3, #1
 8011d52:	60fb      	str	r3, [r7, #12]
 8011d54:	e001      	b.n	8011d5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d5a:	f001 fc63 	bl	8013624 <vPortExitCritical>

	return xReturn;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3710      	adds	r7, #16
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011d70:	f001 fc28 	bl	80135c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d102      	bne.n	8011d86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011d80:	2301      	movs	r3, #1
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	e001      	b.n	8011d8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011d86:	2300      	movs	r3, #0
 8011d88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011d8a:	f001 fc4b 	bl	8013624 <vPortExitCritical>

	return xReturn;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011da2:	2300      	movs	r3, #0
 8011da4:	60fb      	str	r3, [r7, #12]
 8011da6:	e014      	b.n	8011dd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011da8:	4a0f      	ldr	r2, [pc, #60]	; (8011de8 <vQueueAddToRegistry+0x50>)
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d10b      	bne.n	8011dcc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011db4:	490c      	ldr	r1, [pc, #48]	; (8011de8 <vQueueAddToRegistry+0x50>)
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	683a      	ldr	r2, [r7, #0]
 8011dba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011dbe:	4a0a      	ldr	r2, [pc, #40]	; (8011de8 <vQueueAddToRegistry+0x50>)
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	00db      	lsls	r3, r3, #3
 8011dc4:	4413      	add	r3, r2
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011dca:	e006      	b.n	8011dda <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	3301      	adds	r3, #1
 8011dd0:	60fb      	str	r3, [r7, #12]
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2b07      	cmp	r3, #7
 8011dd6:	d9e7      	bls.n	8011da8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011dd8:	bf00      	nop
 8011dda:	bf00      	nop
 8011ddc:	3714      	adds	r7, #20
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop
 8011de8:	20003390 	.word	0x20003390

08011dec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b086      	sub	sp, #24
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011dfc:	f001 fbe2 	bl	80135c4 <vPortEnterCritical>
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e06:	b25b      	sxtb	r3, r3
 8011e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e0c:	d103      	bne.n	8011e16 <vQueueWaitForMessageRestricted+0x2a>
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	2200      	movs	r2, #0
 8011e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e1c:	b25b      	sxtb	r3, r3
 8011e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e22:	d103      	bne.n	8011e2c <vQueueWaitForMessageRestricted+0x40>
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e2c:	f001 fbfa 	bl	8013624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d106      	bne.n	8011e46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	3324      	adds	r3, #36	; 0x24
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	68b9      	ldr	r1, [r7, #8]
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fc73 	bl	801272c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011e46:	6978      	ldr	r0, [r7, #20]
 8011e48:	f7ff ff26 	bl	8011c98 <prvUnlockQueue>
	}
 8011e4c:	bf00      	nop
 8011e4e:	3718      	adds	r7, #24
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b08e      	sub	sp, #56	; 0x38
 8011e58:	af04      	add	r7, sp, #16
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	607a      	str	r2, [r7, #4]
 8011e60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d10a      	bne.n	8011e7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6c:	f383 8811 	msr	BASEPRI, r3
 8011e70:	f3bf 8f6f 	isb	sy
 8011e74:	f3bf 8f4f 	dsb	sy
 8011e78:	623b      	str	r3, [r7, #32]
}
 8011e7a:	bf00      	nop
 8011e7c:	e7fe      	b.n	8011e7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d10a      	bne.n	8011e9a <xTaskCreateStatic+0x46>
	__asm volatile
 8011e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e88:	f383 8811 	msr	BASEPRI, r3
 8011e8c:	f3bf 8f6f 	isb	sy
 8011e90:	f3bf 8f4f 	dsb	sy
 8011e94:	61fb      	str	r3, [r7, #28]
}
 8011e96:	bf00      	nop
 8011e98:	e7fe      	b.n	8011e98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011e9a:	23bc      	movs	r3, #188	; 0xbc
 8011e9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	2bbc      	cmp	r3, #188	; 0xbc
 8011ea2:	d00a      	beq.n	8011eba <xTaskCreateStatic+0x66>
	__asm volatile
 8011ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea8:	f383 8811 	msr	BASEPRI, r3
 8011eac:	f3bf 8f6f 	isb	sy
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	61bb      	str	r3, [r7, #24]
}
 8011eb6:	bf00      	nop
 8011eb8:	e7fe      	b.n	8011eb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011eba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d01e      	beq.n	8011f00 <xTaskCreateStatic+0xac>
 8011ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d01b      	beq.n	8011f00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ed0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed4:	2202      	movs	r2, #2
 8011ed6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011eda:	2300      	movs	r3, #0
 8011edc:	9303      	str	r3, [sp, #12]
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	9302      	str	r3, [sp, #8]
 8011ee2:	f107 0314 	add.w	r3, r7, #20
 8011ee6:	9301      	str	r3, [sp, #4]
 8011ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eea:	9300      	str	r3, [sp, #0]
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	68b9      	ldr	r1, [r7, #8]
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	f000 f850 	bl	8011f98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011efa:	f000 f8f3 	bl	80120e4 <prvAddNewTaskToReadyList>
 8011efe:	e001      	b.n	8011f04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011f00:	2300      	movs	r3, #0
 8011f02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f04:	697b      	ldr	r3, [r7, #20]
	}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3728      	adds	r7, #40	; 0x28
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	b08c      	sub	sp, #48	; 0x30
 8011f12:	af04      	add	r7, sp, #16
 8011f14:	60f8      	str	r0, [r7, #12]
 8011f16:	60b9      	str	r1, [r7, #8]
 8011f18:	603b      	str	r3, [r7, #0]
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011f1e:	88fb      	ldrh	r3, [r7, #6]
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	4618      	mov	r0, r3
 8011f24:	f001 fc70 	bl	8013808 <pvPortMalloc>
 8011f28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00e      	beq.n	8011f4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011f30:	20bc      	movs	r0, #188	; 0xbc
 8011f32:	f001 fc69 	bl	8013808 <pvPortMalloc>
 8011f36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d003      	beq.n	8011f46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	697a      	ldr	r2, [r7, #20]
 8011f42:	631a      	str	r2, [r3, #48]	; 0x30
 8011f44:	e005      	b.n	8011f52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011f46:	6978      	ldr	r0, [r7, #20]
 8011f48:	f001 fd2a 	bl	80139a0 <vPortFree>
 8011f4c:	e001      	b.n	8011f52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d017      	beq.n	8011f88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011f60:	88fa      	ldrh	r2, [r7, #6]
 8011f62:	2300      	movs	r3, #0
 8011f64:	9303      	str	r3, [sp, #12]
 8011f66:	69fb      	ldr	r3, [r7, #28]
 8011f68:	9302      	str	r3, [sp, #8]
 8011f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6c:	9301      	str	r3, [sp, #4]
 8011f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f70:	9300      	str	r3, [sp, #0]
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	68b9      	ldr	r1, [r7, #8]
 8011f76:	68f8      	ldr	r0, [r7, #12]
 8011f78:	f000 f80e 	bl	8011f98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f7c:	69f8      	ldr	r0, [r7, #28]
 8011f7e:	f000 f8b1 	bl	80120e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011f82:	2301      	movs	r3, #1
 8011f84:	61bb      	str	r3, [r7, #24]
 8011f86:	e002      	b.n	8011f8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011f8e:	69bb      	ldr	r3, [r7, #24]
	}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3720      	adds	r7, #32
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	461a      	mov	r2, r3
 8011fb0:	21a5      	movs	r1, #165	; 0xa5
 8011fb2:	f002 fc5d 	bl	8014870 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	f023 0307 	bic.w	r3, r3, #7
 8011fce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011fd0:	69bb      	ldr	r3, [r7, #24]
 8011fd2:	f003 0307 	and.w	r3, r3, #7
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d00a      	beq.n	8011ff0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fde:	f383 8811 	msr	BASEPRI, r3
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	f3bf 8f4f 	dsb	sy
 8011fea:	617b      	str	r3, [r7, #20]
}
 8011fec:	bf00      	nop
 8011fee:	e7fe      	b.n	8011fee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d01f      	beq.n	8012036 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	61fb      	str	r3, [r7, #28]
 8011ffa:	e012      	b.n	8012022 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011ffc:	68ba      	ldr	r2, [r7, #8]
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	4413      	add	r3, r2
 8012002:	7819      	ldrb	r1, [r3, #0]
 8012004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	4413      	add	r3, r2
 801200a:	3334      	adds	r3, #52	; 0x34
 801200c:	460a      	mov	r2, r1
 801200e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	4413      	add	r3, r2
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d006      	beq.n	801202a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	3301      	adds	r3, #1
 8012020:	61fb      	str	r3, [r7, #28]
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	2b0f      	cmp	r3, #15
 8012026:	d9e9      	bls.n	8011ffc <prvInitialiseNewTask+0x64>
 8012028:	e000      	b.n	801202c <prvInitialiseNewTask+0x94>
			{
				break;
 801202a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202e:	2200      	movs	r2, #0
 8012030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012034:	e003      	b.n	801203e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012038:	2200      	movs	r2, #0
 801203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012040:	2b37      	cmp	r3, #55	; 0x37
 8012042:	d901      	bls.n	8012048 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012044:	2337      	movs	r3, #55	; 0x37
 8012046:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801204c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801204e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012052:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012056:	2200      	movs	r2, #0
 8012058:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	3304      	adds	r3, #4
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff f8be 	bl	80111e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012066:	3318      	adds	r3, #24
 8012068:	4618      	mov	r0, r3
 801206a:	f7ff f8b9 	bl	80111e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012076:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012082:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012086:	2200      	movs	r2, #0
 8012088:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801208e:	2200      	movs	r2, #0
 8012090:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012096:	3354      	adds	r3, #84	; 0x54
 8012098:	2260      	movs	r2, #96	; 0x60
 801209a:	2100      	movs	r1, #0
 801209c:	4618      	mov	r0, r3
 801209e:	f002 fbe7 	bl	8014870 <memset>
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	4a0c      	ldr	r2, [pc, #48]	; (80120d8 <prvInitialiseNewTask+0x140>)
 80120a6:	659a      	str	r2, [r3, #88]	; 0x58
 80120a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120aa:	4a0c      	ldr	r2, [pc, #48]	; (80120dc <prvInitialiseNewTask+0x144>)
 80120ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80120ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b0:	4a0b      	ldr	r2, [pc, #44]	; (80120e0 <prvInitialiseNewTask+0x148>)
 80120b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80120b4:	683a      	ldr	r2, [r7, #0]
 80120b6:	68f9      	ldr	r1, [r7, #12]
 80120b8:	69b8      	ldr	r0, [r7, #24]
 80120ba:	f001 f953 	bl	8013364 <pxPortInitialiseStack>
 80120be:	4602      	mov	r2, r0
 80120c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d002      	beq.n	80120d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80120ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120d0:	bf00      	nop
 80120d2:	3720      	adds	r7, #32
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	08014b7c 	.word	0x08014b7c
 80120dc:	08014b9c 	.word	0x08014b9c
 80120e0:	08014b5c 	.word	0x08014b5c

080120e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80120ec:	f001 fa6a 	bl	80135c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80120f0:	4b2d      	ldr	r3, [pc, #180]	; (80121a8 <prvAddNewTaskToReadyList+0xc4>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	3301      	adds	r3, #1
 80120f6:	4a2c      	ldr	r2, [pc, #176]	; (80121a8 <prvAddNewTaskToReadyList+0xc4>)
 80120f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80120fa:	4b2c      	ldr	r3, [pc, #176]	; (80121ac <prvAddNewTaskToReadyList+0xc8>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d109      	bne.n	8012116 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012102:	4a2a      	ldr	r2, [pc, #168]	; (80121ac <prvAddNewTaskToReadyList+0xc8>)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012108:	4b27      	ldr	r3, [pc, #156]	; (80121a8 <prvAddNewTaskToReadyList+0xc4>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d110      	bne.n	8012132 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012110:	f000 fc38 	bl	8012984 <prvInitialiseTaskLists>
 8012114:	e00d      	b.n	8012132 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012116:	4b26      	ldr	r3, [pc, #152]	; (80121b0 <prvAddNewTaskToReadyList+0xcc>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d109      	bne.n	8012132 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801211e:	4b23      	ldr	r3, [pc, #140]	; (80121ac <prvAddNewTaskToReadyList+0xc8>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012128:	429a      	cmp	r2, r3
 801212a:	d802      	bhi.n	8012132 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801212c:	4a1f      	ldr	r2, [pc, #124]	; (80121ac <prvAddNewTaskToReadyList+0xc8>)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012132:	4b20      	ldr	r3, [pc, #128]	; (80121b4 <prvAddNewTaskToReadyList+0xd0>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	3301      	adds	r3, #1
 8012138:	4a1e      	ldr	r2, [pc, #120]	; (80121b4 <prvAddNewTaskToReadyList+0xd0>)
 801213a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801213c:	4b1d      	ldr	r3, [pc, #116]	; (80121b4 <prvAddNewTaskToReadyList+0xd0>)
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012148:	4b1b      	ldr	r3, [pc, #108]	; (80121b8 <prvAddNewTaskToReadyList+0xd4>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	429a      	cmp	r2, r3
 801214e:	d903      	bls.n	8012158 <prvAddNewTaskToReadyList+0x74>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012154:	4a18      	ldr	r2, [pc, #96]	; (80121b8 <prvAddNewTaskToReadyList+0xd4>)
 8012156:	6013      	str	r3, [r2, #0]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215c:	4613      	mov	r3, r2
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	4413      	add	r3, r2
 8012162:	009b      	lsls	r3, r3, #2
 8012164:	4a15      	ldr	r2, [pc, #84]	; (80121bc <prvAddNewTaskToReadyList+0xd8>)
 8012166:	441a      	add	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	3304      	adds	r3, #4
 801216c:	4619      	mov	r1, r3
 801216e:	4610      	mov	r0, r2
 8012170:	f7ff f843 	bl	80111fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012174:	f001 fa56 	bl	8013624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012178:	4b0d      	ldr	r3, [pc, #52]	; (80121b0 <prvAddNewTaskToReadyList+0xcc>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d00e      	beq.n	801219e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012180:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <prvAddNewTaskToReadyList+0xc8>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801218a:	429a      	cmp	r2, r3
 801218c:	d207      	bcs.n	801219e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801218e:	4b0c      	ldr	r3, [pc, #48]	; (80121c0 <prvAddNewTaskToReadyList+0xdc>)
 8012190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012194:	601a      	str	r2, [r3, #0]
 8012196:	f3bf 8f4f 	dsb	sy
 801219a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801219e:	bf00      	nop
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	200016d8 	.word	0x200016d8
 80121ac:	20001204 	.word	0x20001204
 80121b0:	200016e4 	.word	0x200016e4
 80121b4:	200016f4 	.word	0x200016f4
 80121b8:	200016e0 	.word	0x200016e0
 80121bc:	20001208 	.word	0x20001208
 80121c0:	e000ed04 	.word	0xe000ed04

080121c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b084      	sub	sp, #16
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80121cc:	2300      	movs	r3, #0
 80121ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d017      	beq.n	8012206 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80121d6:	4b13      	ldr	r3, [pc, #76]	; (8012224 <vTaskDelay+0x60>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d00a      	beq.n	80121f4 <vTaskDelay+0x30>
	__asm volatile
 80121de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e2:	f383 8811 	msr	BASEPRI, r3
 80121e6:	f3bf 8f6f 	isb	sy
 80121ea:	f3bf 8f4f 	dsb	sy
 80121ee:	60bb      	str	r3, [r7, #8]
}
 80121f0:	bf00      	nop
 80121f2:	e7fe      	b.n	80121f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80121f4:	f000 f88a 	bl	801230c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80121f8:	2100      	movs	r1, #0
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f000 fd10 	bl	8012c20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012200:	f000 f892 	bl	8012328 <xTaskResumeAll>
 8012204:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d107      	bne.n	801221c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801220c:	4b06      	ldr	r3, [pc, #24]	; (8012228 <vTaskDelay+0x64>)
 801220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801221c:	bf00      	nop
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	20001700 	.word	0x20001700
 8012228:	e000ed04 	.word	0xe000ed04

0801222c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b08a      	sub	sp, #40	; 0x28
 8012230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012232:	2300      	movs	r3, #0
 8012234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012236:	2300      	movs	r3, #0
 8012238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801223a:	463a      	mov	r2, r7
 801223c:	1d39      	adds	r1, r7, #4
 801223e:	f107 0308 	add.w	r3, r7, #8
 8012242:	4618      	mov	r0, r3
 8012244:	f7fe ff78 	bl	8011138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012248:	6839      	ldr	r1, [r7, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	9202      	str	r2, [sp, #8]
 8012250:	9301      	str	r3, [sp, #4]
 8012252:	2300      	movs	r3, #0
 8012254:	9300      	str	r3, [sp, #0]
 8012256:	2300      	movs	r3, #0
 8012258:	460a      	mov	r2, r1
 801225a:	4924      	ldr	r1, [pc, #144]	; (80122ec <vTaskStartScheduler+0xc0>)
 801225c:	4824      	ldr	r0, [pc, #144]	; (80122f0 <vTaskStartScheduler+0xc4>)
 801225e:	f7ff fdf9 	bl	8011e54 <xTaskCreateStatic>
 8012262:	4603      	mov	r3, r0
 8012264:	4a23      	ldr	r2, [pc, #140]	; (80122f4 <vTaskStartScheduler+0xc8>)
 8012266:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012268:	4b22      	ldr	r3, [pc, #136]	; (80122f4 <vTaskStartScheduler+0xc8>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d002      	beq.n	8012276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012270:	2301      	movs	r3, #1
 8012272:	617b      	str	r3, [r7, #20]
 8012274:	e001      	b.n	801227a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012276:	2300      	movs	r3, #0
 8012278:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d102      	bne.n	8012286 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012280:	f000 fd22 	bl	8012cc8 <xTimerCreateTimerTask>
 8012284:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	2b01      	cmp	r3, #1
 801228a:	d11b      	bne.n	80122c4 <vTaskStartScheduler+0x98>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	613b      	str	r3, [r7, #16]
}
 801229e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80122a0:	4b15      	ldr	r3, [pc, #84]	; (80122f8 <vTaskStartScheduler+0xcc>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	3354      	adds	r3, #84	; 0x54
 80122a6:	4a15      	ldr	r2, [pc, #84]	; (80122fc <vTaskStartScheduler+0xd0>)
 80122a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80122aa:	4b15      	ldr	r3, [pc, #84]	; (8012300 <vTaskStartScheduler+0xd4>)
 80122ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80122b2:	4b14      	ldr	r3, [pc, #80]	; (8012304 <vTaskStartScheduler+0xd8>)
 80122b4:	2201      	movs	r2, #1
 80122b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80122b8:	4b13      	ldr	r3, [pc, #76]	; (8012308 <vTaskStartScheduler+0xdc>)
 80122ba:	2200      	movs	r2, #0
 80122bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80122be:	f001 f8df 	bl	8013480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80122c2:	e00e      	b.n	80122e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122ca:	d10a      	bne.n	80122e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80122cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	60fb      	str	r3, [r7, #12]
}
 80122de:	bf00      	nop
 80122e0:	e7fe      	b.n	80122e0 <vTaskStartScheduler+0xb4>
}
 80122e2:	bf00      	nop
 80122e4:	3718      	adds	r7, #24
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	08014a54 	.word	0x08014a54
 80122f0:	08012955 	.word	0x08012955
 80122f4:	200016fc 	.word	0x200016fc
 80122f8:	20001204 	.word	0x20001204
 80122fc:	20000194 	.word	0x20000194
 8012300:	200016f8 	.word	0x200016f8
 8012304:	200016e4 	.word	0x200016e4
 8012308:	200016dc 	.word	0x200016dc

0801230c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801230c:	b480      	push	{r7}
 801230e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012310:	4b04      	ldr	r3, [pc, #16]	; (8012324 <vTaskSuspendAll+0x18>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	4a03      	ldr	r2, [pc, #12]	; (8012324 <vTaskSuspendAll+0x18>)
 8012318:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801231a:	bf00      	nop
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr
 8012324:	20001700 	.word	0x20001700

08012328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801232e:	2300      	movs	r3, #0
 8012330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012332:	2300      	movs	r3, #0
 8012334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012336:	4b42      	ldr	r3, [pc, #264]	; (8012440 <xTaskResumeAll+0x118>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d10a      	bne.n	8012354 <xTaskResumeAll+0x2c>
	__asm volatile
 801233e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012342:	f383 8811 	msr	BASEPRI, r3
 8012346:	f3bf 8f6f 	isb	sy
 801234a:	f3bf 8f4f 	dsb	sy
 801234e:	603b      	str	r3, [r7, #0]
}
 8012350:	bf00      	nop
 8012352:	e7fe      	b.n	8012352 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012354:	f001 f936 	bl	80135c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012358:	4b39      	ldr	r3, [pc, #228]	; (8012440 <xTaskResumeAll+0x118>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	3b01      	subs	r3, #1
 801235e:	4a38      	ldr	r2, [pc, #224]	; (8012440 <xTaskResumeAll+0x118>)
 8012360:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012362:	4b37      	ldr	r3, [pc, #220]	; (8012440 <xTaskResumeAll+0x118>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d162      	bne.n	8012430 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801236a:	4b36      	ldr	r3, [pc, #216]	; (8012444 <xTaskResumeAll+0x11c>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d05e      	beq.n	8012430 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012372:	e02f      	b.n	80123d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012374:	4b34      	ldr	r3, [pc, #208]	; (8012448 <xTaskResumeAll+0x120>)
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3318      	adds	r3, #24
 8012380:	4618      	mov	r0, r3
 8012382:	f7fe ff97 	bl	80112b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	3304      	adds	r3, #4
 801238a:	4618      	mov	r0, r3
 801238c:	f7fe ff92 	bl	80112b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012394:	4b2d      	ldr	r3, [pc, #180]	; (801244c <xTaskResumeAll+0x124>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	429a      	cmp	r2, r3
 801239a:	d903      	bls.n	80123a4 <xTaskResumeAll+0x7c>
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a0:	4a2a      	ldr	r2, [pc, #168]	; (801244c <xTaskResumeAll+0x124>)
 80123a2:	6013      	str	r3, [r2, #0]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a8:	4613      	mov	r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	4413      	add	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4a27      	ldr	r2, [pc, #156]	; (8012450 <xTaskResumeAll+0x128>)
 80123b2:	441a      	add	r2, r3
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	3304      	adds	r3, #4
 80123b8:	4619      	mov	r1, r3
 80123ba:	4610      	mov	r0, r2
 80123bc:	f7fe ff1d 	bl	80111fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c4:	4b23      	ldr	r3, [pc, #140]	; (8012454 <xTaskResumeAll+0x12c>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d302      	bcc.n	80123d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80123ce:	4b22      	ldr	r3, [pc, #136]	; (8012458 <xTaskResumeAll+0x130>)
 80123d0:	2201      	movs	r2, #1
 80123d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80123d4:	4b1c      	ldr	r3, [pc, #112]	; (8012448 <xTaskResumeAll+0x120>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d1cb      	bne.n	8012374 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d001      	beq.n	80123e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80123e2:	f000 fb71 	bl	8012ac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80123e6:	4b1d      	ldr	r3, [pc, #116]	; (801245c <xTaskResumeAll+0x134>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d010      	beq.n	8012414 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80123f2:	f000 f859 	bl	80124a8 <xTaskIncrementTick>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80123fc:	4b16      	ldr	r3, [pc, #88]	; (8012458 <xTaskResumeAll+0x130>)
 80123fe:	2201      	movs	r2, #1
 8012400:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	3b01      	subs	r3, #1
 8012406:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d1f1      	bne.n	80123f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801240e:	4b13      	ldr	r3, [pc, #76]	; (801245c <xTaskResumeAll+0x134>)
 8012410:	2200      	movs	r2, #0
 8012412:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012414:	4b10      	ldr	r3, [pc, #64]	; (8012458 <xTaskResumeAll+0x130>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d009      	beq.n	8012430 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801241c:	2301      	movs	r3, #1
 801241e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012420:	4b0f      	ldr	r3, [pc, #60]	; (8012460 <xTaskResumeAll+0x138>)
 8012422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012426:	601a      	str	r2, [r3, #0]
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012430:	f001 f8f8 	bl	8013624 <vPortExitCritical>

	return xAlreadyYielded;
 8012434:	68bb      	ldr	r3, [r7, #8]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	20001700 	.word	0x20001700
 8012444:	200016d8 	.word	0x200016d8
 8012448:	20001698 	.word	0x20001698
 801244c:	200016e0 	.word	0x200016e0
 8012450:	20001208 	.word	0x20001208
 8012454:	20001204 	.word	0x20001204
 8012458:	200016ec 	.word	0x200016ec
 801245c:	200016e8 	.word	0x200016e8
 8012460:	e000ed04 	.word	0xe000ed04

08012464 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801246a:	4b05      	ldr	r3, [pc, #20]	; (8012480 <xTaskGetTickCount+0x1c>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012470:	687b      	ldr	r3, [r7, #4]
}
 8012472:	4618      	mov	r0, r3
 8012474:	370c      	adds	r7, #12
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	200016dc 	.word	0x200016dc

08012484 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801248a:	f001 f97d 	bl	8013788 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801248e:	2300      	movs	r3, #0
 8012490:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012492:	4b04      	ldr	r3, [pc, #16]	; (80124a4 <xTaskGetTickCountFromISR+0x20>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012498:	683b      	ldr	r3, [r7, #0]
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	200016dc 	.word	0x200016dc

080124a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b086      	sub	sp, #24
 80124ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80124ae:	2300      	movs	r3, #0
 80124b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124b2:	4b4f      	ldr	r3, [pc, #316]	; (80125f0 <xTaskIncrementTick+0x148>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f040 808f 	bne.w	80125da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80124bc:	4b4d      	ldr	r3, [pc, #308]	; (80125f4 <xTaskIncrementTick+0x14c>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	3301      	adds	r3, #1
 80124c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80124c4:	4a4b      	ldr	r2, [pc, #300]	; (80125f4 <xTaskIncrementTick+0x14c>)
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d120      	bne.n	8012512 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80124d0:	4b49      	ldr	r3, [pc, #292]	; (80125f8 <xTaskIncrementTick+0x150>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80124da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124de:	f383 8811 	msr	BASEPRI, r3
 80124e2:	f3bf 8f6f 	isb	sy
 80124e6:	f3bf 8f4f 	dsb	sy
 80124ea:	603b      	str	r3, [r7, #0]
}
 80124ec:	bf00      	nop
 80124ee:	e7fe      	b.n	80124ee <xTaskIncrementTick+0x46>
 80124f0:	4b41      	ldr	r3, [pc, #260]	; (80125f8 <xTaskIncrementTick+0x150>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	60fb      	str	r3, [r7, #12]
 80124f6:	4b41      	ldr	r3, [pc, #260]	; (80125fc <xTaskIncrementTick+0x154>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4a3f      	ldr	r2, [pc, #252]	; (80125f8 <xTaskIncrementTick+0x150>)
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	4a3f      	ldr	r2, [pc, #252]	; (80125fc <xTaskIncrementTick+0x154>)
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	6013      	str	r3, [r2, #0]
 8012504:	4b3e      	ldr	r3, [pc, #248]	; (8012600 <xTaskIncrementTick+0x158>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	3301      	adds	r3, #1
 801250a:	4a3d      	ldr	r2, [pc, #244]	; (8012600 <xTaskIncrementTick+0x158>)
 801250c:	6013      	str	r3, [r2, #0]
 801250e:	f000 fadb 	bl	8012ac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012512:	4b3c      	ldr	r3, [pc, #240]	; (8012604 <xTaskIncrementTick+0x15c>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	693a      	ldr	r2, [r7, #16]
 8012518:	429a      	cmp	r2, r3
 801251a:	d349      	bcc.n	80125b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801251c:	4b36      	ldr	r3, [pc, #216]	; (80125f8 <xTaskIncrementTick+0x150>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d104      	bne.n	8012530 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012526:	4b37      	ldr	r3, [pc, #220]	; (8012604 <xTaskIncrementTick+0x15c>)
 8012528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801252c:	601a      	str	r2, [r3, #0]
					break;
 801252e:	e03f      	b.n	80125b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012530:	4b31      	ldr	r3, [pc, #196]	; (80125f8 <xTaskIncrementTick+0x150>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	68db      	ldr	r3, [r3, #12]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012540:	693a      	ldr	r2, [r7, #16]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	429a      	cmp	r2, r3
 8012546:	d203      	bcs.n	8012550 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012548:	4a2e      	ldr	r2, [pc, #184]	; (8012604 <xTaskIncrementTick+0x15c>)
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801254e:	e02f      	b.n	80125b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	3304      	adds	r3, #4
 8012554:	4618      	mov	r0, r3
 8012556:	f7fe fead 	bl	80112b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801255e:	2b00      	cmp	r3, #0
 8012560:	d004      	beq.n	801256c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	3318      	adds	r3, #24
 8012566:	4618      	mov	r0, r3
 8012568:	f7fe fea4 	bl	80112b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012570:	4b25      	ldr	r3, [pc, #148]	; (8012608 <xTaskIncrementTick+0x160>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	429a      	cmp	r2, r3
 8012576:	d903      	bls.n	8012580 <xTaskIncrementTick+0xd8>
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257c:	4a22      	ldr	r2, [pc, #136]	; (8012608 <xTaskIncrementTick+0x160>)
 801257e:	6013      	str	r3, [r2, #0]
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012584:	4613      	mov	r3, r2
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4413      	add	r3, r2
 801258a:	009b      	lsls	r3, r3, #2
 801258c:	4a1f      	ldr	r2, [pc, #124]	; (801260c <xTaskIncrementTick+0x164>)
 801258e:	441a      	add	r2, r3
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	3304      	adds	r3, #4
 8012594:	4619      	mov	r1, r3
 8012596:	4610      	mov	r0, r2
 8012598:	f7fe fe2f 	bl	80111fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125a0:	4b1b      	ldr	r3, [pc, #108]	; (8012610 <xTaskIncrementTick+0x168>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d3b8      	bcc.n	801251c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80125aa:	2301      	movs	r3, #1
 80125ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80125ae:	e7b5      	b.n	801251c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80125b0:	4b17      	ldr	r3, [pc, #92]	; (8012610 <xTaskIncrementTick+0x168>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125b6:	4915      	ldr	r1, [pc, #84]	; (801260c <xTaskIncrementTick+0x164>)
 80125b8:	4613      	mov	r3, r2
 80125ba:	009b      	lsls	r3, r3, #2
 80125bc:	4413      	add	r3, r2
 80125be:	009b      	lsls	r3, r3, #2
 80125c0:	440b      	add	r3, r1
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d901      	bls.n	80125cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80125c8:	2301      	movs	r3, #1
 80125ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80125cc:	4b11      	ldr	r3, [pc, #68]	; (8012614 <xTaskIncrementTick+0x16c>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d007      	beq.n	80125e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80125d4:	2301      	movs	r3, #1
 80125d6:	617b      	str	r3, [r7, #20]
 80125d8:	e004      	b.n	80125e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80125da:	4b0f      	ldr	r3, [pc, #60]	; (8012618 <xTaskIncrementTick+0x170>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	3301      	adds	r3, #1
 80125e0:	4a0d      	ldr	r2, [pc, #52]	; (8012618 <xTaskIncrementTick+0x170>)
 80125e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80125e4:	697b      	ldr	r3, [r7, #20]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3718      	adds	r7, #24
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	20001700 	.word	0x20001700
 80125f4:	200016dc 	.word	0x200016dc
 80125f8:	20001690 	.word	0x20001690
 80125fc:	20001694 	.word	0x20001694
 8012600:	200016f0 	.word	0x200016f0
 8012604:	200016f8 	.word	0x200016f8
 8012608:	200016e0 	.word	0x200016e0
 801260c:	20001208 	.word	0x20001208
 8012610:	20001204 	.word	0x20001204
 8012614:	200016ec 	.word	0x200016ec
 8012618:	200016e8 	.word	0x200016e8

0801261c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801261c:	b480      	push	{r7}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012622:	4b2a      	ldr	r3, [pc, #168]	; (80126cc <vTaskSwitchContext+0xb0>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d003      	beq.n	8012632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801262a:	4b29      	ldr	r3, [pc, #164]	; (80126d0 <vTaskSwitchContext+0xb4>)
 801262c:	2201      	movs	r2, #1
 801262e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012630:	e046      	b.n	80126c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8012632:	4b27      	ldr	r3, [pc, #156]	; (80126d0 <vTaskSwitchContext+0xb4>)
 8012634:	2200      	movs	r2, #0
 8012636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012638:	4b26      	ldr	r3, [pc, #152]	; (80126d4 <vTaskSwitchContext+0xb8>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	60fb      	str	r3, [r7, #12]
 801263e:	e010      	b.n	8012662 <vTaskSwitchContext+0x46>
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d10a      	bne.n	801265c <vTaskSwitchContext+0x40>
	__asm volatile
 8012646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801264a:	f383 8811 	msr	BASEPRI, r3
 801264e:	f3bf 8f6f 	isb	sy
 8012652:	f3bf 8f4f 	dsb	sy
 8012656:	607b      	str	r3, [r7, #4]
}
 8012658:	bf00      	nop
 801265a:	e7fe      	b.n	801265a <vTaskSwitchContext+0x3e>
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3b01      	subs	r3, #1
 8012660:	60fb      	str	r3, [r7, #12]
 8012662:	491d      	ldr	r1, [pc, #116]	; (80126d8 <vTaskSwitchContext+0xbc>)
 8012664:	68fa      	ldr	r2, [r7, #12]
 8012666:	4613      	mov	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4413      	add	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	440b      	add	r3, r1
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d0e4      	beq.n	8012640 <vTaskSwitchContext+0x24>
 8012676:	68fa      	ldr	r2, [r7, #12]
 8012678:	4613      	mov	r3, r2
 801267a:	009b      	lsls	r3, r3, #2
 801267c:	4413      	add	r3, r2
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	4a15      	ldr	r2, [pc, #84]	; (80126d8 <vTaskSwitchContext+0xbc>)
 8012682:	4413      	add	r3, r2
 8012684:	60bb      	str	r3, [r7, #8]
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	685a      	ldr	r2, [r3, #4]
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	605a      	str	r2, [r3, #4]
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	685a      	ldr	r2, [r3, #4]
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	3308      	adds	r3, #8
 8012698:	429a      	cmp	r2, r3
 801269a:	d104      	bne.n	80126a6 <vTaskSwitchContext+0x8a>
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	685a      	ldr	r2, [r3, #4]
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	605a      	str	r2, [r3, #4]
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	4a0b      	ldr	r2, [pc, #44]	; (80126dc <vTaskSwitchContext+0xc0>)
 80126ae:	6013      	str	r3, [r2, #0]
 80126b0:	4a08      	ldr	r2, [pc, #32]	; (80126d4 <vTaskSwitchContext+0xb8>)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80126b6:	4b09      	ldr	r3, [pc, #36]	; (80126dc <vTaskSwitchContext+0xc0>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	3354      	adds	r3, #84	; 0x54
 80126bc:	4a08      	ldr	r2, [pc, #32]	; (80126e0 <vTaskSwitchContext+0xc4>)
 80126be:	6013      	str	r3, [r2, #0]
}
 80126c0:	bf00      	nop
 80126c2:	3714      	adds	r7, #20
 80126c4:	46bd      	mov	sp, r7
 80126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ca:	4770      	bx	lr
 80126cc:	20001700 	.word	0x20001700
 80126d0:	200016ec 	.word	0x200016ec
 80126d4:	200016e0 	.word	0x200016e0
 80126d8:	20001208 	.word	0x20001208
 80126dc:	20001204 	.word	0x20001204
 80126e0:	20000194 	.word	0x20000194

080126e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d10a      	bne.n	801270a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80126f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f8:	f383 8811 	msr	BASEPRI, r3
 80126fc:	f3bf 8f6f 	isb	sy
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	60fb      	str	r3, [r7, #12]
}
 8012706:	bf00      	nop
 8012708:	e7fe      	b.n	8012708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801270a:	4b07      	ldr	r3, [pc, #28]	; (8012728 <vTaskPlaceOnEventList+0x44>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	3318      	adds	r3, #24
 8012710:	4619      	mov	r1, r3
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7fe fd95 	bl	8011242 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012718:	2101      	movs	r1, #1
 801271a:	6838      	ldr	r0, [r7, #0]
 801271c:	f000 fa80 	bl	8012c20 <prvAddCurrentTaskToDelayedList>
}
 8012720:	bf00      	nop
 8012722:	3710      	adds	r7, #16
 8012724:	46bd      	mov	sp, r7
 8012726:	bd80      	pop	{r7, pc}
 8012728:	20001204 	.word	0x20001204

0801272c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d10a      	bne.n	8012754 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	617b      	str	r3, [r7, #20]
}
 8012750:	bf00      	nop
 8012752:	e7fe      	b.n	8012752 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012754:	4b0a      	ldr	r3, [pc, #40]	; (8012780 <vTaskPlaceOnEventListRestricted+0x54>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	3318      	adds	r3, #24
 801275a:	4619      	mov	r1, r3
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f7fe fd4c 	bl	80111fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801276c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801276e:	6879      	ldr	r1, [r7, #4]
 8012770:	68b8      	ldr	r0, [r7, #8]
 8012772:	f000 fa55 	bl	8012c20 <prvAddCurrentTaskToDelayedList>
	}
 8012776:	bf00      	nop
 8012778:	3718      	adds	r7, #24
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	20001204 	.word	0x20001204

08012784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	68db      	ldr	r3, [r3, #12]
 8012790:	68db      	ldr	r3, [r3, #12]
 8012792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d10a      	bne.n	80127b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801279e:	f383 8811 	msr	BASEPRI, r3
 80127a2:	f3bf 8f6f 	isb	sy
 80127a6:	f3bf 8f4f 	dsb	sy
 80127aa:	60fb      	str	r3, [r7, #12]
}
 80127ac:	bf00      	nop
 80127ae:	e7fe      	b.n	80127ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	3318      	adds	r3, #24
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7fe fd7d 	bl	80112b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127ba:	4b1e      	ldr	r3, [pc, #120]	; (8012834 <xTaskRemoveFromEventList+0xb0>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d11d      	bne.n	80127fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	3304      	adds	r3, #4
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fd74 	bl	80112b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127d0:	4b19      	ldr	r3, [pc, #100]	; (8012838 <xTaskRemoveFromEventList+0xb4>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d903      	bls.n	80127e0 <xTaskRemoveFromEventList+0x5c>
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127dc:	4a16      	ldr	r2, [pc, #88]	; (8012838 <xTaskRemoveFromEventList+0xb4>)
 80127de:	6013      	str	r3, [r2, #0]
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127e4:	4613      	mov	r3, r2
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	4413      	add	r3, r2
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	4a13      	ldr	r2, [pc, #76]	; (801283c <xTaskRemoveFromEventList+0xb8>)
 80127ee:	441a      	add	r2, r3
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	3304      	adds	r3, #4
 80127f4:	4619      	mov	r1, r3
 80127f6:	4610      	mov	r0, r2
 80127f8:	f7fe fcff 	bl	80111fa <vListInsertEnd>
 80127fc:	e005      	b.n	801280a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	3318      	adds	r3, #24
 8012802:	4619      	mov	r1, r3
 8012804:	480e      	ldr	r0, [pc, #56]	; (8012840 <xTaskRemoveFromEventList+0xbc>)
 8012806:	f7fe fcf8 	bl	80111fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801280e:	4b0d      	ldr	r3, [pc, #52]	; (8012844 <xTaskRemoveFromEventList+0xc0>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012814:	429a      	cmp	r2, r3
 8012816:	d905      	bls.n	8012824 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012818:	2301      	movs	r3, #1
 801281a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801281c:	4b0a      	ldr	r3, [pc, #40]	; (8012848 <xTaskRemoveFromEventList+0xc4>)
 801281e:	2201      	movs	r2, #1
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	e001      	b.n	8012828 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012824:	2300      	movs	r3, #0
 8012826:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012828:	697b      	ldr	r3, [r7, #20]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3718      	adds	r7, #24
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	20001700 	.word	0x20001700
 8012838:	200016e0 	.word	0x200016e0
 801283c:	20001208 	.word	0x20001208
 8012840:	20001698 	.word	0x20001698
 8012844:	20001204 	.word	0x20001204
 8012848:	200016ec 	.word	0x200016ec

0801284c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012854:	4b06      	ldr	r3, [pc, #24]	; (8012870 <vTaskInternalSetTimeOutState+0x24>)
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801285c:	4b05      	ldr	r3, [pc, #20]	; (8012874 <vTaskInternalSetTimeOutState+0x28>)
 801285e:	681a      	ldr	r2, [r3, #0]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	605a      	str	r2, [r3, #4]
}
 8012864:	bf00      	nop
 8012866:	370c      	adds	r7, #12
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr
 8012870:	200016f0 	.word	0x200016f0
 8012874:	200016dc 	.word	0x200016dc

08012878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b088      	sub	sp, #32
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d10a      	bne.n	801289e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288c:	f383 8811 	msr	BASEPRI, r3
 8012890:	f3bf 8f6f 	isb	sy
 8012894:	f3bf 8f4f 	dsb	sy
 8012898:	613b      	str	r3, [r7, #16]
}
 801289a:	bf00      	nop
 801289c:	e7fe      	b.n	801289c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10a      	bne.n	80128ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80128a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	60fb      	str	r3, [r7, #12]
}
 80128b6:	bf00      	nop
 80128b8:	e7fe      	b.n	80128b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80128ba:	f000 fe83 	bl	80135c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80128be:	4b1d      	ldr	r3, [pc, #116]	; (8012934 <xTaskCheckForTimeOut+0xbc>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	69ba      	ldr	r2, [r7, #24]
 80128ca:	1ad3      	subs	r3, r2, r3
 80128cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128d6:	d102      	bne.n	80128de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80128d8:	2300      	movs	r3, #0
 80128da:	61fb      	str	r3, [r7, #28]
 80128dc:	e023      	b.n	8012926 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	4b15      	ldr	r3, [pc, #84]	; (8012938 <xTaskCheckForTimeOut+0xc0>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d007      	beq.n	80128fa <xTaskCheckForTimeOut+0x82>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	69ba      	ldr	r2, [r7, #24]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d302      	bcc.n	80128fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80128f4:	2301      	movs	r3, #1
 80128f6:	61fb      	str	r3, [r7, #28]
 80128f8:	e015      	b.n	8012926 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	429a      	cmp	r2, r3
 8012902:	d20b      	bcs.n	801291c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	681a      	ldr	r2, [r3, #0]
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	1ad2      	subs	r2, r2, r3
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff ff9b 	bl	801284c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012916:	2300      	movs	r3, #0
 8012918:	61fb      	str	r3, [r7, #28]
 801291a:	e004      	b.n	8012926 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	2200      	movs	r2, #0
 8012920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012922:	2301      	movs	r3, #1
 8012924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012926:	f000 fe7d 	bl	8013624 <vPortExitCritical>

	return xReturn;
 801292a:	69fb      	ldr	r3, [r7, #28]
}
 801292c:	4618      	mov	r0, r3
 801292e:	3720      	adds	r7, #32
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}
 8012934:	200016dc 	.word	0x200016dc
 8012938:	200016f0 	.word	0x200016f0

0801293c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801293c:	b480      	push	{r7}
 801293e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012940:	4b03      	ldr	r3, [pc, #12]	; (8012950 <vTaskMissedYield+0x14>)
 8012942:	2201      	movs	r2, #1
 8012944:	601a      	str	r2, [r3, #0]
}
 8012946:	bf00      	nop
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr
 8012950:	200016ec 	.word	0x200016ec

08012954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801295c:	f000 f852 	bl	8012a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012960:	4b06      	ldr	r3, [pc, #24]	; (801297c <prvIdleTask+0x28>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2b01      	cmp	r3, #1
 8012966:	d9f9      	bls.n	801295c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012968:	4b05      	ldr	r3, [pc, #20]	; (8012980 <prvIdleTask+0x2c>)
 801296a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801296e:	601a      	str	r2, [r3, #0]
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012978:	e7f0      	b.n	801295c <prvIdleTask+0x8>
 801297a:	bf00      	nop
 801297c:	20001208 	.word	0x20001208
 8012980:	e000ed04 	.word	0xe000ed04

08012984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801298a:	2300      	movs	r3, #0
 801298c:	607b      	str	r3, [r7, #4]
 801298e:	e00c      	b.n	80129aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012990:	687a      	ldr	r2, [r7, #4]
 8012992:	4613      	mov	r3, r2
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	4413      	add	r3, r2
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	4a12      	ldr	r2, [pc, #72]	; (80129e4 <prvInitialiseTaskLists+0x60>)
 801299c:	4413      	add	r3, r2
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fe fbfe 	bl	80111a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	3301      	adds	r3, #1
 80129a8:	607b      	str	r3, [r7, #4]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2b37      	cmp	r3, #55	; 0x37
 80129ae:	d9ef      	bls.n	8012990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80129b0:	480d      	ldr	r0, [pc, #52]	; (80129e8 <prvInitialiseTaskLists+0x64>)
 80129b2:	f7fe fbf5 	bl	80111a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80129b6:	480d      	ldr	r0, [pc, #52]	; (80129ec <prvInitialiseTaskLists+0x68>)
 80129b8:	f7fe fbf2 	bl	80111a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80129bc:	480c      	ldr	r0, [pc, #48]	; (80129f0 <prvInitialiseTaskLists+0x6c>)
 80129be:	f7fe fbef 	bl	80111a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80129c2:	480c      	ldr	r0, [pc, #48]	; (80129f4 <prvInitialiseTaskLists+0x70>)
 80129c4:	f7fe fbec 	bl	80111a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80129c8:	480b      	ldr	r0, [pc, #44]	; (80129f8 <prvInitialiseTaskLists+0x74>)
 80129ca:	f7fe fbe9 	bl	80111a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80129ce:	4b0b      	ldr	r3, [pc, #44]	; (80129fc <prvInitialiseTaskLists+0x78>)
 80129d0:	4a05      	ldr	r2, [pc, #20]	; (80129e8 <prvInitialiseTaskLists+0x64>)
 80129d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80129d4:	4b0a      	ldr	r3, [pc, #40]	; (8012a00 <prvInitialiseTaskLists+0x7c>)
 80129d6:	4a05      	ldr	r2, [pc, #20]	; (80129ec <prvInitialiseTaskLists+0x68>)
 80129d8:	601a      	str	r2, [r3, #0]
}
 80129da:	bf00      	nop
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	20001208 	.word	0x20001208
 80129e8:	20001668 	.word	0x20001668
 80129ec:	2000167c 	.word	0x2000167c
 80129f0:	20001698 	.word	0x20001698
 80129f4:	200016ac 	.word	0x200016ac
 80129f8:	200016c4 	.word	0x200016c4
 80129fc:	20001690 	.word	0x20001690
 8012a00:	20001694 	.word	0x20001694

08012a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a0a:	e019      	b.n	8012a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012a0c:	f000 fdda 	bl	80135c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a10:	4b10      	ldr	r3, [pc, #64]	; (8012a54 <prvCheckTasksWaitingTermination+0x50>)
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	68db      	ldr	r3, [r3, #12]
 8012a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fe fc49 	bl	80112b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012a22:	4b0d      	ldr	r3, [pc, #52]	; (8012a58 <prvCheckTasksWaitingTermination+0x54>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	4a0b      	ldr	r2, [pc, #44]	; (8012a58 <prvCheckTasksWaitingTermination+0x54>)
 8012a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012a2c:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <prvCheckTasksWaitingTermination+0x58>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	3b01      	subs	r3, #1
 8012a32:	4a0a      	ldr	r2, [pc, #40]	; (8012a5c <prvCheckTasksWaitingTermination+0x58>)
 8012a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012a36:	f000 fdf5 	bl	8013624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f810 	bl	8012a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012a40:	4b06      	ldr	r3, [pc, #24]	; (8012a5c <prvCheckTasksWaitingTermination+0x58>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1e1      	bne.n	8012a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012a48:	bf00      	nop
 8012a4a:	bf00      	nop
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	200016ac 	.word	0x200016ac
 8012a58:	200016d8 	.word	0x200016d8
 8012a5c:	200016c0 	.word	0x200016c0

08012a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	3354      	adds	r3, #84	; 0x54
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f001 ff15 	bl	801489c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d108      	bne.n	8012a8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a80:	4618      	mov	r0, r3
 8012a82:	f000 ff8d 	bl	80139a0 <vPortFree>
				vPortFree( pxTCB );
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 ff8a 	bl	80139a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012a8c:	e018      	b.n	8012ac0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d103      	bne.n	8012aa0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f000 ff81 	bl	80139a0 <vPortFree>
	}
 8012a9e:	e00f      	b.n	8012ac0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	d00a      	beq.n	8012ac0 <prvDeleteTCB+0x60>
	__asm volatile
 8012aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aae:	f383 8811 	msr	BASEPRI, r3
 8012ab2:	f3bf 8f6f 	isb	sy
 8012ab6:	f3bf 8f4f 	dsb	sy
 8012aba:	60fb      	str	r3, [r7, #12]
}
 8012abc:	bf00      	nop
 8012abe:	e7fe      	b.n	8012abe <prvDeleteTCB+0x5e>
	}
 8012ac0:	bf00      	nop
 8012ac2:	3710      	adds	r7, #16
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ace:	4b0c      	ldr	r3, [pc, #48]	; (8012b00 <prvResetNextTaskUnblockTime+0x38>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d104      	bne.n	8012ae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012ad8:	4b0a      	ldr	r3, [pc, #40]	; (8012b04 <prvResetNextTaskUnblockTime+0x3c>)
 8012ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012ae0:	e008      	b.n	8012af4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ae2:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <prvResetNextTaskUnblockTime+0x38>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	68db      	ldr	r3, [r3, #12]
 8012aea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	4a04      	ldr	r2, [pc, #16]	; (8012b04 <prvResetNextTaskUnblockTime+0x3c>)
 8012af2:	6013      	str	r3, [r2, #0]
}
 8012af4:	bf00      	nop
 8012af6:	370c      	adds	r7, #12
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr
 8012b00:	20001690 	.word	0x20001690
 8012b04:	200016f8 	.word	0x200016f8

08012b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012b0e:	4b0b      	ldr	r3, [pc, #44]	; (8012b3c <xTaskGetSchedulerState+0x34>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d102      	bne.n	8012b1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012b16:	2301      	movs	r3, #1
 8012b18:	607b      	str	r3, [r7, #4]
 8012b1a:	e008      	b.n	8012b2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b1c:	4b08      	ldr	r3, [pc, #32]	; (8012b40 <xTaskGetSchedulerState+0x38>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d102      	bne.n	8012b2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012b24:	2302      	movs	r3, #2
 8012b26:	607b      	str	r3, [r7, #4]
 8012b28:	e001      	b.n	8012b2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012b2e:	687b      	ldr	r3, [r7, #4]
	}
 8012b30:	4618      	mov	r0, r3
 8012b32:	370c      	adds	r7, #12
 8012b34:	46bd      	mov	sp, r7
 8012b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3a:	4770      	bx	lr
 8012b3c:	200016e4 	.word	0x200016e4
 8012b40:	20001700 	.word	0x20001700

08012b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b086      	sub	sp, #24
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012b50:	2300      	movs	r3, #0
 8012b52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d056      	beq.n	8012c08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012b5a:	4b2e      	ldr	r3, [pc, #184]	; (8012c14 <xTaskPriorityDisinherit+0xd0>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	693a      	ldr	r2, [r7, #16]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d00a      	beq.n	8012b7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b68:	f383 8811 	msr	BASEPRI, r3
 8012b6c:	f3bf 8f6f 	isb	sy
 8012b70:	f3bf 8f4f 	dsb	sy
 8012b74:	60fb      	str	r3, [r7, #12]
}
 8012b76:	bf00      	nop
 8012b78:	e7fe      	b.n	8012b78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d10a      	bne.n	8012b98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b86:	f383 8811 	msr	BASEPRI, r3
 8012b8a:	f3bf 8f6f 	isb	sy
 8012b8e:	f3bf 8f4f 	dsb	sy
 8012b92:	60bb      	str	r3, [r7, #8]
}
 8012b94:	bf00      	nop
 8012b96:	e7fe      	b.n	8012b96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b9c:	1e5a      	subs	r2, r3, #1
 8012b9e:	693b      	ldr	r3, [r7, #16]
 8012ba0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d02c      	beq.n	8012c08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d128      	bne.n	8012c08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	3304      	adds	r3, #4
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fe fb7a 	bl	80112b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd8:	4b0f      	ldr	r3, [pc, #60]	; (8012c18 <xTaskPriorityDisinherit+0xd4>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	429a      	cmp	r2, r3
 8012bde:	d903      	bls.n	8012be8 <xTaskPriorityDisinherit+0xa4>
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be4:	4a0c      	ldr	r2, [pc, #48]	; (8012c18 <xTaskPriorityDisinherit+0xd4>)
 8012be6:	6013      	str	r3, [r2, #0]
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bec:	4613      	mov	r3, r2
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4413      	add	r3, r2
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	4a09      	ldr	r2, [pc, #36]	; (8012c1c <xTaskPriorityDisinherit+0xd8>)
 8012bf6:	441a      	add	r2, r3
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	3304      	adds	r3, #4
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	4610      	mov	r0, r2
 8012c00:	f7fe fafb 	bl	80111fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012c04:	2301      	movs	r3, #1
 8012c06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c08:	697b      	ldr	r3, [r7, #20]
	}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3718      	adds	r7, #24
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	20001204 	.word	0x20001204
 8012c18:	200016e0 	.word	0x200016e0
 8012c1c:	20001208 	.word	0x20001208

08012c20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c2a:	4b21      	ldr	r3, [pc, #132]	; (8012cb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c30:	4b20      	ldr	r3, [pc, #128]	; (8012cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	3304      	adds	r3, #4
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fe fb3c 	bl	80112b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c42:	d10a      	bne.n	8012c5a <prvAddCurrentTaskToDelayedList+0x3a>
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d007      	beq.n	8012c5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c4a:	4b1a      	ldr	r3, [pc, #104]	; (8012cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	3304      	adds	r3, #4
 8012c50:	4619      	mov	r1, r3
 8012c52:	4819      	ldr	r0, [pc, #100]	; (8012cb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8012c54:	f7fe fad1 	bl	80111fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c58:	e026      	b.n	8012ca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	4413      	add	r3, r2
 8012c60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c62:	4b14      	ldr	r3, [pc, #80]	; (8012cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	68ba      	ldr	r2, [r7, #8]
 8012c68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c6a:	68ba      	ldr	r2, [r7, #8]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d209      	bcs.n	8012c86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c72:	4b12      	ldr	r3, [pc, #72]	; (8012cbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	4b0f      	ldr	r3, [pc, #60]	; (8012cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	3304      	adds	r3, #4
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	4610      	mov	r0, r2
 8012c80:	f7fe fadf 	bl	8011242 <vListInsert>
}
 8012c84:	e010      	b.n	8012ca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c86:	4b0e      	ldr	r3, [pc, #56]	; (8012cc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	4b0a      	ldr	r3, [pc, #40]	; (8012cb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	3304      	adds	r3, #4
 8012c90:	4619      	mov	r1, r3
 8012c92:	4610      	mov	r0, r2
 8012c94:	f7fe fad5 	bl	8011242 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c98:	4b0a      	ldr	r3, [pc, #40]	; (8012cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d202      	bcs.n	8012ca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012ca2:	4a08      	ldr	r2, [pc, #32]	; (8012cc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	6013      	str	r3, [r2, #0]
}
 8012ca8:	bf00      	nop
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	200016dc 	.word	0x200016dc
 8012cb4:	20001204 	.word	0x20001204
 8012cb8:	200016c4 	.word	0x200016c4
 8012cbc:	20001694 	.word	0x20001694
 8012cc0:	20001690 	.word	0x20001690
 8012cc4:	200016f8 	.word	0x200016f8

08012cc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b08a      	sub	sp, #40	; 0x28
 8012ccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012cd2:	f000 fb07 	bl	80132e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012cd6:	4b1c      	ldr	r3, [pc, #112]	; (8012d48 <xTimerCreateTimerTask+0x80>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d021      	beq.n	8012d22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012ce6:	1d3a      	adds	r2, r7, #4
 8012ce8:	f107 0108 	add.w	r1, r7, #8
 8012cec:	f107 030c 	add.w	r3, r7, #12
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7fe fa3b 	bl	801116c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012cf6:	6879      	ldr	r1, [r7, #4]
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	68fa      	ldr	r2, [r7, #12]
 8012cfc:	9202      	str	r2, [sp, #8]
 8012cfe:	9301      	str	r3, [sp, #4]
 8012d00:	2302      	movs	r3, #2
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	2300      	movs	r3, #0
 8012d06:	460a      	mov	r2, r1
 8012d08:	4910      	ldr	r1, [pc, #64]	; (8012d4c <xTimerCreateTimerTask+0x84>)
 8012d0a:	4811      	ldr	r0, [pc, #68]	; (8012d50 <xTimerCreateTimerTask+0x88>)
 8012d0c:	f7ff f8a2 	bl	8011e54 <xTaskCreateStatic>
 8012d10:	4603      	mov	r3, r0
 8012d12:	4a10      	ldr	r2, [pc, #64]	; (8012d54 <xTimerCreateTimerTask+0x8c>)
 8012d14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012d16:	4b0f      	ldr	r3, [pc, #60]	; (8012d54 <xTimerCreateTimerTask+0x8c>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10a      	bne.n	8012d3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	f383 8811 	msr	BASEPRI, r3
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	613b      	str	r3, [r7, #16]
}
 8012d3a:	bf00      	nop
 8012d3c:	e7fe      	b.n	8012d3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012d3e:	697b      	ldr	r3, [r7, #20]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3718      	adds	r7, #24
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	20001734 	.word	0x20001734
 8012d4c:	08014a5c 	.word	0x08014a5c
 8012d50:	08012e8d 	.word	0x08012e8d
 8012d54:	20001738 	.word	0x20001738

08012d58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b08a      	sub	sp, #40	; 0x28
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	60b9      	str	r1, [r7, #8]
 8012d62:	607a      	str	r2, [r7, #4]
 8012d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012d66:	2300      	movs	r3, #0
 8012d68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d10a      	bne.n	8012d86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d74:	f383 8811 	msr	BASEPRI, r3
 8012d78:	f3bf 8f6f 	isb	sy
 8012d7c:	f3bf 8f4f 	dsb	sy
 8012d80:	623b      	str	r3, [r7, #32]
}
 8012d82:	bf00      	nop
 8012d84:	e7fe      	b.n	8012d84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012d86:	4b1a      	ldr	r3, [pc, #104]	; (8012df0 <xTimerGenericCommand+0x98>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d02a      	beq.n	8012de4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	2b05      	cmp	r3, #5
 8012d9e:	dc18      	bgt.n	8012dd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012da0:	f7ff feb2 	bl	8012b08 <xTaskGetSchedulerState>
 8012da4:	4603      	mov	r3, r0
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	d109      	bne.n	8012dbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012daa:	4b11      	ldr	r3, [pc, #68]	; (8012df0 <xTimerGenericCommand+0x98>)
 8012dac:	6818      	ldr	r0, [r3, #0]
 8012dae:	f107 0110 	add.w	r1, r7, #16
 8012db2:	2300      	movs	r3, #0
 8012db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012db6:	f7fe fbe5 	bl	8011584 <xQueueGenericSend>
 8012dba:	6278      	str	r0, [r7, #36]	; 0x24
 8012dbc:	e012      	b.n	8012de4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012dbe:	4b0c      	ldr	r3, [pc, #48]	; (8012df0 <xTimerGenericCommand+0x98>)
 8012dc0:	6818      	ldr	r0, [r3, #0]
 8012dc2:	f107 0110 	add.w	r1, r7, #16
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f7fe fbdb 	bl	8011584 <xQueueGenericSend>
 8012dce:	6278      	str	r0, [r7, #36]	; 0x24
 8012dd0:	e008      	b.n	8012de4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012dd2:	4b07      	ldr	r3, [pc, #28]	; (8012df0 <xTimerGenericCommand+0x98>)
 8012dd4:	6818      	ldr	r0, [r3, #0]
 8012dd6:	f107 0110 	add.w	r1, r7, #16
 8012dda:	2300      	movs	r3, #0
 8012ddc:	683a      	ldr	r2, [r7, #0]
 8012dde:	f7fe fccf 	bl	8011780 <xQueueGenericSendFromISR>
 8012de2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3728      	adds	r7, #40	; 0x28
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	20001734 	.word	0x20001734

08012df4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b088      	sub	sp, #32
 8012df8:	af02      	add	r7, sp, #8
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dfe:	4b22      	ldr	r3, [pc, #136]	; (8012e88 <prvProcessExpiredTimer+0x94>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fa51 	bl	80112b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e18:	f003 0304 	and.w	r3, r3, #4
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d022      	beq.n	8012e66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	699a      	ldr	r2, [r3, #24]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	18d1      	adds	r1, r2, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	683a      	ldr	r2, [r7, #0]
 8012e2c:	6978      	ldr	r0, [r7, #20]
 8012e2e:	f000 f8d1 	bl	8012fd4 <prvInsertTimerInActiveList>
 8012e32:	4603      	mov	r3, r0
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d01f      	beq.n	8012e78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e38:	2300      	movs	r3, #0
 8012e3a:	9300      	str	r3, [sp, #0]
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	2100      	movs	r1, #0
 8012e42:	6978      	ldr	r0, [r7, #20]
 8012e44:	f7ff ff88 	bl	8012d58 <xTimerGenericCommand>
 8012e48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012e4a:	693b      	ldr	r3, [r7, #16]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d113      	bne.n	8012e78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e54:	f383 8811 	msr	BASEPRI, r3
 8012e58:	f3bf 8f6f 	isb	sy
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	60fb      	str	r3, [r7, #12]
}
 8012e62:	bf00      	nop
 8012e64:	e7fe      	b.n	8012e64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e6c:	f023 0301 	bic.w	r3, r3, #1
 8012e70:	b2da      	uxtb	r2, r3
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	6a1b      	ldr	r3, [r3, #32]
 8012e7c:	6978      	ldr	r0, [r7, #20]
 8012e7e:	4798      	blx	r3
}
 8012e80:	bf00      	nop
 8012e82:	3718      	adds	r7, #24
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	2000172c 	.word	0x2000172c

08012e8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e94:	f107 0308 	add.w	r3, r7, #8
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 f857 	bl	8012f4c <prvGetNextExpireTime>
 8012e9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	68f8      	ldr	r0, [r7, #12]
 8012ea6:	f000 f803 	bl	8012eb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012eaa:	f000 f8d5 	bl	8013058 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012eae:	e7f1      	b.n	8012e94 <prvTimerTask+0x8>

08012eb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012eba:	f7ff fa27 	bl	801230c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012ebe:	f107 0308 	add.w	r3, r7, #8
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 f866 	bl	8012f94 <prvSampleTimeNow>
 8012ec8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d130      	bne.n	8012f32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d10a      	bne.n	8012eec <prvProcessTimerOrBlockTask+0x3c>
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d806      	bhi.n	8012eec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012ede:	f7ff fa23 	bl	8012328 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012ee2:	68f9      	ldr	r1, [r7, #12]
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff ff85 	bl	8012df4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012eea:	e024      	b.n	8012f36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d008      	beq.n	8012f04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ef2:	4b13      	ldr	r3, [pc, #76]	; (8012f40 <prvProcessTimerOrBlockTask+0x90>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d101      	bne.n	8012f00 <prvProcessTimerOrBlockTask+0x50>
 8012efc:	2301      	movs	r3, #1
 8012efe:	e000      	b.n	8012f02 <prvProcessTimerOrBlockTask+0x52>
 8012f00:	2300      	movs	r3, #0
 8012f02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012f04:	4b0f      	ldr	r3, [pc, #60]	; (8012f44 <prvProcessTimerOrBlockTask+0x94>)
 8012f06:	6818      	ldr	r0, [r3, #0]
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	683a      	ldr	r2, [r7, #0]
 8012f10:	4619      	mov	r1, r3
 8012f12:	f7fe ff6b 	bl	8011dec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012f16:	f7ff fa07 	bl	8012328 <xTaskResumeAll>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10a      	bne.n	8012f36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012f20:	4b09      	ldr	r3, [pc, #36]	; (8012f48 <prvProcessTimerOrBlockTask+0x98>)
 8012f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f26:	601a      	str	r2, [r3, #0]
 8012f28:	f3bf 8f4f 	dsb	sy
 8012f2c:	f3bf 8f6f 	isb	sy
}
 8012f30:	e001      	b.n	8012f36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012f32:	f7ff f9f9 	bl	8012328 <xTaskResumeAll>
}
 8012f36:	bf00      	nop
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	20001730 	.word	0x20001730
 8012f44:	20001734 	.word	0x20001734
 8012f48:	e000ed04 	.word	0xe000ed04

08012f4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b085      	sub	sp, #20
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012f54:	4b0e      	ldr	r3, [pc, #56]	; (8012f90 <prvGetNextExpireTime+0x44>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d101      	bne.n	8012f62 <prvGetNextExpireTime+0x16>
 8012f5e:	2201      	movs	r2, #1
 8012f60:	e000      	b.n	8012f64 <prvGetNextExpireTime+0x18>
 8012f62:	2200      	movs	r2, #0
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d105      	bne.n	8012f7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f70:	4b07      	ldr	r3, [pc, #28]	; (8012f90 <prvGetNextExpireTime+0x44>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	60fb      	str	r3, [r7, #12]
 8012f7a:	e001      	b.n	8012f80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012f80:	68fb      	ldr	r3, [r7, #12]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3714      	adds	r7, #20
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr
 8012f8e:	bf00      	nop
 8012f90:	2000172c 	.word	0x2000172c

08012f94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f9c:	f7ff fa62 	bl	8012464 <xTaskGetTickCount>
 8012fa0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012fa2:	4b0b      	ldr	r3, [pc, #44]	; (8012fd0 <prvSampleTimeNow+0x3c>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	68fa      	ldr	r2, [r7, #12]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d205      	bcs.n	8012fb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012fac:	f000 f936 	bl	801321c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	e002      	b.n	8012fbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012fbe:	4a04      	ldr	r2, [pc, #16]	; (8012fd0 <prvSampleTimeNow+0x3c>)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	3710      	adds	r7, #16
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
 8012fce:	bf00      	nop
 8012fd0:	2000173c 	.word	0x2000173c

08012fd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	68ba      	ldr	r2, [r7, #8]
 8012fea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012ff2:	68ba      	ldr	r2, [r7, #8]
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d812      	bhi.n	8013020 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	1ad2      	subs	r2, r2, r3
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	699b      	ldr	r3, [r3, #24]
 8013004:	429a      	cmp	r2, r3
 8013006:	d302      	bcc.n	801300e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013008:	2301      	movs	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
 801300c:	e01b      	b.n	8013046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801300e:	4b10      	ldr	r3, [pc, #64]	; (8013050 <prvInsertTimerInActiveList+0x7c>)
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	3304      	adds	r3, #4
 8013016:	4619      	mov	r1, r3
 8013018:	4610      	mov	r0, r2
 801301a:	f7fe f912 	bl	8011242 <vListInsert>
 801301e:	e012      	b.n	8013046 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	429a      	cmp	r2, r3
 8013026:	d206      	bcs.n	8013036 <prvInsertTimerInActiveList+0x62>
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	429a      	cmp	r2, r3
 801302e:	d302      	bcc.n	8013036 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013030:	2301      	movs	r3, #1
 8013032:	617b      	str	r3, [r7, #20]
 8013034:	e007      	b.n	8013046 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013036:	4b07      	ldr	r3, [pc, #28]	; (8013054 <prvInsertTimerInActiveList+0x80>)
 8013038:	681a      	ldr	r2, [r3, #0]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	3304      	adds	r3, #4
 801303e:	4619      	mov	r1, r3
 8013040:	4610      	mov	r0, r2
 8013042:	f7fe f8fe 	bl	8011242 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013046:	697b      	ldr	r3, [r7, #20]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20001730 	.word	0x20001730
 8013054:	2000172c 	.word	0x2000172c

08013058 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08e      	sub	sp, #56	; 0x38
 801305c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801305e:	e0ca      	b.n	80131f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	da18      	bge.n	8013098 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013066:	1d3b      	adds	r3, r7, #4
 8013068:	3304      	adds	r3, #4
 801306a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	2b00      	cmp	r3, #0
 8013070:	d10a      	bne.n	8013088 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013076:	f383 8811 	msr	BASEPRI, r3
 801307a:	f3bf 8f6f 	isb	sy
 801307e:	f3bf 8f4f 	dsb	sy
 8013082:	61fb      	str	r3, [r7, #28]
}
 8013084:	bf00      	nop
 8013086:	e7fe      	b.n	8013086 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801308e:	6850      	ldr	r0, [r2, #4]
 8013090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013092:	6892      	ldr	r2, [r2, #8]
 8013094:	4611      	mov	r1, r2
 8013096:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	f2c0 80aa 	blt.w	80131f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80130a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a6:	695b      	ldr	r3, [r3, #20]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d004      	beq.n	80130b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80130ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ae:	3304      	adds	r3, #4
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7fe f8ff 	bl	80112b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80130b6:	463b      	mov	r3, r7
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7ff ff6b 	bl	8012f94 <prvSampleTimeNow>
 80130be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b09      	cmp	r3, #9
 80130c4:	f200 8097 	bhi.w	80131f6 <prvProcessReceivedCommands+0x19e>
 80130c8:	a201      	add	r2, pc, #4	; (adr r2, 80130d0 <prvProcessReceivedCommands+0x78>)
 80130ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ce:	bf00      	nop
 80130d0:	080130f9 	.word	0x080130f9
 80130d4:	080130f9 	.word	0x080130f9
 80130d8:	080130f9 	.word	0x080130f9
 80130dc:	0801316d 	.word	0x0801316d
 80130e0:	08013181 	.word	0x08013181
 80130e4:	080131cb 	.word	0x080131cb
 80130e8:	080130f9 	.word	0x080130f9
 80130ec:	080130f9 	.word	0x080130f9
 80130f0:	0801316d 	.word	0x0801316d
 80130f4:	08013181 	.word	0x08013181
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130fe:	f043 0301 	orr.w	r3, r3, #1
 8013102:	b2da      	uxtb	r2, r3
 8013104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801310a:	68ba      	ldr	r2, [r7, #8]
 801310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310e:	699b      	ldr	r3, [r3, #24]
 8013110:	18d1      	adds	r1, r2, r3
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013118:	f7ff ff5c 	bl	8012fd4 <prvInsertTimerInActiveList>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d069      	beq.n	80131f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013124:	6a1b      	ldr	r3, [r3, #32]
 8013126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013128:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013130:	f003 0304 	and.w	r3, r3, #4
 8013134:	2b00      	cmp	r3, #0
 8013136:	d05e      	beq.n	80131f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013138:	68ba      	ldr	r2, [r7, #8]
 801313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313c:	699b      	ldr	r3, [r3, #24]
 801313e:	441a      	add	r2, r3
 8013140:	2300      	movs	r3, #0
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	2300      	movs	r3, #0
 8013146:	2100      	movs	r1, #0
 8013148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801314a:	f7ff fe05 	bl	8012d58 <xTimerGenericCommand>
 801314e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013150:	6a3b      	ldr	r3, [r7, #32]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d14f      	bne.n	80131f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315a:	f383 8811 	msr	BASEPRI, r3
 801315e:	f3bf 8f6f 	isb	sy
 8013162:	f3bf 8f4f 	dsb	sy
 8013166:	61bb      	str	r3, [r7, #24]
}
 8013168:	bf00      	nop
 801316a:	e7fe      	b.n	801316a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013172:	f023 0301 	bic.w	r3, r3, #1
 8013176:	b2da      	uxtb	r2, r3
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801317e:	e03a      	b.n	80131f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013186:	f043 0301 	orr.w	r3, r3, #1
 801318a:	b2da      	uxtb	r2, r3
 801318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319a:	699b      	ldr	r3, [r3, #24]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d10a      	bne.n	80131b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80131a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a4:	f383 8811 	msr	BASEPRI, r3
 80131a8:	f3bf 8f6f 	isb	sy
 80131ac:	f3bf 8f4f 	dsb	sy
 80131b0:	617b      	str	r3, [r7, #20]
}
 80131b2:	bf00      	nop
 80131b4:	e7fe      	b.n	80131b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80131b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b8:	699a      	ldr	r2, [r3, #24]
 80131ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131bc:	18d1      	adds	r1, r2, r3
 80131be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131c4:	f7ff ff06 	bl	8012fd4 <prvInsertTimerInActiveList>
					break;
 80131c8:	e015      	b.n	80131f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80131ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131d0:	f003 0302 	and.w	r3, r3, #2
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d103      	bne.n	80131e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80131d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80131da:	f000 fbe1 	bl	80139a0 <vPortFree>
 80131de:	e00a      	b.n	80131f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131e6:	f023 0301 	bic.w	r3, r3, #1
 80131ea:	b2da      	uxtb	r2, r3
 80131ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80131f2:	e000      	b.n	80131f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80131f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80131f6:	4b08      	ldr	r3, [pc, #32]	; (8013218 <prvProcessReceivedCommands+0x1c0>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	1d39      	adds	r1, r7, #4
 80131fc:	2200      	movs	r2, #0
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe fb5a 	bl	80118b8 <xQueueReceive>
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	f47f af2a 	bne.w	8013060 <prvProcessReceivedCommands+0x8>
	}
}
 801320c:	bf00      	nop
 801320e:	bf00      	nop
 8013210:	3730      	adds	r7, #48	; 0x30
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	20001734 	.word	0x20001734

0801321c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b088      	sub	sp, #32
 8013220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013222:	e048      	b.n	80132b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013224:	4b2d      	ldr	r3, [pc, #180]	; (80132dc <prvSwitchTimerLists+0xc0>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801322e:	4b2b      	ldr	r3, [pc, #172]	; (80132dc <prvSwitchTimerLists+0xc0>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	68db      	ldr	r3, [r3, #12]
 8013236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	3304      	adds	r3, #4
 801323c:	4618      	mov	r0, r3
 801323e:	f7fe f839 	bl	80112b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6a1b      	ldr	r3, [r3, #32]
 8013246:	68f8      	ldr	r0, [r7, #12]
 8013248:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013250:	f003 0304 	and.w	r3, r3, #4
 8013254:	2b00      	cmp	r3, #0
 8013256:	d02e      	beq.n	80132b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	699b      	ldr	r3, [r3, #24]
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	4413      	add	r3, r2
 8013260:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013262:	68ba      	ldr	r2, [r7, #8]
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	429a      	cmp	r2, r3
 8013268:	d90e      	bls.n	8013288 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	68fa      	ldr	r2, [r7, #12]
 8013274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013276:	4b19      	ldr	r3, [pc, #100]	; (80132dc <prvSwitchTimerLists+0xc0>)
 8013278:	681a      	ldr	r2, [r3, #0]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	3304      	adds	r3, #4
 801327e:	4619      	mov	r1, r3
 8013280:	4610      	mov	r0, r2
 8013282:	f7fd ffde 	bl	8011242 <vListInsert>
 8013286:	e016      	b.n	80132b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013288:	2300      	movs	r3, #0
 801328a:	9300      	str	r3, [sp, #0]
 801328c:	2300      	movs	r3, #0
 801328e:	693a      	ldr	r2, [r7, #16]
 8013290:	2100      	movs	r1, #0
 8013292:	68f8      	ldr	r0, [r7, #12]
 8013294:	f7ff fd60 	bl	8012d58 <xTimerGenericCommand>
 8013298:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10a      	bne.n	80132b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80132a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132a4:	f383 8811 	msr	BASEPRI, r3
 80132a8:	f3bf 8f6f 	isb	sy
 80132ac:	f3bf 8f4f 	dsb	sy
 80132b0:	603b      	str	r3, [r7, #0]
}
 80132b2:	bf00      	nop
 80132b4:	e7fe      	b.n	80132b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80132b6:	4b09      	ldr	r3, [pc, #36]	; (80132dc <prvSwitchTimerLists+0xc0>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d1b1      	bne.n	8013224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80132c0:	4b06      	ldr	r3, [pc, #24]	; (80132dc <prvSwitchTimerLists+0xc0>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80132c6:	4b06      	ldr	r3, [pc, #24]	; (80132e0 <prvSwitchTimerLists+0xc4>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	4a04      	ldr	r2, [pc, #16]	; (80132dc <prvSwitchTimerLists+0xc0>)
 80132cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80132ce:	4a04      	ldr	r2, [pc, #16]	; (80132e0 <prvSwitchTimerLists+0xc4>)
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	6013      	str	r3, [r2, #0]
}
 80132d4:	bf00      	nop
 80132d6:	3718      	adds	r7, #24
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	2000172c 	.word	0x2000172c
 80132e0:	20001730 	.word	0x20001730

080132e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80132ea:	f000 f96b 	bl	80135c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80132ee:	4b15      	ldr	r3, [pc, #84]	; (8013344 <prvCheckForValidListAndQueue+0x60>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d120      	bne.n	8013338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80132f6:	4814      	ldr	r0, [pc, #80]	; (8013348 <prvCheckForValidListAndQueue+0x64>)
 80132f8:	f7fd ff52 	bl	80111a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80132fc:	4813      	ldr	r0, [pc, #76]	; (801334c <prvCheckForValidListAndQueue+0x68>)
 80132fe:	f7fd ff4f 	bl	80111a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013302:	4b13      	ldr	r3, [pc, #76]	; (8013350 <prvCheckForValidListAndQueue+0x6c>)
 8013304:	4a10      	ldr	r2, [pc, #64]	; (8013348 <prvCheckForValidListAndQueue+0x64>)
 8013306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013308:	4b12      	ldr	r3, [pc, #72]	; (8013354 <prvCheckForValidListAndQueue+0x70>)
 801330a:	4a10      	ldr	r2, [pc, #64]	; (801334c <prvCheckForValidListAndQueue+0x68>)
 801330c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801330e:	2300      	movs	r3, #0
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	4b11      	ldr	r3, [pc, #68]	; (8013358 <prvCheckForValidListAndQueue+0x74>)
 8013314:	4a11      	ldr	r2, [pc, #68]	; (801335c <prvCheckForValidListAndQueue+0x78>)
 8013316:	2110      	movs	r1, #16
 8013318:	200a      	movs	r0, #10
 801331a:	f7fe f85d 	bl	80113d8 <xQueueGenericCreateStatic>
 801331e:	4603      	mov	r3, r0
 8013320:	4a08      	ldr	r2, [pc, #32]	; (8013344 <prvCheckForValidListAndQueue+0x60>)
 8013322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013324:	4b07      	ldr	r3, [pc, #28]	; (8013344 <prvCheckForValidListAndQueue+0x60>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d005      	beq.n	8013338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801332c:	4b05      	ldr	r3, [pc, #20]	; (8013344 <prvCheckForValidListAndQueue+0x60>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	490b      	ldr	r1, [pc, #44]	; (8013360 <prvCheckForValidListAndQueue+0x7c>)
 8013332:	4618      	mov	r0, r3
 8013334:	f7fe fd30 	bl	8011d98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013338:	f000 f974 	bl	8013624 <vPortExitCritical>
}
 801333c:	bf00      	nop
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}
 8013342:	bf00      	nop
 8013344:	20001734 	.word	0x20001734
 8013348:	20001704 	.word	0x20001704
 801334c:	20001718 	.word	0x20001718
 8013350:	2000172c 	.word	0x2000172c
 8013354:	20001730 	.word	0x20001730
 8013358:	200017e0 	.word	0x200017e0
 801335c:	20001740 	.word	0x20001740
 8013360:	08014a64 	.word	0x08014a64

08013364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013364:	b480      	push	{r7}
 8013366:	b085      	sub	sp, #20
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	3b04      	subs	r3, #4
 8013374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801337c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	3b04      	subs	r3, #4
 8013382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	f023 0201 	bic.w	r2, r3, #1
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	3b04      	subs	r3, #4
 8013392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013394:	4a0c      	ldr	r2, [pc, #48]	; (80133c8 <pxPortInitialiseStack+0x64>)
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	3b14      	subs	r3, #20
 801339e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	3b04      	subs	r3, #4
 80133aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	f06f 0202 	mvn.w	r2, #2
 80133b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	3b20      	subs	r3, #32
 80133b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80133ba:	68fb      	ldr	r3, [r7, #12]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3714      	adds	r7, #20
 80133c0:	46bd      	mov	sp, r7
 80133c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c6:	4770      	bx	lr
 80133c8:	080133cd 	.word	0x080133cd

080133cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80133cc:	b480      	push	{r7}
 80133ce:	b085      	sub	sp, #20
 80133d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80133d2:	2300      	movs	r3, #0
 80133d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80133d6:	4b12      	ldr	r3, [pc, #72]	; (8013420 <prvTaskExitError+0x54>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133de:	d00a      	beq.n	80133f6 <prvTaskExitError+0x2a>
	__asm volatile
 80133e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e4:	f383 8811 	msr	BASEPRI, r3
 80133e8:	f3bf 8f6f 	isb	sy
 80133ec:	f3bf 8f4f 	dsb	sy
 80133f0:	60fb      	str	r3, [r7, #12]
}
 80133f2:	bf00      	nop
 80133f4:	e7fe      	b.n	80133f4 <prvTaskExitError+0x28>
	__asm volatile
 80133f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133fa:	f383 8811 	msr	BASEPRI, r3
 80133fe:	f3bf 8f6f 	isb	sy
 8013402:	f3bf 8f4f 	dsb	sy
 8013406:	60bb      	str	r3, [r7, #8]
}
 8013408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801340a:	bf00      	nop
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d0fc      	beq.n	801340c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013412:	bf00      	nop
 8013414:	bf00      	nop
 8013416:	3714      	adds	r7, #20
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr
 8013420:	2000011c 	.word	0x2000011c
	...

08013430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013430:	4b07      	ldr	r3, [pc, #28]	; (8013450 <pxCurrentTCBConst2>)
 8013432:	6819      	ldr	r1, [r3, #0]
 8013434:	6808      	ldr	r0, [r1, #0]
 8013436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801343a:	f380 8809 	msr	PSP, r0
 801343e:	f3bf 8f6f 	isb	sy
 8013442:	f04f 0000 	mov.w	r0, #0
 8013446:	f380 8811 	msr	BASEPRI, r0
 801344a:	4770      	bx	lr
 801344c:	f3af 8000 	nop.w

08013450 <pxCurrentTCBConst2>:
 8013450:	20001204 	.word	0x20001204
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop

08013458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013458:	4808      	ldr	r0, [pc, #32]	; (801347c <prvPortStartFirstTask+0x24>)
 801345a:	6800      	ldr	r0, [r0, #0]
 801345c:	6800      	ldr	r0, [r0, #0]
 801345e:	f380 8808 	msr	MSP, r0
 8013462:	f04f 0000 	mov.w	r0, #0
 8013466:	f380 8814 	msr	CONTROL, r0
 801346a:	b662      	cpsie	i
 801346c:	b661      	cpsie	f
 801346e:	f3bf 8f4f 	dsb	sy
 8013472:	f3bf 8f6f 	isb	sy
 8013476:	df00      	svc	0
 8013478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801347a:	bf00      	nop
 801347c:	e000ed08 	.word	0xe000ed08

08013480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b086      	sub	sp, #24
 8013484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013486:	4b46      	ldr	r3, [pc, #280]	; (80135a0 <xPortStartScheduler+0x120>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4a46      	ldr	r2, [pc, #280]	; (80135a4 <xPortStartScheduler+0x124>)
 801348c:	4293      	cmp	r3, r2
 801348e:	d10a      	bne.n	80134a6 <xPortStartScheduler+0x26>
	__asm volatile
 8013490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013494:	f383 8811 	msr	BASEPRI, r3
 8013498:	f3bf 8f6f 	isb	sy
 801349c:	f3bf 8f4f 	dsb	sy
 80134a0:	613b      	str	r3, [r7, #16]
}
 80134a2:	bf00      	nop
 80134a4:	e7fe      	b.n	80134a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80134a6:	4b3e      	ldr	r3, [pc, #248]	; (80135a0 <xPortStartScheduler+0x120>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	4a3f      	ldr	r2, [pc, #252]	; (80135a8 <xPortStartScheduler+0x128>)
 80134ac:	4293      	cmp	r3, r2
 80134ae:	d10a      	bne.n	80134c6 <xPortStartScheduler+0x46>
	__asm volatile
 80134b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b4:	f383 8811 	msr	BASEPRI, r3
 80134b8:	f3bf 8f6f 	isb	sy
 80134bc:	f3bf 8f4f 	dsb	sy
 80134c0:	60fb      	str	r3, [r7, #12]
}
 80134c2:	bf00      	nop
 80134c4:	e7fe      	b.n	80134c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80134c6:	4b39      	ldr	r3, [pc, #228]	; (80135ac <xPortStartScheduler+0x12c>)
 80134c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	22ff      	movs	r2, #255	; 0xff
 80134d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	b2db      	uxtb	r3, r3
 80134de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80134e0:	78fb      	ldrb	r3, [r7, #3]
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	4b31      	ldr	r3, [pc, #196]	; (80135b0 <xPortStartScheduler+0x130>)
 80134ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80134ee:	4b31      	ldr	r3, [pc, #196]	; (80135b4 <xPortStartScheduler+0x134>)
 80134f0:	2207      	movs	r2, #7
 80134f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134f4:	e009      	b.n	801350a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80134f6:	4b2f      	ldr	r3, [pc, #188]	; (80135b4 <xPortStartScheduler+0x134>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	3b01      	subs	r3, #1
 80134fc:	4a2d      	ldr	r2, [pc, #180]	; (80135b4 <xPortStartScheduler+0x134>)
 80134fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013500:	78fb      	ldrb	r3, [r7, #3]
 8013502:	b2db      	uxtb	r3, r3
 8013504:	005b      	lsls	r3, r3, #1
 8013506:	b2db      	uxtb	r3, r3
 8013508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801350a:	78fb      	ldrb	r3, [r7, #3]
 801350c:	b2db      	uxtb	r3, r3
 801350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013512:	2b80      	cmp	r3, #128	; 0x80
 8013514:	d0ef      	beq.n	80134f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013516:	4b27      	ldr	r3, [pc, #156]	; (80135b4 <xPortStartScheduler+0x134>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f1c3 0307 	rsb	r3, r3, #7
 801351e:	2b04      	cmp	r3, #4
 8013520:	d00a      	beq.n	8013538 <xPortStartScheduler+0xb8>
	__asm volatile
 8013522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013526:	f383 8811 	msr	BASEPRI, r3
 801352a:	f3bf 8f6f 	isb	sy
 801352e:	f3bf 8f4f 	dsb	sy
 8013532:	60bb      	str	r3, [r7, #8]
}
 8013534:	bf00      	nop
 8013536:	e7fe      	b.n	8013536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013538:	4b1e      	ldr	r3, [pc, #120]	; (80135b4 <xPortStartScheduler+0x134>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	021b      	lsls	r3, r3, #8
 801353e:	4a1d      	ldr	r2, [pc, #116]	; (80135b4 <xPortStartScheduler+0x134>)
 8013540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013542:	4b1c      	ldr	r3, [pc, #112]	; (80135b4 <xPortStartScheduler+0x134>)
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801354a:	4a1a      	ldr	r2, [pc, #104]	; (80135b4 <xPortStartScheduler+0x134>)
 801354c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	b2da      	uxtb	r2, r3
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013556:	4b18      	ldr	r3, [pc, #96]	; (80135b8 <xPortStartScheduler+0x138>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	4a17      	ldr	r2, [pc, #92]	; (80135b8 <xPortStartScheduler+0x138>)
 801355c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013562:	4b15      	ldr	r3, [pc, #84]	; (80135b8 <xPortStartScheduler+0x138>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4a14      	ldr	r2, [pc, #80]	; (80135b8 <xPortStartScheduler+0x138>)
 8013568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801356c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801356e:	f000 f8dd 	bl	801372c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013572:	4b12      	ldr	r3, [pc, #72]	; (80135bc <xPortStartScheduler+0x13c>)
 8013574:	2200      	movs	r2, #0
 8013576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013578:	f000 f8fc 	bl	8013774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801357c:	4b10      	ldr	r3, [pc, #64]	; (80135c0 <xPortStartScheduler+0x140>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4a0f      	ldr	r2, [pc, #60]	; (80135c0 <xPortStartScheduler+0x140>)
 8013582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013588:	f7ff ff66 	bl	8013458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801358c:	f7ff f846 	bl	801261c <vTaskSwitchContext>
	prvTaskExitError();
 8013590:	f7ff ff1c 	bl	80133cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013594:	2300      	movs	r3, #0
}
 8013596:	4618      	mov	r0, r3
 8013598:	3718      	adds	r7, #24
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	e000ed00 	.word	0xe000ed00
 80135a4:	410fc271 	.word	0x410fc271
 80135a8:	410fc270 	.word	0x410fc270
 80135ac:	e000e400 	.word	0xe000e400
 80135b0:	20001830 	.word	0x20001830
 80135b4:	20001834 	.word	0x20001834
 80135b8:	e000ed20 	.word	0xe000ed20
 80135bc:	2000011c 	.word	0x2000011c
 80135c0:	e000ef34 	.word	0xe000ef34

080135c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80135c4:	b480      	push	{r7}
 80135c6:	b083      	sub	sp, #12
 80135c8:	af00      	add	r7, sp, #0
	__asm volatile
 80135ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ce:	f383 8811 	msr	BASEPRI, r3
 80135d2:	f3bf 8f6f 	isb	sy
 80135d6:	f3bf 8f4f 	dsb	sy
 80135da:	607b      	str	r3, [r7, #4]
}
 80135dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80135de:	4b0f      	ldr	r3, [pc, #60]	; (801361c <vPortEnterCritical+0x58>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	3301      	adds	r3, #1
 80135e4:	4a0d      	ldr	r2, [pc, #52]	; (801361c <vPortEnterCritical+0x58>)
 80135e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80135e8:	4b0c      	ldr	r3, [pc, #48]	; (801361c <vPortEnterCritical+0x58>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d10f      	bne.n	8013610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80135f0:	4b0b      	ldr	r3, [pc, #44]	; (8013620 <vPortEnterCritical+0x5c>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00a      	beq.n	8013610 <vPortEnterCritical+0x4c>
	__asm volatile
 80135fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fe:	f383 8811 	msr	BASEPRI, r3
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	f3bf 8f4f 	dsb	sy
 801360a:	603b      	str	r3, [r7, #0]
}
 801360c:	bf00      	nop
 801360e:	e7fe      	b.n	801360e <vPortEnterCritical+0x4a>
	}
}
 8013610:	bf00      	nop
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr
 801361c:	2000011c 	.word	0x2000011c
 8013620:	e000ed04 	.word	0xe000ed04

08013624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013624:	b480      	push	{r7}
 8013626:	b083      	sub	sp, #12
 8013628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801362a:	4b12      	ldr	r3, [pc, #72]	; (8013674 <vPortExitCritical+0x50>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d10a      	bne.n	8013648 <vPortExitCritical+0x24>
	__asm volatile
 8013632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013636:	f383 8811 	msr	BASEPRI, r3
 801363a:	f3bf 8f6f 	isb	sy
 801363e:	f3bf 8f4f 	dsb	sy
 8013642:	607b      	str	r3, [r7, #4]
}
 8013644:	bf00      	nop
 8013646:	e7fe      	b.n	8013646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013648:	4b0a      	ldr	r3, [pc, #40]	; (8013674 <vPortExitCritical+0x50>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	3b01      	subs	r3, #1
 801364e:	4a09      	ldr	r2, [pc, #36]	; (8013674 <vPortExitCritical+0x50>)
 8013650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013652:	4b08      	ldr	r3, [pc, #32]	; (8013674 <vPortExitCritical+0x50>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d105      	bne.n	8013666 <vPortExitCritical+0x42>
 801365a:	2300      	movs	r3, #0
 801365c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	f383 8811 	msr	BASEPRI, r3
}
 8013664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013666:	bf00      	nop
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop
 8013674:	2000011c 	.word	0x2000011c
	...

08013680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013680:	f3ef 8009 	mrs	r0, PSP
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	4b15      	ldr	r3, [pc, #84]	; (80136e0 <pxCurrentTCBConst>)
 801368a:	681a      	ldr	r2, [r3, #0]
 801368c:	f01e 0f10 	tst.w	lr, #16
 8013690:	bf08      	it	eq
 8013692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369a:	6010      	str	r0, [r2, #0]
 801369c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80136a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80136a4:	f380 8811 	msr	BASEPRI, r0
 80136a8:	f3bf 8f4f 	dsb	sy
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f7fe ffb4 	bl	801261c <vTaskSwitchContext>
 80136b4:	f04f 0000 	mov.w	r0, #0
 80136b8:	f380 8811 	msr	BASEPRI, r0
 80136bc:	bc09      	pop	{r0, r3}
 80136be:	6819      	ldr	r1, [r3, #0]
 80136c0:	6808      	ldr	r0, [r1, #0]
 80136c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c6:	f01e 0f10 	tst.w	lr, #16
 80136ca:	bf08      	it	eq
 80136cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80136d0:	f380 8809 	msr	PSP, r0
 80136d4:	f3bf 8f6f 	isb	sy
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop
 80136dc:	f3af 8000 	nop.w

080136e0 <pxCurrentTCBConst>:
 80136e0:	20001204 	.word	0x20001204
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80136e4:	bf00      	nop
 80136e6:	bf00      	nop

080136e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
	__asm volatile
 80136ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f2:	f383 8811 	msr	BASEPRI, r3
 80136f6:	f3bf 8f6f 	isb	sy
 80136fa:	f3bf 8f4f 	dsb	sy
 80136fe:	607b      	str	r3, [r7, #4]
}
 8013700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013702:	f7fe fed1 	bl	80124a8 <xTaskIncrementTick>
 8013706:	4603      	mov	r3, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	d003      	beq.n	8013714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801370c:	4b06      	ldr	r3, [pc, #24]	; (8013728 <xPortSysTickHandler+0x40>)
 801370e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013712:	601a      	str	r2, [r3, #0]
 8013714:	2300      	movs	r3, #0
 8013716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	f383 8811 	msr	BASEPRI, r3
}
 801371e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013720:	bf00      	nop
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	e000ed04 	.word	0xe000ed04

0801372c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801372c:	b480      	push	{r7}
 801372e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013730:	4b0b      	ldr	r3, [pc, #44]	; (8013760 <vPortSetupTimerInterrupt+0x34>)
 8013732:	2200      	movs	r2, #0
 8013734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013736:	4b0b      	ldr	r3, [pc, #44]	; (8013764 <vPortSetupTimerInterrupt+0x38>)
 8013738:	2200      	movs	r2, #0
 801373a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801373c:	4b0a      	ldr	r3, [pc, #40]	; (8013768 <vPortSetupTimerInterrupt+0x3c>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	4a0a      	ldr	r2, [pc, #40]	; (801376c <vPortSetupTimerInterrupt+0x40>)
 8013742:	fba2 2303 	umull	r2, r3, r2, r3
 8013746:	099b      	lsrs	r3, r3, #6
 8013748:	4a09      	ldr	r2, [pc, #36]	; (8013770 <vPortSetupTimerInterrupt+0x44>)
 801374a:	3b01      	subs	r3, #1
 801374c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801374e:	4b04      	ldr	r3, [pc, #16]	; (8013760 <vPortSetupTimerInterrupt+0x34>)
 8013750:	2207      	movs	r2, #7
 8013752:	601a      	str	r2, [r3, #0]
}
 8013754:	bf00      	nop
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	e000e010 	.word	0xe000e010
 8013764:	e000e018 	.word	0xe000e018
 8013768:	20000000 	.word	0x20000000
 801376c:	10624dd3 	.word	0x10624dd3
 8013770:	e000e014 	.word	0xe000e014

08013774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013784 <vPortEnableVFP+0x10>
 8013778:	6801      	ldr	r1, [r0, #0]
 801377a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801377e:	6001      	str	r1, [r0, #0]
 8013780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013782:	bf00      	nop
 8013784:	e000ed88 	.word	0xe000ed88

08013788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013788:	b480      	push	{r7}
 801378a:	b085      	sub	sp, #20
 801378c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801378e:	f3ef 8305 	mrs	r3, IPSR
 8013792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	2b0f      	cmp	r3, #15
 8013798:	d914      	bls.n	80137c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801379a:	4a17      	ldr	r2, [pc, #92]	; (80137f8 <vPortValidateInterruptPriority+0x70>)
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	4413      	add	r3, r2
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80137a4:	4b15      	ldr	r3, [pc, #84]	; (80137fc <vPortValidateInterruptPriority+0x74>)
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	7afa      	ldrb	r2, [r7, #11]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d20a      	bcs.n	80137c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	607b      	str	r3, [r7, #4]
}
 80137c0:	bf00      	nop
 80137c2:	e7fe      	b.n	80137c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80137c4:	4b0e      	ldr	r3, [pc, #56]	; (8013800 <vPortValidateInterruptPriority+0x78>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80137cc:	4b0d      	ldr	r3, [pc, #52]	; (8013804 <vPortValidateInterruptPriority+0x7c>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d90a      	bls.n	80137ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80137d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d8:	f383 8811 	msr	BASEPRI, r3
 80137dc:	f3bf 8f6f 	isb	sy
 80137e0:	f3bf 8f4f 	dsb	sy
 80137e4:	603b      	str	r3, [r7, #0]
}
 80137e6:	bf00      	nop
 80137e8:	e7fe      	b.n	80137e8 <vPortValidateInterruptPriority+0x60>
	}
 80137ea:	bf00      	nop
 80137ec:	3714      	adds	r7, #20
 80137ee:	46bd      	mov	sp, r7
 80137f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f4:	4770      	bx	lr
 80137f6:	bf00      	nop
 80137f8:	e000e3f0 	.word	0xe000e3f0
 80137fc:	20001830 	.word	0x20001830
 8013800:	e000ed0c 	.word	0xe000ed0c
 8013804:	20001834 	.word	0x20001834

08013808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08a      	sub	sp, #40	; 0x28
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013810:	2300      	movs	r3, #0
 8013812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013814:	f7fe fd7a 	bl	801230c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013818:	4b5b      	ldr	r3, [pc, #364]	; (8013988 <pvPortMalloc+0x180>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013820:	f000 f920 	bl	8013a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013824:	4b59      	ldr	r3, [pc, #356]	; (801398c <pvPortMalloc+0x184>)
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	4013      	ands	r3, r2
 801382c:	2b00      	cmp	r3, #0
 801382e:	f040 8093 	bne.w	8013958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d01d      	beq.n	8013874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013838:	2208      	movs	r2, #8
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4413      	add	r3, r2
 801383e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f003 0307 	and.w	r3, r3, #7
 8013846:	2b00      	cmp	r3, #0
 8013848:	d014      	beq.n	8013874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f023 0307 	bic.w	r3, r3, #7
 8013850:	3308      	adds	r3, #8
 8013852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f003 0307 	and.w	r3, r3, #7
 801385a:	2b00      	cmp	r3, #0
 801385c:	d00a      	beq.n	8013874 <pvPortMalloc+0x6c>
	__asm volatile
 801385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013862:	f383 8811 	msr	BASEPRI, r3
 8013866:	f3bf 8f6f 	isb	sy
 801386a:	f3bf 8f4f 	dsb	sy
 801386e:	617b      	str	r3, [r7, #20]
}
 8013870:	bf00      	nop
 8013872:	e7fe      	b.n	8013872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d06e      	beq.n	8013958 <pvPortMalloc+0x150>
 801387a:	4b45      	ldr	r3, [pc, #276]	; (8013990 <pvPortMalloc+0x188>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	687a      	ldr	r2, [r7, #4]
 8013880:	429a      	cmp	r2, r3
 8013882:	d869      	bhi.n	8013958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013884:	4b43      	ldr	r3, [pc, #268]	; (8013994 <pvPortMalloc+0x18c>)
 8013886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013888:	4b42      	ldr	r3, [pc, #264]	; (8013994 <pvPortMalloc+0x18c>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801388e:	e004      	b.n	801389a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	687a      	ldr	r2, [r7, #4]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d903      	bls.n	80138ac <pvPortMalloc+0xa4>
 80138a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d1f1      	bne.n	8013890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80138ac:	4b36      	ldr	r3, [pc, #216]	; (8013988 <pvPortMalloc+0x180>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d050      	beq.n	8013958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2208      	movs	r2, #8
 80138bc:	4413      	add	r3, r2
 80138be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80138c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	6a3b      	ldr	r3, [r7, #32]
 80138c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80138c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ca:	685a      	ldr	r2, [r3, #4]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	1ad2      	subs	r2, r2, r3
 80138d0:	2308      	movs	r3, #8
 80138d2:	005b      	lsls	r3, r3, #1
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d91f      	bls.n	8013918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80138d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4413      	add	r3, r2
 80138de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	f003 0307 	and.w	r3, r3, #7
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d00a      	beq.n	8013900 <pvPortMalloc+0xf8>
	__asm volatile
 80138ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ee:	f383 8811 	msr	BASEPRI, r3
 80138f2:	f3bf 8f6f 	isb	sy
 80138f6:	f3bf 8f4f 	dsb	sy
 80138fa:	613b      	str	r3, [r7, #16]
}
 80138fc:	bf00      	nop
 80138fe:	e7fe      	b.n	80138fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013902:	685a      	ldr	r2, [r3, #4]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	1ad2      	subs	r2, r2, r3
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013912:	69b8      	ldr	r0, [r7, #24]
 8013914:	f000 f908 	bl	8013b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013918:	4b1d      	ldr	r3, [pc, #116]	; (8013990 <pvPortMalloc+0x188>)
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	1ad3      	subs	r3, r2, r3
 8013922:	4a1b      	ldr	r2, [pc, #108]	; (8013990 <pvPortMalloc+0x188>)
 8013924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013926:	4b1a      	ldr	r3, [pc, #104]	; (8013990 <pvPortMalloc+0x188>)
 8013928:	681a      	ldr	r2, [r3, #0]
 801392a:	4b1b      	ldr	r3, [pc, #108]	; (8013998 <pvPortMalloc+0x190>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	429a      	cmp	r2, r3
 8013930:	d203      	bcs.n	801393a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013932:	4b17      	ldr	r3, [pc, #92]	; (8013990 <pvPortMalloc+0x188>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	4a18      	ldr	r2, [pc, #96]	; (8013998 <pvPortMalloc+0x190>)
 8013938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	685a      	ldr	r2, [r3, #4]
 801393e:	4b13      	ldr	r3, [pc, #76]	; (801398c <pvPortMalloc+0x184>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	431a      	orrs	r2, r3
 8013944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394a:	2200      	movs	r2, #0
 801394c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801394e:	4b13      	ldr	r3, [pc, #76]	; (801399c <pvPortMalloc+0x194>)
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	3301      	adds	r3, #1
 8013954:	4a11      	ldr	r2, [pc, #68]	; (801399c <pvPortMalloc+0x194>)
 8013956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013958:	f7fe fce6 	bl	8012328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	f003 0307 	and.w	r3, r3, #7
 8013962:	2b00      	cmp	r3, #0
 8013964:	d00a      	beq.n	801397c <pvPortMalloc+0x174>
	__asm volatile
 8013966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396a:	f383 8811 	msr	BASEPRI, r3
 801396e:	f3bf 8f6f 	isb	sy
 8013972:	f3bf 8f4f 	dsb	sy
 8013976:	60fb      	str	r3, [r7, #12]
}
 8013978:	bf00      	nop
 801397a:	e7fe      	b.n	801397a <pvPortMalloc+0x172>
	return pvReturn;
 801397c:	69fb      	ldr	r3, [r7, #28]
}
 801397e:	4618      	mov	r0, r3
 8013980:	3728      	adds	r7, #40	; 0x28
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	200023f8 	.word	0x200023f8
 801398c:	2000240c 	.word	0x2000240c
 8013990:	200023fc 	.word	0x200023fc
 8013994:	200023f0 	.word	0x200023f0
 8013998:	20002400 	.word	0x20002400
 801399c:	20002404 	.word	0x20002404

080139a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b086      	sub	sp, #24
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d04d      	beq.n	8013a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80139b2:	2308      	movs	r3, #8
 80139b4:	425b      	negs	r3, r3
 80139b6:	697a      	ldr	r2, [r7, #20]
 80139b8:	4413      	add	r3, r2
 80139ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	685a      	ldr	r2, [r3, #4]
 80139c4:	4b24      	ldr	r3, [pc, #144]	; (8013a58 <vPortFree+0xb8>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	4013      	ands	r3, r2
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10a      	bne.n	80139e4 <vPortFree+0x44>
	__asm volatile
 80139ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	60fb      	str	r3, [r7, #12]
}
 80139e0:	bf00      	nop
 80139e2:	e7fe      	b.n	80139e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d00a      	beq.n	8013a02 <vPortFree+0x62>
	__asm volatile
 80139ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f0:	f383 8811 	msr	BASEPRI, r3
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	60bb      	str	r3, [r7, #8]
}
 80139fe:	bf00      	nop
 8013a00:	e7fe      	b.n	8013a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	685a      	ldr	r2, [r3, #4]
 8013a06:	4b14      	ldr	r3, [pc, #80]	; (8013a58 <vPortFree+0xb8>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	4013      	ands	r3, r2
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d01e      	beq.n	8013a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d11a      	bne.n	8013a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	685a      	ldr	r2, [r3, #4]
 8013a1c:	4b0e      	ldr	r3, [pc, #56]	; (8013a58 <vPortFree+0xb8>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	43db      	mvns	r3, r3
 8013a22:	401a      	ands	r2, r3
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013a28:	f7fe fc70 	bl	801230c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	685a      	ldr	r2, [r3, #4]
 8013a30:	4b0a      	ldr	r3, [pc, #40]	; (8013a5c <vPortFree+0xbc>)
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	4413      	add	r3, r2
 8013a36:	4a09      	ldr	r2, [pc, #36]	; (8013a5c <vPortFree+0xbc>)
 8013a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013a3a:	6938      	ldr	r0, [r7, #16]
 8013a3c:	f000 f874 	bl	8013b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013a40:	4b07      	ldr	r3, [pc, #28]	; (8013a60 <vPortFree+0xc0>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	3301      	adds	r3, #1
 8013a46:	4a06      	ldr	r2, [pc, #24]	; (8013a60 <vPortFree+0xc0>)
 8013a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013a4a:	f7fe fc6d 	bl	8012328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013a4e:	bf00      	nop
 8013a50:	3718      	adds	r7, #24
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	2000240c 	.word	0x2000240c
 8013a5c:	200023fc 	.word	0x200023fc
 8013a60:	20002408 	.word	0x20002408

08013a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013a64:	b480      	push	{r7}
 8013a66:	b085      	sub	sp, #20
 8013a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013a6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8013a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013a70:	4b27      	ldr	r3, [pc, #156]	; (8013b10 <prvHeapInit+0xac>)
 8013a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f003 0307 	and.w	r3, r3, #7
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d00c      	beq.n	8013a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	3307      	adds	r3, #7
 8013a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	f023 0307 	bic.w	r3, r3, #7
 8013a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	1ad3      	subs	r3, r2, r3
 8013a92:	4a1f      	ldr	r2, [pc, #124]	; (8013b10 <prvHeapInit+0xac>)
 8013a94:	4413      	add	r3, r2
 8013a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013a9c:	4a1d      	ldr	r2, [pc, #116]	; (8013b14 <prvHeapInit+0xb0>)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013aa2:	4b1c      	ldr	r3, [pc, #112]	; (8013b14 <prvHeapInit+0xb0>)
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	68ba      	ldr	r2, [r7, #8]
 8013aac:	4413      	add	r3, r2
 8013aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013ab0:	2208      	movs	r2, #8
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	1a9b      	subs	r3, r3, r2
 8013ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	f023 0307 	bic.w	r3, r3, #7
 8013abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	4a15      	ldr	r2, [pc, #84]	; (8013b18 <prvHeapInit+0xb4>)
 8013ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013ac6:	4b14      	ldr	r3, [pc, #80]	; (8013b18 <prvHeapInit+0xb4>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2200      	movs	r2, #0
 8013acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013ace:	4b12      	ldr	r3, [pc, #72]	; (8013b18 <prvHeapInit+0xb4>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	68fa      	ldr	r2, [r7, #12]
 8013ade:	1ad2      	subs	r2, r2, r3
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013ae4:	4b0c      	ldr	r3, [pc, #48]	; (8013b18 <prvHeapInit+0xb4>)
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	4a0a      	ldr	r2, [pc, #40]	; (8013b1c <prvHeapInit+0xb8>)
 8013af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	4a09      	ldr	r2, [pc, #36]	; (8013b20 <prvHeapInit+0xbc>)
 8013afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013afc:	4b09      	ldr	r3, [pc, #36]	; (8013b24 <prvHeapInit+0xc0>)
 8013afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013b02:	601a      	str	r2, [r3, #0]
}
 8013b04:	bf00      	nop
 8013b06:	3714      	adds	r7, #20
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0e:	4770      	bx	lr
 8013b10:	20001838 	.word	0x20001838
 8013b14:	200023f0 	.word	0x200023f0
 8013b18:	200023f8 	.word	0x200023f8
 8013b1c:	20002400 	.word	0x20002400
 8013b20:	200023fc 	.word	0x200023fc
 8013b24:	2000240c 	.word	0x2000240c

08013b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b085      	sub	sp, #20
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013b30:	4b28      	ldr	r3, [pc, #160]	; (8013bd4 <prvInsertBlockIntoFreeList+0xac>)
 8013b32:	60fb      	str	r3, [r7, #12]
 8013b34:	e002      	b.n	8013b3c <prvInsertBlockIntoFreeList+0x14>
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	60fb      	str	r3, [r7, #12]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	687a      	ldr	r2, [r7, #4]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d8f7      	bhi.n	8013b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	68ba      	ldr	r2, [r7, #8]
 8013b50:	4413      	add	r3, r2
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d108      	bne.n	8013b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	685a      	ldr	r2, [r3, #4]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	441a      	add	r2, r3
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	68ba      	ldr	r2, [r7, #8]
 8013b74:	441a      	add	r2, r3
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d118      	bne.n	8013bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681a      	ldr	r2, [r3, #0]
 8013b82:	4b15      	ldr	r3, [pc, #84]	; (8013bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d00d      	beq.n	8013ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	685a      	ldr	r2, [r3, #4]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	441a      	add	r2, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	601a      	str	r2, [r3, #0]
 8013ba4:	e008      	b.n	8013bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013ba6:	4b0c      	ldr	r3, [pc, #48]	; (8013bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	601a      	str	r2, [r3, #0]
 8013bae:	e003      	b.n	8013bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d002      	beq.n	8013bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013bc6:	bf00      	nop
 8013bc8:	3714      	adds	r7, #20
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop
 8013bd4:	200023f0 	.word	0x200023f0
 8013bd8:	200023f8 	.word	0x200023f8

08013bdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013be0:	2200      	movs	r2, #0
 8013be2:	4912      	ldr	r1, [pc, #72]	; (8013c2c <MX_USB_DEVICE_Init+0x50>)
 8013be4:	4812      	ldr	r0, [pc, #72]	; (8013c30 <MX_USB_DEVICE_Init+0x54>)
 8013be6:	f7fb fe13 	bl	800f810 <USBD_Init>
 8013bea:	4603      	mov	r3, r0
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d001      	beq.n	8013bf4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013bf0:	f7ed fac0 	bl	8001174 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013bf4:	490f      	ldr	r1, [pc, #60]	; (8013c34 <MX_USB_DEVICE_Init+0x58>)
 8013bf6:	480e      	ldr	r0, [pc, #56]	; (8013c30 <MX_USB_DEVICE_Init+0x54>)
 8013bf8:	f7fb fe3a 	bl	800f870 <USBD_RegisterClass>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d001      	beq.n	8013c06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013c02:	f7ed fab7 	bl	8001174 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013c06:	490c      	ldr	r1, [pc, #48]	; (8013c38 <MX_USB_DEVICE_Init+0x5c>)
 8013c08:	4809      	ldr	r0, [pc, #36]	; (8013c30 <MX_USB_DEVICE_Init+0x54>)
 8013c0a:	f7fb fd8b 	bl	800f724 <USBD_CDC_RegisterInterface>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d001      	beq.n	8013c18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013c14:	f7ed faae 	bl	8001174 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013c18:	4805      	ldr	r0, [pc, #20]	; (8013c30 <MX_USB_DEVICE_Init+0x54>)
 8013c1a:	f7fb fe50 	bl	800f8be <USBD_Start>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013c24:	f7ed faa6 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013c28:	bf00      	nop
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	20000134 	.word	0x20000134
 8013c30:	200033d0 	.word	0x200033d0
 8013c34:	20000018 	.word	0x20000018
 8013c38:	20000120 	.word	0x20000120

08013c3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013c40:	2200      	movs	r2, #0
 8013c42:	4905      	ldr	r1, [pc, #20]	; (8013c58 <CDC_Init_FS+0x1c>)
 8013c44:	4805      	ldr	r0, [pc, #20]	; (8013c5c <CDC_Init_FS+0x20>)
 8013c46:	f7fb fd82 	bl	800f74e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013c4a:	4905      	ldr	r1, [pc, #20]	; (8013c60 <CDC_Init_FS+0x24>)
 8013c4c:	4803      	ldr	r0, [pc, #12]	; (8013c5c <CDC_Init_FS+0x20>)
 8013c4e:	f7fb fd9c 	bl	800f78a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013c52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	20003ea0 	.word	0x20003ea0
 8013c5c:	200033d0 	.word	0x200033d0
 8013c60:	200036a0 	.word	0x200036a0

08013c64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013c64:	b480      	push	{r7}
 8013c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013c68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	6039      	str	r1, [r7, #0]
 8013c7e:	71fb      	strb	r3, [r7, #7]
 8013c80:	4613      	mov	r3, r2
 8013c82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013c84:	79fb      	ldrb	r3, [r7, #7]
 8013c86:	2b23      	cmp	r3, #35	; 0x23
 8013c88:	d84a      	bhi.n	8013d20 <CDC_Control_FS+0xac>
 8013c8a:	a201      	add	r2, pc, #4	; (adr r2, 8013c90 <CDC_Control_FS+0x1c>)
 8013c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c90:	08013d21 	.word	0x08013d21
 8013c94:	08013d21 	.word	0x08013d21
 8013c98:	08013d21 	.word	0x08013d21
 8013c9c:	08013d21 	.word	0x08013d21
 8013ca0:	08013d21 	.word	0x08013d21
 8013ca4:	08013d21 	.word	0x08013d21
 8013ca8:	08013d21 	.word	0x08013d21
 8013cac:	08013d21 	.word	0x08013d21
 8013cb0:	08013d21 	.word	0x08013d21
 8013cb4:	08013d21 	.word	0x08013d21
 8013cb8:	08013d21 	.word	0x08013d21
 8013cbc:	08013d21 	.word	0x08013d21
 8013cc0:	08013d21 	.word	0x08013d21
 8013cc4:	08013d21 	.word	0x08013d21
 8013cc8:	08013d21 	.word	0x08013d21
 8013ccc:	08013d21 	.word	0x08013d21
 8013cd0:	08013d21 	.word	0x08013d21
 8013cd4:	08013d21 	.word	0x08013d21
 8013cd8:	08013d21 	.word	0x08013d21
 8013cdc:	08013d21 	.word	0x08013d21
 8013ce0:	08013d21 	.word	0x08013d21
 8013ce4:	08013d21 	.word	0x08013d21
 8013ce8:	08013d21 	.word	0x08013d21
 8013cec:	08013d21 	.word	0x08013d21
 8013cf0:	08013d21 	.word	0x08013d21
 8013cf4:	08013d21 	.word	0x08013d21
 8013cf8:	08013d21 	.word	0x08013d21
 8013cfc:	08013d21 	.word	0x08013d21
 8013d00:	08013d21 	.word	0x08013d21
 8013d04:	08013d21 	.word	0x08013d21
 8013d08:	08013d21 	.word	0x08013d21
 8013d0c:	08013d21 	.word	0x08013d21
 8013d10:	08013d21 	.word	0x08013d21
 8013d14:	08013d21 	.word	0x08013d21
 8013d18:	08013d21 	.word	0x08013d21
 8013d1c:	08013d21 	.word	0x08013d21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013d20:	bf00      	nop
  }

  return (USBD_OK);
 8013d22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	370c      	adds	r7, #12
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr

08013d30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013d3a:	6879      	ldr	r1, [r7, #4]
 8013d3c:	4805      	ldr	r0, [pc, #20]	; (8013d54 <CDC_Receive_FS+0x24>)
 8013d3e:	f7fb fd24 	bl	800f78a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013d42:	4804      	ldr	r0, [pc, #16]	; (8013d54 <CDC_Receive_FS+0x24>)
 8013d44:	f7fb fd3a 	bl	800f7bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013d48:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	3708      	adds	r7, #8
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	200033d0 	.word	0x200033d0

08013d58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b087      	sub	sp, #28
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	60f8      	str	r0, [r7, #12]
 8013d60:	60b9      	str	r1, [r7, #8]
 8013d62:	4613      	mov	r3, r2
 8013d64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013d66:	2300      	movs	r3, #0
 8013d68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	371c      	adds	r7, #28
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr
	...

08013d7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b083      	sub	sp, #12
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	4603      	mov	r3, r0
 8013d84:	6039      	str	r1, [r7, #0]
 8013d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	2212      	movs	r2, #18
 8013d8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013d8e:	4b03      	ldr	r3, [pc, #12]	; (8013d9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	370c      	adds	r7, #12
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr
 8013d9c:	20000154 	.word	0x20000154

08013da0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b083      	sub	sp, #12
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	6039      	str	r1, [r7, #0]
 8013daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	2204      	movs	r2, #4
 8013db0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013db2:	4b03      	ldr	r3, [pc, #12]	; (8013dc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	20000174 	.word	0x20000174

08013dc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	4603      	mov	r3, r0
 8013dcc:	6039      	str	r1, [r7, #0]
 8013dce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013dd0:	79fb      	ldrb	r3, [r7, #7]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d105      	bne.n	8013de2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013dd6:	683a      	ldr	r2, [r7, #0]
 8013dd8:	4907      	ldr	r1, [pc, #28]	; (8013df8 <USBD_FS_ProductStrDescriptor+0x34>)
 8013dda:	4808      	ldr	r0, [pc, #32]	; (8013dfc <USBD_FS_ProductStrDescriptor+0x38>)
 8013ddc:	f7fc fdcb 	bl	8010976 <USBD_GetString>
 8013de0:	e004      	b.n	8013dec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013de2:	683a      	ldr	r2, [r7, #0]
 8013de4:	4904      	ldr	r1, [pc, #16]	; (8013df8 <USBD_FS_ProductStrDescriptor+0x34>)
 8013de6:	4805      	ldr	r0, [pc, #20]	; (8013dfc <USBD_FS_ProductStrDescriptor+0x38>)
 8013de8:	f7fc fdc5 	bl	8010976 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013dec:	4b02      	ldr	r3, [pc, #8]	; (8013df8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013dee:	4618      	mov	r0, r3
 8013df0:	3708      	adds	r7, #8
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	bf00      	nop
 8013df8:	200046a0 	.word	0x200046a0
 8013dfc:	08014a6c 	.word	0x08014a6c

08013e00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	4603      	mov	r3, r0
 8013e08:	6039      	str	r1, [r7, #0]
 8013e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013e0c:	683a      	ldr	r2, [r7, #0]
 8013e0e:	4904      	ldr	r1, [pc, #16]	; (8013e20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013e10:	4804      	ldr	r0, [pc, #16]	; (8013e24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013e12:	f7fc fdb0 	bl	8010976 <USBD_GetString>
  return USBD_StrDesc;
 8013e16:	4b02      	ldr	r3, [pc, #8]	; (8013e20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3708      	adds	r7, #8
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	200046a0 	.word	0x200046a0
 8013e24:	08014a84 	.word	0x08014a84

08013e28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	4603      	mov	r3, r0
 8013e30:	6039      	str	r1, [r7, #0]
 8013e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	221a      	movs	r2, #26
 8013e38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013e3a:	f000 f855 	bl	8013ee8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013e3e:	4b02      	ldr	r3, [pc, #8]	; (8013e48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	3708      	adds	r7, #8
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	20000178 	.word	0x20000178

08013e4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	4603      	mov	r3, r0
 8013e54:	6039      	str	r1, [r7, #0]
 8013e56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013e58:	79fb      	ldrb	r3, [r7, #7]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d105      	bne.n	8013e6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013e5e:	683a      	ldr	r2, [r7, #0]
 8013e60:	4907      	ldr	r1, [pc, #28]	; (8013e80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013e62:	4808      	ldr	r0, [pc, #32]	; (8013e84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013e64:	f7fc fd87 	bl	8010976 <USBD_GetString>
 8013e68:	e004      	b.n	8013e74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013e6a:	683a      	ldr	r2, [r7, #0]
 8013e6c:	4904      	ldr	r1, [pc, #16]	; (8013e80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013e6e:	4805      	ldr	r0, [pc, #20]	; (8013e84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013e70:	f7fc fd81 	bl	8010976 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e74:	4b02      	ldr	r3, [pc, #8]	; (8013e80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3708      	adds	r7, #8
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
 8013e7e:	bf00      	nop
 8013e80:	200046a0 	.word	0x200046a0
 8013e84:	08014a98 	.word	0x08014a98

08013e88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	4603      	mov	r3, r0
 8013e90:	6039      	str	r1, [r7, #0]
 8013e92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d105      	bne.n	8013ea6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013e9a:	683a      	ldr	r2, [r7, #0]
 8013e9c:	4907      	ldr	r1, [pc, #28]	; (8013ebc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013e9e:	4808      	ldr	r0, [pc, #32]	; (8013ec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013ea0:	f7fc fd69 	bl	8010976 <USBD_GetString>
 8013ea4:	e004      	b.n	8013eb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013ea6:	683a      	ldr	r2, [r7, #0]
 8013ea8:	4904      	ldr	r1, [pc, #16]	; (8013ebc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013eaa:	4805      	ldr	r0, [pc, #20]	; (8013ec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013eac:	f7fc fd63 	bl	8010976 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013eb0:	4b02      	ldr	r3, [pc, #8]	; (8013ebc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3708      	adds	r7, #8
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	200046a0 	.word	0x200046a0
 8013ec0:	08014aa4 	.word	0x08014aa4

08013ec4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	4603      	mov	r3, r0
 8013ecc:	6039      	str	r1, [r7, #0]
 8013ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	220c      	movs	r2, #12
 8013ed4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8013ed6:	4b03      	ldr	r3, [pc, #12]	; (8013ee4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	370c      	adds	r7, #12
 8013edc:	46bd      	mov	sp, r7
 8013ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee2:	4770      	bx	lr
 8013ee4:	20000168 	.word	0x20000168

08013ee8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013eee:	4b0f      	ldr	r3, [pc, #60]	; (8013f2c <Get_SerialNum+0x44>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013ef4:	4b0e      	ldr	r3, [pc, #56]	; (8013f30 <Get_SerialNum+0x48>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013efa:	4b0e      	ldr	r3, [pc, #56]	; (8013f34 <Get_SerialNum+0x4c>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	4413      	add	r3, r2
 8013f06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d009      	beq.n	8013f22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013f0e:	2208      	movs	r2, #8
 8013f10:	4909      	ldr	r1, [pc, #36]	; (8013f38 <Get_SerialNum+0x50>)
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f000 f814 	bl	8013f40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013f18:	2204      	movs	r2, #4
 8013f1a:	4908      	ldr	r1, [pc, #32]	; (8013f3c <Get_SerialNum+0x54>)
 8013f1c:	68b8      	ldr	r0, [r7, #8]
 8013f1e:	f000 f80f 	bl	8013f40 <IntToUnicode>
  }
}
 8013f22:	bf00      	nop
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	1fff7590 	.word	0x1fff7590
 8013f30:	1fff7594 	.word	0x1fff7594
 8013f34:	1fff7598 	.word	0x1fff7598
 8013f38:	2000017a 	.word	0x2000017a
 8013f3c:	2000018a 	.word	0x2000018a

08013f40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b087      	sub	sp, #28
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013f52:	2300      	movs	r3, #0
 8013f54:	75fb      	strb	r3, [r7, #23]
 8013f56:	e027      	b.n	8013fa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	0f1b      	lsrs	r3, r3, #28
 8013f5c:	2b09      	cmp	r3, #9
 8013f5e:	d80b      	bhi.n	8013f78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	0f1b      	lsrs	r3, r3, #28
 8013f64:	b2da      	uxtb	r2, r3
 8013f66:	7dfb      	ldrb	r3, [r7, #23]
 8013f68:	005b      	lsls	r3, r3, #1
 8013f6a:	4619      	mov	r1, r3
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	440b      	add	r3, r1
 8013f70:	3230      	adds	r2, #48	; 0x30
 8013f72:	b2d2      	uxtb	r2, r2
 8013f74:	701a      	strb	r2, [r3, #0]
 8013f76:	e00a      	b.n	8013f8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	0f1b      	lsrs	r3, r3, #28
 8013f7c:	b2da      	uxtb	r2, r3
 8013f7e:	7dfb      	ldrb	r3, [r7, #23]
 8013f80:	005b      	lsls	r3, r3, #1
 8013f82:	4619      	mov	r1, r3
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	440b      	add	r3, r1
 8013f88:	3237      	adds	r2, #55	; 0x37
 8013f8a:	b2d2      	uxtb	r2, r2
 8013f8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	011b      	lsls	r3, r3, #4
 8013f92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013f94:	7dfb      	ldrb	r3, [r7, #23]
 8013f96:	005b      	lsls	r3, r3, #1
 8013f98:	3301      	adds	r3, #1
 8013f9a:	68ba      	ldr	r2, [r7, #8]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013fa2:	7dfb      	ldrb	r3, [r7, #23]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	75fb      	strb	r3, [r7, #23]
 8013fa8:	7dfa      	ldrb	r2, [r7, #23]
 8013faa:	79fb      	ldrb	r3, [r7, #7]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d3d3      	bcc.n	8013f58 <IntToUnicode+0x18>
  }
}
 8013fb0:	bf00      	nop
 8013fb2:	bf00      	nop
 8013fb4:	371c      	adds	r7, #28
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbc:	4770      	bx	lr
	...

08013fc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b08a      	sub	sp, #40	; 0x28
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013fc8:	f107 0314 	add.w	r3, r7, #20
 8013fcc:	2200      	movs	r2, #0
 8013fce:	601a      	str	r2, [r3, #0]
 8013fd0:	605a      	str	r2, [r3, #4]
 8013fd2:	609a      	str	r2, [r3, #8]
 8013fd4:	60da      	str	r2, [r3, #12]
 8013fd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013fe0:	d15c      	bne.n	801409c <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013fe2:	4b30      	ldr	r3, [pc, #192]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8013fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fe6:	4a2f      	ldr	r2, [pc, #188]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8013fe8:	f043 0301 	orr.w	r3, r3, #1
 8013fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013fee:	4b2d      	ldr	r3, [pc, #180]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8013ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ff2:	f003 0301 	and.w	r3, r3, #1
 8013ff6:	613b      	str	r3, [r7, #16]
 8013ff8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8013ffa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8013ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014000:	2302      	movs	r3, #2
 8014002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014004:	2300      	movs	r3, #0
 8014006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014008:	2303      	movs	r3, #3
 801400a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801400c:	230a      	movs	r3, #10
 801400e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014010:	f107 0314 	add.w	r3, r7, #20
 8014014:	4619      	mov	r1, r3
 8014016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801401a:	f7ef ff0b 	bl	8003e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801401e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014024:	2300      	movs	r3, #0
 8014026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014028:	2300      	movs	r3, #0
 801402a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801402c:	f107 0314 	add.w	r3, r7, #20
 8014030:	4619      	mov	r1, r3
 8014032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014036:	f7ef fefd 	bl	8003e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801403a:	4b1a      	ldr	r3, [pc, #104]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 801403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801403e:	4a19      	ldr	r2, [pc, #100]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8014040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014046:	4b17      	ldr	r3, [pc, #92]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8014048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801404a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801404e:	60fb      	str	r3, [r7, #12]
 8014050:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014052:	4b14      	ldr	r3, [pc, #80]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8014054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801405a:	2b00      	cmp	r3, #0
 801405c:	d114      	bne.n	8014088 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801405e:	4b11      	ldr	r3, [pc, #68]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8014060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014062:	4a10      	ldr	r2, [pc, #64]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8014064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014068:	6593      	str	r3, [r2, #88]	; 0x58
 801406a:	4b0e      	ldr	r3, [pc, #56]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 801406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014072:	60bb      	str	r3, [r7, #8]
 8014074:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8014076:	f7f2 f9d1 	bl	800641c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801407a:	4b0a      	ldr	r3, [pc, #40]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 801407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801407e:	4a09      	ldr	r2, [pc, #36]	; (80140a4 <HAL_PCD_MspInit+0xe4>)
 8014080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014084:	6593      	str	r3, [r2, #88]	; 0x58
 8014086:	e001      	b.n	801408c <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8014088:	f7f2 f9c8 	bl	800641c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801408c:	2200      	movs	r2, #0
 801408e:	2105      	movs	r1, #5
 8014090:	2043      	movs	r0, #67	; 0x43
 8014092:	f7ef f969 	bl	8003368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014096:	2043      	movs	r0, #67	; 0x43
 8014098:	f7ef f982 	bl	80033a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801409c:	bf00      	nop
 801409e:	3728      	adds	r7, #40	; 0x28
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}
 80140a4:	40021000 	.word	0x40021000

080140a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80140bc:	4619      	mov	r1, r3
 80140be:	4610      	mov	r0, r2
 80140c0:	f7fb fc48 	bl	800f954 <USBD_LL_SetupStage>
}
 80140c4:	bf00      	nop
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	460b      	mov	r3, r1
 80140d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80140de:	78fa      	ldrb	r2, [r7, #3]
 80140e0:	6879      	ldr	r1, [r7, #4]
 80140e2:	4613      	mov	r3, r2
 80140e4:	00db      	lsls	r3, r3, #3
 80140e6:	1a9b      	subs	r3, r3, r2
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	440b      	add	r3, r1
 80140ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	78fb      	ldrb	r3, [r7, #3]
 80140f4:	4619      	mov	r1, r3
 80140f6:	f7fb fc82 	bl	800f9fe <USBD_LL_DataOutStage>
}
 80140fa:	bf00      	nop
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014102:	b580      	push	{r7, lr}
 8014104:	b082      	sub	sp, #8
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
 801410a:	460b      	mov	r3, r1
 801410c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014114:	78fa      	ldrb	r2, [r7, #3]
 8014116:	6879      	ldr	r1, [r7, #4]
 8014118:	4613      	mov	r3, r2
 801411a:	00db      	lsls	r3, r3, #3
 801411c:	1a9b      	subs	r3, r3, r2
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	440b      	add	r3, r1
 8014122:	3348      	adds	r3, #72	; 0x48
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	78fb      	ldrb	r3, [r7, #3]
 8014128:	4619      	mov	r1, r3
 801412a:	f7fb fccb 	bl	800fac4 <USBD_LL_DataInStage>
}
 801412e:	bf00      	nop
 8014130:	3708      	adds	r7, #8
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}

08014136 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014136:	b580      	push	{r7, lr}
 8014138:	b082      	sub	sp, #8
 801413a:	af00      	add	r7, sp, #0
 801413c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014144:	4618      	mov	r0, r3
 8014146:	f7fb fddf 	bl	800fd08 <USBD_LL_SOF>
}
 801414a:	bf00      	nop
 801414c:	3708      	adds	r7, #8
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014152:	b580      	push	{r7, lr}
 8014154:	b084      	sub	sp, #16
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801415a:	2301      	movs	r3, #1
 801415c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	2b02      	cmp	r3, #2
 8014164:	d001      	beq.n	801416a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014166:	f7ed f805 	bl	8001174 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014170:	7bfa      	ldrb	r2, [r7, #15]
 8014172:	4611      	mov	r1, r2
 8014174:	4618      	mov	r0, r3
 8014176:	f7fb fd89 	bl	800fc8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014180:	4618      	mov	r0, r3
 8014182:	f7fb fd35 	bl	800fbf0 <USBD_LL_Reset>
}
 8014186:	bf00      	nop
 8014188:	3710      	adds	r7, #16
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
	...

08014190 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	6812      	ldr	r2, [r2, #0]
 80141a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80141aa:	f043 0301 	orr.w	r3, r3, #1
 80141ae:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7fb fd78 	bl	800fcac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6a1b      	ldr	r3, [r3, #32]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d005      	beq.n	80141d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80141c4:	4b04      	ldr	r3, [pc, #16]	; (80141d8 <HAL_PCD_SuspendCallback+0x48>)
 80141c6:	691b      	ldr	r3, [r3, #16]
 80141c8:	4a03      	ldr	r2, [pc, #12]	; (80141d8 <HAL_PCD_SuspendCallback+0x48>)
 80141ca:	f043 0306 	orr.w	r3, r3, #6
 80141ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80141d0:	bf00      	nop
 80141d2:	3708      	adds	r7, #8
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}
 80141d8:	e000ed00 	.word	0xe000ed00

080141dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	6812      	ldr	r2, [r2, #0]
 80141f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80141f6:	f023 0301 	bic.w	r3, r3, #1
 80141fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	6a1b      	ldr	r3, [r3, #32]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d007      	beq.n	8014214 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014204:	4b08      	ldr	r3, [pc, #32]	; (8014228 <HAL_PCD_ResumeCallback+0x4c>)
 8014206:	691b      	ldr	r3, [r3, #16]
 8014208:	4a07      	ldr	r2, [pc, #28]	; (8014228 <HAL_PCD_ResumeCallback+0x4c>)
 801420a:	f023 0306 	bic.w	r3, r3, #6
 801420e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014210:	f000 faf4 	bl	80147fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801421a:	4618      	mov	r0, r3
 801421c:	f7fb fd5c 	bl	800fcd8 <USBD_LL_Resume>
}
 8014220:	bf00      	nop
 8014222:	3708      	adds	r7, #8
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	e000ed00 	.word	0xe000ed00

0801422c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	460b      	mov	r3, r1
 8014236:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801423e:	78fa      	ldrb	r2, [r7, #3]
 8014240:	4611      	mov	r1, r2
 8014242:	4618      	mov	r0, r3
 8014244:	f7fb fda8 	bl	800fd98 <USBD_LL_IsoOUTIncomplete>
}
 8014248:	bf00      	nop
 801424a:	3708      	adds	r7, #8
 801424c:	46bd      	mov	sp, r7
 801424e:	bd80      	pop	{r7, pc}

08014250 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	460b      	mov	r3, r1
 801425a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014262:	78fa      	ldrb	r2, [r7, #3]
 8014264:	4611      	mov	r1, r2
 8014266:	4618      	mov	r0, r3
 8014268:	f7fb fd70 	bl	800fd4c <USBD_LL_IsoINIncomplete>
}
 801426c:	bf00      	nop
 801426e:	3708      	adds	r7, #8
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
 801427a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014282:	4618      	mov	r0, r3
 8014284:	f7fb fdae 	bl	800fde4 <USBD_LL_DevConnected>
}
 8014288:	bf00      	nop
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fb fdab 	bl	800fdfa <USBD_LL_DevDisconnected>
}
 80142a4:	bf00      	nop
 80142a6:	3708      	adds	r7, #8
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d139      	bne.n	8014330 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80142bc:	4a1f      	ldr	r2, [pc, #124]	; (801433c <USBD_LL_Init+0x90>)
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	4a1d      	ldr	r2, [pc, #116]	; (801433c <USBD_LL_Init+0x90>)
 80142c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80142cc:	4b1b      	ldr	r3, [pc, #108]	; (801433c <USBD_LL_Init+0x90>)
 80142ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80142d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80142d4:	4b19      	ldr	r3, [pc, #100]	; (801433c <USBD_LL_Init+0x90>)
 80142d6:	2206      	movs	r2, #6
 80142d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80142da:	4b18      	ldr	r3, [pc, #96]	; (801433c <USBD_LL_Init+0x90>)
 80142dc:	2202      	movs	r2, #2
 80142de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80142e0:	4b16      	ldr	r3, [pc, #88]	; (801433c <USBD_LL_Init+0x90>)
 80142e2:	2201      	movs	r2, #1
 80142e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80142e6:	4b15      	ldr	r3, [pc, #84]	; (801433c <USBD_LL_Init+0x90>)
 80142e8:	2200      	movs	r2, #0
 80142ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80142ec:	4b13      	ldr	r3, [pc, #76]	; (801433c <USBD_LL_Init+0x90>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80142f2:	4b12      	ldr	r3, [pc, #72]	; (801433c <USBD_LL_Init+0x90>)
 80142f4:	2201      	movs	r2, #1
 80142f6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80142f8:	4b10      	ldr	r3, [pc, #64]	; (801433c <USBD_LL_Init+0x90>)
 80142fa:	2200      	movs	r2, #0
 80142fc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80142fe:	4b0f      	ldr	r3, [pc, #60]	; (801433c <USBD_LL_Init+0x90>)
 8014300:	2201      	movs	r2, #1
 8014302:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014304:	480d      	ldr	r0, [pc, #52]	; (801433c <USBD_LL_Init+0x90>)
 8014306:	f7f0 ff05 	bl	8005114 <HAL_PCD_Init>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d001      	beq.n	8014314 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8014310:	f7ec ff30 	bl	8001174 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014314:	2180      	movs	r1, #128	; 0x80
 8014316:	4809      	ldr	r0, [pc, #36]	; (801433c <USBD_LL_Init+0x90>)
 8014318:	f7f1 ff67 	bl	80061ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801431c:	2240      	movs	r2, #64	; 0x40
 801431e:	2100      	movs	r1, #0
 8014320:	4806      	ldr	r0, [pc, #24]	; (801433c <USBD_LL_Init+0x90>)
 8014322:	f7f1 ff1b 	bl	800615c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014326:	2280      	movs	r2, #128	; 0x80
 8014328:	2101      	movs	r1, #1
 801432a:	4804      	ldr	r0, [pc, #16]	; (801433c <USBD_LL_Init+0x90>)
 801432c:	f7f1 ff16 	bl	800615c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	200048a0 	.word	0x200048a0

08014340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014348:	2300      	movs	r3, #0
 801434a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801434c:	2300      	movs	r3, #0
 801434e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014356:	4618      	mov	r0, r3
 8014358:	f7f1 f800 	bl	800535c <HAL_PCD_Start>
 801435c:	4603      	mov	r3, r0
 801435e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014360:	7bbb      	ldrb	r3, [r7, #14]
 8014362:	2b03      	cmp	r3, #3
 8014364:	d816      	bhi.n	8014394 <USBD_LL_Start+0x54>
 8014366:	a201      	add	r2, pc, #4	; (adr r2, 801436c <USBD_LL_Start+0x2c>)
 8014368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801436c:	0801437d 	.word	0x0801437d
 8014370:	08014383 	.word	0x08014383
 8014374:	08014389 	.word	0x08014389
 8014378:	0801438f 	.word	0x0801438f
    case HAL_OK :
      usb_status = USBD_OK;
 801437c:	2300      	movs	r3, #0
 801437e:	73fb      	strb	r3, [r7, #15]
    break;
 8014380:	e00b      	b.n	801439a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014382:	2303      	movs	r3, #3
 8014384:	73fb      	strb	r3, [r7, #15]
    break;
 8014386:	e008      	b.n	801439a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014388:	2301      	movs	r3, #1
 801438a:	73fb      	strb	r3, [r7, #15]
    break;
 801438c:	e005      	b.n	801439a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801438e:	2303      	movs	r3, #3
 8014390:	73fb      	strb	r3, [r7, #15]
    break;
 8014392:	e002      	b.n	801439a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014394:	2303      	movs	r3, #3
 8014396:	73fb      	strb	r3, [r7, #15]
    break;
 8014398:	bf00      	nop
  }
  return usb_status;
 801439a:	7bfb      	ldrb	r3, [r7, #15]
}
 801439c:	4618      	mov	r0, r3
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	4608      	mov	r0, r1
 80143ae:	4611      	mov	r1, r2
 80143b0:	461a      	mov	r2, r3
 80143b2:	4603      	mov	r3, r0
 80143b4:	70fb      	strb	r3, [r7, #3]
 80143b6:	460b      	mov	r3, r1
 80143b8:	70bb      	strb	r3, [r7, #2]
 80143ba:	4613      	mov	r3, r2
 80143bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143be:	2300      	movs	r3, #0
 80143c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143c2:	2300      	movs	r3, #0
 80143c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80143cc:	78bb      	ldrb	r3, [r7, #2]
 80143ce:	883a      	ldrh	r2, [r7, #0]
 80143d0:	78f9      	ldrb	r1, [r7, #3]
 80143d2:	f7f1 fbbb 	bl	8005b4c <HAL_PCD_EP_Open>
 80143d6:	4603      	mov	r3, r0
 80143d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80143da:	7bbb      	ldrb	r3, [r7, #14]
 80143dc:	2b03      	cmp	r3, #3
 80143de:	d817      	bhi.n	8014410 <USBD_LL_OpenEP+0x6c>
 80143e0:	a201      	add	r2, pc, #4	; (adr r2, 80143e8 <USBD_LL_OpenEP+0x44>)
 80143e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143e6:	bf00      	nop
 80143e8:	080143f9 	.word	0x080143f9
 80143ec:	080143ff 	.word	0x080143ff
 80143f0:	08014405 	.word	0x08014405
 80143f4:	0801440b 	.word	0x0801440b
    case HAL_OK :
      usb_status = USBD_OK;
 80143f8:	2300      	movs	r3, #0
 80143fa:	73fb      	strb	r3, [r7, #15]
    break;
 80143fc:	e00b      	b.n	8014416 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80143fe:	2303      	movs	r3, #3
 8014400:	73fb      	strb	r3, [r7, #15]
    break;
 8014402:	e008      	b.n	8014416 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014404:	2301      	movs	r3, #1
 8014406:	73fb      	strb	r3, [r7, #15]
    break;
 8014408:	e005      	b.n	8014416 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801440a:	2303      	movs	r3, #3
 801440c:	73fb      	strb	r3, [r7, #15]
    break;
 801440e:	e002      	b.n	8014416 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014410:	2303      	movs	r3, #3
 8014412:	73fb      	strb	r3, [r7, #15]
    break;
 8014414:	bf00      	nop
  }
  return usb_status;
 8014416:	7bfb      	ldrb	r3, [r7, #15]
}
 8014418:	4618      	mov	r0, r3
 801441a:	3710      	adds	r7, #16
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b084      	sub	sp, #16
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	460b      	mov	r3, r1
 801442a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801442c:	2300      	movs	r3, #0
 801442e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014430:	2300      	movs	r3, #0
 8014432:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801443a:	78fa      	ldrb	r2, [r7, #3]
 801443c:	4611      	mov	r1, r2
 801443e:	4618      	mov	r0, r3
 8014440:	f7f1 fbec 	bl	8005c1c <HAL_PCD_EP_Close>
 8014444:	4603      	mov	r3, r0
 8014446:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014448:	7bbb      	ldrb	r3, [r7, #14]
 801444a:	2b03      	cmp	r3, #3
 801444c:	d816      	bhi.n	801447c <USBD_LL_CloseEP+0x5c>
 801444e:	a201      	add	r2, pc, #4	; (adr r2, 8014454 <USBD_LL_CloseEP+0x34>)
 8014450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014454:	08014465 	.word	0x08014465
 8014458:	0801446b 	.word	0x0801446b
 801445c:	08014471 	.word	0x08014471
 8014460:	08014477 	.word	0x08014477
    case HAL_OK :
      usb_status = USBD_OK;
 8014464:	2300      	movs	r3, #0
 8014466:	73fb      	strb	r3, [r7, #15]
    break;
 8014468:	e00b      	b.n	8014482 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801446a:	2303      	movs	r3, #3
 801446c:	73fb      	strb	r3, [r7, #15]
    break;
 801446e:	e008      	b.n	8014482 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014470:	2301      	movs	r3, #1
 8014472:	73fb      	strb	r3, [r7, #15]
    break;
 8014474:	e005      	b.n	8014482 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014476:	2303      	movs	r3, #3
 8014478:	73fb      	strb	r3, [r7, #15]
    break;
 801447a:	e002      	b.n	8014482 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801447c:	2303      	movs	r3, #3
 801447e:	73fb      	strb	r3, [r7, #15]
    break;
 8014480:	bf00      	nop
  }
  return usb_status;
 8014482:	7bfb      	ldrb	r3, [r7, #15]
}
 8014484:	4618      	mov	r0, r3
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	460b      	mov	r3, r1
 8014496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801449c:	2300      	movs	r3, #0
 801449e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80144a6:	78fa      	ldrb	r2, [r7, #3]
 80144a8:	4611      	mov	r1, r2
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7f1 fc93 	bl	8005dd6 <HAL_PCD_EP_SetStall>
 80144b0:	4603      	mov	r3, r0
 80144b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	2b03      	cmp	r3, #3
 80144b8:	d816      	bhi.n	80144e8 <USBD_LL_StallEP+0x5c>
 80144ba:	a201      	add	r2, pc, #4	; (adr r2, 80144c0 <USBD_LL_StallEP+0x34>)
 80144bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c0:	080144d1 	.word	0x080144d1
 80144c4:	080144d7 	.word	0x080144d7
 80144c8:	080144dd 	.word	0x080144dd
 80144cc:	080144e3 	.word	0x080144e3
    case HAL_OK :
      usb_status = USBD_OK;
 80144d0:	2300      	movs	r3, #0
 80144d2:	73fb      	strb	r3, [r7, #15]
    break;
 80144d4:	e00b      	b.n	80144ee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144d6:	2303      	movs	r3, #3
 80144d8:	73fb      	strb	r3, [r7, #15]
    break;
 80144da:	e008      	b.n	80144ee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144dc:	2301      	movs	r3, #1
 80144de:	73fb      	strb	r3, [r7, #15]
    break;
 80144e0:	e005      	b.n	80144ee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144e2:	2303      	movs	r3, #3
 80144e4:	73fb      	strb	r3, [r7, #15]
    break;
 80144e6:	e002      	b.n	80144ee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80144e8:	2303      	movs	r3, #3
 80144ea:	73fb      	strb	r3, [r7, #15]
    break;
 80144ec:	bf00      	nop
  }
  return usb_status;
 80144ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3710      	adds	r7, #16
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}

080144f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b084      	sub	sp, #16
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	460b      	mov	r3, r1
 8014502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014508:	2300      	movs	r3, #0
 801450a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014512:	78fa      	ldrb	r2, [r7, #3]
 8014514:	4611      	mov	r1, r2
 8014516:	4618      	mov	r0, r3
 8014518:	f7f1 fcbf 	bl	8005e9a <HAL_PCD_EP_ClrStall>
 801451c:	4603      	mov	r3, r0
 801451e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014520:	7bbb      	ldrb	r3, [r7, #14]
 8014522:	2b03      	cmp	r3, #3
 8014524:	d816      	bhi.n	8014554 <USBD_LL_ClearStallEP+0x5c>
 8014526:	a201      	add	r2, pc, #4	; (adr r2, 801452c <USBD_LL_ClearStallEP+0x34>)
 8014528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801452c:	0801453d 	.word	0x0801453d
 8014530:	08014543 	.word	0x08014543
 8014534:	08014549 	.word	0x08014549
 8014538:	0801454f 	.word	0x0801454f
    case HAL_OK :
      usb_status = USBD_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	73fb      	strb	r3, [r7, #15]
    break;
 8014540:	e00b      	b.n	801455a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014542:	2303      	movs	r3, #3
 8014544:	73fb      	strb	r3, [r7, #15]
    break;
 8014546:	e008      	b.n	801455a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014548:	2301      	movs	r3, #1
 801454a:	73fb      	strb	r3, [r7, #15]
    break;
 801454c:	e005      	b.n	801455a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801454e:	2303      	movs	r3, #3
 8014550:	73fb      	strb	r3, [r7, #15]
    break;
 8014552:	e002      	b.n	801455a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014554:	2303      	movs	r3, #3
 8014556:	73fb      	strb	r3, [r7, #15]
    break;
 8014558:	bf00      	nop
  }
  return usb_status;
 801455a:	7bfb      	ldrb	r3, [r7, #15]
}
 801455c:	4618      	mov	r0, r3
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014564:	b480      	push	{r7}
 8014566:	b085      	sub	sp, #20
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	460b      	mov	r3, r1
 801456e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801457c:	2b00      	cmp	r3, #0
 801457e:	da0b      	bge.n	8014598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014580:	78fb      	ldrb	r3, [r7, #3]
 8014582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014586:	68f9      	ldr	r1, [r7, #12]
 8014588:	4613      	mov	r3, r2
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	1a9b      	subs	r3, r3, r2
 801458e:	009b      	lsls	r3, r3, #2
 8014590:	440b      	add	r3, r1
 8014592:	333e      	adds	r3, #62	; 0x3e
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	e00b      	b.n	80145b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014598:	78fb      	ldrb	r3, [r7, #3]
 801459a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801459e:	68f9      	ldr	r1, [r7, #12]
 80145a0:	4613      	mov	r3, r2
 80145a2:	00db      	lsls	r3, r3, #3
 80145a4:	1a9b      	subs	r3, r3, r2
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	440b      	add	r3, r1
 80145aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80145ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3714      	adds	r7, #20
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b084      	sub	sp, #16
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145c8:	2300      	movs	r3, #0
 80145ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145cc:	2300      	movs	r3, #0
 80145ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80145d6:	78fa      	ldrb	r2, [r7, #3]
 80145d8:	4611      	mov	r1, r2
 80145da:	4618      	mov	r0, r3
 80145dc:	f7f1 fa91 	bl	8005b02 <HAL_PCD_SetAddress>
 80145e0:	4603      	mov	r3, r0
 80145e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80145e4:	7bbb      	ldrb	r3, [r7, #14]
 80145e6:	2b03      	cmp	r3, #3
 80145e8:	d816      	bhi.n	8014618 <USBD_LL_SetUSBAddress+0x5c>
 80145ea:	a201      	add	r2, pc, #4	; (adr r2, 80145f0 <USBD_LL_SetUSBAddress+0x34>)
 80145ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f0:	08014601 	.word	0x08014601
 80145f4:	08014607 	.word	0x08014607
 80145f8:	0801460d 	.word	0x0801460d
 80145fc:	08014613 	.word	0x08014613
    case HAL_OK :
      usb_status = USBD_OK;
 8014600:	2300      	movs	r3, #0
 8014602:	73fb      	strb	r3, [r7, #15]
    break;
 8014604:	e00b      	b.n	801461e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014606:	2303      	movs	r3, #3
 8014608:	73fb      	strb	r3, [r7, #15]
    break;
 801460a:	e008      	b.n	801461e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801460c:	2301      	movs	r3, #1
 801460e:	73fb      	strb	r3, [r7, #15]
    break;
 8014610:	e005      	b.n	801461e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014612:	2303      	movs	r3, #3
 8014614:	73fb      	strb	r3, [r7, #15]
    break;
 8014616:	e002      	b.n	801461e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014618:	2303      	movs	r3, #3
 801461a:	73fb      	strb	r3, [r7, #15]
    break;
 801461c:	bf00      	nop
  }
  return usb_status;
 801461e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014620:	4618      	mov	r0, r3
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b086      	sub	sp, #24
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	607a      	str	r2, [r7, #4]
 8014632:	603b      	str	r3, [r7, #0]
 8014634:	460b      	mov	r3, r1
 8014636:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014638:	2300      	movs	r3, #0
 801463a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801463c:	2300      	movs	r3, #0
 801463e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014646:	7af9      	ldrb	r1, [r7, #11]
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	f7f1 fb86 	bl	8005d5c <HAL_PCD_EP_Transmit>
 8014650:	4603      	mov	r3, r0
 8014652:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014654:	7dbb      	ldrb	r3, [r7, #22]
 8014656:	2b03      	cmp	r3, #3
 8014658:	d816      	bhi.n	8014688 <USBD_LL_Transmit+0x60>
 801465a:	a201      	add	r2, pc, #4	; (adr r2, 8014660 <USBD_LL_Transmit+0x38>)
 801465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014660:	08014671 	.word	0x08014671
 8014664:	08014677 	.word	0x08014677
 8014668:	0801467d 	.word	0x0801467d
 801466c:	08014683 	.word	0x08014683
    case HAL_OK :
      usb_status = USBD_OK;
 8014670:	2300      	movs	r3, #0
 8014672:	75fb      	strb	r3, [r7, #23]
    break;
 8014674:	e00b      	b.n	801468e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014676:	2303      	movs	r3, #3
 8014678:	75fb      	strb	r3, [r7, #23]
    break;
 801467a:	e008      	b.n	801468e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801467c:	2301      	movs	r3, #1
 801467e:	75fb      	strb	r3, [r7, #23]
    break;
 8014680:	e005      	b.n	801468e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014682:	2303      	movs	r3, #3
 8014684:	75fb      	strb	r3, [r7, #23]
    break;
 8014686:	e002      	b.n	801468e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014688:	2303      	movs	r3, #3
 801468a:	75fb      	strb	r3, [r7, #23]
    break;
 801468c:	bf00      	nop
  }
  return usb_status;
 801468e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014690:	4618      	mov	r0, r3
 8014692:	3718      	adds	r7, #24
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}

08014698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b086      	sub	sp, #24
 801469c:	af00      	add	r7, sp, #0
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	607a      	str	r2, [r7, #4]
 80146a2:	603b      	str	r3, [r7, #0]
 80146a4:	460b      	mov	r3, r1
 80146a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146a8:	2300      	movs	r3, #0
 80146aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146ac:	2300      	movs	r3, #0
 80146ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80146b6:	7af9      	ldrb	r1, [r7, #11]
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	687a      	ldr	r2, [r7, #4]
 80146bc:	f7f1 faf8 	bl	8005cb0 <HAL_PCD_EP_Receive>
 80146c0:	4603      	mov	r3, r0
 80146c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80146c4:	7dbb      	ldrb	r3, [r7, #22]
 80146c6:	2b03      	cmp	r3, #3
 80146c8:	d816      	bhi.n	80146f8 <USBD_LL_PrepareReceive+0x60>
 80146ca:	a201      	add	r2, pc, #4	; (adr r2, 80146d0 <USBD_LL_PrepareReceive+0x38>)
 80146cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d0:	080146e1 	.word	0x080146e1
 80146d4:	080146e7 	.word	0x080146e7
 80146d8:	080146ed 	.word	0x080146ed
 80146dc:	080146f3 	.word	0x080146f3
    case HAL_OK :
      usb_status = USBD_OK;
 80146e0:	2300      	movs	r3, #0
 80146e2:	75fb      	strb	r3, [r7, #23]
    break;
 80146e4:	e00b      	b.n	80146fe <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80146e6:	2303      	movs	r3, #3
 80146e8:	75fb      	strb	r3, [r7, #23]
    break;
 80146ea:	e008      	b.n	80146fe <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80146ec:	2301      	movs	r3, #1
 80146ee:	75fb      	strb	r3, [r7, #23]
    break;
 80146f0:	e005      	b.n	80146fe <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80146f2:	2303      	movs	r3, #3
 80146f4:	75fb      	strb	r3, [r7, #23]
    break;
 80146f6:	e002      	b.n	80146fe <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80146f8:	2303      	movs	r3, #3
 80146fa:	75fb      	strb	r3, [r7, #23]
    break;
 80146fc:	bf00      	nop
  }
  return usb_status;
 80146fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014700:	4618      	mov	r0, r3
 8014702:	3718      	adds	r7, #24
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	460b      	mov	r3, r1
 8014712:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801471a:	78fa      	ldrb	r2, [r7, #3]
 801471c:	4611      	mov	r1, r2
 801471e:	4618      	mov	r0, r3
 8014720:	f7f1 fb04 	bl	8005d2c <HAL_PCD_EP_GetRxCount>
 8014724:	4603      	mov	r3, r0
}
 8014726:	4618      	mov	r0, r3
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
	...

08014730 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	460b      	mov	r3, r1
 801473a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801473c:	78fb      	ldrb	r3, [r7, #3]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d002      	beq.n	8014748 <HAL_PCDEx_LPM_Callback+0x18>
 8014742:	2b01      	cmp	r3, #1
 8014744:	d01f      	beq.n	8014786 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8014746:	e03b      	b.n	80147c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	6a1b      	ldr	r3, [r3, #32]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d007      	beq.n	8014760 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014750:	f000 f854 	bl	80147fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014754:	4b1c      	ldr	r3, [pc, #112]	; (80147c8 <HAL_PCDEx_LPM_Callback+0x98>)
 8014756:	691b      	ldr	r3, [r3, #16]
 8014758:	4a1b      	ldr	r2, [pc, #108]	; (80147c8 <HAL_PCDEx_LPM_Callback+0x98>)
 801475a:	f023 0306 	bic.w	r3, r3, #6
 801475e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	687a      	ldr	r2, [r7, #4]
 801476c:	6812      	ldr	r2, [r2, #0]
 801476e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014772:	f023 0301 	bic.w	r3, r3, #1
 8014776:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801477e:	4618      	mov	r0, r3
 8014780:	f7fb faaa 	bl	800fcd8 <USBD_LL_Resume>
    break;
 8014784:	e01c      	b.n	80147c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	6812      	ldr	r2, [r2, #0]
 8014794:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014798:	f043 0301 	orr.w	r3, r3, #1
 801479c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fb fa81 	bl	800fcac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6a1b      	ldr	r3, [r3, #32]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d005      	beq.n	80147be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80147b2:	4b05      	ldr	r3, [pc, #20]	; (80147c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80147b4:	691b      	ldr	r3, [r3, #16]
 80147b6:	4a04      	ldr	r2, [pc, #16]	; (80147c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80147b8:	f043 0306 	orr.w	r3, r3, #6
 80147bc:	6113      	str	r3, [r2, #16]
    break;
 80147be:	bf00      	nop
}
 80147c0:	bf00      	nop
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}
 80147c8:	e000ed00 	.word	0xe000ed00

080147cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80147cc:	b480      	push	{r7}
 80147ce:	b083      	sub	sp, #12
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80147d4:	4b03      	ldr	r3, [pc, #12]	; (80147e4 <USBD_static_malloc+0x18>)
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	370c      	adds	r7, #12
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr
 80147e2:	bf00      	nop
 80147e4:	20002410 	.word	0x20002410

080147e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]

}
 80147f0:	bf00      	nop
 80147f2:	370c      	adds	r7, #12
 80147f4:	46bd      	mov	sp, r7
 80147f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fa:	4770      	bx	lr

080147fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014800:	f7ec fc0c 	bl	800101c <SystemClock_Config>
}
 8014804:	bf00      	nop
 8014806:	bd80      	pop	{r7, pc}

08014808 <__libc_init_array>:
 8014808:	b570      	push	{r4, r5, r6, lr}
 801480a:	4d0d      	ldr	r5, [pc, #52]	; (8014840 <__libc_init_array+0x38>)
 801480c:	4c0d      	ldr	r4, [pc, #52]	; (8014844 <__libc_init_array+0x3c>)
 801480e:	1b64      	subs	r4, r4, r5
 8014810:	10a4      	asrs	r4, r4, #2
 8014812:	2600      	movs	r6, #0
 8014814:	42a6      	cmp	r6, r4
 8014816:	d109      	bne.n	801482c <__libc_init_array+0x24>
 8014818:	4d0b      	ldr	r5, [pc, #44]	; (8014848 <__libc_init_array+0x40>)
 801481a:	4c0c      	ldr	r4, [pc, #48]	; (801484c <__libc_init_array+0x44>)
 801481c:	f000 f8f6 	bl	8014a0c <_init>
 8014820:	1b64      	subs	r4, r4, r5
 8014822:	10a4      	asrs	r4, r4, #2
 8014824:	2600      	movs	r6, #0
 8014826:	42a6      	cmp	r6, r4
 8014828:	d105      	bne.n	8014836 <__libc_init_array+0x2e>
 801482a:	bd70      	pop	{r4, r5, r6, pc}
 801482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014830:	4798      	blx	r3
 8014832:	3601      	adds	r6, #1
 8014834:	e7ee      	b.n	8014814 <__libc_init_array+0xc>
 8014836:	f855 3b04 	ldr.w	r3, [r5], #4
 801483a:	4798      	blx	r3
 801483c:	3601      	adds	r6, #1
 801483e:	e7f2      	b.n	8014826 <__libc_init_array+0x1e>
 8014840:	08014bc4 	.word	0x08014bc4
 8014844:	08014bc4 	.word	0x08014bc4
 8014848:	08014bc4 	.word	0x08014bc4
 801484c:	08014bc8 	.word	0x08014bc8

08014850 <__retarget_lock_acquire_recursive>:
 8014850:	4770      	bx	lr

08014852 <__retarget_lock_release_recursive>:
 8014852:	4770      	bx	lr

08014854 <memcpy>:
 8014854:	440a      	add	r2, r1
 8014856:	4291      	cmp	r1, r2
 8014858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801485c:	d100      	bne.n	8014860 <memcpy+0xc>
 801485e:	4770      	bx	lr
 8014860:	b510      	push	{r4, lr}
 8014862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014866:	f803 4f01 	strb.w	r4, [r3, #1]!
 801486a:	4291      	cmp	r1, r2
 801486c:	d1f9      	bne.n	8014862 <memcpy+0xe>
 801486e:	bd10      	pop	{r4, pc}

08014870 <memset>:
 8014870:	4402      	add	r2, r0
 8014872:	4603      	mov	r3, r0
 8014874:	4293      	cmp	r3, r2
 8014876:	d100      	bne.n	801487a <memset+0xa>
 8014878:	4770      	bx	lr
 801487a:	f803 1b01 	strb.w	r1, [r3], #1
 801487e:	e7f9      	b.n	8014874 <memset+0x4>

08014880 <cleanup_glue>:
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	460c      	mov	r4, r1
 8014884:	6809      	ldr	r1, [r1, #0]
 8014886:	4605      	mov	r5, r0
 8014888:	b109      	cbz	r1, 801488e <cleanup_glue+0xe>
 801488a:	f7ff fff9 	bl	8014880 <cleanup_glue>
 801488e:	4621      	mov	r1, r4
 8014890:	4628      	mov	r0, r5
 8014892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014896:	f000 b869 	b.w	801496c <_free_r>
	...

0801489c <_reclaim_reent>:
 801489c:	4b2c      	ldr	r3, [pc, #176]	; (8014950 <_reclaim_reent+0xb4>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	4283      	cmp	r3, r0
 80148a2:	b570      	push	{r4, r5, r6, lr}
 80148a4:	4604      	mov	r4, r0
 80148a6:	d051      	beq.n	801494c <_reclaim_reent+0xb0>
 80148a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80148aa:	b143      	cbz	r3, 80148be <_reclaim_reent+0x22>
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d14a      	bne.n	8014948 <_reclaim_reent+0xac>
 80148b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148b4:	6819      	ldr	r1, [r3, #0]
 80148b6:	b111      	cbz	r1, 80148be <_reclaim_reent+0x22>
 80148b8:	4620      	mov	r0, r4
 80148ba:	f000 f857 	bl	801496c <_free_r>
 80148be:	6961      	ldr	r1, [r4, #20]
 80148c0:	b111      	cbz	r1, 80148c8 <_reclaim_reent+0x2c>
 80148c2:	4620      	mov	r0, r4
 80148c4:	f000 f852 	bl	801496c <_free_r>
 80148c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80148ca:	b111      	cbz	r1, 80148d2 <_reclaim_reent+0x36>
 80148cc:	4620      	mov	r0, r4
 80148ce:	f000 f84d 	bl	801496c <_free_r>
 80148d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80148d4:	b111      	cbz	r1, 80148dc <_reclaim_reent+0x40>
 80148d6:	4620      	mov	r0, r4
 80148d8:	f000 f848 	bl	801496c <_free_r>
 80148dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80148de:	b111      	cbz	r1, 80148e6 <_reclaim_reent+0x4a>
 80148e0:	4620      	mov	r0, r4
 80148e2:	f000 f843 	bl	801496c <_free_r>
 80148e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80148e8:	b111      	cbz	r1, 80148f0 <_reclaim_reent+0x54>
 80148ea:	4620      	mov	r0, r4
 80148ec:	f000 f83e 	bl	801496c <_free_r>
 80148f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80148f2:	b111      	cbz	r1, 80148fa <_reclaim_reent+0x5e>
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 f839 	bl	801496c <_free_r>
 80148fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80148fc:	b111      	cbz	r1, 8014904 <_reclaim_reent+0x68>
 80148fe:	4620      	mov	r0, r4
 8014900:	f000 f834 	bl	801496c <_free_r>
 8014904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014906:	b111      	cbz	r1, 801490e <_reclaim_reent+0x72>
 8014908:	4620      	mov	r0, r4
 801490a:	f000 f82f 	bl	801496c <_free_r>
 801490e:	69a3      	ldr	r3, [r4, #24]
 8014910:	b1e3      	cbz	r3, 801494c <_reclaim_reent+0xb0>
 8014912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014914:	4620      	mov	r0, r4
 8014916:	4798      	blx	r3
 8014918:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801491a:	b1b9      	cbz	r1, 801494c <_reclaim_reent+0xb0>
 801491c:	4620      	mov	r0, r4
 801491e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014922:	f7ff bfad 	b.w	8014880 <cleanup_glue>
 8014926:	5949      	ldr	r1, [r1, r5]
 8014928:	b941      	cbnz	r1, 801493c <_reclaim_reent+0xa0>
 801492a:	3504      	adds	r5, #4
 801492c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801492e:	2d80      	cmp	r5, #128	; 0x80
 8014930:	68d9      	ldr	r1, [r3, #12]
 8014932:	d1f8      	bne.n	8014926 <_reclaim_reent+0x8a>
 8014934:	4620      	mov	r0, r4
 8014936:	f000 f819 	bl	801496c <_free_r>
 801493a:	e7ba      	b.n	80148b2 <_reclaim_reent+0x16>
 801493c:	680e      	ldr	r6, [r1, #0]
 801493e:	4620      	mov	r0, r4
 8014940:	f000 f814 	bl	801496c <_free_r>
 8014944:	4631      	mov	r1, r6
 8014946:	e7ef      	b.n	8014928 <_reclaim_reent+0x8c>
 8014948:	2500      	movs	r5, #0
 801494a:	e7ef      	b.n	801492c <_reclaim_reent+0x90>
 801494c:	bd70      	pop	{r4, r5, r6, pc}
 801494e:	bf00      	nop
 8014950:	20000194 	.word	0x20000194

08014954 <__malloc_lock>:
 8014954:	4801      	ldr	r0, [pc, #4]	; (801495c <__malloc_lock+0x8>)
 8014956:	f7ff bf7b 	b.w	8014850 <__retarget_lock_acquire_recursive>
 801495a:	bf00      	nop
 801495c:	20004cac 	.word	0x20004cac

08014960 <__malloc_unlock>:
 8014960:	4801      	ldr	r0, [pc, #4]	; (8014968 <__malloc_unlock+0x8>)
 8014962:	f7ff bf76 	b.w	8014852 <__retarget_lock_release_recursive>
 8014966:	bf00      	nop
 8014968:	20004cac 	.word	0x20004cac

0801496c <_free_r>:
 801496c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801496e:	2900      	cmp	r1, #0
 8014970:	d048      	beq.n	8014a04 <_free_r+0x98>
 8014972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014976:	9001      	str	r0, [sp, #4]
 8014978:	2b00      	cmp	r3, #0
 801497a:	f1a1 0404 	sub.w	r4, r1, #4
 801497e:	bfb8      	it	lt
 8014980:	18e4      	addlt	r4, r4, r3
 8014982:	f7ff ffe7 	bl	8014954 <__malloc_lock>
 8014986:	4a20      	ldr	r2, [pc, #128]	; (8014a08 <_free_r+0x9c>)
 8014988:	9801      	ldr	r0, [sp, #4]
 801498a:	6813      	ldr	r3, [r2, #0]
 801498c:	4615      	mov	r5, r2
 801498e:	b933      	cbnz	r3, 801499e <_free_r+0x32>
 8014990:	6063      	str	r3, [r4, #4]
 8014992:	6014      	str	r4, [r2, #0]
 8014994:	b003      	add	sp, #12
 8014996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801499a:	f7ff bfe1 	b.w	8014960 <__malloc_unlock>
 801499e:	42a3      	cmp	r3, r4
 80149a0:	d90b      	bls.n	80149ba <_free_r+0x4e>
 80149a2:	6821      	ldr	r1, [r4, #0]
 80149a4:	1862      	adds	r2, r4, r1
 80149a6:	4293      	cmp	r3, r2
 80149a8:	bf04      	itt	eq
 80149aa:	681a      	ldreq	r2, [r3, #0]
 80149ac:	685b      	ldreq	r3, [r3, #4]
 80149ae:	6063      	str	r3, [r4, #4]
 80149b0:	bf04      	itt	eq
 80149b2:	1852      	addeq	r2, r2, r1
 80149b4:	6022      	streq	r2, [r4, #0]
 80149b6:	602c      	str	r4, [r5, #0]
 80149b8:	e7ec      	b.n	8014994 <_free_r+0x28>
 80149ba:	461a      	mov	r2, r3
 80149bc:	685b      	ldr	r3, [r3, #4]
 80149be:	b10b      	cbz	r3, 80149c4 <_free_r+0x58>
 80149c0:	42a3      	cmp	r3, r4
 80149c2:	d9fa      	bls.n	80149ba <_free_r+0x4e>
 80149c4:	6811      	ldr	r1, [r2, #0]
 80149c6:	1855      	adds	r5, r2, r1
 80149c8:	42a5      	cmp	r5, r4
 80149ca:	d10b      	bne.n	80149e4 <_free_r+0x78>
 80149cc:	6824      	ldr	r4, [r4, #0]
 80149ce:	4421      	add	r1, r4
 80149d0:	1854      	adds	r4, r2, r1
 80149d2:	42a3      	cmp	r3, r4
 80149d4:	6011      	str	r1, [r2, #0]
 80149d6:	d1dd      	bne.n	8014994 <_free_r+0x28>
 80149d8:	681c      	ldr	r4, [r3, #0]
 80149da:	685b      	ldr	r3, [r3, #4]
 80149dc:	6053      	str	r3, [r2, #4]
 80149de:	4421      	add	r1, r4
 80149e0:	6011      	str	r1, [r2, #0]
 80149e2:	e7d7      	b.n	8014994 <_free_r+0x28>
 80149e4:	d902      	bls.n	80149ec <_free_r+0x80>
 80149e6:	230c      	movs	r3, #12
 80149e8:	6003      	str	r3, [r0, #0]
 80149ea:	e7d3      	b.n	8014994 <_free_r+0x28>
 80149ec:	6825      	ldr	r5, [r4, #0]
 80149ee:	1961      	adds	r1, r4, r5
 80149f0:	428b      	cmp	r3, r1
 80149f2:	bf04      	itt	eq
 80149f4:	6819      	ldreq	r1, [r3, #0]
 80149f6:	685b      	ldreq	r3, [r3, #4]
 80149f8:	6063      	str	r3, [r4, #4]
 80149fa:	bf04      	itt	eq
 80149fc:	1949      	addeq	r1, r1, r5
 80149fe:	6021      	streq	r1, [r4, #0]
 8014a00:	6054      	str	r4, [r2, #4]
 8014a02:	e7c7      	b.n	8014994 <_free_r+0x28>
 8014a04:	b003      	add	sp, #12
 8014a06:	bd30      	pop	{r4, r5, pc}
 8014a08:	20002630 	.word	0x20002630

08014a0c <_init>:
 8014a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a0e:	bf00      	nop
 8014a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a12:	bc08      	pop	{r3}
 8014a14:	469e      	mov	lr, r3
 8014a16:	4770      	bx	lr

08014a18 <_fini>:
 8014a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1a:	bf00      	nop
 8014a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a1e:	bc08      	pop	{r3}
 8014a20:	469e      	mov	lr, r3
 8014a22:	4770      	bx	lr
