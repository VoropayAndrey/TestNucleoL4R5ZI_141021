
TestNucleoL4R5ZI_141021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001877c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 i.AcquireBluetoothStackInformation 0000008c  0801893c  0801893c  0002893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 i.AdjustSharedBuffer 00000064  080189c8  080189c8  000289c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 i.BSC_AcquireListLock 00000018  08018a2c  08018a2c  00028a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 i.BSC_AddGenericListEntry 0000006c  08018a44  08018a44  00028a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 i.BSC_AddGenericListEntry_Actual 00000046  08018ab0  08018ab0  00028ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 i.BSC_AuthenticateDevice 00000086  08018af6  08018af6  00028af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 i.BSC_DeleteGenericListEntry 00000062  08018b7c  08018b7c  00028b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 i.BSC_DisableFeature 00000078  08018bde  08018bde  00028bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 i.BSC_EnableFeature 00000062  08018c56  08018c56  00028c56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 i.BSC_FreeGenericListEntryList 0000001e  08018cb8  08018cb8  00028cb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 i.BSC_FreeGenericListEntryMemory 0000000a  08018cd6  08018cd6  00028cd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 i.BSC_GetNextGenericListEntry 00000020  08018ce0  08018ce0  00028ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 i.BSC_Initialize 00000378  08018d00  08018d00  00028d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 i.BSC_LockBluetoothStack 0000002c  08019078  08019078  00029078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 i.BSC_QueryActiveFeatures 00000026  080190a4  080190a4  000290a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 i.BSC_RegisterEventCallback 0000002a  080190ca  080190ca  000290ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 i.BSC_ReleaseListLock 00000014  080190f4  080190f4  000290f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 i.BSC_ScheduleAsynchronousCallback 00000032  08019108  08019108  00029108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 i.BSC_SearchGenericListEntry 00000036  0801913a  0801913a  0002913a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 i.BSC_Shutdown 000000f4  08019170  08019170  00029170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 i.BSC_StartTimer 00000094  08019264  08019264  00029264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 i.BSC_StopTimer 0000004c  080192f8  080192f8  000292f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 i.BSC_UnLockBluetoothStack 0000002a  08019344  08019344  00029344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 i.BSC_UnRegisterEventCallback 0000001a  0801936e  0801936e  0002936e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 i.CalculateBufferOffset 00000034  08019388  08019388  00029388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 i.CompareBluetoothAddress 00000038  080193bc  080193bc  000293bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 i.CompareListEntryKeys 0000004a  080193f4  080193f4  000293f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 i.CompareNULLBluetoothAddress 00000020  0801943e  0801943e  0002943e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 i.DecreaseBluetoothStackThreadCount 00000074  08019460  08019460  00029460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 i.DeleteBSCTimerEntry 00000014  080194d4  080194d4  000294d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 i.FreeBSCTimerEntryList 00000026  080194e8  080194e8  000294e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 i.IncreaseBluetoothStackThreadCount 00000038  08019510  08019510  00029510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 i.InitializeBSCModule 00000020  08019548  08019548  00029548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 i.QuerySharedBuffer 0000003a  08019568  08019568  00029568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 i.ReleaseBluetoothStackInformation 0000001c  080195a4  080195a4  000295a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 i.SearchBTStackEntry 00000014  080195c0  080195c0  000295c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 i.TimerCallback 00000040  080195d4  080195d4  000295d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 i.VerifySharedBufferPointer 00000028  08019614  08019614  00029614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 i.AsynchronousCallbackFunction 000000a4  0801963c  0801963c  0002963c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 i.BTPS_ChangeTimer 00000060  080196e0  080196e0  000296e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 i.BTPS_CleanupTimerModule 0000004c  08019740  08019740  00029740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 i.BTPS_InitializeTimerModule 00000074  0801978c  0801978c  0002978c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 i.BTPS_StartTimer 00000094  08019800  08019800  00029800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 i.BTPS_StopTimer 00000074  08019894  08019894  00029894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 i.GetNextTimerID 00000044  08019908  08019908  00029908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 i.TimerThread 0000007c  0801994c  0801994c  0002994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 i.UpdateAndExpireTimers 00000078  080199c8  080199c8  000299c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 i.AcquireGAPLEContext 0000002a  08019a40  08019a40  00029a40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 i.AcquireGAPStackACLInfo 00000042  08019a6a  08019a6a  00029a6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 i.AcquireGAPStackInformation 00000028  08019aac  08019aac  00029aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 i.BSC_Event_Callback 00000054  08019ad4  08019ad4  00029ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 i.CleanUpInquiry 0000001c  08019b28  08019b28  00029b28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 i.DeleteACLLinkEntryConnection_Handle 00000014  08019b44  08019b44  00029b44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 i.DeleteCallbackEntry 00000024  08019b58  08019b58  00029b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 i.Discoverability_Timeout_Callback 00000026  08019b7c  08019b7c  00029b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 i.FormatAndDispatchAuthenticationEvent 0000003c  08019ba2  08019ba2  00029ba2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 i.FormatAndDispatchAuthenticationStatusEvent 00000032  08019bde  08019bde  00029bde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 i.FormatAndDispatchEncryptionChangeEvent 0000004a  08019c10  08019c10  00029c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 i.FormatAndDispatchInquiryEvent 00000032  08019c5a  08019c5a  00029c5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 i.FreeACLLinkList 0000000c  08019c8c  08019c8c  00029c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 i.FreeCallbackList 00000012  08019c98  08019c98  00029c98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 i.FreeInquiryResultList 00000006  08019caa  08019caa  00029caa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 i.GAP_Authenticate_Remote_Device 0000009a  08019cb0  08019cb0  00029cb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 i.GAP_Cleanup 0000007e  08019d4a  08019d4a  00029d4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 i.GAP_Initialize 000000d4  08019dc8  08019dc8  00029dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 i.GAP_Query_Local_BD_ADDR 0000002e  08019e9c  08019e9c  00029e9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 i.GAP_Set_Discoverability_Mode 0000018c  08019ecc  08019ecc  00029ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 i.GAP_Set_Encryption_Mode 00000084  0801a058  0801a058  0002a058  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 i.HCI_Event_Callback 00001094  0801a0dc  0801a0dc  0002a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 i.IssueBondingCallback 00000038  0801b170  0801b170  0002b170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 i.ReleaseGAPLEContext 0000000a  0801b1a8  0801b1a8  0002b1a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 i.SearchACLLinkEntryBD_ADDR 00000010  0801b1b2  0801b1b2  0002b1b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 i.SearchACLLinkEntryConnection_Handle 00000014  0801b1c2  0801b1c2  0002b1c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 i.SearchCallbackEntry 00000010  0801b1d6  0801b1d6  0002b1d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 i.AcquireGAPStackInfo 0000004e  0801b1e6  0801b1e6  0002b1e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 i.AcquireGAPStackLELinkInfo 00000036  0801b234  0801b234  0002b234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 i.AcquireGAPStackLELinkInfoConnection_Handle 00000034  0801b26a  0801b26a  0002b26a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 i.AcquirePairingCallbackInformation 00000024  0801b29e  0801b29e  0002b29e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 i.AddLELinkEntry 0000007a  0801b2c2  0801b2c2  0002b2c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 i.AllocateSecurityManagerContext 0000002a  0801b33c  0801b33c  0002b33c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 i.AssignGAPAddressType 00000008  0801b366  0801b366  0002b366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 i.AssignHCIAddressType 00000008  0801b36e  0801b36e  0002b36e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 i.AsynchronousPairingStatusCallbackFunction 00000030  0801b376  0801b376  0002b376  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 i.AuthenticationResponsePasskeyConfirmationResponse 00000128  0801b3a8  0801b3a8  0002b3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 i.AuthenticationResponseZeroLengthResponse 000000b8  0801b4d0  0801b4d0  0002b4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 i.BuildAndSendEncryptKey 00000024  0801b588  0801b588  0002b588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 i.BuildAndSendPairingConfirmPDU 0000002a  0801b5ac  0801b5ac  0002b5ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 i.BuildAndSendPairingFailedPDU 00000036  0801b5d6  0801b5d6  0002b5d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 i.BuildAndSendPairingPDU 000000c0  0801b60c  0801b60c  0002b60c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 i.BuildAndSendPairingRandom 0000002a  0801b6cc  0801b6cc  0002b6cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 i.BuildAndSendSlaveSecurityRequestPDU 00000034  0801b6f6  0801b6f6  0002b6f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 i.BuildKeyDistributionField 00000038  0801b72a  0801b72a  0002b72a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 i.CheckRemoteConfirmValue 000000ea  0801b762  0801b762  0002b762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 i.ConvertFromTwoBasebandSlots 00000018  0801b84c  0801b84c  0002b84c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 i.ConvertToBasebandSlots 00000016  0801b864  0801b864  0002b864  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 i.ConvertToTwoBasebandSlots 00000016  0801b87a  0801b87a  0002b87a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 i.CountAdvertisingDataRecords 00000026  0801b890  0801b890  0002b890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 i.CreateCallbackInfoEntry 00000040  0801b8b6  0801b8b6  0002b8b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 i.DeleteCallbackInfoByType 00000014  0801b8f6  0801b8f6  0002b8f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 i.DeleteLELinkEntryConnection_Handle 00000014  0801b90a  0801b90a  0002b90a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 i.DeterminePairingAlgorithm 00000064  0801b920  0801b920  0002b920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 i.DispatchAuthenticationCallback 00000048  0801b984  0801b984  0002b984  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 i.DispatchDisconnectionCompleteCallback 00000058  0801b9cc  0801b9cc  0002b9cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 i.DispatchPairingStatusCallback 0000006e  0801ba24  0801ba24  0002ba24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 i.DispatchSecurityEstablishmentCallback 00000056  0801ba92  0801ba92  0002ba92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 i.DivMaskGeneration 00000042  0801bae8  0801bae8  0002bae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 i.FormatConfirmValueParameters 0000003e  0801bb2a  0801bb2a  0002bb2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 i.FormatConnectionParametersFromHCI 00000022  0801bb68  0801bb68  0002bb68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 i.FreeCallbackInfoList 00000006  0801bb8a  0801bb8a  0002bb8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 i.FreeLELinkEntryMemory 00000024  0801bb90  0801bb90  0002bb90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 i.FreeLELinkList 0000001c  0801bbb4  0801bbb4  0002bbb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
113 i.FreeSecurityManagerResources 00000034  0801bbd0  0801bbd0  0002bbd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 i.GAPLEConnectionUpdateIndicationEventHandler 000000b4  0801bc04  0801bc04  0002bc04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 i.GAPLEScanningEventHandler 00000198  0801bcb8  0801bcb8  0002bcb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 i.GAPLESecurityManagerMasterEventHandler 00000190  0801be50  0801be50  0002be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 i.GAPLESecurityManagerSlaveEventHandler 00000138  0801bfe0  0801bfe0  0002bfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 i.GAP_LE_Add_Device_To_White_List 00000066  0801c118  0801c118  0002c118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 i.GAP_LE_Advertising_Disable 00000050  0801c17e  0801c17e  0002c17e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 i.GAP_LE_Advertising_Enable 00000184  0801c1d0  0801c1d0  0002c1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 i.GAP_LE_Authentication_Response 00000254  0801c354  0801c354  0002c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 i.GAP_LE_Cancel_Scan 00000040  0801c5a8  0801c5a8  0002c5a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 i.GAP_LE_Cleanup 00000034  0801c5e8  0801c5e8  0002c5e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
124 i.GAP_LE_Connection_Parameter_Update_Response 00000080  0801c61c  0801c61c  0002c61c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
125 i.GAP_LE_Create_Connection 000001bc  0801c69c  0801c69c  0002c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
126 i.GAP_LE_Disconnect 00000042  0801c858  0801c858  0002c858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
127 i.GAP_LE_Diversify_Function 00000040  0801c89a  0801c89a  0002c89a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
128 i.GAP_LE_Enable 0000006c  0801c8da  0801c8da  0002c8da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
129 i.GAP_LE_Generate_Long_Term_Key 000000b2  0801c946  0801c946  0002c946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
130 i.GAP_LE_Initialize 00000108  0801c9f8  0801c9f8  0002c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
131 i.GAP_LE_Pair_Remote_Device 000000dc  0801cb00  0801cb00  0002cb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
132 i.GAP_LE_Perform_Scan 000000ec  0801cbdc  0801cbdc  0002cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
133 i.GAP_LE_Query_Encryption_Mode 0000003e  0801ccc8  0801ccc8  0002ccc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
134 i.GAP_LE_Reestablish_Security 00000100  0801cd08  0801cd08  0002cd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
135 i.GAP_LE_Regenerate_Long_Term_Key 00000060  0801ce08  0801ce08  0002ce08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
136 i.GAP_LE_Register_Remote_Authentication 00000052  0801ce68  0801ce68  0002ce68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
137 i.GAP_LE_Remove_Device_From_White_List 00000074  0801ceba  0801ceba  0002ceba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
138 i.GAP_LE_Request_Security 000000c8  0801cf30  0801cf30  0002cf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
139 i.GAP_LE_Resolve_Address 00000082  0801cff8  0801cff8  0002cff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
140 i.GAP_LE_Set_Advertising_Data 00000068  0801d07a  0801d07a  0002d07a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
141 i.GAP_LE_Set_Fixed_Passkey 00000050  0801d0e4  0801d0e4  0002d0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
142 i.GAP_LE_Set_Pairability_Mode 00000034  0801d134  0801d134  0002d134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
143 i.GAP_LE_Set_Scan_Response_Data 00000068  0801d168  0801d168  0002d168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
144 i.GAP_LE_Update_Connection_Parameters 000000b6  0801d1d0  0801d1d0  0002d1d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
145 i.L2CA_Event_Callback 00000bac  0801d288  0801d288  0002d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
146 i.MaskEncryptionKey 00000010  0801de34  0801de34  0002de34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
147 i.PairingEncryptionChange 00000086  0801de44  0801de44  0002de44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
148 i.ParseAdvertisingDataRecords 00000100  0801deca  0801deca  0002deca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
149 i.ParseKeyDistributionField 0000002e  0801dfca  0801dfca  0002dfca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
150 i.ParsePairingPDU 000000a8  0801dff8  0801dff8  0002dff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
151 i.PasskeyEventDispatcher 000000f4  0801e0a0  0801e0a0  0002e0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
152 i.PerformArrayXOR 00000016  0801e194  0801e194  0002e194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
153 i.Phase3DistributionScheduler 00000080  0801e1aa  0801e1aa  0002e1aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
154 i.SM_Confirm_Value_Generation 000000ac  0801e22a  0801e22a  0002e22a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
155 i.SM_Diversify_Function 0000004c  0801e2d6  0801e2d6  0002e2d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
156 i.SM_Key_Generation 00000044  0801e322  0801e322  0002e322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
157 i.SM_Random_Address_Hash 00000042  0801e366  0801e366  0002e366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
158 i.SearchCallbackInfoByType 00000014  0801e3a8  0801e3a8  0002e3a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
159 i.SearchLELinkEntryBD_ADDR 00000010  0801e3bc  0801e3bc  0002e3bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
160 i.SearchLELinkEntryConnection_Handle 00000014  0801e3cc  0801e3cc  0002e3cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
161 i.SecurityManagerChannelWrite 0000004e  0801e3e0  0801e3e0  0002e3e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
162 i.TestKeyExchange 00000012  0801e42e  0801e42e  0002e42e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
163 i.TestValidConnectionParameters 00000034  0801e440  0801e440  0002e440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
164 i.TestValidScanParameters 00000020  0801e474  0801e474  0002e474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 i.Timer_Event_Callback 0000005a  0801e494  0801e494  0002e494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 i._HCI_Event_Callback 00000124  0801e4ee  0801e4ee  0002e4ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 i._L2CA_Event_Callback 00000078  0801e612  0801e612  0002e612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
168 i.FreePortInfoEntryMemory 00000022  0801e68a  0801e68a  0002e68a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
169 i.FreePortInfoList 0000001c  0801e6ac  0801e6ac  0002e6ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
170 i.GOEP_Cleanup 0000002a  0801e6c8  0801e6c8  0002e6c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
171 i.GOEP_Initialize 00000036  0801e6f2  0801e6f2  0002e6f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
172 i.AsynchronousACLDataCallback 0000003a  0801e728  0801e728  0002e728  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
173 i.AsynchronousHCIEventCallback 00000684  0801e764  0801e764  0002e764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
174 i.AsynchronousSCODataCallback 0000003a  0801ede8  0801ede8  0002ede8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
175 i.BuildAndSubmitCommandBD_ADDRByte 00000068  0801ee24  0801ee24  0002ee24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
176 i.BuildAndSubmitCommandBD_ADDRByteVariable 00000098  0801ee8c  0801ee8c  0002ee8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
177 i.BuildAndSubmitCommandByte 00000050  0801ef24  0801ef24  0002ef24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
178 i.BuildAndSubmitCommandByteVariable 00000084  0801ef74  0801ef74  0002ef74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
179 i.BuildAndSubmitCommandNoData 0000000e  0801eff8  0801eff8  0002eff8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
180 i.BuildAndSubmitCommandThreeWords 00000074  0801f008  0801f008  0002f008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 i.BuildAndSubmitCommandWord 00000054  0801f07c  0801f07c  0002f07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
182 i.BuildAndSubmitCommandWordByte 00000058  0801f0d0  0801f0d0  0002f0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 i.BuildCommandHeader 0000002e  0801f128  0801f128  0002f128  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
184 i.BuildEventBD_ADDRDWord 00000034  0801f156  0801f156  0002f156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
185 i.BuildEventBD_ADDRVariableData 0000003e  0801f18a  0801f18a  0002f18a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
186 i.BuildEventByte 00000014  0801f1c8  0801f1c8  0002f1c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
187 i.BuildEventByteBD_ADDRByte 00000034  0801f1dc  0801f1dc  0002f1dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 i.BuildEventByteWordByte 0000002e  0801f210  0801f210  0002f210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
189 i.BuildEventByteWordWord 0000003c  0801f23e  0801f23e  0002f23e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
190 i.BuildEventHeader 0000001e  0801f27a  0801f27a  0002f27a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
191 i.BuildEventWord 00000016  0801f298  0801f298  0002f298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 i.CreditDataPacket 00000016  0801f2ae  0801f2ae  0002f2ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
193 i.DetermineLEControllerSupport 0000002a  0801f2c4  0801f2c4  0002f2c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
194 i.HCICallbackThread 00000278  0801f2f0  0801f2f0  0002f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 i.HCILEAdvertisingEventHandler 0000003e  0801f568  0801f568  0002f568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
196 i.HCILEScanningEventHandler 000000f2  0801f5a6  0801f5a6  0002f5a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
197 i.HCISendPacket 00000076  0801f698  0801f698  0002f698  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 i.HCI_Build_ACL_Packet_Type_Mask 00000026  0801f70e  0801f70e  0002f70e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 i.HCI_Change_SCO_Configuration 0000002a  0801f734  0801f734  0002f734  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
200 i.HCI_Change_SCO_Configuration_Handles 0000002e  0801f75e  0801f75e  0002f75e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
201 i.HCI_Cleanup 0000008a  0801f78c  0801f78c  0002f78c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
202 i.HCI_Command_Supported 0000003a  0801f816  0801f816  0002f816  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 i.HCI_Initialize 00000258  0801f850  0801f850  0002f850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
204 i.HCI_LE_Set_Random_Address 0000002c  0801faa8  0801faa8  0002faa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 i.HCI_Query_LE_Controller_Support 00000024  0801fad4  0801fad4  0002fad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
206 i.HCI_Read_Local_Version_Information 00000044  0801faf8  0801faf8  0002faf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
207 i.HCI_Reconfigure_Driver 00000038  0801fb3c  0801fb3c  0002fb3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
208 i.HCI_Register_ACL_Data_Callback 0000000a  0801fb74  0801fb74  0002fb74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
209 i.HCI_Register_Event_Callback 0000000a  0801fb7e  0801fb7e  0002fb7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
210 i.HCI_Register_SCO_Data_Callback 0000000a  0801fb88  0801fb88  0002fb88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
211 i.HCI_Reset   0000008a  0801fb92  0801fb92  0002fb92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
212 i.HCI_Schedule_Asynchronous_Callback 00000054  0801fc1c  0801fc1c  0002fc1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
213 i.HCI_Send_ACL_Data 00000010  0801fc70  0801fc70  0002fc70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
214 i.HCI_Send_Raw_Command 0000017c  0801fc80  0801fc80  0002fc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
215 i.HCI_Version_Supported 00000024  0801fdfc  0801fdfc  0002fdfc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
216 i.HCI_Write_Default_Link_Policy_Settings 00000028  0801fe20  0801fe20  0002fe20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
217 i.HCI_Write_SCO_Flow_Control_Enable 00000028  0801fe48  0801fe48  0002fe48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
218 i.MailboxDeleteDataCallback 00000026  0801fe70  0801fe70  0002fe70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
219 i.RegisterCallback 0000013c  0801fe98  0801fe98  0002fe98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
220 i.SendDataPacket 000000fe  0801ffd4  0801ffd4  0002ffd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
221 i.SendDispatchResetThreadClose 0000001c  080200d2  080200d2  000300d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
222 i.SetEventHandler 0000001e  080200ee  080200ee  000300ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
223 i.SynchronousHCICommandCallback 00000074  0802010c  0802010c  0003010c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
224 i._HCI_Accept_Connection_Request 00000034  08020180  08020180  00030180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
225 i._HCI_Authentication_Requested 0000002c  080201b4  080201b4  000301b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
226 i._HCI_Disconnect 0000002e  080201e0  080201e0  000301e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
227 i._HCI_Flush  0000002c  0802020e  0802020e  0003020e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
228 i._HCI_Host_Number_Of_Completed_Packets 00000098  0802023c  0802023c  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
229 i._HCI_LE_Add_Device_To_White_List 00000036  080202d4  080202d4  000302d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
230 i._HCI_LE_Clear_White_List 0000002a  0802030a  0802030a  0003030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
231 i._HCI_LE_Connection_Update 00000098  08020334  08020334  00030334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
232 i._HCI_LE_Create_Connection 000000c0  080203cc  080203cc  000303cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
233 i._HCI_LE_Encrypt 00000078  0802048c  0802048c  0003048c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
234 i._HCI_LE_Long_Term_Key_Request_Negative_Reply 0000002c  08020504  08020504  00030504  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
235 i._HCI_LE_Long_Term_Key_Request_Reply 00000068  08020530  08020530  00030530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
236 i._HCI_LE_Rand 0000003a  08020598  08020598  00030598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
237 i._HCI_LE_Read_Buffer_Size 00000038  080205d2  080205d2  000305d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
238 i._HCI_LE_Read_White_List_Size 00000032  0802060a  0802060a  0003060a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
239 i._HCI_LE_Remove_Device_From_White_List 00000036  0802063c  0802063c  0003063c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
240 i._HCI_LE_Set_Advertise_Enable 00000040  08020674  08020674  00030674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
241 i._HCI_LE_Set_Advertising_Data 00000036  080206b4  080206b4  000306b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
242 i._HCI_LE_Set_Advertising_Parameters 00000088  080206ec  080206ec  000306ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
243 i._HCI_LE_Set_Random_Address 00000036  08020774  08020774  00030774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
244 i._HCI_LE_Set_Scan_Enable 0000004c  080207ac  080207ac  000307ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
245 i._HCI_LE_Set_Scan_Parameters 00000084  080207f8  080207f8  000307f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
246 i._HCI_LE_Set_Scan_Response_Data 00000036  0802087c  0802087c  0003087c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
247 i._HCI_LE_Start_Encryption 00000084  080208b4  080208b4  000308b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
248 i._HCI_Link_Key_Request_Negative_Reply 00000030  08020938  08020938  00030938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
249 i._HCI_PIN_Code_Request_Negative_Reply 00000030  08020968  08020968  00030968  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
250 i._HCI_Read_BD_ADDR 00000038  08020998  08020998  00030998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
251 i._HCI_Read_Buffer_Size 00000050  080209d0  080209d0  000309d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
252 i._HCI_Read_Class_of_Device 00000036  08020a20  08020a20  00030a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
253 i._HCI_Read_LE_Host_Supported 00000038  08020a56  08020a56  00030a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
254 i._HCI_Read_Local_Supported_Commands 00000038  08020a8e  08020a8e  00030a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
255 i._HCI_Read_Local_Supported_Features 0000003a  08020ac6  08020ac6  00030ac6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
256 i._HCI_Read_Local_Version_Information 00000054  08020b00  08020b00  00030b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
257 i._HCI_Read_Remote_Extended_Features 0000002e  08020b54  08020b54  00030b54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
258 i._HCI_Read_Scan_Enable 00000032  08020b82  08020b82  00030b82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
259 i._HCI_Read_Simple_Pairing_Mode 00000032  08020bb4  08020bb4  00030bb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
260 i._HCI_Reject_Connection_Request 00000034  08020be6  08020be6  00030be6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
261 i._HCI_Set_Connection_Encryption 0000002e  08020c1a  08020c1a  00030c1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
262 i._HCI_Set_Event_Mask 00000032  08020c48  08020c48  00030c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
263 i._HCI_Write_Automatic_Flush_Timeout 00000032  08020c7a  08020c7a  00030c7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
264 i._HCI_Write_Class_of_Device 00000032  08020cac  08020cac  00030cac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
265 i._HCI_Write_Current_IAC_LAP 0000003e  08020cde  08020cde  00030cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
266 i._HCI_Write_Default_Link_Policy_Settings 0000002c  08020d1c  08020d1c  00030d1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
267 i._HCI_Write_Encryption_Mode 0000002c  08020d48  08020d48  00030d48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
268 i._HCI_Write_LE_Host_Supported 00000038  08020d74  08020d74  00030d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
269 i._HCI_Write_Link_Supervision_Timeout 00000032  08020dac  08020dac  00030dac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
270 i._HCI_Write_SCO_Flow_Control_Enable 0000002c  08020dde  08020dde  00030dde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
271 i._HCI_Write_Scan_Enable 0000002c  08020e0a  08020e0a  00030e0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
272 i._HCI_Write_Simple_Pairing_Mode 0000002c  08020e36  08020e36  00030e36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
273 i.AcquireL2CAPStackInformation 0000002e  08020e62  08020e62  00030e62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
274 i.AddConnectionInfoEntry 00000038  08020e90  08020e90  00030e90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
275 i.AddRegistryInfoEntry 00000012  08020ec8  08020ec8  00030ec8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
276 i.CheckQueuedDataWrite 00000106  08020eda  08020eda  00030eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
277 i.CleanupChannel 00000030  08020fe0  08020fe0  00030fe0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
278 i.CreateNewChannel 00000078  08021010  08021010  00031010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
279 i.CreateNewIdentifierEntry 00000074  08021088  08021088  00031088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
280 i.DelayedAuthenticationProcess 000000a0  080210fc  080210fc  000310fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
281 i.DeleteACLPacketEntry 0000001e  0802119c  0802119c  0003119c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
282 i.DeleteChannelInfoEntry 00000030  080211ba  080211ba  000311ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
283 i.DeleteConnectionInfoEntry 0000002e  080211ea  080211ea  000311ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
284 i.DeleteIdentifierInfoEntryByIdentifier 0000002e  08021218  08021218  00031218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
285 i.DeleteRegistryInfoEntry 0000001e  08021246  08021246  00031246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
286 i.DispatchFixedChannelConnectDisconnect 00000054  08021264  08021264  00031264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
287 i.EnhancedFragmentPacket 00000070  080212b8  080212b8  000312b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
288 i.FormatEventCIDOnly 00000012  08021328  08021328  00031328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
289 i.FormatEventConfigConfirmation 00000030  0802133a  0802133a  0003133a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
290 i.FormatEventConnectConfirmation 00000028  0802136a  0802136a  0003136a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
291 i.FormatEventDisconnectConfirmation 00000016  08021392  08021392  00031392  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
292 i.FormatEventDisconnectIndication 00000014  080213a8  080213a8  000313a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
293 i.FragmentPacket 000000ac  080213bc  080213bc  000313bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
294 i.FreeACLDataList 00000006  08021468  08021468  00031468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
295 i.FreeChannelInfoList 00000014  0802146e  0802146e  0003146e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
296 i.FreeConnectionInfoList 0000004c  08021482  08021482  00031482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
297 i.FreeFixedChannelInfoList 00000006  080214ce  080214ce  000314ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
298 i.FreeIdentifierInfoList 00000028  080214d4  080214d4  000314d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
299 i.FreeL2CAPContextInformation 0000003e  080214fc  080214fc  000314fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
300 i.FreeRegistryInfoList 00000006  0802153a  0802153a  0003153a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
301 i.GetNextChannelInfoEntry 0000000a  08021540  08021540  00031540  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
302 i.GetNextDataIdentifier 0000001c  0802154c  0802154c  0003154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
303 i.GetNextIDNumber 00000014  08021568  08021568  00031568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
304 i.HCI_ACL_Data_Callback 00000168  0802157c  0802157c  0003157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
305 i.HandleChannelDisconnection 000000cc  080216e4  080216e4  000316e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
306 i.HandleReadDataError 00000026  080217b0  080217b0  000317b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
307 i.L2CAP_Cleanup 00000074  080217d6  080217d6  000317d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
308 i.L2CAP_ConfigRequestEvent 00000214  0802184c  0802184c  0003184c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
309 i.L2CAP_ConfigRequestResponse 0000010a  08021a60  08021a60  00031a60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
310 i.L2CAP_ConfigResponseEvent 000000c2  08021b6a  08021b6a  00031b6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
311 i.L2CAP_ConnectRequestEvent 000001a4  08021c2c  08021c2c  00031c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
312 i.L2CAP_ConnectRequestResponse 000000c6  08021dd0  08021dd0  00031dd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
313 i.L2CAP_ConnectResponseEvent 0000012c  08021e98  08021e98  00031e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
314 i.L2CAP_ConnectionParameterUpdateRequestEvent 0000009c  08021fc4  08021fc4  00031fc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
315 i.L2CAP_ConnectionParameterUpdateResponseEvent 0000007a  08022060  08022060  00032060  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
316 i.L2CAP_ConnectionTimeout 00000036  080220da  080220da  000320da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
317 i.L2CAP_DataWrite 0000007c  08022110  08022110  00032110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
318 i.L2CAP_DisconnectRequestEvent 00000086  0802218c  0802218c  0003218c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
319 i.L2CAP_DisconnectRequestResponse 00000090  08022212  08022212  00032212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
320 i.L2CAP_DisconnectResponseEvent 00000080  080222a2  080222a2  000322a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
321 i.L2CAP_EchoRequestResponse 000000ac  08022322  08022322  00032322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
322 i.L2CAP_InformationRequestResponse 000000de  080223ce  080223ce  000323ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
323 i.L2CAP_Initialize 000001e8  080224ac  080224ac  000324ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
324 i.L2CAP_ProcessACLQueue 00000036  08022694  08022694  00032694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
325 i.L2CAP_ReceiveTimeout 00000082  080226ca  080226ca  000326ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
326 i.L2CAP_RejectCommand 00000096  0802274c  0802274c  0003274c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
327 i.L2CAP_RequestTimeout 0000013a  080227e2  080227e2  000327e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
328 i.L2CAP_StateTimeout 00000066  0802291c  0802291c  0003291c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
329 i.L2CA_Enhanced_Fixed_Channel_Data_Write 000000fc  08022982  08022982  00032982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
330 i.L2CA_Fixed_Channel_Data_Write 00000012  08022a7e  08022a7e  00032a7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
331 i.L2CA_Get_Link_Connection_State 000000ec  08022a90  08022a90  00032a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
332 i.L2CA_Register_Fixed_Channel 00000084  08022b7c  08022b7c  00032b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
333 i.L2CA_Set_Link_Connection_Configuration 00000042  08022c00  08022c00  00032c00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
334 i.L2CA_Un_Register_Fixed_Channel 00000046  08022c42  08022c42  00032c42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
335 i.LP_ConnectCfm 0000013a  08022c88  08022c88  00032c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
336 i.LP_ConnectCfmNeg 000000f4  08022dc2  08022dc2  00032dc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
337 i.LP_ConnectIndication 000000a6  08022eb6  08022eb6  00032eb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
338 i.LP_DisconnectCfm 000000f6  08022f5c  08022f5c  00032f5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
339 i.LP_DisconnectReq 00000064  08023052  08023052  00033052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
340 i.ParseAPIOptions 000000d8  080230b6  080230b6  000330b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
341 i.ParseOptionsToAPI 00000164  0802318e  0802318e  0003318e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
342 i.ProcessL2CAPDataPacket 00000336  080232f2  080232f2  000332f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
343 i.ProcessSendQueueData 000001d0  08023628  08023628  00033628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
344 i.QueueACLPacket 00000012  080237f8  080237f8  000337f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
345 i.SearchACLPacketEntryByConnectionHandle 00000014  0802380a  0802380a  0003380a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
346 i.SearchACLPacketEntryByIdentifier 00000014  0802381e  0802381e  0003381e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
347 i.SearchChannelInfoEntry 00000014  08023832  08023832  00033832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
348 i.SearchConnectionInfoEntryByBD_ADDRType 00000044  08023846  08023846  00033846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
349 i.SearchConnectionInfoEntryByConnectionHandle 00000014  0802388a  0802388a  0003388a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
350 i.SearchFixedChannelInfoEntry 0000004c  0802389e  0802389e  0003389e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
351 i.SearchIdentifierInfoEntryByIdentifier 00000014  080238ea  080238ea  000338ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
352 i.SearchRegistryByID 00000014  080238fe  080238fe  000338fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
353 i.SearchRegistryByValue 00000014  08023912  08023912  00033912  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
354 i.VerifyACLHeader 00000090  08023926  08023926  00033926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
355 i._L2CA_Config_Request 00000190  080239b8  080239b8  000339b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
356 i._L2CA_Config_Response 00000086  08023b48  08023b48  00033b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
357 i._L2CA_Connect_Response 000000b0  08023bd0  08023bd0  00033bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
358 i._L2CA_Connection_Parameter_Update_Response 0000006c  08023c80  08023c80  00033c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
359 i._L2CA_Data_Write 0000000e  08023cec  08023cec  00033cec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
360 i._L2CA_Disconnect_Request 00000096  08023cfa  08023cfa  00033cfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
361 i._L2CA_Disconnect_Response 00000020  08023d90  08023d90  00033d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
362 i._L2CA_Enhanced_Data_Write 000000b6  08023db0  08023db0  00033db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
363 i._L2CA_Flush_Channel_Data 00000072  08023e66  08023e66  00033e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
364 i._L2CA_Register_PSM 00000056  08023ed8  08023ed8  00033ed8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
365 i.OTP_Cleanup 00000002  08023f2e  08023f2e  00033f2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
366 i.OTP_Initialize 00000004  08023f30  08023f30  00033f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
367 i.AcquireRFCOMMStackInformation 0000002e  08023f34  08023f34  00033f34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
368 i.RFCOMM_Cleanup 0000002c  08023f62  08023f62  00033f62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
369 i.RFCOMM_Initialize 000000c0  08023f90  08023f90  00033f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
370 i._RFCOMM_Set_System_Parameters 00000048  08024050  08024050  00034050  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
371 i.SCO_Cleanup 0000008c  08024098  08024098  00034098  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
372 i.SCO_Initialize 00000224  08024124  08024124  00034124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
373 i._HCI_SCO_Callback 00000048  08024348  08024348  00034348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
374 i.AcquireSDPStackInformation 00000028  08024390  08024390  00034390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
375 i.AddServiceRecordEntry 00000012  080243b8  080243b8  000343b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
376 i.CalculateAttributeRequestParameters 00000058  080243ca  080243ca  000343ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
377 i.CalculateDataTypeLength 00000098  08024422  08024422  00034422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
378 i.CleanupSDPConnection 00000038  080244ba  080244ba  000344ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
379 i.CompareServiceRecordWithServiceList 00000202  080244f2  080244f2  000344f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
380 i.DeleteConnectionInfoEntryCID 00000014  080246f4  080246f4  000346f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
381 i.DispatchSDPConnectionEvent 00000026  08024708  08024708  00034708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
382 i.FormatResponsePDUHeaderAndSend 0000003a  0802472e  0802472e  0003472e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
383 i.FreeL2CAPConnectionInfoList 0000002e  08024768  08024768  00034768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
384 i.FreeServiceAttributeList 00000006  08024796  08024796  00034796  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
385 i.FreeServiceRecordList 00000028  0802479c  0802479c  0003479c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
386 i.GetNextServiceAttribute 00000088  080247c4  080247c4  000347c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
387 i.NormalizeUUID 000000d0  0802484c  0802484c  0003484c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
388 i.ParseAttributeIDList 000000ea  0802491c  0802491c  0003491c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
389 i.ParseRecordAttributes 0000014a  08024a06  08024a06  00034a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
390 i.ParseServiceSearchPattern 000000ce  08024b50  08024b50  00034b50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
391 i.ProcessConnectionError 00000064  08024c1e  08024c1e  00034c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
392 i.ProcessSDPConnectionRequest 0000008e  08024c82  08024c82  00034c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
393 i.ProcessServiceAttributeRequest 000001aa  08024d10  08024d10  00034d10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
394 i.ProcessServiceSearchAttributeRequest 0000025a  08024eba  08024eba  00034eba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
395 i.ProcessServiceSearchRequest 0000019c  08025114  08025114  00035114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
396 i.ReadDataElementSequenceLength 00000052  080252b0  080252b0  000352b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
397 i.SDP_Cleanup 00000044  08025302  08025302  00035302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
398 i.SDP_Initialize 000000a8  08025348  08025348  00035348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
399 i.SearchConnectionInfoEntry 00000014  080253f0  080253f0  000353f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
400 i.SearchServiceRecordEntry 00000014  08025404  08025404  00035404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
401 i.SendConnectionResponse 00000058  08025418  08025418  00035418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
402 i.ServiceAttributeListValid 00000012  08025470  08025470  00035470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
403 i.WriteAttributeRequestContinuationInformation 00000060  08025482  08025482  00035482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
404 i.WriteDataElementSequenceHeader 0000005a  080254e2  080254e2  000354e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
405 i.FreePortInformationEntryMemory 0000002a  0802553c  0802553c  0003553c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
406 i.FreePortInformationList 0000001c  08025566  08025566  00035566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
407 i.SPP_Cleanup 0000002a  08025582  08025582  00035582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
408 i.SPP_Initialize 00000088  080255ac  080255ac  000355ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
409 i.CleanupCertificateModule 00000002  08025634  08025634  00035634  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
410 i.GetAccess   00000022  08025636  08025636  00035636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
411 i.GetCertCurrentDate 00000004  08025658  08025658  00035658  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
412 i.GetCertLength 00000004  0802565c  0802565c  0003565c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
413 i.GetCertPtr  00000008  08025660  08025660  00035660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
414 i.InitializeCertificateModule 00000004  08025668  08025668  00035668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
415 i.AcquireDriverEntry 00000058  0802566c  0802566c  0003566c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
416 i.AddPacketQueueEntry 00000060  080256c4  080256c4  000356c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
417 i.DeletePacketQueueEntry 00000014  08025724  08025724  00035724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
418 i.DispatchDebugPacketCallbacks 0000001e  08025738  08025738  00035738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
419 i.FreeDriverStructureResources 00000034  08025758  08025758  00035758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
420 i.GetNextCallbackPacketID 00000014  0802578c  0802578c  0003578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
421 i.HCI_CancelPacket 00000074  080257a0  080257a0  000357a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
422 i.HCI_ChangeSCOConfiguration 00000060  08025814  08025814  00035814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
423 i.HCI_ChangeSCOConfigurationHandles 0000003c  08025874  08025874  00035874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
424 i.HCI_CloseDriver 000000bc  080258b0  080258b0  000358b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
425 i.HCI_DriverCallback 0000021c  0802596c  0802596c  0003596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
426 i.HCI_OpenDriver 000000d8  08025b88  08025b88  00035b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
427 i.HCI_ReconfigureDriver 0000006c  08025c60  08025c60  00035c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
428 i.HCI_RegisterACLDataCallback 0000000a  08025ccc  08025ccc  00035ccc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
429 i.HCI_RegisterEventCallback 0000000a  08025cd6  08025cd6  00035cd6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
430 i.HCI_RegisterSCODataCallback 0000000a  08025ce0  08025ce0  00035ce0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
431 i.HCI_SendPacket 000000b4  08025cec  08025cec  00035cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
432 i.HCI_UnRegisterCallback 00000070  08025da0  08025da0  00035da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
433 i.SearchDriverEntry 00000014  08025e10  08025e10  00035e10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
434 i.SendHCIPacketToLowerDriver 000000e8  08025e24  08025e24  00035e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
435 i.ChangeCommSCOConfiguration 00000030  08025f0c  08025f0c  00035f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
436 i.CleanupCOMMList 00000048  08025f3c  08025f3c  00035f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
437 i.CloseComm   00000044  08025f84  08025f84  00035f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 i.DeleteCOMEntry 00000014  08025fc8  08025fc8  00035fc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
439 i.FreeCOMStructureResources 00000040  08025fdc  08025fdc  00035fdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
440 i.HCITR_COMDataCallback_UART 000001e2  0802601c  0802601c  0003601c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
441 i.InitializeCOMMList 00000018  08026200  08026200  00036200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
442 i.InitializeProtocol 00000054  08026218  08026218  00036218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
443 i.OpenComm    00000108  0802626c  0802626c  0003626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
444 i.ProtocolEventCallback 00000214  08026374  08026374  00036374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
445 i.ProtocolTimerCallback 00000014  08026588  08026588  00036588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
446 i.ReconfigureComm 000000e4  0802659c  0802659c  0003659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
447 i.SearchCOMEntry 00000014  08026680  08026680  00036680  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
448 i.SendCommPacket 000000bc  08026694  08026694  00036694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
449 i.FreeTransmitBufferListHead 0000001e  08026750  08026750  00036750  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
450 i.HCILL_Initialize 00000050  0802676e  0802676e  0003676e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
451 i.HCILL_ReceiveBytes 0000009c  080267c0  080267c0  000367c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
452 i.HCILL_Reconfigure 0000003a  0802685c  0802685c  0003685c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
453 i.HCILL_Resynchronize 00000026  08026896  08026896  00036896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
454 i.HCILL_Shutdown 00000038  080268bc  080268bc  000368bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
455 i.HCILL_TransmitBytes 000000a0  080268f4  080268f4  000368f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
456 i.SendQueuedPackets 0000007c  08026994  08026994  00036994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
457 i.SendSleepIndication 00000020  08026a10  08026a10  00036a10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
458 i.TransmitData 00000040  08026a30  08026a30  00036a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
459 i.AcknowledgeTimerExpired 0000003e  08026a70  08026a70  00036a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
460 i.CalculateCRC 00000030  08026aae  08026aae  00036aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
461 i.CheckIdle   0000002c  08026ade  08026ade  00036ade  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
462 i.EncodeAndSend 0000008c  08026b0c  08026b0c  00036b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
463 i.FreeBufferListHead 0000001c  08026b98  08026b98  00036b98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
464 i.IdleTimerExpired 00000040  08026bb4  08026bb4  00036bb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
465 i.ParseConfigurationField 00000096  08026bf4  08026bf4  00036bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
466 i.ProcessReceivedPacket 00000178  08026c8a  08026c8a  00036c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
467 i.ProcessTWUARTMessage 000000e8  08026e04  08026e04  00036e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
468 i.RestartPacketizer 00000020  08026eec  08026eec  00036eec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
469 i.RetransmitTimerExpired 00000082  08026f0c  08026f0c  00036f0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
470 i.SendNullPacket 00000018  08026f8e  08026f8e  00036f8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
471 i.SendReliablePacket 00000082  08026fa6  08026fa6  00036fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
472 i.SendSLIPPacket 000000c8  08027028  08027028  00037028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
473 i.SendTWUARTMessage 0000005c  080270f0  080270f0  000370f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
474 i.SetTWUARTState 00000080  0802714c  0802714c  0003714c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
475 i.SetTWUARTTimer 00000054  080271cc  080271cc  000371cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
476 i.SetTransportConfiguration 00000026  08027220  08027220  00037220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
477 i.TWUART_Initialize 000000f0  08027248  08027248  00037248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
478 i.TWUART_ReceiveBytes 000001a0  08027338  08027338  00037338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
479 i.TWUART_Reconfigure 000000ae  080274d8  080274d8  000374d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
480 i.TWUART_Resynchronize 0000006e  08027586  08027586  00037586  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
481 i.TWUART_Shutdown 0000005c  080275f4  080275f4  000375f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
482 i.TWUART_TransmitBytes 000000bc  08027650  08027650  00037650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
483 i.ATT_PDU_Event 000002f8  0802770c  0802770c  0003770c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
484 i.AcquireGATTStackConnectionInformationByConnectionID 0000003e  08027a04  08027a04  00037a04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
485 i.AcquireGATTStackConnectionInformationByServerTransactionID 00000058  08027a44  08027a44  00037a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
486 i.AcquireGATTStackInformation 00000044  08027a9c  08027a9c  00037a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
487 i.AddDiscoveredServiceInfoEntry 00000018  08027ae0  08027ae0  00037ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
488 i.AddServiceInfoEntry 00000012  08027af8  08027af8  00037af8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
489 i.AddServiceInformation 000000da  08027b0a  08027b0a  00037b0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
490 i.AsynchronousCallback 00000090  08027be4  08027be4  00037be4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
491 i.BuildPacketByteTwoWordsVariable 0000003e  08027c74  08027c74  00037c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
492 i.BuildRecordTwoWordsVariable 00000076  08027cb2  08027cb2  00037cb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
493 i.CharacteristicDescriptorDiscoveryRequest 00000094  08027d28  08027d28  00037d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
494 i.CharacteristicDiscoveryRequest 00000024  08027dbc  08027dbc  00037dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
495 i.CharacteristicDiscoveryResponseEvent 000000b4  08027de0  08027de0  00037de0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
496 i.ClientRequestWithData 000000e0  08027e94  08027e94  00037e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
497 i.ClientRequestWithUUID 00000060  08027f74  08027f74  00037f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
498 i.CompareServiceToServiceList 00000038  08027fd4  08027fd4  00037fd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
499 i.CompareUUID 00000098  0802800c  0802800c  0003800c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
500 i.CreateNewConnectionCallbackInfoEntry 00000058  080280a4  080280a4  000380a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
501 i.CreateNewHandleInfoEntry 00000044  080280fc  080280fc  000380fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
502 i.CreateNewTransactionInfoEntry 00000078  08028140  08028140  00038140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
503 i.DeleteFreeTransactionInfoEntry 00000014  080281b8  080281b8  000381b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
504 i.DeleteGATTContextInfoEntry 00000014  080281cc  080281cc  000381cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 i.DeleteHandleInfoEntryByEntryPointer 00000010  080281e0  080281e0  000381e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
506 i.DeleteServiceDiscoveryInfoEntry 00000014  080281f0  080281f0  000381f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
507 i.DeleteTransactionInfoEntry 00000014  08028204  08028204  00038204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
508 i.DeleteTransactionInfoEntryByTimerID 00000014  08028218  08028218  00038218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
509 i.DetermineClientRequestStatus 00000022  0802822c  0802822c  0003822c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
510 i.DiscoverAllCharactisticDescriptorsResponseEvent 000000aa  0802824e  0802824e  0003824e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
511 i.DiscoverAllPrimaryServicesResponseEvent 000000ac  080282f8  080282f8  000382f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
512 i.DispatchClientRequestErrorEvent 00000048  080283a4  080283a4  000383a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 i.DispatchConnectionEvent 0000003c  080283ec  080283ec  000383ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
514 i.DispatchServerConfirmationEvent 00000032  08028428  08028428  00038428  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
515 i.DispatchServerReadRequestEvent 0000007a  0802845a  0802845a  0003845a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
516 i.DispatchServerWriteRequestEvent 0000007c  080284d4  080284d4  000384d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
517 i.ExchangeMtuRequestEvent 00000070  08028550  08028550  00038550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
518 i.ExchangeMtuRequestResponseEvent 00000052  080285c0  080285c0  000385c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
519 i.ExecuteWriteConfirmationEventHandler 000000d2  08028612  08028612  00038612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
520 i.ExecuteWriteRequestEvent 00000088  080286e4  080286e4  000386e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
521 i.ExecuteWriteRequestEventHandler 000000d8  0802876c  0802876c  0003876c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 i.ExecuteWriteRequestResponse 000000ac  08028844  08028844  00038844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
523 i.FindIncludedServicesResponseEvent 000000ae  080288f0  080288f0  000388f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
524 i.FormatAndDispatchConnectionEvent 000000a4  0802899e  0802899e  0003899e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
525 i.FormatAndDispatchDiscoveryCallback 00000170  08028a42  08028a42  00038a42  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
526 i.FormatAndDispatchDiscoveryCompleteCallback 0000003a  08028bb2  08028bb2  00038bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
527 i.FormatClientEventInteger 00000034  08028bec  08028bec  00038bec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
528 i.FormatClientEventWordPointer 00000040  08028c20  08028c20  00038c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
529 i.FormatConnectionEventWord 0000003e  08028c60  08028c60  00038c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
530 i.FormatContextPduHeader 00000024  08028c9e  08028c9e  00038c9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
531 i.FormatServerEventIntegerByte 0000004a  08028cc2  08028cc2  00038cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
532 i.FormatServerEventIntegerThreeWordsPointer 0000004a  08028d0c  08028d0c  00038d0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
533 i.FormatTwoIntegersAddress 0000001a  08028d56  08028d56  00038d56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
534 i.FreeConnectionInfoEntryMemory 00000026  08028d70  08028d70  00038d70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
535 i.FreeDiscoveredServiceInfoEntryMemory 00000062  08028d96  08028d96  00038d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
536 i.FreeGATTContextInfoEntryMemory 0000006e  08028df8  08028df8  00038df8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
537 i.FreeServiceDiscoveryInfoEntryMemory 00000042  08028e66  08028e66  00038e66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
538 i.FreeTransactionInfoEntryMemory 00000024  08028ea8  08028ea8  00038ea8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
539 i.FreeTransactionInfoList 00000016  08028ecc  08028ecc  00038ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
540 i.GATTErrorResponsePDU 00000030  08028ee2  08028ee2  00038ee2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
541 i.GATT_Cancel_Transaction 00000070  08028f14  08028f14  00038f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
542 i.GATT_Cleanup 0000005c  08028f84  08028f84  00038f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
543 i.GATT_ClientEventCallback 000003ec  08028fe0  08028fe0  00038fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
544 i.GATT_Discover_Characteristic_Descriptors 0000002c  080293cc  080293cc  000393cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
545 i.GATT_Discover_Characteristics 00000040  080293f8  080293f8  000393f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
546 i.GATT_Discover_Included_Services 00000040  08029438  08029438  00039438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
547 i.GATT_Discover_Services 0000003c  08029478  08029478  00039478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
548 i.GATT_Error_Response 000000b4  080294b4  080294b4  000394b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
549 i.GATT_Exchange_MTU_Request 00000080  08029568  08029568  00039568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
550 i.GATT_Handle_Value_Notification 00000090  080295e8  080295e8  000395e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
551 i.GATT_Initialize 00000148  08029678  08029678  00039678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
552 i.GATT_Query_Connection_MTU 00000030  080297c0  080297c0  000397c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
553 i.GATT_Read_Response 000000d4  080297f0  080297f0  000397f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
554 i.GATT_Read_Value_Request 0000002c  080298c4  080298c4  000398c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
555 i.GATT_Register_Service 000000d0  080298f0  080298f0  000398f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
556 i.GATT_Request_Timeout 00000088  080299c0  080299c0  000399c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
557 i.GATT_ServerEventCallback 00000002  08029a48  08029a48  00039a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
558 i.GATT_Start_Service_Discovery 00000024  08029a4c  08029a4c  00039a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
559 i.GATT_Un_Register_Service 000000a2  08029a70  08029a70  00039a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
560 i.GATT_Write_Request 0000002c  08029b14  08029b14  00039b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
561 i.GATT_Write_Response 0000009c  08029b40  08029b40  00039b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
562 i.GenericReadRequestEvent 000000ba  08029bdc  08029bdc  00039bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
563 i.GenericWriteRequestEvent 000000ce  08029c96  08029c96  00039c96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
564 i.GetNextCharacteristicDiscoveryService 00000082  08029d64  08029d64  00039d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
565 i.GetNextConnectionInfoEntry 0000000a  08029de6  08029de6  00039de6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
566 i.GetNextHandleInfoEntry 0000000a  08029df0  08029df0  00039df0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
567 i.GetNextServiceInfoEntry 0000000a  08029dfa  08029dfa  00039dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
568 i.GetNextTransactionInfoEntry 0000000a  08029e04  08029e04  00039e04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
569 i.GetServiceUUID 00000046  08029e0e  08029e0e  00039e0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
570 i.HandleReadRequestEvent 000001b0  08029e54  08029e54  00039e54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
571 i.IncludeDiscoveryRequest 00000024  0802a004  0802a004  0003a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
572 i.IndicationEvent 00000078  0802a028  0802a028  0003a028  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
573 i.InitializeGATTModule 00000018  0802a0a0  0802a0a0  0003a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
574 i.L2CAPSendPDU 00000048  0802a0b8  0802a0b8  0003a0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
575 i.ObtainOutstandingClientTransaction 0000001e  0802a100  0802a100  0003a100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
576 i.PrepareWriteRequestResponse 000000a8  0802a120  0802a120  0003a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
577 i.PreprareWriteRequestEvent 0000010a  0802a1c8  0802a1c8  0003a1c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
578 i.ReadAttributeTypeUUID 0000006a  0802a2d2  0802a2d2  0003a2d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
579 i.ReadByUUIDRequestEvent 00000240  0802a33c  0802a33c  0003a33c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 i.ReadByUUIDRequestResponse 00000124  0802a57c  0802a57c  0003a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
581 i.ReadMultipleRequestEvent 00000080  0802a6a0  0802a6a0  0003a6a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
582 i.ReadMultipleRequestResponse 000000ac  0802a720  0802a720  0003a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 i.ReadResponseEvent 00000010  0802a7cc  0802a7cc  0003a7cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
584 i.ReadResponseEventHandler 00000034  0802a7dc  0802a7dc  0003a7dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
585 i.ScheduleAsynchronousDispatch 0000005c  0802a810  0802a810  0003a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
586 i.SearchCharacteristicInfoEntry 00000014  0802a86c  0802a86c  0003a86c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
587 i.SearchConnectionInfoEntryByBD_ADDR 00000044  0802a880  0802a880  0003a880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
588 i.SearchGATTContextInfoEntry 00000014  0802a8c4  0802a8c4  0003a8c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
589 i.SearchHandleInfoEntry 00000014  0802a8d8  0802a8d8  0003a8d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
590 i.SearchServiceDiscoveryInfoEntry 00000014  0802a8ec  0802a8ec  0003a8ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
591 i.SearchServiceHandleInfoEntry 00000014  0802a900  0802a900  0003a900  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
592 i.SearchServiceInfoEntry 00000014  0802a914  0802a914  0003a914  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
593 i.SearchServiceInfoEntryByHandle 00000020  0802a928  0802a928  0003a928  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
594 i.SearchTransactionInfoEntry 00000014  0802a948  0802a948  0003a948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
595 i.SearchTransactionInfoEntryByType 00000012  0802a95c  0802a95c  0003a95c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
596 i.SendNextQueuedClientRequest 00000034  0802a96e  0802a96e  0003a96e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
597 i.SendNextQueuedServerIndication 00000030  0802a9a2  0802a9a2  0003a9a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
598 i.ServiceDiscoveryStateMachine 000000a2  0802a9d2  0802a9d2  0003a9d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
599 i.SignedWriteCommandEvent 000000a8  0802aa74  0802aa74  0003aa74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
600 i.StartServiceDiscovery 00000104  0802ab1c  0802ab1c  0003ab1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
601 i.StartTimerAndSendPDU 00000058  0802ac20  0802ac20  0003ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
602 i.ValidateServiceArray 00000080  0802ac78  0802ac78  0003ac78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
603 i.ValidateServiceConnectionType 0000001e  0802acf8  0802acf8  0003acf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
604 i.VerifyNoOutstandingServerRequests 00000030  0802ad16  0802ad16  0003ad16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
605 i.WriteRequestEvent 00000062  0802ad46  0802ad46  0003ad46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
606 i.WriteResponseEvent 0000002a  0802ada8  0802ada8  0003ada8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
607 .rodata       0000e91c  0802add8  0802add8  0003add8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
608 .constdata    00000138  080396f4  080396f4  000496f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
609 .ARM.extab    00000000  0803982c  0803982c  00050a60  2**0
                  CONTENTS
610 .ARM          00000008  0803982c  0803982c  0004982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
611 .preinit_array 00000000  08039834  08039834  00050a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
612 .init_array   00000008  08039834  08039834  00049834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
613 .fini_array   00000004  0803983c  0803983c  0004983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
614 .data         00000a60  20000000  08039840  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
615 .bss          000183fc  20000a60  0803a2a0  00050a60  2**3
                  ALLOC
616 ._user_heap_stack 00000c04  20018e5c  0803a2a0  00058e5c  2**0
                  ALLOC
617 .ARM.attributes 00000034  00000000  00000000  00050a60  2**0
                  CONTENTS, READONLY
618 .debug_info   000781b8  00000000  00000000  00050a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
619 .debug_abbrev 0000c22a  00000000  00000000  000c8c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
620 .debug_loc    0003de0c  00000000  00000000  000d4e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
621 .debug_aranges 000039b8  00000000  00000000  00112c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
622 .debug_ranges 00003858  00000000  00000000  00116640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
623 .debug_macro  000475fb  00000000  00000000  00119e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
624 .debug_line   00062ca7  00000000  00000000  00161493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
625 .debug_str    001aa089  00000000  00000000  001c413a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
626 .comment      00007e47  00000000  00000000  0036e1c3  2**0
                  CONTENTS, READONLY
627 .arm_vfe_header 00000048  00000000  00000000  0037600c  2**2
                  CONTENTS, READONLY
628 .debug_frame  000397d0  00000000  00000000  00376054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000a60 	.word	0x20000a60
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018924 	.word	0x08018924

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000a64 	.word	0x20000a64
 80001fc:	08018924 	.word	0x08018924

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <InstanceRegisteredByStackID>:
static Boolean_t InstanceRegisteredByStackID(unsigned int BluetoothStackID)
{
   Boolean_t    ret_val = FALSE;
   unsigned int Index;

   for(Index=0;Index<DIS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	b10b      	cbz	r3, 8000ed8 <InstanceRegisteredByStackID+0x8>
   Boolean_t    ret_val = FALSE;
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	4770      	bx	lr
   {
      if((InstanceList[Index].BluetoothStackID == BluetoothStackID) && (InstanceList[Index].ServiceID))
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <InstanceRegisteredByStackID+0x28>)
 8000eda:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	d001      	beq.n	8000ee6 <InstanceRegisteredByStackID+0x16>
   for(Index=0;Index<DIS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	e7f5      	b.n	8000ed2 <InstanceRegisteredByStackID+0x2>
      if((InstanceList[Index].BluetoothStackID == BluetoothStackID) && (InstanceList[Index].ServiceID))
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <InstanceRegisteredByStackID+0x28>)
 8000ee8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000eec:	6852      	ldr	r2, [r2, #4]
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	d0f7      	beq.n	8000ee2 <InstanceRegisteredByStackID+0x12>
      {
         ret_val = TRUE;
 8000ef2:	2001      	movs	r0, #1
      }
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000cc0 	.word	0x20000cc0

08000efc <AcquireServiceInstance>:
   /* * NOTE * Since this is an internal function no check is done on   */
   /*          the input parameters.                                    */
   /* * NOTE * If InstanceID is set to 0, this function will return the */
   /*          next free instance.                                      */
static DISServerInstance_t *AcquireServiceInstance(unsigned int BluetoothStackID, unsigned int *InstanceID)
{
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4604      	mov	r4, r0
 8000f00:	460e      	mov	r6, r1
   unsigned int          Index;
   DISServerInstance_t *ret_val = NULL;

   /* Lock the Bluetooth Stack to gain exclusive access to this         */
   /* Bluetooth Protocol Stack.                                         */
   if(!BSC_LockBluetoothStack(BluetoothStackID))
 8000f02:	f018 f8b9 	bl	8019078 <BSC_LockBluetoothStack>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d139      	bne.n	8000f7e <AcquireServiceInstance+0x82>
   {
      /* Acquire the BSC List Lock while we are searching the instance  */
      /* list.                                                          */
      if(BSC_AcquireListLock())
 8000f0a:	f017 fd8f 	bl	8018a2c <BSC_AcquireListLock>
 8000f0e:	b388      	cbz	r0, 8000f74 <AcquireServiceInstance+0x78>
      {
         /* Store a copy of the passed in InstanceID locally.           */
         LocalInstanceID = *InstanceID;
 8000f10:	6835      	ldr	r5, [r6, #0]

         /* Verify that the Instance ID is valid.                       */
         if((LocalInstanceID) && (LocalInstanceID <= DIS_MAXIMUM_SUPPORTED_INSTANCES))
 8000f12:	2d01      	cmp	r5, #1
 8000f14:	d006      	beq.n	8000f24 <AcquireServiceInstance+0x28>
         }
         else
         {
            /* Verify that we have been requested to find the next free */
            /* instance.                                                */
            if(!LocalInstanceID)
 8000f16:	b9e5      	cbnz	r5, 8000f52 <AcquireServiceInstance+0x56>
            {
               /* Try to find a free instance.                          */
               for(Index=0;Index<DIS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8000f18:	b1fd      	cbz	r5, 8000f5a <AcquireServiceInstance+0x5e>
   DISServerInstance_t *ret_val = NULL;
 8000f1a:	2500      	movs	r5, #0
               }
            }
         }

         /* Release the previously acquired list lock.                  */
         BSC_ReleaseListLock();
 8000f1c:	f018 f8ea 	bl	80190f4 <BSC_ReleaseListLock>
      }

      /* If we failed to acquire the instance then we should un-lock the*/
      /* previously acquired Bluetooth Stack.                           */
      if(!ret_val)
 8000f20:	bb75      	cbnz	r5, 8000f80 <AcquireServiceInstance+0x84>
 8000f22:	e028      	b.n	8000f76 <AcquireServiceInstance+0x7a>
            --LocalInstanceID;
 8000f24:	1e6b      	subs	r3, r5, #1
            if((InstanceList[LocalInstanceID].BluetoothStackID == BluetoothStackID) && (InstanceList[LocalInstanceID].ServiceID))
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <AcquireServiceInstance+0x88>)
 8000f28:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000f2c:	42a2      	cmp	r2, r4
 8000f2e:	d108      	bne.n	8000f42 <AcquireServiceInstance+0x46>
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <AcquireServiceInstance+0x88>)
 8000f32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000f36:	6852      	ldr	r2, [r2, #4]
 8000f38:	b13a      	cbz	r2, 8000f4a <AcquireServiceInstance+0x4e>
               ret_val = &InstanceList[LocalInstanceID];
 8000f3a:	4d12      	ldr	r5, [pc, #72]	; (8000f84 <AcquireServiceInstance+0x88>)
 8000f3c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8000f40:	e7ec      	b.n	8000f1c <AcquireServiceInstance+0x20>
         BSC_ReleaseListLock();
 8000f42:	f018 f8d7 	bl	80190f4 <BSC_ReleaseListLock>
   DISServerInstance_t *ret_val = NULL;
 8000f46:	2500      	movs	r5, #0
 8000f48:	e015      	b.n	8000f76 <AcquireServiceInstance+0x7a>
         BSC_ReleaseListLock();
 8000f4a:	f018 f8d3 	bl	80190f4 <BSC_ReleaseListLock>
   DISServerInstance_t *ret_val = NULL;
 8000f4e:	2500      	movs	r5, #0
 8000f50:	e011      	b.n	8000f76 <AcquireServiceInstance+0x7a>
         BSC_ReleaseListLock();
 8000f52:	f018 f8cf 	bl	80190f4 <BSC_ReleaseListLock>
   DISServerInstance_t *ret_val = NULL;
 8000f56:	2500      	movs	r5, #0
 8000f58:	e00d      	b.n	8000f76 <AcquireServiceInstance+0x7a>
                  if(!(InstanceList[Index].ServiceID))
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <AcquireServiceInstance+0x88>)
 8000f5c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	b10b      	cbz	r3, 8000f68 <AcquireServiceInstance+0x6c>
               for(Index=0;Index<DIS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8000f64:	3501      	adds	r5, #1
 8000f66:	e7d7      	b.n	8000f18 <AcquireServiceInstance+0x1c>
                     *InstanceID = Index+1;
 8000f68:	1c6b      	adds	r3, r5, #1
 8000f6a:	6033      	str	r3, [r6, #0]
                     ret_val     = &InstanceList[Index];
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <AcquireServiceInstance+0x88>)
 8000f6e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
                     break;
 8000f72:	e7d3      	b.n	8000f1c <AcquireServiceInstance+0x20>
   DISServerInstance_t *ret_val = NULL;
 8000f74:	2500      	movs	r5, #0
         BSC_UnLockBluetoothStack(BluetoothStackID);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f018 f9e4 	bl	8019344 <BSC_UnLockBluetoothStack>
 8000f7c:	e000      	b.n	8000f80 <AcquireServiceInstance+0x84>
   DISServerInstance_t *ret_val = NULL;
 8000f7e:	2500      	movs	r5, #0
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8000f80:	4628      	mov	r0, r5
 8000f82:	bd70      	pop	{r4, r5, r6, pc}
 8000f84:	20000cc0 	.word	0x20000cc0

08000f88 <DISRegisterService>:

   /* The following function is a utility function which is used to     */
   /* register an DIS Service.  This function returns the positive,     */
   /* non-zero, Instance ID on success or a negative error code.        */
static int DISRegisterService(unsigned int BluetoothStackID, unsigned int *ServiceID, GATT_Attribute_Handle_Group_t *ServiceHandleRange)
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b087      	sub	sp, #28
   int                  ret_val;
   unsigned int         InstanceID;
   DISServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (ServiceID))
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d043      	beq.n	8001018 <DISRegisterService+0x90>
 8000f90:	460e      	mov	r6, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	4605      	mov	r5, r0
 8000f96:	2900      	cmp	r1, #0
 8000f98:	d040      	beq.n	800101c <DISRegisterService+0x94>
   {
      /* Verify that no instance is registered to this Bluetooth Stack. */
      if(!InstanceRegisteredByStackID(BluetoothStackID))
 8000f9a:	f7ff ff99 	bl	8000ed0 <InstanceRegisteredByStackID>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d13e      	bne.n	8001020 <DISRegisterService+0x98>
      {
         /* Acquire a free DIS Instance.                                */
         InstanceID = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9305      	str	r3, [sp, #20]
         if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8000fa6:	a905      	add	r1, sp, #20
 8000fa8:	4628      	mov	r0, r5
 8000faa:	f7ff ffa7 	bl	8000efc <AcquireServiceInstance>
 8000fae:	4607      	mov	r7, r0
 8000fb0:	2800      	cmp	r0, #0
 8000fb2:	d037      	beq.n	8001024 <DISRegisterService+0x9c>
         {
            /* Call GATT to register the DIS service.                   */
            ret_val = GATT_Register_Service(BluetoothStackID, DIS_SERVICE_FLAGS, DEVICE_INFORMATION_SERVICE_ATTRIBUTE_COUNT, (GATT_Service_Attribute_Entry_t *)Device_Information_Service, ServiceHandleRange, GATT_ServerEventCallback, InstanceID);
 8000fb4:	9b05      	ldr	r3, [sp, #20]
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <DISRegisterService+0xa4>)
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	9400      	str	r4, [sp, #0]
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <DISRegisterService+0xa8>)
 8000fc0:	2213      	movs	r2, #19
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	4628      	mov	r0, r5
 8000fc6:	f028 fc93 	bl	80298f0 <GATT_Register_Service>
            if(ret_val > 0)
 8000fca:	1e04      	subs	r4, r0, #0
 8000fcc:	dc05      	bgt.n	8000fda <DISRegisterService+0x52>
               /* Return the DIS Instance ID.                           */
               ret_val = (int)InstanceID;
            }

            /* UnLock the previously locked Bluetooth Stack.            */
            BSC_UnLockBluetoothStack(BluetoothStackID);
 8000fce:	4628      	mov	r0, r5
 8000fd0:	f018 f9b8 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = DIS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	b007      	add	sp, #28
 8000fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
               ServiceInstance->BluetoothStackID = BluetoothStackID;
 8000fda:	603d      	str	r5, [r7, #0]
               ServiceInstance->ServiceID        = (unsigned int)ret_val;
 8000fdc:	607c      	str	r4, [r7, #4]
               *ServiceID                        = (unsigned int)ret_val;
 8000fde:	6034      	str	r4, [r6, #0]
               BTPS_MemInitialize(&InstanceData[InstanceID-1], 0, DIS_INSTANCE_DATA_SIZE);
 8000fe0:	9805      	ldr	r0, [sp, #20]
 8000fe2:	3801      	subs	r0, #1
 8000fe4:	4f13      	ldr	r7, [pc, #76]	; (8001034 <DISRegisterService+0xac>)
 8000fe6:	2658      	movs	r6, #88	; 0x58
 8000fe8:	4632      	mov	r2, r6
 8000fea:	2100      	movs	r1, #0
 8000fec:	fb06 7000 	mla	r0, r6, r0, r7
 8000ff0:	f012 fa65 	bl	80134be <BTPS_MemInitialize>
               InstanceData[InstanceID-1].System_ID.Characteristic_Length = DIS_SYSTEM_ID_VALUE_DATA_SIZE;
 8000ff4:	9c05      	ldr	r4, [sp, #20]
 8000ff6:	1e63      	subs	r3, r4, #1
 8000ff8:	fb06 f603 	mul.w	r6, r6, r3
 8000ffc:	19bb      	adds	r3, r7, r6
 8000ffe:	2208      	movs	r2, #8
 8001000:	861a      	strh	r2, [r3, #48]	; 0x30
               InstanceData[InstanceID-1].System_ID.Data                  = InstanceData[InstanceID-1].System_ID_Buffer;
 8001002:	f106 0238 	add.w	r2, r6, #56	; 0x38
 8001006:	443a      	add	r2, r7
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
               InstanceData[InstanceID-1].PNP_ID.Characteristic_Length  = DIS_PNP_ID_VALUE_DATA_SIZE;
 800100a:	2207      	movs	r2, #7
 800100c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
               InstanceData[InstanceID-1].PNP_ID.Data                   = (Byte_t *)&(InstanceData[InstanceID-1].PNP_ID_Buffer);
 8001010:	3650      	adds	r6, #80	; 0x50
 8001012:	443e      	add	r6, r7
 8001014:	64de      	str	r6, [r3, #76]	; 0x4c
               ret_val = (int)InstanceID;
 8001016:	e7da      	b.n	8000fce <DISRegisterService+0x46>
      ret_val = DIS_ERROR_INVALID_PARAMETER;
 8001018:	4c07      	ldr	r4, [pc, #28]	; (8001038 <DISRegisterService+0xb0>)
 800101a:	e7db      	b.n	8000fd4 <DISRegisterService+0x4c>
 800101c:	4c06      	ldr	r4, [pc, #24]	; (8001038 <DISRegisterService+0xb0>)
 800101e:	e7d9      	b.n	8000fd4 <DISRegisterService+0x4c>
         ret_val = DIS_ERROR_SERVICE_ALREADY_REGISTERED;
 8001020:	4c06      	ldr	r4, [pc, #24]	; (800103c <DISRegisterService+0xb4>)
 8001022:	e7d7      	b.n	8000fd4 <DISRegisterService+0x4c>
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;
 8001024:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
   return(ret_val);
 8001028:	e7d4      	b.n	8000fd4 <DISRegisterService+0x4c>
 800102a:	bf00      	nop
 800102c:	08001041 	.word	0x08001041
 8001030:	0802ae70 	.word	0x0802ae70
 8001034:	20000c68 	.word	0x20000c68
 8001038:	fffffc18 	.word	0xfffffc18
 800103c:	fffffc15 	.word	0xfffffc15

08001040 <GATT_ServerEventCallback>:
   unsigned int              InstanceID;
   DISServerInstance_t      *ServiceInstance;
   DISCharacteristicValue_t *CharacteristicValue;

   /* Verify that all parameters to this callback are Semi-Valid.       */
   if((BluetoothStackID) && (GATT_ServerEventData) && (CallbackParameter))
 8001040:	2800      	cmp	r0, #0
 8001042:	d03b      	beq.n	80010bc <GATT_ServerEventCallback+0x7c>
{
 8001044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001046:	b083      	sub	sp, #12
 8001048:	460c      	mov	r4, r1
 800104a:	4605      	mov	r5, r0
   if((BluetoothStackID) && (GATT_ServerEventData) && (CallbackParameter))
 800104c:	b101      	cbz	r1, 8001050 <GATT_ServerEventCallback+0x10>
 800104e:	b90a      	cbnz	r2, 8001054 <GATT_ServerEventCallback+0x14>

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
      }
   }
}
 8001050:	b003      	add	sp, #12
 8001052:	bdf0      	pop	{r4, r5, r6, r7, pc}
      InstanceID = (unsigned int)CallbackParameter;
 8001054:	9201      	str	r2, [sp, #4]
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8001056:	a901      	add	r1, sp, #4
 8001058:	f7ff ff50 	bl	8000efc <AcquireServiceInstance>
 800105c:	4606      	mov	r6, r0
 800105e:	2800      	cmp	r0, #0
 8001060:	d0f6      	beq.n	8001050 <GATT_ServerEventCallback+0x10>
         switch(GATT_ServerEventData->Event_Data_Type)
 8001062:	7823      	ldrb	r3, [r4, #0]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d003      	beq.n	8001070 <GATT_ServerEventCallback+0x30>
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 8001068:	6830      	ldr	r0, [r6, #0]
 800106a:	f018 f96b 	bl	8019344 <BSC_UnLockBluetoothStack>
}
 800106e:	e7ef      	b.n	8001050 <GATT_ServerEventCallback+0x10>
               if(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data)
 8001070:	6860      	ldr	r0, [r4, #4]
 8001072:	2800      	cmp	r0, #0
 8001074:	d0f8      	beq.n	8001068 <GATT_ServerEventCallback+0x28>
                  AttributeOffset = GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeOffset;
 8001076:	8a82      	ldrh	r2, [r0, #20]
                  TransactionID   = GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->TransactionID;
 8001078:	6841      	ldr	r1, [r0, #4]
                  InstanceTag         = (Word_t)(((GATT_Characteristic_Value_16_Entry_t *)Device_Information_Service[AttributeOffset].Attribute_Value)->Characteristic_Value_Length);
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <GATT_ServerEventCallback+0x80>)
 800107c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001080:	685c      	ldr	r4, [r3, #4]
                  CharacteristicValue = (DISCharacteristicValue_t *)&(((Byte_t *)(&InstanceData[InstanceID-1]))[InstanceTag]);
 8001082:	9b01      	ldr	r3, [sp, #4]
 8001084:	3b01      	subs	r3, #1
 8001086:	4f0f      	ldr	r7, [pc, #60]	; (80010c4 <GATT_ServerEventCallback+0x84>)
 8001088:	f04f 0c58 	mov.w	ip, #88	; 0x58
 800108c:	fb0c 7303 	mla	r3, ip, r3, r7
 8001090:	88a4      	ldrh	r4, [r4, #4]
 8001092:	191f      	adds	r7, r3, r4
                  if(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset <= CharacteristicValue->Characteristic_Length)
 8001094:	8ac0      	ldrh	r0, [r0, #22]
 8001096:	5b1b      	ldrh	r3, [r3, r4]
 8001098:	4298      	cmp	r0, r3
 800109a:	d80a      	bhi.n	80010b2 <GATT_ServerEventCallback+0x72>
                     ValueLength = (Word_t)(CharacteristicValue->Characteristic_Length - GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset);
 800109c:	1a1b      	subs	r3, r3, r0
 800109e:	b29a      	uxth	r2, r3
                     if(CharacteristicValue->Data)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b123      	cbz	r3, 80010ae <GATT_ServerEventCallback+0x6e>
                        Value = &(CharacteristicValue->Data[GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset]);
 80010a4:	4403      	add	r3, r0
                     GATT_Read_Response(BluetoothStackID, TransactionID, (unsigned int)ValueLength, Value);
 80010a6:	4628      	mov	r0, r5
 80010a8:	f028 fba2 	bl	80297f0 <GATT_Read_Response>
 80010ac:	e7dc      	b.n	8001068 <GATT_ServerEventCallback+0x28>
                        ValueLength = 0;
 80010ae:	2200      	movs	r2, #0
 80010b0:	e7f9      	b.n	80010a6 <GATT_ServerEventCallback+0x66>
                     GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_INVALID_OFFSET);
 80010b2:	2307      	movs	r3, #7
 80010b4:	4628      	mov	r0, r5
 80010b6:	f028 f9fd 	bl	80294b4 <GATT_Error_Response>
 80010ba:	e7d5      	b.n	8001068 <GATT_ServerEventCallback+0x28>
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	0802ae70 	.word	0x0802ae70
 80010c4:	20000c68 	.word	0x20000c68

080010c8 <DIS_Initialize_Service>:
   /* returns the positive, non-zero, Instance ID or a negative error   */
   /* code.                                                             */
   /* * NOTE * Only 1 DIS Server may be open at a time, per Bluetooth   */
   /*          Stack ID.                                                */
int BTPSAPI DIS_Initialize_Service(unsigned int BluetoothStackID, unsigned int *ServiceID)
{
 80010c8:	b500      	push	{lr}
 80010ca:	b083      	sub	sp, #12
  GATT_Attribute_Handle_Group_t ServiceHandleRange;

    /* Initialize the Service Handle Group to 0.                        */
   ServiceHandleRange.Starting_Handle = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8ad 3004 	strh.w	r3, [sp, #4]
   ServiceHandleRange.Ending_Handle   = 0;
 80010d2:	f8ad 3006 	strh.w	r3, [sp, #6]

   return(DISRegisterService(BluetoothStackID, ServiceID, &ServiceHandleRange));
 80010d6:	aa01      	add	r2, sp, #4
 80010d8:	f7ff ff56 	bl	8000f88 <DISRegisterService>
}
 80010dc:	b003      	add	sp, #12
 80010de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080010e4 <DIS_Cleanup_Service>:
   /* close the server.  The second parameter is the InstanceID that was*/
   /* returned from a successfull call to DIS_Initialize_Service().     */
   /* This function returns a zero if successful or a negative return   */
   /* error code if an error occurs.                                    */
int BTPSAPI DIS_Cleanup_Service(unsigned int BluetoothStackID, unsigned int InstanceID)
{
 80010e4:	b530      	push	{r4, r5, lr}
 80010e6:	b083      	sub	sp, #12
 80010e8:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   DISServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID))
 80010ea:	2800      	cmp	r0, #0
 80010ec:	d066      	beq.n	80011bc <DIS_Cleanup_Service+0xd8>
 80010ee:	4604      	mov	r4, r0
 80010f0:	2900      	cmp	r1, #0
 80010f2:	d065      	beq.n	80011c0 <DIS_Cleanup_Service+0xdc>
   {
      /* Acquire the specified DIS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 80010f4:	a901      	add	r1, sp, #4
 80010f6:	f7ff ff01 	bl	8000efc <AcquireServiceInstance>
 80010fa:	4605      	mov	r5, r0
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d061      	beq.n	80011c4 <DIS_Cleanup_Service+0xe0>
      {
         /* Verify that the service is actually registered.             */
         if(ServiceInstance->ServiceID)
 8001100:	6841      	ldr	r1, [r0, #4]
 8001102:	b931      	cbnz	r1, 8001112 <DIS_Cleanup_Service+0x2e>

            /* return success to the caller.                            */
            ret_val = 0;
         }
         else
            ret_val = DIS_ERROR_INVALID_PARAMETER;
 8001104:	4d30      	ldr	r5, [pc, #192]	; (80011c8 <DIS_Cleanup_Service+0xe4>)

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(BluetoothStackID);
 8001106:	4620      	mov	r0, r4
 8001108:	f018 f91c 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = DIS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 800110c:	4628      	mov	r0, r5
 800110e:	b003      	add	sp, #12
 8001110:	bd30      	pop	{r4, r5, pc}
            GATT_Un_Register_Service(BluetoothStackID, ServiceInstance->ServiceID);
 8001112:	4620      	mov	r0, r4
 8001114:	f028 fcac 	bl	8029a70 <GATT_Un_Register_Service>
            if(InstanceData[InstanceID-1].Manufacturer_Name.Data)
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	4a2b      	ldr	r2, [pc, #172]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 800111e:	2158      	movs	r1, #88	; 0x58
 8001120:	fb01 2303 	mla	r3, r1, r3, r2
 8001124:	6858      	ldr	r0, [r3, #4]
 8001126:	b108      	cbz	r0, 800112c <DIS_Cleanup_Service+0x48>
               BTPS_FreeMemory(InstanceData[InstanceID-1].Manufacturer_Name.Data);
 8001128:	f012 f962 	bl	80133f0 <BTPS_FreeMemory>
            if(InstanceData[InstanceID-1].Model_Number.Data)
 800112c:	9b01      	ldr	r3, [sp, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 8001132:	2158      	movs	r1, #88	; 0x58
 8001134:	fb01 2303 	mla	r3, r1, r3, r2
 8001138:	68d8      	ldr	r0, [r3, #12]
 800113a:	b108      	cbz	r0, 8001140 <DIS_Cleanup_Service+0x5c>
               BTPS_FreeMemory(InstanceData[InstanceID-1].Model_Number.Data);
 800113c:	f012 f958 	bl	80133f0 <BTPS_FreeMemory>
            if(InstanceData[InstanceID-1].Serial_Number.Data)
 8001140:	9b01      	ldr	r3, [sp, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	4a21      	ldr	r2, [pc, #132]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 8001146:	2158      	movs	r1, #88	; 0x58
 8001148:	fb01 2303 	mla	r3, r1, r3, r2
 800114c:	6958      	ldr	r0, [r3, #20]
 800114e:	b108      	cbz	r0, 8001154 <DIS_Cleanup_Service+0x70>
               BTPS_FreeMemory(InstanceData[InstanceID-1].Serial_Number.Data);
 8001150:	f012 f94e 	bl	80133f0 <BTPS_FreeMemory>
            if(InstanceData[InstanceID-1].Hardware_Revision.Data)
 8001154:	9b01      	ldr	r3, [sp, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 800115a:	2158      	movs	r1, #88	; 0x58
 800115c:	fb01 2303 	mla	r3, r1, r3, r2
 8001160:	69d8      	ldr	r0, [r3, #28]
 8001162:	b108      	cbz	r0, 8001168 <DIS_Cleanup_Service+0x84>
               BTPS_FreeMemory(InstanceData[InstanceID-1].Hardware_Revision.Data);
 8001164:	f012 f944 	bl	80133f0 <BTPS_FreeMemory>
            if(InstanceData[InstanceID-1].Firmware_Revision.Data)
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 800116e:	2158      	movs	r1, #88	; 0x58
 8001170:	fb01 2303 	mla	r3, r1, r3, r2
 8001174:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001176:	b108      	cbz	r0, 800117c <DIS_Cleanup_Service+0x98>
               BTPS_FreeMemory(InstanceData[InstanceID-1].Firmware_Revision.Data);
 8001178:	f012 f93a 	bl	80133f0 <BTPS_FreeMemory>
            if(InstanceData[InstanceID-1].Software_Revision.Data)
 800117c:	9b01      	ldr	r3, [sp, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 8001182:	2158      	movs	r1, #88	; 0x58
 8001184:	fb01 2303 	mla	r3, r1, r3, r2
 8001188:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800118a:	b108      	cbz	r0, 8001190 <DIS_Cleanup_Service+0xac>
               BTPS_FreeMemory(InstanceData[InstanceID-1].Software_Revision.Data);
 800118c:	f012 f930 	bl	80133f0 <BTPS_FreeMemory>
            if(InstanceData[InstanceID-1].IEEE_Certification_Data.Data)
 8001190:	9b01      	ldr	r3, [sp, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 8001196:	2158      	movs	r1, #88	; 0x58
 8001198:	fb01 2303 	mla	r3, r1, r3, r2
 800119c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800119e:	b108      	cbz	r0, 80011a4 <DIS_Cleanup_Service+0xc0>
               BTPS_FreeMemory(InstanceData[InstanceID-1].IEEE_Certification_Data.Data);
 80011a0:	f012 f926 	bl	80133f0 <BTPS_FreeMemory>
            BTPS_MemInitialize(ServiceInstance, 0, DIS_SERVER_INSTANCE_DATA_SIZE);
 80011a4:	2208      	movs	r2, #8
 80011a6:	2100      	movs	r1, #0
 80011a8:	4628      	mov	r0, r5
 80011aa:	f012 f988 	bl	80134be <BTPS_MemInitialize>
            BTPS_MemInitialize(InstanceData, 0, DIS_INSTANCE_DATA_SIZE);
 80011ae:	2258      	movs	r2, #88	; 0x58
 80011b0:	2100      	movs	r1, #0
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <DIS_Cleanup_Service+0xe8>)
 80011b4:	f012 f983 	bl	80134be <BTPS_MemInitialize>
            ret_val = 0;
 80011b8:	2500      	movs	r5, #0
 80011ba:	e7a4      	b.n	8001106 <DIS_Cleanup_Service+0x22>
      ret_val = DIS_ERROR_INVALID_PARAMETER;
 80011bc:	4d02      	ldr	r5, [pc, #8]	; (80011c8 <DIS_Cleanup_Service+0xe4>)
 80011be:	e7a5      	b.n	800110c <DIS_Cleanup_Service+0x28>
 80011c0:	4d01      	ldr	r5, [pc, #4]	; (80011c8 <DIS_Cleanup_Service+0xe4>)
 80011c2:	e7a3      	b.n	800110c <DIS_Cleanup_Service+0x28>
         ret_val = DIS_ERROR_INVALID_INSTANCE_ID;
 80011c4:	4d02      	ldr	r5, [pc, #8]	; (80011d0 <DIS_Cleanup_Service+0xec>)
   return(ret_val);
 80011c6:	e7a1      	b.n	800110c <DIS_Cleanup_Service+0x28>
 80011c8:	fffffc18 	.word	0xfffffc18
 80011cc:	20000c68 	.word	0x20000c68
 80011d0:	fffffc14 	.word	0xfffffc14

080011d4 <DIS_Set_Manufacturer_Name>:
   /* NULL terminated ASCII String of at most                           */
   /* DIS_MAXIMUM_SUPPORTED_STRING (not counting the trailing NULL      */
   /* terminator).  This function returns a zero if successful or a     */
   /* negative return error code if an error occurs.                    */
int BTPSAPI DIS_Set_Manufacturer_Name(unsigned int BluetoothStackID, unsigned int InstanceID, char *ManufacturerName)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	9101      	str	r1, [sp, #4]
   int                  ret_val;
   unsigned int         StringLength;
   DISServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (ManufacturerName) && ((StringLength = BTPS_StringLength(ManufacturerName)) <= DIS_MAXIMUM_SUPPORTED_STRING))
 80011da:	2800      	cmp	r0, #0
 80011dc:	d046      	beq.n	800126c <DIS_Set_Manufacturer_Name+0x98>
 80011de:	4616      	mov	r6, r2
 80011e0:	4605      	mov	r5, r0
 80011e2:	2900      	cmp	r1, #0
 80011e4:	d044      	beq.n	8001270 <DIS_Set_Manufacturer_Name+0x9c>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d044      	beq.n	8001274 <DIS_Set_Manufacturer_Name+0xa0>
 80011ea:	4610      	mov	r0, r2
 80011ec:	f012 f9db 	bl	80135a6 <BTPS_StringLength>
 80011f0:	4604      	mov	r4, r0
 80011f2:	2830      	cmp	r0, #48	; 0x30
 80011f4:	d840      	bhi.n	8001278 <DIS_Set_Manufacturer_Name+0xa4>
   {
      /* Acquire the specified DIS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 80011f6:	a901      	add	r1, sp, #4
 80011f8:	4628      	mov	r0, r5
 80011fa:	f7ff fe7f 	bl	8000efc <AcquireServiceInstance>
 80011fe:	4607      	mov	r7, r0
 8001200:	2800      	cmp	r0, #0
 8001202:	d03b      	beq.n	800127c <DIS_Set_Manufacturer_Name+0xa8>
      {
         /* Free any previous buffer allocated.                         */
         if(InstanceData[InstanceID-1].Manufacturer_Name.Data)
 8001204:	9b01      	ldr	r3, [sp, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	4a1d      	ldr	r2, [pc, #116]	; (8001280 <DIS_Set_Manufacturer_Name+0xac>)
 800120a:	2158      	movs	r1, #88	; 0x58
 800120c:	fb01 2303 	mla	r3, r1, r3, r2
 8001210:	6858      	ldr	r0, [r3, #4]
 8001212:	b148      	cbz	r0, 8001228 <DIS_Set_Manufacturer_Name+0x54>
         {
            BTPS_FreeMemory(InstanceData[InstanceID-1].Manufacturer_Name.Data);
 8001214:	f012 f8ec 	bl	80133f0 <BTPS_FreeMemory>
            InstanceData[InstanceID-1].Manufacturer_Name.Data = NULL;
 8001218:	9b01      	ldr	r3, [sp, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <DIS_Set_Manufacturer_Name+0xac>)
 800121e:	2158      	movs	r1, #88	; 0x58
 8001220:	fb01 2303 	mla	r3, r1, r3, r2
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
         }

         /* Attempt to allocate memory for the Manufacturer Name string.*/
         if((InstanceData[InstanceID-1].Manufacturer_Name.Data = BTPS_AllocateMemory(StringLength)) != NULL)
 8001228:	9d01      	ldr	r5, [sp, #4]
 800122a:	3d01      	subs	r5, #1
 800122c:	4620      	mov	r0, r4
 800122e:	f012 f8c5 	bl	80133bc <BTPS_AllocateMemory>
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <DIS_Set_Manufacturer_Name+0xac>)
 8001234:	2258      	movs	r2, #88	; 0x58
 8001236:	fb02 3505 	mla	r5, r2, r5, r3
 800123a:	6068      	str	r0, [r5, #4]
 800123c:	b198      	cbz	r0, 8001266 <DIS_Set_Manufacturer_Name+0x92>
         {
            /* Set the length and copy the data into the Manufacturer   */
            /* Name.                                                    */
            InstanceData[InstanceID-1].Manufacturer_Name.Characteristic_Length = (Word_t)StringLength;
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	490f      	ldr	r1, [pc, #60]	; (8001280 <DIS_Set_Manufacturer_Name+0xac>)
 8001244:	2358      	movs	r3, #88	; 0x58
 8001246:	fb03 f302 	mul.w	r3, r3, r2
 800124a:	18c8      	adds	r0, r1, r3
 800124c:	52cc      	strh	r4, [r1, r3]
            BTPS_MemCopy(InstanceData[InstanceID-1].Manufacturer_Name.Data, ManufacturerName, StringLength);
 800124e:	4622      	mov	r2, r4
 8001250:	4631      	mov	r1, r6
 8001252:	6840      	ldr	r0, [r0, #4]
 8001254:	f012 f92f 	bl	80134b6 <BTPS_MemCopy>

            /* Return success to the caller.                            */
            ret_val = 0;
 8001258:	2400      	movs	r4, #0
         }
         else
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f018 f872 	bl	8019344 <BSC_UnLockBluetoothStack>
#else

   return(BTPS_ERROR_FEATURE_NOT_AVAILABLE);

#endif
}
 8001260:	4620      	mov	r0, r4
 8001262:	b003      	add	sp, #12
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;
 8001266:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 800126a:	e7f6      	b.n	800125a <DIS_Set_Manufacturer_Name+0x86>
      ret_val = DIS_ERROR_INVALID_PARAMETER;
 800126c:	4c05      	ldr	r4, [pc, #20]	; (8001284 <DIS_Set_Manufacturer_Name+0xb0>)
 800126e:	e7f7      	b.n	8001260 <DIS_Set_Manufacturer_Name+0x8c>
 8001270:	4c04      	ldr	r4, [pc, #16]	; (8001284 <DIS_Set_Manufacturer_Name+0xb0>)
 8001272:	e7f5      	b.n	8001260 <DIS_Set_Manufacturer_Name+0x8c>
 8001274:	4c03      	ldr	r4, [pc, #12]	; (8001284 <DIS_Set_Manufacturer_Name+0xb0>)
 8001276:	e7f3      	b.n	8001260 <DIS_Set_Manufacturer_Name+0x8c>
 8001278:	4c02      	ldr	r4, [pc, #8]	; (8001284 <DIS_Set_Manufacturer_Name+0xb0>)
 800127a:	e7f1      	b.n	8001260 <DIS_Set_Manufacturer_Name+0x8c>
         ret_val = DIS_ERROR_INVALID_INSTANCE_ID;
 800127c:	4c02      	ldr	r4, [pc, #8]	; (8001288 <DIS_Set_Manufacturer_Name+0xb4>)
   return(ret_val);
 800127e:	e7ef      	b.n	8001260 <DIS_Set_Manufacturer_Name+0x8c>
 8001280:	20000c68 	.word	0x20000c68
 8001284:	fffffc18 	.word	0xfffffc18
 8001288:	fffffc14 	.word	0xfffffc14

0800128c <DIS_Set_Model_Number>:
   /* Number parameter must be a pointer to a NULL terminated ASCII     */
   /* String of at most DIS_MAXIMUM_SUPPORTED_STRING (not counting the  */
   /* trailing NULL terminator).  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
int BTPSAPI DIS_Set_Model_Number(unsigned int BluetoothStackID, unsigned int InstanceID, char *ModelNumber)
{
 800128c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	9101      	str	r1, [sp, #4]
   int                  ret_val;
   unsigned int         StringLength;
   DISServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (ModelNumber) && ((StringLength = BTPS_StringLength(ModelNumber)) <= DIS_MAXIMUM_SUPPORTED_STRING))
 8001292:	2800      	cmp	r0, #0
 8001294:	d045      	beq.n	8001322 <DIS_Set_Model_Number+0x96>
 8001296:	4616      	mov	r6, r2
 8001298:	4605      	mov	r5, r0
 800129a:	2900      	cmp	r1, #0
 800129c:	d043      	beq.n	8001326 <DIS_Set_Model_Number+0x9a>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d043      	beq.n	800132a <DIS_Set_Model_Number+0x9e>
 80012a2:	4610      	mov	r0, r2
 80012a4:	f012 f97f 	bl	80135a6 <BTPS_StringLength>
 80012a8:	4604      	mov	r4, r0
 80012aa:	2830      	cmp	r0, #48	; 0x30
 80012ac:	d83f      	bhi.n	800132e <DIS_Set_Model_Number+0xa2>
   {
      /* Acquire the specified DIS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 80012ae:	a901      	add	r1, sp, #4
 80012b0:	4628      	mov	r0, r5
 80012b2:	f7ff fe23 	bl	8000efc <AcquireServiceInstance>
 80012b6:	4607      	mov	r7, r0
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d03a      	beq.n	8001332 <DIS_Set_Model_Number+0xa6>
      {
         /* Free any previous buffer allocated.                         */
         if(InstanceData[InstanceID-1].Model_Number.Data)
 80012bc:	9b01      	ldr	r3, [sp, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <DIS_Set_Model_Number+0xac>)
 80012c2:	2158      	movs	r1, #88	; 0x58
 80012c4:	fb01 2303 	mla	r3, r1, r3, r2
 80012c8:	68d8      	ldr	r0, [r3, #12]
 80012ca:	b148      	cbz	r0, 80012e0 <DIS_Set_Model_Number+0x54>
         {
            BTPS_FreeMemory(InstanceData[InstanceID-1].Model_Number.Data);
 80012cc:	f012 f890 	bl	80133f0 <BTPS_FreeMemory>
            InstanceData[InstanceID-1].Model_Number.Data = NULL;
 80012d0:	9b01      	ldr	r3, [sp, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <DIS_Set_Model_Number+0xac>)
 80012d6:	2158      	movs	r1, #88	; 0x58
 80012d8:	fb01 2303 	mla	r3, r1, r3, r2
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
         }

         /* Attempt to allocate memory for the Model Number string.     */
         if((InstanceData[InstanceID-1].Model_Number.Data = BTPS_AllocateMemory(StringLength)) != NULL)
 80012e0:	9d01      	ldr	r5, [sp, #4]
 80012e2:	3d01      	subs	r5, #1
 80012e4:	4620      	mov	r0, r4
 80012e6:	f012 f869 	bl	80133bc <BTPS_AllocateMemory>
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <DIS_Set_Model_Number+0xac>)
 80012ec:	2258      	movs	r2, #88	; 0x58
 80012ee:	fb02 3505 	mla	r5, r2, r5, r3
 80012f2:	60e8      	str	r0, [r5, #12]
 80012f4:	b190      	cbz	r0, 800131c <DIS_Set_Model_Number+0x90>
         {
            /* Set the length and copy the data into the Model Number.  */
            InstanceData[InstanceID-1].Model_Number.Characteristic_Length = (Word_t)StringLength;
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <DIS_Set_Model_Number+0xac>)
 80012fc:	2158      	movs	r1, #88	; 0x58
 80012fe:	fb01 2303 	mla	r3, r1, r3, r2
 8001302:	811c      	strh	r4, [r3, #8]
            BTPS_MemCopy(InstanceData[InstanceID-1].Model_Number.Data, ModelNumber, StringLength);
 8001304:	4622      	mov	r2, r4
 8001306:	4631      	mov	r1, r6
 8001308:	68d8      	ldr	r0, [r3, #12]
 800130a:	f012 f8d4 	bl	80134b6 <BTPS_MemCopy>

            /* Return success to the caller.                            */
            ret_val = 0;
 800130e:	2400      	movs	r4, #0
         }
         else
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	f018 f817 	bl	8019344 <BSC_UnLockBluetoothStack>
#else

   return(BTPS_ERROR_FEATURE_NOT_AVAILABLE);

#endif
}
 8001316:	4620      	mov	r0, r4
 8001318:	b003      	add	sp, #12
 800131a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;
 800131c:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 8001320:	e7f6      	b.n	8001310 <DIS_Set_Model_Number+0x84>
      ret_val = DIS_ERROR_INVALID_PARAMETER;
 8001322:	4c06      	ldr	r4, [pc, #24]	; (800133c <DIS_Set_Model_Number+0xb0>)
 8001324:	e7f7      	b.n	8001316 <DIS_Set_Model_Number+0x8a>
 8001326:	4c05      	ldr	r4, [pc, #20]	; (800133c <DIS_Set_Model_Number+0xb0>)
 8001328:	e7f5      	b.n	8001316 <DIS_Set_Model_Number+0x8a>
 800132a:	4c04      	ldr	r4, [pc, #16]	; (800133c <DIS_Set_Model_Number+0xb0>)
 800132c:	e7f3      	b.n	8001316 <DIS_Set_Model_Number+0x8a>
 800132e:	4c03      	ldr	r4, [pc, #12]	; (800133c <DIS_Set_Model_Number+0xb0>)
 8001330:	e7f1      	b.n	8001316 <DIS_Set_Model_Number+0x8a>
         ret_val = DIS_ERROR_INVALID_INSTANCE_ID;
 8001332:	4c03      	ldr	r4, [pc, #12]	; (8001340 <DIS_Set_Model_Number+0xb4>)
   return(ret_val);
 8001334:	e7ef      	b.n	8001316 <DIS_Set_Model_Number+0x8a>
 8001336:	bf00      	nop
 8001338:	20000c68 	.word	0x20000c68
 800133c:	fffffc18 	.word	0xfffffc18
 8001340:	fffffc14 	.word	0xfffffc14

08001344 <DIS_Set_Serial_Number>:
   /* Number parameter must be a pointer to a NULL terminated ASCII     */
   /* String of at most DIS_MAXIMUM_SUPPORTED_STRING (not counting the  */
   /* trailing NULL terminator).  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
int BTPSAPI DIS_Set_Serial_Number(unsigned int BluetoothStackID, unsigned int InstanceID, char *SerialNumber)
{
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	b083      	sub	sp, #12
 8001348:	9101      	str	r1, [sp, #4]
   int                  ret_val;
   unsigned int         StringLength;
   DISServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (SerialNumber) && ((StringLength = BTPS_StringLength(SerialNumber)) <= DIS_MAXIMUM_SUPPORTED_STRING))
 800134a:	2800      	cmp	r0, #0
 800134c:	d045      	beq.n	80013da <DIS_Set_Serial_Number+0x96>
 800134e:	4616      	mov	r6, r2
 8001350:	4605      	mov	r5, r0
 8001352:	2900      	cmp	r1, #0
 8001354:	d043      	beq.n	80013de <DIS_Set_Serial_Number+0x9a>
 8001356:	2a00      	cmp	r2, #0
 8001358:	d043      	beq.n	80013e2 <DIS_Set_Serial_Number+0x9e>
 800135a:	4610      	mov	r0, r2
 800135c:	f012 f923 	bl	80135a6 <BTPS_StringLength>
 8001360:	4604      	mov	r4, r0
 8001362:	2830      	cmp	r0, #48	; 0x30
 8001364:	d83f      	bhi.n	80013e6 <DIS_Set_Serial_Number+0xa2>
   {
      /* Acquire the specified DIS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8001366:	a901      	add	r1, sp, #4
 8001368:	4628      	mov	r0, r5
 800136a:	f7ff fdc7 	bl	8000efc <AcquireServiceInstance>
 800136e:	4607      	mov	r7, r0
 8001370:	2800      	cmp	r0, #0
 8001372:	d03a      	beq.n	80013ea <DIS_Set_Serial_Number+0xa6>
      {
         /* Free any previous buffer allocated.                         */
         if(InstanceData[InstanceID-1].Serial_Number.Data)
 8001374:	9b01      	ldr	r3, [sp, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <DIS_Set_Serial_Number+0xac>)
 800137a:	2158      	movs	r1, #88	; 0x58
 800137c:	fb01 2303 	mla	r3, r1, r3, r2
 8001380:	6958      	ldr	r0, [r3, #20]
 8001382:	b148      	cbz	r0, 8001398 <DIS_Set_Serial_Number+0x54>
         {
            BTPS_FreeMemory(InstanceData[InstanceID-1].Serial_Number.Data);
 8001384:	f012 f834 	bl	80133f0 <BTPS_FreeMemory>
            InstanceData[InstanceID-1].Serial_Number.Data = NULL;
 8001388:	9b01      	ldr	r3, [sp, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <DIS_Set_Serial_Number+0xac>)
 800138e:	2158      	movs	r1, #88	; 0x58
 8001390:	fb01 2303 	mla	r3, r1, r3, r2
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
         }

         /* Attempt to allocate memory for the Serial Number string.    */
         if((InstanceData[InstanceID-1].Serial_Number.Data = BTPS_AllocateMemory(StringLength)) != NULL)
 8001398:	9d01      	ldr	r5, [sp, #4]
 800139a:	3d01      	subs	r5, #1
 800139c:	4620      	mov	r0, r4
 800139e:	f012 f80d 	bl	80133bc <BTPS_AllocateMemory>
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <DIS_Set_Serial_Number+0xac>)
 80013a4:	2258      	movs	r2, #88	; 0x58
 80013a6:	fb02 3505 	mla	r5, r2, r5, r3
 80013aa:	6168      	str	r0, [r5, #20]
 80013ac:	b190      	cbz	r0, 80013d4 <DIS_Set_Serial_Number+0x90>
         {
            /* Set the length and copy the data into the Serial Number. */
            InstanceData[InstanceID-1].Serial_Number.Characteristic_Length = (Word_t)StringLength;
 80013ae:	9b01      	ldr	r3, [sp, #4]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <DIS_Set_Serial_Number+0xac>)
 80013b4:	2158      	movs	r1, #88	; 0x58
 80013b6:	fb01 2303 	mla	r3, r1, r3, r2
 80013ba:	821c      	strh	r4, [r3, #16]
            BTPS_MemCopy(InstanceData[InstanceID-1].Serial_Number.Data, SerialNumber, StringLength);
 80013bc:	4622      	mov	r2, r4
 80013be:	4631      	mov	r1, r6
 80013c0:	6958      	ldr	r0, [r3, #20]
 80013c2:	f012 f878 	bl	80134b6 <BTPS_MemCopy>

            /* Return success to the caller.                            */
            ret_val = 0;
 80013c6:	2400      	movs	r4, #0
         }
         else
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f017 ffbb 	bl	8019344 <BSC_UnLockBluetoothStack>
#else

   return(BTPS_ERROR_FEATURE_NOT_AVAILABLE);

#endif
}
 80013ce:	4620      	mov	r0, r4
 80013d0:	b003      	add	sp, #12
 80013d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ret_val = DIS_ERROR_INSUFFICIENT_RESOURCES;
 80013d4:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 80013d8:	e7f6      	b.n	80013c8 <DIS_Set_Serial_Number+0x84>
      ret_val = DIS_ERROR_INVALID_PARAMETER;
 80013da:	4c06      	ldr	r4, [pc, #24]	; (80013f4 <DIS_Set_Serial_Number+0xb0>)
 80013dc:	e7f7      	b.n	80013ce <DIS_Set_Serial_Number+0x8a>
 80013de:	4c05      	ldr	r4, [pc, #20]	; (80013f4 <DIS_Set_Serial_Number+0xb0>)
 80013e0:	e7f5      	b.n	80013ce <DIS_Set_Serial_Number+0x8a>
 80013e2:	4c04      	ldr	r4, [pc, #16]	; (80013f4 <DIS_Set_Serial_Number+0xb0>)
 80013e4:	e7f3      	b.n	80013ce <DIS_Set_Serial_Number+0x8a>
 80013e6:	4c03      	ldr	r4, [pc, #12]	; (80013f4 <DIS_Set_Serial_Number+0xb0>)
 80013e8:	e7f1      	b.n	80013ce <DIS_Set_Serial_Number+0x8a>
         ret_val = DIS_ERROR_INVALID_INSTANCE_ID;
 80013ea:	4c03      	ldr	r4, [pc, #12]	; (80013f8 <DIS_Set_Serial_Number+0xb4>)
   return(ret_val);
 80013ec:	e7ef      	b.n	80013ce <DIS_Set_Serial_Number+0x8a>
 80013ee:	bf00      	nop
 80013f0:	20000c68 	.word	0x20000c68
 80013f4:	fffffc18 	.word	0xfffffc18
 80013f8:	fffffc14 	.word	0xfffffc14

080013fc <InstanceRegisteredByStackID>:
static Boolean_t InstanceRegisteredByStackID(unsigned int BluetoothStackID)
{
   Boolean_t    ret_val = FALSE;
   unsigned int Index;

   for(Index=0;Index<GAPS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	b10b      	cbz	r3, 8001404 <InstanceRegisteredByStackID+0x8>
   Boolean_t    ret_val = FALSE;
 8001400:	2000      	movs	r0, #0
 8001402:	4770      	bx	lr
   {
      if((InstanceList[Index].BluetoothStackID == BluetoothStackID) && (InstanceList[Index].ServiceID))
 8001404:	4a07      	ldr	r2, [pc, #28]	; (8001424 <InstanceRegisteredByStackID+0x28>)
 8001406:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800140a:	4282      	cmp	r2, r0
 800140c:	d001      	beq.n	8001412 <InstanceRegisteredByStackID+0x16>
   for(Index=0;Index<GAPS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 800140e:	3301      	adds	r3, #1
 8001410:	e7f5      	b.n	80013fe <InstanceRegisteredByStackID+0x2>
      if((InstanceList[Index].BluetoothStackID == BluetoothStackID) && (InstanceList[Index].ServiceID))
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <InstanceRegisteredByStackID+0x28>)
 8001414:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001418:	6852      	ldr	r2, [r2, #4]
 800141a:	2a00      	cmp	r2, #0
 800141c:	d0f7      	beq.n	800140e <InstanceRegisteredByStackID+0x12>
      {
         ret_val = TRUE;
 800141e:	2001      	movs	r0, #1
      }
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000d08 	.word	0x20000d08

08001428 <AcquireServiceInstance>:
   /* * NOTE * Since this is an internal function no check is done on   */
   /*          the input parameters.                                    */
   /* * NOTE * If InstanceID is set to 0, this function will return the */
   /*          next free instance.                                      */
static GAPSServerInstance_t *AcquireServiceInstance(unsigned int BluetoothStackID, unsigned int *InstanceID)
{
 8001428:	b570      	push	{r4, r5, r6, lr}
 800142a:	4604      	mov	r4, r0
 800142c:	460e      	mov	r6, r1
   unsigned int          Index;
   GAPSServerInstance_t *ret_val = NULL;

   /* Lock the Bluetooth Stack to gain exclusive access to this         */
   /* Bluetooth Protocol Stack.                                         */
   if(!BSC_LockBluetoothStack(BluetoothStackID))
 800142e:	f017 fe23 	bl	8019078 <BSC_LockBluetoothStack>
 8001432:	2800      	cmp	r0, #0
 8001434:	d139      	bne.n	80014aa <AcquireServiceInstance+0x82>
   {
      /* Acquire the BSC List Lock while we are searching the instance  */
      /* list.                                                          */
      if(BSC_AcquireListLock())
 8001436:	f017 faf9 	bl	8018a2c <BSC_AcquireListLock>
 800143a:	b388      	cbz	r0, 80014a0 <AcquireServiceInstance+0x78>
      {
         /* Store a copy of the passed in InstanceID locally.           */
         LocalInstanceID = *InstanceID;
 800143c:	6835      	ldr	r5, [r6, #0]

         /* Verify that the Instance ID is valid.                       */
         if((LocalInstanceID) && (LocalInstanceID <= GAPS_MAXIMUM_SUPPORTED_INSTANCES))
 800143e:	2d01      	cmp	r5, #1
 8001440:	d006      	beq.n	8001450 <AcquireServiceInstance+0x28>
         }
         else
         {
            /* Verify that we have been requested to find the next free */
            /* instance.                                                */
            if(!LocalInstanceID)
 8001442:	b9e5      	cbnz	r5, 800147e <AcquireServiceInstance+0x56>
            {
               /* Try to find a free instance.                          */
               for(Index=0;Index<GAPS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8001444:	b1fd      	cbz	r5, 8001486 <AcquireServiceInstance+0x5e>
   GAPSServerInstance_t *ret_val = NULL;
 8001446:	2500      	movs	r5, #0
               }
            }
         }

         /* Release the previously acquired list lock.                  */
         BSC_ReleaseListLock();
 8001448:	f017 fe54 	bl	80190f4 <BSC_ReleaseListLock>
      }

      /* If we failed to acquire the instance then we should un-lock the*/
      /* previously acquired Bluetooth Stack.                           */
      if(!ret_val)
 800144c:	bb75      	cbnz	r5, 80014ac <AcquireServiceInstance+0x84>
 800144e:	e028      	b.n	80014a2 <AcquireServiceInstance+0x7a>
            --LocalInstanceID;
 8001450:	1e6b      	subs	r3, r5, #1
            if((InstanceList[LocalInstanceID].BluetoothStackID == BluetoothStackID) && (InstanceList[LocalInstanceID].ServiceID))
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <AcquireServiceInstance+0x88>)
 8001454:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001458:	42a2      	cmp	r2, r4
 800145a:	d108      	bne.n	800146e <AcquireServiceInstance+0x46>
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <AcquireServiceInstance+0x88>)
 800145e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001462:	6852      	ldr	r2, [r2, #4]
 8001464:	b13a      	cbz	r2, 8001476 <AcquireServiceInstance+0x4e>
               ret_val = &InstanceList[LocalInstanceID];
 8001466:	4d12      	ldr	r5, [pc, #72]	; (80014b0 <AcquireServiceInstance+0x88>)
 8001468:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800146c:	e7ec      	b.n	8001448 <AcquireServiceInstance+0x20>
         BSC_ReleaseListLock();
 800146e:	f017 fe41 	bl	80190f4 <BSC_ReleaseListLock>
   GAPSServerInstance_t *ret_val = NULL;
 8001472:	2500      	movs	r5, #0
 8001474:	e015      	b.n	80014a2 <AcquireServiceInstance+0x7a>
         BSC_ReleaseListLock();
 8001476:	f017 fe3d 	bl	80190f4 <BSC_ReleaseListLock>
   GAPSServerInstance_t *ret_val = NULL;
 800147a:	2500      	movs	r5, #0
 800147c:	e011      	b.n	80014a2 <AcquireServiceInstance+0x7a>
         BSC_ReleaseListLock();
 800147e:	f017 fe39 	bl	80190f4 <BSC_ReleaseListLock>
   GAPSServerInstance_t *ret_val = NULL;
 8001482:	2500      	movs	r5, #0
 8001484:	e00d      	b.n	80014a2 <AcquireServiceInstance+0x7a>
                  if(!(InstanceList[Index].ServiceID))
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <AcquireServiceInstance+0x88>)
 8001488:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	b10b      	cbz	r3, 8001494 <AcquireServiceInstance+0x6c>
               for(Index=0;Index<GAPS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8001490:	3501      	adds	r5, #1
 8001492:	e7d7      	b.n	8001444 <AcquireServiceInstance+0x1c>
                     *InstanceID = Index+1;
 8001494:	1c6b      	adds	r3, r5, #1
 8001496:	6033      	str	r3, [r6, #0]
                     ret_val     = &InstanceList[Index];
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <AcquireServiceInstance+0x88>)
 800149a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
                     break;
 800149e:	e7d3      	b.n	8001448 <AcquireServiceInstance+0x20>
   GAPSServerInstance_t *ret_val = NULL;
 80014a0:	2500      	movs	r5, #0
         BSC_UnLockBluetoothStack(BluetoothStackID);
 80014a2:	4620      	mov	r0, r4
 80014a4:	f017 ff4e 	bl	8019344 <BSC_UnLockBluetoothStack>
 80014a8:	e000      	b.n	80014ac <AcquireServiceInstance+0x84>
   GAPSServerInstance_t *ret_val = NULL;
 80014aa:	2500      	movs	r5, #0
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80014ac:	4628      	mov	r0, r5
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
 80014b0:	20000d08 	.word	0x20000d08

080014b4 <GAPSRegisterService>:

   /* The following function is a utility function which is used to     */
   /* register an GAPS Service.  This function returns the positive,    */
   /* non-zero, Instance ID on success or a negative error code.        */
static int GAPSRegisterService(unsigned int BluetoothStackID, unsigned int *ServiceID, GATT_Attribute_Handle_Group_t *ServiceHandleRange)
{
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	b087      	sub	sp, #28
   int                   ret_val;
   unsigned int          InstanceID;
   GAPSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (ServiceID))
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d04c      	beq.n	8001556 <GAPSRegisterService+0xa2>
 80014bc:	460e      	mov	r6, r1
 80014be:	4614      	mov	r4, r2
 80014c0:	4605      	mov	r5, r0
 80014c2:	2900      	cmp	r1, #0
 80014c4:	d049      	beq.n	800155a <GAPSRegisterService+0xa6>
   {
      /* Verify that no instance is registered to this Bluetooth Stack. */
      if(!InstanceRegisteredByStackID(BluetoothStackID))
 80014c6:	f7ff ff99 	bl	80013fc <InstanceRegisteredByStackID>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d147      	bne.n	800155e <GAPSRegisterService+0xaa>
      {
         /* Acquire a free GAPS Instance.                               */
         InstanceID = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	9305      	str	r3, [sp, #20]
         if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 80014d2:	a905      	add	r1, sp, #20
 80014d4:	4628      	mov	r0, r5
 80014d6:	f7ff ffa7 	bl	8001428 <AcquireServiceInstance>
 80014da:	4607      	mov	r7, r0
 80014dc:	2800      	cmp	r0, #0
 80014de:	d040      	beq.n	8001562 <GAPSRegisterService+0xae>
         {
            /* Call GATT to register the PASS service.                  */
            ret_val = GATT_Register_Service(BluetoothStackID, GAP_SERVICE_FLAGS, GENERIC_ACCESS_PROFILE_SERVICE_ATTRIBUTE_COUNT, (GATT_Service_Attribute_Entry_t *)Generic_Access_Profile_Service, ServiceHandleRange, GATT_ServerEventCallback, InstanceID);
 80014e0:	9b05      	ldr	r3, [sp, #20]
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <GAPSRegisterService+0xb4>)
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	9400      	str	r4, [sp, #0]
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <GAPSRegisterService+0xb8>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	2103      	movs	r1, #3
 80014f0:	4628      	mov	r0, r5
 80014f2:	f028 f9fd 	bl	80298f0 <GATT_Register_Service>
            if(ret_val > 0)
 80014f6:	1e04      	subs	r4, r0, #0
 80014f8:	dc05      	bgt.n	8001506 <GAPSRegisterService+0x52>
               /* Return the GAPS Instance ID.                          */
               ret_val                           = (int)InstanceID;
            }

            /* UnLock the previously locked Bluetooth Stack.            */
            BSC_UnLockBluetoothStack(BluetoothStackID);
 80014fa:	4628      	mov	r0, r5
 80014fc:	f017 ff22 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = GAPS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8001500:	4620      	mov	r0, r4
 8001502:	b007      	add	sp, #28
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
               ServiceInstance->BluetoothStackID = BluetoothStackID;
 8001506:	603d      	str	r5, [r7, #0]
               ServiceInstance->ServiceID        = (unsigned int)ret_val;
 8001508:	607c      	str	r4, [r7, #4]
               *ServiceID                        = (unsigned int)ret_val;
 800150a:	6034      	str	r4, [r6, #0]
               BTPS_MemInitialize(&InstanceData[InstanceID-1], 0, GAP_INSTANCE_DATA_SIZE);
 800150c:	9805      	ldr	r0, [sp, #20]
 800150e:	3801      	subs	r0, #1
 8001510:	4e17      	ldr	r6, [pc, #92]	; (8001570 <GAPSRegisterService+0xbc>)
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	2100      	movs	r1, #0
 8001516:	eb06 1080 	add.w	r0, r6, r0, lsl #6
 800151a:	f011 ffd0 	bl	80134be <BTPS_MemInitialize>
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].DeviceAppearanceLength), GAP_DEVICE_APPEARENCE_VALUE_LENGTH);
 800151e:	9c05      	ldr	r4, [sp, #20]
 8001520:	1e62      	subs	r2, r4, #1
 8001522:	0193      	lsls	r3, r2, #6
 8001524:	eb06 1282 	add.w	r2, r6, r2, lsl #6
 8001528:	2102      	movs	r1, #2
 800152a:	54f1      	strb	r1, [r6, r3]
 800152c:	2100      	movs	r1, #0
 800152e:	7051      	strb	r1, [r2, #1]
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].DeviceNameLength), 0);
 8001530:	7111      	strb	r1, [r2, #4]
 8001532:	7151      	strb	r1, [r2, #5]
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].PreferredConnectionParametersLength), GAP_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_DATA_SIZE);
 8001534:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001538:	4432      	add	r2, r6
 800153a:	2708      	movs	r7, #8
 800153c:	7197      	strb	r7, [r2, #6]
 800153e:	71d1      	strb	r1, [r2, #7]
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].PreferredConnectionParameters.Minimum_Connection_Interval), GAP_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_NO_SPECIFIC_PREFERRED);
 8001540:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001544:	18b1      	adds	r1, r6, r2
 8001546:	23ff      	movs	r3, #255	; 0xff
 8001548:	54b3      	strb	r3, [r6, r2]
 800154a:	704b      	strb	r3, [r1, #1]
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].PreferredConnectionParameters.Maximum_Connection_Interval), GAP_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_NO_SPECIFIC_PREFERRED);
 800154c:	708b      	strb	r3, [r1, #2]
 800154e:	70cb      	strb	r3, [r1, #3]
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].PreferredConnectionParameters.Supervision_Timeout_Multiplier), GAP_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_NO_SPECIFIC_PREFERRED);
 8001550:	718b      	strb	r3, [r1, #6]
 8001552:	71cb      	strb	r3, [r1, #7]
               ret_val                           = (int)InstanceID;
 8001554:	e7d1      	b.n	80014fa <GAPSRegisterService+0x46>
      ret_val = GAPS_ERROR_INVALID_PARAMETER;
 8001556:	4c07      	ldr	r4, [pc, #28]	; (8001574 <GAPSRegisterService+0xc0>)
 8001558:	e7d2      	b.n	8001500 <GAPSRegisterService+0x4c>
 800155a:	4c06      	ldr	r4, [pc, #24]	; (8001574 <GAPSRegisterService+0xc0>)
 800155c:	e7d0      	b.n	8001500 <GAPSRegisterService+0x4c>
         ret_val = GAPS_ERROR_SERVICE_ALREADY_REGISTERED;
 800155e:	4c06      	ldr	r4, [pc, #24]	; (8001578 <GAPSRegisterService+0xc4>)
 8001560:	e7ce      	b.n	8001500 <GAPSRegisterService+0x4c>
            ret_val = GAPS_ERROR_INSUFFICIENT_RESOURCES;
 8001562:	4c06      	ldr	r4, [pc, #24]	; (800157c <GAPSRegisterService+0xc8>)
   return(ret_val);
 8001564:	e7cc      	b.n	8001500 <GAPSRegisterService+0x4c>
 8001566:	bf00      	nop
 8001568:	08001581 	.word	0x08001581
 800156c:	0802af18 	.word	0x0802af18
 8001570:	20000cc8 	.word	0x20000cc8
 8001574:	fffffc18 	.word	0xfffffc18
 8001578:	fffffc15 	.word	0xfffffc15
 800157c:	fffffc16 	.word	0xfffffc16

08001580 <GATT_ServerEventCallback>:
   unsigned int          TransactionID;
   unsigned int          InstanceID;
   GAPSServerInstance_t *ServiceInstance;

   /* Verify that all parameters to this callback are Semi-Valid.       */
   if((BluetoothStackID) && (GATT_ServerEventData) && (CallbackParameter))
 8001580:	2800      	cmp	r0, #0
 8001582:	d03b      	beq.n	80015fc <GATT_ServerEventCallback+0x7c>
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	460c      	mov	r4, r1
 800158a:	4605      	mov	r5, r0
   if((BluetoothStackID) && (GATT_ServerEventData) && (CallbackParameter))
 800158c:	b101      	cbz	r1, 8001590 <GATT_ServerEventCallback+0x10>
 800158e:	b90a      	cbnz	r2, 8001594 <GATT_ServerEventCallback+0x14>

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
      }
   }
}
 8001590:	b003      	add	sp, #12
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
      InstanceID = (unsigned int)CallbackParameter;
 8001594:	9201      	str	r2, [sp, #4]
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8001596:	a901      	add	r1, sp, #4
 8001598:	f7ff ff46 	bl	8001428 <AcquireServiceInstance>
 800159c:	4606      	mov	r6, r0
 800159e:	2800      	cmp	r0, #0
 80015a0:	d0f6      	beq.n	8001590 <GATT_ServerEventCallback+0x10>
         switch(GATT_ServerEventData->Event_Data_Type)
 80015a2:	7823      	ldrb	r3, [r4, #0]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d003      	beq.n	80015b0 <GATT_ServerEventCallback+0x30>
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 80015a8:	6830      	ldr	r0, [r6, #0]
 80015aa:	f017 fecb 	bl	8019344 <BSC_UnLockBluetoothStack>
}
 80015ae:	e7ef      	b.n	8001590 <GATT_ServerEventCallback+0x10>
               if(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data)
 80015b0:	6860      	ldr	r0, [r4, #4]
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d0f8      	beq.n	80015a8 <GATT_ServerEventCallback+0x28>
                  AttributeOffset = GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeOffset;
 80015b6:	8a82      	ldrh	r2, [r0, #20]
                  TransactionID   = GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->TransactionID;
 80015b8:	6841      	ldr	r1, [r0, #4]
                  InstanceTag = (Word_t)(((GATT_Characteristic_Value_16_Entry_t *)Generic_Access_Profile_Service[AttributeOffset].Attribute_Value)->Characteristic_Value_Length);
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <GATT_ServerEventCallback+0x80>)
 80015bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015c0:	685c      	ldr	r4, [r3, #4]
                  ValueLength = READ_UNALIGNED_WORD_LITTLE_ENDIAN(&(((Byte_t *)(&InstanceData[InstanceID-1]))[InstanceTag]));
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4f0f      	ldr	r7, [pc, #60]	; (8001604 <GATT_ServerEventCallback+0x84>)
 80015c8:	eb07 1383 	add.w	r3, r7, r3, lsl #6
 80015cc:	88a7      	ldrh	r7, [r4, #4]
 80015ce:	19dc      	adds	r4, r3, r7
 80015d0:	f894 c001 	ldrb.w	ip, [r4, #1]
 80015d4:	5ddc      	ldrb	r4, [r3, r7]
 80015d6:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
                  if(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset <= ValueLength)
 80015da:	8ac0      	ldrh	r0, [r0, #22]
 80015dc:	42a0      	cmp	r0, r4
 80015de:	d808      	bhi.n	80015f2 <GATT_ServerEventCallback+0x72>
                     ValueLength -= GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset;
 80015e0:	1a22      	subs	r2, r4, r0
                     Value        = (Byte_t *)(&(((Byte_t *)(&InstanceData[InstanceID-1]))[InstanceTag + WORD_SIZE + GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset]));
 80015e2:	4438      	add	r0, r7
 80015e4:	3002      	adds	r0, #2
                     GATT_Read_Response(BluetoothStackID, TransactionID, (unsigned int)ValueLength, Value);
 80015e6:	4403      	add	r3, r0
 80015e8:	b292      	uxth	r2, r2
 80015ea:	4628      	mov	r0, r5
 80015ec:	f028 f900 	bl	80297f0 <GATT_Read_Response>
 80015f0:	e7da      	b.n	80015a8 <GATT_ServerEventCallback+0x28>
                     GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_INVALID_OFFSET);
 80015f2:	2307      	movs	r3, #7
 80015f4:	4628      	mov	r0, r5
 80015f6:	f027 ff5d 	bl	80294b4 <GATT_Error_Response>
 80015fa:	e7d5      	b.n	80015a8 <GATT_ServerEventCallback+0x28>
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	0802af18 	.word	0x0802af18
 8001604:	20000cc8 	.word	0x20000cc8

08001608 <GAPS_Initialize_Service>:
   /* returns the positive, non-zero, Instance ID or a negative error   */
   /* code.                                                             */
   /* * NOTE * Only 1 GAPS Server may be open at a time, per Bluetooth  */
   /*          Stack ID.                                                */
int BTPSAPI GAPS_Initialize_Service(unsigned int BluetoothStackID, unsigned int *ServiceID)
{
 8001608:	b500      	push	{lr}
 800160a:	b083      	sub	sp, #12
   GATT_Attribute_Handle_Group_t ServiceHandleRange;

    /* Initialize the Service Handle Group to 0.                        */
   ServiceHandleRange.Starting_Handle = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f8ad 3004 	strh.w	r3, [sp, #4]
   ServiceHandleRange.Ending_Handle   = 0;
 8001612:	f8ad 3006 	strh.w	r3, [sp, #6]

   return(GAPSRegisterService(BluetoothStackID, ServiceID, &ServiceHandleRange));
 8001616:	aa01      	add	r2, sp, #4
 8001618:	f7ff ff4c 	bl	80014b4 <GAPSRegisterService>
}
 800161c:	b003      	add	sp, #12
 800161e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001624 <GAPS_Cleanup_Service>:
   /* which to close the server.  The second parameter is the InstanceID*/
   /* that was returned from a successful call to                       */
   /* GAPS_Initialize_Service().  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
int BTPSAPI GAPS_Cleanup_Service(unsigned int BluetoothStackID, unsigned int InstanceID)
{
 8001624:	b530      	push	{r4, r5, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   GAPSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID))
 800162a:	b1c8      	cbz	r0, 8001660 <GAPS_Cleanup_Service+0x3c>
 800162c:	4604      	mov	r4, r0
 800162e:	b1c9      	cbz	r1, 8001664 <GAPS_Cleanup_Service+0x40>
   {
      /* Acquire the specified GAPS Instance.                           */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8001630:	a901      	add	r1, sp, #4
 8001632:	f7ff fef9 	bl	8001428 <AcquireServiceInstance>
 8001636:	4605      	mov	r5, r0
 8001638:	b1b0      	cbz	r0, 8001668 <GAPS_Cleanup_Service+0x44>
      {
         /* Verify that the service is actually registered.             */
         if(ServiceInstance->ServiceID)
 800163a:	6841      	ldr	r1, [r0, #4]
 800163c:	b931      	cbnz	r1, 800164c <GAPS_Cleanup_Service+0x28>

            /* return success to the caller.                            */
            ret_val = 0;
         }
         else
            ret_val = GAPS_ERROR_INVALID_PARAMETER;
 800163e:	4d0b      	ldr	r5, [pc, #44]	; (800166c <GAPS_Cleanup_Service+0x48>)

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(BluetoothStackID);
 8001640:	4620      	mov	r0, r4
 8001642:	f017 fe7f 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = GAPS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8001646:	4628      	mov	r0, r5
 8001648:	b003      	add	sp, #12
 800164a:	bd30      	pop	{r4, r5, pc}
            GATT_Un_Register_Service(BluetoothStackID, ServiceInstance->ServiceID);
 800164c:	4620      	mov	r0, r4
 800164e:	f028 fa0f 	bl	8029a70 <GATT_Un_Register_Service>
            BTPS_MemInitialize(ServiceInstance, 0, GAPS_SERVER_INSTANCE_DATA_SIZE);
 8001652:	2208      	movs	r2, #8
 8001654:	2100      	movs	r1, #0
 8001656:	4628      	mov	r0, r5
 8001658:	f011 ff31 	bl	80134be <BTPS_MemInitialize>
            ret_val = 0;
 800165c:	2500      	movs	r5, #0
 800165e:	e7ef      	b.n	8001640 <GAPS_Cleanup_Service+0x1c>
      ret_val = GAPS_ERROR_INVALID_PARAMETER;
 8001660:	4d02      	ldr	r5, [pc, #8]	; (800166c <GAPS_Cleanup_Service+0x48>)
 8001662:	e7f0      	b.n	8001646 <GAPS_Cleanup_Service+0x22>
 8001664:	4d01      	ldr	r5, [pc, #4]	; (800166c <GAPS_Cleanup_Service+0x48>)
 8001666:	e7ee      	b.n	8001646 <GAPS_Cleanup_Service+0x22>
         ret_val = GAPS_ERROR_INVALID_INSTANCE_ID;
 8001668:	4d01      	ldr	r5, [pc, #4]	; (8001670 <GAPS_Cleanup_Service+0x4c>)
   return(ret_val);
 800166a:	e7ec      	b.n	8001646 <GAPS_Cleanup_Service+0x22>
 800166c:	fffffc18 	.word	0xfffffc18
 8001670:	fffffc14 	.word	0xfffffc14

08001674 <GAPS_Set_Device_Name>:
   /* terminated ASCII String of at most GAP_MAXIMUM_DEVICE_NAME_LENGTH */
   /* (not counting the trailing NULL terminator).  This function       */
   /* returns a zero if successful or a negative return error code if an*/
   /* error occurs.                                                     */
int BTPSAPI GAPS_Set_Device_Name(unsigned int BluetoothStackID, unsigned int InstanceID, char *DeviceName)
{
 8001674:	b530      	push	{r4, r5, lr}
 8001676:	b083      	sub	sp, #12
 8001678:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   Word_t                Length;
   GAPSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (DeviceName) && (BTPS_StringLength(DeviceName) <= GAP_MAXIMUM_DEVICE_NAME_LENGTH))
 800167a:	b368      	cbz	r0, 80016d8 <GAPS_Set_Device_Name+0x64>
 800167c:	4614      	mov	r4, r2
 800167e:	4605      	mov	r5, r0
 8001680:	b361      	cbz	r1, 80016dc <GAPS_Set_Device_Name+0x68>
 8001682:	b36a      	cbz	r2, 80016e0 <GAPS_Set_Device_Name+0x6c>
 8001684:	4610      	mov	r0, r2
 8001686:	f011 ff8e 	bl	80135a6 <BTPS_StringLength>
 800168a:	2830      	cmp	r0, #48	; 0x30
 800168c:	d82a      	bhi.n	80016e4 <GAPS_Set_Device_Name+0x70>
   {
      /* Acquire the specified GAPS Instance.                           */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 800168e:	a901      	add	r1, sp, #4
 8001690:	4628      	mov	r0, r5
 8001692:	f7ff fec9 	bl	8001428 <AcquireServiceInstance>
 8001696:	4605      	mov	r5, r0
 8001698:	b330      	cbz	r0, 80016e8 <GAPS_Set_Device_Name+0x74>
      {
         /* Get the length of the Instance Data.                        */
         Length = (Word_t)BTPS_StringLength(DeviceName);
 800169a:	4620      	mov	r0, r4
 800169c:	f011 ff83 	bl	80135a6 <BTPS_StringLength>
 80016a0:	b281      	uxth	r1, r0

         /* Set the length of the Device Name.                          */
         ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].DeviceNameLength), Length);
 80016a2:	9b01      	ldr	r3, [sp, #4]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <GAPS_Set_Device_Name+0x78>)
 80016a8:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80016ac:	7118      	strb	r0, [r3, #4]
 80016ae:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80016b2:	715a      	strb	r2, [r3, #5]

         /* Copy in the Device Name.                                    */
         if(Length)
 80016b4:	b929      	cbnz	r1, 80016c2 <GAPS_Set_Device_Name+0x4e>

         /* Return success to the caller.                               */
         ret_val = 0;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 80016b6:	6828      	ldr	r0, [r5, #0]
 80016b8:	f017 fe44 	bl	8019344 <BSC_UnLockBluetoothStack>
         ret_val = 0;
 80016bc:	2000      	movs	r0, #0
   else
      ret_val = GAPS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80016be:	b003      	add	sp, #12
 80016c0:	bd30      	pop	{r4, r5, pc}
            BTPS_MemCopy(InstanceData[InstanceID-1].DeviceNameInstance, DeviceName, Length);
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <GAPS_Set_Device_Name+0x78>)
 80016c8:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80016cc:	460a      	mov	r2, r1
 80016ce:	4621      	mov	r1, r4
 80016d0:	1d98      	adds	r0, r3, #6
 80016d2:	f011 fef0 	bl	80134b6 <BTPS_MemCopy>
 80016d6:	e7ee      	b.n	80016b6 <GAPS_Set_Device_Name+0x42>
      ret_val = GAPS_ERROR_INVALID_PARAMETER;
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <GAPS_Set_Device_Name+0x7c>)
 80016da:	e7f0      	b.n	80016be <GAPS_Set_Device_Name+0x4a>
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <GAPS_Set_Device_Name+0x7c>)
 80016de:	e7ee      	b.n	80016be <GAPS_Set_Device_Name+0x4a>
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <GAPS_Set_Device_Name+0x7c>)
 80016e2:	e7ec      	b.n	80016be <GAPS_Set_Device_Name+0x4a>
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <GAPS_Set_Device_Name+0x7c>)
 80016e6:	e7ea      	b.n	80016be <GAPS_Set_Device_Name+0x4a>
         ret_val = GAPS_ERROR_INVALID_INSTANCE_ID;
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <GAPS_Set_Device_Name+0x80>)
   return(ret_val);
 80016ea:	e7e8      	b.n	80016be <GAPS_Set_Device_Name+0x4a>
 80016ec:	20000cc8 	.word	0x20000cc8
 80016f0:	fffffc18 	.word	0xfffffc18
 80016f4:	fffffc14 	.word	0xfffffc14

080016f8 <GAPS_Query_Device_Name>:
   /* at least (GAP_MAXIMUM_DEVICE_NAME_LENGTH+1) to hold the Maximum   */
   /* allowable Name (plus a single character to hold the NULL          */
   /* terminator) This function returns a zero if successful or a       */
   /* negative return error code if an error occurs.                    */
int BTPSAPI GAPS_Query_Device_Name(unsigned int BluetoothStackID, unsigned int InstanceID, char *NameBuffer)
{
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   Word_t                Length;
   GAPSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (NameBuffer))
 80016fe:	b328      	cbz	r0, 800174c <GAPS_Query_Device_Name+0x54>
 8001700:	4614      	mov	r4, r2
 8001702:	b329      	cbz	r1, 8001750 <GAPS_Query_Device_Name+0x58>
 8001704:	b334      	cbz	r4, 8001754 <GAPS_Query_Device_Name+0x5c>
   {
      /* Acquire the specified GAPS Instance.                           */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8001706:	a901      	add	r1, sp, #4
 8001708:	f7ff fe8e 	bl	8001428 <AcquireServiceInstance>
 800170c:	4606      	mov	r6, r0
 800170e:	b318      	cbz	r0, 8001758 <GAPS_Query_Device_Name+0x60>
      {
         /* Get the length of the Instance Data.                        */
         Length = READ_UNALIGNED_WORD_LITTLE_ENDIAN(&(InstanceData[InstanceID-1].DeviceNameLength));
 8001710:	9901      	ldr	r1, [sp, #4]
 8001712:	3901      	subs	r1, #1
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <GAPS_Query_Device_Name+0x64>)
 8001716:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 800171a:	795a      	ldrb	r2, [r3, #5]
 800171c:	791d      	ldrb	r5, [r3, #4]
 800171e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8

         /* Verify that the length is valid.                            */
         if(Length <= GAP_MAXIMUM_DEVICE_NAME_LENGTH)
 8001722:	2d30      	cmp	r5, #48	; 0x30
 8001724:	d906      	bls.n	8001734 <GAPS_Query_Device_Name+0x3c>

            /* Return success to the caller.                            */
            ret_val            = 0;
         }
         else
            ret_val = GAPS_ERROR_INVALID_PARAMETER;
 8001726:	4c0e      	ldr	r4, [pc, #56]	; (8001760 <GAPS_Query_Device_Name+0x68>)

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 8001728:	6830      	ldr	r0, [r6, #0]
 800172a:	f017 fe0b 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = GAPS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 800172e:	4620      	mov	r0, r4
 8001730:	b002      	add	sp, #8
 8001732:	bd70      	pop	{r4, r5, r6, pc}
            BTPS_MemCopy(NameBuffer, InstanceData[InstanceID-1].DeviceNameInstance, Length);
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <GAPS_Query_Device_Name+0x64>)
 8001736:	eb03 1181 	add.w	r1, r3, r1, lsl #6
 800173a:	462a      	mov	r2, r5
 800173c:	3106      	adds	r1, #6
 800173e:	4620      	mov	r0, r4
 8001740:	f011 feb9 	bl	80134b6 <BTPS_MemCopy>
            NameBuffer[Length] = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	5563      	strb	r3, [r4, r5]
            ret_val            = 0;
 8001748:	461c      	mov	r4, r3
 800174a:	e7ed      	b.n	8001728 <GAPS_Query_Device_Name+0x30>
      ret_val = GAPS_ERROR_INVALID_PARAMETER;
 800174c:	4c04      	ldr	r4, [pc, #16]	; (8001760 <GAPS_Query_Device_Name+0x68>)
 800174e:	e7ee      	b.n	800172e <GAPS_Query_Device_Name+0x36>
 8001750:	4c03      	ldr	r4, [pc, #12]	; (8001760 <GAPS_Query_Device_Name+0x68>)
 8001752:	e7ec      	b.n	800172e <GAPS_Query_Device_Name+0x36>
 8001754:	4c02      	ldr	r4, [pc, #8]	; (8001760 <GAPS_Query_Device_Name+0x68>)
 8001756:	e7ea      	b.n	800172e <GAPS_Query_Device_Name+0x36>
         ret_val = GAPS_ERROR_INVALID_INSTANCE_ID;
 8001758:	4c02      	ldr	r4, [pc, #8]	; (8001764 <GAPS_Query_Device_Name+0x6c>)
   return(ret_val);
 800175a:	e7e8      	b.n	800172e <GAPS_Query_Device_Name+0x36>
 800175c:	20000cc8 	.word	0x20000cc8
 8001760:	fffffc18 	.word	0xfffffc18
 8001764:	fffffc14 	.word	0xfffffc14

08001768 <GAPS_Set_Device_Appearance>:
   /* zero if successful or a negative return error code if an error    */
   /* occurs.                                                           */
   /* * NOTE * The DeviceAppearance is an enumeration, which should be  */
   /*          of the form GAP_DEVICE_APPEARENCE_VALUE_XXX.             */
int BTPSAPI GAPS_Set_Device_Appearance(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t DeviceAppearance)
{
 8001768:	b510      	push	{r4, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   GAPSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID))
 800176e:	b198      	cbz	r0, 8001798 <GAPS_Set_Device_Appearance+0x30>
 8001770:	4614      	mov	r4, r2
 8001772:	b199      	cbz	r1, 800179c <GAPS_Set_Device_Appearance+0x34>
   {
      /* Acquire the specified GAPS Instance.                           */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8001774:	a901      	add	r1, sp, #4
 8001776:	f7ff fe57 	bl	8001428 <AcquireServiceInstance>
 800177a:	b188      	cbz	r0, 80017a0 <GAPS_Set_Device_Appearance+0x38>
      {
         /* Set the Device Appearance.                                  */
         ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].DeviceAppearanceInstance), DeviceAppearance);
 800177c:	9b01      	ldr	r3, [sp, #4]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <GAPS_Set_Device_Appearance+0x3c>)
 8001782:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8001786:	709c      	strb	r4, [r3, #2]
 8001788:	0a24      	lsrs	r4, r4, #8
 800178a:	70dc      	strb	r4, [r3, #3]

         /* Return success to the caller.                               */
         ret_val = 0;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 800178c:	6800      	ldr	r0, [r0, #0]
 800178e:	f017 fdd9 	bl	8019344 <BSC_UnLockBluetoothStack>
         ret_val = 0;
 8001792:	2000      	movs	r0, #0
   else
      ret_val = GAPS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8001794:	b002      	add	sp, #8
 8001796:	bd10      	pop	{r4, pc}
      ret_val = GAPS_ERROR_INVALID_PARAMETER;
 8001798:	4803      	ldr	r0, [pc, #12]	; (80017a8 <GAPS_Set_Device_Appearance+0x40>)
 800179a:	e7fb      	b.n	8001794 <GAPS_Set_Device_Appearance+0x2c>
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <GAPS_Set_Device_Appearance+0x40>)
 800179e:	e7f9      	b.n	8001794 <GAPS_Set_Device_Appearance+0x2c>
         ret_val = GAPS_ERROR_INVALID_INSTANCE_ID;
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <GAPS_Set_Device_Appearance+0x44>)
   return(ret_val);
 80017a2:	e7f7      	b.n	8001794 <GAPS_Set_Device_Appearance+0x2c>
 80017a4:	20000cc8 	.word	0x20000cc8
 80017a8:	fffffc18 	.word	0xfffffc18
 80017ac:	fffffc14 	.word	0xfffffc14

080017b0 <GAPS_Query_Device_Appearance>:
   /* successful call to GAPS_Initialize_Server().  The final parameter */
   /* is a pointer to store the current Device Appearance for the       */
   /* specified GAP Service Instance.  This function returns a zero if  */
   /* successful or a negative return error code if an error occurs.    */
int BTPSAPI GAPS_Query_Device_Appearance(unsigned int BluetoothStackID, unsigned int InstanceID, Word_t *DeviceAppearance)
{
 80017b0:	b510      	push	{r4, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   GAPSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (DeviceAppearance))
 80017b6:	b1b0      	cbz	r0, 80017e6 <GAPS_Query_Device_Appearance+0x36>
 80017b8:	4614      	mov	r4, r2
 80017ba:	b1b1      	cbz	r1, 80017ea <GAPS_Query_Device_Appearance+0x3a>
 80017bc:	b1bc      	cbz	r4, 80017ee <GAPS_Query_Device_Appearance+0x3e>
   {
      /* Acquire the specified GAPS Instance.                           */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 80017be:	a901      	add	r1, sp, #4
 80017c0:	f7ff fe32 	bl	8001428 <AcquireServiceInstance>
 80017c4:	b1a8      	cbz	r0, 80017f2 <GAPS_Query_Device_Appearance+0x42>
      {
         /* Get the current Device Appearance.                          */
         *DeviceAppearance = READ_UNALIGNED_WORD_LITTLE_ENDIAN(&(InstanceData[InstanceID-1].DeviceAppearanceInstance));
 80017c6:	9b01      	ldr	r3, [sp, #4]
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <GAPS_Query_Device_Appearance+0x48>)
 80017cc:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80017d0:	78da      	ldrb	r2, [r3, #3]
 80017d2:	789b      	ldrb	r3, [r3, #2]
 80017d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017d8:	8023      	strh	r3, [r4, #0]

         /* Return success to the caller.                               */
         ret_val = 0;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 80017da:	6800      	ldr	r0, [r0, #0]
 80017dc:	f017 fdb2 	bl	8019344 <BSC_UnLockBluetoothStack>
         ret_val = 0;
 80017e0:	2000      	movs	r0, #0
   else
      ret_val = GAPS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80017e2:	b002      	add	sp, #8
 80017e4:	bd10      	pop	{r4, pc}
      ret_val = GAPS_ERROR_INVALID_PARAMETER;
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <GAPS_Query_Device_Appearance+0x4c>)
 80017e8:	e7fb      	b.n	80017e2 <GAPS_Query_Device_Appearance+0x32>
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <GAPS_Query_Device_Appearance+0x4c>)
 80017ec:	e7f9      	b.n	80017e2 <GAPS_Query_Device_Appearance+0x32>
 80017ee:	4803      	ldr	r0, [pc, #12]	; (80017fc <GAPS_Query_Device_Appearance+0x4c>)
 80017f0:	e7f7      	b.n	80017e2 <GAPS_Query_Device_Appearance+0x32>
         ret_val = GAPS_ERROR_INVALID_INSTANCE_ID;
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <GAPS_Query_Device_Appearance+0x50>)
   return(ret_val);
 80017f4:	e7f5      	b.n	80017e2 <GAPS_Query_Device_Appearance+0x32>
 80017f6:	bf00      	nop
 80017f8:	20000cc8 	.word	0x20000cc8
 80017fc:	fffffc18 	.word	0xfffffc18
 8001800:	fffffc14 	.word	0xfffffc14

08001804 <TxInterrupt>:
static void TxInterrupt(void)
{
   /* Continue to transmit characters as long as there is data in the   */
   /* buffer and the transmit fifo is empty.                            */
	// while
   if((UartContext.TxBytesFree != OUTPUT_BUFFER_SIZE))
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <TxInterrupt+0x64>)
 8001806:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 800180a:	b29b      	uxth	r3, r3
 800180c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001810:	d017      	beq.n	8001842 <TxInterrupt+0x3e>
   {
      /* Place the next character into the output buffer.               */
      HCITR_UART_BASE->TDR = UartContext.TxBuffer[UartContext.TxOutIndex];
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <TxInterrupt+0x64>)
 8001814:	f8b2 343c 	ldrh.w	r3, [r2, #1084]	; 0x43c
 8001818:	4413      	add	r3, r2
 800181a:	f893 1440 	ldrb.w	r1, [r3, #1088]	; 0x440
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <TxInterrupt+0x68>)
 8001820:	8519      	strh	r1, [r3, #40]	; 0x28
      //printString("WriteDR\n");
      //printHex(UartContext.TxBuffer[UartContext.TxOutIndex], 1);
      //printString("\n");

      /* Adjust the character counts and wrap the index if necessary.   */
      UartContext.TxBytesFree++;
 8001822:	f8b2 343e 	ldrh.w	r3, [r2, #1086]	; 0x43e
 8001826:	b29b      	uxth	r3, r3
 8001828:	3301      	adds	r3, #1
 800182a:	b29b      	uxth	r3, r3
 800182c:	f8a2 343e 	strh.w	r3, [r2, #1086]	; 0x43e
      UartContext.TxOutIndex++;
 8001830:	f8b2 343c 	ldrh.w	r3, [r2, #1084]	; 0x43c
 8001834:	3301      	adds	r3, #1
 8001836:	b29b      	uxth	r3, r3
 8001838:	f8a2 343c 	strh.w	r3, [r2, #1084]	; 0x43c
      if(UartContext.TxOutIndex == OUTPUT_BUFFER_SIZE) {
 800183c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001840:	d007      	beq.n	8001852 <TxInterrupt+0x4e>
      }
   }

   /* If there are no more bytes in the queue then disable the transmit */
   /* interrupt.                                                        */
   if(UartContext.TxBytesFree == OUTPUT_BUFFER_SIZE) {
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <TxInterrupt+0x64>)
 8001844:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 8001848:	b29b      	uxth	r3, r3
 800184a:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800184e:	d005      	beq.n	800185c <TxInterrupt+0x58>
	   USARTDisableTXInterrupt();
   }
}
 8001850:	4770      	bx	lr
         UartContext.TxOutIndex = 0;
 8001852:	4613      	mov	r3, r2
 8001854:	2200      	movs	r2, #0
 8001856:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
 800185a:	e7f2      	b.n	8001842 <TxInterrupt+0x3e>
	   USARTDisableTXInterrupt();
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <TxInterrupt+0x68>)
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001864:	6013      	str	r3, [r2, #0]
}
 8001866:	e7f3      	b.n	8001850 <TxInterrupt+0x4c>
 8001868:	20000d14 	.word	0x20000d14
 800186c:	40004400 	.word	0x40004400

08001870 <RxInterrupt>:

   /* The following function is the Interrupt Service Routine for the   */
   /* UART RX interrupt.                                                */
static void RxInterrupt(void)
{
 8001870:	b500      	push	{lr}
 8001872:	b083      	sub	sp, #12
	signed portBASE_TYPE xHigherPriorityTaskWoken;
   /* Continue reading data from the fifo until it is empty or the      */
   /* buffer is full.                                                   */
	// while
   if((UartContext.RxBytesFree))
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <RxInterrupt+0x88>)
 8001876:	8b1b      	ldrh	r3, [r3, #24]
 8001878:	b29b      	uxth	r3, r3
 800187a:	b183      	cbz	r3, 800189e <RxInterrupt+0x2e>
      //if(HCITR_UART_BASE->ISR & USART_ISR_ORE) {
         //DBG_MSG(DBG_ZONE_GENERAL, ("Receive Overflow\r\n"));
      //}

      /* Read a character from the port into the receive buffer         */
      UartContext.RxBuffer[UartContext.RxInIndex] = HCITR_UART_BASE->RDR;
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <RxInterrupt+0x8c>)
 800187e:	8c98      	ldrh	r0, [r3, #36]	; 0x24
 8001880:	491d      	ldr	r1, [pc, #116]	; (80018f8 <RxInterrupt+0x88>)
 8001882:	8a8b      	ldrh	r3, [r1, #20]
 8001884:	18ca      	adds	r2, r1, r3
 8001886:	7690      	strb	r0, [r2, #26]
      //HAL_UART_Receive_IT(&huart2, &UartContext.RxBuffer[UartContext.RxInIndex], 1);
      //printHex(UartContext.RxBuffer[UartContext.RxInIndex], 1);
      //printString("\n");
      /* Update the count variables.                                    */
      UartContext.RxBytesFree--;
 8001888:	8b0a      	ldrh	r2, [r1, #24]
 800188a:	b292      	uxth	r2, r2
 800188c:	3a01      	subs	r2, #1
 800188e:	b292      	uxth	r2, r2
 8001890:	830a      	strh	r2, [r1, #24]
      UartContext.RxInIndex++;
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	828b      	strh	r3, [r1, #20]
      if(UartContext.RxInIndex == INPUT_BUFFER_SIZE) {
 8001898:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800189c:	d025      	beq.n	80018ea <RxInterrupt+0x7a>
         UartContext.RxInIndex = 0;
      }
   }

  /* If the buffer is full, disable the receive interrupt.          */
  if(!UartContext.RxBytesFree) {
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <RxInterrupt+0x88>)
 80018a0:	8b1b      	ldrh	r3, [r3, #24]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	b94b      	cbnz	r3, 80018ba <RxInterrupt+0x4a>
	  FlowOff();
 80018a6:	4a16      	ldr	r2, [pc, #88]	; (8001900 <RxInterrupt+0x90>)
 80018a8:	6953      	ldr	r3, [r2, #20]
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6153      	str	r3, [r2, #20]
	  USARTDisableRXInterrupt();
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <RxInterrupt+0x8c>)
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	f023 0320 	bic.w	r3, r3, #32
 80018b8:	6013      	str	r3, [r2, #0]
  }

   if(UartContext.SuspendState == hssSuspendWait)
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <RxInterrupt+0x88>)
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d016      	beq.n	80018f0 <RxInterrupt+0x80>
   {
      /* Indicate the suspend is interrupted.                           */
      UartContext.SuspendState = hssSuspendWaitInterrupted;
   }

   xHigherPriorityTaskWoken = pdFALSE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	9301      	str	r3, [sp, #4]
   xSemaphoreGiveFromISR(UartContext.DataReceivedEvent, &xHigherPriorityTaskWoken);
 80018c6:	a901      	add	r1, sp, #4
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <RxInterrupt+0x88>)
 80018ca:	6858      	ldr	r0, [r3, #4]
 80018cc:	f00f fcd2 	bl	8011274 <xQueueGiveFromISR>
   portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80018d0:	9b01      	ldr	r3, [sp, #4]
 80018d2:	b13b      	cbz	r3, 80018e4 <RxInterrupt+0x74>
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <RxInterrupt+0x94>)
 80018d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f3bf 8f4f 	dsb	sy
 80018e0:	f3bf 8f6f 	isb	sy
}
 80018e4:	b003      	add	sp, #12
 80018e6:	f85d fb04 	ldr.w	pc, [sp], #4
         UartContext.RxInIndex = 0;
 80018ea:	2200      	movs	r2, #0
 80018ec:	828a      	strh	r2, [r1, #20]
 80018ee:	e7d6      	b.n	800189e <RxInterrupt+0x2e>
      UartContext.SuspendState = hssSuspendWaitInterrupted;
 80018f0:	4b01      	ldr	r3, [pc, #4]	; (80018f8 <RxInterrupt+0x88>)
 80018f2:	2202      	movs	r2, #2
 80018f4:	721a      	strb	r2, [r3, #8]
 80018f6:	e7e4      	b.n	80018c2 <RxInterrupt+0x52>
 80018f8:	20000d14 	.word	0x20000d14
 80018fc:	40004400 	.word	0x40004400
 8001900:	48000c00 	.word	0x48000c00
 8001904:	e000ed04 	.word	0xe000ed04

08001908 <RxThread>:
		what = hey_you * 10;
	}
}

static void *RxThread(void *Param)
{
 8001908:	b538      	push	{r3, r4, r5, lr}
   unsigned int Index;

#endif

   /* Loop the thread until the transport has been closed.              */
   while(HCITransportOpen)
 800190a:	e000      	b.n	800190e <RxThread+0x6>
   {
      /* Wait until there is data available in the receive buffer.      */
      while(((TotalLength = (INPUT_BUFFER_SIZE - UartContext.RxBytesFree)) == 0) && (HCITransportOpen))
         xSemaphoreTake(UartContext.DataReceivedEvent, portMAX_DELAY);

      if(TotalLength)
 800190c:	b9a3      	cbnz	r3, 8001938 <RxThread+0x30>
   while(HCITransportOpen)
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <RxThread+0x98>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d040      	beq.n	8001998 <RxThread+0x90>
      while(((TotalLength = (INPUT_BUFFER_SIZE - UartContext.RxBytesFree)) == 0) && (HCITransportOpen))
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <RxThread+0x9c>)
 8001918:	8b1b      	ldrh	r3, [r3, #24]
 800191a:	b29b      	uxth	r3, r3
 800191c:	f5d3 6384 	rsbs	r3, r3, #1056	; 0x420
 8001920:	d1f4      	bne.n	800190c <RxThread+0x4>
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <RxThread+0x98>)
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	2a00      	cmp	r2, #0
 8001928:	d0f0      	beq.n	800190c <RxThread+0x4>
         xSemaphoreTake(UartContext.DataReceivedEvent, portMAX_DELAY);
 800192a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <RxThread+0x9c>)
 8001930:	6858      	ldr	r0, [r3, #4]
 8001932:	f00f fda7 	bl	8011484 <xQueueSemaphoreTake>
 8001936:	e7ee      	b.n	8001916 <RxThread+0xe>
      {
         /* Determine the maximum number of characters that we can send */
         /* before we reach the end of the buffer.  We need to process  */
         /* the smaller of the max characters or the number of          */
         /* characters that are in the buffer.                          */
         MaxLength   = (INPUT_BUFFER_SIZE - UartContext.RxOutIndex);
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <RxThread+0x9c>)
 800193a:	8ad2      	ldrh	r2, [r2, #22]
 800193c:	f5c2 6484 	rsb	r4, r2, #1056	; 0x420
         if(TotalLength > MaxLength)
 8001940:	42a3      	cmp	r3, r4
 8001942:	d800      	bhi.n	8001946 <RxThread+0x3e>
      while(((TotalLength = (INPUT_BUFFER_SIZE - UartContext.RxBytesFree)) == 0) && (HCITransportOpen))
 8001944:	461c      	mov	r4, r3
         }

#endif

         /* Call the upper layer back with the data.                    */
         if(UartContext.COMDataCallbackFunction)
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <RxThread+0x9c>)
 8001948:	68dd      	ldr	r5, [r3, #12]
 800194a:	b135      	cbz	r5, 800195a <RxThread+0x52>
            (*UartContext.COMDataCallbackFunction)(TRANSPORT_ID, TotalLength, &(UartContext.RxBuffer[UartContext.RxOutIndex]), UartContext.COMDataCallbackParameter);
 800194c:	3218      	adds	r2, #24
 800194e:	441a      	add	r2, r3
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	3202      	adds	r2, #2
 8001954:	4621      	mov	r1, r4
 8001956:	2001      	movs	r0, #1
 8001958:	47a8      	blx	r5

         /* Adjust the Out Index and handle any looping.                */
         UartContext.RxOutIndex += TotalLength;
 800195a:	b2a4      	uxth	r4, r4
 800195c:	4a11      	ldr	r2, [pc, #68]	; (80019a4 <RxThread+0x9c>)
 800195e:	8ad3      	ldrh	r3, [r2, #22]
 8001960:	4423      	add	r3, r4
 8001962:	b29b      	uxth	r3, r3
 8001964:	82d3      	strh	r3, [r2, #22]
         if(UartContext.RxOutIndex == INPUT_BUFFER_SIZE)
 8001966:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800196a:	d011      	beq.n	8001990 <RxThread+0x88>
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800196c:	2301      	movs	r3, #1
 800196e:	f383 8810 	msr	PRIMASK, r3
            UartContext.RxOutIndex = 0;

         /* Credit the amount that was processed and make sure the      */
         /* receive interrupt is enabled.                               */
         DisableInterrupts();
         UartContext.RxBytesFree += TotalLength;
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <RxThread+0x9c>)
 8001974:	8b13      	ldrh	r3, [r2, #24]
 8001976:	fa14 f483 	uxtah	r4, r4, r3
 800197a:	b2a3      	uxth	r3, r4
 800197c:	8313      	strh	r3, [r2, #24]
         //USART_ITConfig(HCITR_UART_BASE, USART_IT_RXNE, ENABLE);
         USARTEnableRXInterrupt();
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <RxThread+0xa0>)
 8001980:	6813      	ldr	r3, [r2, #0]
 8001982:	f043 0320 	orr.w	r3, r3, #32
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	f383 8810 	msr	PRIMASK, r3
}
 800198e:	e7be      	b.n	800190e <RxThread+0x6>
            UartContext.RxOutIndex = 0;
 8001990:	4613      	mov	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	82da      	strh	r2, [r3, #22]
 8001996:	e7e9      	b.n	800196c <RxThread+0x64>
      }
   }

   /* Set the thread handle to NULL to indicate the thread is ready to  */
   /* terminate.                                                        */
   UartContext.ReceiveThreadHandle = NULL;
 8001998:	2000      	movs	r0, #0
 800199a:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <RxThread+0x9c>)
 800199c:	6018      	str	r0, [r3, #0]

   return(NULL);
}
 800199e:	bd38      	pop	{r3, r4, r5, pc}
 80019a0:	20000d10 	.word	0x20000d10
 80019a4:	20000d14 	.word	0x20000d14
 80019a8:	40004400 	.word	0x40004400

080019ac <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_3) {
 80019ac:	2808      	cmp	r0, #8
 80019ae:	d000      	beq.n	80019b2 <HAL_GPIO_EXTI_Callback+0x6>
}
 80019b0:	4770      	bx	lr
		if(UartContext.SuspendState == hssSuspended) {
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019b4:	7a1b      	ldrb	r3, [r3, #8]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d018      	beq.n	80019ec <HAL_GPIO_EXTI_Callback+0x40>
		  if(UartContext.SuspendState == hssSuspendWait) {
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_EXTI_Callback+0x52>
		if(UartContext.TxBytesFree != OUTPUT_BUFFER_SIZE) {
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019c0:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 80019ca:	d004      	beq.n	80019d6 <HAL_GPIO_EXTI_Callback+0x2a>
		   USARTEnableTXInterrupt();
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x60>)
 80019ce:	6813      	ldr	r3, [r2, #0]
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6013      	str	r3, [r2, #0]
		USARTEnableRXInterrupt();
 80019d6:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x60>)
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	6013      	str	r3, [r2, #0]
		FlowOn();
 80019e0:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x64>)
 80019e2:	6953      	ldr	r3, [r2, #20]
 80019e4:	f023 0310 	bic.w	r3, r3, #16
 80019e8:	6153      	str	r3, [r2, #20]
}
 80019ea:	e7e1      	b.n	80019b0 <HAL_GPIO_EXTI_Callback+0x4>
		  EnableUartPeriphClock();
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x68>)
 80019ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
		  UartContext.SuspendState = hssNormal;
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x5c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	721a      	strb	r2, [r3, #8]
 80019fc:	e7df      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x12>
			 UartContext.SuspendState = hssSuspendWaitInterrupted;
 80019fe:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	721a      	strb	r2, [r3, #8]
 8001a04:	e7db      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x12>
 8001a06:	bf00      	nop
 8001a08:	20000d14 	.word	0x20000d14
 8001a0c:	40004400 	.word	0x40004400
 8001a10:	48000c00 	.word	0x48000c00
 8001a14:	40021000 	.word	0x40021000

08001a18 <USART2_IRQHandler>:
{
 8001a18:	b510      	push	{r4, lr}
	Flags = HCITR_UART_BASE->ISR;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <USART2_IRQHandler+0x68>)
 8001a1c:	69dc      	ldr	r4, [r3, #28]
	if((Flags & (USART_ISR_RXNE_RXFNE | USART_ISR_ORE))) {
 8001a1e:	f014 0f28 	tst.w	r4, #40	; 0x28
 8001a22:	d11f      	bne.n	8001a64 <USART2_IRQHandler+0x4c>
	if((Flags & USART_ISR_TXE_TXFNF)) {
 8001a24:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001a28:	d127      	bne.n	8001a7a <USART2_IRQHandler+0x62>
	if((Flags & USART_ISR_NE)) {
 8001a2a:	f014 0f04 	tst.w	r4, #4
 8001a2e:	d004      	beq.n	8001a3a <USART2_IRQHandler+0x22>
		HCITR_UART_BASE->ISR &= ~USART_ISR_NE;
 8001a30:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <USART2_IRQHandler+0x68>)
 8001a32:	69d3      	ldr	r3, [r2, #28]
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	61d3      	str	r3, [r2, #28]
	if((Flags & USART_ISR_FE)) {
 8001a3a:	f014 0f02 	tst.w	r4, #2
 8001a3e:	d004      	beq.n	8001a4a <USART2_IRQHandler+0x32>
		HCITR_UART_BASE->ISR &= ~USART_ISR_FE;
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <USART2_IRQHandler+0x68>)
 8001a42:	69d3      	ldr	r3, [r2, #28]
 8001a44:	f023 0302 	bic.w	r3, r3, #2
 8001a48:	61d3      	str	r3, [r2, #28]
	if(Flags & USART_ISR_ORE) {
 8001a4a:	f014 0f08 	tst.w	r4, #8
 8001a4e:	d002      	beq.n	8001a56 <USART2_IRQHandler+0x3e>
		what = hey_you * 10;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <USART2_IRQHandler+0x6c>)
 8001a52:	220a      	movs	r2, #10
 8001a54:	801a      	strh	r2, [r3, #0]
	if(UartContext.RxInIndex > 0) {
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <USART2_IRQHandler+0x70>)
 8001a58:	8a9b      	ldrh	r3, [r3, #20]
 8001a5a:	b113      	cbz	r3, 8001a62 <USART2_IRQHandler+0x4a>
		what = hey_you * 10;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <USART2_IRQHandler+0x6c>)
 8001a5e:	2214      	movs	r2, #20
 8001a60:	801a      	strh	r2, [r3, #0]
}
 8001a62:	bd10      	pop	{r4, pc}
		HCITR_UART_BASE->ISR &= ~USART_ISR_RXNE_RXFNE;
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	f022 0220 	bic.w	r2, r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]
		HCITR_UART_BASE->ICR |= USART_ICR_ORECF;
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	f042 0208 	orr.w	r2, r2, #8
 8001a72:	621a      	str	r2, [r3, #32]
		RxInterrupt();
 8001a74:	f7ff fefc 	bl	8001870 <RxInterrupt>
 8001a78:	e7d4      	b.n	8001a24 <USART2_IRQHandler+0xc>
		TxInterrupt();
 8001a7a:	f7ff fec3 	bl	8001804 <TxInterrupt>
 8001a7e:	e7d4      	b.n	8001a2a <USART2_IRQHandler+0x12>
 8001a80:	40004400 	.word	0x40004400
 8001a84:	20001574 	.word	0x20001574
 8001a88:	20000d14 	.word	0x20000d14

08001a8c <HCITR_COMOpen>:
   /* call to this function will return a non-zero, positive value which*/
   /* specifies the HCITransportID that is used with the remaining      */
   /* transport functions in this module.  This function returns a      */
   /* negative return value to signify an error.                        */
int BTPSAPI HCITR_COMOpen(HCI_COMMDriverInformation_t *COMMDriverInformation, HCITR_COMDataCallback_t COMDataCallback, unsigned long CallbackParameter)
{
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   int ret_val;
   //printString("HCITR_COMOpen\n");
   /* First, make sure that the port is not already open and make sure  */
   /* that valid COMM Driver Information was specified.                 */
   if((!HCITransportOpen) && (COMMDriverInformation) && (COMDataCallback))
 8001a8e:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <HCITR_COMOpen+0x10c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d176      	bne.n	8001b84 <HCITR_COMOpen+0xf8>
 8001a96:	460d      	mov	r5, r1
 8001a98:	4616      	mov	r6, r2
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d075      	beq.n	8001b8a <HCITR_COMOpen+0xfe>
 8001a9e:	2900      	cmp	r1, #0
 8001aa0:	d076      	beq.n	8001b90 <HCITR_COMOpen+0x104>
   {
      /* Initialize the return value for success.                       */
      ret_val                              = TRANSPORT_ID;

      /* Flag that the HCI Transport is open.                           */
      HCITransportOpen                     = 1;
 8001aa2:	2701      	movs	r7, #1
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <HCITR_COMOpen+0x10c>)
 8001aa6:	601f      	str	r7, [r3, #0]

      /* Initialize the context structure.                              */
      BTPS_MemInitialize(&UartContext, 0, sizeof(UartContext_t));
 8001aa8:	4c3c      	ldr	r4, [pc, #240]	; (8001b9c <HCITR_COMOpen+0x110>)
 8001aaa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f011 fd04 	bl	80134be <BTPS_MemInitialize>

      UartContext.COMDataCallbackFunction  = COMDataCallback;
 8001ab6:	60e5      	str	r5, [r4, #12]
      UartContext.COMDataCallbackParameter = CallbackParameter;
 8001ab8:	6126      	str	r6, [r4, #16]
      UartContext.TxBytesFree              = OUTPUT_BUFFER_SIZE;
 8001aba:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001abe:	f8a4 343e 	strh.w	r3, [r4, #1086]	; 0x43e
      UartContext.RxBytesFree              = INPUT_BUFFER_SIZE;
 8001ac2:	8323      	strh	r3, [r4, #24]
      UartContext.SuspendState             = hssNormal;
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	7221      	strb	r1, [r4, #8]
      //UartContext.DebugEnabled				= ENABLE;

      /* Create the event that will be used to signal data has arrived. */
      vSemaphoreCreateBinary(UartContext.DataReceivedEvent);
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4638      	mov	r0, r7
 8001acc:	f00f fa3f 	bl	8010f4e <xQueueGenericCreate>
 8001ad0:	6060      	str	r0, [r4, #4]
 8001ad2:	b120      	cbz	r0, 8001ade <HCITR_COMOpen+0x52>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f00f fa5d 	bl	8010f98 <xQueueGenericSend>

      if(UartContext.DataReceivedEvent)
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HCITR_COMOpen+0x110>)
 8001ae0:	6858      	ldr	r0, [r3, #4]
 8001ae2:	b1a8      	cbz	r0, 8001b10 <HCITR_COMOpen+0x84>
      {
         /* Make sure that the event is in the reset state.             */
         xSemaphoreTake(UartContext.DataReceivedEvent, 1);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	f00f fccd 	bl	8011484 <xQueueSemaphoreTake>

         /* Create a thread that will process the received data.        */
         UartContext.ReceiveThreadHandle = BTPS_CreateThread(RxThread, 1600, NULL);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001af0:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <HCITR_COMOpen+0x114>)
 8001af2:	f011 fd6b 	bl	80135cc <BTPS_CreateThread>
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HCITR_COMOpen+0x110>)
 8001af8:	6018      	str	r0, [r3, #0]

         if(!UartContext.ReceiveThreadHandle)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b10b      	cbz	r3, 8001b02 <HCITR_COMOpen+0x76>
      ret_val                              = TRANSPORT_ID;
 8001afe:	2701      	movs	r7, #1
 8001b00:	e008      	b.n	8001b14 <HCITR_COMOpen+0x88>
         {
            /* Failed to start the thread, delete the semaphore.        */
            vQueueDelete(UartContext.DataReceivedEvent);
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HCITR_COMOpen+0x110>)
 8001b04:	6858      	ldr	r0, [r3, #4]
 8001b06:	f00f fe31 	bl	801176c <vQueueDelete>
            ret_val = HCITR_ERROR_UNABLE_TO_OPEN_TRANSPORT;
 8001b0a:	f06f 0701 	mvn.w	r7, #1
 8001b0e:	e001      	b.n	8001b14 <HCITR_COMOpen+0x88>
         }
      }
      else
         ret_val = HCITR_ERROR_UNABLE_TO_OPEN_TRANSPORT;
 8001b10:	f06f 0701 	mvn.w	r7, #1

      /* Enable the peripheral clocks for the UART and its GPIO.        */
      EnableUartPeriphClock();
 8001b14:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HCITR_COMOpen+0x118>)
 8001b16:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	6593      	str	r3, [r2, #88]	; 0x58
      USARTDisableTXInterrupt();
 8001b1e:	4c22      	ldr	r4, [pc, #136]	; (8001ba8 <HCITR_COMOpen+0x11c>)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b26:	6023      	str	r3, [r4, #0]
      USARTDisableCTSInterrupt();
 8001b28:	4e20      	ldr	r6, [pc, #128]	; (8001bac <HCITR_COMOpen+0x120>)
 8001b2a:	6833      	ldr	r3, [r6, #0]
 8001b2c:	f023 0308 	bic.w	r3, r3, #8
 8001b30:	6033      	str	r3, [r6, #0]

      //__HAL_UART_CLEAR_FLAG(&huart2, (UART_CLEAR_TCF | UART_CLEAR_TXFECF));

      MX_USART2_UART_Init();
 8001b32:	f006 fb15 	bl	8008160 <MX_USART2_UART_Init>
      USARTEnableRXInterrupt();
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f043 0320 	orr.w	r3, r3, #32
 8001b3c:	6023      	str	r3, [r4, #0]
      FlowOff();
 8001b3e:	4d1c      	ldr	r5, [pc, #112]	; (8001bb0 <HCITR_COMOpen+0x124>)
 8001b40:	696b      	ldr	r3, [r5, #20]
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	616b      	str	r3, [r5, #20]


      SetReset();
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	f007 f9f2 	bl	8008f36 <HAL_GPIO_WritePin>
      /* Clear the reset.                                               */
      BTPS_Delay(20);
 8001b52:	2014      	movs	r0, #20
 8001b54:	f011 fb89 	bl	801326a <BTPS_Delay>
      //EXTI->PR |= EXTI_PR_PR9;
      USARTEnableCTSInterrupt();
 8001b58:	6833      	ldr	r3, [r6, #0]
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6033      	str	r3, [r6, #0]
      USARTEnableRXInterrupt();
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	f043 0320 	orr.w	r3, r3, #32
 8001b66:	6023      	str	r3, [r4, #0]
      USARTEnableTXInterrupt();
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6e:	6023      	str	r3, [r4, #0]

      //printString("CTS enable\n");
      ClearReset();
 8001b70:	2201      	movs	r2, #1
 8001b72:	2102      	movs	r1, #2
 8001b74:	4628      	mov	r0, r5
 8001b76:	f007 f9de 	bl	8008f36 <HAL_GPIO_WritePin>
      BTPS_Delay(250);
 8001b7a:	20fa      	movs	r0, #250	; 0xfa
 8001b7c:	f011 fb75 	bl	801326a <BTPS_Delay>
   } else {
      ret_val = HCITR_ERROR_UNABLE_TO_OPEN_TRANSPORT;
   }

   return(ret_val);
}
 8001b80:	4638      	mov	r0, r7
 8001b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret_val = HCITR_ERROR_UNABLE_TO_OPEN_TRANSPORT;
 8001b84:	f06f 0701 	mvn.w	r7, #1
 8001b88:	e7fa      	b.n	8001b80 <HCITR_COMOpen+0xf4>
 8001b8a:	f06f 0701 	mvn.w	r7, #1
 8001b8e:	e7f7      	b.n	8001b80 <HCITR_COMOpen+0xf4>
 8001b90:	f06f 0701 	mvn.w	r7, #1
   return(ret_val);
 8001b94:	e7f4      	b.n	8001b80 <HCITR_COMOpen+0xf4>
 8001b96:	bf00      	nop
 8001b98:	20000d10 	.word	0x20000d10
 8001b9c:	20000d14 	.word	0x20000d14
 8001ba0:	08001909 	.word	0x08001909
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40010400 	.word	0x40010400
 8001bb0:	48000c00 	.word	0x48000c00

08001bb4 <HCITR_COMClose>:
  // EXTI_InitTypeDef ExtIntConfiguration;

#endif

   /* Check to make sure that the specified Transport ID is valid.      */
   if((HCITransportID == TRANSPORT_ID) && (HCITransportOpen))
 8001bb4:	2801      	cmp	r0, #1
 8001bb6:	d000      	beq.n	8001bba <HCITR_COMClose+0x6>
 8001bb8:	4770      	bx	lr
{
 8001bba:	b570      	push	{r4, r5, r6, lr}
 8001bbc:	4604      	mov	r4, r0
   if((HCITransportID == TRANSPORT_ID) && (HCITransportOpen))
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HCITR_COMClose+0xa0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b903      	cbnz	r3, 8001bc6 <HCITR_COMClose+0x12>
      if(COMDataCallback)
         (*COMDataCallback)(HCITransportID, 0, NULL, UartContext.COMDataCallbackParameter);

      UartContext.COMDataCallbackParameter = 0;
   }
}
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
      HCITransportOpen = 0;
 8001bc6:	2500      	movs	r5, #0
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HCITR_COMClose+0xa0>)
 8001bca:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HCITR_COMClose+0xa4>)
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bd8:	f3bf 8f6f 	isb	sy
      USARTDisableRXInterrupt();
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HCITR_COMClose+0xa8>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f022 0220 	bic.w	r2, r2, #32
 8001be4:	601a      	str	r2, [r3, #0]
      USARTDisableTXInterrupt();
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bec:	601a      	str	r2, [r3, #0]
      USARTDisableCTSInterrupt();
 8001bee:	4a1c      	ldr	r2, [pc, #112]	; (8001c60 <HCITR_COMClose+0xac>)
 8001bf0:	6813      	ldr	r3, [r2, #0]
 8001bf2:	f023 0308 	bic.w	r3, r3, #8
 8001bf6:	6013      	str	r3, [r2, #0]
      FlowOff();
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <HCITR_COMClose+0xb0>)
 8001bfa:	6943      	ldr	r3, [r0, #20]
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	6143      	str	r3, [r0, #20]
      SetReset();
 8001c02:	462a      	mov	r2, r5
 8001c04:	2102      	movs	r1, #2
 8001c06:	f007 f996 	bl	8008f36 <HAL_GPIO_WritePin>
      xSemaphoreGive(UartContext.DataReceivedEvent);
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	462a      	mov	r2, r5
 8001c0e:	4629      	mov	r1, r5
 8001c10:	4815      	ldr	r0, [pc, #84]	; (8001c68 <HCITR_COMClose+0xb4>)
 8001c12:	6840      	ldr	r0, [r0, #4]
 8001c14:	f00f f9c0 	bl	8010f98 <xQueueGenericSend>
      while(UartContext.ReceiveThreadHandle)
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HCITR_COMClose+0xb4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b11b      	cbz	r3, 8001c26 <HCITR_COMClose+0x72>
         BTPS_Delay(1);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f011 fb23 	bl	801326a <BTPS_Delay>
 8001c24:	e7f8      	b.n	8001c18 <HCITR_COMClose+0x64>
      vQueueDelete((xQueueHandle)(UartContext.DataReceivedEvent));
 8001c26:	4d10      	ldr	r5, [pc, #64]	; (8001c68 <HCITR_COMClose+0xb4>)
 8001c28:	6868      	ldr	r0, [r5, #4]
 8001c2a:	f00f fd9f 	bl	801176c <vQueueDelete>
      DisableUartPeriphClock();
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HCITR_COMClose+0xb8>)
 8001c30:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001c32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001c36:	6393      	str	r3, [r2, #56]	; 0x38
      COMDataCallback   = UartContext.COMDataCallbackFunction;
 8001c38:	68ee      	ldr	r6, [r5, #12]
      UartContext.COMDataCallbackFunction = NULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60eb      	str	r3, [r5, #12]
      if(COMDataCallback)
 8001c3e:	b126      	cbz	r6, 8001c4a <HCITR_COMClose+0x96>
         (*COMDataCallback)(HCITransportID, 0, NULL, UartContext.COMDataCallbackParameter);
 8001c40:	692b      	ldr	r3, [r5, #16]
 8001c42:	2200      	movs	r2, #0
 8001c44:	4611      	mov	r1, r2
 8001c46:	4620      	mov	r0, r4
 8001c48:	47b0      	blx	r6
      UartContext.COMDataCallbackParameter = 0;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HCITR_COMClose+0xb4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
}
 8001c50:	e7b8      	b.n	8001bc4 <HCITR_COMClose+0x10>
 8001c52:	bf00      	nop
 8001c54:	20000d10 	.word	0x20000d10
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40010400 	.word	0x40010400
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	20000d14 	.word	0x20000d14
 8001c6c:	40021000 	.word	0x40021000

08001c70 <HCITR_COMReconfigure>:
void BTPSAPI HCITR_COMReconfigure(unsigned int HCITransportID, HCI_Driver_Reconfigure_Data_t *DriverReconfigureData)
{
   HCI_COMMReconfigureInformation_t *ReconfigureInformation;
//   printString("HCITR_COMReconfigure\n");
   /* Check to make sure that the specified Transport ID is valid.      */
   if((HCITransportID == TRANSPORT_ID) && (HCITransportOpen) && (DriverReconfigureData))
 8001c70:	2801      	cmp	r0, #1
 8001c72:	d000      	beq.n	8001c76 <HCITR_COMReconfigure+0x6>
            SetBaudRate(HCITR_UART_BASE, ReconfigureInformation->BaudRate);
            EnableInterrupts();
         }
      }
   }
}
 8001c74:	4770      	bx	lr
   if((HCITransportID == TRANSPORT_ID) && (HCITransportOpen) && (DriverReconfigureData))
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HCITR_COMReconfigure+0x38>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0fa      	beq.n	8001c74 <HCITR_COMReconfigure+0x4>
 8001c7e:	2900      	cmp	r1, #0
 8001c80:	d0f8      	beq.n	8001c74 <HCITR_COMReconfigure+0x4>
      if((DriverReconfigureData->ReconfigureCommand == HCI_COMM_DRIVER_RECONFIGURE_DATA_COMMAND_CHANGE_COMM_PARAMETERS) && (DriverReconfigureData->ReconfigureData))
 8001c82:	680a      	ldr	r2, [r1, #0]
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <HCITR_COMReconfigure+0x3c>)
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d1f4      	bne.n	8001c74 <HCITR_COMReconfigure+0x4>
 8001c8a:	684b      	ldr	r3, [r1, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f1      	beq.n	8001c74 <HCITR_COMReconfigure+0x4>
         if(ReconfigureInformation->ReconfigureFlags & (HCI_COMM_RECONFIGURE_INFORMATION_RECONFIGURE_FLAGS_CHANGE_BAUDRATE | HCI_COMM_RECONFIGURE_INFORMATION_RECONFIGURE_FLAGS_CHANGE_PROTOCOL))
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f013 0f03 	tst.w	r3, #3
 8001c96:	d0ed      	beq.n	8001c74 <HCITR_COMReconfigure+0x4>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f383 8810 	msr	PRIMASK, r3
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f383 8810 	msr	PRIMASK, r3
}
 8001ca4:	e7e6      	b.n	8001c74 <HCITR_COMReconfigure+0x4>
 8001ca6:	bf00      	nop
 8001ca8:	20000d10 	.word	0x20000d10
 8001cac:	00010004 	.word	0x00010004

08001cb0 <HCITR_COMWrite>:

#endif

   /* Check to make sure that the specified Transport ID is valid and   */
   /* the output buffer appears to be valid as well.                    */
   if((HCITransportID == TRANSPORT_ID) && (HCITransportOpen) && (Length) && (Buffer))
 8001cb0:	2801      	cmp	r0, #1
 8001cb2:	d162      	bne.n	8001d7a <HCITR_COMWrite+0xca>
{
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	460d      	mov	r5, r1
 8001cb8:	4616      	mov	r6, r2
   if((HCITransportID == TRANSPORT_ID) && (HCITransportOpen) && (Length) && (Buffer))
 8001cba:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HCITR_COMWrite+0xe4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d05e      	beq.n	8001d80 <HCITR_COMWrite+0xd0>
 8001cc2:	2900      	cmp	r1, #0
 8001cc4:	d05f      	beq.n	8001d86 <HCITR_COMWrite+0xd6>
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d060      	beq.n	8001d8c <HCITR_COMWrite+0xdc>
   {
      /* If the UART is suspended, resume it.                           */
      if(UartContext.SuspendState == hssSuspended)
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HCITR_COMWrite+0xe8>)
 8001ccc:	7a1b      	ldrb	r3, [r3, #8]
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d124      	bne.n	8001d1c <HCITR_COMWrite+0x6c>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f383 8810 	msr	PRIMASK, r3
      {
         DisableInterrupts();

         EnableUartPeriphClock();
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <HCITR_COMWrite+0xec>)
 8001cda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
         SetSuspendGPIO(FALSE);
         UartContext.SuspendState = hssNormal;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <HCITR_COMWrite+0xe8>)
 8001ce6:	7213      	strb	r3, [r2, #8]
 8001ce8:	f383 8810 	msr	PRIMASK, r3
}
 8001cec:	e016      	b.n	8001d1c <HCITR_COMWrite+0x6c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f383 8810 	msr	PRIMASK, r3
         }

         /* Update the bytes free and make sure the transmit interrupt  */
         /* is enabled.                                                 */
         DisableInterrupts();
         UartContext.TxBytesFree -= Count;
 8001cf4:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HCITR_COMWrite+0xe8>)
 8001cf6:	f8b2 343e 	ldrh.w	r3, [r2, #1086]	; 0x43e
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	1b1c      	subs	r4, r3, r4
 8001cfe:	b2a4      	uxth	r4, r4
 8001d00:	f8a2 443e 	strh.w	r4, [r2, #1086]	; 0x43e
         //HCITR_UART_BASE->TDR = (UartContext.TxBuffer[UartContext.TxOutIndex]);
         USARTEnableTXInterrupt();
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HCITR_COMWrite+0xf0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d0c:	601a      	str	r2, [r3, #0]
         USARTEnableRXInterrupt();
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f042 0220 	orr.w	r2, r2, #32
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	f383 8810 	msr	PRIMASK, r3
      while(Length)
 8001d1c:	b35d      	cbz	r5, 8001d76 <HCITR_COMWrite+0xc6>
         while(!UartContext.TxBytesFree) {}
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HCITR_COMWrite+0xe8>)
 8001d20:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f9      	beq.n	8001d1e <HCITR_COMWrite+0x6e>
         BytesFree = UartContext.TxBytesFree;
 8001d2a:	4f1b      	ldr	r7, [pc, #108]	; (8001d98 <HCITR_COMWrite+0xe8>)
 8001d2c:	f8b7 443e 	ldrh.w	r4, [r7, #1086]	; 0x43e
 8001d30:	b2a4      	uxth	r4, r4
         Count = (BytesFree < Count) ? BytesFree : Count;
 8001d32:	4623      	mov	r3, r4
 8001d34:	42ac      	cmp	r4, r5
 8001d36:	bfa8      	it	ge
 8001d38:	462b      	movge	r3, r5
         Count = ((OUTPUT_BUFFER_SIZE - UartContext.TxInIndex) < Count) ? (OUTPUT_BUFFER_SIZE - UartContext.TxInIndex) : Count;
 8001d3a:	f8b7 043a 	ldrh.w	r0, [r7, #1082]	; 0x43a
 8001d3e:	f5c0 6484 	rsb	r4, r0, #1056	; 0x420
 8001d42:	429c      	cmp	r4, r3
 8001d44:	bfa8      	it	ge
 8001d46:	461c      	movge	r4, r3
         BTPS_MemCopy(&(UartContext.TxBuffer[UartContext.TxInIndex]), Buffer, Count);
 8001d48:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 8001d4c:	4622      	mov	r2, r4
 8001d4e:	4631      	mov	r1, r6
 8001d50:	4438      	add	r0, r7
 8001d52:	f011 fbb0 	bl	80134b6 <BTPS_MemCopy>
         Buffer                  += Count;
 8001d56:	4426      	add	r6, r4
         Length                  -= Count;
 8001d58:	1b2d      	subs	r5, r5, r4
         UartContext.TxInIndex   += Count;
 8001d5a:	b2a4      	uxth	r4, r4
 8001d5c:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	; 0x43a
 8001d60:	4423      	add	r3, r4
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f8a7 343a 	strh.w	r3, [r7, #1082]	; 0x43a
         if(UartContext.TxInIndex == OUTPUT_BUFFER_SIZE) {
 8001d68:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001d6c:	d1bf      	bne.n	8001cee <HCITR_COMWrite+0x3e>
            UartContext.TxInIndex = 0;
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8a7 243a 	strh.w	r2, [r7, #1082]	; 0x43a
 8001d74:	e7bb      	b.n	8001cee <HCITR_COMWrite+0x3e>
         EnableInterrupts();
         //printString("WriteDR\n");
      }

      ret_val = 0;
 8001d76:	2000      	movs	r0, #0
   }
   else
      ret_val = HCITR_ERROR_WRITING_TO_PORT;

   return(ret_val);
}
 8001d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret_val = HCITR_ERROR_WRITING_TO_PORT;
 8001d7a:	f06f 0003 	mvn.w	r0, #3
}
 8001d7e:	4770      	bx	lr
      ret_val = HCITR_ERROR_WRITING_TO_PORT;
 8001d80:	f06f 0003 	mvn.w	r0, #3
 8001d84:	e7f8      	b.n	8001d78 <HCITR_COMWrite+0xc8>
 8001d86:	f06f 0003 	mvn.w	r0, #3
 8001d8a:	e7f5      	b.n	8001d78 <HCITR_COMWrite+0xc8>
 8001d8c:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 8001d90:	e7f2      	b.n	8001d78 <HCITR_COMWrite+0xc8>
 8001d92:	bf00      	nop
 8001d94:	20000d10 	.word	0x20000d10
 8001d98:	20000d14 	.word	0x20000d14
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40004400 	.word	0x40004400

08001da4 <HCITR_COMSuspend>:
{
   int ret_val;
   //printString("HCITR_COMSuspend\n");
#ifdef SUPPORT_TRANSPORT_SUSPEND

   if(HCITransportID == TRANSPORT_ID)
 8001da4:	2801      	cmp	r0, #1
 8001da6:	d122      	bne.n	8001dee <HCITR_COMSuspend+0x4a>
   {
      /* Signal that we are waiting for a suspend operation to complete.*/
      UartContext.SuspendState = hssSuspendWait;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HCITR_COMSuspend+0x50>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	721a      	strb	r2, [r3, #8]
      /* Set the CTS interrupt.                                         */
      SetSuspendGPIO(TRUE);

      /* Wait for the UART transmit buffer and FIFO to be empty.        */
      //while(((UartContext.TxBytesFree != OUTPUT_BUFFER_SIZE) || (USART_GetFlagStatus(HCITR_UART_BASE, UART_FLAG_TC) != SET)) && (UartContext.SuspendState == hssSuspendWait)) {}
      while(((UartContext.TxBytesFree != OUTPUT_BUFFER_SIZE) || (HCITR_UART_BASE->ISR & USART_ISR_TC == 0)) && (UartContext.SuspendState == hssSuspendWait)) {}
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HCITR_COMSuspend+0x50>)
 8001db0:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8001dba:	d1f8      	bne.n	8001dae <HCITR_COMSuspend+0xa>
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HCITR_COMSuspend+0x54>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	f383 8810 	msr	PRIMASK, r3

      /* Confirm that no data was received in this time and suspend the */
      /* UART.                                                          */
      DisableInterrupts();

      if(UartContext.SuspendState == hssSuspendWait)
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HCITR_COMSuspend+0x50>)
 8001dc8:	7a1b      	ldrb	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d005      	beq.n	8001dda <HCITR_COMSuspend+0x36>
      else
      {
         /* Data was received, abort suspending the UART.               */
         SetSuspendGPIO(FALSE);

         ret_val = HCITR_ERROR_SUSPEND_ABORTED;
 8001dce:	f06f 0004 	mvn.w	r0, #4
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f383 8810 	msr	PRIMASK, r3
}
 8001dd8:	4770      	bx	lr
         UartContext.SuspendState = hssSuspended;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HCITR_COMSuspend+0x50>)
 8001ddc:	2203      	movs	r2, #3
 8001dde:	721a      	strb	r2, [r3, #8]
         DisableUartPeriphClock();
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <HCITR_COMSuspend+0x58>)
 8001de2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001de4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001de8:	6393      	str	r3, [r2, #56]	; 0x38
         ret_val = 0;
 8001dea:	2000      	movs	r0, #0
 8001dec:	e7f1      	b.n	8001dd2 <HCITR_COMSuspend+0x2e>

      EnableInterrupts();

   }
   else
      ret_val = HCITR_ERROR_INVALID_PARAMETER;
 8001dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ret_val = HCITR_ERROR_INVALID_PARAMETER;

#endif

   return(ret_val);
}
 8001df2:	4770      	bx	lr
 8001df4:	20000d14 	.word	0x20000d14
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40021000 	.word	0x40021000

08001e00 <HCITxInterruptHandler>:
#endif

   return(ret_val);
}

void HCITxInterruptHandler(void) {
 8001e00:	b508      	push	{r3, lr}
	TxInterrupt();
 8001e02:	f7ff fcff 	bl	8001804 <TxInterrupt>
}
 8001e06:	bd08      	pop	{r3, pc}

08001e08 <HCIRxInterruptHandler>:
void HCIRxInterruptHandler(void) {
 8001e08:	b508      	push	{r3, lr}
	RxInterrupt();
 8001e0a:	f7ff fd31 	bl	8001870 <RxInterrupt>
}
 8001e0e:	bd08      	pop	{r3, pc}

08001e10 <AddCommand>:
{
   int ret_val = 0;

   /* First, make sure that the parameters passed to us appear to be    */
   /* semi-valid.                                                       */
   if((CommandName) && (CommandFunction))
 8001e10:	b198      	cbz	r0, 8001e3a <AddCommand+0x2a>
 8001e12:	4602      	mov	r2, r0
 8001e14:	b199      	cbz	r1, 8001e3e <AddCommand+0x2e>
   {
      /* Next, make sure that we still have room in the Command Table   */
      /* to add commands.                                               */
      if(NumberCommands < MAX_SUPPORTED_COMMANDS)
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <AddCommand+0x38>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d811      	bhi.n	8001e42 <AddCommand+0x32>
{
 8001e1e:	b410      	push	{r4}
      {
         /* Simply add the command data to the command table and        */
         /* increment the number of supported commands.                 */
         CommandTable[NumberCommands].CommandName       = CommandName;
 8001e20:	480a      	ldr	r0, [pc, #40]	; (8001e4c <AddCommand+0x3c>)
 8001e22:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
         CommandTable[NumberCommands++].CommandFunction = CommandFunction;
 8001e26:	1c5c      	adds	r4, r3, #1
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <AddCommand+0x38>)
 8001e2a:	6014      	str	r4, [r2, #0]
 8001e2c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001e30:	6059      	str	r1, [r3, #4]

         /* Return success to the caller.                               */
         ret_val                                        = 0;
 8001e32:	2000      	movs	r0, #0
   }
   else
      ret_val = 1;

   return(ret_val);
}
 8001e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e38:	4770      	bx	lr
      ret_val = 1;
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	4770      	bx	lr
 8001e3e:	2001      	movs	r0, #1
 8001e40:	4770      	bx	lr
         ret_val = 1;
 8001e42:	2001      	movs	r0, #1
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200016d4 	.word	0x200016d4
 8001e4c:	2000157c 	.word	0x2000157c

08001e50 <SetDisc>:
static int SetDisc(void)
{
   int ret_val = 0;

   /* First, check that a valid Bluetooth Stack ID exists.              */
   if(BluetoothStackID)
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SetDisc+0x18>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	b123      	cbz	r3, 8001e60 <SetDisc+0x10>
   {
      /* * NOTE * Discoverability is only applicable when we are        */
      /*          advertising so save the default Discoverability Mode  */
      /*          for later.                                            */
      LE_Parameters.DiscoverabilityMode = dmGeneralDiscoverableMode;
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SetDisc+0x1c>)
 8001e58:	2202      	movs	r2, #2
 8001e5a:	705a      	strb	r2, [r3, #1]
   int ret_val = 0;
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	4770      	bx	lr
   }
   else
   {
      /* No valid Bluetooth Stack ID exists.                            */
      ret_val = INVALID_STACK_ID_ERROR;
 8001e60:	f06f 0007 	mvn.w	r0, #7
   }

   return(ret_val);
}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20001578 	.word	0x20001578
 8001e6c:	200016cc 	.word	0x200016cc

08001e70 <SetConnect>:
static int SetConnect(void)
{
   int ret_val = 0;

   /* First, check that a valid Bluetooth Stack ID exists.              */
   if(BluetoothStackID)
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SetConnect+0x18>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b123      	cbz	r3, 8001e80 <SetConnect+0x10>
   {
      /* * NOTE * Connectability is only an applicable when advertising */
      /*          so we will just save the default connectability for   */
      /*          the next time we enable advertising.                  */
      LE_Parameters.ConnectableMode = lcmConnectable;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SetConnect+0x1c>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
   int ret_val = 0;
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4770      	bx	lr
   }
   else
   {
      /* No valid Bluetooth Stack ID exists.                            */
      ret_val = INVALID_STACK_ID_ERROR;
 8001e80:	f06f 0007 	mvn.w	r0, #7
   }

   return(ret_val);
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20001578 	.word	0x20001578
 8001e8c:	200016cc 	.word	0x200016cc

08001e90 <AppearanceToString>:
{
   Boolean_t    ret_val;
   unsigned int Index;

   /* Verify that the input parameters are semi-valid.                  */
   if(String)
 8001e90:	b119      	cbz	r1, 8001e9a <AppearanceToString+0xa>
{
 8001e92:	b410      	push	{r4}
 8001e94:	460c      	mov	r4, r1
   {
      for(Index=0,ret_val=FALSE;Index<NUMBER_OF_APPEARANCE_MAPPINGS;++Index)
 8001e96:	2300      	movs	r3, #0
 8001e98:	e002      	b.n	8001ea0 <AppearanceToString+0x10>
            break;
         }
      }
   }
   else
      ret_val = FALSE;
 8001e9a:	2000      	movs	r0, #0

   return(ret_val);
}
 8001e9c:	4770      	bx	lr
      for(Index=0,ret_val=FALSE;Index<NUMBER_OF_APPEARANCE_MAPPINGS;++Index)
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	2b1d      	cmp	r3, #29
 8001ea2:	d80d      	bhi.n	8001ec0 <AppearanceToString+0x30>
         if(AppearanceMappings[Index].Appearance == Appearance)
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <AppearanceToString+0x34>)
 8001ea6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001eaa:	4282      	cmp	r2, r0
 8001eac:	d1f7      	bne.n	8001e9e <AppearanceToString+0xe>
            *String = AppearanceMappings[Index].String;
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <AppearanceToString+0x34>)
 8001eb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	6023      	str	r3, [r4, #0]
            ret_val = TRUE;
 8001eb8:	2001      	movs	r0, #1
}
 8001eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ebe:	4770      	bx	lr
      for(Index=0,ret_val=FALSE;Index<NUMBER_OF_APPEARANCE_MAPPINGS;++Index)
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e7fa      	b.n	8001eba <AppearanceToString+0x2a>
 8001ec4:	0802f148 	.word	0x0802f148

08001ec8 <AppearanceIndexToAppearance>:
   /* TRUE on success or FALSE otherwise.                               */
static Boolean_t AppearanceIndexToAppearance(unsigned int Index, Word_t *Appearance)
{
   Boolean_t ret_val;

   if((Index < NUMBER_OF_APPEARANCE_MAPPINGS) && (Appearance))
 8001ec8:	281d      	cmp	r0, #29
 8001eca:	d806      	bhi.n	8001eda <AppearanceIndexToAppearance+0x12>
 8001ecc:	b139      	cbz	r1, 8001ede <AppearanceIndexToAppearance+0x16>
   {
      *Appearance = AppearanceMappings[Index].Appearance;
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <AppearanceIndexToAppearance+0x1c>)
 8001ed0:	f833 3030 	ldrh.w	r3, [r3, r0, lsl #3]
 8001ed4:	800b      	strh	r3, [r1, #0]
      ret_val     = TRUE;
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	4770      	bx	lr
   }
   else
      ret_val = FALSE;
 8001eda:	2000      	movs	r0, #0
 8001edc:	4770      	bx	lr
 8001ede:	2000      	movs	r0, #0

   return(ret_val);
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	0802f148 	.word	0x0802f148

08001ee8 <GAPSPopulateHandles>:
{
   unsigned int                       Index1;
   GATT_Characteristic_Information_t *CurrentCharacteristic;

   /* Verify that the input parameters are semi-valid.                  */
   if((ClientInfo) && (ServiceInfo) && (ServiceInfo->ServiceInformation.UUID.UUID_Type == guUUID_16) && (GAP_COMPARE_GAP_SERVICE_UUID_TO_UUID_16(ServiceInfo->ServiceInformation.UUID.UUID.UUID_16)))
 8001ee8:	b338      	cbz	r0, 8001f3a <GAPSPopulateHandles+0x52>
{
 8001eea:	b430      	push	{r4, r5}
 8001eec:	4604      	mov	r4, r0
   if((ClientInfo) && (ServiceInfo) && (ServiceInfo->ServiceInformation.UUID.UUID_Type == guUUID_16) && (GAP_COMPARE_GAP_SERVICE_UUID_TO_UUID_16(ServiceInfo->ServiceInformation.UUID.UUID.UUID_16)))
 8001eee:	b129      	cbz	r1, 8001efc <GAPSPopulateHandles+0x14>
 8001ef0:	688b      	ldr	r3, [r1, #8]
 8001ef2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ef6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001efa:	d001      	beq.n	8001f00 <GAPSPopulateHandles+0x18>
               }
            }
         }
      }
   }
}
 8001efc:	bc30      	pop	{r4, r5}
 8001efe:	4770      	bx	lr
      CurrentCharacteristic = ServiceInfo->CharacteristicInformationList;
 8001f00:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      if(CurrentCharacteristic)
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0fa      	beq.n	8001efc <GAPSPopulateHandles+0x14>
         for(Index1=0;Index1<ServiceInfo->NumberOfCharacteristics;Index1++,CurrentCharacteristic++)
 8001f06:	2000      	movs	r0, #0
 8001f08:	e003      	b.n	8001f12 <GAPSPopulateHandles+0x2a>
                  ClientInfo->DeviceNameHandle = CurrentCharacteristic->Characteristic_Handle;
 8001f0a:	8a5a      	ldrh	r2, [r3, #18]
 8001f0c:	8022      	strh	r2, [r4, #0]
         for(Index1=0;Index1<ServiceInfo->NumberOfCharacteristics;Index1++,CurrentCharacteristic++)
 8001f0e:	3001      	adds	r0, #1
 8001f10:	3320      	adds	r3, #32
 8001f12:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001f14:	4282      	cmp	r2, r0
 8001f16:	d9f1      	bls.n	8001efc <GAPSPopulateHandles+0x14>
            if(CurrentCharacteristic->Characteristic_UUID.UUID_Type == guUUID_16)
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d1f7      	bne.n	8001f0e <GAPSPopulateHandles+0x26>
               if(!GAP_COMPARE_GAP_DEVICE_NAME_UUID_TO_UUID_16(CurrentCharacteristic->Characteristic_UUID.UUID.UUID_16))
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f24:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f28:	f5b2 1f28 	cmp.w	r2, #2752512	; 0x2a0000
 8001f2c:	d0ed      	beq.n	8001f0a <GAPSPopulateHandles+0x22>
                  if(!GAP_COMPARE_GAP_DEVICE_APPEARANCE_UUID_TO_UUID_16(CurrentCharacteristic->Characteristic_UUID.UUID.UUID_16))
 8001f2e:	4d03      	ldr	r5, [pc, #12]	; (8001f3c <GAPSPopulateHandles+0x54>)
 8001f30:	42aa      	cmp	r2, r5
 8001f32:	d1ec      	bne.n	8001f0e <GAPSPopulateHandles+0x26>
                     ClientInfo->DeviceAppearanceHandle = CurrentCharacteristic->Characteristic_Handle;
 8001f34:	8a5a      	ldrh	r2, [r3, #18]
 8001f36:	8062      	strh	r2, [r4, #2]
                     continue;
 8001f38:	e7e9      	b.n	8001f0e <GAPSPopulateHandles+0x26>
 8001f3a:	4770      	bx	lr
 8001f3c:	002a0100 	.word	0x002a0100

08001f40 <ConfigureCapabilities>:
   /* Pairing Capabilities structure with the application's pairing     */
   /* parameters.                                                       */
static void ConfigureCapabilities(GAP_LE_Pairing_Capabilities_t *Capabilities)
{
   /* Make sure the Capabilities pointer is semi-valid.                 */
   if(Capabilities)
 8001f40:	4603      	mov	r3, r0
 8001f42:	b188      	cbz	r0, 8001f68 <ConfigureCapabilities+0x28>
   {
      /* Configure the Pairing Capabilities structure.                  */
      Capabilities->Bonding_Type                    = lbtBonding;
 8001f44:	2101      	movs	r1, #1
 8001f46:	7081      	strb	r1, [r0, #2]
      Capabilities->IO_Capability                   = LE_Parameters.IOCapability;
 8001f48:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <ConfigureCapabilities+0x2c>)
 8001f4a:	7890      	ldrb	r0, [r2, #2]
 8001f4c:	7018      	strb	r0, [r3, #0]
      Capabilities->MITM                            = LE_Parameters.MITMProtection;
 8001f4e:	78d0      	ldrb	r0, [r2, #3]
 8001f50:	70d8      	strb	r0, [r3, #3]
      Capabilities->OOB_Present                     = LE_Parameters.OOBDataPresent;
 8001f52:	7912      	ldrb	r2, [r2, #4]
 8001f54:	705a      	strb	r2, [r3, #1]
      /*            negotiated key size if less than the maximum) we    */
      /*            allow the slave to power cycle and regenerate the   */
      /*            LTK for each device it is paired to WITHOUT storing */
      /*            any information on the individual devices we are    */
      /*            paired to.                                          */
      Capabilities->Maximum_Encryption_Key_Size        = GAP_LE_MAXIMUM_ENCRYPTION_KEY_SIZE;
 8001f56:	2210      	movs	r2, #16
 8001f58:	711a      	strb	r2, [r3, #4]

      /* This application only demonstrates using Long Term Key's (LTK) */
      /* for encryption of a LE Link, however we could request and send */
      /* all possible keys here if we wanted to.                        */
      Capabilities->Receiving_Keys.Encryption_Key     = TRUE;
 8001f5a:	7159      	strb	r1, [r3, #5]
      Capabilities->Receiving_Keys.Identification_Key = FALSE;
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	719a      	strb	r2, [r3, #6]
      Capabilities->Receiving_Keys.Signing_Key        = FALSE;
 8001f60:	71da      	strb	r2, [r3, #7]

      Capabilities->Sending_Keys.Encryption_Key       = TRUE;
 8001f62:	7219      	strb	r1, [r3, #8]
      Capabilities->Sending_Keys.Identification_Key   = FALSE;
 8001f64:	725a      	strb	r2, [r3, #9]
      Capabilities->Sending_Keys.Signing_Key          = FALSE;
 8001f66:	729a      	strb	r2, [r3, #10]
   }
}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	200016cc 	.word	0x200016cc

08001f70 <DisplayAdvertisingData>:
   if(Advertising_Data)
 8001f70:	b118      	cbz	r0, 8001f7a <DisplayAdvertisingData+0xa>
{
 8001f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f74:	4605      	mov	r5, r0
      for(Index = 0; Index < Advertising_Data->Number_Data_Entries; Index++)
 8001f76:	2600      	movs	r6, #0
 8001f78:	e004      	b.n	8001f84 <DisplayAdvertisingData+0x14>
 8001f7a:	4770      	bx	lr
            Display(("\r\n"));
 8001f7c:	4815      	ldr	r0, [pc, #84]	; (8001fd4 <DisplayAdvertisingData+0x64>)
 8001f7e:	f011 fc19 	bl	80137b4 <BTPS_OutputMessage>
      for(Index = 0; Index < Advertising_Data->Number_Data_Entries; Index++)
 8001f82:	3601      	adds	r6, #1
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	42b3      	cmp	r3, r6
 8001f88:	d923      	bls.n	8001fd2 <DisplayAdvertisingData+0x62>
         Display(("  AD Type: 0x%02X.\r\n", Advertising_Data->Data_Entries[Index].AD_Type));
 8001f8a:	686b      	ldr	r3, [r5, #4]
 8001f8c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 8001f90:	00a4      	lsls	r4, r4, #2
 8001f92:	4627      	mov	r7, r4
 8001f94:	5919      	ldr	r1, [r3, r4]
 8001f96:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <DisplayAdvertisingData+0x68>)
 8001f98:	f011 fc0c 	bl	80137b4 <BTPS_OutputMessage>
         Display(("  AD Length: 0x%02X.\r\n", Advertising_Data->Data_Entries[Index].AD_Data_Length));
 8001f9c:	686b      	ldr	r3, [r5, #4]
 8001f9e:	4423      	add	r3, r4
 8001fa0:	7919      	ldrb	r1, [r3, #4]
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <DisplayAdvertisingData+0x6c>)
 8001fa4:	f011 fc06 	bl	80137b4 <BTPS_OutputMessage>
         if(Advertising_Data->Data_Entries[Index].AD_Data_Buffer)
 8001fa8:	686b      	ldr	r3, [r5, #4]
 8001faa:	441c      	add	r4, r3
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0e7      	beq.n	8001f82 <DisplayAdvertisingData+0x12>
            Display(("  AD Data: "));
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <DisplayAdvertisingData+0x70>)
 8001fb4:	f011 fbfe 	bl	80137b4 <BTPS_OutputMessage>
            for(Index2 = 0; Index2 < Advertising_Data->Data_Entries[Index].AD_Data_Length; Index2++)
 8001fb8:	2400      	movs	r4, #0
 8001fba:	686b      	ldr	r3, [r5, #4]
 8001fbc:	443b      	add	r3, r7
 8001fbe:	791a      	ldrb	r2, [r3, #4]
 8001fc0:	42a2      	cmp	r2, r4
 8001fc2:	d9db      	bls.n	8001f7c <DisplayAdvertisingData+0xc>
               Display(("0x%02X ", Advertising_Data->Data_Entries[Index].AD_Data_Buffer[Index2]));
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	5d19      	ldrb	r1, [r3, r4]
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <DisplayAdvertisingData+0x74>)
 8001fca:	f011 fbf3 	bl	80137b4 <BTPS_OutputMessage>
            for(Index2 = 0; Index2 < Advertising_Data->Data_Entries[Index].AD_Data_Length; Index2++)
 8001fce:	3401      	adds	r4, #1
 8001fd0:	e7f3      	b.n	8001fba <DisplayAdvertisingData+0x4a>
}
 8001fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fd4:	0802c380 	.word	0x0802c380
 8001fd8:	0802af50 	.word	0x0802af50
 8001fdc:	0802af68 	.word	0x0802af68
 8001fe0:	0802af80 	.word	0x0802af80
 8001fe4:	0802af8c 	.word	0x0802af8c

08001fe8 <DisplayPairingInformation>:
{
 8001fe8:	b500      	push	{lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	ab04      	add	r3, sp, #16
 8001fee:	e903 0007 	stmdb	r3, {r0, r1, r2}
   switch(Pairing_Capabilities.IO_Capability)
 8001ff2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d807      	bhi.n	800200a <DisplayPairingInformation+0x22>
 8001ffa:	e8df f003 	tbb	[pc, r3]
 8001ffe:	5c03      	.short	0x5c03
 8002000:	6460      	.short	0x6460
 8002002:	68          	.byte	0x68
 8002003:	00          	.byte	0x00
         Display(("   IO Capability:       lcDisplayOnly.\r\n"));
 8002004:	483d      	ldr	r0, [pc, #244]	; (80020fc <DisplayPairingInformation+0x114>)
 8002006:	f011 fbd5 	bl	80137b4 <BTPS_OutputMessage>
   Display(("   MITM:                %s.\r\n", (Pairing_Capabilities.MITM == TRUE)?"TRUE":"FALSE"));
 800200a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d061      	beq.n	80020d6 <DisplayPairingInformation+0xee>
 8002012:	493b      	ldr	r1, [pc, #236]	; (8002100 <DisplayPairingInformation+0x118>)
 8002014:	483b      	ldr	r0, [pc, #236]	; (8002104 <DisplayPairingInformation+0x11c>)
 8002016:	f011 fbcd 	bl	80137b4 <BTPS_OutputMessage>
   Display(("   Bonding Type:        %s.\r\n", (Pairing_Capabilities.Bonding_Type == lbtBonding)?"Bonding":"No Bonding"));
 800201a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d05b      	beq.n	80020da <DisplayPairingInformation+0xf2>
 8002022:	4939      	ldr	r1, [pc, #228]	; (8002108 <DisplayPairingInformation+0x120>)
 8002024:	4839      	ldr	r0, [pc, #228]	; (800210c <DisplayPairingInformation+0x124>)
 8002026:	f011 fbc5 	bl	80137b4 <BTPS_OutputMessage>
   Display(("   OOB:                 %s.\r\n", (Pairing_Capabilities.OOB_Present == TRUE)?"OOB":"OOB Not Present"));
 800202a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d055      	beq.n	80020de <DisplayPairingInformation+0xf6>
 8002032:	4937      	ldr	r1, [pc, #220]	; (8002110 <DisplayPairingInformation+0x128>)
 8002034:	4837      	ldr	r0, [pc, #220]	; (8002114 <DisplayPairingInformation+0x12c>)
 8002036:	f011 fbbd 	bl	80137b4 <BTPS_OutputMessage>
   Display(("   Encryption Key Size: %d.\r\n", Pairing_Capabilities.Maximum_Encryption_Key_Size));
 800203a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800203e:	4836      	ldr	r0, [pc, #216]	; (8002118 <DisplayPairingInformation+0x130>)
 8002040:	f011 fbb8 	bl	80137b4 <BTPS_OutputMessage>
   Display(("   Sending Keys: \r\n"));
 8002044:	4835      	ldr	r0, [pc, #212]	; (800211c <DisplayPairingInformation+0x134>)
 8002046:	f011 fbb5 	bl	80137b4 <BTPS_OutputMessage>
   Display(("      LTK:              %s.\r\n", ((Pairing_Capabilities.Sending_Keys.Encryption_Key == TRUE)?"YES":"NO")));
 800204a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d047      	beq.n	80020e2 <DisplayPairingInformation+0xfa>
 8002052:	4933      	ldr	r1, [pc, #204]	; (8002120 <DisplayPairingInformation+0x138>)
 8002054:	4833      	ldr	r0, [pc, #204]	; (8002124 <DisplayPairingInformation+0x13c>)
 8002056:	f011 fbad 	bl	80137b4 <BTPS_OutputMessage>
   Display(("      IRK:              %s.\r\n", ((Pairing_Capabilities.Sending_Keys.Identification_Key == TRUE)?"YES":"NO")));
 800205a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d041      	beq.n	80020e6 <DisplayPairingInformation+0xfe>
 8002062:	492f      	ldr	r1, [pc, #188]	; (8002120 <DisplayPairingInformation+0x138>)
 8002064:	4830      	ldr	r0, [pc, #192]	; (8002128 <DisplayPairingInformation+0x140>)
 8002066:	f011 fba5 	bl	80137b4 <BTPS_OutputMessage>
   Display(("      CSRK:             %s.\r\n", ((Pairing_Capabilities.Sending_Keys.Signing_Key == TRUE)?"YES":"NO")));
 800206a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d03b      	beq.n	80020ea <DisplayPairingInformation+0x102>
 8002072:	492b      	ldr	r1, [pc, #172]	; (8002120 <DisplayPairingInformation+0x138>)
 8002074:	482d      	ldr	r0, [pc, #180]	; (800212c <DisplayPairingInformation+0x144>)
 8002076:	f011 fb9d 	bl	80137b4 <BTPS_OutputMessage>
   Display(("   Receiving Keys: \r\n"));
 800207a:	482d      	ldr	r0, [pc, #180]	; (8002130 <DisplayPairingInformation+0x148>)
 800207c:	f011 fb9a 	bl	80137b4 <BTPS_OutputMessage>
   Display(("      LTK:              %s.\r\n", ((Pairing_Capabilities.Receiving_Keys.Encryption_Key == TRUE)?"YES":"NO")));
 8002080:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d032      	beq.n	80020ee <DisplayPairingInformation+0x106>
 8002088:	4925      	ldr	r1, [pc, #148]	; (8002120 <DisplayPairingInformation+0x138>)
 800208a:	4826      	ldr	r0, [pc, #152]	; (8002124 <DisplayPairingInformation+0x13c>)
 800208c:	f011 fb92 	bl	80137b4 <BTPS_OutputMessage>
   Display(("      IRK:              %s.\r\n", ((Pairing_Capabilities.Receiving_Keys.Identification_Key == TRUE)?"YES":"NO")));
 8002090:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d02c      	beq.n	80020f2 <DisplayPairingInformation+0x10a>
 8002098:	4921      	ldr	r1, [pc, #132]	; (8002120 <DisplayPairingInformation+0x138>)
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <DisplayPairingInformation+0x140>)
 800209c:	f011 fb8a 	bl	80137b4 <BTPS_OutputMessage>
   Display(("      CSRK:             %s.\r\n", ((Pairing_Capabilities.Receiving_Keys.Signing_Key == TRUE)?"YES":"NO")));
 80020a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d026      	beq.n	80020f6 <DisplayPairingInformation+0x10e>
 80020a8:	491d      	ldr	r1, [pc, #116]	; (8002120 <DisplayPairingInformation+0x138>)
 80020aa:	4820      	ldr	r0, [pc, #128]	; (800212c <DisplayPairingInformation+0x144>)
 80020ac:	f011 fb82 	bl	80137b4 <BTPS_OutputMessage>
}
 80020b0:	b005      	add	sp, #20
 80020b2:	f85d fb04 	ldr.w	pc, [sp], #4
         Display(("   IO Capability:       lcDisplayYesNo.\r\n"));
 80020b6:	481f      	ldr	r0, [pc, #124]	; (8002134 <DisplayPairingInformation+0x14c>)
 80020b8:	f011 fb7c 	bl	80137b4 <BTPS_OutputMessage>
         break;
 80020bc:	e7a5      	b.n	800200a <DisplayPairingInformation+0x22>
         Display(("   IO Capability:       lcKeyboardOnly.\r\n"));
 80020be:	481e      	ldr	r0, [pc, #120]	; (8002138 <DisplayPairingInformation+0x150>)
 80020c0:	f011 fb78 	bl	80137b4 <BTPS_OutputMessage>
         break;
 80020c4:	e7a1      	b.n	800200a <DisplayPairingInformation+0x22>
         Display(("   IO Capability:       lcNoInputNoOutput.\r\n"));
 80020c6:	481d      	ldr	r0, [pc, #116]	; (800213c <DisplayPairingInformation+0x154>)
 80020c8:	f011 fb74 	bl	80137b4 <BTPS_OutputMessage>
         break;
 80020cc:	e79d      	b.n	800200a <DisplayPairingInformation+0x22>
         Display(("   IO Capability:       lcKeyboardDisplay.\r\n"));
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <DisplayPairingInformation+0x158>)
 80020d0:	f011 fb70 	bl	80137b4 <BTPS_OutputMessage>
         break;
 80020d4:	e799      	b.n	800200a <DisplayPairingInformation+0x22>
   Display(("   MITM:                %s.\r\n", (Pairing_Capabilities.MITM == TRUE)?"TRUE":"FALSE"));
 80020d6:	491b      	ldr	r1, [pc, #108]	; (8002144 <DisplayPairingInformation+0x15c>)
 80020d8:	e79c      	b.n	8002014 <DisplayPairingInformation+0x2c>
   Display(("   Bonding Type:        %s.\r\n", (Pairing_Capabilities.Bonding_Type == lbtBonding)?"Bonding":"No Bonding"));
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <DisplayPairingInformation+0x160>)
 80020dc:	e7a2      	b.n	8002024 <DisplayPairingInformation+0x3c>
   Display(("   OOB:                 %s.\r\n", (Pairing_Capabilities.OOB_Present == TRUE)?"OOB":"OOB Not Present"));
 80020de:	491b      	ldr	r1, [pc, #108]	; (800214c <DisplayPairingInformation+0x164>)
 80020e0:	e7a8      	b.n	8002034 <DisplayPairingInformation+0x4c>
   Display(("      LTK:              %s.\r\n", ((Pairing_Capabilities.Sending_Keys.Encryption_Key == TRUE)?"YES":"NO")));
 80020e2:	491b      	ldr	r1, [pc, #108]	; (8002150 <DisplayPairingInformation+0x168>)
 80020e4:	e7b6      	b.n	8002054 <DisplayPairingInformation+0x6c>
   Display(("      IRK:              %s.\r\n", ((Pairing_Capabilities.Sending_Keys.Identification_Key == TRUE)?"YES":"NO")));
 80020e6:	491a      	ldr	r1, [pc, #104]	; (8002150 <DisplayPairingInformation+0x168>)
 80020e8:	e7bc      	b.n	8002064 <DisplayPairingInformation+0x7c>
   Display(("      CSRK:             %s.\r\n", ((Pairing_Capabilities.Sending_Keys.Signing_Key == TRUE)?"YES":"NO")));
 80020ea:	4919      	ldr	r1, [pc, #100]	; (8002150 <DisplayPairingInformation+0x168>)
 80020ec:	e7c2      	b.n	8002074 <DisplayPairingInformation+0x8c>
   Display(("      LTK:              %s.\r\n", ((Pairing_Capabilities.Receiving_Keys.Encryption_Key == TRUE)?"YES":"NO")));
 80020ee:	4918      	ldr	r1, [pc, #96]	; (8002150 <DisplayPairingInformation+0x168>)
 80020f0:	e7cb      	b.n	800208a <DisplayPairingInformation+0xa2>
   Display(("      IRK:              %s.\r\n", ((Pairing_Capabilities.Receiving_Keys.Identification_Key == TRUE)?"YES":"NO")));
 80020f2:	4917      	ldr	r1, [pc, #92]	; (8002150 <DisplayPairingInformation+0x168>)
 80020f4:	e7d1      	b.n	800209a <DisplayPairingInformation+0xb2>
   Display(("      CSRK:             %s.\r\n", ((Pairing_Capabilities.Receiving_Keys.Signing_Key == TRUE)?"YES":"NO")));
 80020f6:	4916      	ldr	r1, [pc, #88]	; (8002150 <DisplayPairingInformation+0x168>)
 80020f8:	e7d7      	b.n	80020aa <DisplayPairingInformation+0xc2>
 80020fa:	bf00      	nop
 80020fc:	0802afd4 	.word	0x0802afd4
 8002100:	0802af94 	.word	0x0802af94
 8002104:	0802b0b8 	.word	0x0802b0b8
 8002108:	0802afa4 	.word	0x0802afa4
 800210c:	0802b0d8 	.word	0x0802b0d8
 8002110:	0802afb8 	.word	0x0802afb8
 8002114:	0802b0f8 	.word	0x0802b0f8
 8002118:	0802b118 	.word	0x0802b118
 800211c:	0802b138 	.word	0x0802b138
 8002120:	0802afcc 	.word	0x0802afcc
 8002124:	0802b14c 	.word	0x0802b14c
 8002128:	0802b16c 	.word	0x0802b16c
 800212c:	0802b18c 	.word	0x0802b18c
 8002130:	0802b1ac 	.word	0x0802b1ac
 8002134:	0802b000 	.word	0x0802b000
 8002138:	0802b02c 	.word	0x0802b02c
 800213c:	0802b058 	.word	0x0802b058
 8002140:	0802b088 	.word	0x0802b088
 8002144:	0802af9c 	.word	0x0802af9c
 8002148:	0802afb0 	.word	0x0802afb0
 800214c:	0802afc8 	.word	0x0802afc8
 8002150:	0802afd0 	.word	0x0802afd0

08002154 <DisplayUsage>:
{
 8002154:	b508      	push	{r3, lr}
 8002156:	4601      	mov	r1, r0
   Display(("Usage: %s.\r\n",UsageString));
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <DisplayUsage+0xc>)
 800215a:	f011 fb2b 	bl	80137b4 <BTPS_OutputMessage>
}
 800215e:	bd08      	pop	{r3, pc}
 8002160:	0802b1c4 	.word	0x0802b1c4

08002164 <DisplayUUID>:
{
 8002164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002168:	b08f      	sub	sp, #60	; 0x3c
   if(UUID)
 800216a:	b120      	cbz	r0, 8002176 <DisplayUUID+0x12>
 800216c:	4601      	mov	r1, r0
      if(UUID->UUID_Type == guUUID_16)
 800216e:	7803      	ldrb	r3, [r0, #0]
 8002170:	b13b      	cbz	r3, 8002182 <DisplayUUID+0x1e>
         if(UUID->UUID_Type == guUUID_128)
 8002172:	2b01      	cmp	r3, #1
 8002174:	d00b      	beq.n	800218e <DisplayUUID+0x2a>
   Display((".\r\n"));
 8002176:	481c      	ldr	r0, [pc, #112]	; (80021e8 <DisplayUUID+0x84>)
 8002178:	f011 fb1c 	bl	80137b4 <BTPS_OutputMessage>
}
 800217c:	b00f      	add	sp, #60	; 0x3c
 800217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         Display(("%02X%02X", UUID->UUID.UUID_16.UUID_Byte1, UUID->UUID.UUID_16.UUID_Byte0));
 8002182:	7842      	ldrb	r2, [r0, #1]
 8002184:	7881      	ldrb	r1, [r0, #2]
 8002186:	4819      	ldr	r0, [pc, #100]	; (80021ec <DisplayUUID+0x88>)
 8002188:	f011 fb14 	bl	80137b4 <BTPS_OutputMessage>
 800218c:	e7f3      	b.n	8002176 <DisplayUUID+0x12>
            Display(("%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", UUID->UUID.UUID_128.UUID_Byte15, UUID->UUID.UUID_128.UUID_Byte14, UUID->UUID.UUID_128.UUID_Byte13,
 800218e:	7b43      	ldrb	r3, [r0, #13]
 8002190:	7b02      	ldrb	r2, [r0, #12]
 8002192:	7ac0      	ldrb	r0, [r0, #11]
 8002194:	7a8c      	ldrb	r4, [r1, #10]
 8002196:	7a4d      	ldrb	r5, [r1, #9]
 8002198:	7a0e      	ldrb	r6, [r1, #8]
 800219a:	79cf      	ldrb	r7, [r1, #7]
 800219c:	f891 c006 	ldrb.w	ip, [r1, #6]
 80021a0:	f891 e005 	ldrb.w	lr, [r1, #5]
 80021a4:	f891 8004 	ldrb.w	r8, [r1, #4]
 80021a8:	f891 9003 	ldrb.w	r9, [r1, #3]
 80021ac:	f891 a002 	ldrb.w	sl, [r1, #2]
 80021b0:	f891 b001 	ldrb.w	fp, [r1, #1]
 80021b4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80021b8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80021bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80021c0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80021c4:	f8cd e020 	str.w	lr, [sp, #32]
 80021c8:	f8cd c01c 	str.w	ip, [sp, #28]
 80021cc:	9706      	str	r7, [sp, #24]
 80021ce:	9605      	str	r6, [sp, #20]
 80021d0:	9504      	str	r5, [sp, #16]
 80021d2:	9403      	str	r4, [sp, #12]
 80021d4:	9002      	str	r0, [sp, #8]
 80021d6:	9201      	str	r2, [sp, #4]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	7b8b      	ldrb	r3, [r1, #14]
 80021dc:	7bca      	ldrb	r2, [r1, #15]
 80021de:	7c09      	ldrb	r1, [r1, #16]
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <DisplayUUID+0x8c>)
 80021e2:	f011 fae7 	bl	80137b4 <BTPS_OutputMessage>
 80021e6:	e7c6      	b.n	8002176 <DisplayUUID+0x12>
 80021e8:	0802cb9c 	.word	0x0802cb9c
 80021ec:	0802b20c 	.word	0x0802b20c
 80021f0:	0802b1d4 	.word	0x0802b1d4

080021f4 <HRSPopulateHandles>:
   if((DeviceInfo) && (ServiceDiscoveryData) && (ServiceDiscoveryData->ServiceInformation.UUID.UUID_Type == guUUID_16) && (HRS_COMPARE_HRS_SERVICE_UUID_TO_UUID_16(ServiceDiscoveryData->ServiceInformation.UUID.UUID.UUID_16)))
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d061      	beq.n	80022bc <HRSPopulateHandles+0xc8>
{
 80021f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021fc:	460c      	mov	r4, r1
 80021fe:	4607      	mov	r7, r0
   if((DeviceInfo) && (ServiceDiscoveryData) && (ServiceDiscoveryData->ServiceInformation.UUID.UUID_Type == guUUID_16) && (HRS_COMPARE_HRS_SERVICE_UUID_TO_UUID_16(ServiceDiscoveryData->ServiceInformation.UUID.UUID.UUID_16)))
 8002200:	b129      	cbz	r1, 800220e <HRSPopulateHandles+0x1a>
 8002202:	688b      	ldr	r3, [r1, #8]
 8002204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HRSPopulateHandles+0xcc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d001      	beq.n	8002212 <HRSPopulateHandles+0x1e>
}
 800220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      CurrentCharacteristic = ServiceDiscoveryData->CharacteristicInformationList;
 8002212:	6a8d      	ldr	r5, [r1, #40]	; 0x28
      if(CurrentCharacteristic)
 8002214:	2d00      	cmp	r5, #0
 8002216:	d0fa      	beq.n	800220e <HRSPopulateHandles+0x1a>
         for(Index1 = 0; Index1 < ServiceDiscoveryData->NumberOfCharacteristics; Index1++, CurrentCharacteristic++)
 8002218:	2600      	movs	r6, #0
 800221a:	e018      	b.n	800224e <HRSPopulateHandles+0x5a>
                     DeviceInfo->ClientInfo.Body_Sensor_Location = CurrentCharacteristic->Characteristic_Handle;
 800221c:	8a6b      	ldrh	r3, [r5, #18]
 800221e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                     if(!(CurrentCharacteristic->Characteristic_Properties & GATT_CHARACTERISTIC_PROPERTIES_READ))
 8002220:	7d2b      	ldrb	r3, [r5, #20]
 8002222:	f013 0f02 	tst.w	r3, #2
 8002226:	d110      	bne.n	800224a <HRSPopulateHandles+0x56>
                        Display(("Warning - Mandatory read property of Body Sensor Location characteristic not supported!\r\n"));
 8002228:	4826      	ldr	r0, [pc, #152]	; (80022c4 <HRSPopulateHandles+0xd0>)
 800222a:	f011 fac3 	bl	80137b4 <BTPS_OutputMessage>
                     continue;
 800222e:	e00c      	b.n	800224a <HRSPopulateHandles+0x56>
                  DeviceInfo->ClientInfo.Heart_Rate_Measurement = CurrentCharacteristic->Characteristic_Handle;
 8002230:	8a6b      	ldrh	r3, [r5, #18]
 8002232:	853b      	strh	r3, [r7, #40]	; 0x28
                  ClientConfigurationHandle     = &(DeviceInfo->ClientInfo.Heart_Rate_Measurement_Client_Configuration);
 8002234:	f107 082a 	add.w	r8, r7, #42	; 0x2a
                  if(!(CurrentCharacteristic->Characteristic_Properties & GATT_CHARACTERISTIC_PROPERTIES_NOTIFY))
 8002238:	7d2b      	ldrb	r3, [r5, #20]
 800223a:	f013 0f10 	tst.w	r3, #16
 800223e:	d026      	beq.n	800228e <HRSPopulateHandles+0x9a>
               CurrentDescriptor = CurrentCharacteristic->DescriptorList;
 8002240:	69eb      	ldr	r3, [r5, #28]
               if((CurrentDescriptor) && (ClientConfigurationHandle))
 8002242:	b113      	cbz	r3, 800224a <HRSPopulateHandles+0x56>
 8002244:	f1b8 0f00 	cmp.w	r8, #0
 8002248:	d136      	bne.n	80022b8 <HRSPopulateHandles+0xc4>
         for(Index1 = 0; Index1 < ServiceDiscoveryData->NumberOfCharacteristics; Index1++, CurrentCharacteristic++)
 800224a:	3601      	adds	r6, #1
 800224c:	3520      	adds	r5, #32
 800224e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002250:	42b3      	cmp	r3, r6
 8002252:	d9dc      	bls.n	800220e <HRSPopulateHandles+0x1a>
            if(CurrentCharacteristic->Characteristic_UUID.UUID_Type == guUUID_16)
 8002254:	782b      	ldrb	r3, [r5, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f7      	bne.n	800224a <HRSPopulateHandles+0x56>
               if(!HRS_COMPARE_HRS_HEART_RATE_MEASUREMENT_UUID_TO_UUID_16(CurrentCharacteristic->Characteristic_UUID.UUID.UUID_16))
 800225a:	682b      	ldr	r3, [r5, #0]
 800225c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002260:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <HRSPopulateHandles+0xd4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d0e2      	beq.n	8002230 <HRSPopulateHandles+0x3c>
                  if(!HRS_COMPARE_HRS_BODY_SENSOR_LOCATION_UUID_TO_UUID_16(CurrentCharacteristic->Characteristic_UUID.UUID.UUID_16))
 800226a:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800226e:	4293      	cmp	r3, r2
 8002270:	d0d4      	beq.n	800221c <HRSPopulateHandles+0x28>
                     if(!HRS_COMPARE_HRS_HEART_RATE_CONTROL_POINT_UUID_TO_UUID_16(CurrentCharacteristic->Characteristic_UUID.UUID.UUID_16))
 8002272:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002276:	4293      	cmp	r3, r2
 8002278:	d1e7      	bne.n	800224a <HRSPopulateHandles+0x56>
                        DeviceInfo->ClientInfo.Heart_Rate_Control_Point = CurrentCharacteristic->Characteristic_Handle;
 800227a:	8a6b      	ldrh	r3, [r5, #18]
 800227c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                        if(!(CurrentCharacteristic->Characteristic_Properties & GATT_CHARACTERISTIC_PROPERTIES_WRITE))
 800227e:	7d2b      	ldrb	r3, [r5, #20]
 8002280:	f013 0f08 	tst.w	r3, #8
 8002284:	d1e1      	bne.n	800224a <HRSPopulateHandles+0x56>
                           Display(("Warning - Mandatory write property of Heart Rate Control Point characteristic not supported!\r\n"));
 8002286:	4811      	ldr	r0, [pc, #68]	; (80022cc <HRSPopulateHandles+0xd8>)
 8002288:	f011 fa94 	bl	80137b4 <BTPS_OutputMessage>
                        continue;
 800228c:	e7dd      	b.n	800224a <HRSPopulateHandles+0x56>
                     Display(("Warning - Mandatory notify property of Heart Rate Measurement characteristic not supported!\r\n"));
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <HRSPopulateHandles+0xdc>)
 8002290:	f011 fa90 	bl	80137b4 <BTPS_OutputMessage>
 8002294:	e7d4      	b.n	8002240 <HRSPopulateHandles+0x4c>
                  for(Index2 = 0; Index2 < CurrentCharacteristic->NumberOfDescriptors; Index2++, CurrentDescriptor++)
 8002296:	3201      	adds	r2, #1
 8002298:	3314      	adds	r3, #20
 800229a:	69a9      	ldr	r1, [r5, #24]
 800229c:	4291      	cmp	r1, r2
 800229e:	d9d4      	bls.n	800224a <HRSPopulateHandles+0x56>
                     if(CurrentDescriptor->Characteristic_Descriptor_UUID.UUID_Type == guUUID_16)
 80022a0:	7899      	ldrb	r1, [r3, #2]
 80022a2:	2900      	cmp	r1, #0
 80022a4:	d1f7      	bne.n	8002296 <HRSPopulateHandles+0xa2>
                        if(GATT_COMPARE_CLIENT_CHARACTERISTIC_CONFIGURATION_ATTRIBUTE_TYPE_TO_BLUETOOTH_UUID_16(CurrentDescriptor->Characteristic_Descriptor_UUID.UUID.UUID_16))
 80022a6:	7919      	ldrb	r1, [r3, #4]
 80022a8:	2929      	cmp	r1, #41	; 0x29
 80022aa:	d1f4      	bne.n	8002296 <HRSPopulateHandles+0xa2>
 80022ac:	78d9      	ldrb	r1, [r3, #3]
 80022ae:	2902      	cmp	r1, #2
 80022b0:	d1f1      	bne.n	8002296 <HRSPopulateHandles+0xa2>
                           *ClientConfigurationHandle = CurrentDescriptor->Characteristic_Descriptor_Handle;
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	857b      	strh	r3, [r7, #42]	; 0x2a
                           break;
 80022b6:	e7c8      	b.n	800224a <HRSPopulateHandles+0x56>
                  for(Index2 = 0; Index2 < CurrentCharacteristic->NumberOfDescriptors; Index2++, CurrentDescriptor++)
 80022b8:	2200      	movs	r2, #0
 80022ba:	e7ee      	b.n	800229a <HRSPopulateHandles+0xa6>
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	00180d00 	.word	0x00180d00
 80022c4:	0802b278 	.word	0x0802b278
 80022c8:	002a3700 	.word	0x002a3700
 80022cc:	0802b218 	.word	0x0802b218
 80022d0:	0802b2d4 	.word	0x0802b2d4

080022d4 <DumpAppearanceMappings>:
{
 80022d4:	b510      	push	{r4, lr}
   for(Index=0;Index<NUMBER_OF_APPEARANCE_MAPPINGS;++Index)
 80022d6:	2400      	movs	r4, #0
 80022d8:	e008      	b.n	80022ec <DumpAppearanceMappings+0x18>
      Display(("   %u = %s.\r\n", Index, AppearanceMappings[Index].String));
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <DumpAppearanceMappings+0x20>)
 80022dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4621      	mov	r1, r4
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <DumpAppearanceMappings+0x24>)
 80022e6:	f011 fa65 	bl	80137b4 <BTPS_OutputMessage>
   for(Index=0;Index<NUMBER_OF_APPEARANCE_MAPPINGS;++Index)
 80022ea:	3401      	adds	r4, #1
 80022ec:	2c1d      	cmp	r4, #29
 80022ee:	d9f4      	bls.n	80022da <DumpAppearanceMappings+0x6>
}
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	bf00      	nop
 80022f4:	0802f148 	.word	0x0802f148
 80022f8:	0802b334 	.word	0x0802b334

080022fc <DisplayConnectLEUsage>:
{
 80022fc:	b508      	push	{r3, lr}
 80022fe:	4601      	mov	r1, r0
   Display(("Usage: %s \t", CharacteristicName));
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <DisplayConnectLEUsage+0x20>)
 8002302:	f011 fa57 	bl	80137b4 <BTPS_OutputMessage>
   Display((" [BD_ADDR] (default Public Addresses)\r\n"));
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <DisplayConnectLEUsage+0x24>)
 8002308:	f011 fa54 	bl	80137b4 <BTPS_OutputMessage>
   Display(("[RemoteDeviceAddressType (0 = Public Address, 1 = Random Address )(Optional)]\r\n"));
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <DisplayConnectLEUsage+0x28>)
 800230e:	f011 fa51 	bl	80137b4 <BTPS_OutputMessage>
   Display(("[OwnAddressType          (0 = Public Address, 1 = Random Address )(Optional)].\r\n"));
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <DisplayConnectLEUsage+0x2c>)
 8002314:	f011 fa4e 	bl	80137b4 <BTPS_OutputMessage>
}
 8002318:	bd08      	pop	{r3, pc}
 800231a:	bf00      	nop
 800231c:	0802b344 	.word	0x0802b344
 8002320:	0802b350 	.word	0x0802b350
 8002324:	0802b378 	.word	0x0802b378
 8002328:	0802b3c8 	.word	0x0802b3c8

0800232c <DisplayIOCapabilities>:
{
 800232c:	b508      	push	{r3, lr}
   Display(("I/O Capabilities: %s, MITM: %s.\r\n", IOCapabilitiesStrings[(unsigned int)(LE_Parameters.IOCapability - licDisplayOnly)], LE_Parameters.MITMProtection?"TRUE":"FALSE"));
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <DisplayIOCapabilities+0x20>)
 8002330:	7899      	ldrb	r1, [r3, #2]
 8002332:	4a07      	ldr	r2, [pc, #28]	; (8002350 <DisplayIOCapabilities+0x24>)
 8002334:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8002338:	78db      	ldrb	r3, [r3, #3]
 800233a:	b123      	cbz	r3, 8002346 <DisplayIOCapabilities+0x1a>
 800233c:	4a05      	ldr	r2, [pc, #20]	; (8002354 <DisplayIOCapabilities+0x28>)
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <DisplayIOCapabilities+0x2c>)
 8002340:	f011 fa38 	bl	80137b4 <BTPS_OutputMessage>
}
 8002344:	bd08      	pop	{r3, pc}
   Display(("I/O Capabilities: %s, MITM: %s.\r\n", IOCapabilitiesStrings[(unsigned int)(LE_Parameters.IOCapability - licDisplayOnly)], LE_Parameters.MITMProtection?"TRUE":"FALSE"));
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <DisplayIOCapabilities+0x30>)
 8002348:	e7f9      	b.n	800233e <DisplayIOCapabilities+0x12>
 800234a:	bf00      	nop
 800234c:	200016cc 	.word	0x200016cc
 8002350:	0802f2b4 	.word	0x0802f2b4
 8002354:	0802af9c 	.word	0x0802af9c
 8002358:	0802b41c 	.word	0x0802b41c
 800235c:	0802af94 	.word	0x0802af94

08002360 <ChangePairingParameters>:
   /* Simple Pairing Parameters that are exchanged during the Pairing   */
   /* procedure when Secure Simple Pairing (Security Level 4) is used.  */
   /* This function returns zero on successful execution and a negative */
   /* value on all errors.                                              */
static int ChangePairingParameters(ParameterList_t *TempParam)
{
 8002360:	b508      	push	{r3, lr}
   int ret_val;

   /* First, check that valid Bluetooth Stack ID exists.                */
   if(BluetoothStackID)
 8002362:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <ChangePairingParameters+0x70>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b383      	cbz	r3, 80023ca <ChangePairingParameters+0x6a>
   {
      /* Make sure that all of the parameters required for this function*/
      /* appear to be at least semi-valid.                              */
      if((TempParam) && (TempParam->Params[0].intParam >= 0) && (TempParam->Params[0].intParam <= 4))
 8002368:	b348      	cbz	r0, 80023be <ChangePairingParameters+0x5e>
 800236a:	6883      	ldr	r3, [r0, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db26      	blt.n	80023be <ChangePairingParameters+0x5e>
 8002370:	2b04      	cmp	r3, #4
 8002372:	dc24      	bgt.n	80023be <ChangePairingParameters+0x5e>
      {
         /* Parameters appear to be valid, map the specified parameters */
         /* into the API specific parameters.                           */
         if(TempParam->Params[0].intParam == 0)
 8002374:	b95b      	cbnz	r3, 800238e <ChangePairingParameters+0x2e>
            LE_Parameters.IOCapability = licDisplayOnly;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <ChangePairingParameters+0x74>)
 8002378:	2200      	movs	r2, #0
 800237a:	709a      	strb	r2, [r3, #2]
               }
            }
         }

         /* Finally map the Man in the Middle (MITM) Protection value.  */
         LE_Parameters.MITMProtection = (Boolean_t)(TempParam->Params[1].intParam?TRUE:FALSE);
 800237c:	6903      	ldr	r3, [r0, #16]
 800237e:	b1e3      	cbz	r3, 80023ba <ChangePairingParameters+0x5a>
 8002380:	2201      	movs	r2, #1
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <ChangePairingParameters+0x74>)
 8002384:	70da      	strb	r2, [r3, #3]

         /* Inform the user of the New I/O Capabilities.                */
         DisplayIOCapabilities();
 8002386:	f7ff ffd1 	bl	800232c <DisplayIOCapabilities>

         /* Flag success to the caller.                                 */
         ret_val = 0;
 800238a:	2000      	movs	r0, #0
      /* No valid Bluetooth Stack ID exists.                            */
      ret_val = INVALID_STACK_ID_ERROR;
   }

   return(ret_val);
}
 800238c:	bd08      	pop	{r3, pc}
            if(TempParam->Params[0].intParam == 1)
 800238e:	2b01      	cmp	r3, #1
 8002390:	d007      	beq.n	80023a2 <ChangePairingParameters+0x42>
               if(TempParam->Params[0].intParam == 2)
 8002392:	2b02      	cmp	r3, #2
 8002394:	d009      	beq.n	80023aa <ChangePairingParameters+0x4a>
                  if(TempParam->Params[0].intParam == 3)
 8002396:	2b03      	cmp	r3, #3
 8002398:	d00b      	beq.n	80023b2 <ChangePairingParameters+0x52>
                     LE_Parameters.IOCapability = licKeyboardDisplay;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <ChangePairingParameters+0x74>)
 800239c:	2204      	movs	r2, #4
 800239e:	709a      	strb	r2, [r3, #2]
 80023a0:	e7ec      	b.n	800237c <ChangePairingParameters+0x1c>
               LE_Parameters.IOCapability = licDisplayYesNo;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <ChangePairingParameters+0x74>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	709a      	strb	r2, [r3, #2]
 80023a8:	e7e8      	b.n	800237c <ChangePairingParameters+0x1c>
                  LE_Parameters.IOCapability = licKeyboardOnly;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <ChangePairingParameters+0x74>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	709a      	strb	r2, [r3, #2]
 80023b0:	e7e4      	b.n	800237c <ChangePairingParameters+0x1c>
                     LE_Parameters.IOCapability = licNoInputNoOutput;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <ChangePairingParameters+0x74>)
 80023b4:	2203      	movs	r2, #3
 80023b6:	709a      	strb	r2, [r3, #2]
 80023b8:	e7e0      	b.n	800237c <ChangePairingParameters+0x1c>
         LE_Parameters.MITMProtection = (Boolean_t)(TempParam->Params[1].intParam?TRUE:FALSE);
 80023ba:	2200      	movs	r2, #0
 80023bc:	e7e1      	b.n	8002382 <ChangePairingParameters+0x22>
         DisplayUsage("ChangePairingParameters [I/O Capability (0 = Display Only, 1 = Display Yes/No, 2 = Keyboard Only, 3 = No Input/Output, 4 = Keyboard/Display)] [MITM Requirement (0 = No, 1 = Yes)]");
 80023be:	4806      	ldr	r0, [pc, #24]	; (80023d8 <ChangePairingParameters+0x78>)
 80023c0:	f7ff fec8 	bl	8002154 <DisplayUsage>
         ret_val = INVALID_PARAMETERS_ERROR;
 80023c4:	f06f 0005 	mvn.w	r0, #5
 80023c8:	e7e0      	b.n	800238c <ChangePairingParameters+0x2c>
      ret_val = INVALID_STACK_ID_ERROR;
 80023ca:	f06f 0007 	mvn.w	r0, #7
   return(ret_val);
 80023ce:	e7dd      	b.n	800238c <ChangePairingParameters+0x2c>
 80023d0:	20001578 	.word	0x20001578
 80023d4:	200016cc 	.word	0x200016cc
 80023d8:	0802b440 	.word	0x0802b440

080023dc <SetConnectabilityMode>:
{
 80023dc:	b508      	push	{r3, lr}
   if(BluetoothStackID)
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <SetConnectabilityMode+0x54>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b30b      	cbz	r3, 8002428 <SetConnectabilityMode+0x4c>
      if((TempParam) && (TempParam->NumberofParameters >= 1) && (TempParam->Params[0].intParam >= 0) && (TempParam->Params[0].intParam <= 1))
 80023e4:	b1d0      	cbz	r0, 800241c <SetConnectabilityMode+0x40>
 80023e6:	6803      	ldr	r3, [r0, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	dd17      	ble.n	800241c <SetConnectabilityMode+0x40>
 80023ec:	6883      	ldr	r3, [r0, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db14      	blt.n	800241c <SetConnectabilityMode+0x40>
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	dc12      	bgt.n	800241c <SetConnectabilityMode+0x40>
         if(TempParam->Params[0].intParam == 0)
 80023f6:	b95b      	cbnz	r3, 8002410 <SetConnectabilityMode+0x34>
            LE_Parameters.ConnectableMode = lcmNonConnectable;
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <SetConnectabilityMode+0x58>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
         Display(("Connectability Mode: %s.\r\n", (LE_Parameters.ConnectableMode == lcmNonConnectable)?"Non Connectable":"Connectable"));
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <SetConnectabilityMode+0x58>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b94b      	cbnz	r3, 8002418 <SetConnectabilityMode+0x3c>
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <SetConnectabilityMode+0x5c>)
 8002406:	480d      	ldr	r0, [pc, #52]	; (800243c <SetConnectabilityMode+0x60>)
 8002408:	f011 f9d4 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = 0;
 800240c:	2000      	movs	r0, #0
}
 800240e:	bd08      	pop	{r3, pc}
            LE_Parameters.ConnectableMode = lcmConnectable;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <SetConnectabilityMode+0x58>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	e7f2      	b.n	80023fe <SetConnectabilityMode+0x22>
         Display(("Connectability Mode: %s.\r\n", (LE_Parameters.ConnectableMode == lcmNonConnectable)?"Non Connectable":"Connectable"));
 8002418:	4909      	ldr	r1, [pc, #36]	; (8002440 <SetConnectabilityMode+0x64>)
 800241a:	e7f4      	b.n	8002406 <SetConnectabilityMode+0x2a>
         DisplayUsage("SetConnectabilityMode [(0 = NonConectable, 1 = Connectable)]");
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <SetConnectabilityMode+0x68>)
 800241e:	f7ff fe99 	bl	8002154 <DisplayUsage>
         ret_val = INVALID_PARAMETERS_ERROR;
 8002422:	f06f 0005 	mvn.w	r0, #5
 8002426:	e7f2      	b.n	800240e <SetConnectabilityMode+0x32>
      ret_val = INVALID_STACK_ID_ERROR;
 8002428:	f06f 0007 	mvn.w	r0, #7
   return(ret_val);
 800242c:	e7ef      	b.n	800240e <SetConnectabilityMode+0x32>
 800242e:	bf00      	nop
 8002430:	20001578 	.word	0x20001578
 8002434:	200016cc 	.word	0x200016cc
 8002438:	0802b4f4 	.word	0x0802b4f4
 800243c:	0802b504 	.word	0x0802b504
 8002440:	0802b4f8 	.word	0x0802b4f8
 8002444:	0802b520 	.word	0x0802b520

08002448 <SetDiscoverabilityMode>:
{
 8002448:	b508      	push	{r3, lr}
   if(BluetoothStackID)
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <SetDiscoverabilityMode+0x60>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b33b      	cbz	r3, 80024a0 <SetDiscoverabilityMode+0x58>
      if((TempParam) && (TempParam->NumberofParameters > 0) && (TempParam->Params[0].intParam >= 0) && (TempParam->Params[0].intParam <= 2))
 8002450:	b300      	cbz	r0, 8002494 <SetDiscoverabilityMode+0x4c>
 8002452:	6803      	ldr	r3, [r0, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	dd1d      	ble.n	8002494 <SetDiscoverabilityMode+0x4c>
 8002458:	6883      	ldr	r3, [r0, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db1a      	blt.n	8002494 <SetDiscoverabilityMode+0x4c>
 800245e:	2b02      	cmp	r3, #2
 8002460:	dc18      	bgt.n	8002494 <SetDiscoverabilityMode+0x4c>
         if(TempParam->Params[0].intParam == 1)
 8002462:	2b01      	cmp	r3, #1
 8002464:	d00a      	beq.n	800247c <SetDiscoverabilityMode+0x34>
            if(TempParam->Params[0].intParam == 2)
 8002466:	2b02      	cmp	r3, #2
 8002468:	d00e      	beq.n	8002488 <SetDiscoverabilityMode+0x40>
         LE_Parameters.DiscoverabilityMode = DiscoverabilityMode;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <SetDiscoverabilityMode+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	705a      	strb	r2, [r3, #1]
         Display(("Discoverability: %s.\r\n", (DiscoverabilityMode == dmNonDiscoverableMode)?"Non":((DiscoverabilityMode == dmGeneralDiscoverableMode)?"General":"Limited")));
 8002470:	490f      	ldr	r1, [pc, #60]	; (80024b0 <SetDiscoverabilityMode+0x68>)
 8002472:	4810      	ldr	r0, [pc, #64]	; (80024b4 <SetDiscoverabilityMode+0x6c>)
 8002474:	f011 f99e 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = 0;
 8002478:	2000      	movs	r0, #0
}
 800247a:	bd08      	pop	{r3, pc}
         LE_Parameters.DiscoverabilityMode = DiscoverabilityMode;
 800247c:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <SetDiscoverabilityMode+0x64>)
 800247e:	7053      	strb	r3, [r2, #1]
         Display(("Discoverability: %s.\r\n", (DiscoverabilityMode == dmNonDiscoverableMode)?"Non":((DiscoverabilityMode == dmGeneralDiscoverableMode)?"General":"Limited")));
 8002480:	2b02      	cmp	r3, #2
 8002482:	d005      	beq.n	8002490 <SetDiscoverabilityMode+0x48>
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <SetDiscoverabilityMode+0x70>)
 8002486:	e7f4      	b.n	8002472 <SetDiscoverabilityMode+0x2a>
         LE_Parameters.DiscoverabilityMode = DiscoverabilityMode;
 8002488:	2302      	movs	r3, #2
 800248a:	4a08      	ldr	r2, [pc, #32]	; (80024ac <SetDiscoverabilityMode+0x64>)
 800248c:	7053      	strb	r3, [r2, #1]
         Display(("Discoverability: %s.\r\n", (DiscoverabilityMode == dmNonDiscoverableMode)?"Non":((DiscoverabilityMode == dmGeneralDiscoverableMode)?"General":"Limited")));
 800248e:	e7f7      	b.n	8002480 <SetDiscoverabilityMode+0x38>
 8002490:	490a      	ldr	r1, [pc, #40]	; (80024bc <SetDiscoverabilityMode+0x74>)
 8002492:	e7ee      	b.n	8002472 <SetDiscoverabilityMode+0x2a>
         DisplayUsage("SetDiscoverabilityMode [(0 = Non Discoverable, 1 = Limited Discoverable, 2 = General Discoverable)]");
 8002494:	480a      	ldr	r0, [pc, #40]	; (80024c0 <SetDiscoverabilityMode+0x78>)
 8002496:	f7ff fe5d 	bl	8002154 <DisplayUsage>
         ret_val = INVALID_PARAMETERS_ERROR;
 800249a:	f06f 0005 	mvn.w	r0, #5
 800249e:	e7ec      	b.n	800247a <SetDiscoverabilityMode+0x32>
      ret_val = INVALID_STACK_ID_ERROR;
 80024a0:	f06f 0007 	mvn.w	r0, #7
   return(ret_val);
 80024a4:	e7e9      	b.n	800247a <SetDiscoverabilityMode+0x32>
 80024a6:	bf00      	nop
 80024a8:	20001578 	.word	0x20001578
 80024ac:	200016cc 	.word	0x200016cc
 80024b0:	0802b568 	.word	0x0802b568
 80024b4:	0802b574 	.word	0x0802b574
 80024b8:	0802b560 	.word	0x0802b560
 80024bc:	0802b56c 	.word	0x0802b56c
 80024c0:	0802b58c 	.word	0x0802b58c

080024c4 <DisplayHelp>:
{
 80024c4:	b510      	push	{r4, lr}
   Display(("\r\n"));
 80024c6:	4825      	ldr	r0, [pc, #148]	; (800255c <DisplayHelp+0x98>)
 80024c8:	f011 f974 	bl	80137b4 <BTPS_OutputMessage>
   Display(("******************************************************************\r\n"));
 80024cc:	4c24      	ldr	r4, [pc, #144]	; (8002560 <DisplayHelp+0x9c>)
 80024ce:	4620      	mov	r0, r4
 80024d0:	f011 f970 	bl	80137b4 <BTPS_OutputMessage>
   Display(("* Command Options General: Help, GetLocalAddress                 *\r\n"));
 80024d4:	4823      	ldr	r0, [pc, #140]	; (8002564 <DisplayHelp+0xa0>)
 80024d6:	f011 f96d 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          SetDiscoverabilityMode,               *\r\n"));
 80024da:	4823      	ldr	r0, [pc, #140]	; (8002568 <DisplayHelp+0xa4>)
 80024dc:	f011 f96a 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          SetConnectabilityMode,                *\r\n"));
 80024e0:	4822      	ldr	r0, [pc, #136]	; (800256c <DisplayHelp+0xa8>)
 80024e2:	f011 f967 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          SetPairabilityMode,                   *\r\n"));
 80024e6:	4822      	ldr	r0, [pc, #136]	; (8002570 <DisplayHelp+0xac>)
 80024e8:	f011 f964 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          ChangePairingParameters,              *\r\n"));
 80024ec:	4821      	ldr	r0, [pc, #132]	; (8002574 <DisplayHelp+0xb0>)
 80024ee:	f011 f961 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          AdvertiseLE, StartScanning,           *\r\n"));
 80024f2:	4821      	ldr	r0, [pc, #132]	; (8002578 <DisplayHelp+0xb4>)
 80024f4:	f011 f95e 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          StopScanning, ConnectLE,              *\r\n"));
 80024f8:	4820      	ldr	r0, [pc, #128]	; (800257c <DisplayHelp+0xb8>)
 80024fa:	f011 f95b 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          DisconnectLE, PairLE,                 *\r\n"));
 80024fe:	4820      	ldr	r0, [pc, #128]	; (8002580 <DisplayHelp+0xbc>)
 8002500:	f011 f958 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          LEPasskeyResponse,                    *\r\n"));
 8002504:	481f      	ldr	r0, [pc, #124]	; (8002584 <DisplayHelp+0xc0>)
 8002506:	f011 f955 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          QueryEncryptionMode, SetPasskey,      *\r\n"));
 800250a:	481f      	ldr	r0, [pc, #124]	; (8002588 <DisplayHelp+0xc4>)
 800250c:	f011 f952 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          DiscoverGAPS, GetLocalName,           *\r\n"));
 8002510:	481e      	ldr	r0, [pc, #120]	; (800258c <DisplayHelp+0xc8>)
 8002512:	f011 f94f 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          SetLocalName, GetRemoteName,          *\r\n"));
 8002516:	481e      	ldr	r0, [pc, #120]	; (8002590 <DisplayHelp+0xcc>)
 8002518:	f011 f94c 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          SetLocalAppearance,                   *\r\n"));
 800251c:	481d      	ldr	r0, [pc, #116]	; (8002594 <DisplayHelp+0xd0>)
 800251e:	f011 f949 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          GetLocalAppearance,                   *\r\n"));
 8002522:	481d      	ldr	r0, [pc, #116]	; (8002598 <DisplayHelp+0xd4>)
 8002524:	f011 f946 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          GetRemoteAppearance,                  *\r\n"));
 8002528:	481c      	ldr	r0, [pc, #112]	; (800259c <DisplayHelp+0xd8>)
 800252a:	f011 f943 	bl	80137b4 <BTPS_OutputMessage>
   Display(("* Command Options HRP:     RegisterHRS, UnregisterHRS,           *\r\n"));
 800252e:	481c      	ldr	r0, [pc, #112]	; (80025a0 <DisplayHelp+0xdc>)
 8002530:	f011 f940 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          DiscoverHRS, ConfigureRemoteHRS,      *\r\n"));
 8002534:	481b      	ldr	r0, [pc, #108]	; (80025a4 <DisplayHelp+0xe0>)
 8002536:	f011 f93d 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          NotifyHeartRate,                      *\r\n"));
 800253a:	481b      	ldr	r0, [pc, #108]	; (80025a8 <DisplayHelp+0xe4>)
 800253c:	f011 f93a 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          GetBodySensorLocation,                *\r\n"));
 8002540:	481a      	ldr	r0, [pc, #104]	; (80025ac <DisplayHelp+0xe8>)
 8002542:	f011 f937 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          SetBodySensorLocation,                *\r\n"));
 8002546:	481a      	ldr	r0, [pc, #104]	; (80025b0 <DisplayHelp+0xec>)
 8002548:	f011 f934 	bl	80137b4 <BTPS_OutputMessage>
   Display(("*                          ResetEnergyExpended                   *\r\n"));
 800254c:	4819      	ldr	r0, [pc, #100]	; (80025b4 <DisplayHelp+0xf0>)
 800254e:	f011 f931 	bl	80137b4 <BTPS_OutputMessage>
   Display(("******************************************************************\r\n"));
 8002552:	4620      	mov	r0, r4
 8002554:	f011 f92e 	bl	80137b4 <BTPS_OutputMessage>
}
 8002558:	2000      	movs	r0, #0
 800255a:	bd10      	pop	{r4, pc}
 800255c:	0802c380 	.word	0x0802c380
 8002560:	0802b5f0 	.word	0x0802b5f0
 8002564:	0802b638 	.word	0x0802b638
 8002568:	0802b680 	.word	0x0802b680
 800256c:	0802b6c8 	.word	0x0802b6c8
 8002570:	0802b710 	.word	0x0802b710
 8002574:	0802b758 	.word	0x0802b758
 8002578:	0802b7a0 	.word	0x0802b7a0
 800257c:	0802b7e8 	.word	0x0802b7e8
 8002580:	0802b830 	.word	0x0802b830
 8002584:	0802b878 	.word	0x0802b878
 8002588:	0802b8c0 	.word	0x0802b8c0
 800258c:	0802b908 	.word	0x0802b908
 8002590:	0802b950 	.word	0x0802b950
 8002594:	0802b998 	.word	0x0802b998
 8002598:	0802b9e0 	.word	0x0802b9e0
 800259c:	0802ba28 	.word	0x0802ba28
 80025a0:	0802ba70 	.word	0x0802ba70
 80025a4:	0802bab8 	.word	0x0802bab8
 80025a8:	0802bb00 	.word	0x0802bb00
 80025ac:	0802bb48 	.word	0x0802bb48
 80025b0:	0802bb90 	.word	0x0802bb90
 80025b4:	0802bbd8 	.word	0x0802bbd8

080025b8 <DisplayPrompt>:
{
 80025b8:	b508      	push	{r3, lr}
   Display(("\r\nLE>"));
 80025ba:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DisplayPrompt+0xc>)
 80025bc:	f011 f8fa 	bl	80137b4 <BTPS_OutputMessage>
}
 80025c0:	bd08      	pop	{r3, pc}
 80025c2:	bf00      	nop
 80025c4:	0802bc20 	.word	0x0802bc20

080025c8 <DisplayFunctionError>:
{
 80025c8:	b508      	push	{r3, lr}
 80025ca:	460a      	mov	r2, r1
   Display(("Error - %s returned %d.\r\n", Function, Status));
 80025cc:	4601      	mov	r1, r0
 80025ce:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DisplayFunctionError+0x10>)
 80025d0:	f011 f8f0 	bl	80137b4 <BTPS_OutputMessage>
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop
 80025d8:	0802bc28 	.word	0x0802bc28

080025dc <SetLocalAppearance>:

   /* The following function is responsible for setting the Local Device*/
   /* Appearance value.  This function will return zero on successful   */
   /* execution and a negative value on errors.                         */
static int SetLocalAppearance(ParameterList_t *TempParam)
{
 80025dc:	b510      	push	{r4, lr}
 80025de:	b082      	sub	sp, #8
   int    ret_val;
   Word_t Appearance;

   /* Verify that the input parameters are semi-valid.                  */
   if((TempParam) && (TempParam->NumberofParameters > 0) && (TempParam->Params[0].intParam >= 0) && (TempParam->Params[0].intParam < NUMBER_OF_APPEARANCE_MAPPINGS))
 80025e0:	b390      	cbz	r0, 8002648 <SetLocalAppearance+0x6c>
 80025e2:	6802      	ldr	r2, [r0, #0]
 80025e4:	2a00      	cmp	r2, #0
 80025e6:	dd2f      	ble.n	8002648 <SetLocalAppearance+0x6c>
 80025e8:	6880      	ldr	r0, [r0, #8]
 80025ea:	2800      	cmp	r0, #0
 80025ec:	db2c      	blt.n	8002648 <SetLocalAppearance+0x6c>
 80025ee:	281d      	cmp	r0, #29
 80025f0:	d82a      	bhi.n	8002648 <SetLocalAppearance+0x6c>
   {
      /* Verify that the GAP Service is registered.                     */
      if(GAPSInstanceID)
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <SetLocalAppearance+0x84>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b30b      	cbz	r3, 800263c <SetLocalAppearance+0x60>
      {
         /* Map the Appearance Index to the GAP Appearance Value.       */
         if(AppearanceIndexToAppearance(TempParam->Params[0].intParam, &Appearance))
 80025f8:	f10d 0106 	add.w	r1, sp, #6
 80025fc:	f7ff fc64 	bl	8001ec8 <AppearanceIndexToAppearance>
 8002600:	b1b0      	cbz	r0, 8002630 <SetLocalAppearance+0x54>
         {
            /* Set the Local Appearance.                                */
            ret_val = GAPS_Set_Device_Appearance(BluetoothStackID, GAPSInstanceID, Appearance);
 8002602:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <SetLocalAppearance+0x84>)
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <SetLocalAppearance+0x88>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f7ff f8ab 	bl	8001768 <GAPS_Set_Device_Appearance>
            if(!ret_val)
 8002612:	4604      	mov	r4, r0
 8002614:	b928      	cbnz	r0, 8002622 <SetLocalAppearance+0x46>
               Display(("GAPS_Set_Device_Appearance success.\r\n"));
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <SetLocalAppearance+0x8c>)
 8002618:	f011 f8cc 	bl	80137b4 <BTPS_OutputMessage>

      ret_val = FUNCTION_ERROR;
   }

   return(ret_val);
}
 800261c:	4620      	mov	r0, r4
 800261e:	b002      	add	sp, #8
 8002620:	bd10      	pop	{r4, pc}
               DisplayFunctionError("GAPS_Set_Device_Appearance", ret_val);
 8002622:	4601      	mov	r1, r0
 8002624:	4811      	ldr	r0, [pc, #68]	; (800266c <SetLocalAppearance+0x90>)
 8002626:	f7ff ffcf 	bl	80025c8 <DisplayFunctionError>
               ret_val = FUNCTION_ERROR;
 800262a:	f06f 0403 	mvn.w	r4, #3
 800262e:	e7f5      	b.n	800261c <SetLocalAppearance+0x40>
            Display(("Invalid Appearance Index.\r\n"));
 8002630:	480f      	ldr	r0, [pc, #60]	; (8002670 <SetLocalAppearance+0x94>)
 8002632:	f011 f8bf 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = FUNCTION_ERROR;
 8002636:	f06f 0403 	mvn.w	r4, #3
 800263a:	e7ef      	b.n	800261c <SetLocalAppearance+0x40>
         Display(("GAP Service not registered.\r\n"));
 800263c:	480d      	ldr	r0, [pc, #52]	; (8002674 <SetLocalAppearance+0x98>)
 800263e:	f011 f8b9 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 8002642:	f06f 0403 	mvn.w	r4, #3
 8002646:	e7e9      	b.n	800261c <SetLocalAppearance+0x40>
      DisplayUsage("SetLocalName [Index]");
 8002648:	480b      	ldr	r0, [pc, #44]	; (8002678 <SetLocalAppearance+0x9c>)
 800264a:	f7ff fd83 	bl	8002154 <DisplayUsage>
      Display(("Where Index = \r\n"));
 800264e:	480b      	ldr	r0, [pc, #44]	; (800267c <SetLocalAppearance+0xa0>)
 8002650:	f011 f8b0 	bl	80137b4 <BTPS_OutputMessage>
      DumpAppearanceMappings();
 8002654:	f7ff fe3e 	bl	80022d4 <DumpAppearanceMappings>
      ret_val = FUNCTION_ERROR;
 8002658:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 800265c:	e7de      	b.n	800261c <SetLocalAppearance+0x40>
 800265e:	bf00      	nop
 8002660:	200016b4 	.word	0x200016b4
 8002664:	20001578 	.word	0x20001578
 8002668:	0802bc44 	.word	0x0802bc44
 800266c:	0802bc6c 	.word	0x0802bc6c
 8002670:	0802bc88 	.word	0x0802bc88
 8002674:	0802bca4 	.word	0x0802bca4
 8002678:	0802bcc4 	.word	0x0802bcc4
 800267c:	0802bcdc 	.word	0x0802bcdc

08002680 <SearchDeviceInfoEntryByBD_ADDR>:
{
 8002680:	b510      	push	{r4, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	ac02      	add	r4, sp, #8
 8002686:	e884 0006 	stmia.w	r4, {r1, r2}
   return(BSC_SearchGenericListEntry(ekBD_ADDR_t, (void *)(&BD_ADDR), BTPS_STRUCTURE_OFFSET(DeviceInfo_t, ConnectionBD_ADDR), BTPS_STRUCTURE_OFFSET(DeviceInfo_t, NextDeviceInfoPtr), (void **)(ListHead)));
 800268a:	9000      	str	r0, [sp, #0]
 800268c:	2334      	movs	r3, #52	; 0x34
 800268e:	2203      	movs	r2, #3
 8002690:	4621      	mov	r1, r4
 8002692:	2005      	movs	r0, #5
 8002694:	f016 fd51 	bl	801913a <BSC_SearchGenericListEntry>
}
 8002698:	b004      	add	sp, #16
 800269a:	bd10      	pop	{r4, pc}

0800269c <GATT_Service_Discovery_Event_Callback>:
   /*          only be satisfied by Receiving a Bluetooth Event         */
   /*          Callback.  A Deadlock WILL occur because NO Bluetooth    */
   /*          Callbacks will be issued while this function is currently*/
   /*          outstanding.                                             */
static void BTPSAPI GATT_Service_Discovery_Event_Callback(unsigned int BluetoothStackID, GATT_Service_Discovery_Event_Data_t *GATT_Service_Discovery_Event_Data, unsigned long CallbackParameter)
{
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   DeviceInfo_t *DeviceInfo;

   /* Verify that the input parameters are semi-valid.                  */
   if((BluetoothStackID) && (GATT_Service_Discovery_Event_Data))
 800269e:	2800      	cmp	r0, #0
 80026a0:	d074      	beq.n	800278c <GATT_Service_Discovery_Event_Callback+0xf0>
 80026a2:	460c      	mov	r4, r1
 80026a4:	4615      	mov	r5, r2
 80026a6:	2900      	cmp	r1, #0
 80026a8:	d070      	beq.n	800278c <GATT_Service_Discovery_Event_Callback+0xf0>
   {
      if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 80026aa:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <GATT_Service_Discovery_Event_Callback+0x104>)
 80026ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026b0:	483c      	ldr	r0, [pc, #240]	; (80027a4 <GATT_Service_Discovery_Event_Callback+0x108>)
 80026b2:	f7ff ffe5 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 80026b6:	4606      	mov	r6, r0
 80026b8:	2800      	cmp	r0, #0
 80026ba:	d06f      	beq.n	800279c <GATT_Service_Discovery_Event_Callback+0x100>
      {
         switch(GATT_Service_Discovery_Event_Data->Event_Data_Type)
 80026bc:	7823      	ldrb	r3, [r4, #0]
 80026be:	b123      	cbz	r3, 80026ca <GATT_Service_Discovery_Event_Callback+0x2e>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d026      	beq.n	8002712 <GATT_Service_Discovery_Event_Callback+0x76>
                  }
               }
               break;
         }

         DisplayPrompt();
 80026c4:	f7ff ff78 	bl	80025b8 <DisplayPrompt>
 80026c8:	e068      	b.n	800279c <GATT_Service_Discovery_Event_Callback+0x100>
               if(GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Indication_Data)
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f9      	beq.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
                  Display(("\r\n"));
 80026d0:	4f35      	ldr	r7, [pc, #212]	; (80027a8 <GATT_Service_Discovery_Event_Callback+0x10c>)
 80026d2:	4638      	mov	r0, r7
 80026d4:	f011 f86e 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("Service 0x%04X - 0x%04X, UUID: ", GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Indication_Data->ServiceInformation.Service_Handle, GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Indication_Data->ServiceInformation.End_Group_Handle));
 80026d8:	6863      	ldr	r3, [r4, #4]
 80026da:	88da      	ldrh	r2, [r3, #6]
 80026dc:	8899      	ldrh	r1, [r3, #4]
 80026de:	4833      	ldr	r0, [pc, #204]	; (80027ac <GATT_Service_Discovery_Event_Callback+0x110>)
 80026e0:	f011 f868 	bl	80137b4 <BTPS_OutputMessage>
                  DisplayUUID(&(GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Indication_Data->ServiceInformation.UUID));
 80026e4:	6860      	ldr	r0, [r4, #4]
 80026e6:	3008      	adds	r0, #8
 80026e8:	f7ff fd3c 	bl	8002164 <DisplayUUID>
                  Display(("\r\n"));
 80026ec:	4638      	mov	r0, r7
 80026ee:	f011 f861 	bl	80137b4 <BTPS_OutputMessage>
                  if(((Service_Discovery_Type_t)CallbackParameter) == sdGAPS)
 80026f2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80026f6:	d006      	beq.n	8002706 <GATT_Service_Discovery_Event_Callback+0x6a>
                  if(((Service_Discovery_Type_t)CallbackParameter) == sdHRS)
 80026f8:	2d01      	cmp	r5, #1
 80026fa:	d1e3      	bne.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
                     HRSPopulateHandles(DeviceInfo, GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Indication_Data);
 80026fc:	6861      	ldr	r1, [r4, #4]
 80026fe:	4630      	mov	r0, r6
 8002700:	f7ff fd78 	bl	80021f4 <HRSPopulateHandles>
 8002704:	e7de      	b.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
                     GAPSPopulateHandles(&(DeviceInfo->GAPSClientInfo), GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Indication_Data);
 8002706:	6861      	ldr	r1, [r4, #4]
 8002708:	f106 0024 	add.w	r0, r6, #36	; 0x24
 800270c:	f7ff fbec 	bl	8001ee8 <GAPSPopulateHandles>
 8002710:	e7f2      	b.n	80026f8 <GATT_Service_Discovery_Event_Callback+0x5c>
               if(GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Complete_Data)
 8002712:	6863      	ldr	r3, [r4, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0d5      	beq.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
                  Display(("\r\n"));
 8002718:	4823      	ldr	r0, [pc, #140]	; (80027a8 <GATT_Service_Discovery_Event_Callback+0x10c>)
 800271a:	f011 f84b 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("Service Discovery Operation Complete, Status 0x%02X.\r\n", GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Complete_Data->Status));
 800271e:	6863      	ldr	r3, [r4, #4]
 8002720:	7919      	ldrb	r1, [r3, #4]
 8002722:	4823      	ldr	r0, [pc, #140]	; (80027b0 <GATT_Service_Discovery_Event_Callback+0x114>)
 8002724:	f011 f846 	bl	80137b4 <BTPS_OutputMessage>
                  DeviceInfo->Flags &= ~DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_OUTSTANDING;
 8002728:	7833      	ldrb	r3, [r6, #0]
 800272a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800272e:	7033      	strb	r3, [r6, #0]
                  if((GATT_Service_Discovery_Event_Data->Event_Data.GATT_Service_Discovery_Complete_Data->Status == GATT_SERVICE_DISCOVERY_STATUS_SUCCESS) && (((Service_Discovery_Type_t)CallbackParameter) == sdHRS))
 8002730:	6862      	ldr	r2, [r4, #4]
 8002732:	7912      	ldrb	r2, [r2, #4]
 8002734:	2a00      	cmp	r2, #0
 8002736:	d1c5      	bne.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
 8002738:	b2ea      	uxtb	r2, r5
 800273a:	2a01      	cmp	r2, #1
 800273c:	d1c2      	bne.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
                     DeviceInfo->Flags |= DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_COMPLETE;
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	7033      	strb	r3, [r6, #0]
                     Display(("\r\nHRP Service Discovery Summary\r\n"));
 8002744:	481b      	ldr	r0, [pc, #108]	; (80027b4 <GATT_Service_Discovery_Event_Callback+0x118>)
 8002746:	f011 f835 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("   Heart Rate Measurement:    %s\r\n", (DeviceInfo->ClientInfo.Heart_Rate_Measurement                      ? "Supported" : "Not Supported")));
 800274a:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800274c:	b1b3      	cbz	r3, 800277c <GATT_Service_Discovery_Event_Callback+0xe0>
 800274e:	491a      	ldr	r1, [pc, #104]	; (80027b8 <GATT_Service_Discovery_Event_Callback+0x11c>)
 8002750:	481a      	ldr	r0, [pc, #104]	; (80027bc <GATT_Service_Discovery_Event_Callback+0x120>)
 8002752:	f011 f82f 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("   Heart Rate Measurement CC: %s\r\n", (DeviceInfo->ClientInfo.Heart_Rate_Measurement_Client_Configuration ? "Supported" : "Not Supported")));
 8002756:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 8002758:	b193      	cbz	r3, 8002780 <GATT_Service_Discovery_Event_Callback+0xe4>
 800275a:	4917      	ldr	r1, [pc, #92]	; (80027b8 <GATT_Service_Discovery_Event_Callback+0x11c>)
 800275c:	4818      	ldr	r0, [pc, #96]	; (80027c0 <GATT_Service_Discovery_Event_Callback+0x124>)
 800275e:	f011 f829 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("   Body Sensor Location:      %s\r\n", (DeviceInfo->ClientInfo.Body_Sensor_Location                        ? "Supported" : "Not Supported")));
 8002762:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
 8002764:	b173      	cbz	r3, 8002784 <GATT_Service_Discovery_Event_Callback+0xe8>
 8002766:	4914      	ldr	r1, [pc, #80]	; (80027b8 <GATT_Service_Discovery_Event_Callback+0x11c>)
 8002768:	4816      	ldr	r0, [pc, #88]	; (80027c4 <GATT_Service_Discovery_Event_Callback+0x128>)
 800276a:	f011 f823 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("   Heart Rate Control Point:  %s\r\n", (DeviceInfo->ClientInfo.Heart_Rate_Control_Point                    ? "Supported" : "Not Supported")));
 800276e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
 8002770:	b153      	cbz	r3, 8002788 <GATT_Service_Discovery_Event_Callback+0xec>
 8002772:	4911      	ldr	r1, [pc, #68]	; (80027b8 <GATT_Service_Discovery_Event_Callback+0x11c>)
 8002774:	4814      	ldr	r0, [pc, #80]	; (80027c8 <GATT_Service_Discovery_Event_Callback+0x12c>)
 8002776:	f011 f81d 	bl	80137b4 <BTPS_OutputMessage>
 800277a:	e7a3      	b.n	80026c4 <GATT_Service_Discovery_Event_Callback+0x28>
                     Display(("   Heart Rate Measurement:    %s\r\n", (DeviceInfo->ClientInfo.Heart_Rate_Measurement                      ? "Supported" : "Not Supported")));
 800277c:	4913      	ldr	r1, [pc, #76]	; (80027cc <GATT_Service_Discovery_Event_Callback+0x130>)
 800277e:	e7e7      	b.n	8002750 <GATT_Service_Discovery_Event_Callback+0xb4>
                     Display(("   Heart Rate Measurement CC: %s\r\n", (DeviceInfo->ClientInfo.Heart_Rate_Measurement_Client_Configuration ? "Supported" : "Not Supported")));
 8002780:	4912      	ldr	r1, [pc, #72]	; (80027cc <GATT_Service_Discovery_Event_Callback+0x130>)
 8002782:	e7eb      	b.n	800275c <GATT_Service_Discovery_Event_Callback+0xc0>
                     Display(("   Body Sensor Location:      %s\r\n", (DeviceInfo->ClientInfo.Body_Sensor_Location                        ? "Supported" : "Not Supported")));
 8002784:	4911      	ldr	r1, [pc, #68]	; (80027cc <GATT_Service_Discovery_Event_Callback+0x130>)
 8002786:	e7ef      	b.n	8002768 <GATT_Service_Discovery_Event_Callback+0xcc>
                     Display(("   Heart Rate Control Point:  %s\r\n", (DeviceInfo->ClientInfo.Heart_Rate_Control_Point                    ? "Supported" : "Not Supported")));
 8002788:	4910      	ldr	r1, [pc, #64]	; (80027cc <GATT_Service_Discovery_Event_Callback+0x130>)
 800278a:	e7f3      	b.n	8002774 <GATT_Service_Discovery_Event_Callback+0xd8>
      }
   }
   else
   {
      /* There was an error with one or more of the input parameters.   */
      Display(("\r\n"));
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <GATT_Service_Discovery_Event_Callback+0x10c>)
 800278e:	f011 f811 	bl	80137b4 <BTPS_OutputMessage>

      Display(("GATT Service Discovery Callback Data: Event_Data = NULL.\r\n"));
 8002792:	480f      	ldr	r0, [pc, #60]	; (80027d0 <GATT_Service_Discovery_Event_Callback+0x134>)
 8002794:	f011 f80e 	bl	80137b4 <BTPS_OutputMessage>

      DisplayPrompt();
 8002798:	f7ff ff0e 	bl	80025b8 <DisplayPrompt>
   }
}
 800279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279e:	bf00      	nop
 80027a0:	20001684 	.word	0x20001684
 80027a4:	200016b0 	.word	0x200016b0
 80027a8:	0802c380 	.word	0x0802c380
 80027ac:	0802bd00 	.word	0x0802bd00
 80027b0:	0802bd20 	.word	0x0802bd20
 80027b4:	0802bd58 	.word	0x0802bd58
 80027b8:	0802bcf4 	.word	0x0802bcf4
 80027bc:	0802bd7c 	.word	0x0802bd7c
 80027c0:	0802bda0 	.word	0x0802bda0
 80027c4:	0802bdc4 	.word	0x0802bdc4
 80027c8:	0802bde8 	.word	0x0802bde8
 80027cc:	0802bcf0 	.word	0x0802bcf0
 80027d0:	0802be0c 	.word	0x0802be0c

080027d4 <ClearCommands>:
{
 80027d4:	b508      	push	{r3, lr}
   BTPS_MemInitialize(CommandTable, 0, sizeof(CommandTable));
 80027d6:	f44f 7284 	mov.w	r2, #264	; 0x108
 80027da:	2100      	movs	r1, #0
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <ClearCommands+0x18>)
 80027de:	f010 fe6e 	bl	80134be <BTPS_MemInitialize>
   NumberCommands = 0;
 80027e2:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <ClearCommands+0x1c>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	bd08      	pop	{r3, pc}
 80027ea:	bf00      	nop
 80027ec:	2000157c 	.word	0x2000157c
 80027f0:	200016d4 	.word	0x200016d4

080027f4 <UserInterface>:
{
 80027f4:	b508      	push	{r3, lr}
   ClearCommands();
 80027f6:	f7ff ffed 	bl	80027d4 <ClearCommands>
   AddCommand("SETDISCOVERABILITYMODE", SetDiscoverabilityMode);
 80027fa:	4940      	ldr	r1, [pc, #256]	; (80028fc <UserInterface+0x108>)
 80027fc:	4840      	ldr	r0, [pc, #256]	; (8002900 <UserInterface+0x10c>)
 80027fe:	f7ff fb07 	bl	8001e10 <AddCommand>
   AddCommand("SETCONNECTABILITYMODE", SetConnectabilityMode);
 8002802:	4940      	ldr	r1, [pc, #256]	; (8002904 <UserInterface+0x110>)
 8002804:	4840      	ldr	r0, [pc, #256]	; (8002908 <UserInterface+0x114>)
 8002806:	f7ff fb03 	bl	8001e10 <AddCommand>
   AddCommand("SETPAIRABILITYMODE", SetPairabilityMode);
 800280a:	4940      	ldr	r1, [pc, #256]	; (800290c <UserInterface+0x118>)
 800280c:	4840      	ldr	r0, [pc, #256]	; (8002910 <UserInterface+0x11c>)
 800280e:	f7ff faff 	bl	8001e10 <AddCommand>
   AddCommand("CHANGEPAIRINGPARAMETERS", ChangePairingParameters);
 8002812:	4940      	ldr	r1, [pc, #256]	; (8002914 <UserInterface+0x120>)
 8002814:	4840      	ldr	r0, [pc, #256]	; (8002918 <UserInterface+0x124>)
 8002816:	f7ff fafb 	bl	8001e10 <AddCommand>
   AddCommand("GETLOCALADDRESS", GetLocalAddress);
 800281a:	4940      	ldr	r1, [pc, #256]	; (800291c <UserInterface+0x128>)
 800281c:	4840      	ldr	r0, [pc, #256]	; (8002920 <UserInterface+0x12c>)
 800281e:	f7ff faf7 	bl	8001e10 <AddCommand>
   AddCommand("ADVERTISELE", AdvertiseLE);
 8002822:	4940      	ldr	r1, [pc, #256]	; (8002924 <UserInterface+0x130>)
 8002824:	4840      	ldr	r0, [pc, #256]	; (8002928 <UserInterface+0x134>)
 8002826:	f7ff faf3 	bl	8001e10 <AddCommand>
   AddCommand("STARTSCANNING", StartScanning);
 800282a:	4940      	ldr	r1, [pc, #256]	; (800292c <UserInterface+0x138>)
 800282c:	4840      	ldr	r0, [pc, #256]	; (8002930 <UserInterface+0x13c>)
 800282e:	f7ff faef 	bl	8001e10 <AddCommand>
   AddCommand("STOPSCANNING", StopScanning);
 8002832:	4940      	ldr	r1, [pc, #256]	; (8002934 <UserInterface+0x140>)
 8002834:	4840      	ldr	r0, [pc, #256]	; (8002938 <UserInterface+0x144>)
 8002836:	f7ff faeb 	bl	8001e10 <AddCommand>
   AddCommand("CONNECTLE", ConnectLE);
 800283a:	4940      	ldr	r1, [pc, #256]	; (800293c <UserInterface+0x148>)
 800283c:	4840      	ldr	r0, [pc, #256]	; (8002940 <UserInterface+0x14c>)
 800283e:	f7ff fae7 	bl	8001e10 <AddCommand>
   AddCommand("DISCONNECTLE", DisconnectLE);
 8002842:	4940      	ldr	r1, [pc, #256]	; (8002944 <UserInterface+0x150>)
 8002844:	4840      	ldr	r0, [pc, #256]	; (8002948 <UserInterface+0x154>)
 8002846:	f7ff fae3 	bl	8001e10 <AddCommand>
   AddCommand("PAIRLE", PairLE);
 800284a:	4940      	ldr	r1, [pc, #256]	; (800294c <UserInterface+0x158>)
 800284c:	4840      	ldr	r0, [pc, #256]	; (8002950 <UserInterface+0x15c>)
 800284e:	f7ff fadf 	bl	8001e10 <AddCommand>
   AddCommand("SETBAUDRATE", SetBaudRate);
 8002852:	4940      	ldr	r1, [pc, #256]	; (8002954 <UserInterface+0x160>)
 8002854:	4840      	ldr	r0, [pc, #256]	; (8002958 <UserInterface+0x164>)
 8002856:	f7ff fadb 	bl	8001e10 <AddCommand>
   AddCommand("LEPASSKEYRESPONSE", LEPassKeyResponse);
 800285a:	4940      	ldr	r1, [pc, #256]	; (800295c <UserInterface+0x168>)
 800285c:	4840      	ldr	r0, [pc, #256]	; (8002960 <UserInterface+0x16c>)
 800285e:	f7ff fad7 	bl	8001e10 <AddCommand>
   AddCommand("QUERYENCRYPTIONMODE", LEQueryEncryption);
 8002862:	4940      	ldr	r1, [pc, #256]	; (8002964 <UserInterface+0x170>)
 8002864:	4840      	ldr	r0, [pc, #256]	; (8002968 <UserInterface+0x174>)
 8002866:	f7ff fad3 	bl	8001e10 <AddCommand>
   AddCommand("SETPASSKEY", LESetPasskey);
 800286a:	4940      	ldr	r1, [pc, #256]	; (800296c <UserInterface+0x178>)
 800286c:	4840      	ldr	r0, [pc, #256]	; (8002970 <UserInterface+0x17c>)
 800286e:	f7ff facf 	bl	8001e10 <AddCommand>
   AddCommand("DISCOVERGAPS", DiscoverGAPS);
 8002872:	4940      	ldr	r1, [pc, #256]	; (8002974 <UserInterface+0x180>)
 8002874:	4840      	ldr	r0, [pc, #256]	; (8002978 <UserInterface+0x184>)
 8002876:	f7ff facb 	bl	8001e10 <AddCommand>
   AddCommand("GETLOCALNAME", GetLocalName);
 800287a:	4940      	ldr	r1, [pc, #256]	; (800297c <UserInterface+0x188>)
 800287c:	4840      	ldr	r0, [pc, #256]	; (8002980 <UserInterface+0x18c>)
 800287e:	f7ff fac7 	bl	8001e10 <AddCommand>
   AddCommand("SETLOCALNAME", SetLocalName);
 8002882:	4940      	ldr	r1, [pc, #256]	; (8002984 <UserInterface+0x190>)
 8002884:	4840      	ldr	r0, [pc, #256]	; (8002988 <UserInterface+0x194>)
 8002886:	f7ff fac3 	bl	8001e10 <AddCommand>
   AddCommand("GETREMOTENAME", ReadRemoteName);
 800288a:	4940      	ldr	r1, [pc, #256]	; (800298c <UserInterface+0x198>)
 800288c:	4840      	ldr	r0, [pc, #256]	; (8002990 <UserInterface+0x19c>)
 800288e:	f7ff fabf 	bl	8001e10 <AddCommand>
   AddCommand("GETLOCALAPPEARANCE", GetLocalAppearance);
 8002892:	4940      	ldr	r1, [pc, #256]	; (8002994 <UserInterface+0x1a0>)
 8002894:	4840      	ldr	r0, [pc, #256]	; (8002998 <UserInterface+0x1a4>)
 8002896:	f7ff fabb 	bl	8001e10 <AddCommand>
   AddCommand("SETLOCALAPPEARANCE", SetLocalAppearance);
 800289a:	4940      	ldr	r1, [pc, #256]	; (800299c <UserInterface+0x1a8>)
 800289c:	4840      	ldr	r0, [pc, #256]	; (80029a0 <UserInterface+0x1ac>)
 800289e:	f7ff fab7 	bl	8001e10 <AddCommand>
   AddCommand("GETREMOTEAPPEARANCE", GetRemoteAppearance);
 80028a2:	4940      	ldr	r1, [pc, #256]	; (80029a4 <UserInterface+0x1b0>)
 80028a4:	4840      	ldr	r0, [pc, #256]	; (80029a8 <UserInterface+0x1b4>)
 80028a6:	f7ff fab3 	bl	8001e10 <AddCommand>
   AddCommand("REGISTERHRS", RegisterHRS);
 80028aa:	4940      	ldr	r1, [pc, #256]	; (80029ac <UserInterface+0x1b8>)
 80028ac:	4840      	ldr	r0, [pc, #256]	; (80029b0 <UserInterface+0x1bc>)
 80028ae:	f7ff faaf 	bl	8001e10 <AddCommand>
   AddCommand("NOTIFYHEARTRATE", NotifyHeartRate);
 80028b2:	4940      	ldr	r1, [pc, #256]	; (80029b4 <UserInterface+0x1c0>)
 80028b4:	4840      	ldr	r0, [pc, #256]	; (80029b8 <UserInterface+0x1c4>)
 80028b6:	f7ff faab 	bl	8001e10 <AddCommand>
   AddCommand("UNREGISTERHRS", UnregisterHRS);
 80028ba:	4940      	ldr	r1, [pc, #256]	; (80029bc <UserInterface+0x1c8>)
 80028bc:	4840      	ldr	r0, [pc, #256]	; (80029c0 <UserInterface+0x1cc>)
 80028be:	f7ff faa7 	bl	8001e10 <AddCommand>
   AddCommand("DISCOVERHRS", DiscoverHRS);
 80028c2:	4940      	ldr	r1, [pc, #256]	; (80029c4 <UserInterface+0x1d0>)
 80028c4:	4840      	ldr	r0, [pc, #256]	; (80029c8 <UserInterface+0x1d4>)
 80028c6:	f7ff faa3 	bl	8001e10 <AddCommand>
   AddCommand("CONFIGUREREMOTEHRS", ConfigureRemoteHRS);
 80028ca:	4940      	ldr	r1, [pc, #256]	; (80029cc <UserInterface+0x1d8>)
 80028cc:	4840      	ldr	r0, [pc, #256]	; (80029d0 <UserInterface+0x1dc>)
 80028ce:	f7ff fa9f 	bl	8001e10 <AddCommand>
   AddCommand("GETBODYSENSORLOCATION", GetBodySensorLocation);
 80028d2:	4940      	ldr	r1, [pc, #256]	; (80029d4 <UserInterface+0x1e0>)
 80028d4:	4840      	ldr	r0, [pc, #256]	; (80029d8 <UserInterface+0x1e4>)
 80028d6:	f7ff fa9b 	bl	8001e10 <AddCommand>
   AddCommand("SETBODYSENSORLOCATION", SetBodySensorLocation);
 80028da:	4940      	ldr	r1, [pc, #256]	; (80029dc <UserInterface+0x1e8>)
 80028dc:	4840      	ldr	r0, [pc, #256]	; (80029e0 <UserInterface+0x1ec>)
 80028de:	f7ff fa97 	bl	8001e10 <AddCommand>
   AddCommand("RESETENERGYEXPENDED", ResetEnergyExpended);
 80028e2:	4940      	ldr	r1, [pc, #256]	; (80029e4 <UserInterface+0x1f0>)
 80028e4:	4840      	ldr	r0, [pc, #256]	; (80029e8 <UserInterface+0x1f4>)
 80028e6:	f7ff fa93 	bl	8001e10 <AddCommand>
   AddCommand("HELP", DisplayHelp);
 80028ea:	4940      	ldr	r1, [pc, #256]	; (80029ec <UserInterface+0x1f8>)
 80028ec:	4840      	ldr	r0, [pc, #256]	; (80029f0 <UserInterface+0x1fc>)
 80028ee:	f7ff fa8f 	bl	8001e10 <AddCommand>
   AddCommand("QUERYMEMORY", QueryMemory);
 80028f2:	4940      	ldr	r1, [pc, #256]	; (80029f4 <UserInterface+0x200>)
 80028f4:	4840      	ldr	r0, [pc, #256]	; (80029f8 <UserInterface+0x204>)
 80028f6:	f7ff fa8b 	bl	8001e10 <AddCommand>
}
 80028fa:	bd08      	pop	{r3, pc}
 80028fc:	08002449 	.word	0x08002449
 8002900:	0802be48 	.word	0x0802be48
 8002904:	080023dd 	.word	0x080023dd
 8002908:	0802be60 	.word	0x0802be60
 800290c:	080036c9 	.word	0x080036c9
 8002910:	0802be78 	.word	0x0802be78
 8002914:	08002361 	.word	0x08002361
 8002918:	0802be8c 	.word	0x0802be8c
 800291c:	08003679 	.word	0x08003679
 8002920:	0802bea4 	.word	0x0802bea4
 8002924:	08005ac5 	.word	0x08005ac5
 8002928:	0802beb4 	.word	0x0802beb4
 800292c:	08005aa5 	.word	0x08005aa5
 8002930:	0802bec0 	.word	0x0802bec0
 8002934:	08005a39 	.word	0x08005a39
 8002938:	0802bed0 	.word	0x0802bed0
 800293c:	08005961 	.word	0x08005961
 8002940:	0802bee0 	.word	0x0802bee0
 8002944:	08003889 	.word	0x08003889
 8002948:	0802beec 	.word	0x0802beec
 800294c:	08003a65 	.word	0x08003a65
 8002950:	0802befc 	.word	0x0802befc
 8002954:	08005769 	.word	0x08005769
 8002958:	0802bf04 	.word	0x0802bf04
 800295c:	08005291 	.word	0x08005291
 8002960:	0802bf10 	.word	0x0802bf10
 8002964:	080056d1 	.word	0x080056d1
 8002968:	0802bf24 	.word	0x0802bf24
 800296c:	08005625 	.word	0x08005625
 8002970:	0802bf38 	.word	0x0802bf38
 8002974:	08004b55 	.word	0x08004b55
 8002978:	0802bf44 	.word	0x0802bf44
 800297c:	080055c1 	.word	0x080055c1
 8002980:	0802bf54 	.word	0x0802bf54
 8002984:	08005215 	.word	0x08005215
 8002988:	0802bf64 	.word	0x0802bf64
 800298c:	080049e5 	.word	0x080049e5
 8002990:	0802bf74 	.word	0x0802bf74
 8002994:	0800519d 	.word	0x0800519d
 8002998:	0802bf84 	.word	0x0802bf84
 800299c:	080025dd 	.word	0x080025dd
 80029a0:	0802bf98 	.word	0x0802bf98
 80029a4:	0800494d 	.word	0x0800494d
 80029a8:	0802bfac 	.word	0x0802bfac
 80029ac:	08004e9d 	.word	0x08004e9d
 80029b0:	0802bfc0 	.word	0x0802bfc0
 80029b4:	08004c9d 	.word	0x08004c9d
 80029b8:	0802bfcc 	.word	0x0802bfcc
 80029bc:	08004c11 	.word	0x08004c11
 80029c0:	0802bfdc 	.word	0x0802bfdc
 80029c4:	08004a7d 	.word	0x08004a7d
 80029c8:	0802bfec 	.word	0x0802bfec
 80029cc:	08004691 	.word	0x08004691
 80029d0:	0802bff8 	.word	0x0802bff8
 80029d4:	0800486d 	.word	0x0800486d
 80029d8:	0802c00c 	.word	0x0802c00c
 80029dc:	08004781 	.word	0x08004781
 80029e0:	0802c024 	.word	0x0802c024
 80029e4:	08004565 	.word	0x08004565
 80029e8:	0802c03c 	.word	0x0802c03c
 80029ec:	080024c5 	.word	0x080024c5
 80029f0:	0802c050 	.word	0x0802c050
 80029f4:	080044c1 	.word	0x080044c1
 80029f8:	0802c058 	.word	0x0802c058

080029fc <DecodeDisplayHeartRate>:
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b085      	sub	sp, #20
   if((ValueLength) && (Value))
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f000 8090 	beq.w	8002b26 <DecodeDisplayHeartRate+0x12a>
 8002a06:	460c      	mov	r4, r1
 8002a08:	4616      	mov	r6, r2
 8002a0a:	4607      	mov	r7, r0
 8002a0c:	2900      	cmp	r1, #0
 8002a0e:	f000 808e 	beq.w	8002b2e <DecodeDisplayHeartRate+0x132>
      BTPS_MemInitialize(&Heart_Rate_Measurement, 0, sizeof(HRS_Heart_Rate_Measurement_Data_t));
 8002a12:	220a      	movs	r2, #10
 8002a14:	2100      	movs	r1, #0
 8002a16:	a801      	add	r0, sp, #4
 8002a18:	f010 fd51 	bl	80134be <BTPS_MemInitialize>
      Result = HRS_Decode_Heart_Rate_Measurement(ValueLength, Value, &Heart_Rate_Measurement);
 8002a1c:	aa01      	add	r2, sp, #4
 8002a1e:	4621      	mov	r1, r4
 8002a20:	4638      	mov	r0, r7
 8002a22:	f003 ff2f 	bl	8006884 <HRS_Decode_Heart_Rate_Measurement>
      if(!Result)
 8002a26:	4601      	mov	r1, r0
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d177      	bne.n	8002b1c <DecodeDisplayHeartRate+0x120>
         if(PrintData)
 8002a2c:	bb3e      	cbnz	r6, 8002a7e <DecodeDisplayHeartRate+0x82>
         if((ret_val = (HRS_Heart_Rate_Measurement_Data_t *)BTPS_AllocateMemory(HRS_HEART_RATE_MEASUREMENT_DATA_SIZE(Heart_Rate_Measurement.Number_Of_RR_Intervals))) != NULL)
 8002a2e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8002a32:	3004      	adds	r0, #4
 8002a34:	0040      	lsls	r0, r0, #1
 8002a36:	f010 fcc1 	bl	80133bc <BTPS_AllocateMemory>
 8002a3a:	4605      	mov	r5, r0
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	d073      	beq.n	8002b28 <DecodeDisplayHeartRate+0x12c>
            if(Heart_Rate_Measurement.Number_Of_RR_Intervals)
 8002a40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d064      	beq.n	8002b12 <DecodeDisplayHeartRate+0x116>
               ret_val->Number_Of_RR_Intervals = Heart_Rate_Measurement.Number_Of_RR_Intervals;
 8002a48:	80c3      	strh	r3, [r0, #6]
               Result = HRS_Decode_Heart_Rate_Measurement(ValueLength, Value, ret_val);
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	4638      	mov	r0, r7
 8002a50:	f003 ff18 	bl	8006884 <HRS_Decode_Heart_Rate_Measurement>
               if(!Result)
 8002a54:	4604      	mov	r4, r0
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d152      	bne.n	8002b00 <DecodeDisplayHeartRate+0x104>
                  if(PrintData)
 8002a5a:	2e00      	cmp	r6, #0
 8002a5c:	d064      	beq.n	8002b28 <DecodeDisplayHeartRate+0x12c>
                     if(ret_val->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT)
 8002a5e:	782b      	ldrb	r3, [r5, #0]
 8002a60:	f013 0f10 	tst.w	r3, #16
 8002a64:	d060      	beq.n	8002b28 <DecodeDisplayHeartRate+0x12c>
                        Display(("      Num. RR Intervals: %u\r\n", ret_val->Number_Of_RR_Intervals));
 8002a66:	88e9      	ldrh	r1, [r5, #6]
 8002a68:	4832      	ldr	r0, [pc, #200]	; (8002b34 <DecodeDisplayHeartRate+0x138>)
 8002a6a:	f010 fea3 	bl	80137b4 <BTPS_OutputMessage>
                        if(ret_val->Number_Of_RR_Intervals != 0)
 8002a6e:	88eb      	ldrh	r3, [r5, #6]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d059      	beq.n	8002b28 <DecodeDisplayHeartRate+0x12c>
                           Display(("      RR Intervals:      { "));
 8002a74:	4830      	ldr	r0, [pc, #192]	; (8002b38 <DecodeDisplayHeartRate+0x13c>)
 8002a76:	f010 fe9d 	bl	80137b4 <BTPS_OutputMessage>
                           for(i = 0; i < (ret_val->Number_Of_RR_Intervals - 1); i++)
 8002a7a:	2400      	movs	r4, #0
 8002a7c:	e035      	b.n	8002aea <DecodeDisplayHeartRate+0xee>
            Display(("      Flags:             0x%02X\r\n", Heart_Rate_Measurement.Flags));
 8002a7e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8002a82:	482e      	ldr	r0, [pc, #184]	; (8002b3c <DecodeDisplayHeartRate+0x140>)
 8002a84:	f010 fe96 	bl	80137b4 <BTPS_OutputMessage>
            Display(("      Heart Rate:        %u\r\n", Heart_Rate_Measurement.Heart_Rate));
 8002a88:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8002a8c:	482c      	ldr	r0, [pc, #176]	; (8002b40 <DecodeDisplayHeartRate+0x144>)
 8002a8e:	f010 fe91 	bl	80137b4 <BTPS_OutputMessage>
            if(Heart_Rate_Measurement.Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_ENERGY_EXPENDED_PRESENT)
 8002a92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002a96:	f013 0f08 	tst.w	r3, #8
 8002a9a:	d111      	bne.n	8002ac0 <DecodeDisplayHeartRate+0xc4>
            Display(("      Sensor Contact:    "));
 8002a9c:	4829      	ldr	r0, [pc, #164]	; (8002b44 <DecodeDisplayHeartRate+0x148>)
 8002a9e:	f010 fe89 	bl	80137b4 <BTPS_OutputMessage>
            if(Heart_Rate_Measurement.Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_SENSOR_CONTACT_STATUS_SUPPORTED)
 8002aa2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002aa6:	f013 0f04 	tst.w	r3, #4
 8002aaa:	d013      	beq.n	8002ad4 <DecodeDisplayHeartRate+0xd8>
               if(Heart_Rate_Measurement.Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_SENSOR_CONTACT_STATUS_DETECTED)
 8002aac:	f013 0f02 	tst.w	r3, #2
 8002ab0:	d00c      	beq.n	8002acc <DecodeDisplayHeartRate+0xd0>
                  Display(("Detected"));
 8002ab2:	4825      	ldr	r0, [pc, #148]	; (8002b48 <DecodeDisplayHeartRate+0x14c>)
 8002ab4:	f010 fe7e 	bl	80137b4 <BTPS_OutputMessage>
            Display(("\r\n"));
 8002ab8:	4824      	ldr	r0, [pc, #144]	; (8002b4c <DecodeDisplayHeartRate+0x150>)
 8002aba:	f010 fe7b 	bl	80137b4 <BTPS_OutputMessage>
 8002abe:	e7b6      	b.n	8002a2e <DecodeDisplayHeartRate+0x32>
               Display(("      Energy Expended:   %u\r\n", Heart_Rate_Measurement.Energy_Expended));
 8002ac0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8002ac4:	4822      	ldr	r0, [pc, #136]	; (8002b50 <DecodeDisplayHeartRate+0x154>)
 8002ac6:	f010 fe75 	bl	80137b4 <BTPS_OutputMessage>
 8002aca:	e7e7      	b.n	8002a9c <DecodeDisplayHeartRate+0xa0>
                  Display(("Not Detected"));
 8002acc:	4821      	ldr	r0, [pc, #132]	; (8002b54 <DecodeDisplayHeartRate+0x158>)
 8002ace:	f010 fe71 	bl	80137b4 <BTPS_OutputMessage>
 8002ad2:	e7f1      	b.n	8002ab8 <DecodeDisplayHeartRate+0xbc>
               Display(("Not Supported"));
 8002ad4:	4820      	ldr	r0, [pc, #128]	; (8002b58 <DecodeDisplayHeartRate+0x15c>)
 8002ad6:	f010 fe6d 	bl	80137b4 <BTPS_OutputMessage>
 8002ada:	e7ed      	b.n	8002ab8 <DecodeDisplayHeartRate+0xbc>
                              Display(("%d, ", ret_val->RR_Intervals[i]));
 8002adc:	1d23      	adds	r3, r4, #4
 8002ade:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
 8002ae2:	481e      	ldr	r0, [pc, #120]	; (8002b5c <DecodeDisplayHeartRate+0x160>)
 8002ae4:	f010 fe66 	bl	80137b4 <BTPS_OutputMessage>
                           for(i = 0; i < (ret_val->Number_Of_RR_Intervals - 1); i++)
 8002ae8:	3401      	adds	r4, #1
 8002aea:	88eb      	ldrh	r3, [r5, #6]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	42a3      	cmp	r3, r4
 8002af0:	d8f4      	bhi.n	8002adc <DecodeDisplayHeartRate+0xe0>
                           Display(("%d }\r\n", ret_val->RR_Intervals[i]));
 8002af2:	3404      	adds	r4, #4
 8002af4:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
 8002af8:	4819      	ldr	r0, [pc, #100]	; (8002b60 <DecodeDisplayHeartRate+0x164>)
 8002afa:	f010 fe5b 	bl	80137b4 <BTPS_OutputMessage>
 8002afe:	e013      	b.n	8002b28 <DecodeDisplayHeartRate+0x12c>
                  BTPS_FreeMemory(ret_val);
 8002b00:	4628      	mov	r0, r5
 8002b02:	f010 fc75 	bl	80133f0 <BTPS_FreeMemory>
                  DisplayFunctionError("HRS_Decode_Heart_Rate_Measurement", Result);
 8002b06:	4621      	mov	r1, r4
 8002b08:	4816      	ldr	r0, [pc, #88]	; (8002b64 <DecodeDisplayHeartRate+0x168>)
 8002b0a:	f7ff fd5d 	bl	80025c8 <DisplayFunctionError>
                  ret_val = NULL;
 8002b0e:	2500      	movs	r5, #0
 8002b10:	e00a      	b.n	8002b28 <DecodeDisplayHeartRate+0x12c>
               BTPS_MemCopy(ret_val, &Heart_Rate_Measurement, sizeof(Heart_Rate_Measurement));
 8002b12:	220a      	movs	r2, #10
 8002b14:	a901      	add	r1, sp, #4
 8002b16:	f010 fcce 	bl	80134b6 <BTPS_MemCopy>
 8002b1a:	e005      	b.n	8002b28 <DecodeDisplayHeartRate+0x12c>
         DisplayFunctionError("HRS_Decode_Heart_Rate_Measurement", Result);
 8002b1c:	4811      	ldr	r0, [pc, #68]	; (8002b64 <DecodeDisplayHeartRate+0x168>)
 8002b1e:	f7ff fd53 	bl	80025c8 <DisplayFunctionError>
   HRS_Heart_Rate_Measurement_Data_t *ret_val = NULL;
 8002b22:	2500      	movs	r5, #0
 8002b24:	e000      	b.n	8002b28 <DecodeDisplayHeartRate+0x12c>
 8002b26:	2500      	movs	r5, #0
}
 8002b28:	4628      	mov	r0, r5
 8002b2a:	b005      	add	sp, #20
 8002b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   HRS_Heart_Rate_Measurement_Data_t *ret_val = NULL;
 8002b2e:	460d      	mov	r5, r1
   return(ret_val);
 8002b30:	e7fa      	b.n	8002b28 <DecodeDisplayHeartRate+0x12c>
 8002b32:	bf00      	nop
 8002b34:	0802c0f4 	.word	0x0802c0f4
 8002b38:	0802c114 	.word	0x0802c114
 8002b3c:	0802c064 	.word	0x0802c064
 8002b40:	0802c088 	.word	0x0802c088
 8002b44:	0802c0c8 	.word	0x0802c0c8
 8002b48:	0802c0e8 	.word	0x0802c0e8
 8002b4c:	0802c380 	.word	0x0802c380
 8002b50:	0802c0a8 	.word	0x0802c0a8
 8002b54:	0802c0e4 	.word	0x0802c0e4
 8002b58:	0802bcf0 	.word	0x0802bcf0
 8002b5c:	0802c130 	.word	0x0802c130
 8002b60:	0802c138 	.word	0x0802c138
 8002b64:	0802c140 	.word	0x0802c140

08002b68 <DisplayFWVersion>:
{
 8002b68:	b500      	push	{lr}
 8002b6a:	b089      	sub	sp, #36	; 0x24
    HCI_Read_Local_Version_Information(BluetoothStackID, &FW_Version_Details.StatusResult, &FW_Version_Details.HCI_VersionResult, &FW_Version_Details.HCI_RevisionResult, &FW_Version_Details.LMP_VersionResult, &FW_Version_Details.Manufacturer_NameResult, &FW_Version_Details.LMP_SubversionResult);
 8002b6c:	ab07      	add	r3, sp, #28
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	f10d 031a 	add.w	r3, sp, #26
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	ab06      	add	r3, sp, #24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f10d 0316 	add.w	r3, sp, #22
 8002b7e:	f10d 0215 	add.w	r2, sp, #21
 8002b82:	a905      	add	r1, sp, #20
 8002b84:	4810      	ldr	r0, [pc, #64]	; (8002bc8 <DisplayFWVersion+0x60>)
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	f01c ffb6 	bl	801faf8 <HCI_Read_Local_Version_Information>
    if (!FW_Version_Details.StatusResult)
 8002b8c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8002b90:	b9b1      	cbnz	r1, 8002bc0 <DisplayFWVersion+0x58>
        Display(("Project Type  : %d \r\n", ((FW_Version_Details.LMP_SubversionResult >> 10)) & 0x1F));
 8002b92:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8002b96:	f3c1 2184 	ubfx	r1, r1, #10, #5
 8002b9a:	480c      	ldr	r0, [pc, #48]	; (8002bcc <DisplayFWVersion+0x64>)
 8002b9c:	f010 fe0a 	bl	80137b4 <BTPS_OutputMessage>
        Display(("FW Version    : %d.%d \r\n", ((FW_Version_Details.LMP_SubversionResult >> 7) & 0x07) + ((FW_Version_Details.LMP_SubversionResult >> 12) & 0x08), FW_Version_Details.LMP_SubversionResult & 0x7F));
 8002ba0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8002ba4:	0b13      	lsrs	r3, r2, #12
 8002ba6:	f3c2 11c2 	ubfx	r1, r2, #7, #3
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb2:	4319      	orrs	r1, r3
 8002bb4:	4806      	ldr	r0, [pc, #24]	; (8002bd0 <DisplayFWVersion+0x68>)
 8002bb6:	f010 fdfd 	bl	80137b4 <BTPS_OutputMessage>
}
 8002bba:	b009      	add	sp, #36	; 0x24
 8002bbc:	f85d fb04 	ldr.w	pc, [sp], #4
        DisplayFunctionError("HCI_Read_Local_Version_Information", FW_Version_Details.StatusResult);
 8002bc0:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <DisplayFWVersion+0x6c>)
 8002bc2:	f7ff fd01 	bl	80025c8 <DisplayFunctionError>
}
 8002bc6:	e7f8      	b.n	8002bba <DisplayFWVersion+0x52>
 8002bc8:	20001578 	.word	0x20001578
 8002bcc:	0802c164 	.word	0x0802c164
 8002bd0:	0802c17c 	.word	0x0802c17c
 8002bd4:	0802c198 	.word	0x0802c198

08002bd8 <BD_ADDRToStr>:
{
 8002bd8:	b510      	push	{r4, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	ab06      	add	r3, sp, #24
 8002bde:	e903 0003 	stmdb	r3, {r0, r1}
 8002be2:	4610      	mov	r0, r2
   BTPS_SprintF((char *)BoardStr, "0x%02X%02X%02X%02X%02X%02X", Board_Address.BD_ADDR5, Board_Address.BD_ADDR4, Board_Address.BD_ADDR3, Board_Address.BD_ADDR2, Board_Address.BD_ADDR1, Board_Address.BD_ADDR0);
 8002be4:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8002be8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8002bec:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8002bf0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002bf4:	9403      	str	r4, [sp, #12]
 8002bf6:	9102      	str	r1, [sp, #8]
 8002bf8:	9201      	str	r2, [sp, #4]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8002c00:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002c04:	4902      	ldr	r1, [pc, #8]	; (8002c10 <BD_ADDRToStr+0x38>)
 8002c06:	f010 fcd2 	bl	80135ae <BTPS_SprintF>
}
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	bf00      	nop
 8002c10:	0802c1bc 	.word	0x0802c1bc

08002c14 <OpenStack>:
{
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	b08b      	sub	sp, #44	; 0x2c
   if(!BluetoothStackID)
 8002c18:	4b7c      	ldr	r3, [pc, #496]	; (8002e0c <OpenStack+0x1f8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f040 80ed 	bne.w	8002dfc <OpenStack+0x1e8>
 8002c22:	4604      	mov	r4, r0
      if(HCI_DriverInformation)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f000 80ed 	beq.w	8002e04 <OpenStack+0x1f0>
         BTPS_Init((void *)BTPS_Initialization);
 8002c2a:	4608      	mov	r0, r1
 8002c2c:	f010 fd7c 	bl	8013728 <BTPS_Init>
         Display(("\r\nOpenStack().\r\n"));
 8002c30:	4877      	ldr	r0, [pc, #476]	; (8002e10 <OpenStack+0x1fc>)
 8002c32:	f010 fdbf 	bl	80137b4 <BTPS_OutputMessage>
         Result = BSC_Initialize(HCI_DriverInformation, 0);
 8002c36:	2100      	movs	r1, #0
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f016 f861 	bl	8018d00 <BSC_Initialize>
         if(Result > 0)
 8002c3e:	1e01      	subs	r1, r0, #0
 8002c40:	f340 80d3 	ble.w	8002dea <OpenStack+0x1d6>
            BluetoothStackID = Result;
 8002c44:	4c71      	ldr	r4, [pc, #452]	; (8002e0c <OpenStack+0x1f8>)
 8002c46:	6021      	str	r1, [r4, #0]
            Display(("Bluetooth Stack ID: %d\r\n", BluetoothStackID));
 8002c48:	4872      	ldr	r0, [pc, #456]	; (8002e14 <OpenStack+0x200>)
 8002c4a:	f010 fdb3 	bl	80137b4 <BTPS_OutputMessage>
            Result = BSC_EnableFeature(BluetoothStackID, BSC_FEATURE_BLUETOOTH_LOW_ENERGY);
 8002c4e:	2101      	movs	r1, #1
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	f016 f800 	bl	8018c56 <BSC_EnableFeature>
            if(!Result)
 8002c56:	4601      	mov	r1, r0
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	f040 8099 	bne.w	8002d90 <OpenStack+0x17c>
               Display(("LOW ENERGY Support initialized.\r\n"));
 8002c5e:	486e      	ldr	r0, [pc, #440]	; (8002e18 <OpenStack+0x204>)
 8002c60:	f010 fda8 	bl	80137b4 <BTPS_OutputMessage>
            LE_Parameters.IOCapability   = DEFAULT_IO_CAPABILITY;
 8002c64:	4b6d      	ldr	r3, [pc, #436]	; (8002e1c <OpenStack+0x208>)
 8002c66:	2203      	movs	r2, #3
 8002c68:	709a      	strb	r2, [r3, #2]
            LE_Parameters.MITMProtection = DEFAULT_MITM_PROTECTION;
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	70da      	strb	r2, [r3, #3]
            LE_Parameters.OOBDataPresent = FALSE;
 8002c6e:	2200      	movs	r2, #0
 8002c70:	711a      	strb	r2, [r3, #4]
            if(!HCI_Version_Supported(BluetoothStackID, &HCIVersion))
 8002c72:	f10d 010b 	add.w	r1, sp, #11
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <OpenStack+0x1f8>)
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	f01d f8bf 	bl	801fdfc <HCI_Version_Supported>
 8002c7e:	b950      	cbnz	r0, 8002c96 <OpenStack+0x82>
               Display(("Device Chipset: %s\r\n", (HCIVersion <= NUM_SUPPORTED_HCI_VERSIONS)?HCIVersionStrings[HCIVersion]:HCIVersionStrings[NUM_SUPPORTED_HCI_VERSIONS]));
 8002c80:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	f200 8087 	bhi.w	8002d98 <OpenStack+0x184>
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <OpenStack+0x20c>)
 8002c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c90:	4864      	ldr	r0, [pc, #400]	; (8002e24 <OpenStack+0x210>)
 8002c92:	f010 fd8f 	bl	80137b4 <BTPS_OutputMessage>
            Display(("BTPS Version  : %s \r\n", BTPS_VERSION_VERSION_STRING));
 8002c96:	4964      	ldr	r1, [pc, #400]	; (8002e28 <OpenStack+0x214>)
 8002c98:	4864      	ldr	r0, [pc, #400]	; (8002e2c <OpenStack+0x218>)
 8002c9a:	f010 fd8b 	bl	80137b4 <BTPS_OutputMessage>
            DisplayFWVersion();
 8002c9e:	f7ff ff63 	bl	8002b68 <DisplayFWVersion>
            Display(("App Name      : %s \r\n", LE_APP_DEMO_NAME));
 8002ca2:	4963      	ldr	r1, [pc, #396]	; (8002e30 <OpenStack+0x21c>)
 8002ca4:	4863      	ldr	r0, [pc, #396]	; (8002e34 <OpenStack+0x220>)
 8002ca6:	f010 fd85 	bl	80137b4 <BTPS_OutputMessage>
            Display(("App Version   : %s \r\n", DEMO_APPLICATION_VERSION_STRING));            
 8002caa:	4963      	ldr	r1, [pc, #396]	; (8002e38 <OpenStack+0x224>)
 8002cac:	4863      	ldr	r0, [pc, #396]	; (8002e3c <OpenStack+0x228>)
 8002cae:	f010 fd81 	bl	80137b4 <BTPS_OutputMessage>
            if(!GAP_Query_Local_BD_ADDR(BluetoothStackID, &BD_ADDR))
 8002cb2:	a904      	add	r1, sp, #16
 8002cb4:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <OpenStack+0x1f8>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	f017 f8f0 	bl	8019e9c <GAP_Query_Local_BD_ADDR>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d06d      	beq.n	8002d9c <OpenStack+0x188>
            L2CA_Link_Connect_Params.L2CA_Link_Connect_Request_Config  = cqAllowRoleSwitch;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f88d 3008 	strb.w	r3, [sp, #8]
            L2CA_Link_Connect_Params.L2CA_Link_Connect_Response_Config = csMaintainCurrentRole;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f88d 3009 	strb.w	r3, [sp, #9]
            L2CA_Set_Link_Connection_Configuration(BluetoothStackID, &L2CA_Link_Connect_Params);
 8002ccc:	4c4f      	ldr	r4, [pc, #316]	; (8002e0c <OpenStack+0x1f8>)
 8002cce:	a902      	add	r1, sp, #8
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	f01f ff95 	bl	8022c00 <L2CA_Set_Link_Connection_Configuration>
            if(HCI_Command_Supported(BluetoothStackID, HCI_SUPPORTED_COMMAND_WRITE_DEFAULT_LINK_POLICY_BIT_NUMBER) > 0)
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f01c fd9c 	bl	801f816 <HCI_Command_Supported>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	dc66      	bgt.n	8002db0 <OpenStack+0x19c>
            ASSIGN_BD_ADDR(ConnectionBD_ADDR, 0, 0, 0, 0, 0, 0);
 8002ce2:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <OpenStack+0x22c>)
 8002ce4:	2400      	movs	r4, #0
 8002ce6:	701c      	strb	r4, [r3, #0]
 8002ce8:	705c      	strb	r4, [r3, #1]
 8002cea:	709c      	strb	r4, [r3, #2]
 8002cec:	70dc      	strb	r4, [r3, #3]
 8002cee:	711c      	strb	r4, [r3, #4]
 8002cf0:	715c      	strb	r4, [r3, #5]
            ASSIGN_BD_ADDR(CurrentRemoteBD_ADDR, 0, 0, 0, 0, 0, 0);
 8002cf2:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <OpenStack+0x230>)
 8002cf4:	701c      	strb	r4, [r3, #0]
 8002cf6:	705c      	strb	r4, [r3, #1]
 8002cf8:	709c      	strb	r4, [r3, #2]
 8002cfa:	70dc      	strb	r4, [r3, #3]
 8002cfc:	711c      	strb	r4, [r3, #4]
 8002cfe:	715c      	strb	r4, [r3, #5]
            LocalDeviceIsMaster = FALSE;
 8002d00:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <OpenStack+0x234>)
 8002d02:	701c      	strb	r4, [r3, #0]
            GAP_LE_Diversify_Function(BluetoothStackID, (Encryption_Key_t *)(&IR), 1,0, &IRK);
 8002d04:	4e51      	ldr	r6, [pc, #324]	; (8002e4c <OpenStack+0x238>)
 8002d06:	4d41      	ldr	r5, [pc, #260]	; (8002e0c <OpenStack+0x1f8>)
 8002d08:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <OpenStack+0x23c>)
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4623      	mov	r3, r4
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4631      	mov	r1, r6
 8002d12:	6828      	ldr	r0, [r5, #0]
 8002d14:	f019 fdc1 	bl	801c89a <GAP_LE_Diversify_Function>
            GAP_LE_Diversify_Function(BluetoothStackID, (Encryption_Key_t *)(&IR), 3, 0, &DHK);
 8002d18:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <OpenStack+0x240>)
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	4623      	mov	r3, r4
 8002d1e:	2203      	movs	r2, #3
 8002d20:	4631      	mov	r1, r6
 8002d22:	6828      	ldr	r0, [r5, #0]
 8002d24:	f019 fdb9 	bl	801c89a <GAP_LE_Diversify_Function>
            DeviceInfoList = NULL;
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <OpenStack+0x244>)
 8002d2a:	601c      	str	r4, [r3, #0]
            if((Result = GATT_Initialize(BluetoothStackID, GATT_INITIALIZATION_FLAGS_SUPPORT_LE, GATT_Connection_Event_Callback, 0)) == 0)
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <OpenStack+0x248>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	6828      	ldr	r0, [r5, #0]
 8002d34:	f026 fca0 	bl	8029678 <GATT_Initialize>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d14b      	bne.n	8002dd6 <OpenStack+0x1c2>
               Result = GAPS_Initialize_Service(BluetoothStackID, &ServiceID);
 8002d3e:	a903      	add	r1, sp, #12
 8002d40:	6828      	ldr	r0, [r5, #0]
 8002d42:	f7fe fc61 	bl	8001608 <GAPS_Initialize_Service>
               if(Result > 0)
 8002d46:	1e01      	subs	r1, r0, #0
 8002d48:	dd39      	ble.n	8002dbe <OpenStack+0x1aa>
                  GAPSInstanceID = (unsigned int)Result;
 8002d4a:	4e45      	ldr	r6, [pc, #276]	; (8002e60 <OpenStack+0x24c>)
 8002d4c:	6031      	str	r1, [r6, #0]
                  GAPS_Set_Device_Name(BluetoothStackID, GAPSInstanceID, LE_APP_DEMO_NAME);
 8002d4e:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <OpenStack+0x21c>)
 8002d50:	6828      	ldr	r0, [r5, #0]
 8002d52:	f7fe fc8f 	bl	8001674 <GAPS_Set_Device_Name>
                  GAPS_Set_Device_Appearance(BluetoothStackID, GAPSInstanceID, GAP_DEVICE_APPEARENCE_VALUE_GENERIC_COMPUTER);
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	6831      	ldr	r1, [r6, #0]
 8002d5a:	6828      	ldr	r0, [r5, #0]
 8002d5c:	f7fe fd04 	bl	8001768 <GAPS_Set_Device_Appearance>
                  Result = DIS_Initialize_Service(BluetoothStackID, &ServiceID);
 8002d60:	a903      	add	r1, sp, #12
 8002d62:	6828      	ldr	r0, [r5, #0]
 8002d64:	f7fe f9b0 	bl	80010c8 <DIS_Initialize_Service>
                  if(Result > 0)
 8002d68:	1e01      	subs	r1, r0, #0
 8002d6a:	dd48      	ble.n	8002dfe <OpenStack+0x1ea>
                     DISInstanceID = (unsigned int)Result;
 8002d6c:	4e3d      	ldr	r6, [pc, #244]	; (8002e64 <OpenStack+0x250>)
 8002d6e:	6031      	str	r1, [r6, #0]
                     DIS_Set_Manufacturer_Name(BluetoothStackID, DISInstanceID, BTPS_VERSION_COMPANY_NAME_STRING);
 8002d70:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <OpenStack+0x254>)
 8002d72:	6828      	ldr	r0, [r5, #0]
 8002d74:	f7fe fa2e 	bl	80011d4 <DIS_Set_Manufacturer_Name>
                     DIS_Set_Model_Number(BluetoothStackID, DISInstanceID, BTPS_VERSION_VERSION_STRING);
 8002d78:	4f2b      	ldr	r7, [pc, #172]	; (8002e28 <OpenStack+0x214>)
 8002d7a:	463a      	mov	r2, r7
 8002d7c:	6831      	ldr	r1, [r6, #0]
 8002d7e:	6828      	ldr	r0, [r5, #0]
 8002d80:	f7fe fa84 	bl	800128c <DIS_Set_Model_Number>
                     DIS_Set_Serial_Number(BluetoothStackID, DISInstanceID, BTPS_VERSION_VERSION_STRING);
 8002d84:	463a      	mov	r2, r7
 8002d86:	6831      	ldr	r1, [r6, #0]
 8002d88:	6828      	ldr	r0, [r5, #0]
 8002d8a:	f7fe fadb 	bl	8001344 <DIS_Set_Serial_Number>
                     ret_val        = 0;
 8002d8e:	e036      	b.n	8002dfe <OpenStack+0x1ea>
               Display(("LOW ENERGY Support not initialized %d.\r\n", Result));
 8002d90:	4836      	ldr	r0, [pc, #216]	; (8002e6c <OpenStack+0x258>)
 8002d92:	f010 fd0f 	bl	80137b4 <BTPS_OutputMessage>
 8002d96:	e765      	b.n	8002c64 <OpenStack+0x50>
               Display(("Device Chipset: %s\r\n", (HCIVersion <= NUM_SUPPORTED_HCI_VERSIONS)?HCIVersionStrings[HCIVersion]:HCIVersionStrings[NUM_SUPPORTED_HCI_VERSIONS]));
 8002d98:	4935      	ldr	r1, [pc, #212]	; (8002e70 <OpenStack+0x25c>)
 8002d9a:	e779      	b.n	8002c90 <OpenStack+0x7c>
               BD_ADDRToStr(BD_ADDR, BluetoothAddress);
 8002d9c:	aa06      	add	r2, sp, #24
 8002d9e:	9905      	ldr	r1, [sp, #20]
 8002da0:	9804      	ldr	r0, [sp, #16]
 8002da2:	f7ff ff19 	bl	8002bd8 <BD_ADDRToStr>
               Display(("LOCAL BD_ADDR: %s\r\n", BluetoothAddress));
 8002da6:	a906      	add	r1, sp, #24
 8002da8:	4832      	ldr	r0, [pc, #200]	; (8002e74 <OpenStack+0x260>)
 8002daa:	f010 fd03 	bl	80137b4 <BTPS_OutputMessage>
 8002dae:	e787      	b.n	8002cc0 <OpenStack+0xac>
               HCI_Write_Default_Link_Policy_Settings(BluetoothStackID, (HCI_LINK_POLICY_SETTINGS_ENABLE_MASTER_SLAVE_SWITCH|HCI_LINK_POLICY_SETTINGS_ENABLE_SNIFF_MODE), &Status);
 8002db0:	f10d 0217 	add.w	r2, sp, #23
 8002db4:	2105      	movs	r1, #5
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f01d f832 	bl	801fe20 <HCI_Write_Default_Link_Policy_Settings>
 8002dbc:	e791      	b.n	8002ce2 <OpenStack+0xce>
                  DisplayFunctionError("GAPS_Initialize_Service", Result);
 8002dbe:	482e      	ldr	r0, [pc, #184]	; (8002e78 <OpenStack+0x264>)
 8002dc0:	f7ff fc02 	bl	80025c8 <DisplayFunctionError>
                  GATT_Cleanup(BluetoothStackID);
 8002dc4:	4c11      	ldr	r4, [pc, #68]	; (8002e0c <OpenStack+0x1f8>)
 8002dc6:	6820      	ldr	r0, [r4, #0]
 8002dc8:	f026 f8dc 	bl	8028f84 <GATT_Cleanup>
                  BluetoothStackID = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	6023      	str	r3, [r4, #0]
                  ret_val          = UNABLE_TO_INITIALIZE_STACK;
 8002dd0:	f06f 0406 	mvn.w	r4, #6
 8002dd4:	e013      	b.n	8002dfe <OpenStack+0x1ea>
               DisplayFunctionError("GATT_Initialize", Result);
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4828      	ldr	r0, [pc, #160]	; (8002e7c <OpenStack+0x268>)
 8002dda:	f7ff fbf5 	bl	80025c8 <DisplayFunctionError>
               BluetoothStackID = 0;
 8002dde:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <OpenStack+0x1f8>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
               ret_val          = UNABLE_TO_INITIALIZE_STACK;
 8002de4:	f06f 0406 	mvn.w	r4, #6
 8002de8:	e009      	b.n	8002dfe <OpenStack+0x1ea>
            DisplayFunctionError("BSC_Initialize", Result);
 8002dea:	4825      	ldr	r0, [pc, #148]	; (8002e80 <OpenStack+0x26c>)
 8002dec:	f7ff fbec 	bl	80025c8 <DisplayFunctionError>
            BluetoothStackID = 0;
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <OpenStack+0x1f8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
            ret_val          = UNABLE_TO_INITIALIZE_STACK;
 8002df6:	f06f 0406 	mvn.w	r4, #6
 8002dfa:	e000      	b.n	8002dfe <OpenStack+0x1ea>
   int                        ret_val = 0;
 8002dfc:	2400      	movs	r4, #0
}
 8002dfe:	4620      	mov	r0, r4
 8002e00:	b00b      	add	sp, #44	; 0x2c
 8002e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
         ret_val = INVALID_PARAMETERS_ERROR;
 8002e04:	f06f 0405 	mvn.w	r4, #5
   return(ret_val);
 8002e08:	e7f9      	b.n	8002dfe <OpenStack+0x1ea>
 8002e0a:	bf00      	nop
 8002e0c:	20001578 	.word	0x20001578
 8002e10:	0802c1f0 	.word	0x0802c1f0
 8002e14:	0802c204 	.word	0x0802c204
 8002e18:	0802c220 	.word	0x0802c220
 8002e1c:	200016cc 	.word	0x200016cc
 8002e20:	0802f290 	.word	0x0802f290
 8002e24:	0802c270 	.word	0x0802c270
 8002e28:	0802c288 	.word	0x0802c288
 8002e2c:	0802c290 	.word	0x0802c290
 8002e30:	0802c2a8 	.word	0x0802c2a8
 8002e34:	0802c2b0 	.word	0x0802c2b0
 8002e38:	0802c2c8 	.word	0x0802c2c8
 8002e3c:	0802c2cc 	.word	0x0802c2cc
 8002e40:	20001684 	.word	0x20001684
 8002e44:	20001694 	.word	0x20001694
 8002e48:	200016d1 	.word	0x200016d1
 8002e4c:	0802f2c8 	.word	0x0802f2c8
 8002e50:	200016bc 	.word	0x200016bc
 8002e54:	2000169c 	.word	0x2000169c
 8002e58:	200016b0 	.word	0x200016b0
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	200016b4 	.word	0x200016b4
 8002e64:	200016ac 	.word	0x200016ac
 8002e68:	0802c2f8 	.word	0x0802c2f8
 8002e6c:	0802c244 	.word	0x0802c244
 8002e70:	0802c1d8 	.word	0x0802c1d8
 8002e74:	0802c2e4 	.word	0x0802c2e4
 8002e78:	0802c30c 	.word	0x0802c30c
 8002e7c:	0802c324 	.word	0x0802c324
 8002e80:	0802c334 	.word	0x0802c334

08002e84 <GATT_Connection_Event_Callback>:
{
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	b086      	sub	sp, #24
   if((BluetoothStackID) && (GATT_Connection_Event_Data))
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	f000 80da 	beq.w	8003042 <GATT_Connection_Event_Callback+0x1be>
 8002e8e:	460c      	mov	r4, r1
 8002e90:	4605      	mov	r5, r0
 8002e92:	2900      	cmp	r1, #0
 8002e94:	f000 80d5 	beq.w	8003042 <GATT_Connection_Event_Callback+0x1be>
      switch(GATT_Connection_Event_Data->Event_Data_Type)
 8002e98:	780b      	ldrb	r3, [r1, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d04f      	beq.n	8002f3e <GATT_Connection_Event_Callback+0xba>
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d077      	beq.n	8002f92 <GATT_Connection_Event_Callback+0x10e>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <GATT_Connection_Event_Callback+0x28>
      DisplayPrompt();
 8002ea6:	f7ff fb87 	bl	80025b8 <DisplayPrompt>
 8002eaa:	e0d2      	b.n	8003052 <GATT_Connection_Event_Callback+0x1ce>
            if(GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data)
 8002eac:	684b      	ldr	r3, [r1, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d041      	beq.n	8002f36 <GATT_Connection_Event_Callback+0xb2>
               ConnectionID = GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->ConnectionID;
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <GATT_Connection_Event_Callback+0x1d4>)
 8002eb6:	601a      	str	r2, [r3, #0]
               Display(("\r\netGATT_Connection_Device_Connection with size %u: \r\n", GATT_Connection_Event_Data->Event_Data_Size));
 8002eb8:	8849      	ldrh	r1, [r1, #2]
 8002eba:	4868      	ldr	r0, [pc, #416]	; (800305c <GATT_Connection_Event_Callback+0x1d8>)
 8002ebc:	f010 fc7a 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->RemoteDevice, BoardStr);
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	7a59      	ldrb	r1, [r3, #9]
 8002ec4:	7a9e      	ldrb	r6, [r3, #10]
 8002ec6:	aa02      	add	r2, sp, #8
 8002ec8:	f8d3 0005 	ldr.w	r0, [r3, #5]
 8002ecc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8002ed0:	f7ff fe82 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->ConnectionID));
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	4861      	ldr	r0, [pc, #388]	; (8003060 <GATT_Connection_Event_Callback+0x1dc>)
 8002eda:	f010 fc6b 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", ((GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8002ede:	6863      	ldr	r3, [r4, #4]
 8002ee0:	791b      	ldrb	r3, [r3, #4]
 8002ee2:	bb33      	cbnz	r3, 8002f32 <GATT_Connection_Event_Callback+0xae>
 8002ee4:	495f      	ldr	r1, [pc, #380]	; (8003064 <GATT_Connection_Event_Callback+0x1e0>)
 8002ee6:	4860      	ldr	r0, [pc, #384]	; (8003068 <GATT_Connection_Event_Callback+0x1e4>)
 8002ee8:	f010 fc64 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Remote Device:   %s.\r\n", BoardStr));
 8002eec:	a902      	add	r1, sp, #8
 8002eee:	485f      	ldr	r0, [pc, #380]	; (800306c <GATT_Connection_Event_Callback+0x1e8>)
 8002ef0:	f010 fc60 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection MTU:  %u.\r\n", GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->MTU));
 8002ef4:	6863      	ldr	r3, [r4, #4]
 8002ef6:	8999      	ldrh	r1, [r3, #12]
 8002ef8:	485d      	ldr	r0, [pc, #372]	; (8003070 <GATT_Connection_Event_Callback+0x1ec>)
 8002efa:	f010 fc5b 	bl	80137b4 <BTPS_OutputMessage>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->RemoteDevice)) != NULL)
 8002efe:	6863      	ldr	r3, [r4, #4]
 8002f00:	7a5a      	ldrb	r2, [r3, #9]
 8002f02:	7a98      	ldrb	r0, [r3, #10]
 8002f04:	f8d3 1005 	ldr.w	r1, [r3, #5]
 8002f08:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002f0c:	4859      	ldr	r0, [pc, #356]	; (8003074 <GATT_Connection_Event_Callback+0x1f0>)
 8002f0e:	f7ff fbb7 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d0c7      	beq.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
                  if(LocalDeviceIsMaster)
 8002f16:	4b58      	ldr	r3, [pc, #352]	; (8003078 <GATT_Connection_Event_Callback+0x1f4>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0c3      	beq.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
                     GATT_Exchange_MTU_Request(BluetoothStackID, ConnectionID, BTPS_CONFIGURATION_GATT_MAXIMUM_SUPPORTED_MTU_SIZE, GATT_ClientEventCallback_HRP, 0);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4b56      	ldr	r3, [pc, #344]	; (800307c <GATT_Connection_Event_Callback+0x1f8>)
 8002f24:	2283      	movs	r2, #131	; 0x83
 8002f26:	494c      	ldr	r1, [pc, #304]	; (8003058 <GATT_Connection_Event_Callback+0x1d4>)
 8002f28:	6809      	ldr	r1, [r1, #0]
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f026 fb1c 	bl	8029568 <GATT_Exchange_MTU_Request>
 8002f30:	e7b9      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
               Display(("   Connection Type: %s.\r\n", ((GATT_Connection_Event_Data->Event_Data.GATT_Device_Connection_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8002f32:	4953      	ldr	r1, [pc, #332]	; (8003080 <GATT_Connection_Event_Callback+0x1fc>)
 8002f34:	e7d7      	b.n	8002ee6 <GATT_Connection_Event_Callback+0x62>
               Display(("Error - Null Connection Data.\r\n"));
 8002f36:	4853      	ldr	r0, [pc, #332]	; (8003084 <GATT_Connection_Event_Callback+0x200>)
 8002f38:	f010 fc3c 	bl	80137b4 <BTPS_OutputMessage>
 8002f3c:	e7b3      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
            if(GATT_Connection_Event_Data->Event_Data.GATT_Device_Disconnection_Data)
 8002f3e:	684b      	ldr	r3, [r1, #4]
 8002f40:	b31b      	cbz	r3, 8002f8a <GATT_Connection_Event_Callback+0x106>
               ConnectionID = 0;
 8002f42:	4b45      	ldr	r3, [pc, #276]	; (8003058 <GATT_Connection_Event_Callback+0x1d4>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
               Display(("\r\netGATT_Connection_Device_Disconnection with size %u: \r\n", GATT_Connection_Event_Data->Event_Data_Size));
 8002f48:	8849      	ldrh	r1, [r1, #2]
 8002f4a:	484f      	ldr	r0, [pc, #316]	; (8003088 <GATT_Connection_Event_Callback+0x204>)
 8002f4c:	f010 fc32 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Connection_Event_Data->Event_Data.GATT_Device_Disconnection_Data->RemoteDevice, BoardStr);
 8002f50:	6863      	ldr	r3, [r4, #4]
 8002f52:	7a59      	ldrb	r1, [r3, #9]
 8002f54:	7a9d      	ldrb	r5, [r3, #10]
 8002f56:	aa02      	add	r2, sp, #8
 8002f58:	f8d3 0005 	ldr.w	r0, [r3, #5]
 8002f5c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002f60:	f7ff fe3a 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Connection_Event_Data->Event_Data.GATT_Device_Disconnection_Data->ConnectionID));
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	483d      	ldr	r0, [pc, #244]	; (8003060 <GATT_Connection_Event_Callback+0x1dc>)
 8002f6a:	f010 fc23 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", ((GATT_Connection_Event_Data->Event_Data.GATT_Device_Disconnection_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8002f6e:	6863      	ldr	r3, [r4, #4]
 8002f70:	791b      	ldrb	r3, [r3, #4]
 8002f72:	b943      	cbnz	r3, 8002f86 <GATT_Connection_Event_Callback+0x102>
 8002f74:	493b      	ldr	r1, [pc, #236]	; (8003064 <GATT_Connection_Event_Callback+0x1e0>)
 8002f76:	483c      	ldr	r0, [pc, #240]	; (8003068 <GATT_Connection_Event_Callback+0x1e4>)
 8002f78:	f010 fc1c 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Remote Device:   %s.\r\n", BoardStr));
 8002f7c:	a902      	add	r1, sp, #8
 8002f7e:	483b      	ldr	r0, [pc, #236]	; (800306c <GATT_Connection_Event_Callback+0x1e8>)
 8002f80:	f010 fc18 	bl	80137b4 <BTPS_OutputMessage>
 8002f84:	e78f      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
               Display(("   Connection Type: %s.\r\n", ((GATT_Connection_Event_Data->Event_Data.GATT_Device_Disconnection_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8002f86:	493e      	ldr	r1, [pc, #248]	; (8003080 <GATT_Connection_Event_Callback+0x1fc>)
 8002f88:	e7f5      	b.n	8002f76 <GATT_Connection_Event_Callback+0xf2>
               Display(("Error - Null Disconnection Data.\r\n"));
 8002f8a:	4840      	ldr	r0, [pc, #256]	; (800308c <GATT_Connection_Event_Callback+0x208>)
 8002f8c:	f010 fc12 	bl	80137b4 <BTPS_OutputMessage>
 8002f90:	e789      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
            if(GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data)
 8002f92:	684b      	ldr	r3, [r1, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d050      	beq.n	800303a <GATT_Connection_Event_Callback+0x1b6>
               Display(("\r\netGATT_Connection_Server_Notification with size %u: \r\n", GATT_Connection_Event_Data->Event_Data_Size));
 8002f98:	8849      	ldrh	r1, [r1, #2]
 8002f9a:	483d      	ldr	r0, [pc, #244]	; (8003090 <GATT_Connection_Event_Callback+0x20c>)
 8002f9c:	f010 fc0a 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->RemoteDevice, BoardStr);
 8002fa0:	6863      	ldr	r3, [r4, #4]
 8002fa2:	7a59      	ldrb	r1, [r3, #9]
 8002fa4:	7a9d      	ldrb	r5, [r3, #10]
 8002fa6:	aa02      	add	r2, sp, #8
 8002fa8:	f8d3 0005 	ldr.w	r0, [r3, #5]
 8002fac:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002fb0:	f7ff fe12 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:    %u.\r\n", GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->ConnectionID));
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	4836      	ldr	r0, [pc, #216]	; (8003094 <GATT_Connection_Event_Callback+0x210>)
 8002fba:	f010 fbfb 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type:  %s.\r\n", ((GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	791b      	ldrb	r3, [r3, #4]
 8002fc2:	bb2b      	cbnz	r3, 8003010 <GATT_Connection_Event_Callback+0x18c>
 8002fc4:	4927      	ldr	r1, [pc, #156]	; (8003064 <GATT_Connection_Event_Callback+0x1e0>)
 8002fc6:	4834      	ldr	r0, [pc, #208]	; (8003098 <GATT_Connection_Event_Callback+0x214>)
 8002fc8:	f010 fbf4 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Remote Device:    %s.\r\n", BoardStr));
 8002fcc:	a902      	add	r1, sp, #8
 8002fce:	4833      	ldr	r0, [pc, #204]	; (800309c <GATT_Connection_Event_Callback+0x218>)
 8002fd0:	f010 fbf0 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Attribute Handle: 0x%04X.\r\n", GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->AttributeHandle));
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	8999      	ldrh	r1, [r3, #12]
 8002fd8:	4831      	ldr	r0, [pc, #196]	; (80030a0 <GATT_Connection_Event_Callback+0x21c>)
 8002fda:	f010 fbeb 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Attribute Length: %d.\r\n", GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->AttributeValueLength));
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	89d9      	ldrh	r1, [r3, #14]
 8002fe2:	4830      	ldr	r0, [pc, #192]	; (80030a4 <GATT_Connection_Event_Callback+0x220>)
 8002fe4:	f010 fbe6 	bl	80137b4 <BTPS_OutputMessage>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->RemoteDevice)) != NULL)
 8002fe8:	6863      	ldr	r3, [r4, #4]
 8002fea:	7a5a      	ldrb	r2, [r3, #9]
 8002fec:	7a98      	ldrb	r0, [r3, #10]
 8002fee:	f8d3 1005 	ldr.w	r1, [r3, #5]
 8002ff2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002ff6:	481f      	ldr	r0, [pc, #124]	; (8003074 <GATT_Connection_Event_Callback+0x1f0>)
 8002ff8:	f7ff fb42 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8002ffc:	b1c8      	cbz	r0, 8003032 <GATT_Connection_Event_Callback+0x1ae>
                  if(DeviceInfo->ClientInfo.Heart_Rate_Measurement == GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->AttributeHandle)
 8002ffe:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8003000:	6863      	ldr	r3, [r4, #4]
 8003002:	899b      	ldrh	r3, [r3, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d005      	beq.n	8003014 <GATT_Connection_Event_Callback+0x190>
                     Display(("Error - Unknown Notification Atrribute Handle.\r\n"));
 8003008:	4827      	ldr	r0, [pc, #156]	; (80030a8 <GATT_Connection_Event_Callback+0x224>)
 800300a:	f010 fbd3 	bl	80137b4 <BTPS_OutputMessage>
 800300e:	e74a      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
               Display(("   Connection Type:  %s.\r\n", ((GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8003010:	491b      	ldr	r1, [pc, #108]	; (8003080 <GATT_Connection_Event_Callback+0x1fc>)
 8003012:	e7d8      	b.n	8002fc6 <GATT_Connection_Event_Callback+0x142>
                     Display(("\r\n   Heart Rate Measurement Data:\r\n"));
 8003014:	4825      	ldr	r0, [pc, #148]	; (80030ac <GATT_Connection_Event_Callback+0x228>)
 8003016:	f010 fbcd 	bl	80137b4 <BTPS_OutputMessage>
                     if((HeartRateMeasurement = DecodeDisplayHeartRate(GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->AttributeValueLength, GATT_Connection_Event_Data->Event_Data.GATT_Server_Notification_Data->AttributeValue, TRUE)) != NULL)
 800301a:	6863      	ldr	r3, [r4, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	6919      	ldr	r1, [r3, #16]
 8003020:	89d8      	ldrh	r0, [r3, #14]
 8003022:	f7ff fceb 	bl	80029fc <DecodeDisplayHeartRate>
 8003026:	2800      	cmp	r0, #0
 8003028:	f43f af3d 	beq.w	8002ea6 <GATT_Connection_Event_Callback+0x22>
                        BTPS_FreeMemory((void *)HeartRateMeasurement);
 800302c:	f010 f9e0 	bl	80133f0 <BTPS_FreeMemory>
 8003030:	e739      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
                  Display(("Error - Remote Server Unknown.\r\n"));
 8003032:	481f      	ldr	r0, [pc, #124]	; (80030b0 <GATT_Connection_Event_Callback+0x22c>)
 8003034:	f010 fbbe 	bl	80137b4 <BTPS_OutputMessage>
 8003038:	e735      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
               Display(("Error - Null Server Notification Data.\r\n"));
 800303a:	481e      	ldr	r0, [pc, #120]	; (80030b4 <GATT_Connection_Event_Callback+0x230>)
 800303c:	f010 fbba 	bl	80137b4 <BTPS_OutputMessage>
 8003040:	e731      	b.n	8002ea6 <GATT_Connection_Event_Callback+0x22>
      Display(("\r\n"));
 8003042:	481d      	ldr	r0, [pc, #116]	; (80030b8 <GATT_Connection_Event_Callback+0x234>)
 8003044:	f010 fbb6 	bl	80137b4 <BTPS_OutputMessage>
      Display(("GATT Connection Callback Data: Event_Data = NULL.\r\n"));
 8003048:	481c      	ldr	r0, [pc, #112]	; (80030bc <GATT_Connection_Event_Callback+0x238>)
 800304a:	f010 fbb3 	bl	80137b4 <BTPS_OutputMessage>
      DisplayPrompt();
 800304e:	f7ff fab3 	bl	80025b8 <DisplayPrompt>
}
 8003052:	b006      	add	sp, #24
 8003054:	bd70      	pop	{r4, r5, r6, pc}
 8003056:	bf00      	nop
 8003058:	2000168c 	.word	0x2000168c
 800305c:	0802c34c 	.word	0x0802c34c
 8003060:	0802c384 	.word	0x0802c384
 8003064:	0802ee58 	.word	0x0802ee58
 8003068:	0802c3a0 	.word	0x0802c3a0
 800306c:	0802c3bc 	.word	0x0802c3bc
 8003070:	0802c3d8 	.word	0x0802c3d8
 8003074:	200016b0 	.word	0x200016b0
 8003078:	200016d1 	.word	0x200016d1
 800307c:	080030c1 	.word	0x080030c1
 8003080:	0802c344 	.word	0x0802c344
 8003084:	0802c3f4 	.word	0x0802c3f4
 8003088:	0802c414 	.word	0x0802c414
 800308c:	0802c450 	.word	0x0802c450
 8003090:	0802c474 	.word	0x0802c474
 8003094:	0802c4b0 	.word	0x0802c4b0
 8003098:	0802c4cc 	.word	0x0802c4cc
 800309c:	0802c4e8 	.word	0x0802c4e8
 80030a0:	0802c504 	.word	0x0802c504
 80030a4:	0802c524 	.word	0x0802c524
 80030a8:	0802c564 	.word	0x0802c564
 80030ac:	0802c540 	.word	0x0802c540
 80030b0:	0802c598 	.word	0x0802c598
 80030b4:	0802c5bc 	.word	0x0802c5bc
 80030b8:	0802c380 	.word	0x0802c380
 80030bc:	0802c5e8 	.word	0x0802c5e8

080030c0 <GATT_ClientEventCallback_HRP>:
{
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	b086      	sub	sp, #24
   if((BluetoothStackID) && (GATT_Client_Event_Data))
 80030c4:	2800      	cmp	r0, #0
 80030c6:	f000 81ba 	beq.w	800343e <GATT_ClientEventCallback_HRP+0x37e>
 80030ca:	460c      	mov	r4, r1
 80030cc:	4615      	mov	r5, r2
 80030ce:	2900      	cmp	r1, #0
 80030d0:	f000 81b5 	beq.w	800343e <GATT_ClientEventCallback_HRP+0x37e>
      switch(GATT_Client_Event_Data->Event_Data_Type)
 80030d4:	780b      	ldrb	r3, [r1, #0]
 80030d6:	2b0d      	cmp	r3, #13
 80030d8:	f200 8117 	bhi.w	800330a <GATT_ClientEventCallback_HRP+0x24a>
 80030dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030e0:	0115000e 	.word	0x0115000e
 80030e4:	01150115 	.word	0x01150115
 80030e8:	01150115 	.word	0x01150115
 80030ec:	0115006b 	.word	0x0115006b
 80030f0:	01150115 	.word	0x01150115
 80030f4:	01150160 	.word	0x01150160
 80030f8:	00eb0115 	.word	0x00eb0115
            if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data)
 80030fc:	684b      	ldr	r3, [r1, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d055      	beq.n	80031ae <GATT_ClientEventCallback_HRP+0xee>
               Display(("\r\nError Response.\r\n"));
 8003102:	4886      	ldr	r0, [pc, #536]	; (800331c <GATT_ClientEventCallback_HRP+0x25c>)
 8003104:	f010 fb56 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->RemoteDevice, BoardStr);
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	7b59      	ldrb	r1, [r3, #13]
 800310c:	7b9d      	ldrb	r5, [r3, #14]
 800310e:	aa02      	add	r2, sp, #8
 8003110:	f8d3 0009 	ldr.w	r0, [r3, #9]
 8003114:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003118:	f7ff fd5e 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ConnectionID));
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	487f      	ldr	r0, [pc, #508]	; (8003320 <GATT_ClientEventCallback_HRP+0x260>)
 8003122:	f010 fb47 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Transaction ID:  %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->TransactionID));
 8003126:	6863      	ldr	r3, [r4, #4]
 8003128:	6859      	ldr	r1, [r3, #4]
 800312a:	487e      	ldr	r0, [pc, #504]	; (8003324 <GATT_ClientEventCallback_HRP+0x264>)
 800312c:	f010 fb42 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 8003130:	6863      	ldr	r3, [r4, #4]
 8003132:	7a1b      	ldrb	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12b      	bne.n	8003190 <GATT_ClientEventCallback_HRP+0xd0>
 8003138:	497b      	ldr	r1, [pc, #492]	; (8003328 <GATT_ClientEventCallback_HRP+0x268>)
 800313a:	487c      	ldr	r0, [pc, #496]	; (800332c <GATT_ClientEventCallback_HRP+0x26c>)
 800313c:	f010 fb3a 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:         %s.\r\n", BoardStr));
 8003140:	a902      	add	r1, sp, #8
 8003142:	487b      	ldr	r0, [pc, #492]	; (8003330 <GATT_ClientEventCallback_HRP+0x270>)
 8003144:	f010 fb36 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Error Type:      %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorType == retErrorResponse)?"Response Error":"Response Timeout"));
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	7bdb      	ldrb	r3, [r3, #15]
 800314c:	bb13      	cbnz	r3, 8003194 <GATT_ClientEventCallback_HRP+0xd4>
 800314e:	4979      	ldr	r1, [pc, #484]	; (8003334 <GATT_ClientEventCallback_HRP+0x274>)
 8003150:	4879      	ldr	r0, [pc, #484]	; (8003338 <GATT_ClientEventCallback_HRP+0x278>)
 8003152:	f010 fb2f 	bl	80137b4 <BTPS_OutputMessage>
               if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorType == retErrorResponse)
 8003156:	6863      	ldr	r3, [r4, #4]
 8003158:	7bda      	ldrb	r2, [r3, #15]
 800315a:	2a00      	cmp	r2, #0
 800315c:	f040 80d5 	bne.w	800330a <GATT_ClientEventCallback_HRP+0x24a>
                  Display(("   Request Opcode:  0x%02X.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->RequestOpCode));
 8003160:	7c19      	ldrb	r1, [r3, #16]
 8003162:	4876      	ldr	r0, [pc, #472]	; (800333c <GATT_ClientEventCallback_HRP+0x27c>)
 8003164:	f010 fb26 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("   Request Handle:  0x%04X.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->RequestHandle));
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	8a59      	ldrh	r1, [r3, #18]
 800316c:	4874      	ldr	r0, [pc, #464]	; (8003340 <GATT_ClientEventCallback_HRP+0x280>)
 800316e:	f010 fb21 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("   Error Code:      0x%02X.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode));
 8003172:	6863      	ldr	r3, [r4, #4]
 8003174:	7d19      	ldrb	r1, [r3, #20]
 8003176:	4873      	ldr	r0, [pc, #460]	; (8003344 <GATT_ClientEventCallback_HRP+0x284>)
 8003178:	f010 fb1c 	bl	80137b4 <BTPS_OutputMessage>
                  if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode < NUMBER_OF_ERROR_CODES)
 800317c:	6863      	ldr	r3, [r4, #4]
 800317e:	7d1b      	ldrb	r3, [r3, #20]
 8003180:	2b11      	cmp	r3, #17
 8003182:	d909      	bls.n	8003198 <GATT_ClientEventCallback_HRP+0xd8>
                     if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode == HRS_ERROR_CODE_CONTROL_POINT_NOT_SUPPORTED)
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d00e      	beq.n	80031a6 <GATT_ClientEventCallback_HRP+0xe6>
                        Display(("   Error Mesg:      Unknown.\r\n"));
 8003188:	486f      	ldr	r0, [pc, #444]	; (8003348 <GATT_ClientEventCallback_HRP+0x288>)
 800318a:	f010 fb13 	bl	80137b4 <BTPS_OutputMessage>
 800318e:	e0bc      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 8003190:	496e      	ldr	r1, [pc, #440]	; (800334c <GATT_ClientEventCallback_HRP+0x28c>)
 8003192:	e7d2      	b.n	800313a <GATT_ClientEventCallback_HRP+0x7a>
               Display(("   Error Type:      %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorType == retErrorResponse)?"Response Error":"Response Timeout"));
 8003194:	496e      	ldr	r1, [pc, #440]	; (8003350 <GATT_ClientEventCallback_HRP+0x290>)
 8003196:	e7db      	b.n	8003150 <GATT_ClientEventCallback_HRP+0x90>
                     Display(("   Error Mesg:      %s.\r\n", ErrorCodeStr[GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode]));
 8003198:	4a6e      	ldr	r2, [pc, #440]	; (8003354 <GATT_ClientEventCallback_HRP+0x294>)
 800319a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800319e:	486e      	ldr	r0, [pc, #440]	; (8003358 <GATT_ClientEventCallback_HRP+0x298>)
 80031a0:	f010 fb08 	bl	80137b4 <BTPS_OutputMessage>
 80031a4:	e0b1      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
                        Display(("   Error Mesg:      Control Point Not Supported.\r\n"));
 80031a6:	486d      	ldr	r0, [pc, #436]	; (800335c <GATT_ClientEventCallback_HRP+0x29c>)
 80031a8:	f010 fb04 	bl	80137b4 <BTPS_OutputMessage>
 80031ac:	e0ad      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
               Display(("Error - Null Error Response Data.\r\n"));
 80031ae:	486c      	ldr	r0, [pc, #432]	; (8003360 <GATT_ClientEventCallback_HRP+0x2a0>)
 80031b0:	f010 fb00 	bl	80137b4 <BTPS_OutputMessage>
 80031b4:	e0a9      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
            if(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data)
 80031b6:	684b      	ldr	r3, [r1, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d078      	beq.n	80032ae <GATT_ClientEventCallback_HRP+0x1ee>
               Display(("\r\nRead Response.\r\n"));
 80031bc:	4869      	ldr	r0, [pc, #420]	; (8003364 <GATT_ClientEventCallback_HRP+0x2a4>)
 80031be:	f010 faf9 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->RemoteDevice, BoardStr);
 80031c2:	6863      	ldr	r3, [r4, #4]
 80031c4:	7b59      	ldrb	r1, [r3, #13]
 80031c6:	7b9e      	ldrb	r6, [r3, #14]
 80031c8:	aa02      	add	r2, sp, #8
 80031ca:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80031ce:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80031d2:	f7ff fd01 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->ConnectionID));
 80031d6:	6863      	ldr	r3, [r4, #4]
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	4851      	ldr	r0, [pc, #324]	; (8003320 <GATT_ClientEventCallback_HRP+0x260>)
 80031dc:	f010 faea 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Transaction ID:  %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->TransactionID));
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	484f      	ldr	r0, [pc, #316]	; (8003324 <GATT_ClientEventCallback_HRP+0x264>)
 80031e6:	f010 fae5 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 80031ea:	6863      	ldr	r3, [r4, #4]
 80031ec:	7a1b      	ldrb	r3, [r3, #8]
 80031ee:	bb43      	cbnz	r3, 8003242 <GATT_ClientEventCallback_HRP+0x182>
 80031f0:	494d      	ldr	r1, [pc, #308]	; (8003328 <GATT_ClientEventCallback_HRP+0x268>)
 80031f2:	484e      	ldr	r0, [pc, #312]	; (800332c <GATT_ClientEventCallback_HRP+0x26c>)
 80031f4:	f010 fade 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:         %s.\r\n", BoardStr));
 80031f8:	a902      	add	r1, sp, #8
 80031fa:	484d      	ldr	r0, [pc, #308]	; (8003330 <GATT_ClientEventCallback_HRP+0x270>)
 80031fc:	f010 fada 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Data Length:     %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength));
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	8a19      	ldrh	r1, [r3, #16]
 8003204:	4858      	ldr	r0, [pc, #352]	; (8003368 <GATT_ClientEventCallback_HRP+0x2a8>)
 8003206:	f010 fad5 	bl	80137b4 <BTPS_OutputMessage>
               if(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength != 0)
 800320a:	6863      	ldr	r3, [r4, #4]
 800320c:	8a1a      	ldrh	r2, [r3, #16]
 800320e:	2a00      	cmp	r2, #0
 8003210:	d07b      	beq.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
                  if(((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->RemoteDevice)) != NULL) && (CallbackParameter != NULL))
 8003212:	7b5a      	ldrb	r2, [r3, #13]
 8003214:	7b98      	ldrb	r0, [r3, #14]
 8003216:	f8d3 1009 	ldr.w	r1, [r3, #9]
 800321a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800321e:	4853      	ldr	r0, [pc, #332]	; (800336c <GATT_ClientEventCallback_HRP+0x2ac>)
 8003220:	f7ff fa2e 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8003224:	4606      	mov	r6, r0
 8003226:	b120      	cbz	r0, 8003232 <GATT_ClientEventCallback_HRP+0x172>
 8003228:	b11d      	cbz	r5, 8003232 <GATT_ClientEventCallback_HRP+0x172>
                     if(CallbackParameter == DeviceInfo->ClientInfo.Body_Sensor_Location)
 800322a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800322c:	42ab      	cmp	r3, r5
 800322e:	d00a      	beq.n	8003246 <GATT_ClientEventCallback_HRP+0x186>
                        CallbackParameter = NULL;
 8003230:	2500      	movs	r5, #0
                  if((DeviceInfo == NULL) || (CallbackParameter == NULL))
 8003232:	b10e      	cbz	r6, 8003238 <GATT_ClientEventCallback_HRP+0x178>
 8003234:	2d00      	cmp	r5, #0
 8003236:	d168      	bne.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
                     Display(("   Data:            { "));
 8003238:	484d      	ldr	r0, [pc, #308]	; (8003370 <GATT_ClientEventCallback_HRP+0x2b0>)
 800323a:	f010 fabb 	bl	80137b4 <BTPS_OutputMessage>
                     for(i = 0; i < (GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength - 1); i++)
 800323e:	2500      	movs	r5, #0
 8003240:	e02a      	b.n	8003298 <GATT_ClientEventCallback_HRP+0x1d8>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 8003242:	4942      	ldr	r1, [pc, #264]	; (800334c <GATT_ClientEventCallback_HRP+0x28c>)
 8003244:	e7d5      	b.n	80031f2 <GATT_ClientEventCallback_HRP+0x132>
                        if(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength == 1)
 8003246:	6863      	ldr	r3, [r4, #4]
 8003248:	8a18      	ldrh	r0, [r3, #16]
 800324a:	2801      	cmp	r0, #1
 800324c:	d004      	beq.n	8003258 <GATT_ClientEventCallback_HRP+0x198>
                           Display(("\r\nError - Invalid length (%u) for Body Sensor Location response.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength));
 800324e:	4601      	mov	r1, r0
 8003250:	4848      	ldr	r0, [pc, #288]	; (8003374 <GATT_ClientEventCallback_HRP+0x2b4>)
 8003252:	f010 faaf 	bl	80137b4 <BTPS_OutputMessage>
 8003256:	e7ec      	b.n	8003232 <GATT_ClientEventCallback_HRP+0x172>
                           if((Result = HRS_Decode_Body_Sensor_Location(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValue, &BodySensorLocation)) == 0)
 8003258:	f10d 0207 	add.w	r2, sp, #7
 800325c:	6959      	ldr	r1, [r3, #20]
 800325e:	f003 fb15 	bl	800688c <HRS_Decode_Body_Sensor_Location>
 8003262:	4601      	mov	r1, r0
 8003264:	b970      	cbnz	r0, 8003284 <GATT_ClientEventCallback_HRP+0x1c4>
                              if(HRS_BODY_SENSOR_LOCATION_VALID_TEMPERATURE_TYPE(BodySensorLocation))
 8003266:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d806      	bhi.n	800327c <GATT_ClientEventCallback_HRP+0x1bc>
                                 Display(("\r\n   Body Sensor Location is '%s'.\r\n", SensorLocationTable[BodySensorLocation]));
 800326e:	4a42      	ldr	r2, [pc, #264]	; (8003378 <GATT_ClientEventCallback_HRP+0x2b8>)
 8003270:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003274:	4841      	ldr	r0, [pc, #260]	; (800337c <GATT_ClientEventCallback_HRP+0x2bc>)
 8003276:	f010 fa9d 	bl	80137b4 <BTPS_OutputMessage>
 800327a:	e7da      	b.n	8003232 <GATT_ClientEventCallback_HRP+0x172>
                                 Display(("\r\nError - Body Sensor Location has been corrupted.\r\n"));
 800327c:	4840      	ldr	r0, [pc, #256]	; (8003380 <GATT_ClientEventCallback_HRP+0x2c0>)
 800327e:	f010 fa99 	bl	80137b4 <BTPS_OutputMessage>
 8003282:	e7d6      	b.n	8003232 <GATT_ClientEventCallback_HRP+0x172>
                              DisplayFunctionError("HRS_Decode_Body_Sensor_Location", Result);
 8003284:	483f      	ldr	r0, [pc, #252]	; (8003384 <GATT_ClientEventCallback_HRP+0x2c4>)
 8003286:	f7ff f99f 	bl	80025c8 <DisplayFunctionError>
 800328a:	e7d2      	b.n	8003232 <GATT_ClientEventCallback_HRP+0x172>
                        Display(("0x%02x, ", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValue[i]));
 800328c:	6953      	ldr	r3, [r2, #20]
 800328e:	5d59      	ldrb	r1, [r3, r5]
 8003290:	483d      	ldr	r0, [pc, #244]	; (8003388 <GATT_ClientEventCallback_HRP+0x2c8>)
 8003292:	f010 fa8f 	bl	80137b4 <BTPS_OutputMessage>
                     for(i = 0; i < (GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength - 1); i++)
 8003296:	3501      	adds	r5, #1
 8003298:	6862      	ldr	r2, [r4, #4]
 800329a:	8a13      	ldrh	r3, [r2, #16]
 800329c:	3b01      	subs	r3, #1
 800329e:	42ab      	cmp	r3, r5
 80032a0:	d8f4      	bhi.n	800328c <GATT_ClientEventCallback_HRP+0x1cc>
                     Display(("0x%02x }\r\n", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValue[i]));
 80032a2:	6953      	ldr	r3, [r2, #20]
 80032a4:	5d59      	ldrb	r1, [r3, r5]
 80032a6:	4839      	ldr	r0, [pc, #228]	; (800338c <GATT_ClientEventCallback_HRP+0x2cc>)
 80032a8:	f010 fa84 	bl	80137b4 <BTPS_OutputMessage>
 80032ac:	e02d      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
               Display(("\r\nError - Null Read Response Data.\r\n"));
 80032ae:	4838      	ldr	r0, [pc, #224]	; (8003390 <GATT_ClientEventCallback_HRP+0x2d0>)
 80032b0:	f010 fa80 	bl	80137b4 <BTPS_OutputMessage>
 80032b4:	e029      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
            if(GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data)
 80032b6:	684b      	ldr	r3, [r1, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02b      	beq.n	8003314 <GATT_ClientEventCallback_HRP+0x254>
               Display(("\r\nExchange MTU Response.\r\n"));
 80032bc:	4835      	ldr	r0, [pc, #212]	; (8003394 <GATT_ClientEventCallback_HRP+0x2d4>)
 80032be:	f010 fa79 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data->RemoteDevice, BoardStr);
 80032c2:	6863      	ldr	r3, [r4, #4]
 80032c4:	7b59      	ldrb	r1, [r3, #13]
 80032c6:	7b9d      	ldrb	r5, [r3, #14]
 80032c8:	aa02      	add	r2, sp, #8
 80032ca:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80032ce:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80032d2:	f7ff fc81 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data->ConnectionID));
 80032d6:	6863      	ldr	r3, [r4, #4]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	4811      	ldr	r0, [pc, #68]	; (8003320 <GATT_ClientEventCallback_HRP+0x260>)
 80032dc:	f010 fa6a 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Transaction ID:  %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data->TransactionID));
 80032e0:	6863      	ldr	r3, [r4, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	480f      	ldr	r0, [pc, #60]	; (8003324 <GATT_ClientEventCallback_HRP+0x264>)
 80032e6:	f010 fa65 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 80032ea:	6863      	ldr	r3, [r4, #4]
 80032ec:	7a1b      	ldrb	r3, [r3, #8]
 80032ee:	b97b      	cbnz	r3, 8003310 <GATT_ClientEventCallback_HRP+0x250>
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <GATT_ClientEventCallback_HRP+0x268>)
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <GATT_ClientEventCallback_HRP+0x26c>)
 80032f4:	f010 fa5e 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:         %s.\r\n", BoardStr));
 80032f8:	a902      	add	r1, sp, #8
 80032fa:	480d      	ldr	r0, [pc, #52]	; (8003330 <GATT_ClientEventCallback_HRP+0x270>)
 80032fc:	f010 fa5a 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   MTU:             %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data->ServerMTU));
 8003300:	6863      	ldr	r3, [r4, #4]
 8003302:	8a19      	ldrh	r1, [r3, #16]
 8003304:	4824      	ldr	r0, [pc, #144]	; (8003398 <GATT_ClientEventCallback_HRP+0x2d8>)
 8003306:	f010 fa55 	bl	80137b4 <BTPS_OutputMessage>
      DisplayPrompt();
 800330a:	f7ff f955 	bl	80025b8 <DisplayPrompt>
 800330e:	e09e      	b.n	800344e <GATT_ClientEventCallback_HRP+0x38e>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Exchange_MTU_Response_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <GATT_ClientEventCallback_HRP+0x28c>)
 8003312:	e7ee      	b.n	80032f2 <GATT_ClientEventCallback_HRP+0x232>
               Display(("\r\nError - Null Write Response Data.\r\n"));
 8003314:	4821      	ldr	r0, [pc, #132]	; (800339c <GATT_ClientEventCallback_HRP+0x2dc>)
 8003316:	f010 fa4d 	bl	80137b4 <BTPS_OutputMessage>
 800331a:	e7f6      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
 800331c:	0802c640 	.word	0x0802c640
 8003320:	0802c384 	.word	0x0802c384
 8003324:	0802c654 	.word	0x0802c654
 8003328:	0802ee58 	.word	0x0802ee58
 800332c:	0802c3a0 	.word	0x0802c3a0
 8003330:	0802c670 	.word	0x0802c670
 8003334:	0802c630 	.word	0x0802c630
 8003338:	0802c68c 	.word	0x0802c68c
 800333c:	0802c6a8 	.word	0x0802c6a8
 8003340:	0802c6c8 	.word	0x0802c6c8
 8003344:	0802c6e8 	.word	0x0802c6e8
 8003348:	0802c758 	.word	0x0802c758
 800334c:	0802c344 	.word	0x0802c344
 8003350:	0802c61c 	.word	0x0802c61c
 8003354:	0802f248 	.word	0x0802f248
 8003358:	0802c708 	.word	0x0802c708
 800335c:	0802c724 	.word	0x0802c724
 8003360:	0802c778 	.word	0x0802c778
 8003364:	0802c79c 	.word	0x0802c79c
 8003368:	0802c7b0 	.word	0x0802c7b0
 800336c:	200016b0 	.word	0x200016b0
 8003370:	0802c890 	.word	0x0802c890
 8003374:	0802c84c 	.word	0x0802c84c
 8003378:	0802f2d8 	.word	0x0802f2d8
 800337c:	0802c7cc 	.word	0x0802c7cc
 8003380:	0802c7f4 	.word	0x0802c7f4
 8003384:	0802c82c 	.word	0x0802c82c
 8003388:	0802c8a8 	.word	0x0802c8a8
 800338c:	0802c8b4 	.word	0x0802c8b4
 8003390:	0802c8c0 	.word	0x0802c8c0
 8003394:	0802c8e8 	.word	0x0802c8e8
 8003398:	0802c904 	.word	0x0802c904
 800339c:	0802c920 	.word	0x0802c920
            if(GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data)
 80033a0:	684b      	ldr	r3, [r1, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d047      	beq.n	8003436 <GATT_ClientEventCallback_HRP+0x376>
               Display(("\r\nWrite Response.\r\n"));
 80033a6:	482b      	ldr	r0, [pc, #172]	; (8003454 <GATT_ClientEventCallback_HRP+0x394>)
 80033a8:	f010 fa04 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data->RemoteDevice, BoardStr);
 80033ac:	6863      	ldr	r3, [r4, #4]
 80033ae:	7b59      	ldrb	r1, [r3, #13]
 80033b0:	7b9e      	ldrb	r6, [r3, #14]
 80033b2:	aa02      	add	r2, sp, #8
 80033b4:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80033b8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 80033bc:	f7ff fc0c 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data->ConnectionID));
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	4824      	ldr	r0, [pc, #144]	; (8003458 <GATT_ClientEventCallback_HRP+0x398>)
 80033c6:	f010 f9f5 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Transaction ID:  %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data->TransactionID));
 80033ca:	6863      	ldr	r3, [r4, #4]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	4823      	ldr	r0, [pc, #140]	; (800345c <GATT_ClientEventCallback_HRP+0x39c>)
 80033d0:	f010 f9f0 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	7a1b      	ldrb	r3, [r3, #8]
 80033d8:	bb3b      	cbnz	r3, 800342a <GATT_ClientEventCallback_HRP+0x36a>
 80033da:	4921      	ldr	r1, [pc, #132]	; (8003460 <GATT_ClientEventCallback_HRP+0x3a0>)
 80033dc:	4821      	ldr	r0, [pc, #132]	; (8003464 <GATT_ClientEventCallback_HRP+0x3a4>)
 80033de:	f010 f9e9 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:         %s.\r\n", BoardStr));
 80033e2:	a902      	add	r1, sp, #8
 80033e4:	4820      	ldr	r0, [pc, #128]	; (8003468 <GATT_ClientEventCallback_HRP+0x3a8>)
 80033e6:	f010 f9e5 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Bytes Written:   %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data->BytesWritten));
 80033ea:	6863      	ldr	r3, [r4, #4]
 80033ec:	6919      	ldr	r1, [r3, #16]
 80033ee:	481f      	ldr	r0, [pc, #124]	; (800346c <GATT_ClientEventCallback_HRP+0x3ac>)
 80033f0:	f010 f9e0 	bl	80137b4 <BTPS_OutputMessage>
               if(((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->RemoteDevice)) != NULL) && (CallbackParameter != NULL))
 80033f4:	6863      	ldr	r3, [r4, #4]
 80033f6:	7b5a      	ldrb	r2, [r3, #13]
 80033f8:	7b98      	ldrb	r0, [r3, #14]
 80033fa:	f8d3 1009 	ldr.w	r1, [r3, #9]
 80033fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003402:	481b      	ldr	r0, [pc, #108]	; (8003470 <GATT_ClientEventCallback_HRP+0x3b0>)
 8003404:	f7ff f93c 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8003408:	2800      	cmp	r0, #0
 800340a:	f43f af7e 	beq.w	800330a <GATT_ClientEventCallback_HRP+0x24a>
 800340e:	2d00      	cmp	r5, #0
 8003410:	f43f af7b 	beq.w	800330a <GATT_ClientEventCallback_HRP+0x24a>
                  if(CallbackParameter == DeviceInfo->ClientInfo.Heart_Rate_Measurement_Client_Configuration)
 8003414:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003416:	42aa      	cmp	r2, r5
 8003418:	d009      	beq.n	800342e <GATT_ClientEventCallback_HRP+0x36e>
                     if(CallbackParameter == DeviceInfo->ClientInfo.Heart_Rate_Control_Point)
 800341a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800341c:	42ab      	cmp	r3, r5
 800341e:	f47f af74 	bne.w	800330a <GATT_ClientEventCallback_HRP+0x24a>
                        Display(("\r\nReset Energy Expended command complete.\r\n"));
 8003422:	4814      	ldr	r0, [pc, #80]	; (8003474 <GATT_ClientEventCallback_HRP+0x3b4>)
 8003424:	f010 f9c6 	bl	80137b4 <BTPS_OutputMessage>
 8003428:	e76f      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Write_Response_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 800342a:	4913      	ldr	r1, [pc, #76]	; (8003478 <GATT_ClientEventCallback_HRP+0x3b8>)
 800342c:	e7d6      	b.n	80033dc <GATT_ClientEventCallback_HRP+0x31c>
                     Display(("\r\nWrite Heart Rate Measurement CC compete.\r\n"));
 800342e:	4813      	ldr	r0, [pc, #76]	; (800347c <GATT_ClientEventCallback_HRP+0x3bc>)
 8003430:	f010 f9c0 	bl	80137b4 <BTPS_OutputMessage>
 8003434:	e769      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
               Display(("\r\nError - Null Write Response Data.\r\n"));
 8003436:	4812      	ldr	r0, [pc, #72]	; (8003480 <GATT_ClientEventCallback_HRP+0x3c0>)
 8003438:	f010 f9bc 	bl	80137b4 <BTPS_OutputMessage>
 800343c:	e765      	b.n	800330a <GATT_ClientEventCallback_HRP+0x24a>
      Display(("\r\n"));
 800343e:	4811      	ldr	r0, [pc, #68]	; (8003484 <GATT_ClientEventCallback_HRP+0x3c4>)
 8003440:	f010 f9b8 	bl	80137b4 <BTPS_OutputMessage>
      Display(("GATT Callback Data: Event_Data = NULL.\r\n"));
 8003444:	4810      	ldr	r0, [pc, #64]	; (8003488 <GATT_ClientEventCallback_HRP+0x3c8>)
 8003446:	f010 f9b5 	bl	80137b4 <BTPS_OutputMessage>
      DisplayPrompt();
 800344a:	f7ff f8b5 	bl	80025b8 <DisplayPrompt>
}
 800344e:	b006      	add	sp, #24
 8003450:	bd70      	pop	{r4, r5, r6, pc}
 8003452:	bf00      	nop
 8003454:	0802c948 	.word	0x0802c948
 8003458:	0802c384 	.word	0x0802c384
 800345c:	0802c654 	.word	0x0802c654
 8003460:	0802ee58 	.word	0x0802ee58
 8003464:	0802c3a0 	.word	0x0802c3a0
 8003468:	0802c670 	.word	0x0802c670
 800346c:	0802c95c 	.word	0x0802c95c
 8003470:	200016b0 	.word	0x200016b0
 8003474:	0802c9a8 	.word	0x0802c9a8
 8003478:	0802c344 	.word	0x0802c344
 800347c:	0802c978 	.word	0x0802c978
 8003480:	0802c920 	.word	0x0802c920
 8003484:	0802c380 	.word	0x0802c380
 8003488:	0802c9d4 	.word	0x0802c9d4

0800348c <GATT_ClientEventCallback_GAPS>:
{
 800348c:	b530      	push	{r4, r5, lr}
 800348e:	b087      	sub	sp, #28
   if((BluetoothStackID) && (GATT_Client_Event_Data))
 8003490:	2800      	cmp	r0, #0
 8003492:	f000 80b4 	beq.w	80035fe <GATT_ClientEventCallback_GAPS+0x172>
 8003496:	460c      	mov	r4, r1
 8003498:	4615      	mov	r5, r2
 800349a:	2900      	cmp	r1, #0
 800349c:	f000 80af 	beq.w	80035fe <GATT_ClientEventCallback_GAPS+0x172>
      switch(GATT_Client_Event_Data->Event_Data_Type)
 80034a0:	780b      	ldrb	r3, [r1, #0]
 80034a2:	b123      	cbz	r3, 80034ae <GATT_ClientEventCallback_GAPS+0x22>
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d058      	beq.n	800355a <GATT_ClientEventCallback_GAPS+0xce>
      DisplayPrompt();
 80034a8:	f7ff f886 	bl	80025b8 <DisplayPrompt>
 80034ac:	e0af      	b.n	800360e <GATT_ClientEventCallback_GAPS+0x182>
            if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data)
 80034ae:	684b      	ldr	r3, [r1, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d04e      	beq.n	8003552 <GATT_ClientEventCallback_GAPS+0xc6>
               Display(("\r\nError Response.\r\n"));
 80034b4:	4857      	ldr	r0, [pc, #348]	; (8003614 <GATT_ClientEventCallback_GAPS+0x188>)
 80034b6:	f010 f97d 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->RemoteDevice, BoardStr);
 80034ba:	6863      	ldr	r3, [r4, #4]
 80034bc:	7b59      	ldrb	r1, [r3, #13]
 80034be:	7b9d      	ldrb	r5, [r3, #14]
 80034c0:	aa01      	add	r2, sp, #4
 80034c2:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80034c6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80034ca:	f7ff fb85 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Connection ID:   %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ConnectionID));
 80034ce:	6863      	ldr	r3, [r4, #4]
 80034d0:	6819      	ldr	r1, [r3, #0]
 80034d2:	4851      	ldr	r0, [pc, #324]	; (8003618 <GATT_ClientEventCallback_GAPS+0x18c>)
 80034d4:	f010 f96e 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Transaction ID:  %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->TransactionID));
 80034d8:	6863      	ldr	r3, [r4, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	484f      	ldr	r0, [pc, #316]	; (800361c <GATT_ClientEventCallback_GAPS+0x190>)
 80034de:	f010 f969 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 80034e2:	6863      	ldr	r3, [r4, #4]
 80034e4:	7a1b      	ldrb	r3, [r3, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d12b      	bne.n	8003542 <GATT_ClientEventCallback_GAPS+0xb6>
 80034ea:	494d      	ldr	r1, [pc, #308]	; (8003620 <GATT_ClientEventCallback_GAPS+0x194>)
 80034ec:	484d      	ldr	r0, [pc, #308]	; (8003624 <GATT_ClientEventCallback_GAPS+0x198>)
 80034ee:	f010 f961 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:         %s.\r\n", BoardStr));
 80034f2:	a901      	add	r1, sp, #4
 80034f4:	484c      	ldr	r0, [pc, #304]	; (8003628 <GATT_ClientEventCallback_GAPS+0x19c>)
 80034f6:	f010 f95d 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Error Type:      %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorType == retErrorResponse)?"Response Error":"Response Timeout"));
 80034fa:	6863      	ldr	r3, [r4, #4]
 80034fc:	7bdb      	ldrb	r3, [r3, #15]
 80034fe:	bb13      	cbnz	r3, 8003546 <GATT_ClientEventCallback_GAPS+0xba>
 8003500:	494a      	ldr	r1, [pc, #296]	; (800362c <GATT_ClientEventCallback_GAPS+0x1a0>)
 8003502:	484b      	ldr	r0, [pc, #300]	; (8003630 <GATT_ClientEventCallback_GAPS+0x1a4>)
 8003504:	f010 f956 	bl	80137b4 <BTPS_OutputMessage>
               if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorType == retErrorResponse)
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	7bda      	ldrb	r2, [r3, #15]
 800350c:	2a00      	cmp	r2, #0
 800350e:	d1cb      	bne.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                  Display(("   Request Opcode:  0x%02X.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->RequestOpCode));
 8003510:	7c19      	ldrb	r1, [r3, #16]
 8003512:	4848      	ldr	r0, [pc, #288]	; (8003634 <GATT_ClientEventCallback_GAPS+0x1a8>)
 8003514:	f010 f94e 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("   Request Handle:  0x%04X.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->RequestHandle));
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	8a59      	ldrh	r1, [r3, #18]
 800351c:	4846      	ldr	r0, [pc, #280]	; (8003638 <GATT_ClientEventCallback_GAPS+0x1ac>)
 800351e:	f010 f949 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("   Error Code:      0x%02X.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode));
 8003522:	6863      	ldr	r3, [r4, #4]
 8003524:	7d19      	ldrb	r1, [r3, #20]
 8003526:	4845      	ldr	r0, [pc, #276]	; (800363c <GATT_ClientEventCallback_GAPS+0x1b0>)
 8003528:	f010 f944 	bl	80137b4 <BTPS_OutputMessage>
                  if(GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode < NUMBER_OF_ERROR_CODES)
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	7d1b      	ldrb	r3, [r3, #20]
 8003530:	2b11      	cmp	r3, #17
 8003532:	d80a      	bhi.n	800354a <GATT_ClientEventCallback_GAPS+0xbe>
                     Display(("   Error Mesg:      %s.\r\n", ErrorCodeStr[GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorCode]));
 8003534:	4a42      	ldr	r2, [pc, #264]	; (8003640 <GATT_ClientEventCallback_GAPS+0x1b4>)
 8003536:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800353a:	4842      	ldr	r0, [pc, #264]	; (8003644 <GATT_ClientEventCallback_GAPS+0x1b8>)
 800353c:	f010 f93a 	bl	80137b4 <BTPS_OutputMessage>
 8003540:	e7b2      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
               Display(("   Connection Type: %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ConnectionType == gctLE)?"LE":"BR/EDR"));
 8003542:	4941      	ldr	r1, [pc, #260]	; (8003648 <GATT_ClientEventCallback_GAPS+0x1bc>)
 8003544:	e7d2      	b.n	80034ec <GATT_ClientEventCallback_GAPS+0x60>
               Display(("   Error Type:      %s.\r\n", (GATT_Client_Event_Data->Event_Data.GATT_Request_Error_Data->ErrorType == retErrorResponse)?"Response Error":"Response Timeout"));
 8003546:	4941      	ldr	r1, [pc, #260]	; (800364c <GATT_ClientEventCallback_GAPS+0x1c0>)
 8003548:	e7db      	b.n	8003502 <GATT_ClientEventCallback_GAPS+0x76>
                     Display(("   Error Mesg:      Unknown.\r\n"));
 800354a:	4841      	ldr	r0, [pc, #260]	; (8003650 <GATT_ClientEventCallback_GAPS+0x1c4>)
 800354c:	f010 f932 	bl	80137b4 <BTPS_OutputMessage>
 8003550:	e7aa      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
               Display(("Error - Null Error Response Data.\r\n"));
 8003552:	4840      	ldr	r0, [pc, #256]	; (8003654 <GATT_ClientEventCallback_GAPS+0x1c8>)
 8003554:	f010 f92e 	bl	80137b4 <BTPS_OutputMessage>
 8003558:	e7a6      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
            if(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data)
 800355a:	684b      	ldr	r3, [r1, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d04a      	beq.n	80035f6 <GATT_ClientEventCallback_GAPS+0x16a>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->RemoteDevice)) != NULL)
 8003560:	7b5a      	ldrb	r2, [r3, #13]
 8003562:	7b98      	ldrb	r0, [r3, #14]
 8003564:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8003568:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800356c:	483a      	ldr	r0, [pc, #232]	; (8003658 <GATT_ClientEventCallback_GAPS+0x1cc>)
 800356e:	f7ff f887 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8003572:	2800      	cmp	r0, #0
 8003574:	d098      	beq.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                  if((Word_t)CallbackParameter == DeviceInfo->GAPSClientInfo.DeviceNameHandle)
 8003576:	b2aa      	uxth	r2, r5
 8003578:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 800357a:	428a      	cmp	r2, r1
 800357c:	d00a      	beq.n	8003594 <GATT_ClientEventCallback_GAPS+0x108>
                     if((Word_t)CallbackParameter == DeviceInfo->GAPSClientInfo.DeviceAppearanceHandle)
 800357e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003580:	429a      	cmp	r2, r3
 8003582:	d191      	bne.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                        if(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength == GAP_DEVICE_APPEARENCE_VALUE_LENGTH)
 8003584:	6863      	ldr	r3, [r4, #4]
 8003586:	8a19      	ldrh	r1, [r3, #16]
 8003588:	2902      	cmp	r1, #2
 800358a:	d01f      	beq.n	80035cc <GATT_ClientEventCallback_GAPS+0x140>
                           Display(("Invalid Remote Appearance Value Length %u.\r\n", GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength));
 800358c:	4833      	ldr	r0, [pc, #204]	; (800365c <GATT_ClientEventCallback_GAPS+0x1d0>)
 800358e:	f010 f911 	bl	80137b4 <BTPS_OutputMessage>
 8003592:	e789      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                     if((NameBuffer = (char *)BTPS_AllocateMemory(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength+1)) != NULL)
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	8a18      	ldrh	r0, [r3, #16]
 8003598:	3001      	adds	r0, #1
 800359a:	f00f ff0f 	bl	80133bc <BTPS_AllocateMemory>
 800359e:	9005      	str	r0, [sp, #20]
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d081      	beq.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                        BTPS_MemInitialize(NameBuffer, 0, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength+1);
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	8a1a      	ldrh	r2, [r3, #16]
 80035a8:	3201      	adds	r2, #1
 80035aa:	2100      	movs	r1, #0
 80035ac:	f00f ff87 	bl	80134be <BTPS_MemInitialize>
                        BTPS_MemCopy(NameBuffer, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValue, GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValueLength);
 80035b0:	6863      	ldr	r3, [r4, #4]
 80035b2:	8a1a      	ldrh	r2, [r3, #16]
 80035b4:	6959      	ldr	r1, [r3, #20]
 80035b6:	9805      	ldr	r0, [sp, #20]
 80035b8:	f00f ff7d 	bl	80134b6 <BTPS_MemCopy>
                        Display(("\r\nRemote Device Name: %s.\r\n", NameBuffer));
 80035bc:	9905      	ldr	r1, [sp, #20]
 80035be:	4828      	ldr	r0, [pc, #160]	; (8003660 <GATT_ClientEventCallback_GAPS+0x1d4>)
 80035c0:	f010 f8f8 	bl	80137b4 <BTPS_OutputMessage>
                        BTPS_FreeMemory(NameBuffer);
 80035c4:	9805      	ldr	r0, [sp, #20]
 80035c6:	f00f ff13 	bl	80133f0 <BTPS_FreeMemory>
 80035ca:	e76d      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                           Appearance = READ_UNALIGNED_WORD_LITTLE_ENDIAN(GATT_Client_Event_Data->Event_Data.GATT_Read_Response_Data->AttributeValue);
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	785a      	ldrb	r2, [r3, #1]
 80035d0:	781c      	ldrb	r4, [r3, #0]
 80035d2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
                           if(AppearanceToString(Appearance, &NameBuffer))
 80035d6:	a905      	add	r1, sp, #20
 80035d8:	4620      	mov	r0, r4
 80035da:	f7fe fc59 	bl	8001e90 <AppearanceToString>
 80035de:	b128      	cbz	r0, 80035ec <GATT_ClientEventCallback_GAPS+0x160>
                              Display(("\r\nRemote Device Appearance: %s(%u).\r\n", NameBuffer, Appearance));
 80035e0:	4622      	mov	r2, r4
 80035e2:	9905      	ldr	r1, [sp, #20]
 80035e4:	481f      	ldr	r0, [pc, #124]	; (8003664 <GATT_ClientEventCallback_GAPS+0x1d8>)
 80035e6:	f010 f8e5 	bl	80137b4 <BTPS_OutputMessage>
 80035ea:	e75d      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
                              Display(("\r\nRemote Device Appearance: Unknown(%u).\r\n", Appearance));
 80035ec:	4621      	mov	r1, r4
 80035ee:	481e      	ldr	r0, [pc, #120]	; (8003668 <GATT_ClientEventCallback_GAPS+0x1dc>)
 80035f0:	f010 f8e0 	bl	80137b4 <BTPS_OutputMessage>
 80035f4:	e758      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
               Display(("\r\nError - Null Read Response Data.\r\n"));
 80035f6:	481d      	ldr	r0, [pc, #116]	; (800366c <GATT_ClientEventCallback_GAPS+0x1e0>)
 80035f8:	f010 f8dc 	bl	80137b4 <BTPS_OutputMessage>
 80035fc:	e754      	b.n	80034a8 <GATT_ClientEventCallback_GAPS+0x1c>
      Display(("\r\n"));
 80035fe:	481c      	ldr	r0, [pc, #112]	; (8003670 <GATT_ClientEventCallback_GAPS+0x1e4>)
 8003600:	f010 f8d8 	bl	80137b4 <BTPS_OutputMessage>
      Display(("GATT Callback Data: Event_Data = NULL.\r\n"));
 8003604:	481b      	ldr	r0, [pc, #108]	; (8003674 <GATT_ClientEventCallback_GAPS+0x1e8>)
 8003606:	f010 f8d5 	bl	80137b4 <BTPS_OutputMessage>
      DisplayPrompt();
 800360a:	f7fe ffd5 	bl	80025b8 <DisplayPrompt>
}
 800360e:	b007      	add	sp, #28
 8003610:	bd30      	pop	{r4, r5, pc}
 8003612:	bf00      	nop
 8003614:	0802c640 	.word	0x0802c640
 8003618:	0802c384 	.word	0x0802c384
 800361c:	0802c654 	.word	0x0802c654
 8003620:	0802ee58 	.word	0x0802ee58
 8003624:	0802c3a0 	.word	0x0802c3a0
 8003628:	0802c670 	.word	0x0802c670
 800362c:	0802c630 	.word	0x0802c630
 8003630:	0802c68c 	.word	0x0802c68c
 8003634:	0802c6a8 	.word	0x0802c6a8
 8003638:	0802c6c8 	.word	0x0802c6c8
 800363c:	0802c6e8 	.word	0x0802c6e8
 8003640:	0802f248 	.word	0x0802f248
 8003644:	0802c708 	.word	0x0802c708
 8003648:	0802c344 	.word	0x0802c344
 800364c:	0802c61c 	.word	0x0802c61c
 8003650:	0802c758 	.word	0x0802c758
 8003654:	0802c778 	.word	0x0802c778
 8003658:	200016b0 	.word	0x200016b0
 800365c:	0802ca70 	.word	0x0802ca70
 8003660:	0802ca00 	.word	0x0802ca00
 8003664:	0802ca1c 	.word	0x0802ca1c
 8003668:	0802ca44 	.word	0x0802ca44
 800366c:	0802c8c0 	.word	0x0802c8c0
 8003670:	0802c380 	.word	0x0802c380
 8003674:	0802c9d4 	.word	0x0802c9d4

08003678 <GetLocalAddress>:
{
 8003678:	b510      	push	{r4, lr}
 800367a:	b086      	sub	sp, #24
   if(BluetoothStackID)
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <GetLocalAddress+0x44>)
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	b1c0      	cbz	r0, 80036b4 <GetLocalAddress+0x3c>
      Result = GAP_Query_Local_BD_ADDR(BluetoothStackID, &BD_ADDR);
 8003682:	a904      	add	r1, sp, #16
 8003684:	f016 fc0a 	bl	8019e9c <GAP_Query_Local_BD_ADDR>
      if(!Result)
 8003688:	4604      	mov	r4, r0
 800368a:	b960      	cbnz	r0, 80036a6 <GetLocalAddress+0x2e>
         BD_ADDRToStr(BD_ADDR, BoardStr);
 800368c:	466a      	mov	r2, sp
 800368e:	ab06      	add	r3, sp, #24
 8003690:	e913 0003 	ldmdb	r3, {r0, r1}
 8003694:	f7ff faa0 	bl	8002bd8 <BD_ADDRToStr>
         Display(("BD_ADDR of Local Device is: %s.\r\n", BoardStr));
 8003698:	4669      	mov	r1, sp
 800369a:	4809      	ldr	r0, [pc, #36]	; (80036c0 <GetLocalAddress+0x48>)
 800369c:	f010 f88a 	bl	80137b4 <BTPS_OutputMessage>
}
 80036a0:	4620      	mov	r0, r4
 80036a2:	b006      	add	sp, #24
 80036a4:	bd10      	pop	{r4, pc}
         Display(("GAP_Query_Local_BD_ADDR() Failure: %d.\r\n", Result));
 80036a6:	4601      	mov	r1, r0
 80036a8:	4806      	ldr	r0, [pc, #24]	; (80036c4 <GetLocalAddress+0x4c>)
 80036aa:	f010 f883 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 80036ae:	f06f 0403 	mvn.w	r4, #3
 80036b2:	e7f5      	b.n	80036a0 <GetLocalAddress+0x28>
      ret_val = INVALID_STACK_ID_ERROR;
 80036b4:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 80036b8:	e7f2      	b.n	80036a0 <GetLocalAddress+0x28>
 80036ba:	bf00      	nop
 80036bc:	20001578 	.word	0x20001578
 80036c0:	0802caa0 	.word	0x0802caa0
 80036c4:	0802cac4 	.word	0x0802cac4

080036c8 <SetPairabilityMode>:
{
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	4603      	mov	r3, r0
   if(BluetoothStackID)
 80036cc:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <SetPairabilityMode+0x70>)
 80036ce:	6810      	ldr	r0, [r2, #0]
 80036d0:	b358      	cbz	r0, 800372a <SetPairabilityMode+0x62>
      if((TempParam) && (TempParam->NumberofParameters > 0) && (TempParam->Params[0].intParam >= 0) && (TempParam->Params[0].intParam <= 1))
 80036d2:	b323      	cbz	r3, 800371e <SetPairabilityMode+0x56>
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	dd21      	ble.n	800371e <SetPairabilityMode+0x56>
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	db1e      	blt.n	800371e <SetPairabilityMode+0x56>
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	dc1c      	bgt.n	800371e <SetPairabilityMode+0x56>
         if(TempParam->Params[0].intParam == 0)
 80036e4:	b96b      	cbnz	r3, 8003702 <SetPairabilityMode+0x3a>
            PairabilityMode = lpmNonPairableMode;
 80036e6:	2400      	movs	r4, #0
            Mode            = "lpmNonPairableMode";
 80036e8:	4d14      	ldr	r5, [pc, #80]	; (800373c <SetPairabilityMode+0x74>)
         Result = GAP_LE_Set_Pairability_Mode(BluetoothStackID, PairabilityMode);
 80036ea:	4621      	mov	r1, r4
 80036ec:	f019 fd22 	bl	801d134 <GAP_LE_Set_Pairability_Mode>
         if(Result >= 0)
 80036f0:	2800      	cmp	r0, #0
 80036f2:	db0d      	blt.n	8003710 <SetPairabilityMode+0x48>
            Display(("Pairability Mode Changed to %s.\r\n", Mode));
 80036f4:	4629      	mov	r1, r5
 80036f6:	4812      	ldr	r0, [pc, #72]	; (8003740 <SetPairabilityMode+0x78>)
 80036f8:	f010 f85c 	bl	80137b4 <BTPS_OutputMessage>
            if(PairabilityMode == lpmPairableMode)
 80036fc:	b924      	cbnz	r4, 8003708 <SetPairabilityMode+0x40>
            ret_val = 0;
 80036fe:	2000      	movs	r0, #0
}
 8003700:	bd38      	pop	{r3, r4, r5, pc}
            PairabilityMode = lpmPairableMode;
 8003702:	2401      	movs	r4, #1
            Mode            = "lpmPairableMode";
 8003704:	4d0f      	ldr	r5, [pc, #60]	; (8003744 <SetPairabilityMode+0x7c>)
 8003706:	e7f0      	b.n	80036ea <SetPairabilityMode+0x22>
               DisplayIOCapabilities();
 8003708:	f7fe fe10 	bl	800232c <DisplayIOCapabilities>
            ret_val = 0;
 800370c:	2000      	movs	r0, #0
 800370e:	e7f7      	b.n	8003700 <SetPairabilityMode+0x38>
            DisplayFunctionError("GAP_Set_Pairability_Mode", Result);
 8003710:	4601      	mov	r1, r0
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <SetPairabilityMode+0x80>)
 8003714:	f7fe ff58 	bl	80025c8 <DisplayFunctionError>
            ret_val = FUNCTION_ERROR;
 8003718:	f06f 0003 	mvn.w	r0, #3
 800371c:	e7f0      	b.n	8003700 <SetPairabilityMode+0x38>
         DisplayUsage("SetPairabilityMode [(0 = Non Pairable, 1 = Pairable]");
 800371e:	480b      	ldr	r0, [pc, #44]	; (800374c <SetPairabilityMode+0x84>)
 8003720:	f7fe fd18 	bl	8002154 <DisplayUsage>
         ret_val = INVALID_PARAMETERS_ERROR;
 8003724:	f06f 0005 	mvn.w	r0, #5
 8003728:	e7ea      	b.n	8003700 <SetPairabilityMode+0x38>
      Display(("Invalid Stack ID.\r\n"));
 800372a:	4809      	ldr	r0, [pc, #36]	; (8003750 <SetPairabilityMode+0x88>)
 800372c:	f010 f842 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = INVALID_STACK_ID_ERROR;
 8003730:	f06f 0007 	mvn.w	r0, #7
 8003734:	e7e4      	b.n	8003700 <SetPairabilityMode+0x38>
 8003736:	bf00      	nop
 8003738:	20001578 	.word	0x20001578
 800373c:	0802cb00 	.word	0x0802cb00
 8003740:	0802cb14 	.word	0x0802cb14
 8003744:	0802caf0 	.word	0x0802caf0
 8003748:	0802cb38 	.word	0x0802cb38
 800374c:	0802cb54 	.word	0x0802cb54
 8003750:	0802cb8c 	.word	0x0802cb8c

08003754 <SetPairable>:
{
 8003754:	b510      	push	{r4, lr}
   if(BluetoothStackID)
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <SetPairable+0x40>)
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	b1b8      	cbz	r0, 800378c <SetPairable+0x38>
      Result = GAP_LE_Set_Pairability_Mode(BluetoothStackID, lpmPairableMode);
 800375c:	2101      	movs	r1, #1
 800375e:	f019 fce9 	bl	801d134 <GAP_LE_Set_Pairability_Mode>
      if(!Result)
 8003762:	4604      	mov	r4, r0
 8003764:	b960      	cbnz	r0, 8003780 <SetPairable+0x2c>
         Result = GAP_LE_Register_Remote_Authentication(BluetoothStackID, GAP_LE_Event_Callback, (unsigned long)0);
 8003766:	2200      	movs	r2, #0
 8003768:	490b      	ldr	r1, [pc, #44]	; (8003798 <SetPairable+0x44>)
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <SetPairable+0x40>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f019 fb7b 	bl	801ce68 <GAP_LE_Register_Remote_Authentication>
         if(Result)
 8003772:	4604      	mov	r4, r0
 8003774:	b140      	cbz	r0, 8003788 <SetPairable+0x34>
            DisplayFunctionError("GAP_LE_Register_Remote_Authentication", Result);
 8003776:	4601      	mov	r1, r0
 8003778:	4808      	ldr	r0, [pc, #32]	; (800379c <SetPairable+0x48>)
 800377a:	f7fe ff25 	bl	80025c8 <DisplayFunctionError>
            ret_val = Result;
 800377e:	e003      	b.n	8003788 <SetPairable+0x34>
         DisplayFunctionError("GAP_LE_Set_Pairability_Mode", Result);
 8003780:	4601      	mov	r1, r0
 8003782:	4807      	ldr	r0, [pc, #28]	; (80037a0 <SetPairable+0x4c>)
 8003784:	f7fe ff20 	bl	80025c8 <DisplayFunctionError>
}
 8003788:	4620      	mov	r0, r4
 800378a:	bd10      	pop	{r4, pc}
      ret_val = INVALID_STACK_ID_ERROR;
 800378c:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 8003790:	e7fa      	b.n	8003788 <SetPairable+0x34>
 8003792:	bf00      	nop
 8003794:	20001578 	.word	0x20001578
 8003798:	08003bed 	.word	0x08003bed
 800379c:	0802cba0 	.word	0x0802cba0
 80037a0:	0802cbc8 	.word	0x0802cbc8

080037a4 <SlavePairingRequestResponse>:
{
 80037a4:	b510      	push	{r4, lr}
 80037a6:	b08e      	sub	sp, #56	; 0x38
 80037a8:	466b      	mov	r3, sp
 80037aa:	e883 0003 	stmia.w	r3, {r0, r1}
   if(BluetoothStackID)
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <SlavePairingRequestResponse+0x60>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	b30b      	cbz	r3, 80037f8 <SlavePairingRequestResponse+0x54>
      BD_ADDRToStr(BD_ADDR, BoardStr);
 80037b4:	aa0a      	add	r2, sp, #40	; 0x28
 80037b6:	466c      	mov	r4, sp
 80037b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037bc:	f7ff fa0c 	bl	8002bd8 <BD_ADDRToStr>
      Display(("Sending Pairing Response to %s.\r\n", BoardStr));
 80037c0:	a90a      	add	r1, sp, #40	; 0x28
 80037c2:	4811      	ldr	r0, [pc, #68]	; (8003808 <SlavePairingRequestResponse+0x64>)
 80037c4:	f00f fff6 	bl	80137b4 <BTPS_OutputMessage>
      AuthenticationResponseData.GAP_LE_Authentication_Type = larPairingCapabilities;
 80037c8:	2302      	movs	r3, #2
 80037ca:	f88d 3008 	strb.w	r3, [sp, #8]
      AuthenticationResponseData.Authentication_Data_Length = GAP_LE_PAIRING_CAPABILITIES_SIZE;
 80037ce:	230b      	movs	r3, #11
 80037d0:	f88d 3009 	strb.w	r3, [sp, #9]
      ConfigureCapabilities(&(AuthenticationResponseData.Authentication_Data.Pairing_Capabilities));
 80037d4:	a803      	add	r0, sp, #12
 80037d6:	f7fe fbb3 	bl	8001f40 <ConfigureCapabilities>
      ret_val = GAP_LE_Authentication_Response(BluetoothStackID, BD_ADDR, &AuthenticationResponseData);
 80037da:	ab02      	add	r3, sp, #8
 80037dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80037e0:	4808      	ldr	r0, [pc, #32]	; (8003804 <SlavePairingRequestResponse+0x60>)
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	f018 fdb6 	bl	801c354 <GAP_LE_Authentication_Response>
 80037e8:	4604      	mov	r4, r0
      Display(("GAP_LE_Authentication_Response returned %d.\r\n", ret_val));
 80037ea:	4601      	mov	r1, r0
 80037ec:	4807      	ldr	r0, [pc, #28]	; (800380c <SlavePairingRequestResponse+0x68>)
 80037ee:	f00f ffe1 	bl	80137b4 <BTPS_OutputMessage>
}
 80037f2:	4620      	mov	r0, r4
 80037f4:	b00e      	add	sp, #56	; 0x38
 80037f6:	bd10      	pop	{r4, pc}
      Display(("Stack ID Invalid.\r\n"));
 80037f8:	4805      	ldr	r0, [pc, #20]	; (8003810 <SlavePairingRequestResponse+0x6c>)
 80037fa:	f00f ffdb 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = INVALID_STACK_ID_ERROR;
 80037fe:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 8003802:	e7f6      	b.n	80037f2 <SlavePairingRequestResponse+0x4e>
 8003804:	20001578 	.word	0x20001578
 8003808:	0802cbe4 	.word	0x0802cbe4
 800380c:	0802cc08 	.word	0x0802cc08
 8003810:	0802cc38 	.word	0x0802cc38

08003814 <DisconnectLEDevice>:
{
 8003814:	b510      	push	{r4, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	ab02      	add	r3, sp, #8
 800381a:	e903 0006 	stmdb	r3, {r1, r2}
   if(BluetoothStackID)
 800381e:	b350      	cbz	r0, 8003876 <DisconnectLEDevice+0x62>
 8003820:	4603      	mov	r3, r0
      if(!COMPARE_NULL_BD_ADDR(BD_ADDR))
 8003822:	f89d 2000 	ldrb.w	r2, [sp]
 8003826:	b972      	cbnz	r2, 8003846 <DisconnectLEDevice+0x32>
 8003828:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800382c:	b95a      	cbnz	r2, 8003846 <DisconnectLEDevice+0x32>
 800382e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003832:	b942      	cbnz	r2, 8003846 <DisconnectLEDevice+0x32>
 8003834:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003838:	b92a      	cbnz	r2, 8003846 <DisconnectLEDevice+0x32>
 800383a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800383e:	b912      	cbnz	r2, 8003846 <DisconnectLEDevice+0x32>
 8003840:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003844:	b192      	cbz	r2, 800386c <DisconnectLEDevice+0x58>
         Result = GAP_LE_Disconnect(BluetoothStackID, BD_ADDR);
 8003846:	aa02      	add	r2, sp, #8
 8003848:	e912 0006 	ldmdb	r2, {r1, r2}
 800384c:	4618      	mov	r0, r3
 800384e:	f019 f803 	bl	801c858 <GAP_LE_Disconnect>
         if(!Result)
 8003852:	4604      	mov	r4, r0
 8003854:	b928      	cbnz	r0, 8003862 <DisconnectLEDevice+0x4e>
            Display(("Disconnect Request successful.\r\n"));
 8003856:	4809      	ldr	r0, [pc, #36]	; (800387c <DisconnectLEDevice+0x68>)
 8003858:	f00f ffac 	bl	80137b4 <BTPS_OutputMessage>
}
 800385c:	4620      	mov	r0, r4
 800385e:	b002      	add	sp, #8
 8003860:	bd10      	pop	{r4, pc}
            Display(("Unable to disconnect device: %d.\r\n", Result));
 8003862:	4601      	mov	r1, r0
 8003864:	4806      	ldr	r0, [pc, #24]	; (8003880 <DisconnectLEDevice+0x6c>)
 8003866:	f00f ffa5 	bl	80137b4 <BTPS_OutputMessage>
 800386a:	e7f7      	b.n	800385c <DisconnectLEDevice+0x48>
         Display(("Device is not connected.\r\n"));
 800386c:	4805      	ldr	r0, [pc, #20]	; (8003884 <DisconnectLEDevice+0x70>)
 800386e:	f00f ffa1 	bl	80137b4 <BTPS_OutputMessage>
         Result = 0;
 8003872:	2400      	movs	r4, #0
 8003874:	e7f2      	b.n	800385c <DisconnectLEDevice+0x48>
      Result = -1;
 8003876:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   return(Result);
 800387a:	e7ef      	b.n	800385c <DisconnectLEDevice+0x48>
 800387c:	0802cc4c 	.word	0x0802cc4c
 8003880:	0802cc70 	.word	0x0802cc70
 8003884:	0802cc94 	.word	0x0802cc94

08003888 <DisconnectLE>:
{
 8003888:	b508      	push	{r3, lr}
   if(BluetoothStackID)
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <DisconnectLE+0x50>)
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	b1e8      	cbz	r0, 80038cc <DisconnectLE+0x44>
      if(!COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR))
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <DisconnectLE+0x54>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b973      	cbnz	r3, 80038b4 <DisconnectLE+0x2c>
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <DisconnectLE+0x54>)
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	b95b      	cbnz	r3, 80038b4 <DisconnectLE+0x2c>
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <DisconnectLE+0x54>)
 800389e:	789b      	ldrb	r3, [r3, #2]
 80038a0:	b943      	cbnz	r3, 80038b4 <DisconnectLE+0x2c>
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <DisconnectLE+0x54>)
 80038a4:	78db      	ldrb	r3, [r3, #3]
 80038a6:	b92b      	cbnz	r3, 80038b4 <DisconnectLE+0x2c>
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <DisconnectLE+0x54>)
 80038aa:	791b      	ldrb	r3, [r3, #4]
 80038ac:	b913      	cbnz	r3, 80038b4 <DisconnectLE+0x2c>
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <DisconnectLE+0x54>)
 80038b0:	795b      	ldrb	r3, [r3, #5]
 80038b2:	b133      	cbz	r3, 80038c2 <DisconnectLE+0x3a>
         if(!DisconnectLEDevice(BluetoothStackID, ConnectionBD_ADDR))
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <DisconnectLE+0x54>)
 80038b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80038ba:	f7ff ffab 	bl	8003814 <DisconnectLEDevice>
 80038be:	b940      	cbnz	r0, 80038d2 <DisconnectLE+0x4a>
}
 80038c0:	bd08      	pop	{r3, pc}
         Display(("Device is not connected.\r\n"));
 80038c2:	4807      	ldr	r0, [pc, #28]	; (80038e0 <DisconnectLE+0x58>)
 80038c4:	f00f ff76 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = 0;
 80038c8:	2000      	movs	r0, #0
 80038ca:	e7f9      	b.n	80038c0 <DisconnectLE+0x38>
      ret_val = INVALID_STACK_ID_ERROR;
 80038cc:	f06f 0007 	mvn.w	r0, #7
 80038d0:	e7f6      	b.n	80038c0 <DisconnectLE+0x38>
            ret_val = FUNCTION_ERROR;
 80038d2:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 80038d6:	e7f3      	b.n	80038c0 <DisconnectLE+0x38>
 80038d8:	20001578 	.word	0x20001578
 80038dc:	20001684 	.word	0x20001684
 80038e0:	0802cc94 	.word	0x0802cc94

080038e4 <CreateNewDeviceInfoEntry>:
{
 80038e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e6:	b085      	sub	sp, #20
 80038e8:	460e      	mov	r6, r1
 80038ea:	a904      	add	r1, sp, #16
 80038ec:	e901 000c 	stmdb	r1, {r2, r3}
   if((ListHead) && (!COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR)))
 80038f0:	b380      	cbz	r0, 8003954 <CreateNewDeviceInfoEntry+0x70>
 80038f2:	4607      	mov	r7, r0
 80038f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80038f8:	b973      	cbnz	r3, 8003918 <CreateNewDeviceInfoEntry+0x34>
 80038fa:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80038fe:	b95b      	cbnz	r3, 8003918 <CreateNewDeviceInfoEntry+0x34>
 8003900:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003904:	b943      	cbnz	r3, 8003918 <CreateNewDeviceInfoEntry+0x34>
 8003906:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800390a:	b92b      	cbnz	r3, 8003918 <CreateNewDeviceInfoEntry+0x34>
 800390c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003910:	b913      	cbnz	r3, 8003918 <CreateNewDeviceInfoEntry+0x34>
 8003912:	f89d 500d 	ldrb.w	r5, [sp, #13]
 8003916:	b305      	cbz	r5, 800395a <CreateNewDeviceInfoEntry+0x76>
      if((DeviceInfoPtr = BTPS_AllocateMemory(sizeof(DeviceInfo_t))) != NULL)
 8003918:	2038      	movs	r0, #56	; 0x38
 800391a:	f00f fd4f 	bl	80133bc <BTPS_AllocateMemory>
 800391e:	4604      	mov	r4, r0
 8003920:	b1d0      	cbz	r0, 8003958 <CreateNewDeviceInfoEntry+0x74>
         BTPS_MemInitialize(DeviceInfoPtr, 0, sizeof(DeviceInfo_t));
 8003922:	2238      	movs	r2, #56	; 0x38
 8003924:	2100      	movs	r1, #0
 8003926:	f00f fdca 	bl	80134be <BTPS_MemInitialize>
         DeviceInfoPtr->ConnectionAddressType = ConnectionAddressType;
 800392a:	70a6      	strb	r6, [r4, #2]
         DeviceInfoPtr->ConnectionBD_ADDR     = ConnectionBD_ADDR;
 800392c:	9802      	ldr	r0, [sp, #8]
 800392e:	f8c4 0003 	str.w	r0, [r4, #3]
 8003932:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003936:	f8a4 3007 	strh.w	r3, [r4, #7]
         ret_val = BSC_AddGenericListEntry_Actual(ekBD_ADDR_t, BTPS_STRUCTURE_OFFSET(DeviceInfo_t, ConnectionBD_ADDR), BTPS_STRUCTURE_OFFSET(DeviceInfo_t, NextDeviceInfoPtr), (void **)(ListHead), (void *)(DeviceInfoPtr));
 800393a:	9400      	str	r4, [sp, #0]
 800393c:	463b      	mov	r3, r7
 800393e:	2234      	movs	r2, #52	; 0x34
 8003940:	2103      	movs	r1, #3
 8003942:	2005      	movs	r0, #5
 8003944:	f015 f8b4 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
         if(!ret_val)
 8003948:	4605      	mov	r5, r0
 800394a:	b930      	cbnz	r0, 800395a <CreateNewDeviceInfoEntry+0x76>
            BTPS_FreeMemory(DeviceInfoPtr);
 800394c:	4620      	mov	r0, r4
 800394e:	f00f fd4f 	bl	80133f0 <BTPS_FreeMemory>
 8003952:	e002      	b.n	800395a <CreateNewDeviceInfoEntry+0x76>
   Boolean_t     ret_val = FALSE;
 8003954:	2500      	movs	r5, #0
 8003956:	e000      	b.n	800395a <CreateNewDeviceInfoEntry+0x76>
 8003958:	2500      	movs	r5, #0
}
 800395a:	4628      	mov	r0, r5
 800395c:	b005      	add	sp, #20
 800395e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003960 <SendPairingRequest>:
{
 8003960:	b530      	push	{r4, r5, lr}
 8003962:	b08f      	sub	sp, #60	; 0x3c
 8003964:	ab04      	add	r3, sp, #16
 8003966:	e883 0003 	stmia.w	r3, {r0, r1}
   if(BluetoothStackID)
 800396a:	4b34      	ldr	r3, [pc, #208]	; (8003a3c <SendPairingRequest+0xdc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d05e      	beq.n	8003a30 <SendPairingRequest+0xd0>
 8003972:	4615      	mov	r5, r2
      if(!COMPARE_NULL_BD_ADDR(BD_ADDR))
 8003974:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003978:	b97b      	cbnz	r3, 800399a <SendPairingRequest+0x3a>
 800397a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800397e:	b963      	cbnz	r3, 800399a <SendPairingRequest+0x3a>
 8003980:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003984:	b94b      	cbnz	r3, 800399a <SendPairingRequest+0x3a>
 8003986:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800398a:	b933      	cbnz	r3, 800399a <SendPairingRequest+0x3a>
 800398c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003990:	b91b      	cbnz	r3, 800399a <SendPairingRequest+0x3a>
 8003992:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d044      	beq.n	8003a24 <SendPairingRequest+0xc4>
         ConfigureCapabilities(&Capabilities);
 800399a:	a807      	add	r0, sp, #28
 800399c:	f7fe fad0 	bl	8001f40 <ConfigureCapabilities>
         CurrentRemoteBD_ADDR = BD_ADDR;
 80039a0:	4c27      	ldr	r4, [pc, #156]	; (8003a40 <SendPairingRequest+0xe0>)
 80039a2:	ab04      	add	r3, sp, #16
 80039a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039a8:	6020      	str	r0, [r4, #0]
 80039aa:	80a1      	strh	r1, [r4, #4]
         BD_ADDRToStr(BD_ADDR, BoardStr);
 80039ac:	aa0a      	add	r2, sp, #40	; 0x28
 80039ae:	f7ff f913 	bl	8002bd8 <BD_ADDRToStr>
         Display(("Attempting to Pair to %s.\r\n", BoardStr));
 80039b2:	a90a      	add	r1, sp, #40	; 0x28
 80039b4:	4823      	ldr	r0, [pc, #140]	; (8003a44 <SendPairingRequest+0xe4>)
 80039b6:	f00f fefd 	bl	80137b4 <BTPS_OutputMessage>
         if(ConnectionMaster)
 80039ba:	b1c5      	cbz	r5, 80039ee <SendPairingRequest+0x8e>
            ret_val = GAP_LE_Pair_Remote_Device(BluetoothStackID, BD_ADDR, &Capabilities, GAP_LE_Event_Callback, 0);
 80039bc:	2300      	movs	r3, #0
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	4b21      	ldr	r3, [pc, #132]	; (8003a48 <SendPairingRequest+0xe8>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	ab07      	add	r3, sp, #28
 80039c6:	9a05      	ldr	r2, [sp, #20]
 80039c8:	9904      	ldr	r1, [sp, #16]
 80039ca:	481c      	ldr	r0, [pc, #112]	; (8003a3c <SendPairingRequest+0xdc>)
 80039cc:	6800      	ldr	r0, [r0, #0]
 80039ce:	f019 f897 	bl	801cb00 <GAP_LE_Pair_Remote_Device>
            if(ret_val == 0)
 80039d2:	4604      	mov	r4, r0
 80039d4:	b930      	cbnz	r0, 80039e4 <SendPairingRequest+0x84>
               Display(("GAP_LE_Pair_Remote_Device success.\r\n", ret_val));
 80039d6:	4601      	mov	r1, r0
 80039d8:	481c      	ldr	r0, [pc, #112]	; (8003a4c <SendPairingRequest+0xec>)
 80039da:	f00f feeb 	bl	80137b4 <BTPS_OutputMessage>
}
 80039de:	4620      	mov	r0, r4
 80039e0:	b00f      	add	sp, #60	; 0x3c
 80039e2:	bd30      	pop	{r4, r5, pc}
               DisplayFunctionError("     GAP_LE_Pair_Remote_Device", ret_val);
 80039e4:	4601      	mov	r1, r0
 80039e6:	481a      	ldr	r0, [pc, #104]	; (8003a50 <SendPairingRequest+0xf0>)
 80039e8:	f7fe fdee 	bl	80025c8 <DisplayFunctionError>
 80039ec:	e7f7      	b.n	80039de <SendPairingRequest+0x7e>
            ret_val = GAP_LE_Request_Security(BluetoothStackID, BD_ADDR, Capabilities.Bonding_Type, Capabilities.MITM, GAP_LE_Event_Callback, 0);
 80039ee:	2300      	movs	r3, #0
 80039f0:	9302      	str	r3, [sp, #8]
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <SendPairingRequest+0xe8>)
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003a00:	9a05      	ldr	r2, [sp, #20]
 8003a02:	9904      	ldr	r1, [sp, #16]
 8003a04:	480d      	ldr	r0, [pc, #52]	; (8003a3c <SendPairingRequest+0xdc>)
 8003a06:	6800      	ldr	r0, [r0, #0]
 8003a08:	f019 fa92 	bl	801cf30 <GAP_LE_Request_Security>
            if(ret_val == 0)
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	b920      	cbnz	r0, 8003a1a <SendPairingRequest+0xba>
               Display(("GAP_LE_Request_Security success.\r\n", ret_val));
 8003a10:	4601      	mov	r1, r0
 8003a12:	4810      	ldr	r0, [pc, #64]	; (8003a54 <SendPairingRequest+0xf4>)
 8003a14:	f00f fece 	bl	80137b4 <BTPS_OutputMessage>
 8003a18:	e7e1      	b.n	80039de <SendPairingRequest+0x7e>
               DisplayFunctionError("     GAP_LE_Request_Security", ret_val);
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	480e      	ldr	r0, [pc, #56]	; (8003a58 <SendPairingRequest+0xf8>)
 8003a1e:	f7fe fdd3 	bl	80025c8 <DisplayFunctionError>
 8003a22:	e7dc      	b.n	80039de <SendPairingRequest+0x7e>
         Display(("Invalid Parameters.\r\n"));
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <SendPairingRequest+0xfc>)
 8003a26:	f00f fec5 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = INVALID_PARAMETERS_ERROR;
 8003a2a:	f06f 0405 	mvn.w	r4, #5
 8003a2e:	e7d6      	b.n	80039de <SendPairingRequest+0x7e>
      Display(("Stack ID Invalid.\r\n"));
 8003a30:	480b      	ldr	r0, [pc, #44]	; (8003a60 <SendPairingRequest+0x100>)
 8003a32:	f00f febf 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = INVALID_STACK_ID_ERROR;
 8003a36:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 8003a3a:	e7d0      	b.n	80039de <SendPairingRequest+0x7e>
 8003a3c:	20001578 	.word	0x20001578
 8003a40:	20001694 	.word	0x20001694
 8003a44:	0802ccb0 	.word	0x0802ccb0
 8003a48:	08003bed 	.word	0x08003bed
 8003a4c:	0802cccc 	.word	0x0802cccc
 8003a50:	0802ccf4 	.word	0x0802ccf4
 8003a54:	0802cd14 	.word	0x0802cd14
 8003a58:	0802cd38 	.word	0x0802cd38
 8003a5c:	0802cd58 	.word	0x0802cd58
 8003a60:	0802cc38 	.word	0x0802cc38

08003a64 <PairLE>:
{
 8003a64:	b510      	push	{r4, lr}
   if(BluetoothStackID)
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <PairLE+0x60>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b323      	cbz	r3, 8003ab6 <PairLE+0x52>
      if(!COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR))
 8003a6c:	4b16      	ldr	r3, [pc, #88]	; (8003ac8 <PairLE+0x64>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b973      	cbnz	r3, 8003a90 <PairLE+0x2c>
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <PairLE+0x64>)
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	b95b      	cbnz	r3, 8003a90 <PairLE+0x2c>
 8003a78:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <PairLE+0x64>)
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	b943      	cbnz	r3, 8003a90 <PairLE+0x2c>
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <PairLE+0x64>)
 8003a80:	78db      	ldrb	r3, [r3, #3]
 8003a82:	b92b      	cbnz	r3, 8003a90 <PairLE+0x2c>
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <PairLE+0x64>)
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	b913      	cbnz	r3, 8003a90 <PairLE+0x2c>
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <PairLE+0x64>)
 8003a8c:	795b      	ldrb	r3, [r3, #5]
 8003a8e:	b16b      	cbz	r3, 8003aac <PairLE+0x48>
         if(!SendPairingRequest(ConnectionBD_ADDR, LocalDeviceIsMaster))
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <PairLE+0x64>)
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <PairLE+0x68>)
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a9a:	f7ff ff61 	bl	8003960 <SendPairingRequest>
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	b960      	cbnz	r0, 8003abc <PairLE+0x58>
            Display(("Pairing request sent.\r\n"));
 8003aa2:	480b      	ldr	r0, [pc, #44]	; (8003ad0 <PairLE+0x6c>)
 8003aa4:	f00f fe86 	bl	80137b4 <BTPS_OutputMessage>
}
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	bd10      	pop	{r4, pc}
         Display(("Device is not connected.\r\n"));
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <PairLE+0x70>)
 8003aae:	f00f fe81 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = 0;
 8003ab2:	2400      	movs	r4, #0
 8003ab4:	e7f8      	b.n	8003aa8 <PairLE+0x44>
      ret_val = INVALID_STACK_ID_ERROR;
 8003ab6:	f06f 0407 	mvn.w	r4, #7
 8003aba:	e7f5      	b.n	8003aa8 <PairLE+0x44>
            ret_val = FUNCTION_ERROR;
 8003abc:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 8003ac0:	e7f2      	b.n	8003aa8 <PairLE+0x44>
 8003ac2:	bf00      	nop
 8003ac4:	20001578 	.word	0x20001578
 8003ac8:	20001684 	.word	0x20001684
 8003acc:	200016d1 	.word	0x200016d1
 8003ad0:	0802cd70 	.word	0x0802cd70
 8003ad4:	0802cc94 	.word	0x0802cc94

08003ad8 <DeleteDeviceInfoEntry>:
{
 8003ad8:	b510      	push	{r4, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	ac02      	add	r4, sp, #8
 8003ade:	e884 0006 	stmia.w	r4, {r1, r2}
   return(BSC_DeleteGenericListEntry(ekBD_ADDR_t, (void *)(&BD_ADDR), BTPS_STRUCTURE_OFFSET(DeviceInfo_t, ConnectionBD_ADDR), BTPS_STRUCTURE_OFFSET(DeviceInfo_t, NextDeviceInfoPtr), (void **)(ListHead)));
 8003ae2:	9000      	str	r0, [sp, #0]
 8003ae4:	2334      	movs	r3, #52	; 0x34
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	4621      	mov	r1, r4
 8003aea:	2005      	movs	r0, #5
 8003aec:	f015 f846 	bl	8018b7c <BSC_DeleteGenericListEntry>
}
 8003af0:	b004      	add	sp, #16
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <FreeDeviceInfoEntryMemory>:
{
 8003af4:	b508      	push	{r3, lr}
   BSC_FreeGenericListEntryMemory((void *)(EntryToFree));
 8003af6:	f015 f8ee 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
}
 8003afa:	bd08      	pop	{r3, pc}

08003afc <EncryptionInformationRequestResponse>:
{
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	ac04      	add	r4, sp, #16
 8003b02:	e884 0003 	stmia.w	r4, {r0, r1}
 8003b06:	461c      	mov	r4, r3
   if(BluetoothStackID)
 8003b08:	4b2e      	ldr	r3, [pc, #184]	; (8003bc4 <EncryptionInformationRequestResponse+0xc8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d052      	beq.n	8003bb6 <EncryptionInformationRequestResponse+0xba>
 8003b10:	4616      	mov	r6, r2
      if((!COMPARE_NULL_BD_ADDR(BD_ADDR)) && (GAP_LE_Authentication_Response_Information))
 8003b12:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003b16:	b97b      	cbnz	r3, 8003b38 <EncryptionInformationRequestResponse+0x3c>
 8003b18:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003b1c:	b963      	cbnz	r3, 8003b38 <EncryptionInformationRequestResponse+0x3c>
 8003b1e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003b22:	b94b      	cbnz	r3, 8003b38 <EncryptionInformationRequestResponse+0x3c>
 8003b24:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003b28:	b933      	cbnz	r3, 8003b38 <EncryptionInformationRequestResponse+0x3c>
 8003b2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003b2e:	b91b      	cbnz	r3, 8003b38 <EncryptionInformationRequestResponse+0x3c>
 8003b30:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d038      	beq.n	8003baa <EncryptionInformationRequestResponse+0xae>
 8003b38:	2c00      	cmp	r4, #0
 8003b3a:	d036      	beq.n	8003baa <EncryptionInformationRequestResponse+0xae>
         Display(("   Calling GAP_LE_Generate_Long_Term_Key.\r\n"));
 8003b3c:	4822      	ldr	r0, [pc, #136]	; (8003bc8 <EncryptionInformationRequestResponse+0xcc>)
 8003b3e:	f00f fe39 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = GAP_LE_Generate_Long_Term_Key(BluetoothStackID, (Encryption_Key_t *)(&DHK), (Encryption_Key_t *)(&ER), &(GAP_LE_Authentication_Response_Information->Authentication_Data.Encryption_Information.LTK), &LocalDiv, &(GAP_LE_Authentication_Response_Information->Authentication_Data.Encryption_Information.EDIV), &(GAP_LE_Authentication_Response_Information->Authentication_Data.Encryption_Information.Rand));
 8003b42:	f104 0318 	add.w	r3, r4, #24
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	f104 0316 	add.w	r3, r4, #22
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	f10d 031e 	add.w	r3, sp, #30
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	1d63      	adds	r3, r4, #5
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <EncryptionInformationRequestResponse+0xd0>)
 8003b58:	491d      	ldr	r1, [pc, #116]	; (8003bd0 <EncryptionInformationRequestResponse+0xd4>)
 8003b5a:	481a      	ldr	r0, [pc, #104]	; (8003bc4 <EncryptionInformationRequestResponse+0xc8>)
 8003b5c:	6800      	ldr	r0, [r0, #0]
 8003b5e:	f018 fef2 	bl	801c946 <GAP_LE_Generate_Long_Term_Key>
         if(!ret_val)
 8003b62:	4605      	mov	r5, r0
 8003b64:	b9d0      	cbnz	r0, 8003b9c <EncryptionInformationRequestResponse+0xa0>
            Display(("   Encryption Information Request Response.\r\n"));
 8003b66:	481b      	ldr	r0, [pc, #108]	; (8003bd4 <EncryptionInformationRequestResponse+0xd8>)
 8003b68:	f00f fe24 	bl	80137b4 <BTPS_OutputMessage>
            GAP_LE_Authentication_Response_Information->GAP_LE_Authentication_Type                                     = larEncryptionInformation;
 8003b6c:	2306      	movs	r3, #6
 8003b6e:	7023      	strb	r3, [r4, #0]
            GAP_LE_Authentication_Response_Information->Authentication_Data_Length                                     = GAP_LE_ENCRYPTION_INFORMATION_DATA_SIZE;
 8003b70:	231c      	movs	r3, #28
 8003b72:	7063      	strb	r3, [r4, #1]
            GAP_LE_Authentication_Response_Information->Authentication_Data.Encryption_Information.Encryption_Key_Size = KeySize;
 8003b74:	7126      	strb	r6, [r4, #4]
            ret_val = GAP_LE_Authentication_Response(BluetoothStackID, BD_ADDR, GAP_LE_Authentication_Response_Information);
 8003b76:	4623      	mov	r3, r4
 8003b78:	9a05      	ldr	r2, [sp, #20]
 8003b7a:	9904      	ldr	r1, [sp, #16]
 8003b7c:	4811      	ldr	r0, [pc, #68]	; (8003bc4 <EncryptionInformationRequestResponse+0xc8>)
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	f018 fbe8 	bl	801c354 <GAP_LE_Authentication_Response>
            if(!ret_val)
 8003b84:	4605      	mov	r5, r0
 8003b86:	b920      	cbnz	r0, 8003b92 <EncryptionInformationRequestResponse+0x96>
               Display(("   GAP_LE_Authentication_Response (larEncryptionInformation) success.\r\n", ret_val));
 8003b88:	4601      	mov	r1, r0
 8003b8a:	4813      	ldr	r0, [pc, #76]	; (8003bd8 <EncryptionInformationRequestResponse+0xdc>)
 8003b8c:	f00f fe12 	bl	80137b4 <BTPS_OutputMessage>
 8003b90:	e008      	b.n	8003ba4 <EncryptionInformationRequestResponse+0xa8>
               DisplayFunctionError("GAP_LE_Authentication_Response", ret_val);
 8003b92:	4601      	mov	r1, r0
 8003b94:	4811      	ldr	r0, [pc, #68]	; (8003bdc <EncryptionInformationRequestResponse+0xe0>)
 8003b96:	f7fe fd17 	bl	80025c8 <DisplayFunctionError>
 8003b9a:	e003      	b.n	8003ba4 <EncryptionInformationRequestResponse+0xa8>
            DisplayFunctionError("GAP_LE_Generate_Long_Term_Key", ret_val);
 8003b9c:	4601      	mov	r1, r0
 8003b9e:	4810      	ldr	r0, [pc, #64]	; (8003be0 <EncryptionInformationRequestResponse+0xe4>)
 8003ba0:	f7fe fd12 	bl	80025c8 <DisplayFunctionError>
}
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	b008      	add	sp, #32
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
         Display(("Invalid Parameters.\r\n"));
 8003baa:	480e      	ldr	r0, [pc, #56]	; (8003be4 <EncryptionInformationRequestResponse+0xe8>)
 8003bac:	f00f fe02 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = INVALID_PARAMETERS_ERROR;
 8003bb0:	f06f 0505 	mvn.w	r5, #5
 8003bb4:	e7f6      	b.n	8003ba4 <EncryptionInformationRequestResponse+0xa8>
      Display(("Stack ID Invalid.\r\n"));
 8003bb6:	480c      	ldr	r0, [pc, #48]	; (8003be8 <EncryptionInformationRequestResponse+0xec>)
 8003bb8:	f00f fdfc 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = INVALID_STACK_ID_ERROR;
 8003bbc:	f06f 0507 	mvn.w	r5, #7
   return(ret_val);
 8003bc0:	e7f0      	b.n	8003ba4 <EncryptionInformationRequestResponse+0xa8>
 8003bc2:	bf00      	nop
 8003bc4:	20001578 	.word	0x20001578
 8003bc8:	0802cd88 	.word	0x0802cd88
 8003bcc:	0802f238 	.word	0x0802f238
 8003bd0:	2000169c 	.word	0x2000169c
 8003bd4:	0802cdb4 	.word	0x0802cdb4
 8003bd8:	0802cde4 	.word	0x0802cde4
 8003bdc:	0802ce2c 	.word	0x0802ce2c
 8003be0:	0802ce4c 	.word	0x0802ce4c
 8003be4:	0802cd58 	.word	0x0802cd58
 8003be8:	0802cc38 	.word	0x0802cc38

08003bec <GAP_LE_Event_Callback>:
   if((BluetoothStackID) && (GAP_LE_Event_Data))
 8003bec:	2800      	cmp	r0, #0
 8003bee:	f000 842c 	beq.w	800444a <GAP_LE_Event_Callback+0x85e>
{
 8003bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf4:	b0a1      	sub	sp, #132	; 0x84
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4605      	mov	r5, r0
   if((BluetoothStackID) && (GAP_LE_Event_Data))
 8003bfa:	2900      	cmp	r1, #0
 8003bfc:	f000 8227 	beq.w	800404e <GAP_LE_Event_Callback+0x462>
      switch(GAP_LE_Event_Data->Event_Data_Type)
 8003c00:	780b      	ldrb	r3, [r1, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	f200 8220 	bhi.w	800404a <GAP_LE_Event_Callback+0x45e>
 8003c0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003c0e:	0009      	.short	0x0009
 8003c10:	00f80070 	.word	0x00f80070
 8003c14:	02270205 	.word	0x02270205
 8003c18:	018b0243 	.word	0x018b0243
 8003c1c:	01da021e 	.word	0x01da021e
            Display(("\r\netLE_Advertising_Report with size %d.\r\n",(int)GAP_LE_Event_Data->Event_Data_Size));
 8003c20:	8849      	ldrh	r1, [r1, #2]
 8003c22:	489d      	ldr	r0, [pc, #628]	; (8003e98 <GAP_LE_Event_Callback+0x2ac>)
 8003c24:	f00f fdc6 	bl	80137b4 <BTPS_OutputMessage>
            Display(("  %d Responses.\r\n",GAP_LE_Event_Data->Event_Data.GAP_LE_Advertising_Report_Event_Data->Number_Device_Entries));
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	489b      	ldr	r0, [pc, #620]	; (8003e9c <GAP_LE_Event_Callback+0x2b0>)
 8003c2e:	f00f fdc1 	bl	80137b4 <BTPS_OutputMessage>
            for(Index = 0; Index < GAP_LE_Event_Data->Event_Data.GAP_LE_Advertising_Report_Event_Data->Number_Device_Entries; Index++)
 8003c32:	2600      	movs	r6, #0
 8003c34:	e026      	b.n	8003c84 <GAP_LE_Event_Callback+0x98>
                     Display(("  Advertising Type: %s.\r\n", "rtConnectableUndirected"));
 8003c36:	499a      	ldr	r1, [pc, #616]	; (8003ea0 <GAP_LE_Event_Callback+0x2b4>)
 8003c38:	489a      	ldr	r0, [pc, #616]	; (8003ea4 <GAP_LE_Event_Callback+0x2b8>)
 8003c3a:	f00f fdbb 	bl	80137b4 <BTPS_OutputMessage>
               if(DeviceEntryPtr->Address_Type == latPublic)
 8003c3e:	786b      	ldrb	r3, [r5, #1]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d14f      	bne.n	8003ce4 <GAP_LE_Event_Callback+0xf8>
                  Display(("  Address Type: %s.\r\n","atPublic"));
 8003c44:	4998      	ldr	r1, [pc, #608]	; (8003ea8 <GAP_LE_Event_Callback+0x2bc>)
 8003c46:	4899      	ldr	r0, [pc, #612]	; (8003eac <GAP_LE_Event_Callback+0x2c0>)
 8003c48:	f00f fdb4 	bl	80137b4 <BTPS_OutputMessage>
               Display(("  Address: 0x%02X%02X%02X%02X%02X%02X.\r\n", DeviceEntryPtr->BD_ADDR.BD_ADDR5, DeviceEntryPtr->BD_ADDR.BD_ADDR4, DeviceEntryPtr->BD_ADDR.BD_ADDR3, DeviceEntryPtr->BD_ADDR.BD_ADDR2, DeviceEntryPtr->BD_ADDR.BD_ADDR1, DeviceEntryPtr->BD_ADDR.BD_ADDR0));
 8003c4c:	79e9      	ldrb	r1, [r5, #7]
 8003c4e:	79aa      	ldrb	r2, [r5, #6]
 8003c50:	796b      	ldrb	r3, [r5, #5]
 8003c52:	7928      	ldrb	r0, [r5, #4]
 8003c54:	78ef      	ldrb	r7, [r5, #3]
 8003c56:	f895 c002 	ldrb.w	ip, [r5, #2]
 8003c5a:	f8cd c008 	str.w	ip, [sp, #8]
 8003c5e:	9701      	str	r7, [sp, #4]
 8003c60:	9000      	str	r0, [sp, #0]
 8003c62:	4893      	ldr	r0, [pc, #588]	; (8003eb0 <GAP_LE_Event_Callback+0x2c4>)
 8003c64:	f00f fda6 	bl	80137b4 <BTPS_OutputMessage>
               Display(("  RSSI: %d.\r\n", (int)DeviceEntryPtr->RSSI));
 8003c68:	f995 1008 	ldrsb.w	r1, [r5, #8]
 8003c6c:	4891      	ldr	r0, [pc, #580]	; (8003eb4 <GAP_LE_Event_Callback+0x2c8>)
 8003c6e:	f00f fda1 	bl	80137b4 <BTPS_OutputMessage>
               Display(("  Data Length: %d.\r\n", DeviceEntryPtr->Raw_Report_Length));
 8003c72:	7d29      	ldrb	r1, [r5, #20]
 8003c74:	4890      	ldr	r0, [pc, #576]	; (8003eb8 <GAP_LE_Event_Callback+0x2cc>)
 8003c76:	f00f fd9d 	bl	80137b4 <BTPS_OutputMessage>
               DisplayAdvertisingData(&(DeviceEntryPtr->Advertising_Data));
 8003c7a:	f105 000c 	add.w	r0, r5, #12
 8003c7e:	f7fe f977 	bl	8001f70 <DisplayAdvertisingData>
            for(Index = 0; Index < GAP_LE_Event_Data->Event_Data.GAP_LE_Advertising_Report_Event_Data->Number_Device_Entries; Index++)
 8003c82:	3601      	adds	r6, #1
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	42b2      	cmp	r2, r6
 8003c8a:	f240 81de 	bls.w	800404a <GAP_LE_Event_Callback+0x45e>
               DeviceEntryPtr = &(GAP_LE_Event_Data->Event_Data.GAP_LE_Advertising_Report_Event_Data->Advertising_Data[Index]);
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
 8003c94:	eb03 0582 	add.w	r5, r3, r2, lsl #2
               switch(DeviceEntryPtr->Advertising_Report_Type)
 8003c98:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d8ce      	bhi.n	8003c3e <GAP_LE_Event_Callback+0x52>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <GAP_LE_Event_Callback+0xbc>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003c37 	.word	0x08003c37
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003cc7 	.word	0x08003cc7
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	08003cdb 	.word	0x08003cdb
                     Display(("  Advertising Type: %s.\r\n", "rtConnectableDirected"));
 8003cbc:	497f      	ldr	r1, [pc, #508]	; (8003ebc <GAP_LE_Event_Callback+0x2d0>)
 8003cbe:	4879      	ldr	r0, [pc, #484]	; (8003ea4 <GAP_LE_Event_Callback+0x2b8>)
 8003cc0:	f00f fd78 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 8003cc4:	e7bb      	b.n	8003c3e <GAP_LE_Event_Callback+0x52>
                     Display(("  Advertising Type: %s.\r\n", "rtScannableUndirected"));
 8003cc6:	497e      	ldr	r1, [pc, #504]	; (8003ec0 <GAP_LE_Event_Callback+0x2d4>)
 8003cc8:	4876      	ldr	r0, [pc, #472]	; (8003ea4 <GAP_LE_Event_Callback+0x2b8>)
 8003cca:	f00f fd73 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 8003cce:	e7b6      	b.n	8003c3e <GAP_LE_Event_Callback+0x52>
                     Display(("  Advertising Type: %s.\r\n", "rtNonConnectableUndirected"));
 8003cd0:	497c      	ldr	r1, [pc, #496]	; (8003ec4 <GAP_LE_Event_Callback+0x2d8>)
 8003cd2:	4874      	ldr	r0, [pc, #464]	; (8003ea4 <GAP_LE_Event_Callback+0x2b8>)
 8003cd4:	f00f fd6e 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 8003cd8:	e7b1      	b.n	8003c3e <GAP_LE_Event_Callback+0x52>
                     Display(("  Advertising Type: %s.\r\n", "rtScanResponse"));
 8003cda:	497b      	ldr	r1, [pc, #492]	; (8003ec8 <GAP_LE_Event_Callback+0x2dc>)
 8003cdc:	4871      	ldr	r0, [pc, #452]	; (8003ea4 <GAP_LE_Event_Callback+0x2b8>)
 8003cde:	f00f fd69 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 8003ce2:	e7ac      	b.n	8003c3e <GAP_LE_Event_Callback+0x52>
                  Display(("  Address Type: %s.\r\n","atRandom"));
 8003ce4:	4979      	ldr	r1, [pc, #484]	; (8003ecc <GAP_LE_Event_Callback+0x2e0>)
 8003ce6:	4871      	ldr	r0, [pc, #452]	; (8003eac <GAP_LE_Event_Callback+0x2c0>)
 8003ce8:	f00f fd64 	bl	80137b4 <BTPS_OutputMessage>
 8003cec:	e7ae      	b.n	8003c4c <GAP_LE_Event_Callback+0x60>
            Display(("\r\netLE_Connection_Complete with size %d.\r\n",(int)GAP_LE_Event_Data->Event_Data_Size));
 8003cee:	8849      	ldrh	r1, [r1, #2]
 8003cf0:	4877      	ldr	r0, [pc, #476]	; (8003ed0 <GAP_LE_Event_Callback+0x2e4>)
 8003cf2:	f00f fd5f 	bl	80137b4 <BTPS_OutputMessage>
            if(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data)
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 81a6 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
               BD_ADDRToStr(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Peer_Address, BoardStr);
 8003cfe:	79d9      	ldrb	r1, [r3, #7]
 8003d00:	7a1e      	ldrb	r6, [r3, #8]
 8003d02:	aa1c      	add	r2, sp, #112	; 0x70
 8003d04:	f8d3 0003 	ldr.w	r0, [r3, #3]
 8003d08:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8003d0c:	f7fe ff64 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Status:       0x%02X.\r\n", GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Status));
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	7819      	ldrb	r1, [r3, #0]
 8003d14:	486f      	ldr	r0, [pc, #444]	; (8003ed4 <GAP_LE_Event_Callback+0x2e8>)
 8003d16:	f00f fd4d 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Role:         %s.\r\n", (GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Master)?"Master":"Slave"));
 8003d1a:	6863      	ldr	r3, [r4, #4]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d05b      	beq.n	8003dda <GAP_LE_Event_Callback+0x1ee>
 8003d22:	496d      	ldr	r1, [pc, #436]	; (8003ed8 <GAP_LE_Event_Callback+0x2ec>)
 8003d24:	486d      	ldr	r0, [pc, #436]	; (8003edc <GAP_LE_Event_Callback+0x2f0>)
 8003d26:	f00f fd45 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Address Type: %s.\r\n", (GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Peer_Address_Type == latPublic)?"Public":"Random"));
 8003d2a:	6863      	ldr	r3, [r4, #4]
 8003d2c:	789b      	ldrb	r3, [r3, #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d155      	bne.n	8003dde <GAP_LE_Event_Callback+0x1f2>
 8003d32:	496b      	ldr	r1, [pc, #428]	; (8003ee0 <GAP_LE_Event_Callback+0x2f4>)
 8003d34:	486b      	ldr	r0, [pc, #428]	; (8003ee4 <GAP_LE_Event_Callback+0x2f8>)
 8003d36:	f00f fd3d 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:      %s.\r\n", BoardStr));
 8003d3a:	a91c      	add	r1, sp, #112	; 0x70
 8003d3c:	486a      	ldr	r0, [pc, #424]	; (8003ee8 <GAP_LE_Event_Callback+0x2fc>)
 8003d3e:	f00f fd39 	bl	80137b4 <BTPS_OutputMessage>
               if(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Status == HCI_ERROR_CODE_NO_ERROR)
 8003d42:	6863      	ldr	r3, [r4, #4]
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	f040 817f 	bne.w	800404a <GAP_LE_Event_Callback+0x45e>
                  ConnectionBD_ADDR   = GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Peer_Address;
 8003d4c:	4a67      	ldr	r2, [pc, #412]	; (8003eec <GAP_LE_Event_Callback+0x300>)
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f851 0f03 	ldr.w	r0, [r1, #3]!
 8003d54:	6010      	str	r0, [r2, #0]
 8003d56:	8889      	ldrh	r1, [r1, #4]
 8003d58:	8091      	strh	r1, [r2, #4]
                  LocalDeviceIsMaster = GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Master;
 8003d5a:	7859      	ldrb	r1, [r3, #1]
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <GAP_LE_Event_Callback+0x304>)
 8003d5e:	7019      	strb	r1, [r3, #0]
                  if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) == NULL)
 8003d60:	ca06      	ldmia	r2, {r1, r2}
 8003d62:	4864      	ldr	r0, [pc, #400]	; (8003ef4 <GAP_LE_Event_Callback+0x308>)
 8003d64:	f7fe fc8c 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8003d68:	4606      	mov	r6, r0
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d039      	beq.n	8003de2 <GAP_LE_Event_Callback+0x1f6>
                     if(LocalDeviceIsMaster)
 8003d6e:	4b60      	ldr	r3, [pc, #384]	; (8003ef0 <GAP_LE_Event_Callback+0x304>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8169 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                        if(DeviceInfo->Flags & DEVICE_INFO_FLAGS_LTK_VALID)
 8003d78:	7803      	ldrb	r3, [r0, #0]
 8003d7a:	f013 0f01 	tst.w	r3, #1
 8003d7e:	f000 8164 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                           Display(("Attempting to Re-Establish Security.\r\n"));
 8003d82:	485d      	ldr	r0, [pc, #372]	; (8003ef8 <GAP_LE_Event_Callback+0x30c>)
 8003d84:	f00f fd16 	bl	80137b4 <BTPS_OutputMessage>
                           GAP_LE_Security_Information.Local_Device_Is_Master                                      = TRUE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
                           BTPS_MemCopy(&(GAP_LE_Security_Information.Security_Information.Master_Information.LTK), &(DeviceInfo->LTK), LONG_TERM_KEY_SIZE);
 8003d8e:	2210      	movs	r2, #16
 8003d90:	f106 0109 	add.w	r1, r6, #9
 8003d94:	f10d 0043 	add.w	r0, sp, #67	; 0x43
 8003d98:	f00f fb8d 	bl	80134b6 <BTPS_MemCopy>
                           BTPS_MemCopy(&(GAP_LE_Security_Information.Security_Information.Master_Information.Rand), &(DeviceInfo->Rand), RANDOM_NUMBER_DATA_SIZE);
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	f106 0119 	add.w	r1, r6, #25
 8003da2:	f10d 0056 	add.w	r0, sp, #86	; 0x56
 8003da6:	f00f fb86 	bl	80134b6 <BTPS_MemCopy>
                           GAP_LE_Security_Information.Security_Information.Master_Information.EDIV                = DeviceInfo->EDIV;
 8003daa:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 8003dac:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                           GAP_LE_Security_Information.Security_Information.Master_Information.Encryption_Key_Size = DeviceInfo->EncryptionKeySize;
 8003db0:	7873      	ldrb	r3, [r6, #1]
 8003db2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
                           Result = GAP_LE_Reestablish_Security(BluetoothStackID, ConnectionBD_ADDR, &GAP_LE_Security_Information, GAP_LE_Event_Callback, 0);
 8003db6:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <GAP_LE_Event_Callback+0x300>)
 8003db8:	2300      	movs	r3, #0
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <GAP_LE_Event_Callback+0x310>)
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	ab10      	add	r3, sp, #64	; 0x40
 8003dc2:	ca06      	ldmia	r2, {r1, r2}
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f018 ff9f 	bl	801cd08 <GAP_LE_Reestablish_Security>
                           if(Result)
 8003dca:	4601      	mov	r1, r0
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	f000 813c 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                              DisplayFunctionError("GAP_LE_Reestablish_Security", Result);
 8003dd2:	484b      	ldr	r0, [pc, #300]	; (8003f00 <GAP_LE_Event_Callback+0x314>)
 8003dd4:	f7fe fbf8 	bl	80025c8 <DisplayFunctionError>
 8003dd8:	e137      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
               Display(("   Role:         %s.\r\n", (GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Master)?"Master":"Slave"));
 8003dda:	494a      	ldr	r1, [pc, #296]	; (8003f04 <GAP_LE_Event_Callback+0x318>)
 8003ddc:	e7a2      	b.n	8003d24 <GAP_LE_Event_Callback+0x138>
               Display(("   Address Type: %s.\r\n", (GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Peer_Address_Type == latPublic)?"Public":"Random"));
 8003dde:	494a      	ldr	r1, [pc, #296]	; (8003f08 <GAP_LE_Event_Callback+0x31c>)
 8003de0:	e7a8      	b.n	8003d34 <GAP_LE_Event_Callback+0x148>
                     if(!CreateNewDeviceInfoEntry(&DeviceInfoList, GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Complete_Event_Data->Peer_Address_Type, ConnectionBD_ADDR))
 8003de2:	6861      	ldr	r1, [r4, #4]
 8003de4:	4b41      	ldr	r3, [pc, #260]	; (8003eec <GAP_LE_Event_Callback+0x300>)
 8003de6:	cb0c      	ldmia	r3, {r2, r3}
 8003de8:	7889      	ldrb	r1, [r1, #2]
 8003dea:	4842      	ldr	r0, [pc, #264]	; (8003ef4 <GAP_LE_Event_Callback+0x308>)
 8003dec:	f7ff fd7a 	bl	80038e4 <CreateNewDeviceInfoEntry>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f040 812a 	bne.w	800404a <GAP_LE_Event_Callback+0x45e>
                        Display(("Failed to add device to Device Info List.\r\n"));
 8003df6:	4845      	ldr	r0, [pc, #276]	; (8003f0c <GAP_LE_Event_Callback+0x320>)
 8003df8:	f00f fcdc 	bl	80137b4 <BTPS_OutputMessage>
 8003dfc:	e125      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
            Display(("\r\netLE_Disconnection_Complete with size %d.\r\n", (int)GAP_LE_Event_Data->Event_Data_Size));
 8003dfe:	8849      	ldrh	r1, [r1, #2]
 8003e00:	4843      	ldr	r0, [pc, #268]	; (8003f10 <GAP_LE_Event_Callback+0x324>)
 8003e02:	f00f fcd7 	bl	80137b4 <BTPS_OutputMessage>
            if(GAP_LE_Event_Data->Event_Data.GAP_LE_Disconnection_Complete_Event_Data)
 8003e06:	6863      	ldr	r3, [r4, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 811e 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
               Display(("   Status: 0x%02X.\r\n", GAP_LE_Event_Data->Event_Data.GAP_LE_Disconnection_Complete_Event_Data->Status));
 8003e0e:	7819      	ldrb	r1, [r3, #0]
 8003e10:	4840      	ldr	r0, [pc, #256]	; (8003f14 <GAP_LE_Event_Callback+0x328>)
 8003e12:	f00f fccf 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Reason: 0x%02X.\r\n", GAP_LE_Event_Data->Event_Data.GAP_LE_Disconnection_Complete_Event_Data->Reason));
 8003e16:	6863      	ldr	r3, [r4, #4]
 8003e18:	7859      	ldrb	r1, [r3, #1]
 8003e1a:	483f      	ldr	r0, [pc, #252]	; (8003f18 <GAP_LE_Event_Callback+0x32c>)
 8003e1c:	f00f fcca 	bl	80137b4 <BTPS_OutputMessage>
               BD_ADDRToStr(GAP_LE_Event_Data->Event_Data.GAP_LE_Disconnection_Complete_Event_Data->Peer_Address, BoardStr);
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	79d9      	ldrb	r1, [r3, #7]
 8003e24:	7a1c      	ldrb	r4, [r3, #8]
 8003e26:	aa1c      	add	r2, sp, #112	; 0x70
 8003e28:	f8d3 0003 	ldr.w	r0, [r3, #3]
 8003e2c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8003e30:	f7fe fed2 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   BD_ADDR: %s.\r\n", BoardStr));
 8003e34:	a91c      	add	r1, sp, #112	; 0x70
 8003e36:	4839      	ldr	r0, [pc, #228]	; (8003f1c <GAP_LE_Event_Callback+0x330>)
 8003e38:	f00f fcbc 	bl	80137b4 <BTPS_OutputMessage>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8003e3c:	4b2b      	ldr	r3, [pc, #172]	; (8003eec <GAP_LE_Event_Callback+0x300>)
 8003e3e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e42:	482c      	ldr	r0, [pc, #176]	; (8003ef4 <GAP_LE_Event_Callback+0x308>)
 8003e44:	f7fe fc1c 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8003e48:	b308      	cbz	r0, 8003e8e <GAP_LE_Event_Callback+0x2a2>
                  DeviceInfo->Flags &= ~DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_OUTSTANDING;
 8003e4a:	7803      	ldrb	r3, [r0, #0]
 8003e4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8003e50:	7003      	strb	r3, [r0, #0]
                  DeviceInfo->ServerInfo.Heart_Rate_Measurement_Client_Configuration = 0;
 8003e52:	2100      	movs	r1, #0
 8003e54:	8601      	strh	r1, [r0, #48]	; 0x30
                  if(!(DeviceInfo->Flags & DEVICE_INFO_FLAGS_LINK_ENCRYPTED))
 8003e56:	f013 0f20 	tst.w	r3, #32
 8003e5a:	d00d      	beq.n	8003e78 <GAP_LE_Event_Callback+0x28c>
                     DeviceInfo->Flags &= ~DEVICE_INFO_FLAGS_LINK_ENCRYPTED;
 8003e5c:	f023 0320 	bic.w	r3, r3, #32
 8003e60:	7003      	strb	r3, [r0, #0]
               ASSIGN_BD_ADDR(ConnectionBD_ADDR, 0, 0, 0, 0, 0, 0);
 8003e62:	4a22      	ldr	r2, [pc, #136]	; (8003eec <GAP_LE_Event_Callback+0x300>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	7013      	strb	r3, [r2, #0]
 8003e68:	7053      	strb	r3, [r2, #1]
 8003e6a:	7093      	strb	r3, [r2, #2]
 8003e6c:	70d3      	strb	r3, [r2, #3]
 8003e6e:	7113      	strb	r3, [r2, #4]
 8003e70:	7153      	strb	r3, [r2, #5]
               LocalDeviceIsMaster = FALSE;
 8003e72:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <GAP_LE_Event_Callback+0x304>)
 8003e74:	7013      	strb	r3, [r2, #0]
 8003e76:	e0e8      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     if((DeviceInfo = DeleteDeviceInfoEntry(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <GAP_LE_Event_Callback+0x300>)
 8003e7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e7e:	481d      	ldr	r0, [pc, #116]	; (8003ef4 <GAP_LE_Event_Callback+0x308>)
 8003e80:	f7ff fe2a 	bl	8003ad8 <DeleteDeviceInfoEntry>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d0ec      	beq.n	8003e62 <GAP_LE_Event_Callback+0x276>
                        FreeDeviceInfoEntryMemory(DeviceInfo);
 8003e88:	f7ff fe34 	bl	8003af4 <FreeDeviceInfoEntryMemory>
 8003e8c:	e7e9      	b.n	8003e62 <GAP_LE_Event_Callback+0x276>
                  Display(("Warning - Disconnect from unknown device.\r\n"));
 8003e8e:	4824      	ldr	r0, [pc, #144]	; (8003f20 <GAP_LE_Event_Callback+0x334>)
 8003e90:	f00f fc90 	bl	80137b4 <BTPS_OutputMessage>
 8003e94:	e7e5      	b.n	8003e62 <GAP_LE_Event_Callback+0x276>
 8003e96:	bf00      	nop
 8003e98:	0802ce8c 	.word	0x0802ce8c
 8003e9c:	0802ceb8 	.word	0x0802ceb8
 8003ea0:	0802cecc 	.word	0x0802cecc
 8003ea4:	0802cee4 	.word	0x0802cee4
 8003ea8:	0802cf5c 	.word	0x0802cf5c
 8003eac:	0802cf68 	.word	0x0802cf68
 8003eb0:	0802cf8c 	.word	0x0802cf8c
 8003eb4:	0802cfb8 	.word	0x0802cfb8
 8003eb8:	0802cfc8 	.word	0x0802cfc8
 8003ebc:	0802cf00 	.word	0x0802cf00
 8003ec0:	0802cf18 	.word	0x0802cf18
 8003ec4:	0802cf30 	.word	0x0802cf30
 8003ec8:	0802cf4c 	.word	0x0802cf4c
 8003ecc:	0802cf80 	.word	0x0802cf80
 8003ed0:	0802cfe0 	.word	0x0802cfe0
 8003ed4:	0802d00c 	.word	0x0802d00c
 8003ed8:	0802ce74 	.word	0x0802ce74
 8003edc:	0802d028 	.word	0x0802d028
 8003ee0:	0802ce84 	.word	0x0802ce84
 8003ee4:	0802d040 	.word	0x0802d040
 8003ee8:	0802d058 	.word	0x0802d058
 8003eec:	20001684 	.word	0x20001684
 8003ef0:	200016d1 	.word	0x200016d1
 8003ef4:	200016b0 	.word	0x200016b0
 8003ef8:	0802d09c 	.word	0x0802d09c
 8003efc:	08003bed 	.word	0x08003bed
 8003f00:	0802d0c4 	.word	0x0802d0c4
 8003f04:	0802ce6c 	.word	0x0802ce6c
 8003f08:	0802ce7c 	.word	0x0802ce7c
 8003f0c:	0802d070 	.word	0x0802d070
 8003f10:	0802d0e0 	.word	0x0802d0e0
 8003f14:	0802d110 	.word	0x0802d110
 8003f18:	0802d128 	.word	0x0802d128
 8003f1c:	0802d140 	.word	0x0802d140
 8003f20:	0802d154 	.word	0x0802d154
            Display(("\r\netLE_Connection_Parameter_Update_Request with size %d.\r\n", (int)GAP_LE_Event_Data->Event_Data_Size));
 8003f24:	8849      	ldrh	r1, [r1, #2]
 8003f26:	4895      	ldr	r0, [pc, #596]	; (800417c <GAP_LE_Event_Callback+0x590>)
 8003f28:	f00f fc44 	bl	80137b4 <BTPS_OutputMessage>
            if(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data)
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 808b 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
               BD_ADDRToStr(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->BD_ADDR, BoardStr);
 8003f34:	aa1c      	add	r2, sp, #112	; 0x70
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	8899      	ldrh	r1, [r3, #4]
 8003f3a:	f7fe fe4d 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   BD_ADDR:             %s.\r\n", BoardStr));
 8003f3e:	a91c      	add	r1, sp, #112	; 0x70
 8003f40:	488f      	ldr	r0, [pc, #572]	; (8004180 <GAP_LE_Event_Callback+0x594>)
 8003f42:	f00f fc37 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Minimum Interval:    %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Conn_Interval_Min));
 8003f46:	6863      	ldr	r3, [r4, #4]
 8003f48:	88d9      	ldrh	r1, [r3, #6]
 8003f4a:	488e      	ldr	r0, [pc, #568]	; (8004184 <GAP_LE_Event_Callback+0x598>)
 8003f4c:	f00f fc32 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Maximum Interval:    %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Conn_Interval_Max));
 8003f50:	6863      	ldr	r3, [r4, #4]
 8003f52:	8919      	ldrh	r1, [r3, #8]
 8003f54:	488c      	ldr	r0, [pc, #560]	; (8004188 <GAP_LE_Event_Callback+0x59c>)
 8003f56:	f00f fc2d 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Slave Latency:       %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Slave_Latency));
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	8959      	ldrh	r1, [r3, #10]
 8003f5e:	488b      	ldr	r0, [pc, #556]	; (800418c <GAP_LE_Event_Callback+0x5a0>)
 8003f60:	f00f fc28 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Supervision Timeout: %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Conn_Supervision_Timeout));
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	8999      	ldrh	r1, [r3, #12]
 8003f68:	4889      	ldr	r0, [pc, #548]	; (8004190 <GAP_LE_Event_Callback+0x5a4>)
 8003f6a:	f00f fc23 	bl	80137b4 <BTPS_OutputMessage>
               ConnectionParameters.Connection_Interval_Min    = GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Conn_Interval_Min;
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	88da      	ldrh	r2, [r3, #6]
 8003f72:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
               ConnectionParameters.Connection_Interval_Max    = GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Conn_Interval_Max;
 8003f76:	891a      	ldrh	r2, [r3, #8]
 8003f78:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
               ConnectionParameters.Slave_Latency              = GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Slave_Latency;
 8003f7c:	895a      	ldrh	r2, [r3, #10]
 8003f7e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
               ConnectionParameters.Supervision_Timeout        = GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->Conn_Supervision_Timeout;
 8003f82:	899b      	ldrh	r3, [r3, #12]
 8003f84:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
               ConnectionParameters.Minimum_Connection_Length  = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
               ConnectionParameters.Maximum_Connection_Length  = 10000;
 8003f8e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f92:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
               Display(("\r\nAttempting to accept connection parameter update request.\r\n"));
 8003f96:	487f      	ldr	r0, [pc, #508]	; (8004194 <GAP_LE_Event_Callback+0x5a8>)
 8003f98:	f00f fc0c 	bl	80137b4 <BTPS_OutputMessage>
               Result = GAP_LE_Connection_Parameter_Update_Response(BluetoothStackID, GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Update_Request_Event_Data->BD_ADDR, TRUE, &ConnectionParameters);
 8003f9c:	6862      	ldr	r2, [r4, #4]
 8003f9e:	ab0d      	add	r3, sp, #52	; 0x34
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	6811      	ldr	r1, [r2, #0]
 8003fa6:	8892      	ldrh	r2, [r2, #4]
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f018 fb37 	bl	801c61c <GAP_LE_Connection_Parameter_Update_Response>
               if(!Result)
 8003fae:	4601      	mov	r1, r0
 8003fb0:	b918      	cbnz	r0, 8003fba <GAP_LE_Event_Callback+0x3ce>
                  Display(("      GAP_LE_Connection_Parameter_Update_Response() success.\r\n"));
 8003fb2:	4879      	ldr	r0, [pc, #484]	; (8004198 <GAP_LE_Event_Callback+0x5ac>)
 8003fb4:	f00f fbfe 	bl	80137b4 <BTPS_OutputMessage>
 8003fb8:	e047      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                  Display(("      GAP_LE_Connection_Parameter_Update_Response() error %d.\r\n", Result));
 8003fba:	4878      	ldr	r0, [pc, #480]	; (800419c <GAP_LE_Event_Callback+0x5b0>)
 8003fbc:	f00f fbfa 	bl	80137b4 <BTPS_OutputMessage>
 8003fc0:	e043      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
            Display(("\r\netLE_Connection_Parameter_Updated with size %d.\r\n", (int)GAP_LE_Event_Data->Event_Data_Size));
 8003fc2:	8849      	ldrh	r1, [r1, #2]
 8003fc4:	4876      	ldr	r0, [pc, #472]	; (80041a0 <GAP_LE_Event_Callback+0x5b4>)
 8003fc6:	f00f fbf5 	bl	80137b4 <BTPS_OutputMessage>
            if(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data)
 8003fca:	6863      	ldr	r3, [r4, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03c      	beq.n	800404a <GAP_LE_Event_Callback+0x45e>
               BD_ADDRToStr(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data->BD_ADDR, BoardStr);
 8003fd0:	7959      	ldrb	r1, [r3, #5]
 8003fd2:	799d      	ldrb	r5, [r3, #6]
 8003fd4:	aa1c      	add	r2, sp, #112	; 0x70
 8003fd6:	f8d3 0001 	ldr.w	r0, [r3, #1]
 8003fda:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003fde:	f7fe fdfb 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Status:              0x%02X.\r\n", GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data->Status));
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	7819      	ldrb	r1, [r3, #0]
 8003fe6:	486f      	ldr	r0, [pc, #444]	; (80041a4 <GAP_LE_Event_Callback+0x5b8>)
 8003fe8:	f00f fbe4 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   BD_ADDR:             %s.\r\n", BoardStr));
 8003fec:	a91c      	add	r1, sp, #112	; 0x70
 8003fee:	4864      	ldr	r0, [pc, #400]	; (8004180 <GAP_LE_Event_Callback+0x594>)
 8003ff0:	f00f fbe0 	bl	80137b4 <BTPS_OutputMessage>
               if(GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data->Status == HCI_ERROR_CODE_NO_ERROR)
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	bb3a      	cbnz	r2, 800404a <GAP_LE_Event_Callback+0x45e>
                  Display(("   Connection Interval: %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data->Current_Connection_Parameters.Connection_Interval));
 8003ffa:	8919      	ldrh	r1, [r3, #8]
 8003ffc:	486a      	ldr	r0, [pc, #424]	; (80041a8 <GAP_LE_Event_Callback+0x5bc>)
 8003ffe:	f00f fbd9 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("   Slave Latency:       %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data->Current_Connection_Parameters.Slave_Latency));
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	8959      	ldrh	r1, [r3, #10]
 8004006:	4861      	ldr	r0, [pc, #388]	; (800418c <GAP_LE_Event_Callback+0x5a0>)
 8004008:	f00f fbd4 	bl	80137b4 <BTPS_OutputMessage>
                  Display(("   Supervision Timeout: %u.\r\n", (unsigned int)GAP_LE_Event_Data->Event_Data.GAP_LE_Connection_Parameter_Updated_Event_Data->Current_Connection_Parameters.Supervision_Timeout));
 800400c:	6863      	ldr	r3, [r4, #4]
 800400e:	8999      	ldrh	r1, [r3, #12]
 8004010:	485f      	ldr	r0, [pc, #380]	; (8004190 <GAP_LE_Event_Callback+0x5a4>)
 8004012:	f00f fbcf 	bl	80137b4 <BTPS_OutputMessage>
 8004016:	e018      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
            Display(("\r\netLE_Encryption_Change with size %d.\r\n",(int)GAP_LE_Event_Data->Event_Data_Size));
 8004018:	8849      	ldrh	r1, [r1, #2]
 800401a:	4864      	ldr	r0, [pc, #400]	; (80041ac <GAP_LE_Event_Callback+0x5c0>)
 800401c:	f00f fbca 	bl	80137b4 <BTPS_OutputMessage>
            if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GAP_LE_Event_Data->Event_Data.GAP_LE_Encryption_Change_Event_Data->BD_ADDR)) != NULL)
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	791a      	ldrb	r2, [r3, #4]
 8004024:	7958      	ldrb	r0, [r3, #5]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800402c:	4860      	ldr	r0, [pc, #384]	; (80041b0 <GAP_LE_Event_Callback+0x5c4>)
 800402e:	f7fe fb27 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004032:	4603      	mov	r3, r0
 8004034:	b148      	cbz	r0, 800404a <GAP_LE_Event_Callback+0x45e>
               if((GAP_LE_Event_Data->Event_Data.GAP_LE_Encryption_Change_Event_Data->Encryption_Change_Status == HCI_ERROR_CODE_NO_ERROR) && (GAP_LE_Event_Data->Event_Data.GAP_LE_Encryption_Change_Event_Data->Encryption_Mode == emEnabled))
 8004036:	6862      	ldr	r2, [r4, #4]
 8004038:	7991      	ldrb	r1, [r2, #6]
 800403a:	b911      	cbnz	r1, 8004042 <GAP_LE_Event_Callback+0x456>
 800403c:	79d2      	ldrb	r2, [r2, #7]
 800403e:	2a01      	cmp	r2, #1
 8004040:	d007      	beq.n	8004052 <GAP_LE_Event_Callback+0x466>
                  DeviceInfo->Flags &= ~DEVICE_INFO_FLAGS_LINK_ENCRYPTED;
 8004042:	781a      	ldrb	r2, [r3, #0]
 8004044:	f022 0220 	bic.w	r2, r2, #32
 8004048:	701a      	strb	r2, [r3, #0]
      DisplayPrompt();
 800404a:	f7fe fab5 	bl	80025b8 <DisplayPrompt>
}
 800404e:	b021      	add	sp, #132	; 0x84
 8004050:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  DeviceInfo->Flags |= DEVICE_INFO_FLAGS_LINK_ENCRYPTED;
 8004052:	7802      	ldrb	r2, [r0, #0]
 8004054:	f042 0220 	orr.w	r2, r2, #32
 8004058:	7002      	strb	r2, [r0, #0]
 800405a:	e7f6      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
            Display(("\r\netLE_Encryption_Refresh_Complete with size %d.\r\n", (int)GAP_LE_Event_Data->Event_Data_Size));
 800405c:	8849      	ldrh	r1, [r1, #2]
 800405e:	4855      	ldr	r0, [pc, #340]	; (80041b4 <GAP_LE_Event_Callback+0x5c8>)
 8004060:	f00f fba8 	bl	80137b4 <BTPS_OutputMessage>
            if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, GAP_LE_Event_Data->Event_Data.GAP_LE_Encryption_Refresh_Complete_Event_Data->BD_ADDR)) != NULL)
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	791a      	ldrb	r2, [r3, #4]
 8004068:	7958      	ldrb	r0, [r3, #5]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004070:	484f      	ldr	r0, [pc, #316]	; (80041b0 <GAP_LE_Event_Callback+0x5c4>)
 8004072:	f7fe fb05 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004076:	2800      	cmp	r0, #0
 8004078:	d0e7      	beq.n	800404a <GAP_LE_Event_Callback+0x45e>
               if(GAP_LE_Event_Data->Event_Data.GAP_LE_Encryption_Refresh_Complete_Event_Data->Status == HCI_ERROR_CODE_NO_ERROR)
 800407a:	6862      	ldr	r2, [r4, #4]
 800407c:	7992      	ldrb	r2, [r2, #6]
 800407e:	b922      	cbnz	r2, 800408a <GAP_LE_Event_Callback+0x49e>
                  DeviceInfo->Flags |= DEVICE_INFO_FLAGS_LINK_ENCRYPTED;
 8004080:	7802      	ldrb	r2, [r0, #0]
 8004082:	f042 0220 	orr.w	r2, r2, #32
 8004086:	7002      	strb	r2, [r0, #0]
 8004088:	e7df      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                  DeviceInfo->Flags &= ~DEVICE_INFO_FLAGS_LINK_ENCRYPTED;
 800408a:	7802      	ldrb	r2, [r0, #0]
 800408c:	f022 0220 	bic.w	r2, r2, #32
 8004090:	7002      	strb	r2, [r0, #0]
 8004092:	e7da      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
            Display(("\r\netLE_Authentication with size %d.\r\n", (int)GAP_LE_Event_Data->Event_Data_Size));
 8004094:	8849      	ldrh	r1, [r1, #2]
 8004096:	4848      	ldr	r0, [pc, #288]	; (80041b8 <GAP_LE_Event_Callback+0x5cc>)
 8004098:	f00f fb8c 	bl	80137b4 <BTPS_OutputMessage>
            if((Authentication_Event_Data = GAP_LE_Event_Data->Event_Data.GAP_LE_Authentication_Event_Data) != NULL)
 800409c:	6864      	ldr	r4, [r4, #4]
 800409e:	2c00      	cmp	r4, #0
 80040a0:	d0d3      	beq.n	800404a <GAP_LE_Event_Callback+0x45e>
               BD_ADDRToStr(Authentication_Event_Data->BD_ADDR, BoardStr);
 80040a2:	7963      	ldrb	r3, [r4, #5]
 80040a4:	79a1      	ldrb	r1, [r4, #6]
 80040a6:	aa1c      	add	r2, sp, #112	; 0x70
 80040a8:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80040ac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80040b0:	f7fe fd92 	bl	8002bd8 <BD_ADDRToStr>
               switch(Authentication_Event_Data->GAP_LE_Authentication_Event_Type)
 80040b4:	7823      	ldrb	r3, [r4, #0]
 80040b6:	2b0b      	cmp	r3, #11
 80040b8:	d8c7      	bhi.n	800404a <GAP_LE_Event_Callback+0x45e>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <GAP_LE_Event_Callback+0x4d4>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040f1 	.word	0x080040f1
 80040c4:	080041d9 	.word	0x080041d9
 80040c8:	080042cf 	.word	0x080042cf
 80040cc:	08004303 	.word	0x08004303
 80040d0:	0800436f 	.word	0x0800436f
 80040d4:	080043c9 	.word	0x080043c9
 80040d8:	0800404b 	.word	0x0800404b
 80040dc:	0800404b 	.word	0x0800404b
 80040e0:	080043e7 	.word	0x080043e7
 80040e4:	0800404b 	.word	0x0800404b
 80040e8:	0800404b 	.word	0x0800404b
 80040ec:	0800435d 	.word	0x0800435d
                     Display(("    latKeyRequest: \r\n"));
 80040f0:	4832      	ldr	r0, [pc, #200]	; (80041bc <GAP_LE_Event_Callback+0x5d0>)
 80040f2:	f00f fb5f 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("      BD_ADDR: %s.\r\n", BoardStr));
 80040f6:	a91c      	add	r1, sp, #112	; 0x70
 80040f8:	4831      	ldr	r0, [pc, #196]	; (80041c0 <GAP_LE_Event_Callback+0x5d4>)
 80040fa:	f00f fb5b 	bl	80137b4 <BTPS_OutputMessage>
                     Result = GAP_LE_Regenerate_Long_Term_Key(BluetoothStackID, (Encryption_Key_t *)(&DHK), (Encryption_Key_t *)(&ER), Authentication_Event_Data->Authentication_Event_Data.Long_Term_Key_Request.EDIV, &(Authentication_Event_Data->Authentication_Event_Data.Long_Term_Key_Request.Rand), &GeneratedLTK);
 80040fe:	8a23      	ldrh	r3, [r4, #16]
 8004100:	aa18      	add	r2, sp, #96	; 0x60
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	f104 0208 	add.w	r2, r4, #8
 8004108:	9200      	str	r2, [sp, #0]
 800410a:	4a2e      	ldr	r2, [pc, #184]	; (80041c4 <GAP_LE_Event_Callback+0x5d8>)
 800410c:	492e      	ldr	r1, [pc, #184]	; (80041c8 <GAP_LE_Event_Callback+0x5dc>)
 800410e:	4628      	mov	r0, r5
 8004110:	f018 fe7a 	bl	801ce08 <GAP_LE_Regenerate_Long_Term_Key>
                     if(!Result)
 8004114:	4601      	mov	r1, r0
 8004116:	bb38      	cbnz	r0, 8004168 <GAP_LE_Event_Callback+0x57c>
                        Display(("      GAP_LE_Regenerate_Long_Term_Key Success.\r\n"));
 8004118:	482c      	ldr	r0, [pc, #176]	; (80041cc <GAP_LE_Event_Callback+0x5e0>)
 800411a:	f00f fb4b 	bl	80137b4 <BTPS_OutputMessage>
                        GAP_LE_Authentication_Response_Information.GAP_LE_Authentication_Type                                        = larLongTermKey;
 800411e:	2300      	movs	r3, #0
 8004120:	f88d 3014 	strb.w	r3, [sp, #20]
                        GAP_LE_Authentication_Response_Information.Authentication_Data_Length                                        = GAP_LE_LONG_TERM_KEY_INFORMATION_DATA_SIZE;
 8004124:	2311      	movs	r3, #17
 8004126:	f88d 3015 	strb.w	r3, [sp, #21]
                        GAP_LE_Authentication_Response_Information.Authentication_Data.Long_Term_Key_Information.Encryption_Key_Size = GAP_LE_MAXIMUM_ENCRYPTION_KEY_SIZE;
 800412a:	2310      	movs	r3, #16
 800412c:	f88d 3018 	strb.w	r3, [sp, #24]
                        GAP_LE_Authentication_Response_Information.Authentication_Data.Long_Term_Key_Information.Long_Term_Key       = GeneratedLTK;
 8004130:	ae18      	add	r6, sp, #96	; 0x60
 8004132:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004134:	f8cd 0019 	str.w	r0, [sp, #25]
 8004138:	f8cd 101d 	str.w	r1, [sp, #29]
 800413c:	f8cd 2021 	str.w	r2, [sp, #33]	; 0x21
 8004140:	f8cd 3025 	str.w	r3, [sp, #37]	; 0x25
                     Result = GAP_LE_Authentication_Response(BluetoothStackID, Authentication_Event_Data->BD_ADDR, &GAP_LE_Authentication_Response_Information);
 8004144:	7962      	ldrb	r2, [r4, #5]
 8004146:	79a0      	ldrb	r0, [r4, #6]
 8004148:	ab05      	add	r3, sp, #20
 800414a:	f8d4 1001 	ldr.w	r1, [r4, #1]
 800414e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004152:	4628      	mov	r0, r5
 8004154:	f018 f8fe 	bl	801c354 <GAP_LE_Authentication_Response>
                     if(Result)
 8004158:	4601      	mov	r1, r0
 800415a:	2800      	cmp	r0, #0
 800415c:	f43f af75 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                        DisplayFunctionError("      GAP_LE_Authentication_Response", Result);
 8004160:	481b      	ldr	r0, [pc, #108]	; (80041d0 <GAP_LE_Event_Callback+0x5e4>)
 8004162:	f7fe fa31 	bl	80025c8 <DisplayFunctionError>
 8004166:	e770      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                        DisplayFunctionError("      GAP_LE_Regenerate_Long_Term_Key", Result);
 8004168:	481a      	ldr	r0, [pc, #104]	; (80041d4 <GAP_LE_Event_Callback+0x5e8>)
 800416a:	f7fe fa2d 	bl	80025c8 <DisplayFunctionError>
                        GAP_LE_Authentication_Response_Information.GAP_LE_Authentication_Type = larLongTermKey;
 800416e:	2300      	movs	r3, #0
 8004170:	f88d 3014 	strb.w	r3, [sp, #20]
                        GAP_LE_Authentication_Response_Information.Authentication_Data_Length = 0;
 8004174:	f88d 3015 	strb.w	r3, [sp, #21]
 8004178:	e7e4      	b.n	8004144 <GAP_LE_Event_Callback+0x558>
 800417a:	bf00      	nop
 800417c:	0802d180 	.word	0x0802d180
 8004180:	0802d1bc 	.word	0x0802d1bc
 8004184:	0802d1dc 	.word	0x0802d1dc
 8004188:	0802d1fc 	.word	0x0802d1fc
 800418c:	0802d21c 	.word	0x0802d21c
 8004190:	0802d23c 	.word	0x0802d23c
 8004194:	0802d25c 	.word	0x0802d25c
 8004198:	0802d29c 	.word	0x0802d29c
 800419c:	0802d2dc 	.word	0x0802d2dc
 80041a0:	0802d31c 	.word	0x0802d31c
 80041a4:	0802d350 	.word	0x0802d350
 80041a8:	0802d374 	.word	0x0802d374
 80041ac:	0802d394 	.word	0x0802d394
 80041b0:	200016b0 	.word	0x200016b0
 80041b4:	0802d3c0 	.word	0x0802d3c0
 80041b8:	0802d3f4 	.word	0x0802d3f4
 80041bc:	0802d41c 	.word	0x0802d41c
 80041c0:	0802d434 	.word	0x0802d434
 80041c4:	0802f238 	.word	0x0802f238
 80041c8:	2000169c 	.word	0x2000169c
 80041cc:	0802d44c 	.word	0x0802d44c
 80041d0:	0802d4a8 	.word	0x0802d4a8
 80041d4:	0802d480 	.word	0x0802d480
                     Display(("    latSecurityRequest:.\r\n"));
 80041d8:	489c      	ldr	r0, [pc, #624]	; (800444c <GAP_LE_Event_Callback+0x860>)
 80041da:	f00f faeb 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("      BD_ADDR: %s.\r\n", BoardStr));
 80041de:	a91c      	add	r1, sp, #112	; 0x70
 80041e0:	489b      	ldr	r0, [pc, #620]	; (8004450 <GAP_LE_Event_Callback+0x864>)
 80041e2:	f00f fae7 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("      Bonding Type: %s.\r\n", ((Authentication_Event_Data->Authentication_Event_Data.Security_Request.Bonding_Type == lbtBonding)?"Bonding":"No Bonding")));
 80041e6:	7a23      	ldrb	r3, [r4, #8]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d04a      	beq.n	8004282 <GAP_LE_Event_Callback+0x696>
 80041ec:	4999      	ldr	r1, [pc, #612]	; (8004454 <GAP_LE_Event_Callback+0x868>)
 80041ee:	489a      	ldr	r0, [pc, #616]	; (8004458 <GAP_LE_Event_Callback+0x86c>)
 80041f0:	f00f fae0 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("      MITM: %s.\r\n", ((Authentication_Event_Data->Authentication_Event_Data.Security_Request.MITM == TRUE)?"YES":"NO")));
 80041f4:	7a63      	ldrb	r3, [r4, #9]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d045      	beq.n	8004286 <GAP_LE_Event_Callback+0x69a>
 80041fa:	4998      	ldr	r1, [pc, #608]	; (800445c <GAP_LE_Event_Callback+0x870>)
 80041fc:	4898      	ldr	r0, [pc, #608]	; (8004460 <GAP_LE_Event_Callback+0x874>)
 80041fe:	f00f fad9 	bl	80137b4 <BTPS_OutputMessage>
                     if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, Authentication_Event_Data->BD_ADDR)) != NULL)
 8004202:	7963      	ldrb	r3, [r4, #5]
 8004204:	79a2      	ldrb	r2, [r4, #6]
 8004206:	f8d4 1001 	ldr.w	r1, [r4, #1]
 800420a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800420e:	4895      	ldr	r0, [pc, #596]	; (8004464 <GAP_LE_Event_Callback+0x878>)
 8004210:	f7fe fa36 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004214:	4606      	mov	r6, r0
 8004216:	2800      	cmp	r0, #0
 8004218:	d048      	beq.n	80042ac <GAP_LE_Event_Callback+0x6c0>
                        if(DeviceInfo->Flags & DEVICE_INFO_FLAGS_LTK_VALID)
 800421a:	7803      	ldrb	r3, [r0, #0]
 800421c:	f013 0f01 	tst.w	r3, #1
 8004220:	d033      	beq.n	800428a <GAP_LE_Event_Callback+0x69e>
                           Display(("Attempting to Re-Establish Security.\r\n"));
 8004222:	4891      	ldr	r0, [pc, #580]	; (8004468 <GAP_LE_Event_Callback+0x87c>)
 8004224:	f00f fac6 	bl	80137b4 <BTPS_OutputMessage>
                           GAP_LE_Security_Information.Local_Device_Is_Master                                      = TRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
                           BTPS_MemCopy(&(GAP_LE_Security_Information.Security_Information.Master_Information.LTK), &(DeviceInfo->LTK), LONG_TERM_KEY_SIZE);
 800422e:	2210      	movs	r2, #16
 8004230:	f106 0109 	add.w	r1, r6, #9
 8004234:	f10d 0043 	add.w	r0, sp, #67	; 0x43
 8004238:	f00f f93d 	bl	80134b6 <BTPS_MemCopy>
                           BTPS_MemCopy(&(GAP_LE_Security_Information.Security_Information.Master_Information.Rand), &(DeviceInfo->Rand), RANDOM_NUMBER_DATA_SIZE);
 800423c:	2208      	movs	r2, #8
 800423e:	f106 0119 	add.w	r1, r6, #25
 8004242:	f10d 0056 	add.w	r0, sp, #86	; 0x56
 8004246:	f00f f936 	bl	80134b6 <BTPS_MemCopy>
                           GAP_LE_Security_Information.Security_Information.Master_Information.EDIV                = DeviceInfo->EDIV;
 800424a:	8c73      	ldrh	r3, [r6, #34]	; 0x22
 800424c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
                           GAP_LE_Security_Information.Security_Information.Master_Information.Encryption_Key_Size = DeviceInfo->EncryptionKeySize;
 8004250:	7873      	ldrb	r3, [r6, #1]
 8004252:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
                           Result = GAP_LE_Reestablish_Security(BluetoothStackID, Authentication_Event_Data->BD_ADDR, &GAP_LE_Security_Information, GAP_LE_Event_Callback, 0);
 8004256:	2300      	movs	r3, #0
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	4b84      	ldr	r3, [pc, #528]	; (800446c <GAP_LE_Event_Callback+0x880>)
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	7962      	ldrb	r2, [r4, #5]
 8004260:	79a0      	ldrb	r0, [r4, #6]
 8004262:	ab10      	add	r3, sp, #64	; 0x40
 8004264:	f8d4 1001 	ldr.w	r1, [r4, #1]
 8004268:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800426c:	4628      	mov	r0, r5
 800426e:	f018 fd4b 	bl	801cd08 <GAP_LE_Reestablish_Security>
                           if(Result)
 8004272:	4601      	mov	r1, r0
 8004274:	2800      	cmp	r0, #0
 8004276:	f43f aee8 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                              DisplayFunctionError("GAP_LE_Reestablish_Security", Result);
 800427a:	487d      	ldr	r0, [pc, #500]	; (8004470 <GAP_LE_Event_Callback+0x884>)
 800427c:	f7fe f9a4 	bl	80025c8 <DisplayFunctionError>
 8004280:	e6e3      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     Display(("      Bonding Type: %s.\r\n", ((Authentication_Event_Data->Authentication_Event_Data.Security_Request.Bonding_Type == lbtBonding)?"Bonding":"No Bonding")));
 8004282:	497c      	ldr	r1, [pc, #496]	; (8004474 <GAP_LE_Event_Callback+0x888>)
 8004284:	e7b3      	b.n	80041ee <GAP_LE_Event_Callback+0x602>
                     Display(("      MITM: %s.\r\n", ((Authentication_Event_Data->Authentication_Event_Data.Security_Request.MITM == TRUE)?"YES":"NO")));
 8004286:	497c      	ldr	r1, [pc, #496]	; (8004478 <GAP_LE_Event_Callback+0x88c>)
 8004288:	e7b8      	b.n	80041fc <GAP_LE_Event_Callback+0x610>
                           CurrentRemoteBD_ADDR = Authentication_Event_Data->BD_ADDR;
 800428a:	4a7c      	ldr	r2, [pc, #496]	; (800447c <GAP_LE_Event_Callback+0x890>)
 800428c:	4623      	mov	r3, r4
 800428e:	f853 0f01 	ldr.w	r0, [r3, #1]!
 8004292:	6010      	str	r0, [r2, #0]
 8004294:	889b      	ldrh	r3, [r3, #4]
 8004296:	8093      	strh	r3, [r2, #4]
                           SendPairingRequest(Authentication_Event_Data->BD_ADDR, TRUE);
 8004298:	7963      	ldrb	r3, [r4, #5]
 800429a:	79a1      	ldrb	r1, [r4, #6]
 800429c:	2201      	movs	r2, #1
 800429e:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80042a2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80042a6:	f7ff fb5b 	bl	8003960 <SendPairingRequest>
 80042aa:	e6ce      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                        CurrentRemoteBD_ADDR = Authentication_Event_Data->BD_ADDR;
 80042ac:	4a73      	ldr	r2, [pc, #460]	; (800447c <GAP_LE_Event_Callback+0x890>)
 80042ae:	4623      	mov	r3, r4
 80042b0:	f853 0f01 	ldr.w	r0, [r3, #1]!
 80042b4:	6010      	str	r0, [r2, #0]
 80042b6:	889b      	ldrh	r3, [r3, #4]
 80042b8:	8093      	strh	r3, [r2, #4]
                        SendPairingRequest(Authentication_Event_Data->BD_ADDR, TRUE);
 80042ba:	7963      	ldrb	r3, [r4, #5]
 80042bc:	79a1      	ldrb	r1, [r4, #6]
 80042be:	2201      	movs	r2, #1
 80042c0:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80042c4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80042c8:	f7ff fb4a 	bl	8003960 <SendPairingRequest>
 80042cc:	e6bd      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     CurrentRemoteBD_ADDR = Authentication_Event_Data->BD_ADDR;
 80042ce:	4a6b      	ldr	r2, [pc, #428]	; (800447c <GAP_LE_Event_Callback+0x890>)
 80042d0:	4623      	mov	r3, r4
 80042d2:	f853 0f01 	ldr.w	r0, [r3, #1]!
 80042d6:	6010      	str	r0, [r2, #0]
 80042d8:	889b      	ldrh	r3, [r3, #4]
 80042da:	8093      	strh	r3, [r2, #4]
                     Display(("Pairing Request: %s.\r\n",BoardStr));
 80042dc:	a91c      	add	r1, sp, #112	; 0x70
 80042de:	4868      	ldr	r0, [pc, #416]	; (8004480 <GAP_LE_Event_Callback+0x894>)
 80042e0:	f00f fa68 	bl	80137b4 <BTPS_OutputMessage>
                     DisplayPairingInformation(Authentication_Event_Data->Authentication_Event_Data.Pairing_Request);
 80042e4:	f104 0308 	add.w	r3, r4, #8
 80042e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042ec:	f7fd fe7c 	bl	8001fe8 <DisplayPairingInformation>
                     SlavePairingRequestResponse(Authentication_Event_Data->BD_ADDR);
 80042f0:	7963      	ldrb	r3, [r4, #5]
 80042f2:	79a1      	ldrb	r1, [r4, #6]
 80042f4:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80042f8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80042fc:	f7ff fa52 	bl	80037a4 <SlavePairingRequestResponse>
                     break;
 8004300:	e6a3      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     Display(("latConfirmationRequest.\r\n"));
 8004302:	4860      	ldr	r0, [pc, #384]	; (8004484 <GAP_LE_Event_Callback+0x898>)
 8004304:	f00f fa56 	bl	80137b4 <BTPS_OutputMessage>
                     if(Authentication_Event_Data->Authentication_Event_Data.Confirmation_Request.Request_Type == crtNone)
 8004308:	7a23      	ldrb	r3, [r4, #8]
 800430a:	b14b      	cbz	r3, 8004320 <GAP_LE_Event_Callback+0x734>
                        if(Authentication_Event_Data->Authentication_Event_Data.Confirmation_Request.Request_Type == crtPasskey)
 800430c:	2b01      	cmp	r3, #1
 800430e:	d021      	beq.n	8004354 <GAP_LE_Event_Callback+0x768>
                           if(Authentication_Event_Data->Authentication_Event_Data.Confirmation_Request.Request_Type == crtDisplay)
 8004310:	2b02      	cmp	r3, #2
 8004312:	f47f ae9a 	bne.w	800404a <GAP_LE_Event_Callback+0x45e>
                              Display(("Passkey: %06ld.\r\n", Authentication_Event_Data->Authentication_Event_Data.Confirmation_Request.Display_Passkey));
 8004316:	68e1      	ldr	r1, [r4, #12]
 8004318:	485b      	ldr	r0, [pc, #364]	; (8004488 <GAP_LE_Event_Callback+0x89c>)
 800431a:	f00f fa4b 	bl	80137b4 <BTPS_OutputMessage>
 800431e:	e694      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                        Display(("Invoking Just Works.\r\n"));
 8004320:	485a      	ldr	r0, [pc, #360]	; (800448c <GAP_LE_Event_Callback+0x8a0>)
 8004322:	f00f fa47 	bl	80137b4 <BTPS_OutputMessage>
                        GAP_LE_Authentication_Response_Information.GAP_LE_Authentication_Type = larConfirmation;
 8004326:	2304      	movs	r3, #4
 8004328:	f88d 3014 	strb.w	r3, [sp, #20]
                        GAP_LE_Authentication_Response_Information.Authentication_Data_Length = DWORD_SIZE;
 800432c:	f88d 3015 	strb.w	r3, [sp, #21]
                        Result = GAP_LE_Authentication_Response(BluetoothStackID, Authentication_Event_Data->BD_ADDR, &GAP_LE_Authentication_Response_Information);
 8004330:	7962      	ldrb	r2, [r4, #5]
 8004332:	79a0      	ldrb	r0, [r4, #6]
 8004334:	ab05      	add	r3, sp, #20
 8004336:	f8d4 1001 	ldr.w	r1, [r4, #1]
 800433a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800433e:	4628      	mov	r0, r5
 8004340:	f018 f808 	bl	801c354 <GAP_LE_Authentication_Response>
                        if(Result)
 8004344:	4601      	mov	r1, r0
 8004346:	2800      	cmp	r0, #0
 8004348:	f43f ae7f 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                           DisplayFunctionError("GAP_LE_Authentication_Response", Result);
 800434c:	4850      	ldr	r0, [pc, #320]	; (8004490 <GAP_LE_Event_Callback+0x8a4>)
 800434e:	f7fe f93b 	bl	80025c8 <DisplayFunctionError>
 8004352:	e67a      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                           Display(("Call LEPasskeyResponse [PASSCODE].\r\n"));
 8004354:	484f      	ldr	r0, [pc, #316]	; (8004494 <GAP_LE_Event_Callback+0x8a8>)
 8004356:	f00f fa2d 	bl	80137b4 <BTPS_OutputMessage>
 800435a:	e676      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     Display(("Security Re-Establishment Complete: %s.\r\n", BoardStr));
 800435c:	a91c      	add	r1, sp, #112	; 0x70
 800435e:	484e      	ldr	r0, [pc, #312]	; (8004498 <GAP_LE_Event_Callback+0x8ac>)
 8004360:	f00f fa28 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("                            Status: 0x%02X.\r\n", Authentication_Event_Data->Authentication_Event_Data.Security_Establishment_Complete.Status));
 8004364:	7a21      	ldrb	r1, [r4, #8]
 8004366:	484d      	ldr	r0, [pc, #308]	; (800449c <GAP_LE_Event_Callback+0x8b0>)
 8004368:	f00f fa24 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 800436c:	e66d      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     ASSIGN_BD_ADDR(CurrentRemoteBD_ADDR, 0, 0, 0, 0, 0, 0);
 800436e:	4b43      	ldr	r3, [pc, #268]	; (800447c <GAP_LE_Event_Callback+0x890>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	705a      	strb	r2, [r3, #1]
 8004376:	709a      	strb	r2, [r3, #2]
 8004378:	70da      	strb	r2, [r3, #3]
 800437a:	711a      	strb	r2, [r3, #4]
 800437c:	715a      	strb	r2, [r3, #5]
                     Display(("Pairing Status: %s.\r\n", BoardStr));
 800437e:	a91c      	add	r1, sp, #112	; 0x70
 8004380:	4847      	ldr	r0, [pc, #284]	; (80044a0 <GAP_LE_Event_Callback+0x8b4>)
 8004382:	f00f fa17 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("        Status: 0x%02X.\r\n", Authentication_Event_Data->Authentication_Event_Data.Pairing_Status.Status));
 8004386:	7a61      	ldrb	r1, [r4, #9]
 8004388:	4846      	ldr	r0, [pc, #280]	; (80044a4 <GAP_LE_Event_Callback+0x8b8>)
 800438a:	f00f fa13 	bl	80137b4 <BTPS_OutputMessage>
                     if(Authentication_Event_Data->Authentication_Event_Data.Pairing_Status.Status == GAP_LE_PAIRING_STATUS_NO_ERROR)
 800438e:	7a63      	ldrb	r3, [r4, #9]
 8004390:	b923      	cbnz	r3, 800439c <GAP_LE_Event_Callback+0x7b0>
                        Display(("        Key Size: %d.\r\n", Authentication_Event_Data->Authentication_Event_Data.Pairing_Status.Negotiated_Encryption_Key_Size));
 8004392:	7aa1      	ldrb	r1, [r4, #10]
 8004394:	4844      	ldr	r0, [pc, #272]	; (80044a8 <GAP_LE_Event_Callback+0x8bc>)
 8004396:	f00f fa0d 	bl	80137b4 <BTPS_OutputMessage>
 800439a:	e656      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                        if((DeviceInfo = DeleteDeviceInfoEntry(&DeviceInfoList, Authentication_Event_Data->BD_ADDR)) != NULL)
 800439c:	7963      	ldrb	r3, [r4, #5]
 800439e:	79a2      	ldrb	r2, [r4, #6]
 80043a0:	f8d4 1001 	ldr.w	r1, [r4, #1]
 80043a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80043a8:	482e      	ldr	r0, [pc, #184]	; (8004464 <GAP_LE_Event_Callback+0x878>)
 80043aa:	f7ff fb95 	bl	8003ad8 <DeleteDeviceInfoEntry>
 80043ae:	b108      	cbz	r0, 80043b4 <GAP_LE_Event_Callback+0x7c8>
                           FreeDeviceInfoEntryMemory(DeviceInfo);
 80043b0:	f7ff fba0 	bl	8003af4 <FreeDeviceInfoEntryMemory>
                        GAP_LE_Disconnect(BluetoothStackID, Authentication_Event_Data->BD_ADDR);
 80043b4:	7963      	ldrb	r3, [r4, #5]
 80043b6:	79a2      	ldrb	r2, [r4, #6]
 80043b8:	f8d4 1001 	ldr.w	r1, [r4, #1]
 80043bc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80043c0:	4628      	mov	r0, r5
 80043c2:	f018 fa49 	bl	801c858 <GAP_LE_Disconnect>
 80043c6:	e640      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     Display(("Encryption Information Request %s.\r\n", BoardStr));
 80043c8:	a91c      	add	r1, sp, #112	; 0x70
 80043ca:	4838      	ldr	r0, [pc, #224]	; (80044ac <GAP_LE_Event_Callback+0x8c0>)
 80043cc:	f00f f9f2 	bl	80137b4 <BTPS_OutputMessage>
                     EncryptionInformationRequestResponse(Authentication_Event_Data->BD_ADDR, Authentication_Event_Data->Authentication_Event_Data.Encryption_Request_Information.Encryption_Key_Size, &GAP_LE_Authentication_Response_Information);
 80043d0:	7961      	ldrb	r1, [r4, #5]
 80043d2:	79a5      	ldrb	r5, [r4, #6]
 80043d4:	ab05      	add	r3, sp, #20
 80043d6:	7a22      	ldrb	r2, [r4, #8]
 80043d8:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80043dc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80043e0:	f7ff fb8c 	bl	8003afc <EncryptionInformationRequestResponse>
                     break;
 80043e4:	e631      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                     Display((" Encryption Information from RemoteDevice: %s.\r\n", BoardStr));
 80043e6:	a91c      	add	r1, sp, #112	; 0x70
 80043e8:	4831      	ldr	r0, [pc, #196]	; (80044b0 <GAP_LE_Event_Callback+0x8c4>)
 80043ea:	f00f f9e3 	bl	80137b4 <BTPS_OutputMessage>
                     Display(("                             Key Size: %d.\r\n", Authentication_Event_Data->Authentication_Event_Data.Encryption_Information.Encryption_Key_Size));
 80043ee:	7a21      	ldrb	r1, [r4, #8]
 80043f0:	4830      	ldr	r0, [pc, #192]	; (80044b4 <GAP_LE_Event_Callback+0x8c8>)
 80043f2:	f00f f9df 	bl	80137b4 <BTPS_OutputMessage>
                     if(LocalDeviceIsMaster)
 80043f6:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <GAP_LE_Event_Callback+0x8cc>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f43f ae25 	beq.w	800404a <GAP_LE_Event_Callback+0x45e>
                        if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, Authentication_Event_Data->BD_ADDR)) != NULL)
 8004400:	7963      	ldrb	r3, [r4, #5]
 8004402:	79a2      	ldrb	r2, [r4, #6]
 8004404:	f8d4 1001 	ldr.w	r1, [r4, #1]
 8004408:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800440c:	4815      	ldr	r0, [pc, #84]	; (8004464 <GAP_LE_Event_Callback+0x878>)
 800440e:	f7fe f937 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004412:	4605      	mov	r5, r0
 8004414:	b1a8      	cbz	r0, 8004442 <GAP_LE_Event_Callback+0x856>
                           BTPS_MemCopy(&(DeviceInfo->LTK), &(Authentication_Event_Data->Authentication_Event_Data.Encryption_Information.LTK), LONG_TERM_KEY_SIZE);
 8004416:	2210      	movs	r2, #16
 8004418:	f104 0109 	add.w	r1, r4, #9
 800441c:	3009      	adds	r0, #9
 800441e:	f00f f84a 	bl	80134b6 <BTPS_MemCopy>
                           BTPS_MemCopy(&(DeviceInfo->Rand), &(Authentication_Event_Data->Authentication_Event_Data.Encryption_Information.Rand), RANDOM_NUMBER_DATA_SIZE);
 8004422:	2208      	movs	r2, #8
 8004424:	f104 011c 	add.w	r1, r4, #28
 8004428:	f105 0019 	add.w	r0, r5, #25
 800442c:	f00f f843 	bl	80134b6 <BTPS_MemCopy>
                           DeviceInfo->EDIV              = Authentication_Event_Data->Authentication_Event_Data.Encryption_Information.EDIV;
 8004430:	8b63      	ldrh	r3, [r4, #26]
 8004432:	846b      	strh	r3, [r5, #34]	; 0x22
                           DeviceInfo->EncryptionKeySize = Authentication_Event_Data->Authentication_Event_Data.Encryption_Information.Encryption_Key_Size;
 8004434:	7a23      	ldrb	r3, [r4, #8]
 8004436:	706b      	strb	r3, [r5, #1]
                           DeviceInfo->Flags            |= DEVICE_INFO_FLAGS_LTK_VALID;
 8004438:	782b      	ldrb	r3, [r5, #0]
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	702b      	strb	r3, [r5, #0]
 8004440:	e603      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
                           Display(("No Key Info Entry for this Slave.\r\n"));
 8004442:	481e      	ldr	r0, [pc, #120]	; (80044bc <GAP_LE_Event_Callback+0x8d0>)
 8004444:	f00f f9b6 	bl	80137b4 <BTPS_OutputMessage>
 8004448:	e5ff      	b.n	800404a <GAP_LE_Event_Callback+0x45e>
 800444a:	4770      	bx	lr
 800444c:	0802d4d0 	.word	0x0802d4d0
 8004450:	0802d434 	.word	0x0802d434
 8004454:	0802afa4 	.word	0x0802afa4
 8004458:	0802d4ec 	.word	0x0802d4ec
 800445c:	0802afcc 	.word	0x0802afcc
 8004460:	0802d508 	.word	0x0802d508
 8004464:	200016b0 	.word	0x200016b0
 8004468:	0802d09c 	.word	0x0802d09c
 800446c:	08003bed 	.word	0x08003bed
 8004470:	0802d0c4 	.word	0x0802d0c4
 8004474:	0802afb0 	.word	0x0802afb0
 8004478:	0802afd0 	.word	0x0802afd0
 800447c:	20001694 	.word	0x20001694
 8004480:	0802d51c 	.word	0x0802d51c
 8004484:	0802d534 	.word	0x0802d534
 8004488:	0802d590 	.word	0x0802d590
 800448c:	0802d550 	.word	0x0802d550
 8004490:	0802ce2c 	.word	0x0802ce2c
 8004494:	0802d568 	.word	0x0802d568
 8004498:	0802d5a4 	.word	0x0802d5a4
 800449c:	0802d5d0 	.word	0x0802d5d0
 80044a0:	0802d600 	.word	0x0802d600
 80044a4:	0802d5e4 	.word	0x0802d5e4
 80044a8:	0802d618 	.word	0x0802d618
 80044ac:	0802d630 	.word	0x0802d630
 80044b0:	0802d658 	.word	0x0802d658
 80044b4:	0802d68c 	.word	0x0802d68c
 80044b8:	200016d1 	.word	0x200016d1
 80044bc:	0802d6bc 	.word	0x0802d6bc

080044c0 <QueryMemory>:
{
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	b086      	sub	sp, #24
   ret_val = BTPS_QueryMemoryUsage(&MemoryStatistics, TRUE);
 80044c4:	2101      	movs	r1, #1
 80044c6:	a801      	add	r0, sp, #4
 80044c8:	f00f f83e 	bl	8013548 <BTPS_QueryMemoryUsage>
   if(!ret_val)
 80044cc:	4604      	mov	r4, r0
 80044ce:	2800      	cmp	r0, #0
 80044d0:	d130      	bne.n	8004534 <QueryMemory+0x74>
      Display(("\r\n"));
 80044d2:	481a      	ldr	r0, [pc, #104]	; (800453c <QueryMemory+0x7c>)
 80044d4:	f00f f96e 	bl	80137b4 <BTPS_OutputMessage>
      Display(("Heap Size:                %5d bytes\r\n", MemoryStatistics.HeapSize));
 80044d8:	9901      	ldr	r1, [sp, #4]
 80044da:	4819      	ldr	r0, [pc, #100]	; (8004540 <QueryMemory+0x80>)
 80044dc:	f00f f96a 	bl	80137b4 <BTPS_OutputMessage>
      Display(("Current Memory Usage:\r\n"));
 80044e0:	4818      	ldr	r0, [pc, #96]	; (8004544 <QueryMemory+0x84>)
 80044e2:	f00f f967 	bl	80137b4 <BTPS_OutputMessage>
      Display(("   Used:                  %5d bytes\r\n", MemoryStatistics.CurrentHeapUsed));
 80044e6:	4e18      	ldr	r6, [pc, #96]	; (8004548 <QueryMemory+0x88>)
 80044e8:	9902      	ldr	r1, [sp, #8]
 80044ea:	4630      	mov	r0, r6
 80044ec:	f00f f962 	bl	80137b4 <BTPS_OutputMessage>
      Display(("   Free:                  %5d bytes\r\n", MemoryStatistics.HeapSize - MemoryStatistics.CurrentHeapUsed));
 80044f0:	4d16      	ldr	r5, [pc, #88]	; (800454c <QueryMemory+0x8c>)
 80044f2:	9901      	ldr	r1, [sp, #4]
 80044f4:	9b02      	ldr	r3, [sp, #8]
 80044f6:	1ac9      	subs	r1, r1, r3
 80044f8:	4628      	mov	r0, r5
 80044fa:	f00f f95b 	bl	80137b4 <BTPS_OutputMessage>
      Display(("Maximum Memory Usage:\r\n"));
 80044fe:	4814      	ldr	r0, [pc, #80]	; (8004550 <QueryMemory+0x90>)
 8004500:	f00f f958 	bl	80137b4 <BTPS_OutputMessage>
      Display(("   Used:                  %5d bytes\r\n", MemoryStatistics.MaximumHeapUsed));
 8004504:	9903      	ldr	r1, [sp, #12]
 8004506:	4630      	mov	r0, r6
 8004508:	f00f f954 	bl	80137b4 <BTPS_OutputMessage>
      Display(("   Free:                  %5d bytes\r\n", MemoryStatistics.HeapSize - MemoryStatistics.MaximumHeapUsed));
 800450c:	9901      	ldr	r1, [sp, #4]
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1ac9      	subs	r1, r1, r3
 8004512:	4628      	mov	r0, r5
 8004514:	f00f f94e 	bl	80137b4 <BTPS_OutputMessage>
      Display(("Framentation:\r\n"));
 8004518:	480e      	ldr	r0, [pc, #56]	; (8004554 <QueryMemory+0x94>)
 800451a:	f00f f94b 	bl	80137b4 <BTPS_OutputMessage>
      Display(("   Largest Free Fragment: %5d bytes\r\n", MemoryStatistics.LargestFreeFragment));
 800451e:	9905      	ldr	r1, [sp, #20]
 8004520:	480d      	ldr	r0, [pc, #52]	; (8004558 <QueryMemory+0x98>)
 8004522:	f00f f947 	bl	80137b4 <BTPS_OutputMessage>
      Display(("   Free Fragment Cound:   %5d\r\n",       MemoryStatistics.FreeFragmentCount));
 8004526:	9904      	ldr	r1, [sp, #16]
 8004528:	480c      	ldr	r0, [pc, #48]	; (800455c <QueryMemory+0x9c>)
 800452a:	f00f f943 	bl	80137b4 <BTPS_OutputMessage>
}
 800452e:	4620      	mov	r0, r4
 8004530:	b006      	add	sp, #24
 8004532:	bd70      	pop	{r4, r5, r6, pc}
      Display(("Failed to get memory usage\r\n"));
 8004534:	480a      	ldr	r0, [pc, #40]	; (8004560 <QueryMemory+0xa0>)
 8004536:	f00f f93d 	bl	80137b4 <BTPS_OutputMessage>
   return(ret_val);
 800453a:	e7f8      	b.n	800452e <QueryMemory+0x6e>
 800453c:	0802c380 	.word	0x0802c380
 8004540:	0802d6e0 	.word	0x0802d6e0
 8004544:	0802d708 	.word	0x0802d708
 8004548:	0802d720 	.word	0x0802d720
 800454c:	0802d748 	.word	0x0802d748
 8004550:	0802d770 	.word	0x0802d770
 8004554:	0802d788 	.word	0x0802d788
 8004558:	0802d798 	.word	0x0802d798
 800455c:	0802d7c0 	.word	0x0802d7c0
 8004560:	0802d7e0 	.word	0x0802d7e0

08004564 <ResetEnergyExpended>:
{
 8004564:	b530      	push	{r4, r5, lr}
 8004566:	b087      	sub	sp, #28
   if(!HRSInstanceID)
 8004568:	4b28      	ldr	r3, [pc, #160]	; (800460c <ResetEnergyExpended+0xa8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d146      	bne.n	80045fe <ResetEnergyExpended+0x9a>
      if(ConnectionID)
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <ResetEnergyExpended+0xac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d03c      	beq.n	80045f2 <ResetEnergyExpended+0x8e>
         if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8004578:	4b26      	ldr	r3, [pc, #152]	; (8004614 <ResetEnergyExpended+0xb0>)
 800457a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800457e:	4826      	ldr	r0, [pc, #152]	; (8004618 <ResetEnergyExpended+0xb4>)
 8004580:	f7fe f87e 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004584:	4605      	mov	r5, r0
 8004586:	b370      	cbz	r0, 80045e6 <ResetEnergyExpended+0x82>
            if(DeviceInfo->ClientInfo.Heart_Rate_Control_Point != 0)
 8004588:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800458a:	b32b      	cbz	r3, 80045d8 <ResetEnergyExpended+0x74>
               if((ret_val = HRS_Format_Heart_Rate_Control_Command(ccResetEnergyExpended, HRS_HEART_RATE_CONTROL_POINT_VALUE_LENGTH, CommandBuffer)) == 0)
 800458c:	aa05      	add	r2, sp, #20
 800458e:	2101      	movs	r1, #1
 8004590:	4608      	mov	r0, r1
 8004592:	f002 f97f 	bl	8006894 <HRS_Format_Heart_Rate_Control_Command>
 8004596:	4604      	mov	r4, r0
 8004598:	b9c8      	cbnz	r0, 80045ce <ResetEnergyExpended+0x6a>
                  if((ret_val = GATT_Write_Request(BluetoothStackID, ConnectionID, DeviceInfo->ClientInfo.Heart_Rate_Control_Point, HRS_HEART_RATE_CONTROL_POINT_VALUE_LENGTH, ((void *)CommandBuffer), GATT_ClientEventCallback_HRP, DeviceInfo->ClientInfo.Heart_Rate_Control_Point)) > 0)
 800459a:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
 800459c:	9202      	str	r2, [sp, #8]
 800459e:	4b1f      	ldr	r3, [pc, #124]	; (800461c <ResetEnergyExpended+0xb8>)
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	ab05      	add	r3, sp, #20
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2301      	movs	r3, #1
 80045a8:	4919      	ldr	r1, [pc, #100]	; (8004610 <ResetEnergyExpended+0xac>)
 80045aa:	6809      	ldr	r1, [r1, #0]
 80045ac:	481c      	ldr	r0, [pc, #112]	; (8004620 <ResetEnergyExpended+0xbc>)
 80045ae:	6800      	ldr	r0, [r0, #0]
 80045b0:	f025 fab0 	bl	8029b14 <GATT_Write_Request>
 80045b4:	1e05      	subs	r5, r0, #0
 80045b6:	dd04      	ble.n	80045c2 <ResetEnergyExpended+0x5e>
                     Display(("Reset Energy Expended request sent, Transaction ID = %u.\r\n", ret_val));
 80045b8:	4629      	mov	r1, r5
 80045ba:	481a      	ldr	r0, [pc, #104]	; (8004624 <ResetEnergyExpended+0xc0>)
 80045bc:	f00f f8fa 	bl	80137b4 <BTPS_OutputMessage>
                     ret_val = 0;
 80045c0:	e00e      	b.n	80045e0 <ResetEnergyExpended+0x7c>
                     DisplayFunctionError("GATT_Write_Request", ret_val);
 80045c2:	4629      	mov	r1, r5
 80045c4:	4818      	ldr	r0, [pc, #96]	; (8004628 <ResetEnergyExpended+0xc4>)
 80045c6:	f7fd ffff 	bl	80025c8 <DisplayFunctionError>
                  if((ret_val = GATT_Write_Request(BluetoothStackID, ConnectionID, DeviceInfo->ClientInfo.Heart_Rate_Control_Point, HRS_HEART_RATE_CONTROL_POINT_VALUE_LENGTH, ((void *)CommandBuffer), GATT_ClientEventCallback_HRP, DeviceInfo->ClientInfo.Heart_Rate_Control_Point)) > 0)
 80045ca:	462c      	mov	r4, r5
 80045cc:	e008      	b.n	80045e0 <ResetEnergyExpended+0x7c>
                  DisplayFunctionError("HRS_Format_Heart_Rate_Control_Command", ret_val);
 80045ce:	4601      	mov	r1, r0
 80045d0:	4816      	ldr	r0, [pc, #88]	; (800462c <ResetEnergyExpended+0xc8>)
 80045d2:	f7fd fff9 	bl	80025c8 <DisplayFunctionError>
 80045d6:	e003      	b.n	80045e0 <ResetEnergyExpended+0x7c>
               Display(("Energy Expended not supported on remote service.\r\n"));
 80045d8:	4815      	ldr	r0, [pc, #84]	; (8004630 <ResetEnergyExpended+0xcc>)
 80045da:	f00f f8eb 	bl	80137b4 <BTPS_OutputMessage>
               ret_val = 0;
 80045de:	2400      	movs	r4, #0
}
 80045e0:	4620      	mov	r0, r4
 80045e2:	b007      	add	sp, #28
 80045e4:	bd30      	pop	{r4, r5, pc}
            Display(("Error getting device info.\r\n"));
 80045e6:	4813      	ldr	r0, [pc, #76]	; (8004634 <ResetEnergyExpended+0xd0>)
 80045e8:	f00f f8e4 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 80045ec:	f06f 0403 	mvn.w	r4, #3
 80045f0:	e7f6      	b.n	80045e0 <ResetEnergyExpended+0x7c>
         Display(("Connection is not established.\r\n"));
 80045f2:	4811      	ldr	r0, [pc, #68]	; (8004638 <ResetEnergyExpended+0xd4>)
 80045f4:	f00f f8de 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 80045f8:	f06f 0403 	mvn.w	r4, #3
 80045fc:	e7f0      	b.n	80045e0 <ResetEnergyExpended+0x7c>
      Display(("Cannot reset Energy Expended as a service.\r\n"));
 80045fe:	480f      	ldr	r0, [pc, #60]	; (800463c <ResetEnergyExpended+0xd8>)
 8004600:	f00f f8d8 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004604:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 8004608:	e7ea      	b.n	80045e0 <ResetEnergyExpended+0x7c>
 800460a:	bf00      	nop
 800460c:	200016b8 	.word	0x200016b8
 8004610:	2000168c 	.word	0x2000168c
 8004614:	20001684 	.word	0x20001684
 8004618:	200016b0 	.word	0x200016b0
 800461c:	080030c1 	.word	0x080030c1
 8004620:	20001578 	.word	0x20001578
 8004624:	0802d800 	.word	0x0802d800
 8004628:	0802d83c 	.word	0x0802d83c
 800462c:	0802d850 	.word	0x0802d850
 8004630:	0802d878 	.word	0x0802d878
 8004634:	0802d8ac 	.word	0x0802d8ac
 8004638:	0802d8cc 	.word	0x0802d8cc
 800463c:	0802d8f0 	.word	0x0802d8f0

08004640 <EnableDisableNotificationsIndications>:
{
 8004640:	b510      	push	{r4, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	4604      	mov	r4, r0
 8004646:	460b      	mov	r3, r1
   if((BluetoothStackID) && (ConnectionID) && (ClientConfigurationHandle))
 8004648:	490f      	ldr	r1, [pc, #60]	; (8004688 <EnableDisableNotificationsIndications+0x48>)
 800464a:	6808      	ldr	r0, [r1, #0]
 800464c:	b190      	cbz	r0, 8004674 <EnableDisableNotificationsIndications+0x34>
 800464e:	490f      	ldr	r1, [pc, #60]	; (800468c <EnableDisableNotificationsIndications+0x4c>)
 8004650:	6809      	ldr	r1, [r1, #0]
 8004652:	b191      	cbz	r1, 800467a <EnableDisableNotificationsIndications+0x3a>
 8004654:	b1a4      	cbz	r4, 8004680 <EnableDisableNotificationsIndications+0x40>
      ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&Buffer, ClientConfigurationValue);
 8004656:	f88d 3014 	strb.w	r3, [sp, #20]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	f88d 3015 	strb.w	r3, [sp, #21]
      ret_val = GATT_Write_Request(BluetoothStackID, ConnectionID, ClientConfigurationHandle, sizeof(Buffer), &Buffer, ClientEventCallback, ClientConfigurationHandle);
 8004660:	9402      	str	r4, [sp, #8]
 8004662:	9201      	str	r2, [sp, #4]
 8004664:	ab05      	add	r3, sp, #20
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	2302      	movs	r3, #2
 800466a:	4622      	mov	r2, r4
 800466c:	f025 fa52 	bl	8029b14 <GATT_Write_Request>
}
 8004670:	b006      	add	sp, #24
 8004672:	bd10      	pop	{r4, pc}
      ret_val = BTPS_ERROR_INVALID_PARAMETER;
 8004674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004678:	e7fa      	b.n	8004670 <EnableDisableNotificationsIndications+0x30>
 800467a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800467e:	e7f7      	b.n	8004670 <EnableDisableNotificationsIndications+0x30>
 8004680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   return(ret_val);
 8004684:	e7f4      	b.n	8004670 <EnableDisableNotificationsIndications+0x30>
 8004686:	bf00      	nop
 8004688:	20001578 	.word	0x20001578
 800468c:	2000168c 	.word	0x2000168c

08004690 <ConfigureRemoteHRS>:
{
 8004690:	b538      	push	{r3, r4, r5, lr}
   if(TempParam && (TempParam->NumberofParameters > 0))
 8004692:	2800      	cmp	r0, #0
 8004694:	d051      	beq.n	800473a <ConfigureRemoteHRS+0xaa>
 8004696:	4605      	mov	r5, r0
 8004698:	6803      	ldr	r3, [r0, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd4d      	ble.n	800473a <ConfigureRemoteHRS+0xaa>
      if(!HRSInstanceID)
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <ConfigureRemoteHRS+0xb8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d143      	bne.n	800472e <ConfigureRemoteHRS+0x9e>
         if(ConnectionID)
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <ConfigureRemoteHRS+0xbc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d039      	beq.n	8004722 <ConfigureRemoteHRS+0x92>
            if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 80046ae:	4b28      	ldr	r3, [pc, #160]	; (8004750 <ConfigureRemoteHRS+0xc0>)
 80046b0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80046b4:	4827      	ldr	r0, [pc, #156]	; (8004754 <ConfigureRemoteHRS+0xc4>)
 80046b6:	f7fd ffe3 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 80046ba:	4604      	mov	r4, r0
 80046bc:	b358      	cbz	r0, 8004716 <ConfigureRemoteHRS+0x86>
               if(DeviceInfo->Flags & DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_COMPLETE)
 80046be:	7803      	ldrb	r3, [r0, #0]
 80046c0:	f013 0f04 	tst.w	r3, #4
 80046c4:	d021      	beq.n	800470a <ConfigureRemoteHRS+0x7a>
                  Display(("Attempting to configure CCCDs...\r\n"));
 80046c6:	4824      	ldr	r0, [pc, #144]	; (8004758 <ConfigureRemoteHRS+0xc8>)
 80046c8:	f00f f874 	bl	80137b4 <BTPS_OutputMessage>
                  if(DeviceInfo->ClientInfo.Heart_Rate_Measurement_Client_Configuration)
 80046cc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80046ce:	b168      	cbz	r0, 80046ec <ConfigureRemoteHRS+0x5c>
                     ret_val = EnableDisableNotificationsIndications(DeviceInfo->ClientInfo.Heart_Rate_Measurement_Client_Configuration, (TempParam->Params[0].intParam ? GATT_CLIENT_CONFIGURATION_CHARACTERISTIC_NOTIFY_ENABLE : 0), GATT_ClientEventCallback_HRP);
 80046d0:	68a9      	ldr	r1, [r5, #8]
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <ConfigureRemoteHRS+0xcc>)
 80046d4:	3900      	subs	r1, #0
 80046d6:	bf18      	it	ne
 80046d8:	2101      	movne	r1, #1
 80046da:	f7ff ffb1 	bl	8004640 <EnableDisableNotificationsIndications>
                  if(ret_val > 0)
 80046de:	1e01      	subs	r1, r0, #0
 80046e0:	dd08      	ble.n	80046f4 <ConfigureRemoteHRS+0x64>
                     Display(("CCCD Configuration Success.\r\n"));
 80046e2:	481f      	ldr	r0, [pc, #124]	; (8004760 <ConfigureRemoteHRS+0xd0>)
 80046e4:	f00f f866 	bl	80137b4 <BTPS_OutputMessage>
                     ret_val = 0;
 80046e8:	2000      	movs	r0, #0
 80046ea:	e007      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
                     Display(("   Error - Heart Rate Measurment CC not found on this device.\r\n"));
 80046ec:	481d      	ldr	r0, [pc, #116]	; (8004764 <ConfigureRemoteHRS+0xd4>)
 80046ee:	f00f f861 	bl	80137b4 <BTPS_OutputMessage>
                  ret_val = 0;
 80046f2:	2100      	movs	r1, #0
                     if(ret_val < 0)
 80046f4:	2900      	cmp	r1, #0
 80046f6:	db02      	blt.n	80046fe <ConfigureRemoteHRS+0x6e>
                     ret_val = FUNCTION_ERROR;
 80046f8:	f06f 0003 	mvn.w	r0, #3
}
 80046fc:	bd38      	pop	{r3, r4, r5, pc}
                        DisplayFunctionError("EnableDisableNotificationsIndications", ret_val);
 80046fe:	481a      	ldr	r0, [pc, #104]	; (8004768 <ConfigureRemoteHRS+0xd8>)
 8004700:	f7fd ff62 	bl	80025c8 <DisplayFunctionError>
                     ret_val = FUNCTION_ERROR;
 8004704:	f06f 0003 	mvn.w	r0, #3
 8004708:	e7f8      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
                  Display(("Service discovery has not been performed on this device.\r\n"));
 800470a:	4818      	ldr	r0, [pc, #96]	; (800476c <ConfigureRemoteHRS+0xdc>)
 800470c:	f00f f852 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004710:	f06f 0003 	mvn.w	r0, #3
 8004714:	e7f2      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
               Display(("No Device Info.\r\n"));
 8004716:	4816      	ldr	r0, [pc, #88]	; (8004770 <ConfigureRemoteHRS+0xe0>)
 8004718:	f00f f84c 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 800471c:	f06f 0003 	mvn.w	r0, #3
 8004720:	e7ec      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
            Display(("No Connection Established.\r\n"));
 8004722:	4814      	ldr	r0, [pc, #80]	; (8004774 <ConfigureRemoteHRS+0xe4>)
 8004724:	f00f f846 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004728:	f06f 0003 	mvn.w	r0, #3
 800472c:	e7e6      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
         Display(("Cannot configure remote HRP Services when registered as a service.\r\n"));
 800472e:	4812      	ldr	r0, [pc, #72]	; (8004778 <ConfigureRemoteHRS+0xe8>)
 8004730:	f00f f840 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004734:	f06f 0003 	mvn.w	r0, #3
 8004738:	e7e0      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
      DisplayUsage("ConfigureRemoteHRS [Heart Rate Notify (0 = disable, 1 = enable)]");
 800473a:	4810      	ldr	r0, [pc, #64]	; (800477c <ConfigureRemoteHRS+0xec>)
 800473c:	f7fd fd0a 	bl	8002154 <DisplayUsage>
   int           ret_val = FUNCTION_ERROR;
 8004740:	f06f 0003 	mvn.w	r0, #3
 8004744:	e7da      	b.n	80046fc <ConfigureRemoteHRS+0x6c>
 8004746:	bf00      	nop
 8004748:	200016b8 	.word	0x200016b8
 800474c:	2000168c 	.word	0x2000168c
 8004750:	20001684 	.word	0x20001684
 8004754:	200016b0 	.word	0x200016b0
 8004758:	0802d920 	.word	0x0802d920
 800475c:	080030c1 	.word	0x080030c1
 8004760:	0802d984 	.word	0x0802d984
 8004764:	0802d944 	.word	0x0802d944
 8004768:	0802d9a4 	.word	0x0802d9a4
 800476c:	0802d9cc 	.word	0x0802d9cc
 8004770:	0802da08 	.word	0x0802da08
 8004774:	0802da1c 	.word	0x0802da1c
 8004778:	0802da3c 	.word	0x0802da3c
 800477c:	0802da84 	.word	0x0802da84

08004780 <SetBodySensorLocation>:
{
 8004780:	b538      	push	{r3, r4, r5, lr}
   if(HRSInstanceID)
 8004782:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <SetBodySensorLocation+0xb8>)
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	2900      	cmp	r1, #0
 8004788:	d045      	beq.n	8004816 <SetBodySensorLocation+0x96>
 800478a:	4604      	mov	r4, r0
      if((TempParam) && (TempParam->NumberofParameters > 0))
 800478c:	b358      	cbz	r0, 80047e6 <SetBodySensorLocation+0x66>
 800478e:	6803      	ldr	r3, [r0, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	dd28      	ble.n	80047e6 <SetBodySensorLocation+0x66>
         if(HRS_BODY_SENSOR_LOCATION_VALID_TEMPERATURE_TYPE((Byte_t)TempParam->Params[0].intParam))
 8004794:	7a02      	ldrb	r2, [r0, #8]
 8004796:	2a06      	cmp	r2, #6
 8004798:	d813      	bhi.n	80047c2 <SetBodySensorLocation+0x42>
            if(HRS_Set_Body_Sensor_Location(BluetoothStackID, HRSInstanceID, (Byte_t)TempParam->Params[0].intParam) == 0)
 800479a:	4b28      	ldr	r3, [pc, #160]	; (800483c <SetBodySensorLocation+0xbc>)
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	f001 ff6d 	bl	800667c <HRS_Set_Body_Sensor_Location>
 80047a2:	4605      	mov	r5, r0
 80047a4:	b938      	cbnz	r0, 80047b6 <SetBodySensorLocation+0x36>
               Display(("Body Sensor Location successfully set to %s.\r\n", SensorLocationTable[TempParam->Params[0].intParam]));
 80047a6:	68a2      	ldr	r2, [r4, #8]
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <SetBodySensorLocation+0xc0>)
 80047aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047ae:	4825      	ldr	r0, [pc, #148]	; (8004844 <SetBodySensorLocation+0xc4>)
 80047b0:	f00f f800 	bl	80137b4 <BTPS_OutputMessage>
               ret_val = 0;
 80047b4:	e037      	b.n	8004826 <SetBodySensorLocation+0xa6>
               Display(("Error - HRS_Set_Body_Sensor_Location Failed.\r\n"));
 80047b6:	4824      	ldr	r0, [pc, #144]	; (8004848 <SetBodySensorLocation+0xc8>)
 80047b8:	f00e fffc 	bl	80137b4 <BTPS_OutputMessage>
   int ret_val = FUNCTION_ERROR;
 80047bc:	f06f 0503 	mvn.w	r5, #3
 80047c0:	e031      	b.n	8004826 <SetBodySensorLocation+0xa6>
            Display(("Invalid body sensor location. Valid locations are:\r\n"));
 80047c2:	4822      	ldr	r0, [pc, #136]	; (800484c <SetBodySensorLocation+0xcc>)
 80047c4:	f00e fff6 	bl	80137b4 <BTPS_OutputMessage>
            for(i = 0; i < NUM_SUPPORTED_SENSOR_LOCATIONS; i++)
 80047c8:	2400      	movs	r4, #0
 80047ca:	e007      	b.n	80047dc <SetBodySensorLocation+0x5c>
               Display(("   %d - %s\r\n", i, SensorLocationTable[i]));
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <SetBodySensorLocation+0xc0>)
 80047ce:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80047d2:	4621      	mov	r1, r4
 80047d4:	481e      	ldr	r0, [pc, #120]	; (8004850 <SetBodySensorLocation+0xd0>)
 80047d6:	f00e ffed 	bl	80137b4 <BTPS_OutputMessage>
            for(i = 0; i < NUM_SUPPORTED_SENSOR_LOCATIONS; i++)
 80047da:	3401      	adds	r4, #1
 80047dc:	2c06      	cmp	r4, #6
 80047de:	d9f5      	bls.n	80047cc <SetBodySensorLocation+0x4c>
   int ret_val = FUNCTION_ERROR;
 80047e0:	f06f 0503 	mvn.w	r5, #3
 80047e4:	e01f      	b.n	8004826 <SetBodySensorLocation+0xa6>
         DisplayUsage("SetBodySensorLocation [Type]");
 80047e6:	481b      	ldr	r0, [pc, #108]	; (8004854 <SetBodySensorLocation+0xd4>)
 80047e8:	f7fd fcb4 	bl	8002154 <DisplayUsage>
         Display(("Where Type =\r\n"));
 80047ec:	481a      	ldr	r0, [pc, #104]	; (8004858 <SetBodySensorLocation+0xd8>)
 80047ee:	f00e ffe1 	bl	80137b4 <BTPS_OutputMessage>
         for(i = 0; i < NUM_SUPPORTED_SENSOR_LOCATIONS; i++)
 80047f2:	2400      	movs	r4, #0
 80047f4:	e007      	b.n	8004806 <SetBodySensorLocation+0x86>
            Display(("   %d - %s\r\n", i, SensorLocationTable[i]));
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <SetBodySensorLocation+0xc0>)
 80047f8:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80047fc:	4621      	mov	r1, r4
 80047fe:	4814      	ldr	r0, [pc, #80]	; (8004850 <SetBodySensorLocation+0xd0>)
 8004800:	f00e ffd8 	bl	80137b4 <BTPS_OutputMessage>
         for(i = 0; i < NUM_SUPPORTED_SENSOR_LOCATIONS; i++)
 8004804:	3401      	adds	r4, #1
 8004806:	2c06      	cmp	r4, #6
 8004808:	d9f5      	bls.n	80047f6 <SetBodySensorLocation+0x76>
         Display(("\r\n"));
 800480a:	4814      	ldr	r0, [pc, #80]	; (800485c <SetBodySensorLocation+0xdc>)
 800480c:	f00e ffd2 	bl	80137b4 <BTPS_OutputMessage>
   int ret_val = FUNCTION_ERROR;
 8004810:	f06f 0503 	mvn.w	r5, #3
 8004814:	e007      	b.n	8004826 <SetBodySensorLocation+0xa6>
      if(ConnectionID)
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <SetBodySensorLocation+0xe0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b133      	cbz	r3, 800482a <SetBodySensorLocation+0xaa>
         Display(("Cannot write to body sensor location as a client.\r\n"));
 800481c:	4811      	ldr	r0, [pc, #68]	; (8004864 <SetBodySensorLocation+0xe4>)
 800481e:	f00e ffc9 	bl	80137b4 <BTPS_OutputMessage>
   int ret_val = FUNCTION_ERROR;
 8004822:	f06f 0503 	mvn.w	r5, #3
}
 8004826:	4628      	mov	r0, r5
 8004828:	bd38      	pop	{r3, r4, r5, pc}
         Display(("HRP server not registered\r\n"));
 800482a:	480f      	ldr	r0, [pc, #60]	; (8004868 <SetBodySensorLocation+0xe8>)
 800482c:	f00e ffc2 	bl	80137b4 <BTPS_OutputMessage>
   int ret_val = FUNCTION_ERROR;
 8004830:	f06f 0503 	mvn.w	r5, #3
   return(ret_val);
 8004834:	e7f7      	b.n	8004826 <SetBodySensorLocation+0xa6>
 8004836:	bf00      	nop
 8004838:	200016b8 	.word	0x200016b8
 800483c:	20001578 	.word	0x20001578
 8004840:	0802f2d8 	.word	0x0802f2d8
 8004844:	0802dac8 	.word	0x0802dac8
 8004848:	0802daf8 	.word	0x0802daf8
 800484c:	0802db28 	.word	0x0802db28
 8004850:	0802db60 	.word	0x0802db60
 8004854:	0802db70 	.word	0x0802db70
 8004858:	0802db90 	.word	0x0802db90
 800485c:	0802c380 	.word	0x0802c380
 8004860:	2000168c 	.word	0x2000168c
 8004864:	0802dba0 	.word	0x0802dba0
 8004868:	0802dbd4 	.word	0x0802dbd4

0800486c <GetBodySensorLocation>:
{
 800486c:	b510      	push	{r4, lr}
 800486e:	b084      	sub	sp, #16
   if(HRSInstanceID)
 8004870:	4b28      	ldr	r3, [pc, #160]	; (8004914 <GetBodySensorLocation+0xa8>)
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	b9f9      	cbnz	r1, 80048b6 <GetBodySensorLocation+0x4a>
      if(ConnectionID)
 8004876:	4b28      	ldr	r3, [pc, #160]	; (8004918 <GetBodySensorLocation+0xac>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d044      	beq.n	8004908 <GetBodySensorLocation+0x9c>
         if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 800487e:	4b27      	ldr	r3, [pc, #156]	; (800491c <GetBodySensorLocation+0xb0>)
 8004880:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004884:	4826      	ldr	r0, [pc, #152]	; (8004920 <GetBodySensorLocation+0xb4>)
 8004886:	f7fd fefb 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 800488a:	2800      	cmp	r0, #0
 800488c:	d036      	beq.n	80048fc <GetBodySensorLocation+0x90>
            if(DeviceInfo->ClientInfo.Body_Sensor_Location != 0)
 800488e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8004890:	b372      	cbz	r2, 80048f0 <GetBodySensorLocation+0x84>
               if((ret_val = GATT_Read_Value_Request(BluetoothStackID, ConnectionID, DeviceInfo->ClientInfo.Body_Sensor_Location, GATT_ClientEventCallback_HRP, DeviceInfo->ClientInfo.Body_Sensor_Location)) > 0)
 8004892:	9200      	str	r2, [sp, #0]
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <GetBodySensorLocation+0xb8>)
 8004896:	4920      	ldr	r1, [pc, #128]	; (8004918 <GetBodySensorLocation+0xac>)
 8004898:	6809      	ldr	r1, [r1, #0]
 800489a:	4823      	ldr	r0, [pc, #140]	; (8004928 <GetBodySensorLocation+0xbc>)
 800489c:	6800      	ldr	r0, [r0, #0]
 800489e:	f025 f811 	bl	80298c4 <GATT_Read_Value_Request>
 80048a2:	1e04      	subs	r4, r0, #0
 80048a4:	dd1f      	ble.n	80048e6 <GetBodySensorLocation+0x7a>
                  Display(("Get Temperature Type Request sent, Transaction ID = %u", ret_val));
 80048a6:	4621      	mov	r1, r4
 80048a8:	4820      	ldr	r0, [pc, #128]	; (800492c <GetBodySensorLocation+0xc0>)
 80048aa:	f00e ff83 	bl	80137b4 <BTPS_OutputMessage>
                  ret_val = 0;
 80048ae:	2400      	movs	r4, #0
}
 80048b0:	4620      	mov	r0, r4
 80048b2:	b004      	add	sp, #16
 80048b4:	bd10      	pop	{r4, pc}
      if(((ret_val = HRS_Query_Body_Sensor_Location(BluetoothStackID, HRSInstanceID, &location)) == 0) && (HRS_BODY_SENSOR_LOCATION_VALID_TEMPERATURE_TYPE((Byte_t)location)))
 80048b6:	f10d 020f 	add.w	r2, sp, #15
 80048ba:	4b1b      	ldr	r3, [pc, #108]	; (8004928 <GetBodySensorLocation+0xbc>)
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	f001 ff01 	bl	80066c4 <HRS_Query_Body_Sensor_Location>
 80048c2:	4604      	mov	r4, r0
 80048c4:	b918      	cbnz	r0, 80048ce <GetBodySensorLocation+0x62>
 80048c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d904      	bls.n	80048d8 <GetBodySensorLocation+0x6c>
         DisplayFunctionError("HRS_Query_Body_Sensor_Location", ret_val);
 80048ce:	4621      	mov	r1, r4
 80048d0:	4817      	ldr	r0, [pc, #92]	; (8004930 <GetBodySensorLocation+0xc4>)
 80048d2:	f7fd fe79 	bl	80025c8 <DisplayFunctionError>
 80048d6:	e7eb      	b.n	80048b0 <GetBodySensorLocation+0x44>
         Display(("Location: '%s'.\r\n", SensorLocationTable[location]));
 80048d8:	4a16      	ldr	r2, [pc, #88]	; (8004934 <GetBodySensorLocation+0xc8>)
 80048da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048de:	4816      	ldr	r0, [pc, #88]	; (8004938 <GetBodySensorLocation+0xcc>)
 80048e0:	f00e ff68 	bl	80137b4 <BTPS_OutputMessage>
 80048e4:	e7e4      	b.n	80048b0 <GetBodySensorLocation+0x44>
                  DisplayFunctionError("GATT_Read_Value_Request", ret_val);
 80048e6:	4621      	mov	r1, r4
 80048e8:	4814      	ldr	r0, [pc, #80]	; (800493c <GetBodySensorLocation+0xd0>)
 80048ea:	f7fd fe6d 	bl	80025c8 <DisplayFunctionError>
 80048ee:	e7df      	b.n	80048b0 <GetBodySensorLocation+0x44>
               Display(("Body Sensor Location not supported on remote service.\r\n"));
 80048f0:	4813      	ldr	r0, [pc, #76]	; (8004940 <GetBodySensorLocation+0xd4>)
 80048f2:	f00e ff5f 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 80048f6:	f06f 0403 	mvn.w	r4, #3
 80048fa:	e7d9      	b.n	80048b0 <GetBodySensorLocation+0x44>
            Display(("No Device Info.\r\n"));
 80048fc:	4811      	ldr	r0, [pc, #68]	; (8004944 <GetBodySensorLocation+0xd8>)
 80048fe:	f00e ff59 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004902:	f06f 0403 	mvn.w	r4, #3
 8004906:	e7d3      	b.n	80048b0 <GetBodySensorLocation+0x44>
         Display(("Either a HRP server must be registered or a HRP client must be connected.\r\n"));
 8004908:	480f      	ldr	r0, [pc, #60]	; (8004948 <GetBodySensorLocation+0xdc>)
 800490a:	f00e ff53 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 800490e:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 8004912:	e7cd      	b.n	80048b0 <GetBodySensorLocation+0x44>
 8004914:	200016b8 	.word	0x200016b8
 8004918:	2000168c 	.word	0x2000168c
 800491c:	20001684 	.word	0x20001684
 8004920:	200016b0 	.word	0x200016b0
 8004924:	080030c1 	.word	0x080030c1
 8004928:	20001578 	.word	0x20001578
 800492c:	0802dc24 	.word	0x0802dc24
 8004930:	0802dc04 	.word	0x0802dc04
 8004934:	0802f2d8 	.word	0x0802f2d8
 8004938:	0802dbf0 	.word	0x0802dbf0
 800493c:	0802dc5c 	.word	0x0802dc5c
 8004940:	0802dc74 	.word	0x0802dc74
 8004944:	0802da08 	.word	0x0802da08
 8004948:	0802dcac 	.word	0x0802dcac

0800494c <GetRemoteAppearance>:
{
 800494c:	b500      	push	{lr}
 800494e:	b083      	sub	sp, #12
   if(ConnectionID)
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <GetRemoteAppearance+0x70>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	b363      	cbz	r3, 80049b0 <GetRemoteAppearance+0x64>
      if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8004956:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <GetRemoteAppearance+0x74>)
 8004958:	e893 0006 	ldmia.w	r3, {r1, r2}
 800495c:	4819      	ldr	r0, [pc, #100]	; (80049c4 <GetRemoteAppearance+0x78>)
 800495e:	f7fd fe8f 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004962:	b1f8      	cbz	r0, 80049a4 <GetRemoteAppearance+0x58>
         if(DeviceInfo->GAPSClientInfo.DeviceAppearanceHandle)
 8004964:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8004966:	b1ba      	cbz	r2, 8004998 <GetRemoteAppearance+0x4c>
            ret_val = GATT_Read_Value_Request(BluetoothStackID, ConnectionID, DeviceInfo->GAPSClientInfo.DeviceAppearanceHandle, GATT_ClientEventCallback_GAPS, (unsigned long)DeviceInfo->GAPSClientInfo.DeviceAppearanceHandle);
 8004968:	9200      	str	r2, [sp, #0]
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <GetRemoteAppearance+0x7c>)
 800496c:	4913      	ldr	r1, [pc, #76]	; (80049bc <GetRemoteAppearance+0x70>)
 800496e:	6809      	ldr	r1, [r1, #0]
 8004970:	4816      	ldr	r0, [pc, #88]	; (80049cc <GetRemoteAppearance+0x80>)
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	f024 ffa6 	bl	80298c4 <GATT_Read_Value_Request>
            if(ret_val > 0)
 8004978:	2800      	cmp	r0, #0
 800497a:	dd06      	ble.n	800498a <GetRemoteAppearance+0x3e>
               Display(("Attempting to read Remote Device Appearance.\r\n"));
 800497c:	4814      	ldr	r0, [pc, #80]	; (80049d0 <GetRemoteAppearance+0x84>)
 800497e:	f00e ff19 	bl	80137b4 <BTPS_OutputMessage>
               ret_val = 0;
 8004982:	2000      	movs	r0, #0
}
 8004984:	b003      	add	sp, #12
 8004986:	f85d fb04 	ldr.w	pc, [sp], #4
               DisplayFunctionError("GATT_Read_Value_Request", ret_val);
 800498a:	4601      	mov	r1, r0
 800498c:	4811      	ldr	r0, [pc, #68]	; (80049d4 <GetRemoteAppearance+0x88>)
 800498e:	f7fd fe1b 	bl	80025c8 <DisplayFunctionError>
               ret_val = FUNCTION_ERROR;
 8004992:	f06f 0003 	mvn.w	r0, #3
 8004996:	e7f5      	b.n	8004984 <GetRemoteAppearance+0x38>
            Display(("GAP Service Device Appearance Handle not discovered.\r\n"));
 8004998:	480f      	ldr	r0, [pc, #60]	; (80049d8 <GetRemoteAppearance+0x8c>)
 800499a:	f00e ff0b 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = FUNCTION_ERROR;
 800499e:	f06f 0003 	mvn.w	r0, #3
 80049a2:	e7ef      	b.n	8004984 <GetRemoteAppearance+0x38>
         Display(("No Device Info.\r\n"));
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <GetRemoteAppearance+0x90>)
 80049a6:	f00e ff05 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 80049aa:	f06f 0003 	mvn.w	r0, #3
 80049ae:	e7e9      	b.n	8004984 <GetRemoteAppearance+0x38>
      Display(("No Connection Established\r\n"));
 80049b0:	480b      	ldr	r0, [pc, #44]	; (80049e0 <GetRemoteAppearance+0x94>)
 80049b2:	f00e feff 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = FUNCTION_ERROR;
 80049b6:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 80049ba:	e7e3      	b.n	8004984 <GetRemoteAppearance+0x38>
 80049bc:	2000168c 	.word	0x2000168c
 80049c0:	20001684 	.word	0x20001684
 80049c4:	200016b0 	.word	0x200016b0
 80049c8:	0800348d 	.word	0x0800348d
 80049cc:	20001578 	.word	0x20001578
 80049d0:	0802dcf8 	.word	0x0802dcf8
 80049d4:	0802dc5c 	.word	0x0802dc5c
 80049d8:	0802dd28 	.word	0x0802dd28
 80049dc:	0802da08 	.word	0x0802da08
 80049e0:	0802dd60 	.word	0x0802dd60

080049e4 <ReadRemoteName>:
{
 80049e4:	b500      	push	{lr}
 80049e6:	b083      	sub	sp, #12
   if(ConnectionID)
 80049e8:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <ReadRemoteName+0x70>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b363      	cbz	r3, 8004a48 <ReadRemoteName+0x64>
      if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 80049ee:	4b1a      	ldr	r3, [pc, #104]	; (8004a58 <ReadRemoteName+0x74>)
 80049f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80049f4:	4819      	ldr	r0, [pc, #100]	; (8004a5c <ReadRemoteName+0x78>)
 80049f6:	f7fd fe43 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 80049fa:	b1f8      	cbz	r0, 8004a3c <ReadRemoteName+0x58>
         if(DeviceInfo->GAPSClientInfo.DeviceNameHandle)
 80049fc:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80049fe:	b1ba      	cbz	r2, 8004a30 <ReadRemoteName+0x4c>
            ret_val = GATT_Read_Value_Request(BluetoothStackID, ConnectionID, DeviceInfo->GAPSClientInfo.DeviceNameHandle, GATT_ClientEventCallback_GAPS, (unsigned long)DeviceInfo->GAPSClientInfo.DeviceNameHandle);
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <ReadRemoteName+0x7c>)
 8004a04:	4913      	ldr	r1, [pc, #76]	; (8004a54 <ReadRemoteName+0x70>)
 8004a06:	6809      	ldr	r1, [r1, #0]
 8004a08:	4816      	ldr	r0, [pc, #88]	; (8004a64 <ReadRemoteName+0x80>)
 8004a0a:	6800      	ldr	r0, [r0, #0]
 8004a0c:	f024 ff5a 	bl	80298c4 <GATT_Read_Value_Request>
            if(ret_val > 0)
 8004a10:	2800      	cmp	r0, #0
 8004a12:	dd06      	ble.n	8004a22 <ReadRemoteName+0x3e>
               Display(("Attempting to read Remote Device Name.\r\n"));
 8004a14:	4814      	ldr	r0, [pc, #80]	; (8004a68 <ReadRemoteName+0x84>)
 8004a16:	f00e fecd 	bl	80137b4 <BTPS_OutputMessage>
               ret_val = 0;
 8004a1a:	2000      	movs	r0, #0
}
 8004a1c:	b003      	add	sp, #12
 8004a1e:	f85d fb04 	ldr.w	pc, [sp], #4
               DisplayFunctionError("GATT_Read_Value_Request", ret_val);
 8004a22:	4601      	mov	r1, r0
 8004a24:	4811      	ldr	r0, [pc, #68]	; (8004a6c <ReadRemoteName+0x88>)
 8004a26:	f7fd fdcf 	bl	80025c8 <DisplayFunctionError>
               ret_val = FUNCTION_ERROR;
 8004a2a:	f06f 0003 	mvn.w	r0, #3
 8004a2e:	e7f5      	b.n	8004a1c <ReadRemoteName+0x38>
            Display(("GAP Service Device Name Handle not discovered.\r\n"));
 8004a30:	480f      	ldr	r0, [pc, #60]	; (8004a70 <ReadRemoteName+0x8c>)
 8004a32:	f00e febf 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = FUNCTION_ERROR;
 8004a36:	f06f 0003 	mvn.w	r0, #3
 8004a3a:	e7ef      	b.n	8004a1c <ReadRemoteName+0x38>
         Display(("No Device Info.\r\n"));
 8004a3c:	480d      	ldr	r0, [pc, #52]	; (8004a74 <ReadRemoteName+0x90>)
 8004a3e:	f00e feb9 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 8004a42:	f06f 0003 	mvn.w	r0, #3
 8004a46:	e7e9      	b.n	8004a1c <ReadRemoteName+0x38>
      Display(("No Connection Established\r\n"));
 8004a48:	480b      	ldr	r0, [pc, #44]	; (8004a78 <ReadRemoteName+0x94>)
 8004a4a:	f00e feb3 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = FUNCTION_ERROR;
 8004a4e:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 8004a52:	e7e3      	b.n	8004a1c <ReadRemoteName+0x38>
 8004a54:	2000168c 	.word	0x2000168c
 8004a58:	20001684 	.word	0x20001684
 8004a5c:	200016b0 	.word	0x200016b0
 8004a60:	0800348d 	.word	0x0800348d
 8004a64:	20001578 	.word	0x20001578
 8004a68:	0802dd7c 	.word	0x0802dd7c
 8004a6c:	0802dc5c 	.word	0x0802dc5c
 8004a70:	0802dda8 	.word	0x0802dda8
 8004a74:	0802da08 	.word	0x0802da08
 8004a78:	0802dd60 	.word	0x0802dd60

08004a7c <DiscoverHRS>:
{
 8004a7c:	b530      	push	{r4, r5, lr}
 8004a7e:	b089      	sub	sp, #36	; 0x24
   if(!HRSInstanceID)
 8004a80:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <DiscoverHRS+0xa8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d146      	bne.n	8004b16 <DiscoverHRS+0x9a>
      if(ConnectionID)
 8004a88:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <DiscoverHRS+0xac>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d03c      	beq.n	8004b0a <DiscoverHRS+0x8e>
         if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <DiscoverHRS+0xb0>)
 8004a92:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004a96:	4826      	ldr	r0, [pc, #152]	; (8004b30 <DiscoverHRS+0xb4>)
 8004a98:	f7fd fdf2 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	b370      	cbz	r0, 8004afe <DiscoverHRS+0x82>
            if(!(DeviceInfo->Flags & DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_OUTSTANDING))
 8004aa0:	7803      	ldrb	r3, [r0, #0]
 8004aa2:	f013 0f02 	tst.w	r3, #2
 8004aa6:	d124      	bne.n	8004af2 <DiscoverHRS+0x76>
               UUID[0].UUID_Type = guUUID_16;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f88d 300c 	strb.w	r3, [sp, #12]
               HRS_ASSIGN_HRS_SERVICE_UUID_16(&(UUID[0].UUID.UUID_16));
 8004aae:	230d      	movs	r3, #13
 8004ab0:	f88d 300d 	strb.w	r3, [sp, #13]
 8004ab4:	2318      	movs	r3, #24
 8004ab6:	f88d 300e 	strb.w	r3, [sp, #14]
               ret_val = GATT_Start_Service_Discovery(BluetoothStackID, ConnectionID, (sizeof(UUID)/sizeof(GATT_UUID_t)), UUID, GATT_Service_Discovery_Event_Callback, sdHRS);
 8004aba:	2201      	movs	r2, #1
 8004abc:	9201      	str	r2, [sp, #4]
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <DiscoverHRS+0xb8>)
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	ab03      	add	r3, sp, #12
 8004ac4:	4918      	ldr	r1, [pc, #96]	; (8004b28 <DiscoverHRS+0xac>)
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	481b      	ldr	r0, [pc, #108]	; (8004b38 <DiscoverHRS+0xbc>)
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	f024 ffbe 	bl	8029a4c <GATT_Start_Service_Discovery>
               if(!ret_val)
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	b948      	cbnz	r0, 8004ae8 <DiscoverHRS+0x6c>
                  Display(("GATT_Start_Service_Discovery success.\r\n"));
 8004ad4:	4819      	ldr	r0, [pc, #100]	; (8004b3c <DiscoverHRS+0xc0>)
 8004ad6:	f00e fe6d 	bl	80137b4 <BTPS_OutputMessage>
                  DeviceInfo->Flags |= DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_OUTSTANDING;
 8004ada:	7823      	ldrb	r3, [r4, #0]
 8004adc:	f043 0302 	orr.w	r3, r3, #2
 8004ae0:	7023      	strb	r3, [r4, #0]
}
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	b009      	add	sp, #36	; 0x24
 8004ae6:	bd30      	pop	{r4, r5, pc}
                  DisplayFunctionError("GATT_Start_Service_Discovery", ret_val);
 8004ae8:	4601      	mov	r1, r0
 8004aea:	4815      	ldr	r0, [pc, #84]	; (8004b40 <DiscoverHRS+0xc4>)
 8004aec:	f7fd fd6c 	bl	80025c8 <DisplayFunctionError>
 8004af0:	e7f7      	b.n	8004ae2 <DiscoverHRS+0x66>
               Display(("Service Discovery Operation Outsanding for Device.\r\n"));
 8004af2:	4814      	ldr	r0, [pc, #80]	; (8004b44 <DiscoverHRS+0xc8>)
 8004af4:	f00e fe5e 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004af8:	f06f 0503 	mvn.w	r5, #3
 8004afc:	e7f1      	b.n	8004ae2 <DiscoverHRS+0x66>
            Display(("No Device Info.\r\n"));
 8004afe:	4812      	ldr	r0, [pc, #72]	; (8004b48 <DiscoverHRS+0xcc>)
 8004b00:	f00e fe58 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004b04:	f06f 0503 	mvn.w	r5, #3
 8004b08:	e7eb      	b.n	8004ae2 <DiscoverHRS+0x66>
         Display(("No Connection Established\r\n"));
 8004b0a:	4810      	ldr	r0, [pc, #64]	; (8004b4c <DiscoverHRS+0xd0>)
 8004b0c:	f00e fe52 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004b10:	f06f 0503 	mvn.w	r5, #3
 8004b14:	e7e5      	b.n	8004ae2 <DiscoverHRS+0x66>
      Display(("Cannot discover HRP Services when registered as a service.\r\n"));
 8004b16:	480e      	ldr	r0, [pc, #56]	; (8004b50 <DiscoverHRS+0xd4>)
 8004b18:	f00e fe4c 	bl	80137b4 <BTPS_OutputMessage>
   int           ret_val = FUNCTION_ERROR;
 8004b1c:	f06f 0503 	mvn.w	r5, #3
   return(ret_val);
 8004b20:	e7df      	b.n	8004ae2 <DiscoverHRS+0x66>
 8004b22:	bf00      	nop
 8004b24:	200016b8 	.word	0x200016b8
 8004b28:	2000168c 	.word	0x2000168c
 8004b2c:	20001684 	.word	0x20001684
 8004b30:	200016b0 	.word	0x200016b0
 8004b34:	0800269d 	.word	0x0800269d
 8004b38:	20001578 	.word	0x20001578
 8004b3c:	0802dddc 	.word	0x0802dddc
 8004b40:	0802de04 	.word	0x0802de04
 8004b44:	0802de24 	.word	0x0802de24
 8004b48:	0802da08 	.word	0x0802da08
 8004b4c:	0802dd60 	.word	0x0802dd60
 8004b50:	0802de5c 	.word	0x0802de5c

08004b54 <DiscoverGAPS>:
{
 8004b54:	b530      	push	{r4, r5, lr}
 8004b56:	b089      	sub	sp, #36	; 0x24
   if(ConnectionID)
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <DiscoverGAPS+0x94>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d03d      	beq.n	8004bdc <DiscoverGAPS+0x88>
      if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8004b60:	4b22      	ldr	r3, [pc, #136]	; (8004bec <DiscoverGAPS+0x98>)
 8004b62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004b66:	4822      	ldr	r0, [pc, #136]	; (8004bf0 <DiscoverGAPS+0x9c>)
 8004b68:	f7fd fd8a 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	b378      	cbz	r0, 8004bd0 <DiscoverGAPS+0x7c>
         if(!(DeviceInfo->Flags & DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_OUTSTANDING))
 8004b70:	7803      	ldrb	r3, [r0, #0]
 8004b72:	f013 0f02 	tst.w	r3, #2
 8004b76:	d125      	bne.n	8004bc4 <DiscoverGAPS+0x70>
            UUID[0].UUID_Type = guUUID_16;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f88d 300c 	strb.w	r3, [sp, #12]
            GAP_ASSIGN_GAP_SERVICE_UUID_16(UUID[0].UUID.UUID_16);
 8004b7e:	f88d 300d 	strb.w	r3, [sp, #13]
 8004b82:	2218      	movs	r2, #24
 8004b84:	f88d 200e 	strb.w	r2, [sp, #14]
            ret_val = GATT_Start_Service_Discovery(BluetoothStackID, ConnectionID, (sizeof(UUID)/sizeof(GATT_UUID_t)), UUID, GATT_Service_Discovery_Event_Callback, sdGAPS);
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <DiscoverGAPS+0xa0>)
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	ab03      	add	r3, sp, #12
 8004b90:	2201      	movs	r2, #1
 8004b92:	4915      	ldr	r1, [pc, #84]	; (8004be8 <DiscoverGAPS+0x94>)
 8004b94:	6809      	ldr	r1, [r1, #0]
 8004b96:	4818      	ldr	r0, [pc, #96]	; (8004bf8 <DiscoverGAPS+0xa4>)
 8004b98:	6800      	ldr	r0, [r0, #0]
 8004b9a:	f024 ff57 	bl	8029a4c <GATT_Start_Service_Discovery>
            if(!ret_val)
 8004b9e:	4605      	mov	r5, r0
 8004ba0:	b948      	cbnz	r0, 8004bb6 <DiscoverGAPS+0x62>
               Display(("GATT_Start_Service_Discovery success.\r\n"));
 8004ba2:	4816      	ldr	r0, [pc, #88]	; (8004bfc <DiscoverGAPS+0xa8>)
 8004ba4:	f00e fe06 	bl	80137b4 <BTPS_OutputMessage>
               DeviceInfo->Flags |= DEVICE_INFO_FLAGS_SERVICE_DISCOVERY_OUTSTANDING;
 8004ba8:	7823      	ldrb	r3, [r4, #0]
 8004baa:	f043 0302 	orr.w	r3, r3, #2
 8004bae:	7023      	strb	r3, [r4, #0]
}
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	b009      	add	sp, #36	; 0x24
 8004bb4:	bd30      	pop	{r4, r5, pc}
               DisplayFunctionError("GATT_Start_Service_Discovery", ret_val);
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	4811      	ldr	r0, [pc, #68]	; (8004c00 <DiscoverGAPS+0xac>)
 8004bba:	f7fd fd05 	bl	80025c8 <DisplayFunctionError>
               ret_val = FUNCTION_ERROR;
 8004bbe:	f06f 0503 	mvn.w	r5, #3
 8004bc2:	e7f5      	b.n	8004bb0 <DiscoverGAPS+0x5c>
            Display(("Service Discovery Operation Outsanding for Device.\r\n"));
 8004bc4:	480f      	ldr	r0, [pc, #60]	; (8004c04 <DiscoverGAPS+0xb0>)
 8004bc6:	f00e fdf5 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = FUNCTION_ERROR;
 8004bca:	f06f 0503 	mvn.w	r5, #3
 8004bce:	e7ef      	b.n	8004bb0 <DiscoverGAPS+0x5c>
         Display(("No Device Info.\r\n"));
 8004bd0:	480d      	ldr	r0, [pc, #52]	; (8004c08 <DiscoverGAPS+0xb4>)
 8004bd2:	f00e fdef 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 8004bd6:	f06f 0503 	mvn.w	r5, #3
 8004bda:	e7e9      	b.n	8004bb0 <DiscoverGAPS+0x5c>
      Display(("No Connection Established\r\n"));
 8004bdc:	480b      	ldr	r0, [pc, #44]	; (8004c0c <DiscoverGAPS+0xb8>)
 8004bde:	f00e fde9 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = FUNCTION_ERROR;
 8004be2:	f06f 0503 	mvn.w	r5, #3
   return(ret_val);
 8004be6:	e7e3      	b.n	8004bb0 <DiscoverGAPS+0x5c>
 8004be8:	2000168c 	.word	0x2000168c
 8004bec:	20001684 	.word	0x20001684
 8004bf0:	200016b0 	.word	0x200016b0
 8004bf4:	0800269d 	.word	0x0800269d
 8004bf8:	20001578 	.word	0x20001578
 8004bfc:	0802dddc 	.word	0x0802dddc
 8004c00:	0802de04 	.word	0x0802de04
 8004c04:	0802de24 	.word	0x0802de24
 8004c08:	0802da08 	.word	0x0802da08
 8004c0c:	0802dd60 	.word	0x0802dd60

08004c10 <UnregisterHRS>:
{
 8004c10:	b510      	push	{r4, lr}
   if(HRSInstanceID)
 8004c12:	4b1c      	ldr	r3, [pc, #112]	; (8004c84 <UnregisterHRS+0x74>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02d      	beq.n	8004c76 <UnregisterHRS+0x66>
      if(!COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR))
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <UnregisterHRS+0x78>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	b973      	cbnz	r3, 8004c3e <UnregisterHRS+0x2e>
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <UnregisterHRS+0x78>)
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	b95b      	cbnz	r3, 8004c3e <UnregisterHRS+0x2e>
 8004c26:	4b18      	ldr	r3, [pc, #96]	; (8004c88 <UnregisterHRS+0x78>)
 8004c28:	789b      	ldrb	r3, [r3, #2]
 8004c2a:	b943      	cbnz	r3, 8004c3e <UnregisterHRS+0x2e>
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <UnregisterHRS+0x78>)
 8004c2e:	78db      	ldrb	r3, [r3, #3]
 8004c30:	b92b      	cbnz	r3, 8004c3e <UnregisterHRS+0x2e>
 8004c32:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <UnregisterHRS+0x78>)
 8004c34:	791b      	ldrb	r3, [r3, #4]
 8004c36:	b913      	cbnz	r3, 8004c3e <UnregisterHRS+0x2e>
 8004c38:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <UnregisterHRS+0x78>)
 8004c3a:	795b      	ldrb	r3, [r3, #5]
 8004c3c:	b133      	cbz	r3, 8004c4c <UnregisterHRS+0x3c>
         DisconnectLEDevice(BluetoothStackID, ConnectionBD_ADDR);
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <UnregisterHRS+0x78>)
 8004c40:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c44:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <UnregisterHRS+0x7c>)
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	f7fe fde4 	bl	8003814 <DisconnectLEDevice>
      ret_val = HRS_Cleanup_Service(BluetoothStackID, HRSInstanceID);
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <UnregisterHRS+0x74>)
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <UnregisterHRS+0x7c>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	f001 fcea 	bl	800662c <HRS_Cleanup_Service>
      if(ret_val == 0)
 8004c58:	4604      	mov	r4, r0
 8004c5a:	b938      	cbnz	r0, 8004c6c <UnregisterHRS+0x5c>
         Display(("Successfully unregistered HRP Service.\r\n"));
 8004c5c:	480c      	ldr	r0, [pc, #48]	; (8004c90 <UnregisterHRS+0x80>)
 8004c5e:	f00e fda9 	bl	80137b4 <BTPS_OutputMessage>
         HRSInstanceID = 0;
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <UnregisterHRS+0x74>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	4620      	mov	r0, r4
 8004c6a:	bd10      	pop	{r4, pc}
         DisplayFunctionError("HRS_Cleanup_Service", ret_val);
 8004c6c:	4601      	mov	r1, r0
 8004c6e:	4809      	ldr	r0, [pc, #36]	; (8004c94 <UnregisterHRS+0x84>)
 8004c70:	f7fd fcaa 	bl	80025c8 <DisplayFunctionError>
 8004c74:	e7f8      	b.n	8004c68 <UnregisterHRS+0x58>
      Display(("HRP Service not registered.\r\n"));
 8004c76:	4808      	ldr	r0, [pc, #32]	; (8004c98 <UnregisterHRS+0x88>)
 8004c78:	f00e fd9c 	bl	80137b4 <BTPS_OutputMessage>
   int ret_val = FUNCTION_ERROR;
 8004c7c:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 8004c80:	e7f2      	b.n	8004c68 <UnregisterHRS+0x58>
 8004c82:	bf00      	nop
 8004c84:	200016b8 	.word	0x200016b8
 8004c88:	20001684 	.word	0x20001684
 8004c8c:	20001578 	.word	0x20001578
 8004c90:	0802de9c 	.word	0x0802de9c
 8004c94:	0802dec8 	.word	0x0802dec8
 8004c98:	0802dedc 	.word	0x0802dedc

08004c9c <NotifyHeartRate>:
{
 8004c9c:	b538      	push	{r3, r4, r5, lr}
   if(BluetoothStackID)
 8004c9e:	4b6b      	ldr	r3, [pc, #428]	; (8004e4c <NotifyHeartRate+0x1b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80ce 	beq.w	8004e44 <NotifyHeartRate+0x1a8>
 8004ca8:	4604      	mov	r4, r0
      if(HRSInstanceID)
 8004caa:	4b69      	ldr	r3, [pc, #420]	; (8004e50 <NotifyHeartRate+0x1b4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80b9 	beq.w	8004e26 <NotifyHeartRate+0x18a>
         if((ConnectionID) && (!COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR)))
 8004cb4:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <NotifyHeartRate+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80ae 	beq.w	8004e1a <NotifyHeartRate+0x17e>
 8004cbe:	4b66      	ldr	r3, [pc, #408]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	b983      	cbnz	r3, 8004ce6 <NotifyHeartRate+0x4a>
 8004cc4:	4b64      	ldr	r3, [pc, #400]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004cc6:	785b      	ldrb	r3, [r3, #1]
 8004cc8:	b96b      	cbnz	r3, 8004ce6 <NotifyHeartRate+0x4a>
 8004cca:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004ccc:	789b      	ldrb	r3, [r3, #2]
 8004cce:	b953      	cbnz	r3, 8004ce6 <NotifyHeartRate+0x4a>
 8004cd0:	4b61      	ldr	r3, [pc, #388]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004cd2:	78db      	ldrb	r3, [r3, #3]
 8004cd4:	b93b      	cbnz	r3, 8004ce6 <NotifyHeartRate+0x4a>
 8004cd6:	4b60      	ldr	r3, [pc, #384]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	b923      	cbnz	r3, 8004ce6 <NotifyHeartRate+0x4a>
 8004cdc:	4b5e      	ldr	r3, [pc, #376]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004cde:	795b      	ldrb	r3, [r3, #5]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 809a 	beq.w	8004e1a <NotifyHeartRate+0x17e>
            if((TempParam) && (TempParam->NumberofParameters >= 5))
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	f000 8085 	beq.w	8004df6 <NotifyHeartRate+0x15a>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	f340 8081 	ble.w	8004df6 <NotifyHeartRate+0x15a>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, ConnectionBD_ADDR)) != NULL)
 8004cf4:	4b58      	ldr	r3, [pc, #352]	; (8004e58 <NotifyHeartRate+0x1bc>)
 8004cf6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004cfa:	4858      	ldr	r0, [pc, #352]	; (8004e5c <NotifyHeartRate+0x1c0>)
 8004cfc:	f7fd fcc0 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d072      	beq.n	8004dea <NotifyHeartRate+0x14e>
                  if(DeviceInfo->ServerInfo.Heart_Rate_Measurement_Client_Configuration & GATT_CLIENT_CONFIGURATION_CHARACTERISTIC_NOTIFY_ENABLE)
 8004d04:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8004d06:	f013 0f01 	tst.w	r3, #1
 8004d0a:	d068      	beq.n	8004dde <NotifyHeartRate+0x142>
                     HeartRatePtr = BTPS_AllocateMemory(HRS_HEART_RATE_MEASUREMENT_DATA_SIZE(TempParam->Params[4].intParam));
 8004d0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d0e:	3004      	adds	r0, #4
 8004d10:	0040      	lsls	r0, r0, #1
 8004d12:	f00e fb53 	bl	80133bc <BTPS_AllocateMemory>
                     if(HeartRatePtr)
 8004d16:	4605      	mov	r5, r0
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d05a      	beq.n	8004dd2 <NotifyHeartRate+0x136>
                        BTPS_MemInitialize(HeartRatePtr, 0, HRS_HEART_RATE_MEASUREMENT_DATA_SIZE(0));
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	2100      	movs	r1, #0
 8004d20:	f00e fbcd 	bl	80134be <BTPS_MemInitialize>
                        HeartRatePtr->Heart_Rate = (Word_t)TempParam->Params[0].intParam;
 8004d24:	8923      	ldrh	r3, [r4, #8]
 8004d26:	806b      	strh	r3, [r5, #2]
                        if(TempParam->Params[1].intParam)
 8004d28:	6923      	ldr	r3, [r4, #16]
 8004d2a:	b11b      	cbz	r3, 8004d34 <NotifyHeartRate+0x98>
                           HeartRatePtr->Flags |= HRS_HEART_RATE_MEASUREMENT_FLAGS_HEART_RATE_IS_WORD;
 8004d2c:	782b      	ldrb	r3, [r5, #0]
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	702b      	strb	r3, [r5, #0]
                        if(TempParam->Params[2].intParam == 2)
 8004d34:	69a3      	ldr	r3, [r4, #24]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d017      	beq.n	8004d6a <NotifyHeartRate+0xce>
                           if(TempParam->Params[2].intParam == 1)
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d01a      	beq.n	8004d74 <NotifyHeartRate+0xd8>
                        if(TempParam->Params[3].intParam)
 8004d3e:	6a23      	ldr	r3, [r4, #32]
 8004d40:	b14b      	cbz	r3, 8004d56 <NotifyHeartRate+0xba>
                           HeartRatePtr->Flags           |= HRS_HEART_RATE_MEASUREMENT_FLAGS_ENERGY_EXPENDED_PRESENT;
 8004d42:	782b      	ldrb	r3, [r5, #0]
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	702b      	strb	r3, [r5, #0]
                           HeartRatePtr->Energy_Expended  = ++CurrentEnergyExpended;
 8004d4a:	4a45      	ldr	r2, [pc, #276]	; (8004e60 <NotifyHeartRate+0x1c4>)
 8004d4c:	8813      	ldrh	r3, [r2, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8013      	strh	r3, [r2, #0]
 8004d54:	80ab      	strh	r3, [r5, #4]
                        if(TempParam->Params[4].intParam)
 8004d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d58:	b1d3      	cbz	r3, 8004d90 <NotifyHeartRate+0xf4>
                           HeartRatePtr->Flags                  |= HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT;
 8004d5a:	782b      	ldrb	r3, [r5, #0]
 8004d5c:	f043 0310 	orr.w	r3, r3, #16
 8004d60:	702b      	strb	r3, [r5, #0]
                           HeartRatePtr->Number_Of_RR_Intervals  = (Word_t)(TempParam->Params[4].intParam);
 8004d62:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8004d64:	80e8      	strh	r0, [r5, #6]
                           Index = 0;
 8004d66:	2300      	movs	r3, #0
                           while(Index < HeartRatePtr->Number_Of_RR_Intervals)
 8004d68:	e010      	b.n	8004d8c <NotifyHeartRate+0xf0>
                           HeartRatePtr->Flags |= HRS_HEART_RATE_MEASUREMENT_FLAGS_SENSOR_CONTACT_STATUS_SUPPORTED;
 8004d6a:	782b      	ldrb	r3, [r5, #0]
                           HeartRatePtr->Flags |= HRS_HEART_RATE_MEASUREMENT_FLAGS_SENSOR_CONTACT_STATUS_DETECTED;
 8004d6c:	f043 0306 	orr.w	r3, r3, #6
 8004d70:	702b      	strb	r3, [r5, #0]
 8004d72:	e7e4      	b.n	8004d3e <NotifyHeartRate+0xa2>
                              HeartRatePtr->Flags |= HRS_HEART_RATE_MEASUREMENT_FLAGS_SENSOR_CONTACT_STATUS_SUPPORTED;
 8004d74:	782b      	ldrb	r3, [r5, #0]
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	702b      	strb	r3, [r5, #0]
 8004d7c:	e7df      	b.n	8004d3e <NotifyHeartRate+0xa2>
                              HeartRatePtr->RR_Intervals[Index] = (Word_t)(Index + 100);
 8004d7e:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8004d82:	1d1a      	adds	r2, r3, #4
 8004d84:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
                              Index++;
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b29b      	uxth	r3, r3
                           while(Index < HeartRatePtr->Number_Of_RR_Intervals)
 8004d8c:	4298      	cmp	r0, r3
 8004d8e:	d8f6      	bhi.n	8004d7e <NotifyHeartRate+0xe2>
                        if((ret_val = HRS_Notify_Heart_Rate_Measurement(BluetoothStackID, HRSInstanceID, ConnectionID, HeartRatePtr))== 0)
 8004d90:	462b      	mov	r3, r5
 8004d92:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <NotifyHeartRate+0x1b8>)
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	492e      	ldr	r1, [pc, #184]	; (8004e50 <NotifyHeartRate+0x1b4>)
 8004d98:	6809      	ldr	r1, [r1, #0]
 8004d9a:	482c      	ldr	r0, [pc, #176]	; (8004e4c <NotifyHeartRate+0x1b0>)
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f001 fce5 	bl	800676c <HRS_Notify_Heart_Rate_Measurement>
 8004da2:	4604      	mov	r4, r0
 8004da4:	b980      	cbnz	r0, 8004dc8 <NotifyHeartRate+0x12c>
                           if(!(HeartRatePtr->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT))
 8004da6:	782b      	ldrb	r3, [r5, #0]
 8004da8:	f013 0f10 	tst.w	r3, #16
 8004dac:	d107      	bne.n	8004dbe <NotifyHeartRate+0x122>
                              Display(("HRS_Notify_Heart_Rate_Measurement success.\r\n"));
 8004dae:	482d      	ldr	r0, [pc, #180]	; (8004e64 <NotifyHeartRate+0x1c8>)
 8004db0:	f00e fd00 	bl	80137b4 <BTPS_OutputMessage>
                        BTPS_FreeMemory(HeartRatePtr);
 8004db4:	4628      	mov	r0, r5
 8004db6:	f00e fb1b 	bl	80133f0 <BTPS_FreeMemory>
}
 8004dba:	4620      	mov	r0, r4
 8004dbc:	bd38      	pop	{r3, r4, r5, pc}
                              Display(("HRS_Notify_Heart_Rate_Measurement success, notified %u intervals.\r\n", (unsigned int)HeartRatePtr->Number_Of_RR_Intervals));
 8004dbe:	88e9      	ldrh	r1, [r5, #6]
 8004dc0:	4829      	ldr	r0, [pc, #164]	; (8004e68 <NotifyHeartRate+0x1cc>)
 8004dc2:	f00e fcf7 	bl	80137b4 <BTPS_OutputMessage>
 8004dc6:	e7f5      	b.n	8004db4 <NotifyHeartRate+0x118>
                           DisplayFunctionError("HRS_Notify_Heart_Rate_Measurement", ret_val);
 8004dc8:	4601      	mov	r1, r0
 8004dca:	4828      	ldr	r0, [pc, #160]	; (8004e6c <NotifyHeartRate+0x1d0>)
 8004dcc:	f7fd fbfc 	bl	80025c8 <DisplayFunctionError>
 8004dd0:	e7f0      	b.n	8004db4 <NotifyHeartRate+0x118>
                        Display(("Failed to allocate memory for the Heart Rate Measurement.\r\n"));
 8004dd2:	4827      	ldr	r0, [pc, #156]	; (8004e70 <NotifyHeartRate+0x1d4>)
 8004dd4:	f00e fcee 	bl	80137b4 <BTPS_OutputMessage>
                        ret_val = INVALID_PARAMETERS_ERROR;
 8004dd8:	f06f 0405 	mvn.w	r4, #5
 8004ddc:	e7ed      	b.n	8004dba <NotifyHeartRate+0x11e>
                     Display(("Client has not registered for Heart Rate measurement notifications.\r\n"));
 8004dde:	4825      	ldr	r0, [pc, #148]	; (8004e74 <NotifyHeartRate+0x1d8>)
 8004de0:	f00e fce8 	bl	80137b4 <BTPS_OutputMessage>
                     ret_val = INVALID_PARAMETERS_ERROR;
 8004de4:	f06f 0405 	mvn.w	r4, #5
 8004de8:	e7e7      	b.n	8004dba <NotifyHeartRate+0x11e>
                  Display(("Error - Unknown Client.\r\n"));
 8004dea:	4823      	ldr	r0, [pc, #140]	; (8004e78 <NotifyHeartRate+0x1dc>)
 8004dec:	f00e fce2 	bl	80137b4 <BTPS_OutputMessage>
                  ret_val = INVALID_PARAMETERS_ERROR;
 8004df0:	f06f 0405 	mvn.w	r4, #5
 8004df4:	e7e1      	b.n	8004dba <NotifyHeartRate+0x11e>
               Display(("Usage: NotifyHeartRate [HR (BPM)] "));
 8004df6:	4821      	ldr	r0, [pc, #132]	; (8004e7c <NotifyHeartRate+0x1e0>)
 8004df8:	f00e fcdc 	bl	80137b4 <BTPS_OutputMessage>
               Display(("[HR Format (0 = Byte, 1 = Word)] "));
 8004dfc:	4820      	ldr	r0, [pc, #128]	; (8004e80 <NotifyHeartRate+0x1e4>)
 8004dfe:	f00e fcd9 	bl	80137b4 <BTPS_OutputMessage>
               Display(("[Sensor Contact Status (0 = Not Supported, 1 = Supported/Not Detected, 2 = Supported/Detected] "));
 8004e02:	4820      	ldr	r0, [pc, #128]	; (8004e84 <NotifyHeartRate+0x1e8>)
 8004e04:	f00e fcd6 	bl	80137b4 <BTPS_OutputMessage>
               Display(("[Energy Expended (0 = Don't send, 1 = Send)] "));
 8004e08:	481f      	ldr	r0, [pc, #124]	; (8004e88 <NotifyHeartRate+0x1ec>)
 8004e0a:	f00e fcd3 	bl	80137b4 <BTPS_OutputMessage>
               Display(("[RR Intervals (0 = None, X = Number of Intervals)].\r\n"));
 8004e0e:	481f      	ldr	r0, [pc, #124]	; (8004e8c <NotifyHeartRate+0x1f0>)
 8004e10:	f00e fcd0 	bl	80137b4 <BTPS_OutputMessage>
               ret_val = INVALID_PARAMETERS_ERROR;
 8004e14:	f06f 0405 	mvn.w	r4, #5
 8004e18:	e7cf      	b.n	8004dba <NotifyHeartRate+0x11e>
            Display(("Connection not established.\r\n"));
 8004e1a:	481d      	ldr	r0, [pc, #116]	; (8004e90 <NotifyHeartRate+0x1f4>)
 8004e1c:	f00e fcca 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = INVALID_PARAMETERS_ERROR;
 8004e20:	f06f 0405 	mvn.w	r4, #5
 8004e24:	e7c9      	b.n	8004dba <NotifyHeartRate+0x11e>
         if(ConnectionID)
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <NotifyHeartRate+0x1b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b12b      	cbz	r3, 8004e38 <NotifyHeartRate+0x19c>
            Display(("Error - Only a server can notify.\r\n"));
 8004e2c:	4819      	ldr	r0, [pc, #100]	; (8004e94 <NotifyHeartRate+0x1f8>)
 8004e2e:	f00e fcc1 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = INVALID_PARAMETERS_ERROR;
 8004e32:	f06f 0405 	mvn.w	r4, #5
 8004e36:	e7c0      	b.n	8004dba <NotifyHeartRate+0x11e>
            Display(("Error - HTP server not registered\r\n"));
 8004e38:	4817      	ldr	r0, [pc, #92]	; (8004e98 <NotifyHeartRate+0x1fc>)
 8004e3a:	f00e fcbb 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = INVALID_PARAMETERS_ERROR;
 8004e3e:	f06f 0405 	mvn.w	r4, #5
 8004e42:	e7ba      	b.n	8004dba <NotifyHeartRate+0x11e>
      ret_val = INVALID_STACK_ID_ERROR;
 8004e44:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 8004e48:	e7b7      	b.n	8004dba <NotifyHeartRate+0x11e>
 8004e4a:	bf00      	nop
 8004e4c:	20001578 	.word	0x20001578
 8004e50:	200016b8 	.word	0x200016b8
 8004e54:	2000168c 	.word	0x2000168c
 8004e58:	20001684 	.word	0x20001684
 8004e5c:	200016b0 	.word	0x200016b0
 8004e60:	20001690 	.word	0x20001690
 8004e64:	0802defc 	.word	0x0802defc
 8004e68:	0802df2c 	.word	0x0802df2c
 8004e6c:	0802df70 	.word	0x0802df70
 8004e70:	0802df94 	.word	0x0802df94
 8004e74:	0802dfd0 	.word	0x0802dfd0
 8004e78:	0802e018 	.word	0x0802e018
 8004e7c:	0802e034 	.word	0x0802e034
 8004e80:	0802e058 	.word	0x0802e058
 8004e84:	0802e07c 	.word	0x0802e07c
 8004e88:	0802e0dc 	.word	0x0802e0dc
 8004e8c:	0802e10c 	.word	0x0802e10c
 8004e90:	0802e144 	.word	0x0802e144
 8004e94:	0802e164 	.word	0x0802e164
 8004e98:	0802e188 	.word	0x0802e188

08004e9c <RegisterHRS>:
{
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	b082      	sub	sp, #8
   if(!ConnectionID)
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <RegisterHRS+0x6c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	bb4b      	cbnz	r3, 8004efa <RegisterHRS+0x5e>
      if(!HRSInstanceID)
 8004ea6:	4b19      	ldr	r3, [pc, #100]	; (8004f0c <RegisterHRS+0x70>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	bb03      	cbnz	r3, 8004eee <RegisterHRS+0x52>
         ret_val = HRS_Initialize_Service(BluetoothStackID, HRS_HEART_RATE_CONTROL_POINT_RESET_ENERGY_EXPENDED_SUPPORTED, HRS_EventCallback, NULL, &HRSInstanceID);
 8004eac:	4b17      	ldr	r3, [pc, #92]	; (8004f0c <RegisterHRS+0x70>)
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <RegisterHRS+0x74>)
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4817      	ldr	r0, [pc, #92]	; (8004f14 <RegisterHRS+0x78>)
 8004eb8:	6800      	ldr	r0, [r0, #0]
 8004eba:	f001 fba7 	bl	800660c <HRS_Initialize_Service>
         if((ret_val > 0) && (HRSInstanceID > 0))
 8004ebe:	1e04      	subs	r4, r0, #0
 8004ec0:	dd02      	ble.n	8004ec8 <RegisterHRS+0x2c>
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <RegisterHRS+0x70>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b913      	cbnz	r3, 8004ece <RegisterHRS+0x32>
}
 8004ec8:	4620      	mov	r0, r4
 8004eca:	b002      	add	sp, #8
 8004ecc:	bd10      	pop	{r4, pc}
            Display(("Successfully registered HRP Service.\r\n"));
 8004ece:	4812      	ldr	r0, [pc, #72]	; (8004f18 <RegisterHRS+0x7c>)
 8004ed0:	f00e fc70 	bl	80137b4 <BTPS_OutputMessage>
            HRSInstanceID = (unsigned int)ret_val;
 8004ed4:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <RegisterHRS+0x70>)
 8004ed6:	601c      	str	r4, [r3, #0]
            HRS_Set_Body_Sensor_Location(BluetoothStackID, HRSInstanceID, HRS_BODY_SENSOR_LOCATION_OTHER);
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4621      	mov	r1, r4
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <RegisterHRS+0x78>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f001 fbcc 	bl	800667c <HRS_Set_Body_Sensor_Location>
            CurrentEnergyExpended = 0;
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <RegisterHRS+0x80>)
 8004ee8:	8018      	strh	r0, [r3, #0]
            ret_val        = 0;
 8004eea:	4604      	mov	r4, r0
 8004eec:	e7ec      	b.n	8004ec8 <RegisterHRS+0x2c>
         Display(("HRP Service already registered.\r\n"));
 8004eee:	480c      	ldr	r0, [pc, #48]	; (8004f20 <RegisterHRS+0x84>)
 8004ef0:	f00e fc60 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 8004ef4:	f06f 0403 	mvn.w	r4, #3
 8004ef8:	e7e6      	b.n	8004ec8 <RegisterHRS+0x2c>
      Display(("Connection current active.\r\n"));
 8004efa:	480a      	ldr	r0, [pc, #40]	; (8004f24 <RegisterHRS+0x88>)
 8004efc:	f00e fc5a 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = FUNCTION_ERROR;
 8004f00:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 8004f04:	e7e0      	b.n	8004ec8 <RegisterHRS+0x2c>
 8004f06:	bf00      	nop
 8004f08:	2000168c 	.word	0x2000168c
 8004f0c:	200016b8 	.word	0x200016b8
 8004f10:	08004f29 	.word	0x08004f29
 8004f14:	20001578 	.word	0x20001578
 8004f18:	0802e1ac 	.word	0x0802e1ac
 8004f1c:	20001690 	.word	0x20001690
 8004f20:	0802e1d4 	.word	0x0802e1d4
 8004f24:	0802e1f8 	.word	0x0802e1f8

08004f28 <HRS_EventCallback>:
{
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	b084      	sub	sp, #16
   if((BluetoothStackID) && (HRS_Event_Data))
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f000 80fb 	beq.w	8005128 <HRS_EventCallback+0x200>
 8004f32:	460c      	mov	r4, r1
 8004f34:	4605      	mov	r5, r0
 8004f36:	2900      	cmp	r1, #0
 8004f38:	f000 80f6 	beq.w	8005128 <HRS_EventCallback+0x200>
      switch(HRS_Event_Data->Event_Data_Type)
 8004f3c:	780b      	ldrb	r3, [r1, #0]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d068      	beq.n	8005014 <HRS_EventCallback+0xec>
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	f000 80ba 	beq.w	80050bc <HRS_EventCallback+0x194>
 8004f48:	b11b      	cbz	r3, 8004f52 <HRS_EventCallback+0x2a>
            Display(("Unknown HRS Event\r\n"));
 8004f4a:	487c      	ldr	r0, [pc, #496]	; (800513c <HRS_EventCallback+0x214>)
 8004f4c:	f00e fc32 	bl	80137b4 <BTPS_OutputMessage>
            break;
 8004f50:	e0f0      	b.n	8005134 <HRS_EventCallback+0x20c>
            Display(("etHRS_Server_Read_Client_Configuration_Request with size %u.\r\n", HRS_Event_Data->Event_Data_Size));
 8004f52:	8849      	ldrh	r1, [r1, #2]
 8004f54:	487a      	ldr	r0, [pc, #488]	; (8005140 <HRS_EventCallback+0x218>)
 8004f56:	f00e fc2d 	bl	80137b4 <BTPS_OutputMessage>
            if(HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data)
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80e9 	beq.w	8005134 <HRS_EventCallback+0x20c>
               BD_ADDRToStr(HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->RemoteDevice, BoardStr);
 8004f62:	7c59      	ldrb	r1, [r3, #17]
 8004f64:	7c9e      	ldrb	r6, [r3, #18]
 8004f66:	466a      	mov	r2, sp
 8004f68:	f8d3 000d 	ldr.w	r0, [r3, #13]
 8004f6c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8004f70:	f7fd fe32 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Instance ID:      %u.\r\n", HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->InstanceID));
 8004f74:	6863      	ldr	r3, [r4, #4]
 8004f76:	6819      	ldr	r1, [r3, #0]
 8004f78:	4872      	ldr	r0, [pc, #456]	; (8005144 <HRS_EventCallback+0x21c>)
 8004f7a:	f00e fc1b 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection ID:    %u.\r\n", HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->ConnectionID));
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	4871      	ldr	r0, [pc, #452]	; (8005148 <HRS_EventCallback+0x220>)
 8004f84:	f00e fc16 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Transaction ID:   %u.\r\n", HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->TransactionID));
 8004f88:	6863      	ldr	r3, [r4, #4]
 8004f8a:	6899      	ldr	r1, [r3, #8]
 8004f8c:	486f      	ldr	r0, [pc, #444]	; (800514c <HRS_EventCallback+0x224>)
 8004f8e:	f00e fc11 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type:  %s.\r\n", ((HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8004f92:	6863      	ldr	r3, [r4, #4]
 8004f94:	7b1b      	ldrb	r3, [r3, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d12e      	bne.n	8004ff8 <HRS_EventCallback+0xd0>
 8004f9a:	496d      	ldr	r1, [pc, #436]	; (8005150 <HRS_EventCallback+0x228>)
 8004f9c:	486d      	ldr	r0, [pc, #436]	; (8005154 <HRS_EventCallback+0x22c>)
 8004f9e:	f00e fc09 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Remote Device:    %s.\r\n", BoardStr));
 8004fa2:	4669      	mov	r1, sp
 8004fa4:	486c      	ldr	r0, [pc, #432]	; (8005158 <HRS_EventCallback+0x230>)
 8004fa6:	f00e fc05 	bl	80137b4 <BTPS_OutputMessage>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->RemoteDevice)) != NULL)
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	7c5a      	ldrb	r2, [r3, #17]
 8004fae:	7c98      	ldrb	r0, [r3, #18]
 8004fb0:	f8d3 100d 	ldr.w	r1, [r3, #13]
 8004fb4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004fb8:	4868      	ldr	r0, [pc, #416]	; (800515c <HRS_EventCallback+0x234>)
 8004fba:	f7fd fb61 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	b320      	cbz	r0, 800500c <HRS_EventCallback+0xe4>
                  if(HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->InstanceID == HRSInstanceID)
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	6819      	ldr	r1, [r3, #0]
 8004fc6:	4a66      	ldr	r2, [pc, #408]	; (8005160 <HRS_EventCallback+0x238>)
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	d11a      	bne.n	8005004 <HRS_EventCallback+0xdc>
                     switch(HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->ClientConfigurationType)
 8004fce:	7cdb      	ldrb	r3, [r3, #19]
 8004fd0:	b9a3      	cbnz	r3, 8004ffc <HRS_EventCallback+0xd4>
                           Display(("   Config Type:      ctHeartReateMeasurement.\r\n"));
 8004fd2:	4864      	ldr	r0, [pc, #400]	; (8005164 <HRS_EventCallback+0x23c>)
 8004fd4:	f00e fbee 	bl	80137b4 <BTPS_OutputMessage>
                           Result = HRS_Read_Client_Configuration_Response(BluetoothStackID, HRSInstanceID, HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->TransactionID, DeviceInfo->ServerInfo.Heart_Rate_Measurement_Client_Configuration);
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8004fdc:	6892      	ldr	r2, [r2, #8]
 8004fde:	4960      	ldr	r1, [pc, #384]	; (8005160 <HRS_EventCallback+0x238>)
 8004fe0:	6809      	ldr	r1, [r1, #0]
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f001 fb96 	bl	8006714 <HRS_Read_Client_Configuration_Response>
                     if(Result)
 8004fe8:	4601      	mov	r1, r0
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f000 80a2 	beq.w	8005134 <HRS_EventCallback+0x20c>
                        DisplayFunctionError("HRS_Read_Client_Configuration_Response", Result);
 8004ff0:	485d      	ldr	r0, [pc, #372]	; (8005168 <HRS_EventCallback+0x240>)
 8004ff2:	f7fd fae9 	bl	80025c8 <DisplayFunctionError>
 8004ff6:	e09d      	b.n	8005134 <HRS_EventCallback+0x20c>
               Display(("   Connection Type:  %s.\r\n", ((HRS_Event_Data->Event_Data.HRS_Read_Client_Configuration_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8004ff8:	495c      	ldr	r1, [pc, #368]	; (800516c <HRS_EventCallback+0x244>)
 8004ffa:	e7cf      	b.n	8004f9c <HRS_EventCallback+0x74>
                           Display(("   Config Type:      Unknown.\r\n"));
 8004ffc:	485c      	ldr	r0, [pc, #368]	; (8005170 <HRS_EventCallback+0x248>)
 8004ffe:	f00e fbd9 	bl	80137b4 <BTPS_OutputMessage>
                     if(Result)
 8005002:	e097      	b.n	8005134 <HRS_EventCallback+0x20c>
                     Display(("\r\nInvalid Event data.\r\n"));
 8005004:	485b      	ldr	r0, [pc, #364]	; (8005174 <HRS_EventCallback+0x24c>)
 8005006:	f00e fbd5 	bl	80137b4 <BTPS_OutputMessage>
 800500a:	e093      	b.n	8005134 <HRS_EventCallback+0x20c>
                  Display(("\r\nUnknown Client.\r\n"));
 800500c:	485a      	ldr	r0, [pc, #360]	; (8005178 <HRS_EventCallback+0x250>)
 800500e:	f00e fbd1 	bl	80137b4 <BTPS_OutputMessage>
 8005012:	e08f      	b.n	8005134 <HRS_EventCallback+0x20c>
            Display(("etHRS_Server_Client_Configuration_Update with size %u.\r\n", HRS_Event_Data->Event_Data_Size));
 8005014:	8849      	ldrh	r1, [r1, #2]
 8005016:	4859      	ldr	r0, [pc, #356]	; (800517c <HRS_EventCallback+0x254>)
 8005018:	f00e fbcc 	bl	80137b4 <BTPS_OutputMessage>
            if(HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data)
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8088 	beq.w	8005134 <HRS_EventCallback+0x20c>
               BD_ADDRToStr(HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->RemoteDevice, BoardStr);
 8005024:	7b59      	ldrb	r1, [r3, #13]
 8005026:	7b9d      	ldrb	r5, [r3, #14]
 8005028:	466a      	mov	r2, sp
 800502a:	f8d3 0009 	ldr.w	r0, [r3, #9]
 800502e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005032:	f7fd fdd1 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Instance ID:      %u.\r\n", HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->InstanceID));
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	4842      	ldr	r0, [pc, #264]	; (8005144 <HRS_EventCallback+0x21c>)
 800503c:	f00e fbba 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection ID:    %u.\r\n", HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->ConnectionID));
 8005040:	6863      	ldr	r3, [r4, #4]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	4840      	ldr	r0, [pc, #256]	; (8005148 <HRS_EventCallback+0x220>)
 8005046:	f00e fbb5 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type:  %s.\r\n", ((HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 800504a:	6863      	ldr	r3, [r4, #4]
 800504c:	7a1b      	ldrb	r3, [r3, #8]
 800504e:	bb3b      	cbnz	r3, 80050a0 <HRS_EventCallback+0x178>
 8005050:	493f      	ldr	r1, [pc, #252]	; (8005150 <HRS_EventCallback+0x228>)
 8005052:	4840      	ldr	r0, [pc, #256]	; (8005154 <HRS_EventCallback+0x22c>)
 8005054:	f00e fbae 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Remote Device:    %s.\r\n", BoardStr));
 8005058:	4669      	mov	r1, sp
 800505a:	483f      	ldr	r0, [pc, #252]	; (8005158 <HRS_EventCallback+0x230>)
 800505c:	f00e fbaa 	bl	80137b4 <BTPS_OutputMessage>
               if((DeviceInfo = SearchDeviceInfoEntryByBD_ADDR(&DeviceInfoList, HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->RemoteDevice)) != NULL)
 8005060:	6863      	ldr	r3, [r4, #4]
 8005062:	7b5a      	ldrb	r2, [r3, #13]
 8005064:	7b98      	ldrb	r0, [r3, #14]
 8005066:	f8d3 1009 	ldr.w	r1, [r3, #9]
 800506a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800506e:	483b      	ldr	r0, [pc, #236]	; (800515c <HRS_EventCallback+0x234>)
 8005070:	f7fd fb06 	bl	8002680 <SearchDeviceInfoEntryByBD_ADDR>
 8005074:	4605      	mov	r5, r0
 8005076:	b1e8      	cbz	r0, 80050b4 <HRS_EventCallback+0x18c>
                  if(HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->InstanceID == HRSInstanceID)
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	6819      	ldr	r1, [r3, #0]
 800507c:	4a38      	ldr	r2, [pc, #224]	; (8005160 <HRS_EventCallback+0x238>)
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	4291      	cmp	r1, r2
 8005082:	d113      	bne.n	80050ac <HRS_EventCallback+0x184>
                     switch(HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->ClientConfigurationType)
 8005084:	7bdb      	ldrb	r3, [r3, #15]
 8005086:	b96b      	cbnz	r3, 80050a4 <HRS_EventCallback+0x17c>
                           Display(("   Config Type:      ctHeartReateMeasurement.\r\n"));
 8005088:	4836      	ldr	r0, [pc, #216]	; (8005164 <HRS_EventCallback+0x23c>)
 800508a:	f00e fb93 	bl	80137b4 <BTPS_OutputMessage>
                           DeviceInfo->ServerInfo.Heart_Rate_Measurement_Client_Configuration = HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->ClientConfiguration;
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	8a1b      	ldrh	r3, [r3, #16]
 8005092:	862b      	strh	r3, [r5, #48]	; 0x30
                     Display(("   Value:            0x%04X.\r\n", (unsigned int)HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->ClientConfiguration));
 8005094:	6863      	ldr	r3, [r4, #4]
 8005096:	8a19      	ldrh	r1, [r3, #16]
 8005098:	4839      	ldr	r0, [pc, #228]	; (8005180 <HRS_EventCallback+0x258>)
 800509a:	f00e fb8b 	bl	80137b4 <BTPS_OutputMessage>
 800509e:	e049      	b.n	8005134 <HRS_EventCallback+0x20c>
               Display(("   Connection Type:  %s.\r\n", ((HRS_Event_Data->Event_Data.HRS_Client_Configuration_Update_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 80050a0:	4932      	ldr	r1, [pc, #200]	; (800516c <HRS_EventCallback+0x244>)
 80050a2:	e7d6      	b.n	8005052 <HRS_EventCallback+0x12a>
                           Display(("   Config Type:      Unknown.\r\n"));
 80050a4:	4832      	ldr	r0, [pc, #200]	; (8005170 <HRS_EventCallback+0x248>)
 80050a6:	f00e fb85 	bl	80137b4 <BTPS_OutputMessage>
                           break;
 80050aa:	e7f3      	b.n	8005094 <HRS_EventCallback+0x16c>
                     Display(("\r\nInvalid Event data.\r\n"));
 80050ac:	4831      	ldr	r0, [pc, #196]	; (8005174 <HRS_EventCallback+0x24c>)
 80050ae:	f00e fb81 	bl	80137b4 <BTPS_OutputMessage>
 80050b2:	e03f      	b.n	8005134 <HRS_EventCallback+0x20c>
                  Display(("\r\nUnknown Client.\r\n"));
 80050b4:	4830      	ldr	r0, [pc, #192]	; (8005178 <HRS_EventCallback+0x250>)
 80050b6:	f00e fb7d 	bl	80137b4 <BTPS_OutputMessage>
 80050ba:	e03b      	b.n	8005134 <HRS_EventCallback+0x20c>
            Display(("etHRS_Server_Heart_Rate_Control_Point_Command with size %u.\r\n", HRS_Event_Data->Event_Data_Size));
 80050bc:	8849      	ldrh	r1, [r1, #2]
 80050be:	4831      	ldr	r0, [pc, #196]	; (8005184 <HRS_EventCallback+0x25c>)
 80050c0:	f00e fb78 	bl	80137b4 <BTPS_OutputMessage>
            if(HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data)
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d034      	beq.n	8005134 <HRS_EventCallback+0x20c>
               BD_ADDRToStr(HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data->RemoteDevice, BoardStr);
 80050ca:	7b59      	ldrb	r1, [r3, #13]
 80050cc:	7b9d      	ldrb	r5, [r3, #14]
 80050ce:	466a      	mov	r2, sp
 80050d0:	f8d3 0009 	ldr.w	r0, [r3, #9]
 80050d4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80050d8:	f7fd fd7e 	bl	8002bd8 <BD_ADDRToStr>
               Display(("   Instance ID:      %u.\r\n", HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data->InstanceID));
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	4818      	ldr	r0, [pc, #96]	; (8005144 <HRS_EventCallback+0x21c>)
 80050e2:	f00e fb67 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection ID:    %u.\r\n", HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data->ConnectionID));
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	6859      	ldr	r1, [r3, #4]
 80050ea:	4817      	ldr	r0, [pc, #92]	; (8005148 <HRS_EventCallback+0x220>)
 80050ec:	f00e fb62 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Connection Type:  %s.\r\n", ((HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	7a1b      	ldrb	r3, [r3, #8]
 80050f4:	b97b      	cbnz	r3, 8005116 <HRS_EventCallback+0x1ee>
 80050f6:	4916      	ldr	r1, [pc, #88]	; (8005150 <HRS_EventCallback+0x228>)
 80050f8:	4816      	ldr	r0, [pc, #88]	; (8005154 <HRS_EventCallback+0x22c>)
 80050fa:	f00e fb5b 	bl	80137b4 <BTPS_OutputMessage>
               Display(("   Remote Device:    %s.\r\n", BoardStr));
 80050fe:	4669      	mov	r1, sp
 8005100:	4815      	ldr	r0, [pc, #84]	; (8005158 <HRS_EventCallback+0x230>)
 8005102:	f00e fb57 	bl	80137b4 <BTPS_OutputMessage>
               switch(HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data->Command)
 8005106:	6863      	ldr	r3, [r4, #4]
 8005108:	7bdb      	ldrb	r3, [r3, #15]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d005      	beq.n	800511a <HRS_EventCallback+0x1f2>
                     Display(("   Command:          Unknown.\r\n"));
 800510e:	481e      	ldr	r0, [pc, #120]	; (8005188 <HRS_EventCallback+0x260>)
 8005110:	f00e fb50 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 8005114:	e00e      	b.n	8005134 <HRS_EventCallback+0x20c>
               Display(("   Connection Type:  %s.\r\n", ((HRS_Event_Data->Event_Data.HRS_Heart_Rate_Control_Command_Data->ConnectionType == gctLE)?"LE":"BR/EDR")));
 8005116:	4915      	ldr	r1, [pc, #84]	; (800516c <HRS_EventCallback+0x244>)
 8005118:	e7ee      	b.n	80050f8 <HRS_EventCallback+0x1d0>
                     CurrentEnergyExpended = 0;
 800511a:	4b1c      	ldr	r3, [pc, #112]	; (800518c <HRS_EventCallback+0x264>)
 800511c:	2200      	movs	r2, #0
 800511e:	801a      	strh	r2, [r3, #0]
                     Display(("   Command:          ccResetEnergyExpended.\r\n"));
 8005120:	481b      	ldr	r0, [pc, #108]	; (8005190 <HRS_EventCallback+0x268>)
 8005122:	f00e fb47 	bl	80137b4 <BTPS_OutputMessage>
                     break;
 8005126:	e005      	b.n	8005134 <HRS_EventCallback+0x20c>
      Display(("\r\n"));
 8005128:	481a      	ldr	r0, [pc, #104]	; (8005194 <HRS_EventCallback+0x26c>)
 800512a:	f00e fb43 	bl	80137b4 <BTPS_OutputMessage>
      Display(("HRS Callback Data: Event_Data = NULL.\r\n"));
 800512e:	481a      	ldr	r0, [pc, #104]	; (8005198 <HRS_EventCallback+0x270>)
 8005130:	f00e fb40 	bl	80137b4 <BTPS_OutputMessage>
   DisplayPrompt();
 8005134:	f7fd fa40 	bl	80025b8 <DisplayPrompt>
}
 8005138:	b004      	add	sp, #16
 800513a:	bd70      	pop	{r4, r5, r6, pc}
 800513c:	0802e420 	.word	0x0802e420
 8005140:	0802e218 	.word	0x0802e218
 8005144:	0802e258 	.word	0x0802e258
 8005148:	0802c4b0 	.word	0x0802c4b0
 800514c:	0802e274 	.word	0x0802e274
 8005150:	0802ee58 	.word	0x0802ee58
 8005154:	0802c4cc 	.word	0x0802c4cc
 8005158:	0802c4e8 	.word	0x0802c4e8
 800515c:	200016b0 	.word	0x200016b0
 8005160:	200016b8 	.word	0x200016b8
 8005164:	0802e290 	.word	0x0802e290
 8005168:	0802e2e0 	.word	0x0802e2e0
 800516c:	0802c344 	.word	0x0802c344
 8005170:	0802e2c0 	.word	0x0802e2c0
 8005174:	0802e308 	.word	0x0802e308
 8005178:	0802e320 	.word	0x0802e320
 800517c:	0802e334 	.word	0x0802e334
 8005180:	0802e370 	.word	0x0802e370
 8005184:	0802e390 	.word	0x0802e390
 8005188:	0802e400 	.word	0x0802e400
 800518c:	20001690 	.word	0x20001690
 8005190:	0802e3d0 	.word	0x0802e3d0
 8005194:	0802c380 	.word	0x0802c380
 8005198:	0802e434 	.word	0x0802e434

0800519c <GetLocalAppearance>:
{
 800519c:	b510      	push	{r4, lr}
 800519e:	b082      	sub	sp, #8
   if(GAPSInstanceID)
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <GetLocalAppearance+0x60>)
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	b319      	cbz	r1, 80051ee <GetLocalAppearance+0x52>
      ret_val = GAPS_Query_Device_Appearance(BluetoothStackID, GAPSInstanceID, &Appearance);
 80051a6:	f10d 0202 	add.w	r2, sp, #2
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <GetLocalAppearance+0x64>)
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	f7fc faff 	bl	80017b0 <GAPS_Query_Device_Appearance>
      if(!ret_val)
 80051b2:	4604      	mov	r4, r0
 80051b4:	b9a0      	cbnz	r0, 80051e0 <GetLocalAppearance+0x44>
         if(AppearanceToString(Appearance, &AppearanceString))
 80051b6:	a901      	add	r1, sp, #4
 80051b8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80051bc:	f7fc fe68 	bl	8001e90 <AppearanceToString>
 80051c0:	b140      	cbz	r0, 80051d4 <GetLocalAppearance+0x38>
            Display(("Device Appearance: %s(%u).\r\n", AppearanceString, Appearance));
 80051c2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80051c6:	9901      	ldr	r1, [sp, #4]
 80051c8:	480e      	ldr	r0, [pc, #56]	; (8005204 <GetLocalAppearance+0x68>)
 80051ca:	f00e faf3 	bl	80137b4 <BTPS_OutputMessage>
}
 80051ce:	4620      	mov	r0, r4
 80051d0:	b002      	add	sp, #8
 80051d2:	bd10      	pop	{r4, pc}
            Display(("Device Appearance: Unknown(%u).\r\n", Appearance));
 80051d4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80051d8:	480b      	ldr	r0, [pc, #44]	; (8005208 <GetLocalAppearance+0x6c>)
 80051da:	f00e faeb 	bl	80137b4 <BTPS_OutputMessage>
 80051de:	e7f6      	b.n	80051ce <GetLocalAppearance+0x32>
         DisplayFunctionError("GAPS_Query_Device_Appearance", ret_val);
 80051e0:	4601      	mov	r1, r0
 80051e2:	480a      	ldr	r0, [pc, #40]	; (800520c <GetLocalAppearance+0x70>)
 80051e4:	f7fd f9f0 	bl	80025c8 <DisplayFunctionError>
         ret_val = FUNCTION_ERROR;
 80051e8:	f06f 0403 	mvn.w	r4, #3
 80051ec:	e7ef      	b.n	80051ce <GetLocalAppearance+0x32>
      Display(("GAP Service not registered.\r\n"));
 80051ee:	4808      	ldr	r0, [pc, #32]	; (8005210 <GetLocalAppearance+0x74>)
 80051f0:	f00e fae0 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = FUNCTION_ERROR;
 80051f4:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 80051f8:	e7e9      	b.n	80051ce <GetLocalAppearance+0x32>
 80051fa:	bf00      	nop
 80051fc:	200016b4 	.word	0x200016b4
 8005200:	20001578 	.word	0x20001578
 8005204:	0802e45c 	.word	0x0802e45c
 8005208:	0802e47c 	.word	0x0802e47c
 800520c:	0802e4a0 	.word	0x0802e4a0
 8005210:	0802bca4 	.word	0x0802bca4

08005214 <SetLocalName>:
{
 8005214:	b510      	push	{r4, lr}
   if((TempParam) && (TempParam->NumberofParameters > 0) && (BTPS_StringLength(TempParam->Params[0].strParam) > 0) && (BTPS_StringLength(TempParam->Params[0].strParam) <= BTPS_CONFIGURATION_GAPS_MAXIMUM_SUPPORTED_DEVICE_NAME))
 8005216:	b340      	cbz	r0, 800526a <SetLocalName+0x56>
 8005218:	4604      	mov	r4, r0
 800521a:	6803      	ldr	r3, [r0, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dd24      	ble.n	800526a <SetLocalName+0x56>
 8005220:	6840      	ldr	r0, [r0, #4]
 8005222:	f00e f9c0 	bl	80135a6 <BTPS_StringLength>
 8005226:	b300      	cbz	r0, 800526a <SetLocalName+0x56>
 8005228:	6860      	ldr	r0, [r4, #4]
 800522a:	f00e f9bc 	bl	80135a6 <BTPS_StringLength>
 800522e:	2830      	cmp	r0, #48	; 0x30
 8005230:	d81b      	bhi.n	800526a <SetLocalName+0x56>
      if(GAPSInstanceID)
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <SetLocalName+0x64>)
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	b191      	cbz	r1, 800525e <SetLocalName+0x4a>
         ret_val = GAPS_Set_Device_Name(BluetoothStackID, GAPSInstanceID, TempParam->Params[0].strParam);
 8005238:	6862      	ldr	r2, [r4, #4]
 800523a:	4b10      	ldr	r3, [pc, #64]	; (800527c <SetLocalName+0x68>)
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	f7fc fa19 	bl	8001674 <GAPS_Set_Device_Name>
         if(!ret_val)
 8005242:	4604      	mov	r4, r0
 8005244:	b920      	cbnz	r0, 8005250 <SetLocalName+0x3c>
            Display(("GAPS_Set_Device_Name success.\r\n"));
 8005246:	480e      	ldr	r0, [pc, #56]	; (8005280 <SetLocalName+0x6c>)
 8005248:	f00e fab4 	bl	80137b4 <BTPS_OutputMessage>
}
 800524c:	4620      	mov	r0, r4
 800524e:	bd10      	pop	{r4, pc}
            DisplayFunctionError("GAPS_Set_Device_Name", ret_val);
 8005250:	4601      	mov	r1, r0
 8005252:	480c      	ldr	r0, [pc, #48]	; (8005284 <SetLocalName+0x70>)
 8005254:	f7fd f9b8 	bl	80025c8 <DisplayFunctionError>
            ret_val = FUNCTION_ERROR;
 8005258:	f06f 0403 	mvn.w	r4, #3
 800525c:	e7f6      	b.n	800524c <SetLocalName+0x38>
         Display(("GAP Service not registered.\r\n"));
 800525e:	480a      	ldr	r0, [pc, #40]	; (8005288 <SetLocalName+0x74>)
 8005260:	f00e faa8 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 8005264:	f06f 0403 	mvn.w	r4, #3
 8005268:	e7f0      	b.n	800524c <SetLocalName+0x38>
      DisplayUsage("SetLocalName [NameString]");
 800526a:	4808      	ldr	r0, [pc, #32]	; (800528c <SetLocalName+0x78>)
 800526c:	f7fc ff72 	bl	8002154 <DisplayUsage>
      ret_val = FUNCTION_ERROR;
 8005270:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 8005274:	e7ea      	b.n	800524c <SetLocalName+0x38>
 8005276:	bf00      	nop
 8005278:	200016b4 	.word	0x200016b4
 800527c:	20001578 	.word	0x20001578
 8005280:	0802e4c0 	.word	0x0802e4c0
 8005284:	0802e4e0 	.word	0x0802e4e0
 8005288:	0802bca4 	.word	0x0802bca4
 800528c:	0802e4f8 	.word	0x0802e4f8

08005290 <LEPassKeyResponse>:
{
 8005290:	b510      	push	{r4, lr}
 8005292:	b088      	sub	sp, #32
   if(BluetoothStackID)
 8005294:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <LEPassKeyResponse+0xb0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d04e      	beq.n	800533a <LEPassKeyResponse+0xaa>
 800529c:	4604      	mov	r4, r0
      if(!COMPARE_NULL_BD_ADDR(CurrentRemoteBD_ADDR))
 800529e:	4b29      	ldr	r3, [pc, #164]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b97b      	cbnz	r3, 80052c4 <LEPassKeyResponse+0x34>
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	b963      	cbnz	r3, 80052c4 <LEPassKeyResponse+0x34>
 80052aa:	4b26      	ldr	r3, [pc, #152]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052ac:	789b      	ldrb	r3, [r3, #2]
 80052ae:	b94b      	cbnz	r3, 80052c4 <LEPassKeyResponse+0x34>
 80052b0:	4b24      	ldr	r3, [pc, #144]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052b2:	78db      	ldrb	r3, [r3, #3]
 80052b4:	b933      	cbnz	r3, 80052c4 <LEPassKeyResponse+0x34>
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052b8:	791b      	ldrb	r3, [r3, #4]
 80052ba:	b91b      	cbnz	r3, 80052c4 <LEPassKeyResponse+0x34>
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052be:	795b      	ldrb	r3, [r3, #5]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d034      	beq.n	800532e <LEPassKeyResponse+0x9e>
         if((TempParam) && (TempParam->NumberofParameters > 0) && (BTPS_StringLength(TempParam->Params[0].strParam) <= GAP_LE_PASSKEY_MAXIMUM_NUMBER_OF_DIGITS))
 80052c4:	b36c      	cbz	r4, 8005322 <LEPassKeyResponse+0x92>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dd2a      	ble.n	8005322 <LEPassKeyResponse+0x92>
 80052cc:	6860      	ldr	r0, [r4, #4]
 80052ce:	f00e f96a 	bl	80135a6 <BTPS_StringLength>
 80052d2:	2806      	cmp	r0, #6
 80052d4:	d825      	bhi.n	8005322 <LEPassKeyResponse+0x92>
            GAP_LE_Authentication_Response_Information.GAP_LE_Authentication_Type  = larPasskey;
 80052d6:	2303      	movs	r3, #3
 80052d8:	f88d 3000 	strb.w	r3, [sp]
            GAP_LE_Authentication_Response_Information.Authentication_Data_Length  = (Byte_t)(sizeof(DWord_t));
 80052dc:	2304      	movs	r3, #4
 80052de:	f88d 3001 	strb.w	r3, [sp, #1]
            GAP_LE_Authentication_Response_Information.Authentication_Data.Passkey = (DWord_t)(TempParam->Params[0].intParam);
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	9301      	str	r3, [sp, #4]
            Result = GAP_LE_Authentication_Response(BluetoothStackID, CurrentRemoteBD_ADDR, &GAP_LE_Authentication_Response_Information);
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <LEPassKeyResponse+0xb4>)
 80052e8:	466b      	mov	r3, sp
 80052ea:	ca06      	ldmia	r2, {r1, r2}
 80052ec:	4814      	ldr	r0, [pc, #80]	; (8005340 <LEPassKeyResponse+0xb0>)
 80052ee:	6800      	ldr	r0, [r0, #0]
 80052f0:	f017 f830 	bl	801c354 <GAP_LE_Authentication_Response>
            if(!Result)
 80052f4:	4604      	mov	r4, r0
 80052f6:	b968      	cbnz	r0, 8005314 <LEPassKeyResponse+0x84>
               Display(("Passkey Response Success."));
 80052f8:	4813      	ldr	r0, [pc, #76]	; (8005348 <LEPassKeyResponse+0xb8>)
 80052fa:	f00e fa5b 	bl	80137b4 <BTPS_OutputMessage>
            ASSIGN_BD_ADDR(CurrentRemoteBD_ADDR, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <LEPassKeyResponse+0xb4>)
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	705a      	strb	r2, [r3, #1]
 8005306:	709a      	strb	r2, [r3, #2]
 8005308:	70da      	strb	r2, [r3, #3]
 800530a:	711a      	strb	r2, [r3, #4]
 800530c:	715a      	strb	r2, [r3, #5]
}
 800530e:	4620      	mov	r0, r4
 8005310:	b008      	add	sp, #32
 8005312:	bd10      	pop	{r4, pc}
               DisplayFunctionError("GAP_LE_Authentication_Response", Result);
 8005314:	4601      	mov	r1, r0
 8005316:	480d      	ldr	r0, [pc, #52]	; (800534c <LEPassKeyResponse+0xbc>)
 8005318:	f7fd f956 	bl	80025c8 <DisplayFunctionError>
               ret_val = FUNCTION_ERROR;
 800531c:	f06f 0403 	mvn.w	r4, #3
 8005320:	e7ed      	b.n	80052fe <LEPassKeyResponse+0x6e>
            Display(("PassKeyResponse [Numeric Passkey(0 - 999999)].\r\n"));
 8005322:	480b      	ldr	r0, [pc, #44]	; (8005350 <LEPassKeyResponse+0xc0>)
 8005324:	f00e fa46 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = INVALID_PARAMETERS_ERROR;
 8005328:	f06f 0405 	mvn.w	r4, #5
 800532c:	e7ef      	b.n	800530e <LEPassKeyResponse+0x7e>
         Display(("Pass Key Authentication Response: Authentication not in progress.\r\n"));
 800532e:	4809      	ldr	r0, [pc, #36]	; (8005354 <LEPassKeyResponse+0xc4>)
 8005330:	f00e fa40 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 8005334:	f06f 0403 	mvn.w	r4, #3
 8005338:	e7e9      	b.n	800530e <LEPassKeyResponse+0x7e>
      ret_val = INVALID_STACK_ID_ERROR;
 800533a:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 800533e:	e7e6      	b.n	800530e <LEPassKeyResponse+0x7e>
 8005340:	20001578 	.word	0x20001578
 8005344:	20001694 	.word	0x20001694
 8005348:	0802e514 	.word	0x0802e514
 800534c:	0802ce2c 	.word	0x0802ce2c
 8005350:	0802e530 	.word	0x0802e530
 8005354:	0802e564 	.word	0x0802e564

08005358 <StrToBD_ADDR>:
{
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	460d      	mov	r5, r1
   if((BoardStr) && ((StringLength = BTPS_StringLength(BoardStr)) >= (sizeof(BD_ADDR_t) * 2)) && (Board_Address))
 800535c:	b388      	cbz	r0, 80053c2 <StrToBD_ADDR+0x6a>
 800535e:	4604      	mov	r4, r0
 8005360:	f00e f921 	bl	80135a6 <BTPS_StringLength>
 8005364:	280b      	cmp	r0, #11
 8005366:	d92c      	bls.n	80053c2 <StrToBD_ADDR+0x6a>
 8005368:	b35d      	cbz	r5, 80053c2 <StrToBD_ADDR+0x6a>
      if((StringLength >= (sizeof(BD_ADDR_t) * 2) + 2) && (TempPtr[0] == '0') && ((TempPtr[1] == 'x') || (TempPtr[1] == 'X')))
 800536a:	280d      	cmp	r0, #13
 800536c:	d902      	bls.n	8005374 <StrToBD_ADDR+0x1c>
 800536e:	7823      	ldrb	r3, [r4, #0]
 8005370:	2b30      	cmp	r3, #48	; 0x30
 8005372:	d001      	beq.n	8005378 <StrToBD_ADDR+0x20>
{
 8005374:	2100      	movs	r1, #0
 8005376:	e012      	b.n	800539e <StrToBD_ADDR+0x46>
      if((StringLength >= (sizeof(BD_ADDR_t) * 2) + 2) && (TempPtr[0] == '0') && ((TempPtr[1] == 'x') || (TempPtr[1] == 'X')))
 8005378:	7863      	ldrb	r3, [r4, #1]
 800537a:	2b78      	cmp	r3, #120	; 0x78
 800537c:	d001      	beq.n	8005382 <StrToBD_ADDR+0x2a>
 800537e:	2b58      	cmp	r3, #88	; 0x58
 8005380:	d1f8      	bne.n	8005374 <StrToBD_ADDR+0x1c>
         TempPtr += 2;
 8005382:	3402      	adds	r4, #2
 8005384:	e7f6      	b.n	8005374 <StrToBD_ADDR+0x1c>
         Value  = (char)(ToInt(*TempPtr) * 0x10);
 8005386:	3b30      	subs	r3, #48	; 0x30
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e011      	b.n	80053b2 <StrToBD_ADDR+0x5a>
         Value += (char)ToInt(*TempPtr);
 800538e:	3a30      	subs	r2, #48	; 0x30
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	4413      	add	r3, r2
         TempPtr++;
 8005394:	3402      	adds	r4, #2
         ((char *)Board_Address)[5-Index] = (Byte_t)Value;
 8005396:	f1c1 0205 	rsb	r2, r1, #5
 800539a:	54ab      	strb	r3, [r5, r2]
      for(Index=0;Index<6;Index++)
 800539c:	3101      	adds	r1, #1
 800539e:	2905      	cmp	r1, #5
 80053a0:	d815      	bhi.n	80053ce <StrToBD_ADDR+0x76>
         Value  = (char)(ToInt(*TempPtr) * 0x10);
 80053a2:	7823      	ldrb	r3, [r4, #0]
 80053a4:	2b39      	cmp	r3, #57	; 0x39
 80053a6:	d9ee      	bls.n	8005386 <StrToBD_ADDR+0x2e>
 80053a8:	f023 0320 	bic.w	r3, r3, #32
 80053ac:	3b37      	subs	r3, #55	; 0x37
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	b2db      	uxtb	r3, r3
         Value += (char)ToInt(*TempPtr);
 80053b2:	7862      	ldrb	r2, [r4, #1]
 80053b4:	2a39      	cmp	r2, #57	; 0x39
 80053b6:	d9ea      	bls.n	800538e <StrToBD_ADDR+0x36>
 80053b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80053bc:	3a37      	subs	r2, #55	; 0x37
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	e7e7      	b.n	8005392 <StrToBD_ADDR+0x3a>
      if(Board_Address)
 80053c2:	b125      	cbz	r5, 80053ce <StrToBD_ADDR+0x76>
         BTPS_MemInitialize(Board_Address, 0, sizeof(BD_ADDR_t));
 80053c4:	2206      	movs	r2, #6
 80053c6:	2100      	movs	r1, #0
 80053c8:	4628      	mov	r0, r5
 80053ca:	f00e f878 	bl	80134be <BTPS_MemInitialize>
}
 80053ce:	bd38      	pop	{r3, r4, r5, pc}

080053d0 <StringToUnsignedInteger>:
{
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if((StringInteger) && (BTPS_StringLength(StringInteger)))
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d070      	beq.n	80054b8 <StringToUnsignedInteger+0xe8>
 80053d6:	4606      	mov	r6, r0
 80053d8:	f00e f8e5 	bl	80135a6 <BTPS_StringLength>
 80053dc:	4604      	mov	r4, r0
 80053de:	2800      	cmp	r0, #0
 80053e0:	d06b      	beq.n	80054ba <StringToUnsignedInteger+0xea>
      if(BTPS_StringLength(StringInteger) > 2)
 80053e2:	4630      	mov	r0, r6
 80053e4:	f00e f8df 	bl	80135a6 <BTPS_StringLength>
 80053e8:	2802      	cmp	r0, #2
 80053ea:	d911      	bls.n	8005410 <StringToUnsignedInteger+0x40>
         if((StringInteger[0] == '0') && ((StringInteger[1] == 'x') || (StringInteger[1] == 'X')))
 80053ec:	7833      	ldrb	r3, [r6, #0]
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	d002      	beq.n	80053f8 <StringToUnsignedInteger+0x28>
 80053f2:	2400      	movs	r4, #0
 80053f4:	4625      	mov	r5, r4
 80053f6:	e012      	b.n	800541e <StringToUnsignedInteger+0x4e>
 80053f8:	7873      	ldrb	r3, [r6, #1]
 80053fa:	2b78      	cmp	r3, #120	; 0x78
 80053fc:	d004      	beq.n	8005408 <StringToUnsignedInteger+0x38>
 80053fe:	2b58      	cmp	r3, #88	; 0x58
 8005400:	d002      	beq.n	8005408 <StringToUnsignedInteger+0x38>
 8005402:	2400      	movs	r4, #0
 8005404:	4625      	mov	r5, r4
 8005406:	e00a      	b.n	800541e <StringToUnsignedInteger+0x4e>
            StringInteger += 2;
 8005408:	3602      	adds	r6, #2
 800540a:	2400      	movs	r4, #0
 800540c:	4625      	mov	r5, r4
 800540e:	e037      	b.n	8005480 <StringToUnsignedInteger+0xb0>
 8005410:	2400      	movs	r4, #0
 8005412:	4625      	mov	r5, r4
 8005414:	e003      	b.n	800541e <StringToUnsignedInteger+0x4e>
                  ret_val *= 10;
 8005416:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800541a:	0064      	lsls	r4, r4, #1
            Index++;
 800541c:	3501      	adds	r5, #1
            if((StringInteger[Index] >= '0') && (StringInteger[Index] <= '9'))
 800541e:	5d72      	ldrb	r2, [r6, r5]
 8005420:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b09      	cmp	r3, #9
 8005428:	d8f8      	bhi.n	800541c <StringToUnsignedInteger+0x4c>
               ret_val += (StringInteger[Index] & 0xF);
 800542a:	f002 020f 	and.w	r2, r2, #15
 800542e:	4414      	add	r4, r2
               if(((Index + 1) < BTPS_StringLength(StringInteger)) && (StringInteger[Index+1] >= '0') && (StringInteger[Index+1] <= '9'))
 8005430:	1c6f      	adds	r7, r5, #1
 8005432:	4630      	mov	r0, r6
 8005434:	f00e f8b7 	bl	80135a6 <BTPS_StringLength>
 8005438:	4287      	cmp	r7, r0
 800543a:	d23e      	bcs.n	80054ba <StringToUnsignedInteger+0xea>
 800543c:	5df3      	ldrb	r3, [r6, r7]
 800543e:	2b2f      	cmp	r3, #47	; 0x2f
 8005440:	d93b      	bls.n	80054ba <StringToUnsignedInteger+0xea>
 8005442:	2b39      	cmp	r3, #57	; 0x39
 8005444:	d9e7      	bls.n	8005416 <StringToUnsignedInteger+0x46>
 8005446:	e038      	b.n	80054ba <StringToUnsignedInteger+0xea>
               if((StringInteger[Index] >= '0') && (StringInteger[Index] <= '9'))
 8005448:	2a09      	cmp	r2, #9
 800544a:	d82a      	bhi.n	80054a2 <StringToUnsignedInteger+0xd2>
                  ret_val += (StringInteger[Index] & 0xF);
 800544c:	f003 030f 	and.w	r3, r3, #15
 8005450:	441c      	add	r4, r3
               if(((Index + 1) < BTPS_StringLength(StringInteger)) && (((StringInteger[Index+1] >= '0') && (StringInteger[Index+1] <= '9')) || ((StringInteger[Index+1] >= 'a') && (StringInteger[Index+1] <= 'f')) || ((StringInteger[Index+1] >= 'A') && (StringInteger[Index+1] <= 'F'))))
 8005452:	1c6f      	adds	r7, r5, #1
 8005454:	4630      	mov	r0, r6
 8005456:	f00e f8a6 	bl	80135a6 <BTPS_StringLength>
 800545a:	4287      	cmp	r7, r0
 800545c:	d22d      	bcs.n	80054ba <StringToUnsignedInteger+0xea>
 800545e:	5df2      	ldrb	r2, [r6, r7]
 8005460:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b09      	cmp	r3, #9
 8005468:	d908      	bls.n	800547c <StringToUnsignedInteger+0xac>
 800546a:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b05      	cmp	r3, #5
 8005472:	d903      	bls.n	800547c <StringToUnsignedInteger+0xac>
 8005474:	3a41      	subs	r2, #65	; 0x41
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	2a05      	cmp	r2, #5
 800547a:	d81e      	bhi.n	80054ba <StringToUnsignedInteger+0xea>
                  ret_val *= 16;
 800547c:	0124      	lsls	r4, r4, #4
            Index++;
 800547e:	3501      	adds	r5, #1
            if(((StringInteger[Index] >= '0') && (StringInteger[Index] <= '9')) || ((StringInteger[Index] >= 'a') && (StringInteger[Index] <= 'f')) || ((StringInteger[Index] >= 'A') && (StringInteger[Index] <= 'F')))
 8005480:	5d73      	ldrb	r3, [r6, r5]
 8005482:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	2a09      	cmp	r2, #9
 800548a:	d9dd      	bls.n	8005448 <StringToUnsignedInteger+0x78>
 800548c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8005490:	b2c9      	uxtb	r1, r1
 8005492:	2905      	cmp	r1, #5
 8005494:	d9d8      	bls.n	8005448 <StringToUnsignedInteger+0x78>
 8005496:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 800549a:	b2c9      	uxtb	r1, r1
 800549c:	2905      	cmp	r1, #5
 800549e:	d8ee      	bhi.n	800547e <StringToUnsignedInteger+0xae>
 80054a0:	e7d2      	b.n	8005448 <StringToUnsignedInteger+0x78>
                  if((StringInteger[Index] >= 'a') && (StringInteger[Index] <= 'f'))
 80054a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	2a05      	cmp	r2, #5
 80054aa:	d802      	bhi.n	80054b2 <StringToUnsignedInteger+0xe2>
                     ret_val += (StringInteger[Index] - 'a' + 10);
 80054ac:	441c      	add	r4, r3
 80054ae:	3c57      	subs	r4, #87	; 0x57
 80054b0:	e7cf      	b.n	8005452 <StringToUnsignedInteger+0x82>
                     ret_val += (StringInteger[Index] - 'A' + 10);
 80054b2:	441c      	add	r4, r3
 80054b4:	3c37      	subs	r4, #55	; 0x37
 80054b6:	e7cc      	b.n	8005452 <StringToUnsignedInteger+0x82>
   unsigned long ret_val = 0;
 80054b8:	2400      	movs	r4, #0
}
 80054ba:	4620      	mov	r0, r4
 80054bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054be <StringParser>:
{
 80054be:	b538      	push	{r3, r4, r5, lr}
   if((String) && (BTPS_StringLength(String)))
 80054c0:	4605      	mov	r5, r0
 80054c2:	b1b0      	cbz	r0, 80054f2 <StringParser+0x34>
 80054c4:	f00e f86f 	bl	80135a6 <BTPS_StringLength>
 80054c8:	b108      	cbz	r0, 80054ce <StringParser+0x10>
      for(Index=0, ret_val=String;Index < BTPS_StringLength(String);Index++)
 80054ca:	2400      	movs	r4, #0
 80054cc:	e002      	b.n	80054d4 <StringParser+0x16>
   char *ret_val = NULL;
 80054ce:	2500      	movs	r5, #0
 80054d0:	e00f      	b.n	80054f2 <StringParser+0x34>
      for(Index=0, ret_val=String;Index < BTPS_StringLength(String);Index++)
 80054d2:	3401      	adds	r4, #1
 80054d4:	4628      	mov	r0, r5
 80054d6:	f00e f866 	bl	80135a6 <BTPS_StringLength>
 80054da:	42a0      	cmp	r0, r4
 80054dc:	d909      	bls.n	80054f2 <StringParser+0x34>
         if((String[Index] == ' ') || (String[Index] == '\r') || (String[Index] == '\n'))
 80054de:	192a      	adds	r2, r5, r4
 80054e0:	5d2b      	ldrb	r3, [r5, r4]
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d003      	beq.n	80054ee <StringParser+0x30>
 80054e6:	2b0d      	cmp	r3, #13
 80054e8:	d001      	beq.n	80054ee <StringParser+0x30>
 80054ea:	2b0a      	cmp	r3, #10
 80054ec:	d1f1      	bne.n	80054d2 <StringParser+0x14>
            String[Index] = '\0';
 80054ee:	2300      	movs	r3, #0
 80054f0:	7013      	strb	r3, [r2, #0]
}
 80054f2:	4628      	mov	r0, r5
 80054f4:	bd38      	pop	{r3, r4, r5, pc}

080054f6 <CommandParser>:
{
 80054f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   if((TempCommand) && (Input) && (BTPS_StringLength(Input)))
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d054      	beq.n	80055a8 <CommandParser+0xb2>
 80054fe:	460c      	mov	r4, r1
 8005500:	4680      	mov	r8, r0
 8005502:	2900      	cmp	r1, #0
 8005504:	d053      	beq.n	80055ae <CommandParser+0xb8>
 8005506:	4608      	mov	r0, r1
 8005508:	f00e f84d 	bl	80135a6 <BTPS_StringLength>
 800550c:	2800      	cmp	r0, #0
 800550e:	d051      	beq.n	80055b4 <CommandParser+0xbe>
      StringLength = BTPS_StringLength(Input);
 8005510:	4620      	mov	r0, r4
 8005512:	f00e f848 	bl	80135a6 <BTPS_StringLength>
 8005516:	4606      	mov	r6, r0
      TempCommand->Command = StringParser(Input);
 8005518:	4620      	mov	r0, r4
 800551a:	f7ff ffd0 	bl	80054be <StringParser>
 800551e:	f8c8 0000 	str.w	r0, [r8]
      TempCommand->Parameters.NumberofParameters = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	f8c8 3004 	str.w	r3, [r8, #4]
      if(TempCommand->Command)
 8005528:	2800      	cmp	r0, #0
 800552a:	d046      	beq.n	80055ba <CommandParser+0xc4>
         if(BTPS_StringLength(TempCommand->Command) == StringLength)
 800552c:	f00e f83b 	bl	80135a6 <BTPS_StringLength>
 8005530:	4286      	cmp	r6, r0
 8005532:	d106      	bne.n	8005542 <CommandParser+0x4c>
            Input     += StringLength;
 8005534:	4426      	add	r6, r4
         StringLength  = BTPS_StringLength(Input);
 8005536:	4630      	mov	r0, r6
 8005538:	f00e f835 	bl	80135a6 <BTPS_StringLength>
 800553c:	4604      	mov	r4, r0
   unsigned int   Count         = 0;
 800553e:	2700      	movs	r7, #0
         while((StringLength > 0) && ((LastParameter = StringParser(Input)) != NULL))
 8005540:	e00f      	b.n	8005562 <CommandParser+0x6c>
            Input     += BTPS_StringLength(TempCommand->Command) + 1;
 8005542:	f8d8 0000 	ldr.w	r0, [r8]
 8005546:	f00e f82e 	bl	80135a6 <BTPS_StringLength>
 800554a:	1c46      	adds	r6, r0, #1
 800554c:	4426      	add	r6, r4
 800554e:	e7f2      	b.n	8005536 <CommandParser+0x40>
                  Input     += BTPS_StringLength(LastParameter) + 1;
 8005550:	4648      	mov	r0, r9
 8005552:	f00e f828 	bl	80135a6 <BTPS_StringLength>
 8005556:	3001      	adds	r0, #1
 8005558:	4406      	add	r6, r0
               StringLength  = BTPS_StringLength(Input);
 800555a:	4630      	mov	r0, r6
 800555c:	f00e f823 	bl	80135a6 <BTPS_StringLength>
 8005560:	4604      	mov	r4, r0
   unsigned int   Count         = 0;
 8005562:	2500      	movs	r5, #0
         while((StringLength > 0) && ((LastParameter = StringParser(Input)) != NULL))
 8005564:	2c00      	cmp	r4, #0
 8005566:	dd1a      	ble.n	800559e <CommandParser+0xa8>
 8005568:	4630      	mov	r0, r6
 800556a:	f7ff ffa8 	bl	80054be <StringParser>
 800556e:	4681      	mov	r9, r0
 8005570:	b1a8      	cbz	r0, 800559e <CommandParser+0xa8>
               ret_val      = TO_MANY_PARAMS;
 8005572:	f06f 0504 	mvn.w	r5, #4
            if(Count < (sizeof(TempCommand->Parameters.Params)/sizeof(Parameter_t)))
 8005576:	2f04      	cmp	r7, #4
 8005578:	d80f      	bhi.n	800559a <CommandParser+0xa4>
               TempCommand->Parameters.Params[Count].strParam = LastParameter;
 800557a:	eb08 05c7 	add.w	r5, r8, r7, lsl #3
 800557e:	f8c5 9008 	str.w	r9, [r5, #8]
               TempCommand->Parameters.Params[Count].intParam = StringToUnsignedInteger(LastParameter);
 8005582:	4648      	mov	r0, r9
 8005584:	f7ff ff24 	bl	80053d0 <StringToUnsignedInteger>
 8005588:	60e8      	str	r0, [r5, #12]
               Count++;
 800558a:	3701      	adds	r7, #1
               if(BTPS_StringLength(LastParameter) == StringLength)
 800558c:	4648      	mov	r0, r9
 800558e:	f00e f80a 	bl	80135a6 <BTPS_StringLength>
 8005592:	42a0      	cmp	r0, r4
 8005594:	d1dc      	bne.n	8005550 <CommandParser+0x5a>
                  Input     += StringLength;
 8005596:	4426      	add	r6, r4
 8005598:	e7df      	b.n	800555a <CommandParser+0x64>
               StringLength = 0;
 800559a:	2400      	movs	r4, #0
 800559c:	e7e2      	b.n	8005564 <CommandParser+0x6e>
         TempCommand->Parameters.NumberofParameters = Count;
 800559e:	f8c8 7004 	str.w	r7, [r8, #4]
}
 80055a2:	4628      	mov	r0, r5
 80055a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret_val = INVALID_PARAMETERS_ERROR;
 80055a8:	f06f 0505 	mvn.w	r5, #5
 80055ac:	e7f9      	b.n	80055a2 <CommandParser+0xac>
 80055ae:	f06f 0505 	mvn.w	r5, #5
 80055b2:	e7f6      	b.n	80055a2 <CommandParser+0xac>
 80055b4:	f06f 0505 	mvn.w	r5, #5
 80055b8:	e7f3      	b.n	80055a2 <CommandParser+0xac>
         ret_val = NO_COMMAND_ERROR;
 80055ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   return(ret_val);
 80055be:	e7f0      	b.n	80055a2 <CommandParser+0xac>

080055c0 <GetLocalName>:
{
 80055c0:	b510      	push	{r4, lr}
 80055c2:	b08e      	sub	sp, #56	; 0x38
   if(GAPSInstanceID)
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <GetLocalName+0x50>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	b1db      	cbz	r3, 8005602 <GetLocalName+0x42>
      BTPS_MemInitialize(NameBuffer, 0, sizeof(NameBuffer));
 80055ca:	2231      	movs	r2, #49	; 0x31
 80055cc:	2100      	movs	r1, #0
 80055ce:	a801      	add	r0, sp, #4
 80055d0:	f00d ff75 	bl	80134be <BTPS_MemInitialize>
      ret_val = GAPS_Query_Device_Name(BluetoothStackID, GAPSInstanceID, NameBuffer);
 80055d4:	aa01      	add	r2, sp, #4
 80055d6:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <GetLocalName+0x50>)
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <GetLocalName+0x54>)
 80055dc:	6818      	ldr	r0, [r3, #0]
 80055de:	f7fc f88b 	bl	80016f8 <GAPS_Query_Device_Name>
      if(!ret_val)
 80055e2:	4604      	mov	r4, r0
 80055e4:	b930      	cbnz	r0, 80055f4 <GetLocalName+0x34>
         Display(("Device Name: %s.\r\n", NameBuffer));
 80055e6:	a901      	add	r1, sp, #4
 80055e8:	480b      	ldr	r0, [pc, #44]	; (8005618 <GetLocalName+0x58>)
 80055ea:	f00e f8e3 	bl	80137b4 <BTPS_OutputMessage>
}
 80055ee:	4620      	mov	r0, r4
 80055f0:	b00e      	add	sp, #56	; 0x38
 80055f2:	bd10      	pop	{r4, pc}
         DisplayFunctionError("GAPS_Query_Device_Name", ret_val);
 80055f4:	4601      	mov	r1, r0
 80055f6:	4809      	ldr	r0, [pc, #36]	; (800561c <GetLocalName+0x5c>)
 80055f8:	f7fc ffe6 	bl	80025c8 <DisplayFunctionError>
         ret_val = FUNCTION_ERROR;
 80055fc:	f06f 0403 	mvn.w	r4, #3
 8005600:	e7f5      	b.n	80055ee <GetLocalName+0x2e>
      Display(("GAP Service not registered.\r\n"));
 8005602:	4807      	ldr	r0, [pc, #28]	; (8005620 <GetLocalName+0x60>)
 8005604:	f00e f8d6 	bl	80137b4 <BTPS_OutputMessage>
      ret_val = FUNCTION_ERROR;
 8005608:	f06f 0403 	mvn.w	r4, #3
   return(ret_val);
 800560c:	e7ef      	b.n	80055ee <GetLocalName+0x2e>
 800560e:	bf00      	nop
 8005610:	200016b4 	.word	0x200016b4
 8005614:	20001578 	.word	0x20001578
 8005618:	0802e5a8 	.word	0x0802e5a8
 800561c:	0802e5bc 	.word	0x0802e5bc
 8005620:	0802bca4 	.word	0x0802bca4

08005624 <LESetPasskey>:
{
 8005624:	b510      	push	{r4, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	4604      	mov	r4, r0
   if(BluetoothStackID)
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <LESetPasskey+0x94>)
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	2800      	cmp	r0, #0
 8005630:	d03f      	beq.n	80056b2 <LESetPasskey+0x8e>
      if((TempParam) && (TempParam->NumberofParameters >= 1) && ((TempParam->Params[0].intParam == 0) || (TempParam->Params[0].intParam == 1)))
 8005632:	2c00      	cmp	r4, #0
 8005634:	d037      	beq.n	80056a6 <LESetPasskey+0x82>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	dd34      	ble.n	80056a6 <LESetPasskey+0x82>
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d831      	bhi.n	80056a6 <LESetPasskey+0x82>
         if(TempParam->Params[0].intParam == 1)
 8005642:	d00b      	beq.n	800565c <LESetPasskey+0x38>
            ret_val = GAP_LE_Set_Fixed_Passkey(BluetoothStackID, NULL);
 8005644:	2100      	movs	r1, #0
 8005646:	f017 fd4d 	bl	801d0e4 <GAP_LE_Set_Fixed_Passkey>
            if(!ret_val)
 800564a:	4604      	mov	r4, r0
 800564c:	b300      	cbz	r0, 8005690 <LESetPasskey+0x6c>
         if((ret_val) && (ret_val != INVALID_PARAMETERS_ERROR))
 800564e:	b114      	cbz	r4, 8005656 <LESetPasskey+0x32>
 8005650:	f114 0f06 	cmn.w	r4, #6
 8005654:	d120      	bne.n	8005698 <LESetPasskey+0x74>
}
 8005656:	4620      	mov	r0, r4
 8005658:	b002      	add	sp, #8
 800565a:	bd10      	pop	{r4, pc}
            if(BTPS_StringLength(TempParam->Params[1].strParam) <= GAP_LE_PASSKEY_MAXIMUM_NUMBER_OF_DIGITS)
 800565c:	68e0      	ldr	r0, [r4, #12]
 800565e:	f00d ffa2 	bl	80135a6 <BTPS_StringLength>
 8005662:	2806      	cmp	r0, #6
 8005664:	d80e      	bhi.n	8005684 <LESetPasskey+0x60>
               Passkey = (DWord_t)(TempParam->Params[1].intParam);
 8005666:	6923      	ldr	r3, [r4, #16]
 8005668:	9301      	str	r3, [sp, #4]
               ret_val = GAP_LE_Set_Fixed_Passkey(BluetoothStackID, &Passkey);
 800566a:	a901      	add	r1, sp, #4
 800566c:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <LESetPasskey+0x94>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	f017 fd38 	bl	801d0e4 <GAP_LE_Set_Fixed_Passkey>
               if(!ret_val)
 8005674:	4604      	mov	r4, r0
 8005676:	2800      	cmp	r0, #0
 8005678:	d1e9      	bne.n	800564e <LESetPasskey+0x2a>
                  Display(("Fixed Passkey set to %u.\r\n", Passkey));
 800567a:	9901      	ldr	r1, [sp, #4]
 800567c:	480f      	ldr	r0, [pc, #60]	; (80056bc <LESetPasskey+0x98>)
 800567e:	f00e f899 	bl	80137b4 <BTPS_OutputMessage>
 8005682:	e7e4      	b.n	800564e <LESetPasskey+0x2a>
               Display(("Error - Invalid Passkey.\r\n"));
 8005684:	480e      	ldr	r0, [pc, #56]	; (80056c0 <LESetPasskey+0x9c>)
 8005686:	f00e f895 	bl	80137b4 <BTPS_OutputMessage>
               ret_val = INVALID_PARAMETERS_ERROR;
 800568a:	f06f 0405 	mvn.w	r4, #5
 800568e:	e7df      	b.n	8005650 <LESetPasskey+0x2c>
               Display(("Fixed Passkey no longer configured.\r\n"));
 8005690:	480c      	ldr	r0, [pc, #48]	; (80056c4 <LESetPasskey+0xa0>)
 8005692:	f00e f88f 	bl	80137b4 <BTPS_OutputMessage>
 8005696:	e7da      	b.n	800564e <LESetPasskey+0x2a>
            DisplayFunctionError("GAP_LE_Set_Fixed_Passkey", ret_val);
 8005698:	4621      	mov	r1, r4
 800569a:	480b      	ldr	r0, [pc, #44]	; (80056c8 <LESetPasskey+0xa4>)
 800569c:	f7fc ff94 	bl	80025c8 <DisplayFunctionError>
            ret_val = FUNCTION_ERROR;
 80056a0:	f06f 0403 	mvn.w	r4, #3
 80056a4:	e7d7      	b.n	8005656 <LESetPasskey+0x32>
         DisplayUsage("SetPasskey [(0 = UnSet Passkey, 1 = Set Fixed Passkey)] [6 Digit Passkey (optional)]");
 80056a6:	4809      	ldr	r0, [pc, #36]	; (80056cc <LESetPasskey+0xa8>)
 80056a8:	f7fc fd54 	bl	8002154 <DisplayUsage>
         ret_val = INVALID_PARAMETERS_ERROR;
 80056ac:	f06f 0405 	mvn.w	r4, #5
 80056b0:	e7d1      	b.n	8005656 <LESetPasskey+0x32>
      ret_val = INVALID_STACK_ID_ERROR;
 80056b2:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 80056b6:	e7ce      	b.n	8005656 <LESetPasskey+0x32>
 80056b8:	20001578 	.word	0x20001578
 80056bc:	0802e5d4 	.word	0x0802e5d4
 80056c0:	0802e5f0 	.word	0x0802e5f0
 80056c4:	0802e60c 	.word	0x0802e60c
 80056c8:	0802e634 	.word	0x0802e634
 80056cc:	0802e650 	.word	0x0802e650

080056d0 <LEQueryEncryption>:
{
 80056d0:	b510      	push	{r4, lr}
 80056d2:	b082      	sub	sp, #8
   if(BluetoothStackID)
 80056d4:	4b1d      	ldr	r3, [pc, #116]	; (800574c <LEQueryEncryption+0x7c>)
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	2800      	cmp	r0, #0
 80056da:	d033      	beq.n	8005744 <LEQueryEncryption+0x74>
      if(!COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR))
 80056dc:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <LEQueryEncryption+0x80>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b973      	cbnz	r3, 8005700 <LEQueryEncryption+0x30>
 80056e2:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <LEQueryEncryption+0x80>)
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	b95b      	cbnz	r3, 8005700 <LEQueryEncryption+0x30>
 80056e8:	4b19      	ldr	r3, [pc, #100]	; (8005750 <LEQueryEncryption+0x80>)
 80056ea:	789b      	ldrb	r3, [r3, #2]
 80056ec:	b943      	cbnz	r3, 8005700 <LEQueryEncryption+0x30>
 80056ee:	4b18      	ldr	r3, [pc, #96]	; (8005750 <LEQueryEncryption+0x80>)
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	b92b      	cbnz	r3, 8005700 <LEQueryEncryption+0x30>
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <LEQueryEncryption+0x80>)
 80056f6:	791b      	ldrb	r3, [r3, #4]
 80056f8:	b913      	cbnz	r3, 8005700 <LEQueryEncryption+0x30>
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <LEQueryEncryption+0x80>)
 80056fc:	795b      	ldrb	r3, [r3, #5]
 80056fe:	b1db      	cbz	r3, 8005738 <LEQueryEncryption+0x68>
         ret_val = GAP_LE_Query_Encryption_Mode(BluetoothStackID, ConnectionBD_ADDR, &GAP_Encryption_Mode);
 8005700:	4a13      	ldr	r2, [pc, #76]	; (8005750 <LEQueryEncryption+0x80>)
 8005702:	f10d 0307 	add.w	r3, sp, #7
 8005706:	ca06      	ldmia	r2, {r1, r2}
 8005708:	f017 fade 	bl	801ccc8 <GAP_LE_Query_Encryption_Mode>
         if(!ret_val)
 800570c:	4604      	mov	r4, r0
 800570e:	b960      	cbnz	r0, 800572a <LEQueryEncryption+0x5a>
            Display(("Current Encryption Mode: %s.\r\n", (GAP_Encryption_Mode == emEnabled)?"Enabled":"Disabled"));
 8005710:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d006      	beq.n	8005726 <LEQueryEncryption+0x56>
 8005718:	490e      	ldr	r1, [pc, #56]	; (8005754 <LEQueryEncryption+0x84>)
 800571a:	480f      	ldr	r0, [pc, #60]	; (8005758 <LEQueryEncryption+0x88>)
 800571c:	f00e f84a 	bl	80137b4 <BTPS_OutputMessage>
}
 8005720:	4620      	mov	r0, r4
 8005722:	b002      	add	sp, #8
 8005724:	bd10      	pop	{r4, pc}
            Display(("Current Encryption Mode: %s.\r\n", (GAP_Encryption_Mode == emEnabled)?"Enabled":"Disabled"));
 8005726:	490d      	ldr	r1, [pc, #52]	; (800575c <LEQueryEncryption+0x8c>)
 8005728:	e7f7      	b.n	800571a <LEQueryEncryption+0x4a>
            DisplayFunctionError("GAP_LE_Query_Encryption_Mode", ret_val);
 800572a:	4601      	mov	r1, r0
 800572c:	480c      	ldr	r0, [pc, #48]	; (8005760 <LEQueryEncryption+0x90>)
 800572e:	f7fc ff4b 	bl	80025c8 <DisplayFunctionError>
            ret_val = FUNCTION_ERROR;
 8005732:	f06f 0403 	mvn.w	r4, #3
 8005736:	e7f3      	b.n	8005720 <LEQueryEncryption+0x50>
         Display(("Not Connected.\r\n"));
 8005738:	480a      	ldr	r0, [pc, #40]	; (8005764 <LEQueryEncryption+0x94>)
 800573a:	f00e f83b 	bl	80137b4 <BTPS_OutputMessage>
         ret_val = FUNCTION_ERROR;
 800573e:	f06f 0403 	mvn.w	r4, #3
 8005742:	e7ed      	b.n	8005720 <LEQueryEncryption+0x50>
      ret_val = INVALID_STACK_ID_ERROR;
 8005744:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 8005748:	e7ea      	b.n	8005720 <LEQueryEncryption+0x50>
 800574a:	bf00      	nop
 800574c:	20001578 	.word	0x20001578
 8005750:	20001684 	.word	0x20001684
 8005754:	0802e6a8 	.word	0x0802e6a8
 8005758:	0802e6bc 	.word	0x0802e6bc
 800575c:	0802e6b4 	.word	0x0802e6b4
 8005760:	0802e6dc 	.word	0x0802e6dc
 8005764:	0802e6fc 	.word	0x0802e6fc

08005768 <SetBaudRate>:
{
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4604      	mov	r4, r0
   if(BluetoothStackID)
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <SetBaudRate+0x4c>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	b1e8      	cbz	r0, 80057ae <SetBaudRate+0x46>
      if((TempParam) && (TempParam->NumberofParameters > 0) && (TempParam->Params[0].intParam))
 8005772:	b1b4      	cbz	r4, 80057a2 <SetBaudRate+0x3a>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	dd13      	ble.n	80057a2 <SetBaudRate+0x3a>
 800577a:	68a1      	ldr	r1, [r4, #8]
 800577c:	b189      	cbz	r1, 80057a2 <SetBaudRate+0x3a>
         ret_val = VS_Update_UART_Baud_Rate(BluetoothStackID, (DWord_t)TempParam->Params[0].intParam);
 800577e:	f00e f9d4 	bl	8013b2a <VS_Update_UART_Baud_Rate>
         if(!ret_val)
 8005782:	4605      	mov	r5, r0
 8005784:	b928      	cbnz	r0, 8005792 <SetBaudRate+0x2a>
            Display(("VS_Update_UART_Baud_Rate(%u): Success.\r\n", TempParam->Params[0].intParam));
 8005786:	68a1      	ldr	r1, [r4, #8]
 8005788:	480b      	ldr	r0, [pc, #44]	; (80057b8 <SetBaudRate+0x50>)
 800578a:	f00e f813 	bl	80137b4 <BTPS_OutputMessage>
}
 800578e:	4628      	mov	r0, r5
 8005790:	bd38      	pop	{r3, r4, r5, pc}
            Display(("VS_Update_UART_Baud_Rate(%u): Failure %d, %d.\r\n", TempParam->Params[0].intParam, ret_val));
 8005792:	4602      	mov	r2, r0
 8005794:	68a1      	ldr	r1, [r4, #8]
 8005796:	4809      	ldr	r0, [pc, #36]	; (80057bc <SetBaudRate+0x54>)
 8005798:	f00e f80c 	bl	80137b4 <BTPS_OutputMessage>
            ret_val = FUNCTION_ERROR;
 800579c:	f06f 0503 	mvn.w	r5, #3
 80057a0:	e7f5      	b.n	800578e <SetBaudRate+0x26>
         DisplayUsage("SetBaudRate [BaudRate]");
 80057a2:	4807      	ldr	r0, [pc, #28]	; (80057c0 <SetBaudRate+0x58>)
 80057a4:	f7fc fcd6 	bl	8002154 <DisplayUsage>
         ret_val = INVALID_PARAMETERS_ERROR;
 80057a8:	f06f 0505 	mvn.w	r5, #5
 80057ac:	e7ef      	b.n	800578e <SetBaudRate+0x26>
      ret_val = INVALID_PARAMETERS_ERROR;
 80057ae:	f06f 0505 	mvn.w	r5, #5
   return(ret_val);
 80057b2:	e7ec      	b.n	800578e <SetBaudRate+0x26>
 80057b4:	20001578 	.word	0x20001578
 80057b8:	0802e710 	.word	0x0802e710
 80057bc:	0802e73c 	.word	0x0802e73c
 80057c0:	0802e76c 	.word	0x0802e76c

080057c4 <ResolveRemoteAddressHelper>:
{
 80057c4:	b500      	push	{lr}
 80057c6:	b083      	sub	sp, #12
 80057c8:	ab02      	add	r3, sp, #8
 80057ca:	e903 0003 	stmdb	r3, {r0, r1}
   if(GAP_LE_TEST_RESOLVABLE_ADDRESS_BITS(BD_ADDR))
 80057ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80057d2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057d6:	d002      	beq.n	80057de <ResolveRemoteAddressHelper+0x1a>
 80057d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057dc:	d002      	beq.n	80057e4 <ResolveRemoteAddressHelper+0x20>
}
 80057de:	b003      	add	sp, #12
 80057e0:	f85d fb04 	ldr.w	pc, [sp], #4
      if(GAP_LE_Resolve_Address(BluetoothStackID,&IRK,BD_ADDR))
 80057e4:	ab02      	add	r3, sp, #8
 80057e6:	e913 000c 	ldmdb	r3, {r2, r3}
 80057ea:	4907      	ldr	r1, [pc, #28]	; (8005808 <ResolveRemoteAddressHelper+0x44>)
 80057ec:	4807      	ldr	r0, [pc, #28]	; (800580c <ResolveRemoteAddressHelper+0x48>)
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	f017 fc02 	bl	801cff8 <GAP_LE_Resolve_Address>
 80057f4:	b118      	cbz	r0, 80057fe <ResolveRemoteAddressHelper+0x3a>
         Display(("GAP_LE_Resolve_Address Success: \r\n\n"));
 80057f6:	4806      	ldr	r0, [pc, #24]	; (8005810 <ResolveRemoteAddressHelper+0x4c>)
 80057f8:	f00d ffdc 	bl	80137b4 <BTPS_OutputMessage>
 80057fc:	e7ef      	b.n	80057de <ResolveRemoteAddressHelper+0x1a>
         Display(("GAP_LE_Resolve_Address Failure: \r\n\n"));
 80057fe:	4805      	ldr	r0, [pc, #20]	; (8005814 <ResolveRemoteAddressHelper+0x50>)
 8005800:	f00d ffd8 	bl	80137b4 <BTPS_OutputMessage>
}
 8005804:	e7eb      	b.n	80057de <ResolveRemoteAddressHelper+0x1a>
 8005806:	bf00      	nop
 8005808:	200016bc 	.word	0x200016bc
 800580c:	20001578 	.word	0x20001578
 8005810:	0802e784 	.word	0x0802e784
 8005814:	0802e7a8 	.word	0x0802e7a8

08005818 <ConnectLEDevice>:
{
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	b08e      	sub	sp, #56	; 0x38
 800581c:	ac06      	add	r4, sp, #24
 800581e:	e884 0006 	stmia.w	r4, {r1, r2}
 8005822:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
   if((BluetoothStackID) && (!COMPARE_NULL_BD_ADDR(BD_ADDR)))
 8005826:	2800      	cmp	r0, #0
 8005828:	f000 8088 	beq.w	800593c <ConnectLEDevice+0x124>
 800582c:	461d      	mov	r5, r3
 800582e:	4606      	mov	r6, r0
 8005830:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005834:	b97b      	cbnz	r3, 8005856 <ConnectLEDevice+0x3e>
 8005836:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800583a:	b963      	cbnz	r3, 8005856 <ConnectLEDevice+0x3e>
 800583c:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8005840:	b94b      	cbnz	r3, 8005856 <ConnectLEDevice+0x3e>
 8005842:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005846:	b933      	cbnz	r3, 8005856 <ConnectLEDevice+0x3e>
 8005848:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800584c:	b91b      	cbnz	r3, 8005856 <ConnectLEDevice+0x3e>
 800584e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d075      	beq.n	8005942 <ConnectLEDevice+0x12a>
      if(COMPARE_NULL_BD_ADDR(ConnectionBD_ADDR))
 8005856:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <ConnectLEDevice+0x130>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d168      	bne.n	8005930 <ConnectLEDevice+0x118>
 800585e:	4b3a      	ldr	r3, [pc, #232]	; (8005948 <ConnectLEDevice+0x130>)
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d164      	bne.n	8005930 <ConnectLEDevice+0x118>
 8005866:	4b38      	ldr	r3, [pc, #224]	; (8005948 <ConnectLEDevice+0x130>)
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d160      	bne.n	8005930 <ConnectLEDevice+0x118>
 800586e:	4b36      	ldr	r3, [pc, #216]	; (8005948 <ConnectLEDevice+0x130>)
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d15c      	bne.n	8005930 <ConnectLEDevice+0x118>
 8005876:	4b34      	ldr	r3, [pc, #208]	; (8005948 <ConnectLEDevice+0x130>)
 8005878:	791b      	ldrb	r3, [r3, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d158      	bne.n	8005930 <ConnectLEDevice+0x118>
 800587e:	4b32      	ldr	r3, [pc, #200]	; (8005948 <ConnectLEDevice+0x130>)
 8005880:	795b      	ldrb	r3, [r3, #5]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d154      	bne.n	8005930 <ConnectLEDevice+0x118>
         WhiteListEntry.Address_Type = RemoteAddressType;
 8005886:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
         WhiteListEntry.Address      = BD_ADDR;
 800588a:	9806      	ldr	r0, [sp, #24]
 800588c:	f8cd 002d 	str.w	r0, [sp, #45]	; 0x2d
 8005890:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8005894:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
         GAP_LE_Remove_Device_From_White_List(BluetoothStackID, 1, &WhiteListEntry, &WhiteListChanged);
 8005898:	ab0d      	add	r3, sp, #52	; 0x34
 800589a:	aa0b      	add	r2, sp, #44	; 0x2c
 800589c:	2101      	movs	r1, #1
 800589e:	4630      	mov	r0, r6
 80058a0:	f017 fb0b 	bl	801ceba <GAP_LE_Remove_Device_From_White_List>
         if(UseWhiteList)
 80058a4:	bb8c      	cbnz	r4, 800590a <ConnectLEDevice+0xf2>
            Result = 1;
 80058a6:	2401      	movs	r4, #1
            ConnectionParameters.Connection_Interval_Min    = 50;
 80058a8:	2332      	movs	r3, #50	; 0x32
 80058aa:	f8ad 3020 	strh.w	r3, [sp, #32]
            ConnectionParameters.Connection_Interval_Max    = 200;
 80058ae:	23c8      	movs	r3, #200	; 0xc8
 80058b0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            ConnectionParameters.Minimum_Connection_Length  = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            ConnectionParameters.Maximum_Connection_Length  = 10000;
 80058ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80058be:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            ConnectionParameters.Slave_Latency              = 0;
 80058c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            ConnectionParameters.Supervision_Timeout        = 20000;
 80058c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80058ca:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            Result = GAP_LE_Create_Connection(BluetoothStackID, 100, 100, Result?fpNoFilter:fpWhiteList, RemoteAddressType, Result?&BD_ADDR:NULL, OwnAddressType, &ConnectionParameters, GAP_LE_Event_Callback, 0);
 80058ce:	2c00      	cmp	r4, #0
 80058d0:	bf0c      	ite	eq
 80058d2:	2301      	moveq	r3, #1
 80058d4:	2300      	movne	r3, #0
 80058d6:	d024      	beq.n	8005922 <ConnectLEDevice+0x10a>
 80058d8:	aa06      	add	r2, sp, #24
 80058da:	2100      	movs	r1, #0
 80058dc:	9105      	str	r1, [sp, #20]
 80058de:	491b      	ldr	r1, [pc, #108]	; (800594c <ConnectLEDevice+0x134>)
 80058e0:	9104      	str	r1, [sp, #16]
 80058e2:	a908      	add	r1, sp, #32
 80058e4:	9103      	str	r1, [sp, #12]
 80058e6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80058ea:	9102      	str	r1, [sp, #8]
 80058ec:	9201      	str	r2, [sp, #4]
 80058ee:	9500      	str	r5, [sp, #0]
 80058f0:	2264      	movs	r2, #100	; 0x64
 80058f2:	4611      	mov	r1, r2
 80058f4:	4630      	mov	r0, r6
 80058f6:	f016 fed1 	bl	801c69c <GAP_LE_Create_Connection>
            if(!Result)
 80058fa:	4604      	mov	r4, r0
 80058fc:	b998      	cbnz	r0, 8005926 <ConnectLEDevice+0x10e>
               Display(("Connection Request successful.\r\n"));
 80058fe:	4814      	ldr	r0, [pc, #80]	; (8005950 <ConnectLEDevice+0x138>)
 8005900:	f00d ff58 	bl	80137b4 <BTPS_OutputMessage>
}
 8005904:	4620      	mov	r0, r4
 8005906:	b00e      	add	sp, #56	; 0x38
 8005908:	bd70      	pop	{r4, r5, r6, pc}
            Result = GAP_LE_Add_Device_To_White_List(BluetoothStackID, 1, &WhiteListEntry, &WhiteListChanged);
 800590a:	ab0d      	add	r3, sp, #52	; 0x34
 800590c:	aa0b      	add	r2, sp, #44	; 0x2c
 800590e:	2101      	movs	r1, #1
 8005910:	4630      	mov	r0, r6
 8005912:	f016 fc01 	bl	801c118 <GAP_LE_Add_Device_To_White_List>
         if(Result >= 0)
 8005916:	1e04      	subs	r4, r0, #0
 8005918:	dac6      	bge.n	80058a8 <ConnectLEDevice+0x90>
            Display(("Unable to add device to White List.\r\n"));
 800591a:	480e      	ldr	r0, [pc, #56]	; (8005954 <ConnectLEDevice+0x13c>)
 800591c:	f00d ff4a 	bl	80137b4 <BTPS_OutputMessage>
 8005920:	e7f0      	b.n	8005904 <ConnectLEDevice+0xec>
            Result = GAP_LE_Create_Connection(BluetoothStackID, 100, 100, Result?fpNoFilter:fpWhiteList, RemoteAddressType, Result?&BD_ADDR:NULL, OwnAddressType, &ConnectionParameters, GAP_LE_Event_Callback, 0);
 8005922:	2200      	movs	r2, #0
 8005924:	e7d9      	b.n	80058da <ConnectLEDevice+0xc2>
               Display(("Unable to create connection: %d.\r\n", Result));
 8005926:	4601      	mov	r1, r0
 8005928:	480b      	ldr	r0, [pc, #44]	; (8005958 <ConnectLEDevice+0x140>)
 800592a:	f00d ff43 	bl	80137b4 <BTPS_OutputMessage>
 800592e:	e7e9      	b.n	8005904 <ConnectLEDevice+0xec>
         Display(("Device is already connected.\r\n"));
 8005930:	480a      	ldr	r0, [pc, #40]	; (800595c <ConnectLEDevice+0x144>)
 8005932:	f00d ff3f 	bl	80137b4 <BTPS_OutputMessage>
         Result = -2;
 8005936:	f06f 0401 	mvn.w	r4, #1
 800593a:	e7e3      	b.n	8005904 <ConnectLEDevice+0xec>
      Result = -1;
 800593c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005940:	e7e0      	b.n	8005904 <ConnectLEDevice+0xec>
 8005942:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   return(Result);
 8005946:	e7dd      	b.n	8005904 <ConnectLEDevice+0xec>
 8005948:	20001684 	.word	0x20001684
 800594c:	08003bed 	.word	0x08003bed
 8005950:	0802e7cc 	.word	0x0802e7cc
 8005954:	0802e814 	.word	0x0802e814
 8005958:	0802e7f0 	.word	0x0802e7f0
 800595c:	0802e83c 	.word	0x0802e83c

08005960 <ConnectLE>:
   if(BluetoothStackID)
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <ConnectLE+0xa0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d047      	beq.n	80059f8 <ConnectLE+0x98>
{
 8005968:	b530      	push	{r4, r5, lr}
 800596a:	b085      	sub	sp, #20
 800596c:	4604      	mov	r4, r0
      if (TempParam && (BTPS_StringLength(TempParam->Params[0].strParam) >= (sizeof(BD_ADDR_t)*2)) && (TempParam->Params[0].strParam))
 800596e:	2800      	cmp	r0, #0
 8005970:	d03c      	beq.n	80059ec <ConnectLE+0x8c>
 8005972:	6840      	ldr	r0, [r0, #4]
 8005974:	f00d fe17 	bl	80135a6 <BTPS_StringLength>
 8005978:	280b      	cmp	r0, #11
 800597a:	d937      	bls.n	80059ec <ConnectLE+0x8c>
 800597c:	6860      	ldr	r0, [r4, #4]
 800597e:	2800      	cmp	r0, #0
 8005980:	d034      	beq.n	80059ec <ConnectLE+0x8c>
          StrToBD_ADDR(TempParam->Params[0].strParam, &BD_ADDR);
 8005982:	a902      	add	r1, sp, #8
 8005984:	f7ff fce8 	bl	8005358 <StrToBD_ADDR>
          switch(TempParam->NumberofParameters)
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d010      	beq.n	80059b0 <ConnectLE+0x50>
 800598e:	2b03      	cmp	r3, #3
 8005990:	d007      	beq.n	80059a2 <ConnectLE+0x42>
 8005992:	2b01      	cmp	r3, #1
 8005994:	d027      	beq.n	80059e6 <ConnectLE+0x86>
              DisplayConnectLEUsage("ConnectLE");
 8005996:	481b      	ldr	r0, [pc, #108]	; (8005a04 <ConnectLE+0xa4>)
 8005998:	f7fc fcb0 	bl	80022fc <DisplayConnectLEUsage>
              ret_val = INVALID_PARAMETERS_ERROR;
 800599c:	f06f 0005 	mvn.w	r0, #5
 80059a0:	e018      	b.n	80059d4 <ConnectLE+0x74>
                      if ((TempParam->Params[2].intParam >= 0) && (TempParam->Params[2].intParam <= 1))
 80059a2:	69a5      	ldr	r5, [r4, #24]
 80059a4:	2d01      	cmp	r5, #1
 80059a6:	d8f6      	bhi.n	8005996 <ConnectLE+0x36>
                          OwnAddressType  = (TempParam->Params[2].intParam == 0) ?latPublic :latRandom;
 80059a8:	3d00      	subs	r5, #0
 80059aa:	bf18      	it	ne
 80059ac:	2501      	movne	r5, #1
 80059ae:	e000      	b.n	80059b2 <ConnectLE+0x52>
          switch(TempParam->NumberofParameters)
 80059b0:	2500      	movs	r5, #0
                      if ((TempParam->Params[1].intParam >= 0) && (TempParam->Params[1].intParam <= 1))
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d8ee      	bhi.n	8005996 <ConnectLE+0x36>
                          if (TempParam->Params[1].intParam  == 1)
 80059b8:	d00e      	beq.n	80059d8 <ConnectLE+0x78>
   GAP_LE_Address_Type_t RemoteAddressType = latPublic;
 80059ba:	2300      	movs	r3, #0
                      if(!ConnectLEDevice(BluetoothStackID, BD_ADDR, RemoteAddressType, OwnAddressType, FALSE))
 80059bc:	2200      	movs	r2, #0
 80059be:	9201      	str	r2, [sp, #4]
 80059c0:	9500      	str	r5, [sp, #0]
 80059c2:	aa04      	add	r2, sp, #16
 80059c4:	e912 0006 	ldmdb	r2, {r1, r2}
 80059c8:	480d      	ldr	r0, [pc, #52]	; (8005a00 <ConnectLE+0xa0>)
 80059ca:	6800      	ldr	r0, [r0, #0]
 80059cc:	f7ff ff24 	bl	8005818 <ConnectLEDevice>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d1e0      	bne.n	8005996 <ConnectLE+0x36>
}
 80059d4:	b005      	add	sp, #20
 80059d6:	bd30      	pop	{r4, r5, pc}
                              ResolveRemoteAddressHelper(BD_ADDR);
 80059d8:	ab04      	add	r3, sp, #16
 80059da:	e913 0003 	ldmdb	r3, {r0, r1}
 80059de:	f7ff fef1 	bl	80057c4 <ResolveRemoteAddressHelper>
                              RemoteAddressType  = latRandom;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7ea      	b.n	80059bc <ConnectLE+0x5c>
          switch(TempParam->NumberofParameters)
 80059e6:	2300      	movs	r3, #0
 80059e8:	461d      	mov	r5, r3
 80059ea:	e7e7      	b.n	80059bc <ConnectLE+0x5c>
          DisplayConnectLEUsage("ConnectLE");
 80059ec:	4805      	ldr	r0, [pc, #20]	; (8005a04 <ConnectLE+0xa4>)
 80059ee:	f7fc fc85 	bl	80022fc <DisplayConnectLEUsage>
          ret_val = INVALID_PARAMETERS_ERROR;
 80059f2:	f06f 0005 	mvn.w	r0, #5
 80059f6:	e7ed      	b.n	80059d4 <ConnectLE+0x74>
      ret_val = INVALID_STACK_ID_ERROR;
 80059f8:	f06f 0007 	mvn.w	r0, #7
}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20001578 	.word	0x20001578
 8005a04:	0802e85c 	.word	0x0802e85c

08005a08 <StopScan>:
{
 8005a08:	b510      	push	{r4, lr}
   if(BluetoothStackID)
 8005a0a:	b168      	cbz	r0, 8005a28 <StopScan+0x20>
      Result = GAP_LE_Cancel_Scan(BluetoothStackID);
 8005a0c:	f016 fdcc 	bl	801c5a8 <GAP_LE_Cancel_Scan>
      if(!Result)
 8005a10:	4604      	mov	r4, r0
 8005a12:	b920      	cbnz	r0, 8005a1e <StopScan+0x16>
         Display(("Scan stopped successfully.\r\n"));
 8005a14:	4806      	ldr	r0, [pc, #24]	; (8005a30 <StopScan+0x28>)
 8005a16:	f00d fecd 	bl	80137b4 <BTPS_OutputMessage>
}
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	bd10      	pop	{r4, pc}
         Display(("Unable to stop scan: %d\r\n", Result));
 8005a1e:	4601      	mov	r1, r0
 8005a20:	4804      	ldr	r0, [pc, #16]	; (8005a34 <StopScan+0x2c>)
 8005a22:	f00d fec7 	bl	80137b4 <BTPS_OutputMessage>
 8005a26:	e7f8      	b.n	8005a1a <StopScan+0x12>
      Result = -1;
 8005a28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   return(Result);
 8005a2c:	e7f5      	b.n	8005a1a <StopScan+0x12>
 8005a2e:	bf00      	nop
 8005a30:	0802e868 	.word	0x0802e868
 8005a34:	0802e888 	.word	0x0802e888

08005a38 <StopScanning>:
{
 8005a38:	b508      	push	{r3, lr}
   if(BluetoothStackID)
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <StopScanning+0x1c>)
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	b118      	cbz	r0, 8005a48 <StopScanning+0x10>
      if(!StopScan(BluetoothStackID))
 8005a40:	f7ff ffe2 	bl	8005a08 <StopScan>
 8005a44:	b918      	cbnz	r0, 8005a4e <StopScanning+0x16>
}
 8005a46:	bd08      	pop	{r3, pc}
      ret_val = INVALID_STACK_ID_ERROR;
 8005a48:	f06f 0007 	mvn.w	r0, #7
 8005a4c:	e7fb      	b.n	8005a46 <StopScanning+0xe>
         ret_val = FUNCTION_ERROR;
 8005a4e:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 8005a52:	e7f8      	b.n	8005a46 <StopScanning+0xe>
 8005a54:	20001578 	.word	0x20001578

08005a58 <StartScan>:
{
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	b086      	sub	sp, #24
   if(BluetoothStackID)
 8005a5c:	b1c0      	cbz	r0, 8005a90 <StartScan+0x38>
      Result = GAP_LE_Perform_Scan(BluetoothStackID, stActive, 10, 10, latPublic, fpNoFilter, TRUE, GAP_LE_Event_Callback, 0);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	9304      	str	r3, [sp, #16]
 8005a62:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <StartScan+0x40>)
 8005a64:	9203      	str	r2, [sp, #12]
 8005a66:	2101      	movs	r1, #1
 8005a68:	9102      	str	r1, [sp, #8]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	230a      	movs	r3, #10
 8005a70:	461a      	mov	r2, r3
 8005a72:	f017 f8b3 	bl	801cbdc <GAP_LE_Perform_Scan>
      if(!Result)
 8005a76:	4604      	mov	r4, r0
 8005a78:	b928      	cbnz	r0, 8005a86 <StartScan+0x2e>
         Display(("Scan started successfully.\r\n"));
 8005a7a:	4808      	ldr	r0, [pc, #32]	; (8005a9c <StartScan+0x44>)
 8005a7c:	f00d fe9a 	bl	80137b4 <BTPS_OutputMessage>
}
 8005a80:	4620      	mov	r0, r4
 8005a82:	b006      	add	sp, #24
 8005a84:	bd10      	pop	{r4, pc}
         Display(("Unable to perform scan: %d\r\n", Result));
 8005a86:	4601      	mov	r1, r0
 8005a88:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <StartScan+0x48>)
 8005a8a:	f00d fe93 	bl	80137b4 <BTPS_OutputMessage>
 8005a8e:	e7f7      	b.n	8005a80 <StartScan+0x28>
      Result = -1;
 8005a90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   return(Result);
 8005a94:	e7f4      	b.n	8005a80 <StartScan+0x28>
 8005a96:	bf00      	nop
 8005a98:	08003bed 	.word	0x08003bed
 8005a9c:	0802e8a4 	.word	0x0802e8a4
 8005aa0:	0802e8c4 	.word	0x0802e8c4

08005aa4 <StartScanning>:
{
 8005aa4:	b508      	push	{r3, lr}
   if(BluetoothStackID)
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <StartScanning+0x1c>)
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	b118      	cbz	r0, 8005ab4 <StartScanning+0x10>
      if(!StartScan(BluetoothStackID))
 8005aac:	f7ff ffd4 	bl	8005a58 <StartScan>
 8005ab0:	b918      	cbnz	r0, 8005aba <StartScanning+0x16>
}
 8005ab2:	bd08      	pop	{r3, pc}
      ret_val = INVALID_STACK_ID_ERROR;
 8005ab4:	f06f 0007 	mvn.w	r0, #7
 8005ab8:	e7fb      	b.n	8005ab2 <StartScanning+0xe>
         ret_val = FUNCTION_ERROR;
 8005aba:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 8005abe:	e7f8      	b.n	8005ab2 <StartScanning+0xe>
 8005ac0:	20001578 	.word	0x20001578

08005ac4 <AdvertiseLE>:
{
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	b092      	sub	sp, #72	; 0x48
 8005ac8:	4604      	mov	r4, r0
   if(BluetoothStackID)
 8005aca:	4b90      	ldr	r3, [pc, #576]	; (8005d0c <AdvertiseLE+0x248>)
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f000 8118 	beq.w	8005d04 <AdvertiseLE+0x240>
      if(TempParam && (TempParam->Params[0].strParam)) 
 8005ad4:	2c00      	cmp	r4, #0
 8005ad6:	f000 8109 	beq.w	8005cec <AdvertiseLE+0x228>
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8105 	beq.w	8005cec <AdvertiseLE+0x228>
         if  ((TempParam->NumberofParameters >= 1) && ((TempParam->Params[0].intParam == 0) || (TempParam->Params[0].intParam == 1)))
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f340 80f5 	ble.w	8005cd4 <AdvertiseLE+0x210>
 8005aea:	68a2      	ldr	r2, [r4, #8]
 8005aec:	2a01      	cmp	r2, #1
 8005aee:	f200 80f1 	bhi.w	8005cd4 <AdvertiseLE+0x210>
             if(TempParam->Params[0].intParam == 0)
 8005af2:	2a00      	cmp	r2, #0
 8005af4:	f000 8096 	beq.w	8005c24 <AdvertiseLE+0x160>
                if(TempParam->NumberofParameters >= 2) 
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	f340 80ad 	ble.w	8005c58 <AdvertiseLE+0x194>
                    if (TempParam->Params[1].intParam == 1)
 8005afe:	6922      	ldr	r2, [r4, #16]
 8005b00:	2a01      	cmp	r2, #1
 8005b02:	f000 809e 	beq.w	8005c42 <AdvertiseLE+0x17e>
                       if ((TempParam->Params[1].intParam != 0) || (TempParam->NumberofParameters != 2))
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	f040 80d8 	bne.w	8005cbc <AdvertiseLE+0x1f8>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	f040 80d5 	bne.w	8005cbc <AdvertiseLE+0x1f8>
   GAP_LE_Address_Type_t               OwnAddressType = latPublic;
 8005b12:	2400      	movs	r4, #0
                    BTPS_MemInitialize(&(Advertisement_Data_Buffer.AdvertisingData), 0, sizeof(Advertising_Data_t));
 8005b14:	221f      	movs	r2, #31
 8005b16:	2100      	movs	r1, #0
 8005b18:	a803      	add	r0, sp, #12
 8005b1a:	f00d fcd0 	bl	80134be <BTPS_MemInitialize>
                    Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[0] = 2;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	f88d 300c 	strb.w	r3, [sp, #12]
                    Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[1] = HCI_LE_ADVERTISING_REPORT_DATA_TYPE_FLAGS;
 8005b24:	2301      	movs	r3, #1
 8005b26:	f88d 300d 	strb.w	r3, [sp, #13]
                    if(LE_Parameters.DiscoverabilityMode == dmGeneralDiscoverableMode)
 8005b2a:	4b79      	ldr	r3, [pc, #484]	; (8005d10 <AdvertiseLE+0x24c>)
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	f000 8094 	beq.w	8005c5c <AdvertiseLE+0x198>
                       if(LE_Parameters.DiscoverabilityMode == dmLimitedDiscoverableMode)
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f000 8094 	beq.w	8005c62 <AdvertiseLE+0x19e>
           	 		if(HRSInstanceID)
 8005b3a:	4b76      	ldr	r3, [pc, #472]	; (8005d14 <AdvertiseLE+0x250>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	b153      	cbz	r3, 8005b56 <AdvertiseLE+0x92>
                       Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[3] = 3;
 8005b40:	2303      	movs	r3, #3
 8005b42:	f88d 300f 	strb.w	r3, [sp, #15]
                       Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[4] = HCI_LE_ADVERTISING_REPORT_DATA_TYPE_16_BIT_SERVICE_UUID_COMPLETE;
 8005b46:	f88d 3010 	strb.w	r3, [sp, #16]
               		   HRS_ASSIGN_HRS_SERVICE_UUID_16(&(Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[5]));
 8005b4a:	230d      	movs	r3, #13
 8005b4c:	f88d 3011 	strb.w	r3, [sp, #17]
 8005b50:	2318      	movs	r3, #24
 8005b52:	f88d 3012 	strb.w	r3, [sp, #18]
                    ret_val = GAP_LE_Set_Advertising_Data(BluetoothStackID, (Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[0] + Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[3] + 2), &(Advertisement_Data_Buffer.AdvertisingData));
 8005b56:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8005b5a:	aa03      	add	r2, sp, #12
 8005b5c:	3104      	adds	r1, #4
 8005b5e:	4b6b      	ldr	r3, [pc, #428]	; (8005d0c <AdvertiseLE+0x248>)
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f017 fa8a 	bl	801d07a <GAP_LE_Set_Advertising_Data>
                    if(!ret_val)
 8005b66:	4601      	mov	r1, r0
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	f040 80a1 	bne.w	8005cb0 <AdvertiseLE+0x1ec>
                       BTPS_MemInitialize(&(Advertisement_Data_Buffer.ScanResponseData), 0, sizeof(Scan_Response_Data_t));
 8005b6e:	221f      	movs	r2, #31
 8005b70:	2100      	movs	r1, #0
 8005b72:	a803      	add	r0, sp, #12
 8005b74:	f00d fca3 	bl	80134be <BTPS_MemInitialize>
                       Length = BTPS_StringLength(LE_APP_DEMO_NAME);
 8005b78:	4867      	ldr	r0, [pc, #412]	; (8005d18 <AdvertiseLE+0x254>)
 8005b7a:	f00d fd14 	bl	80135a6 <BTPS_StringLength>
 8005b7e:	4602      	mov	r2, r0
                       if(Length < (ADVERTISING_DATA_MAXIMUM_SIZE - 2))
 8005b80:	281c      	cmp	r0, #28
 8005b82:	dc71      	bgt.n	8005c68 <AdvertiseLE+0x1a4>
                          Advertisement_Data_Buffer.ScanResponseData.Scan_Response_Data[1] = HCI_LE_ADVERTISING_REPORT_DATA_TYPE_LOCAL_NAME_COMPLETE;
 8005b84:	2309      	movs	r3, #9
 8005b86:	f88d 300d 	strb.w	r3, [sp, #13]
                       Advertisement_Data_Buffer.ScanResponseData.Scan_Response_Data[0] = (Byte_t)(1 + Length);
 8005b8a:	1c53      	adds	r3, r2, #1
 8005b8c:	f88d 300c 	strb.w	r3, [sp, #12]
                       BTPS_MemCopy(&(Advertisement_Data_Buffer.ScanResponseData.Scan_Response_Data[2]),LE_APP_DEMO_NAME,Length);
 8005b90:	4961      	ldr	r1, [pc, #388]	; (8005d18 <AdvertiseLE+0x254>)
 8005b92:	f10d 000e 	add.w	r0, sp, #14
 8005b96:	f00d fc8e 	bl	80134b6 <BTPS_MemCopy>
                       ret_val = GAP_LE_Set_Scan_Response_Data(BluetoothStackID, (Advertisement_Data_Buffer.ScanResponseData.Scan_Response_Data[0] + 1), &(Advertisement_Data_Buffer.ScanResponseData));
 8005b9a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8005b9e:	aa03      	add	r2, sp, #12
 8005ba0:	3101      	adds	r1, #1
 8005ba2:	4b5a      	ldr	r3, [pc, #360]	; (8005d0c <AdvertiseLE+0x248>)
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	f017 fadf 	bl	801d168 <GAP_LE_Set_Scan_Response_Data>
                       if(!ret_val)
 8005baa:	4601      	mov	r1, r0
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d179      	bne.n	8005ca4 <AdvertiseLE+0x1e0>
                          AdvertisingParameters.Advertising_Channel_Map   = HCI_LE_ADVERTISING_CHANNEL_MAP_DEFAULT;
 8005bb0:	2307      	movs	r3, #7
 8005bb2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                          AdvertisingParameters.Scan_Request_Filter       = fpNoFilter;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
                          AdvertisingParameters.Connect_Request_Filter    = fpNoFilter;
 8005bbc:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                          AdvertisingParameters.Advertising_Interval_Min  = 100;
 8005bc0:	2264      	movs	r2, #100	; 0x64
 8005bc2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
                          AdvertisingParameters.Advertising_Interval_Max  = 200;
 8005bc6:	22c8      	movs	r2, #200	; 0xc8
 8005bc8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
                          ConnectabilityParameters.Connectability_Mode   = LE_Parameters.ConnectableMode;
 8005bcc:	4a50      	ldr	r2, [pc, #320]	; (8005d10 <AdvertiseLE+0x24c>)
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                          ConnectabilityParameters.Own_Address_Type      = OwnAddressType;
 8005bd4:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
                          ConnectabilityParameters.Direct_Address_Type   = latPublic;
 8005bd8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
                          ASSIGN_BD_ADDR(ConnectabilityParameters.Direct_Address, 0, 0, 0, 0, 0, 0);
 8005bdc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8005be0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8005be4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
 8005be8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8005bec:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8005bf0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                        if((OwnAddressType) && (!ret_val))
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d13c      	bne.n	8005c72 <AdvertiseLE+0x1ae>
                        if(!ret_val)
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d14d      	bne.n	8005c98 <AdvertiseLE+0x1d4>
                             ret_val = GAP_LE_Advertising_Enable(BluetoothStackID, TRUE, &AdvertisingParameters, &ConnectabilityParameters, GAP_LE_Event_Callback, 0);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	4b46      	ldr	r3, [pc, #280]	; (8005d1c <AdvertiseLE+0x258>)
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	ab0d      	add	r3, sp, #52	; 0x34
 8005c06:	aa10      	add	r2, sp, #64	; 0x40
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4840      	ldr	r0, [pc, #256]	; (8005d0c <AdvertiseLE+0x248>)
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f016 fadf 	bl	801c1d0 <GAP_LE_Advertising_Enable>
                             if(!ret_val)
 8005c12:	4604      	mov	r4, r0
 8005c14:	2800      	cmp	r0, #0
 8005c16:	d138      	bne.n	8005c8a <AdvertiseLE+0x1c6>
                                Display(("   GAP_LE_Advertising_Enable success.\r\n"));
 8005c18:	4841      	ldr	r0, [pc, #260]	; (8005d20 <AdvertiseLE+0x25c>)
 8005c1a:	f00d fdcb 	bl	80137b4 <BTPS_OutputMessage>
}
 8005c1e:	4620      	mov	r0, r4
 8005c20:	b012      	add	sp, #72	; 0x48
 8005c22:	bd10      	pop	{r4, pc}
                ret_val = GAP_LE_Advertising_Disable(BluetoothStackID);
 8005c24:	f016 faab 	bl	801c17e <GAP_LE_Advertising_Disable>
                if(!ret_val)
 8005c28:	4604      	mov	r4, r0
 8005c2a:	b918      	cbnz	r0, 8005c34 <AdvertiseLE+0x170>
                   Display(("   GAP_LE_Advertising_Disable success.\r\n"));
 8005c2c:	483d      	ldr	r0, [pc, #244]	; (8005d24 <AdvertiseLE+0x260>)
 8005c2e:	f00d fdc1 	bl	80137b4 <BTPS_OutputMessage>
 8005c32:	e7f4      	b.n	8005c1e <AdvertiseLE+0x15a>
                   DisplayFunctionError("GAP_LE_Advertising_Disable", ret_val);
 8005c34:	4601      	mov	r1, r0
 8005c36:	483c      	ldr	r0, [pc, #240]	; (8005d28 <AdvertiseLE+0x264>)
 8005c38:	f7fc fcc6 	bl	80025c8 <DisplayFunctionError>
                   ret_val = FUNCTION_ERROR;
 8005c3c:	f06f 0403 	mvn.w	r4, #3
 8005c40:	e7ed      	b.n	8005c1e <AdvertiseLE+0x15a>
                       if (BTPS_StringLength(TempParam->Params[2].strParam) >= (sizeof(BD_ADDR_t)*2))
 8005c42:	6960      	ldr	r0, [r4, #20]
 8005c44:	f00d fcaf 	bl	80135a6 <BTPS_StringLength>
 8005c48:	280b      	cmp	r0, #11
 8005c4a:	d937      	bls.n	8005cbc <AdvertiseLE+0x1f8>
                       	        StrToBD_ADDR(TempParam->Params[2].strParam, &BD_ADDR);
 8005c4c:	a90b      	add	r1, sp, #44	; 0x2c
 8005c4e:	6960      	ldr	r0, [r4, #20]
 8005c50:	f7ff fb82 	bl	8005358 <StrToBD_ADDR>
                       OwnAddressType = latRandom;
 8005c54:	2401      	movs	r4, #1
 8005c56:	e75d      	b.n	8005b14 <AdvertiseLE+0x50>
   GAP_LE_Address_Type_t               OwnAddressType = latPublic;
 8005c58:	2400      	movs	r4, #0
 8005c5a:	e75b      	b.n	8005b14 <AdvertiseLE+0x50>
                       Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[2] = HCI_LE_ADVERTISING_FLAGS_GENERAL_DISCOVERABLE_MODE_FLAGS_BIT_MASK;
 8005c5c:	f88d 300e 	strb.w	r3, [sp, #14]
 8005c60:	e76b      	b.n	8005b3a <AdvertiseLE+0x76>
                          Advertisement_Data_Buffer.AdvertisingData.Advertising_Data[2] = HCI_LE_ADVERTISING_FLAGS_LIMITED_DISCOVERABLE_MODE_FLAGS_BIT_MASK;
 8005c62:	f88d 300e 	strb.w	r3, [sp, #14]
 8005c66:	e768      	b.n	8005b3a <AdvertiseLE+0x76>
                          Advertisement_Data_Buffer.ScanResponseData.Scan_Response_Data[1] = HCI_LE_ADVERTISING_REPORT_DATA_TYPE_LOCAL_NAME_SHORTENED;
 8005c68:	2308      	movs	r3, #8
 8005c6a:	f88d 300d 	strb.w	r3, [sp, #13]
                          Length = (ADVERTISING_DATA_MAXIMUM_SIZE - 2);
 8005c6e:	221d      	movs	r2, #29
 8005c70:	e78b      	b.n	8005b8a <AdvertiseLE+0xc6>
                            ret_val = HCI_LE_Set_Random_Address(BluetoothStackID, BD_ADDR, &StatusResult);
 8005c72:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 8005c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c7a:	4824      	ldr	r0, [pc, #144]	; (8005d0c <AdvertiseLE+0x248>)
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f019 ff13 	bl	801faa8 <HCI_LE_Set_Random_Address>
                            ret_val += StatusResult;
 8005c82:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 8005c86:	4401      	add	r1, r0
 8005c88:	e7b6      	b.n	8005bf8 <AdvertiseLE+0x134>
                                DisplayFunctionError("GAP_LE_Advertising_Enable", ret_val);
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	4827      	ldr	r0, [pc, #156]	; (8005d2c <AdvertiseLE+0x268>)
 8005c8e:	f7fc fc9b 	bl	80025c8 <DisplayFunctionError>
                                ret_val = FUNCTION_ERROR;
 8005c92:	f06f 0403 	mvn.w	r4, #3
 8005c96:	e7c2      	b.n	8005c1e <AdvertiseLE+0x15a>
                            DisplayFunctionError("HCI_LE_Set_Random_Address", ret_val);
 8005c98:	4825      	ldr	r0, [pc, #148]	; (8005d30 <AdvertiseLE+0x26c>)
 8005c9a:	f7fc fc95 	bl	80025c8 <DisplayFunctionError>
                            ret_val = FUNCTION_ERROR;
 8005c9e:	f06f 0403 	mvn.w	r4, #3
 8005ca2:	e7bc      	b.n	8005c1e <AdvertiseLE+0x15a>
                         DisplayFunctionError("GAP_LE_Set_Advertising_Data(dtScanResponse)", ret_val);
 8005ca4:	4823      	ldr	r0, [pc, #140]	; (8005d34 <AdvertiseLE+0x270>)
 8005ca6:	f7fc fc8f 	bl	80025c8 <DisplayFunctionError>
                         ret_val = FUNCTION_ERROR;
 8005caa:	f06f 0403 	mvn.w	r4, #3
 8005cae:	e7b6      	b.n	8005c1e <AdvertiseLE+0x15a>
                      DisplayFunctionError("GAP_LE_Set_Advertising_Data(dtAdvertising)", ret_val);
 8005cb0:	4821      	ldr	r0, [pc, #132]	; (8005d38 <AdvertiseLE+0x274>)
 8005cb2:	f7fc fc89 	bl	80025c8 <DisplayFunctionError>
                      ret_val = FUNCTION_ERROR;
 8005cb6:	f06f 0403 	mvn.w	r4, #3
 8005cba:	e7b0      	b.n	8005c1e <AdvertiseLE+0x15a>
                   DisplayUsage("AdvertiseLE [0 = Disable, 1 = Enable(Default - Public Address)]");
 8005cbc:	481f      	ldr	r0, [pc, #124]	; (8005d3c <AdvertiseLE+0x278>)
 8005cbe:	f7fc fa49 	bl	8002154 <DisplayUsage>
                   DisplayUsage("AdvertiseLE [1 = Enable] [0 = Public Address]");
 8005cc2:	481f      	ldr	r0, [pc, #124]	; (8005d40 <AdvertiseLE+0x27c>)
 8005cc4:	f7fc fa46 	bl	8002154 <DisplayUsage>
                   DisplayUsage("AdvertiseLE [1 = Enable] [1 = Random Address] [Random BD Address]");
 8005cc8:	481e      	ldr	r0, [pc, #120]	; (8005d44 <AdvertiseLE+0x280>)
 8005cca:	f7fc fa43 	bl	8002154 <DisplayUsage>
                   ret_val = INVALID_PARAMETERS_ERROR;
 8005cce:	f06f 0405 	mvn.w	r4, #5
 8005cd2:	e7a4      	b.n	8005c1e <AdvertiseLE+0x15a>
             DisplayUsage("AdvertiseLE [0 = Disable, 1 = Enable(Default - Public Address)]");
 8005cd4:	4819      	ldr	r0, [pc, #100]	; (8005d3c <AdvertiseLE+0x278>)
 8005cd6:	f7fc fa3d 	bl	8002154 <DisplayUsage>
             DisplayUsage("AdvertiseLE [1 = Enable] [0 = Public Address]");
 8005cda:	4819      	ldr	r0, [pc, #100]	; (8005d40 <AdvertiseLE+0x27c>)
 8005cdc:	f7fc fa3a 	bl	8002154 <DisplayUsage>
             DisplayUsage("AdvertiseLE [1 = Enable] [1 = Random Address] [Random BD Address]");
 8005ce0:	4818      	ldr	r0, [pc, #96]	; (8005d44 <AdvertiseLE+0x280>)
 8005ce2:	f7fc fa37 	bl	8002154 <DisplayUsage>
             ret_val = INVALID_PARAMETERS_ERROR;
 8005ce6:	f06f 0405 	mvn.w	r4, #5
 8005cea:	e798      	b.n	8005c1e <AdvertiseLE+0x15a>
          DisplayUsage("AdvertiseLE [0 = Disable, 1 = Enable(Default - Public Address)]");
 8005cec:	4813      	ldr	r0, [pc, #76]	; (8005d3c <AdvertiseLE+0x278>)
 8005cee:	f7fc fa31 	bl	8002154 <DisplayUsage>
          DisplayUsage("AdvertiseLE [1 = Enable] [0 = Public Address]");
 8005cf2:	4813      	ldr	r0, [pc, #76]	; (8005d40 <AdvertiseLE+0x27c>)
 8005cf4:	f7fc fa2e 	bl	8002154 <DisplayUsage>
          DisplayUsage("AdvertiseLE [1 = Enable] [1 = Random Address] [Random BD Address]");
 8005cf8:	4812      	ldr	r0, [pc, #72]	; (8005d44 <AdvertiseLE+0x280>)
 8005cfa:	f7fc fa2b 	bl	8002154 <DisplayUsage>
          ret_val = INVALID_PARAMETERS_ERROR;
 8005cfe:	f06f 0405 	mvn.w	r4, #5
 8005d02:	e78c      	b.n	8005c1e <AdvertiseLE+0x15a>
      ret_val = INVALID_STACK_ID_ERROR;
 8005d04:	f06f 0407 	mvn.w	r4, #7
   return(ret_val);
 8005d08:	e789      	b.n	8005c1e <AdvertiseLE+0x15a>
 8005d0a:	bf00      	nop
 8005d0c:	20001578 	.word	0x20001578
 8005d10:	200016cc 	.word	0x200016cc
 8005d14:	200016b8 	.word	0x200016b8
 8005d18:	0802c2a8 	.word	0x0802c2a8
 8005d1c:	08003bed 	.word	0x08003bed
 8005d20:	0802e92c 	.word	0x0802e92c
 8005d24:	0802e8e4 	.word	0x0802e8e4
 8005d28:	0802e910 	.word	0x0802e910
 8005d2c:	0802e954 	.word	0x0802e954
 8005d30:	0802e970 	.word	0x0802e970
 8005d34:	0802e98c 	.word	0x0802e98c
 8005d38:	0802e9b8 	.word	0x0802e9b8
 8005d3c:	0802e9e4 	.word	0x0802e9e4
 8005d40:	0802ea24 	.word	0x0802ea24
 8005d44:	0802ea54 	.word	0x0802ea54

08005d48 <FreeDeviceInfoList>:
{
 8005d48:	b508      	push	{r3, lr}
   BSC_FreeGenericListEntryList((void **)(ListHead), BTPS_STRUCTURE_OFFSET(DeviceInfo_t, NextDeviceInfoPtr));
 8005d4a:	2134      	movs	r1, #52	; 0x34
 8005d4c:	f012 ffb4 	bl	8018cb8 <BSC_FreeGenericListEntryList>
}
 8005d50:	bd08      	pop	{r3, pc}
	...

08005d54 <CloseStack>:
   if(BluetoothStackID)
 8005d54:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <CloseStack+0x74>)
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d031      	beq.n	8005dc0 <CloseStack+0x6c>
{
 8005d5c:	b510      	push	{r4, lr}
      if(GAPSInstanceID)
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <CloseStack+0x78>)
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	b9b9      	cbnz	r1, 8005d94 <CloseStack+0x40>
      if(HRSInstanceID)
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <CloseStack+0x7c>)
 8005d66:	6819      	ldr	r1, [r3, #0]
 8005d68:	b9d1      	cbnz	r1, 8005da0 <CloseStack+0x4c>
      if(DISInstanceID)
 8005d6a:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <CloseStack+0x80>)
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	b9f9      	cbnz	r1, 8005db0 <CloseStack+0x5c>
      GATT_Cleanup(BluetoothStackID);
 8005d70:	4c15      	ldr	r4, [pc, #84]	; (8005dc8 <CloseStack+0x74>)
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	f023 f906 	bl	8028f84 <GATT_Cleanup>
      BSC_Shutdown(BluetoothStackID);
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	f013 f9f9 	bl	8019170 <BSC_Shutdown>
      BTPS_DeInit();
 8005d7e:	f00d fd07 	bl	8013790 <BTPS_DeInit>
      Display(("Stack Shutdown.\r\n"));
 8005d82:	4815      	ldr	r0, [pc, #84]	; (8005dd8 <CloseStack+0x84>)
 8005d84:	f00d fd16 	bl	80137b4 <BTPS_OutputMessage>
      FreeDeviceInfoList(&DeviceInfoList);
 8005d88:	4814      	ldr	r0, [pc, #80]	; (8005ddc <CloseStack+0x88>)
 8005d8a:	f7ff ffdd 	bl	8005d48 <FreeDeviceInfoList>
      BluetoothStackID = 0;
 8005d8e:	2000      	movs	r0, #0
 8005d90:	6020      	str	r0, [r4, #0]
}
 8005d92:	bd10      	pop	{r4, pc}
         GAPS_Cleanup_Service(BluetoothStackID, GAPSInstanceID);
 8005d94:	f7fb fc46 	bl	8001624 <GAPS_Cleanup_Service>
         GAPSInstanceID = 0;
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <CloseStack+0x78>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e7e1      	b.n	8005d64 <CloseStack+0x10>
         HRS_Cleanup_Service(BluetoothStackID, HRSInstanceID);
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <CloseStack+0x74>)
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	f000 fc42 	bl	800662c <HRS_Cleanup_Service>
         HRSInstanceID = 0;
 8005da8:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <CloseStack+0x7c>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e7dc      	b.n	8005d6a <CloseStack+0x16>
         DIS_Cleanup_Service(BluetoothStackID, DISInstanceID);
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <CloseStack+0x74>)
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	f7fb f996 	bl	80010e4 <DIS_Cleanup_Service>
         DISInstanceID = 0;
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <CloseStack+0x80>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	e7d7      	b.n	8005d70 <CloseStack+0x1c>
      ret_val = UNABLE_TO_INITIALIZE_STACK;
 8005dc0:	f06f 0006 	mvn.w	r0, #6
}
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20001578 	.word	0x20001578
 8005dcc:	200016b4 	.word	0x200016b4
 8005dd0:	200016b8 	.word	0x200016b8
 8005dd4:	200016ac 	.word	0x200016ac
 8005dd8:	0802ea98 	.word	0x0802ea98
 8005ddc:	200016b0 	.word	0x200016b0

08005de0 <FindCommand>:
{
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if(Command)
 8005de2:	b118      	cbz	r0, 8005dec <FindCommand+0xc>
 8005de4:	4607      	mov	r7, r0
      for(Index=0,ret_val=NULL;((Index<NumberCommands) && (!ret_val));Index++)
 8005de6:	2600      	movs	r6, #0
 8005de8:	4634      	mov	r4, r6
 8005dea:	e003      	b.n	8005df4 <FindCommand+0x14>
      ret_val = NULL;
 8005dec:	2600      	movs	r6, #0
}
 8005dee:	4630      	mov	r0, r6
 8005df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for(Index=0,ret_val=NULL;((Index<NumberCommands) && (!ret_val));Index++)
 8005df2:	3401      	adds	r4, #1
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <FindCommand+0x5c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d9f8      	bls.n	8005dee <FindCommand+0xe>
 8005dfc:	2e00      	cmp	r6, #0
 8005dfe:	d1f6      	bne.n	8005dee <FindCommand+0xe>
         if((BTPS_StringLength(CommandTable[Index].CommandName) == BTPS_StringLength(Command)) && (BTPS_MemCompare(Command, CommandTable[Index].CommandName, BTPS_StringLength(CommandTable[Index].CommandName)) == 0))
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <FindCommand+0x60>)
 8005e02:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8005e06:	f00d fbce 	bl	80135a6 <BTPS_StringLength>
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f00d fbca 	bl	80135a6 <BTPS_StringLength>
 8005e12:	4285      	cmp	r5, r0
 8005e14:	d1ed      	bne.n	8005df2 <FindCommand+0x12>
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <FindCommand+0x60>)
 8005e18:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f00d fbc2 	bl	80135a6 <BTPS_StringLength>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4629      	mov	r1, r5
 8005e26:	4638      	mov	r0, r7
 8005e28:	f00d fbb9 	bl	801359e <BTPS_MemCompare>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1e0      	bne.n	8005df2 <FindCommand+0x12>
            ret_val = CommandTable[Index].CommandFunction;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <FindCommand+0x60>)
 8005e32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e36:	685e      	ldr	r6, [r3, #4]
 8005e38:	e7db      	b.n	8005df2 <FindCommand+0x12>
 8005e3a:	bf00      	nop
 8005e3c:	200016d4 	.word	0x200016d4
 8005e40:	2000157c 	.word	0x2000157c

08005e44 <CommandInterpreter>:
   if((TempCommand) && (TempCommand->Command))
 8005e44:	b390      	cbz	r0, 8005eac <CommandInterpreter+0x68>
{
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	4605      	mov	r5, r0
   if((TempCommand) && (TempCommand->Command))
 8005e4a:	6803      	ldr	r3, [r0, #0]
 8005e4c:	b10b      	cbz	r3, 8005e52 <CommandInterpreter+0xe>
      for(i=0;i<BTPS_StringLength(TempCommand->Command);i++)
 8005e4e:	2400      	movs	r4, #0
 8005e50:	e003      	b.n	8005e5a <CommandInterpreter+0x16>
      ret_val = INVALID_PARAMETERS_ERROR;
 8005e52:	f06f 0005 	mvn.w	r0, #5
 8005e56:	e028      	b.n	8005eaa <CommandInterpreter+0x66>
      for(i=0;i<BTPS_StringLength(TempCommand->Command);i++)
 8005e58:	3401      	adds	r4, #1
 8005e5a:	6828      	ldr	r0, [r5, #0]
 8005e5c:	f00d fba3 	bl	80135a6 <BTPS_StringLength>
 8005e60:	42a0      	cmp	r0, r4
 8005e62:	d909      	bls.n	8005e78 <CommandInterpreter+0x34>
         if((TempCommand->Command[i] >= 'a') && (TempCommand->Command[i] <= 'z'))
 8005e64:	6829      	ldr	r1, [r5, #0]
 8005e66:	5d0a      	ldrb	r2, [r1, r4]
 8005e68:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b19      	cmp	r3, #25
 8005e70:	d8f2      	bhi.n	8005e58 <CommandInterpreter+0x14>
            TempCommand->Command[i] -= ('a' - 'A');
 8005e72:	3a20      	subs	r2, #32
 8005e74:	550a      	strb	r2, [r1, r4]
 8005e76:	e7ef      	b.n	8005e58 <CommandInterpreter+0x14>
      if(BTPS_MemCompare(TempCommand->Command, "QUIT", BTPS_StringLength("QUIT")) != 0)
 8005e78:	682e      	ldr	r6, [r5, #0]
 8005e7a:	4c12      	ldr	r4, [pc, #72]	; (8005ec4 <CommandInterpreter+0x80>)
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f00d fb92 	bl	80135a6 <BTPS_StringLength>
 8005e82:	4602      	mov	r2, r0
 8005e84:	4621      	mov	r1, r4
 8005e86:	4630      	mov	r0, r6
 8005e88:	f00d fb89 	bl	801359e <BTPS_MemCompare>
 8005e8c:	b188      	cbz	r0, 8005eb2 <CommandInterpreter+0x6e>
         if((CommandFunction = FindCommand(TempCommand->Command)) != NULL)
 8005e8e:	6828      	ldr	r0, [r5, #0]
 8005e90:	f7ff ffa6 	bl	8005de0 <FindCommand>
 8005e94:	4603      	mov	r3, r0
 8005e96:	b178      	cbz	r0, 8005eb8 <CommandInterpreter+0x74>
            if((ret_val = ((*CommandFunction)(&TempCommand->Parameters))) == 0)
 8005e98:	1d28      	adds	r0, r5, #4
 8005e9a:	4798      	blx	r3
 8005e9c:	b128      	cbz	r0, 8005eaa <CommandInterpreter+0x66>
               if ((ret_val != EXIT_CODE) && (ret_val != EXIT_TEST_MODE))
 8005e9e:	f110 0f03 	cmn.w	r0, #3
 8005ea2:	d002      	beq.n	8005eaa <CommandInterpreter+0x66>
 8005ea4:	f110 0f0a 	cmn.w	r0, #10
 8005ea8:	d109      	bne.n	8005ebe <CommandInterpreter+0x7a>
}
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
      ret_val = INVALID_PARAMETERS_ERROR;
 8005eac:	f06f 0005 	mvn.w	r0, #5
}
 8005eb0:	4770      	bx	lr
         ret_val = EXIT_CODE;
 8005eb2:	f06f 0002 	mvn.w	r0, #2
 8005eb6:	e7f8      	b.n	8005eaa <CommandInterpreter+0x66>
   ret_val = INVALID_COMMAND_ERROR;
 8005eb8:	f06f 0001 	mvn.w	r0, #1
 8005ebc:	e7f5      	b.n	8005eaa <CommandInterpreter+0x66>
                  ret_val = FUNCTION_ERROR;
 8005ebe:	f06f 0003 	mvn.w	r0, #3
   return(ret_val);
 8005ec2:	e7f2      	b.n	8005eaa <CommandInterpreter+0x66>
 8005ec4:	0802eaac 	.word	0x0802eaac

08005ec8 <CommandLineInterpreter>:
{
 8005ec8:	b500      	push	{lr}
 8005eca:	b08d      	sub	sp, #52	; 0x34
 8005ecc:	4601      	mov	r1, r0
   if(CommandParser(&TempCommand, Command) >= 0)
 8005ece:	4668      	mov	r0, sp
 8005ed0:	f7ff fb11 	bl	80054f6 <CommandParser>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	db19      	blt.n	8005f0c <CommandLineInterpreter+0x44>
      Display(("\r\n"));
 8005ed8:	4810      	ldr	r0, [pc, #64]	; (8005f1c <CommandLineInterpreter+0x54>)
 8005eda:	f00d fc6b 	bl	80137b4 <BTPS_OutputMessage>
      Result = CommandInterpreter(&TempCommand);
 8005ede:	4668      	mov	r0, sp
 8005ee0:	f7ff ffb0 	bl	8005e44 <CommandInterpreter>
      switch(Result)
 8005ee4:	f110 0f04 	cmn.w	r0, #4
 8005ee8:	d00c      	beq.n	8005f04 <CommandLineInterpreter+0x3c>
 8005eea:	f110 0f02 	cmn.w	r0, #2
 8005eee:	d103      	bne.n	8005ef8 <CommandLineInterpreter+0x30>
            Display(("Invalid Command: %s.\r\n",TempCommand.Command));
 8005ef0:	9900      	ldr	r1, [sp, #0]
 8005ef2:	480b      	ldr	r0, [pc, #44]	; (8005f20 <CommandLineInterpreter+0x58>)
 8005ef4:	f00d fc5e 	bl	80137b4 <BTPS_OutputMessage>
      DisplayPrompt();
 8005ef8:	f7fc fb5e 	bl	80025b8 <DisplayPrompt>
      ret_val = TRUE;
 8005efc:	2001      	movs	r0, #1
}
 8005efe:	b00d      	add	sp, #52	; 0x34
 8005f00:	f85d fb04 	ldr.w	pc, [sp], #4
            Display(("Function Error.\r\n"));
 8005f04:	4807      	ldr	r0, [pc, #28]	; (8005f24 <CommandLineInterpreter+0x5c>)
 8005f06:	f00d fc55 	bl	80137b4 <BTPS_OutputMessage>
            break;
 8005f0a:	e7f5      	b.n	8005ef8 <CommandLineInterpreter+0x30>
      DisplayPrompt();
 8005f0c:	f7fc fb54 	bl	80025b8 <DisplayPrompt>
      Display(("\r\nInvalid Command.\r\n"));
 8005f10:	4805      	ldr	r0, [pc, #20]	; (8005f28 <CommandLineInterpreter+0x60>)
 8005f12:	f00d fc4f 	bl	80137b4 <BTPS_OutputMessage>
   Boolean_t     ret_val = FALSE;
 8005f16:	2000      	movs	r0, #0
 8005f18:	e7f1      	b.n	8005efe <CommandLineInterpreter+0x36>
 8005f1a:	bf00      	nop
 8005f1c:	0802c380 	.word	0x0802c380
 8005f20:	0802eab4 	.word	0x0802eab4
 8005f24:	0802eacc 	.word	0x0802eacc
 8005f28:	0802eae0 	.word	0x0802eae0

08005f2c <InitializeApplication>:
   /* when opening the stack and the second parameter is used to pass   */
   /* parameters to BTPS_Init.  This function returns the               */
   /* BluetoothStackID returned from BSC_Initialize on success or a     */
   /* negative error code (of the form APPLICATION_ERROR_XXX).          */
int InitializeApplication(HCI_DriverInformation_t *HCI_DriverInformation, BTPS_Initialization_t *BTPS_Initialization)
{
 8005f2c:	b510      	push	{r4, lr}
   int ret_val = APPLICATION_ERROR_UNABLE_TO_OPEN_STACK;

   /* Next, makes sure that the Driver Information passed appears to be */
   /* semi-valid.                                                       */
   if((HCI_DriverInformation) && (BTPS_Initialization))
 8005f2e:	b3a0      	cbz	r0, 8005f9a <InitializeApplication+0x6e>
 8005f30:	b3a9      	cbz	r1, 8005f9e <InitializeApplication+0x72>
   {
      /* Try to Open the stack and check if it was successful.          */
      if(!OpenStack(HCI_DriverInformation, BTPS_Initialization))
 8005f32:	f7fc fe6f 	bl	8002c14 <OpenStack>
 8005f36:	bb50      	cbnz	r0, 8005f8e <InitializeApplication+0x62>
      {
         /* First, attempt to set the Device to be Connectable.         */
         ret_val = SetConnect();
 8005f38:	f7fb ff9a 	bl	8001e70 <SetConnect>

         /* Next, check to see if the Device was successfully made      */
         /* Connectable.                                                */
         if(!ret_val)
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	b9d8      	cbnz	r0, 8005f78 <InitializeApplication+0x4c>
         {
            /* Now that the device is Connectable attempt to make it    */
            /* Discoverable.                                            */
            ret_val = SetDisc();
 8005f40:	f7fb ff86 	bl	8001e50 <SetDisc>

            /* Next, check to see if the Device was successfully made   */
            /* Discoverable.                                            */
            if(!ret_val)
 8005f44:	4604      	mov	r4, r0
 8005f46:	b990      	cbnz	r0, 8005f6e <InitializeApplication+0x42>
            {
               /* Now that the device is discoverable attempt to make it*/
               /* pairable.                                             */
               ret_val = SetPairable();
 8005f48:	f7fd fc04 	bl	8003754 <SetPairable>
               if(!ret_val)
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	b948      	cbnz	r0, 8005f64 <InitializeApplication+0x38>
               {
                  /* Set up the Selection Interface.                    */
                  UserInterface();
 8005f50:	f7fc fc50 	bl	80027f4 <UserInterface>

                  /* Display a list of available commands.              */
                  DisplayHelp(NULL);
 8005f54:	2000      	movs	r0, #0
 8005f56:	f7fc fab5 	bl	80024c4 <DisplayHelp>

                  /* Display the first command prompt.                  */
                  DisplayPrompt();
 8005f5a:	f7fc fb2d 	bl	80025b8 <DisplayPrompt>

                  /* Return success to the caller.                      */
                  ret_val = (int)BluetoothStackID;
 8005f5e:	4b11      	ldr	r3, [pc, #68]	; (8005fa4 <InitializeApplication+0x78>)
 8005f60:	681c      	ldr	r4, [r3, #0]
 8005f62:	e00d      	b.n	8005f80 <InitializeApplication+0x54>
               }
               else
                  DisplayFunctionError("SetPairable", ret_val);
 8005f64:	4601      	mov	r1, r0
 8005f66:	4810      	ldr	r0, [pc, #64]	; (8005fa8 <InitializeApplication+0x7c>)
 8005f68:	f7fc fb2e 	bl	80025c8 <DisplayFunctionError>
 8005f6c:	e008      	b.n	8005f80 <InitializeApplication+0x54>
            }
            else
               DisplayFunctionError("SetDisc", ret_val);
 8005f6e:	4601      	mov	r1, r0
 8005f70:	480e      	ldr	r0, [pc, #56]	; (8005fac <InitializeApplication+0x80>)
 8005f72:	f7fc fb29 	bl	80025c8 <DisplayFunctionError>
 8005f76:	e003      	b.n	8005f80 <InitializeApplication+0x54>
         }
         else
            DisplayFunctionError("SetConnect", ret_val);
 8005f78:	4601      	mov	r1, r0
 8005f7a:	480d      	ldr	r0, [pc, #52]	; (8005fb0 <InitializeApplication+0x84>)
 8005f7c:	f7fc fb24 	bl	80025c8 <DisplayFunctionError>

         /* In some error occurred then close the stack.                */
         if(ret_val < 0)
 8005f80:	2c00      	cmp	r4, #0
 8005f82:	db01      	blt.n	8005f88 <InitializeApplication+0x5c>
   }
   else
      ret_val = APPLICATION_ERROR_INVALID_PARAMETERS;

   return(ret_val);
}
 8005f84:	4620      	mov	r0, r4
 8005f86:	bd10      	pop	{r4, pc}
            CloseStack();
 8005f88:	f7ff fee4 	bl	8005d54 <CloseStack>
 8005f8c:	e7fa      	b.n	8005f84 <InitializeApplication+0x58>
         Display(("Unable to open the stack.\r\n"));
 8005f8e:	4809      	ldr	r0, [pc, #36]	; (8005fb4 <InitializeApplication+0x88>)
 8005f90:	f00d fc10 	bl	80137b4 <BTPS_OutputMessage>
   int ret_val = APPLICATION_ERROR_UNABLE_TO_OPEN_STACK;
 8005f94:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 8005f98:	e7f4      	b.n	8005f84 <InitializeApplication+0x58>
      ret_val = APPLICATION_ERROR_INVALID_PARAMETERS;
 8005f9a:	4c07      	ldr	r4, [pc, #28]	; (8005fb8 <InitializeApplication+0x8c>)
 8005f9c:	e7f2      	b.n	8005f84 <InitializeApplication+0x58>
 8005f9e:	4c06      	ldr	r4, [pc, #24]	; (8005fb8 <InitializeApplication+0x8c>)
   return(ret_val);
 8005fa0:	e7f0      	b.n	8005f84 <InitializeApplication+0x58>
 8005fa2:	bf00      	nop
 8005fa4:	20001578 	.word	0x20001578
 8005fa8:	0802eaf8 	.word	0x0802eaf8
 8005fac:	0802eb04 	.word	0x0802eb04
 8005fb0:	0802eb0c 	.word	0x0802eb0c
 8005fb4:	0802eb18 	.word	0x0802eb18
 8005fb8:	fffffc18 	.word	0xfffffc18

08005fbc <ProcessCommandLine>:
   /* The following function is used to process a command line string.  */
   /* This function takes as it's only parameter the command line string*/
   /* to be parsed and returns TRUE if a command was parsed and executed*/
   /* or FALSE otherwise.                                               */
Boolean_t ProcessCommandLine(char *String)
{
 8005fbc:	b508      	push	{r3, lr}
   return(CommandLineInterpreter(String));
 8005fbe:	f7ff ff83 	bl	8005ec8 <CommandLineInterpreter>
}
 8005fc2:	bd08      	pop	{r3, pc}

08005fc4 <CalculateMaximumSupportedIntervals>:
   Word_t       SpareBytes;
   unsigned int ret_val = 0;

   /* Only continue if the flags specify that we will be sending RR     */
   /* Intervals in this notification.                                   */
   if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT)
 8005fc4:	7803      	ldrb	r3, [r0, #0]
 8005fc6:	f013 0f10 	tst.w	r3, #16
 8005fca:	d00f      	beq.n	8005fec <CalculateMaximumSupportedIntervals+0x28>
   {
      /* Calculate the maximum length of the characteristic value in a  */
      /* Handle-Value notification.                                     */
      MaximumNotificationValue = (Word_t)(MTU - ATT_HANDLE_VALUE_NOTIFICATION_PDU_SIZE(0));
 8005fcc:	3903      	subs	r1, #3
 8005fce:	b288      	uxth	r0, r1

      /* Calculate the spare bytes available in the notification for RR */
      /* Intervals after all the other space requirements are accounted */
      /* for.                                                           */
      SpareBytes               = (Word_t)(MaximumNotificationValue - HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, 0));
 8005fd0:	f013 0f01 	tst.w	r3, #1
 8005fd4:	d008      	beq.n	8005fe8 <CalculateMaximumSupportedIntervals+0x24>
 8005fd6:	2103      	movs	r1, #3
 8005fd8:	109b      	asrs	r3, r3, #2
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	1ac0      	subs	r0, r0, r3

      /* The maximum number of RR Intervals is just the spare number of */
      /* bytes divided by the size of an RR Interval.                   */
      ret_val                  = (unsigned int)(SpareBytes / sizeof(Heart_Rate_Measurement->RR_Intervals[0]));
 8005fe2:	f3c0 004e 	ubfx	r0, r0, #1, #15
 8005fe6:	4770      	bx	lr
      SpareBytes               = (Word_t)(MaximumNotificationValue - HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, 0));
 8005fe8:	2102      	movs	r1, #2
 8005fea:	e7f5      	b.n	8005fd8 <CalculateMaximumSupportedIntervals+0x14>
   unsigned int ret_val = 0;
 8005fec:	2000      	movs	r0, #0
   }

   return(ret_val);
}
 8005fee:	4770      	bx	lr

08005ff0 <FormatHeartRateMeasurement>:
   int     ret_val;
   Byte_t *tempPtr;
   Word_t  Index;

   /* Verify that the input parameters appear semi-valid.               */
   if((Heart_Rate_Measurement) && (BufferLength) && (Buffer))
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d043      	beq.n	800607c <FormatHeartRateMeasurement+0x8c>
{
 8005ff4:	b470      	push	{r4, r5, r6}
 8005ff6:	4604      	mov	r4, r0
   if((Heart_Rate_Measurement) && (BufferLength) && (Buffer))
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	d041      	beq.n	8006080 <FormatHeartRateMeasurement+0x90>
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	d041      	beq.n	8006084 <FormatHeartRateMeasurement+0x94>
   {
      /* Verify that the buffer is big enough to hold the measurement.  */
      if(BufferLength >= HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, Heart_Rate_Measurement->Number_Of_RR_Intervals))
 8006000:	7800      	ldrb	r0, [r0, #0]
 8006002:	f010 0601 	ands.w	r6, r0, #1
 8006006:	d00a      	beq.n	800601e <FormatHeartRateMeasurement+0x2e>
 8006008:	2503      	movs	r5, #3
 800600a:	1083      	asrs	r3, r0, #2
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	442b      	add	r3, r5
 8006012:	f010 0f10 	tst.w	r0, #16
 8006016:	d004      	beq.n	8006022 <FormatHeartRateMeasurement+0x32>
 8006018:	88e5      	ldrh	r5, [r4, #6]
 800601a:	006d      	lsls	r5, r5, #1
 800601c:	e002      	b.n	8006024 <FormatHeartRateMeasurement+0x34>
 800601e:	2502      	movs	r5, #2
 8006020:	e7f3      	b.n	800600a <FormatHeartRateMeasurement+0x1a>
 8006022:	2500      	movs	r5, #0
 8006024:	442b      	add	r3, r5
 8006026:	428b      	cmp	r3, r1
 8006028:	d82e      	bhi.n	8006088 <FormatHeartRateMeasurement+0x98>
      {
         /* Copy the flags into the Heart Rate Header.                  */
         ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(((HRS_Heart_Rate_Measurement_Header_t *)Buffer)->Flags), Heart_Rate_Measurement->Flags);
 800602a:	7010      	strb	r0, [r2, #0]
         /* Set a temporary pointer past the header of the Heart Rate   */
         /* measurement.                                                */
         tempPtr = ((HRS_Heart_Rate_Measurement_t *)Buffer)->Variable_Data;

         /* Format the Heart Rate field into the measurement.           */
         if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_HEART_RATE_IS_WORD)
 800602c:	b18e      	cbz	r6, 8006052 <FormatHeartRateMeasurement+0x62>
         {
            ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(tempPtr, Heart_Rate_Measurement->Heart_Rate);
 800602e:	78a3      	ldrb	r3, [r4, #2]
 8006030:	7053      	strb	r3, [r2, #1]
 8006032:	8863      	ldrh	r3, [r4, #2]
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	7093      	strb	r3, [r2, #2]
            tempPtr += WORD_SIZE;
 8006038:	3203      	adds	r2, #3
            tempPtr += BYTE_SIZE;
         }

         /* If the Energy Expended Status is present then format this   */
         /* field into the measurement.                                 */
         if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_ENERGY_EXPENDED_PRESENT)
 800603a:	7823      	ldrb	r3, [r4, #0]
 800603c:	f013 0f08 	tst.w	r3, #8
 8006040:	d005      	beq.n	800604e <FormatHeartRateMeasurement+0x5e>
         {
            ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(tempPtr, Heart_Rate_Measurement->Energy_Expended);
 8006042:	7923      	ldrb	r3, [r4, #4]
 8006044:	7013      	strb	r3, [r2, #0]
 8006046:	88a3      	ldrh	r3, [r4, #4]
 8006048:	0a1b      	lsrs	r3, r3, #8
 800604a:	7053      	strb	r3, [r2, #1]
            tempPtr += WORD_SIZE;
 800604c:	3202      	adds	r2, #2
      if(BufferLength >= HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, Heart_Rate_Measurement->Number_Of_RR_Intervals))
 800604e:	2300      	movs	r3, #0
 8006050:	e00e      	b.n	8006070 <FormatHeartRateMeasurement+0x80>
            ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(tempPtr, Heart_Rate_Measurement->Heart_Rate);
 8006052:	78a3      	ldrb	r3, [r4, #2]
 8006054:	7053      	strb	r3, [r2, #1]
            tempPtr += BYTE_SIZE;
 8006056:	3202      	adds	r2, #2
 8006058:	e7ef      	b.n	800603a <FormatHeartRateMeasurement+0x4a>
         /* Measurement.                                                */
         Index = 0;
         while(Index < Heart_Rate_Measurement->Number_Of_RR_Intervals)
         {
            /* Assign the next RR Interval into the measurement.        */
            ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(tempPtr, Heart_Rate_Measurement->RR_Intervals[Index]);
 800605a:	1d19      	adds	r1, r3, #4
 800605c:	f814 0011 	ldrb.w	r0, [r4, r1, lsl #1]
 8006060:	7010      	strb	r0, [r2, #0]
 8006062:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8006066:	0a09      	lsrs	r1, r1, #8
 8006068:	7051      	strb	r1, [r2, #1]
            tempPtr += WORD_SIZE;
 800606a:	3202      	adds	r2, #2

            /* Increment the index.                                     */
            Index++;
 800606c:	3301      	adds	r3, #1
 800606e:	b29b      	uxth	r3, r3
         while(Index < Heart_Rate_Measurement->Number_Of_RR_Intervals)
 8006070:	88e1      	ldrh	r1, [r4, #6]
 8006072:	4299      	cmp	r1, r3
 8006074:	d8f1      	bhi.n	800605a <FormatHeartRateMeasurement+0x6a>
         }

         /* Return success to the caller.                               */
         ret_val = 0;
 8006076:	2000      	movs	r0, #0
   }
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;

   return(ret_val);
}
 8006078:	bc70      	pop	{r4, r5, r6}
 800607a:	4770      	bx	lr
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 800607c:	4804      	ldr	r0, [pc, #16]	; (8006090 <FormatHeartRateMeasurement+0xa0>)
}
 800607e:	4770      	bx	lr
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006080:	4803      	ldr	r0, [pc, #12]	; (8006090 <FormatHeartRateMeasurement+0xa0>)
 8006082:	e7f9      	b.n	8006078 <FormatHeartRateMeasurement+0x88>
 8006084:	4802      	ldr	r0, [pc, #8]	; (8006090 <FormatHeartRateMeasurement+0xa0>)
 8006086:	e7f7      	b.n	8006078 <FormatHeartRateMeasurement+0x88>
         ret_val = HRS_ERROR_MALFORMATTED_DATA;
 8006088:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
   return(ret_val);
 800608c:	e7f4      	b.n	8006078 <FormatHeartRateMeasurement+0x88>
 800608e:	bf00      	nop
 8006090:	fffffc18 	.word	0xfffffc18

08006094 <DecodeHeartRateMeasurement>:
   Word_t        NumberIntervals;
   Word_t        Index;
   unsigned int  ExpectedLength;

   /* Verify that the input parameters appear semi-valid.               */
   if((BufferLength) && (Value) && (Heart_Rate_Measurement))
 8006094:	2800      	cmp	r0, #0
 8006096:	d04f      	beq.n	8006138 <DecodeHeartRateMeasurement+0xa4>
{
 8006098:	b470      	push	{r4, r5, r6}
 800609a:	4604      	mov	r4, r0
   if((BufferLength) && (Value) && (Heart_Rate_Measurement))
 800609c:	2900      	cmp	r1, #0
 800609e:	d04d      	beq.n	800613c <DecodeHeartRateMeasurement+0xa8>
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d04d      	beq.n	8006140 <DecodeHeartRateMeasurement+0xac>
   {
      /* Verify that the Temperature Measurement is a valid length.     */
      if(BufferLength >= HRS_HEART_RATE_MEASUREMENT_HEADER_DATA_SIZE)
      {
         /* Read the Flags from the Temperature Measurement.            */
         Heart_Rate_Measurement->Flags = READ_UNALIGNED_BYTE_LITTLE_ENDIAN(&(((HRS_Heart_Rate_Measurement_Header_t *)Value)->Flags));
 80060a4:	780d      	ldrb	r5, [r1, #0]
 80060a6:	7015      	strb	r5, [r2, #0]

         /* Calculated the expected length based on the flags.          */
         ExpectedLength                = HRS_HEART_RATE_MEASUREMENT_MINIMUM_LENGTH(Heart_Rate_Measurement->Flags);
 80060a8:	f015 0601 	ands.w	r6, r5, #1
 80060ac:	d029      	beq.n	8006102 <DecodeHeartRateMeasurement+0x6e>
 80060ae:	2003      	movs	r0, #3
 80060b0:	10ab      	asrs	r3, r5, #2
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	4403      	add	r3, r0
 80060b8:	10e8      	asrs	r0, r5, #3
 80060ba:	f000 0002 	and.w	r0, r0, #2
 80060be:	4418      	add	r0, r3

         /* Verify that the received data holds at least the expected   */
         /* data size.                                                  */
         if(BufferLength >= ExpectedLength)
 80060c0:	4284      	cmp	r4, r0
 80060c2:	d33f      	bcc.n	8006144 <DecodeHeartRateMeasurement+0xb0>
         {
            /* Calculate the number of RR Records in the measurement if */
            /* the flags indicate that this field is present.           */
            if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT)
 80060c4:	f015 0f10 	tst.w	r5, #16
 80060c8:	d01d      	beq.n	8006106 <DecodeHeartRateMeasurement+0x72>
            {
               /* Calculate the number of RR Intervals that are present */
               /* in the Heart Rate Measurement.                        */
               NumberIntervals = (Word_t)((BufferLength - HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, 0))/sizeof(Heart_Rate_Measurement->RR_Intervals[0]));
 80060ca:	1ae4      	subs	r4, r4, r3
 80060cc:	f3c4 044f 	ubfx	r4, r4, #1, #16
            /* Set a pointer into the variable part of the Heart Rate   */
            /* Measurement.                                             */
            tempPtr = ((HRS_Heart_Rate_Measurement_t *)Value)->Variable_Data;

            /* Parse out the Heart Rate value field in the message.     */
            if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_HEART_RATE_IS_WORD)
 80060d0:	b1de      	cbz	r6, 800610a <DecodeHeartRateMeasurement+0x76>
            {
               Heart_Rate_Measurement->Heart_Rate = READ_UNALIGNED_WORD_LITTLE_ENDIAN(tempPtr);
 80060d2:	7888      	ldrb	r0, [r1, #2]
 80060d4:	784b      	ldrb	r3, [r1, #1]
 80060d6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80060da:	8053      	strh	r3, [r2, #2]
               tempPtr += WORD_SIZE;
 80060dc:	3103      	adds	r1, #3
               Heart_Rate_Measurement->Heart_Rate = READ_UNALIGNED_BYTE_LITTLE_ENDIAN(tempPtr);
               tempPtr += BYTE_SIZE;
            }

            /* Parse out the Energy Expended field if it is present.    */
            if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_ENERGY_EXPENDED_PRESENT)
 80060de:	f015 0f08 	tst.w	r5, #8
 80060e2:	d005      	beq.n	80060f0 <DecodeHeartRateMeasurement+0x5c>
            {
               Heart_Rate_Measurement->Energy_Expended = READ_UNALIGNED_WORD_LITTLE_ENDIAN(tempPtr);
 80060e4:	7848      	ldrb	r0, [r1, #1]
 80060e6:	f811 3b02 	ldrb.w	r3, [r1], #2
 80060ea:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80060ee:	8093      	strh	r3, [r2, #4]
            }

            /* If there are RR Intervals in the measurement AND we have */
            /* entries in the user specified structure to store the     */
            /* intervals, then go ahead do that now.                    */
            if((NumberIntervals) && (Heart_Rate_Measurement->Number_Of_RR_Intervals))
 80060f0:	b10c      	cbz	r4, 80060f6 <DecodeHeartRateMeasurement+0x62>
 80060f2:	88d6      	ldrh	r6, [r2, #6]
 80060f4:	b96e      	cbnz	r6, 8006112 <DecodeHeartRateMeasurement+0x7e>
            {
               /* No entries were specified in the Heart Rate           */
               /* Measurement structure that the caller passed in.  In  */
               /* this case we will just return the number of RR        */
               /* Intervals that were contained in the measurement.     */
               if(!(Heart_Rate_Measurement->Number_Of_RR_Intervals))
 80060f6:	88d3      	ldrh	r3, [r2, #6]
 80060f8:	bb3b      	cbnz	r3, 800614a <DecodeHeartRateMeasurement+0xb6>
                  Heart_Rate_Measurement->Number_Of_RR_Intervals = NumberIntervals;
 80060fa:	80d4      	strh	r4, [r2, #6]
            }

            /* Return success to the caller.                            */
            ret_val = 0;
 80060fc:	2000      	movs	r0, #0
   }
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;

   return(ret_val);
}
 80060fe:	bc70      	pop	{r4, r5, r6}
 8006100:	4770      	bx	lr
         ExpectedLength                = HRS_HEART_RATE_MEASUREMENT_MINIMUM_LENGTH(Heart_Rate_Measurement->Flags);
 8006102:	2002      	movs	r0, #2
 8006104:	e7d4      	b.n	80060b0 <DecodeHeartRateMeasurement+0x1c>
               NumberIntervals = 0;
 8006106:	2400      	movs	r4, #0
 8006108:	e7e2      	b.n	80060d0 <DecodeHeartRateMeasurement+0x3c>
               Heart_Rate_Measurement->Heart_Rate = READ_UNALIGNED_BYTE_LITTLE_ENDIAN(tempPtr);
 800610a:	784b      	ldrb	r3, [r1, #1]
 800610c:	8053      	strh	r3, [r2, #2]
               tempPtr += BYTE_SIZE;
 800610e:	3102      	adds	r1, #2
 8006110:	e7e5      	b.n	80060de <DecodeHeartRateMeasurement+0x4a>
               Index = 0;
 8006112:	2300      	movs	r3, #0
               while((Index < NumberIntervals) && (Index < Heart_Rate_Measurement->Number_Of_RR_Intervals))
 8006114:	429c      	cmp	r4, r3
 8006116:	d90c      	bls.n	8006132 <DecodeHeartRateMeasurement+0x9e>
 8006118:	429e      	cmp	r6, r3
 800611a:	d90a      	bls.n	8006132 <DecodeHeartRateMeasurement+0x9e>
                  Heart_Rate_Measurement->RR_Intervals[Index] = READ_UNALIGNED_WORD_LITTLE_ENDIAN(tempPtr);
 800611c:	784d      	ldrb	r5, [r1, #1]
 800611e:	f811 0b02 	ldrb.w	r0, [r1], #2
 8006122:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006126:	1d1d      	adds	r5, r3, #4
 8006128:	f822 0015 	strh.w	r0, [r2, r5, lsl #1]
                  Index++;
 800612c:	3301      	adds	r3, #1
 800612e:	b29b      	uxth	r3, r3
 8006130:	e7f0      	b.n	8006114 <DecodeHeartRateMeasurement+0x80>
               Heart_Rate_Measurement->Number_Of_RR_Intervals = Index;
 8006132:	80d3      	strh	r3, [r2, #6]
            ret_val = 0;
 8006134:	2000      	movs	r0, #0
               Heart_Rate_Measurement->Number_Of_RR_Intervals = Index;
 8006136:	e7e2      	b.n	80060fe <DecodeHeartRateMeasurement+0x6a>
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <DecodeHeartRateMeasurement+0xbc>)
}
 800613a:	4770      	bx	lr
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 800613c:	4804      	ldr	r0, [pc, #16]	; (8006150 <DecodeHeartRateMeasurement+0xbc>)
 800613e:	e7de      	b.n	80060fe <DecodeHeartRateMeasurement+0x6a>
 8006140:	4803      	ldr	r0, [pc, #12]	; (8006150 <DecodeHeartRateMeasurement+0xbc>)
 8006142:	e7dc      	b.n	80060fe <DecodeHeartRateMeasurement+0x6a>
            ret_val = HRS_ERROR_MALFORMATTED_DATA;
 8006144:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8006148:	e7d9      	b.n	80060fe <DecodeHeartRateMeasurement+0x6a>
            ret_val = 0;
 800614a:	2000      	movs	r0, #0
   return(ret_val);
 800614c:	e7d7      	b.n	80060fe <DecodeHeartRateMeasurement+0x6a>
 800614e:	bf00      	nop
 8006150:	fffffc18 	.word	0xfffffc18

08006154 <DecodeBodySensorLocation>:
static int DecodeBodySensorLocation(unsigned int BufferLength, Byte_t *Value, Byte_t *BodySensorLocation)
{
   int ret_val;

   /* Verify that the input parameters appear semi-valid.               */
   if((BufferLength) && (Value) && (BodySensorLocation))
 8006154:	b138      	cbz	r0, 8006166 <DecodeBodySensorLocation+0x12>
 8006156:	b141      	cbz	r1, 800616a <DecodeBodySensorLocation+0x16>
 8006158:	b14a      	cbz	r2, 800616e <DecodeBodySensorLocation+0x1a>
   {
      /* Verify the length of the value is as expected.                 */
      if(BufferLength == HRS_BODY_SENSOR_LOCATION_VALUE_LENGTH)
 800615a:	2801      	cmp	r0, #1
 800615c:	d109      	bne.n	8006172 <DecodeBodySensorLocation+0x1e>
      {
         /* Parse out the Body Sensor Location out of the value.        */
         *BodySensorLocation = READ_UNALIGNED_BYTE_LITTLE_ENDIAN(Value);
 800615e:	780b      	ldrb	r3, [r1, #0]
 8006160:	7013      	strb	r3, [r2, #0]

         ret_val             = 0;
 8006162:	2000      	movs	r0, #0
 8006164:	4770      	bx	lr
      }
      else
         ret_val = HRS_ERROR_MALFORMATTED_DATA;
   }
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006166:	4804      	ldr	r0, [pc, #16]	; (8006178 <DecodeBodySensorLocation+0x24>)
 8006168:	4770      	bx	lr
 800616a:	4803      	ldr	r0, [pc, #12]	; (8006178 <DecodeBodySensorLocation+0x24>)
 800616c:	4770      	bx	lr
 800616e:	4802      	ldr	r0, [pc, #8]	; (8006178 <DecodeBodySensorLocation+0x24>)
 8006170:	4770      	bx	lr
         ret_val = HRS_ERROR_MALFORMATTED_DATA;
 8006172:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec

   return(ret_val);
}
 8006176:	4770      	bx	lr
 8006178:	fffffc18 	.word	0xfffffc18

0800617c <DecodeClientConfigurationValue>:
static int DecodeClientConfigurationValue(unsigned int BufferLength, Byte_t *Buffer, Word_t *ClientConfiguration)
{
   int ret_val = HRS_ERROR_MALFORMATTED_DATA;

   /* Verify that the input parameters are valid.                       */
   if(((BufferLength == NON_ALIGNED_BYTE_SIZE) || (BufferLength == GATT_CLIENT_CHARACTERISTIC_CONFIGURATION_LENGTH)) && (Buffer) && (ClientConfiguration))
 800617c:	1e43      	subs	r3, r0, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d904      	bls.n	800618c <DecodeClientConfigurationValue+0x10>

      ret_val              = 0;
   }
   else
   {
      if(BufferLength == GATT_CLIENT_CHARACTERISTIC_CONFIGURATION_LENGTH)
 8006182:	2802      	cmp	r0, #2
 8006184:	d013      	beq.n	80061ae <DecodeClientConfigurationValue+0x32>
   int ret_val = HRS_ERROR_MALFORMATTED_DATA;
 8006186:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 800618a:	4770      	bx	lr
   if(((BufferLength == NON_ALIGNED_BYTE_SIZE) || (BufferLength == GATT_CLIENT_CHARACTERISTIC_CONFIGURATION_LENGTH)) && (Buffer) && (ClientConfiguration))
 800618c:	2900      	cmp	r1, #0
 800618e:	d0f8      	beq.n	8006182 <DecodeClientConfigurationValue+0x6>
 8006190:	2a00      	cmp	r2, #0
 8006192:	d0f6      	beq.n	8006182 <DecodeClientConfigurationValue+0x6>
      if(BufferLength == NON_ALIGNED_BYTE_SIZE)
 8006194:	2801      	cmp	r0, #1
 8006196:	d006      	beq.n	80061a6 <DecodeClientConfigurationValue+0x2a>
         *ClientConfiguration = READ_UNALIGNED_WORD_LITTLE_ENDIAN(Buffer);
 8006198:	7848      	ldrb	r0, [r1, #1]
 800619a:	780b      	ldrb	r3, [r1, #0]
 800619c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80061a0:	8013      	strh	r3, [r2, #0]
      ret_val              = 0;
 80061a2:	2000      	movs	r0, #0
 80061a4:	4770      	bx	lr
         *ClientConfiguration = READ_UNALIGNED_BYTE_LITTLE_ENDIAN(Buffer);
 80061a6:	780b      	ldrb	r3, [r1, #0]
 80061a8:	8013      	strh	r3, [r2, #0]
      ret_val              = 0;
 80061aa:	2000      	movs	r0, #0
 80061ac:	4770      	bx	lr
         ret_val = HRS_ERROR_INVALID_PARAMETER;
 80061ae:	4801      	ldr	r0, [pc, #4]	; (80061b4 <DecodeClientConfigurationValue+0x38>)
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	fffffc18 	.word	0xfffffc18

080061b8 <DecodeHeartRateControlCommand>:
static int DecodeHeartRateControlCommand(unsigned int BufferLength, Byte_t *Buffer, HRS_Heart_Rate_Control_Command_t *Command)
{
   int ret_val = HRS_ERROR_MALFORMATTED_DATA;

   /* Verify that the input parameters are valid.                       */
   if((BufferLength == HRS_HEART_RATE_CONTROL_POINT_VALUE_LENGTH) && (Buffer) && (Command))
 80061b8:	2801      	cmp	r0, #1
 80061ba:	d105      	bne.n	80061c8 <DecodeHeartRateControlCommand+0x10>
 80061bc:	b131      	cbz	r1, 80061cc <DecodeHeartRateControlCommand+0x14>
 80061be:	b13a      	cbz	r2, 80061d0 <DecodeHeartRateControlCommand+0x18>
   {
      /* Read the requested Client Configuration.                       */
      *Command = (HRS_Heart_Rate_Control_Command_t)READ_UNALIGNED_BYTE_LITTLE_ENDIAN(Buffer);
 80061c0:	780b      	ldrb	r3, [r1, #0]
 80061c2:	7013      	strb	r3, [r2, #0]

      ret_val  = 0;
 80061c4:	2000      	movs	r0, #0
 80061c6:	4770      	bx	lr
   }
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 80061c8:	4802      	ldr	r0, [pc, #8]	; (80061d4 <DecodeHeartRateControlCommand+0x1c>)
 80061ca:	4770      	bx	lr
 80061cc:	4801      	ldr	r0, [pc, #4]	; (80061d4 <DecodeHeartRateControlCommand+0x1c>)
 80061ce:	4770      	bx	lr
 80061d0:	4800      	ldr	r0, [pc, #0]	; (80061d4 <DecodeHeartRateControlCommand+0x1c>)

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80061d2:	4770      	bx	lr
 80061d4:	fffffc18 	.word	0xfffffc18

080061d8 <HeartRateControlCommandSupported>:
static Boolean_t HeartRateControlCommandSupported(HRSServerInstance_t *HRSServerInstance, HRS_Heart_Rate_Control_Command_t Command)
{
   Boolean_t ret_val = FALSE;

   /* Verify that the input parameters are valid.                       */
   if((HRSServerInstance) && (HRS_HEART_RATE_CONTROL_POINT_VALID_COMMAND(Command)))
 80061d8:	b148      	cbz	r0, 80061ee <HeartRateControlCommandSupported+0x16>
 80061da:	2901      	cmp	r1, #1
 80061dc:	d001      	beq.n	80061e2 <HeartRateControlCommandSupported+0xa>
   Boolean_t ret_val = FALSE;
 80061de:	2000      	movs	r0, #0
 80061e0:	4770      	bx	lr
   {
      switch(Command)
      {
         case ccResetEnergyExpended:
            if(HRSServerInstance->Supported_Commands & HRS_HEART_RATE_CONTROL_POINT_RESET_ENERGY_EXPENDED_SUPPORTED)
 80061e2:	6903      	ldr	r3, [r0, #16]
 80061e4:	f013 0f01 	tst.w	r3, #1
 80061e8:	d103      	bne.n	80061f2 <HeartRateControlCommandSupported+0x1a>
   Boolean_t ret_val = FALSE;
 80061ea:	2000      	movs	r0, #0
 80061ec:	4770      	bx	lr
 80061ee:	2000      	movs	r0, #0
 80061f0:	4770      	bx	lr
               ret_val = TRUE;
 80061f2:	4608      	mov	r0, r1
      }
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80061f4:	4770      	bx	lr
	...

080061f8 <InstanceRegisteredByStackID>:
static Boolean_t InstanceRegisteredByStackID(unsigned int BluetoothStackID)
{
   Boolean_t    ret_val = FALSE;
   unsigned int Index;

   for(Index=0;Index<HRS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	b10b      	cbz	r3, 8006200 <InstanceRegisteredByStackID+0x8>
   Boolean_t    ret_val = FALSE;
 80061fc:	2000      	movs	r0, #0
 80061fe:	4770      	bx	lr
   {
      if((InstanceList[Index].BluetoothStackID == BluetoothStackID) && (InstanceList[Index].ServiceID))
 8006200:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006204:	4907      	ldr	r1, [pc, #28]	; (8006224 <InstanceRegisteredByStackID+0x2c>)
 8006206:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800620a:	4282      	cmp	r2, r0
 800620c:	d001      	beq.n	8006212 <InstanceRegisteredByStackID+0x1a>
   for(Index=0;Index<HRS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 800620e:	3301      	adds	r3, #1
 8006210:	e7f3      	b.n	80061fa <InstanceRegisteredByStackID+0x2>
      if((InstanceList[Index].BluetoothStackID == BluetoothStackID) && (InstanceList[Index].ServiceID))
 8006212:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006216:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800621a:	6852      	ldr	r2, [r2, #4]
 800621c:	2a00      	cmp	r2, #0
 800621e:	d0f6      	beq.n	800620e <InstanceRegisteredByStackID+0x16>
      {
         ret_val = TRUE;
 8006220:	2001      	movs	r0, #1
      }
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8006222:	4770      	bx	lr
 8006224:	200016dc 	.word	0x200016dc

08006228 <FormatEventHeader>:
{
 8006228:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800622c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800622e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 8006232:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   if((BufferLength >= (HRS_EVENT_DATA_SIZE + HRS_EVENT_DATA_BUFFER_SIZE)) && (Buffer) && (BD_ADDR))
 8006234:	281b      	cmp	r0, #27
 8006236:	d928      	bls.n	800628a <FormatEventHeader+0x62>
 8006238:	460c      	mov	r4, r1
 800623a:	4691      	mov	r9, r2
 800623c:	461f      	mov	r7, r3
 800623e:	b331      	cbz	r1, 800628e <FormatEventHeader+0x66>
 8006240:	b33e      	cbz	r6, 8006292 <FormatEventHeader+0x6a>
      BTPS_MemInitialize(Buffer, 0, BufferLength);
 8006242:	4602      	mov	r2, r0
 8006244:	2100      	movs	r1, #0
 8006246:	4620      	mov	r0, r4
 8006248:	f00d f939 	bl	80134be <BTPS_MemInitialize>
      EventData->Event_Data_Type                                              = EventType;
 800624c:	4621      	mov	r1, r4
 800624e:	f801 9b08 	strb.w	r9, [r1], #8
      EventData->Event_Data.HRS_Read_Client_Configuration_Data               = (HRS_Read_Client_Configuration_Data_t *)(((Byte_t *)EventData) + HRS_EVENT_DATA_SIZE);
 8006252:	6061      	str	r1, [r4, #4]
      EventData->Event_Data.HRS_Read_Client_Configuration_Data->InstanceID   = InstanceID;
 8006254:	60a7      	str	r7, [r4, #8]
      EventData->Event_Data.HRS_Read_Client_Configuration_Data->ConnectionID = ConnectionID;
 8006256:	9b08      	ldr	r3, [sp, #32]
 8006258:	604b      	str	r3, [r1, #4]
      if(TransactionID)
 800625a:	b165      	cbz	r5, 8006276 <FormatEventHeader+0x4e>
         EventData->Event_Data.HRS_Read_Client_Configuration_Data->TransactionID  = *TransactionID;
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	608b      	str	r3, [r1, #8]
         EventData->Event_Data.HRS_Read_Client_Configuration_Data->ConnectionType = ConnectionType;
 8006260:	f881 a00c 	strb.w	sl, [r1, #12]
         EventData->Event_Data.HRS_Read_Client_Configuration_Data->RemoteDevice   = *BD_ADDR;
 8006264:	6833      	ldr	r3, [r6, #0]
 8006266:	f8c1 300d 	str.w	r3, [r1, #13]
 800626a:	88b3      	ldrh	r3, [r6, #4]
 800626c:	f8a1 3011 	strh.w	r3, [r1, #17]
      EventData                                                               = (HRS_Event_Data_t *)Buffer;
 8006270:	4620      	mov	r0, r4
}
 8006272:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
         EventData->Event_Data.HRS_Client_Configuration_Update_Data->ConnectionType = ConnectionType;
 8006276:	f881 a008 	strb.w	sl, [r1, #8]
         EventData->Event_Data.HRS_Client_Configuration_Update_Data->RemoteDevice   = *BD_ADDR;
 800627a:	6833      	ldr	r3, [r6, #0]
 800627c:	f8c1 3009 	str.w	r3, [r1, #9]
 8006280:	88b3      	ldrh	r3, [r6, #4]
 8006282:	f8a1 300d 	strh.w	r3, [r1, #13]
      EventData                                                               = (HRS_Event_Data_t *)Buffer;
 8006286:	4620      	mov	r0, r4
 8006288:	e7f3      	b.n	8006272 <FormatEventHeader+0x4a>
   HRS_Event_Data_t *EventData = NULL;
 800628a:	2000      	movs	r0, #0
 800628c:	e7f1      	b.n	8006272 <FormatEventHeader+0x4a>
 800628e:	4608      	mov	r0, r1
 8006290:	e7ef      	b.n	8006272 <FormatEventHeader+0x4a>
 8006292:	4630      	mov	r0, r6
   return(EventData);
 8006294:	e7ed      	b.n	8006272 <FormatEventHeader+0x4a>
	...

08006298 <AcquireServiceInstance>:
   /* * NOTE * Since this is an internal function no check is done on   */
   /*          the input parameters.                                    */
   /* * NOTE * If InstanceID is set to 0, this function will return the */
   /*          next free instance.                                      */
static HRSServerInstance_t *AcquireServiceInstance(unsigned int BluetoothStackID, unsigned int *InstanceID)
{
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4604      	mov	r4, r0
 800629c:	460d      	mov	r5, r1
   unsigned int         Index;
   HRSServerInstance_t *ret_val = NULL;

   /* Lock the Bluetooth Stack to gain exclusive access to this         */
   /* Bluetooth Protocol Stack.                                         */
   if(!BSC_LockBluetoothStack(BluetoothStackID))
 800629e:	f012 feeb 	bl	8019078 <BSC_LockBluetoothStack>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d143      	bne.n	800632e <AcquireServiceInstance+0x96>
   {
      /* Acquire the BSC List Lock while we are searching the instance  */
      /* list.                                                          */
      if(BSC_AcquireListLock())
 80062a6:	f012 fbc1 	bl	8018a2c <BSC_AcquireListLock>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d03a      	beq.n	8006324 <AcquireServiceInstance+0x8c>
      {
         /* Store a copy of the passed in InstanceID locally.           */
         LocalInstanceID = *InstanceID;
 80062ae:	682b      	ldr	r3, [r5, #0]

         /* Verify that the Instance ID is valid.                       */
         if((LocalInstanceID) && (LocalInstanceID <= HRS_MAXIMUM_SUPPORTED_INSTANCES))
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d006      	beq.n	80062c2 <AcquireServiceInstance+0x2a>
         }
         else
         {
            /* Verify that we have been requested to find the next free */
            /* instance.                                                */
            if(!LocalInstanceID)
 80062b4:	bb13      	cbnz	r3, 80062fc <AcquireServiceInstance+0x64>
            {
               /* Try to find a free instance.                          */
               for(Index=0;Index<HRS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 80062b6:	b32b      	cbz	r3, 8006304 <AcquireServiceInstance+0x6c>
   HRSServerInstance_t *ret_val = NULL;
 80062b8:	2500      	movs	r5, #0
               }
            }
         }

         /* Release the previously acquired list lock.                  */
         BSC_ReleaseListLock();
 80062ba:	f012 ff1b 	bl	80190f4 <BSC_ReleaseListLock>
      }

      /* If we failed to acquire the instance then we should un-lock the*/
      /* previously acquired Bluetooth Stack.                           */
      if(!ret_val)
 80062be:	bbbd      	cbnz	r5, 8006330 <AcquireServiceInstance+0x98>
 80062c0:	e031      	b.n	8006326 <AcquireServiceInstance+0x8e>
            --LocalInstanceID;
 80062c2:	3b01      	subs	r3, #1
            if((InstanceList[LocalInstanceID].BluetoothStackID == BluetoothStackID) && (InstanceList[LocalInstanceID].ServiceID))
 80062c4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80062c8:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <AcquireServiceInstance+0x9c>)
 80062ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80062ce:	42a2      	cmp	r2, r4
 80062d0:	d10c      	bne.n	80062ec <AcquireServiceInstance+0x54>
 80062d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80062d6:	4917      	ldr	r1, [pc, #92]	; (8006334 <AcquireServiceInstance+0x9c>)
 80062d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80062dc:	6852      	ldr	r2, [r2, #4]
 80062de:	b14a      	cbz	r2, 80062f4 <AcquireServiceInstance+0x5c>
               ret_val = &InstanceList[LocalInstanceID];
 80062e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80062e4:	4d13      	ldr	r5, [pc, #76]	; (8006334 <AcquireServiceInstance+0x9c>)
 80062e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80062ea:	e7e6      	b.n	80062ba <AcquireServiceInstance+0x22>
         BSC_ReleaseListLock();
 80062ec:	f012 ff02 	bl	80190f4 <BSC_ReleaseListLock>
   HRSServerInstance_t *ret_val = NULL;
 80062f0:	2500      	movs	r5, #0
 80062f2:	e018      	b.n	8006326 <AcquireServiceInstance+0x8e>
         BSC_ReleaseListLock();
 80062f4:	f012 fefe 	bl	80190f4 <BSC_ReleaseListLock>
   HRSServerInstance_t *ret_val = NULL;
 80062f8:	2500      	movs	r5, #0
 80062fa:	e014      	b.n	8006326 <AcquireServiceInstance+0x8e>
         BSC_ReleaseListLock();
 80062fc:	f012 fefa 	bl	80190f4 <BSC_ReleaseListLock>
   HRSServerInstance_t *ret_val = NULL;
 8006300:	2500      	movs	r5, #0
 8006302:	e010      	b.n	8006326 <AcquireServiceInstance+0x8e>
                  if(!(InstanceList[Index].ServiceID))
 8006304:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006308:	490a      	ldr	r1, [pc, #40]	; (8006334 <AcquireServiceInstance+0x9c>)
 800630a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800630e:	6852      	ldr	r2, [r2, #4]
 8006310:	b10a      	cbz	r2, 8006316 <AcquireServiceInstance+0x7e>
               for(Index=0;Index<HRS_MAXIMUM_SUPPORTED_INSTANCES;Index++)
 8006312:	3301      	adds	r3, #1
 8006314:	e7cf      	b.n	80062b6 <AcquireServiceInstance+0x1e>
                     *InstanceID = Index+1;
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	602a      	str	r2, [r5, #0]
                     ret_val     = &InstanceList[Index];
 800631a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800631e:	eb01 0583 	add.w	r5, r1, r3, lsl #2
                     break;
 8006322:	e7ca      	b.n	80062ba <AcquireServiceInstance+0x22>
   HRSServerInstance_t *ret_val = NULL;
 8006324:	2500      	movs	r5, #0
         BSC_UnLockBluetoothStack(BluetoothStackID);
 8006326:	4620      	mov	r0, r4
 8006328:	f013 f80c 	bl	8019344 <BSC_UnLockBluetoothStack>
 800632c:	e000      	b.n	8006330 <AcquireServiceInstance+0x98>
   HRSServerInstance_t *ret_val = NULL;
 800632e:	2500      	movs	r5, #0
   }

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8006330:	4628      	mov	r0, r5
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200016dc 	.word	0x200016dc

08006338 <HRSRegisterService>:

   /* The following function is a utility function which is used to     */
   /* register an HRS Service.  This function returns the positive,     */
   /* non-zero, Instance ID on success or a negative error code.        */
static int HRSRegisterService(unsigned int BluetoothStackID, unsigned long Supported_Commands, HRS_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID, GATT_Attribute_Handle_Group_t *ServiceHandleRange)
{
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   int                  ret_val;
   unsigned int         InstanceID;
   HRSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (EventCallback) && (ServiceID))
 8006340:	2800      	cmp	r0, #0
 8006342:	d048      	beq.n	80063d6 <HRSRegisterService+0x9e>
 8006344:	4689      	mov	r9, r1
 8006346:	4617      	mov	r7, r2
 8006348:	4698      	mov	r8, r3
 800634a:	4605      	mov	r5, r0
 800634c:	2a00      	cmp	r2, #0
 800634e:	d044      	beq.n	80063da <HRSRegisterService+0xa2>
 8006350:	2e00      	cmp	r6, #0
 8006352:	d044      	beq.n	80063de <HRSRegisterService+0xa6>
   {
      /* Verify that no instance is registered to this Bluetooth Stack. */
      if(!InstanceRegisteredByStackID(BluetoothStackID))
 8006354:	f7ff ff50 	bl	80061f8 <InstanceRegisteredByStackID>
 8006358:	2800      	cmp	r0, #0
 800635a:	d142      	bne.n	80063e2 <HRSRegisterService+0xaa>
      {
         /* Acquire a free HRS Instance.                                */
         InstanceID = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	9305      	str	r3, [sp, #20]
         if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8006360:	a905      	add	r1, sp, #20
 8006362:	4628      	mov	r0, r5
 8006364:	f7ff ff98 	bl	8006298 <AcquireServiceInstance>
 8006368:	4682      	mov	sl, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d03b      	beq.n	80063e6 <HRSRegisterService+0xae>
         {
            /* Call GATT to register the HRS service.                   */
            ret_val = GATT_Register_Service(BluetoothStackID, HRS_SERVICE_FLAGS, HEART_RATE_SERVICE_ATTRIBUTE_COUNT, (GATT_Service_Attribute_Entry_t *)Heart_Rate_Service, ServiceHandleRange, GATT_ServerEventCallback, InstanceID);
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <HRSRegisterService+0xb4>)
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <HRSRegisterService+0xb8>)
 800637c:	2208      	movs	r2, #8
 800637e:	2101      	movs	r1, #1
 8006380:	4628      	mov	r0, r5
 8006382:	f023 fab5 	bl	80298f0 <GATT_Register_Service>
            if(ret_val > 0)
 8006386:	1e04      	subs	r4, r0, #0
 8006388:	dc06      	bgt.n	8006398 <HRSRegisterService+0x60>
               /* Return the HRS Instance ID.                           */
               ret_val = (int)InstanceID;
            }

            /* UnLock the previously locked Bluetooth Stack.            */
            BSC_UnLockBluetoothStack(BluetoothStackID);
 800638a:	4628      	mov	r0, r5
 800638c:	f012 ffda 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8006390:	4620      	mov	r0, r4
 8006392:	b006      	add	sp, #24
 8006394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
               ServiceInstance->BluetoothStackID   = BluetoothStackID;
 8006398:	f8ca 5000 	str.w	r5, [sl]
               ServiceInstance->ServiceID          = (unsigned int)ret_val;
 800639c:	f8ca 4004 	str.w	r4, [sl, #4]
               ServiceInstance->Supported_Commands = Supported_Commands;
 80063a0:	f8ca 9010 	str.w	r9, [sl, #16]
               ServiceInstance->EventCallback      = EventCallback;
 80063a4:	f8ca 7008 	str.w	r7, [sl, #8]
               ServiceInstance->CallbackParameter  = CallbackParameter;
 80063a8:	f8ca 800c 	str.w	r8, [sl, #12]
               *ServiceID                          = (unsigned int)ret_val;
 80063ac:	6034      	str	r4, [r6, #0]
               BTPS_MemInitialize(&InstanceData[InstanceID-1], 0, HRS_INSTANCE_DATA_SIZE);
 80063ae:	9805      	ldr	r0, [sp, #20]
 80063b0:	3801      	subs	r0, #1
 80063b2:	4e10      	ldr	r6, [pc, #64]	; (80063f4 <HRSRegisterService+0xbc>)
 80063b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80063b8:	2203      	movs	r2, #3
 80063ba:	2100      	movs	r1, #0
 80063bc:	4430      	add	r0, r6
 80063be:	f00d f87e 	bl	80134be <BTPS_MemInitialize>
               ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(InstanceData[InstanceID-1].Body_Sensor_Location_Length), HRS_BODY_SENSOR_LOCATION_VALUE_LENGTH);
 80063c2:	9c05      	ldr	r4, [sp, #20]
 80063c4:	1e63      	subs	r3, r4, #1
 80063c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80063ca:	18f2      	adds	r2, r6, r3
 80063cc:	2101      	movs	r1, #1
 80063ce:	54f1      	strb	r1, [r6, r3]
 80063d0:	2300      	movs	r3, #0
 80063d2:	7053      	strb	r3, [r2, #1]
               ret_val = (int)InstanceID;
 80063d4:	e7d9      	b.n	800638a <HRSRegisterService+0x52>
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 80063d6:	4c08      	ldr	r4, [pc, #32]	; (80063f8 <HRSRegisterService+0xc0>)
 80063d8:	e7da      	b.n	8006390 <HRSRegisterService+0x58>
 80063da:	4c07      	ldr	r4, [pc, #28]	; (80063f8 <HRSRegisterService+0xc0>)
 80063dc:	e7d8      	b.n	8006390 <HRSRegisterService+0x58>
 80063de:	4c06      	ldr	r4, [pc, #24]	; (80063f8 <HRSRegisterService+0xc0>)
 80063e0:	e7d6      	b.n	8006390 <HRSRegisterService+0x58>
         ret_val = HRS_ERROR_SERVICE_ALREADY_REGISTERED;
 80063e2:	4c06      	ldr	r4, [pc, #24]	; (80063fc <HRSRegisterService+0xc4>)
 80063e4:	e7d4      	b.n	8006390 <HRSRegisterService+0x58>
            ret_val = HRS_ERROR_INSUFFICIENT_RESOURCES;
 80063e6:	4c06      	ldr	r4, [pc, #24]	; (8006400 <HRSRegisterService+0xc8>)
   return(ret_val);
 80063e8:	e7d2      	b.n	8006390 <HRSRegisterService+0x58>
 80063ea:	bf00      	nop
 80063ec:	08006405 	.word	0x08006405
 80063f0:	0802f328 	.word	0x0802f328
 80063f4:	200016d8 	.word	0x200016d8
 80063f8:	fffffc18 	.word	0xfffffc18
 80063fc:	fffffc15 	.word	0xfffffc15
 8006400:	fffffc16 	.word	0xfffffc16

08006404 <GATT_ServerEventCallback>:
   unsigned int         InstanceID;
   HRS_Event_Data_t    *EventData;
   HRSServerInstance_t *ServiceInstance;

   /* Verify that all parameters to this callback are Semi-Valid.       */
   if((BluetoothStackID) && (GATT_ServerEventData) && (CallbackParameter))
 8006404:	2800      	cmp	r0, #0
 8006406:	f000 80fc 	beq.w	8006602 <GATT_ServerEventCallback+0x1fe>
{
 800640a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800640e:	b08f      	sub	sp, #60	; 0x3c
 8006410:	460c      	mov	r4, r1
 8006412:	4605      	mov	r5, r0
   if((BluetoothStackID) && (GATT_ServerEventData) && (CallbackParameter))
 8006414:	b101      	cbz	r1, 8006418 <GATT_ServerEventCallback+0x14>
 8006416:	b912      	cbnz	r2, 800641e <GATT_ServerEventCallback+0x1a>

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
      }
   }
}
 8006418:	b00f      	add	sp, #60	; 0x3c
 800641a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      InstanceID = (unsigned int)CallbackParameter;
 800641e:	9205      	str	r2, [sp, #20]
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8006420:	a905      	add	r1, sp, #20
 8006422:	f7ff ff39 	bl	8006298 <AcquireServiceInstance>
 8006426:	4606      	mov	r6, r0
 8006428:	2800      	cmp	r0, #0
 800642a:	d0f5      	beq.n	8006418 <GATT_ServerEventCallback+0x14>
         switch(GATT_ServerEventData->Event_Data_Type)
 800642c:	7823      	ldrb	r3, [r4, #0]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d005      	beq.n	800643e <GATT_ServerEventCallback+0x3a>
 8006432:	2b03      	cmp	r3, #3
 8006434:	d050      	beq.n	80064d8 <GATT_ServerEventCallback+0xd4>
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 8006436:	6830      	ldr	r0, [r6, #0]
 8006438:	f012 ff84 	bl	8019344 <BSC_UnLockBluetoothStack>
}
 800643c:	e7ec      	b.n	8006418 <GATT_ServerEventCallback+0x14>
               if(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data)
 800643e:	6863      	ldr	r3, [r4, #4]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f8      	beq.n	8006436 <GATT_ServerEventCallback+0x32>
                  AttributeOffset = GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeOffset;
 8006444:	8a9c      	ldrh	r4, [r3, #20]
                  TransactionID   = GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->TransactionID;
 8006446:	6859      	ldr	r1, [r3, #4]
 8006448:	9106      	str	r1, [sp, #24]
                  if(!(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->AttributeValueOffset))
 800644a:	8ada      	ldrh	r2, [r3, #22]
 800644c:	2a00      	cmp	r2, #0
 800644e:	d13d      	bne.n	80064cc <GATT_ServerEventCallback+0xc8>
                     if(Heart_Rate_Service[AttributeOffset].Attribute_Entry_Type == aetCharacteristicDescriptor16)
 8006450:	4a6c      	ldr	r2, [pc, #432]	; (8006604 <GATT_ServerEventCallback+0x200>)
 8006452:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006456:	7852      	ldrb	r2, [r2, #1]
 8006458:	2a09      	cmp	r2, #9
 800645a:	d015      	beq.n	8006488 <GATT_ServerEventCallback+0x84>
                        InstanceTag = (Word_t)(((GATT_Characteristic_Value_16_Entry_t *)Heart_Rate_Service[AttributeOffset].Attribute_Value)->Characteristic_Value_Length);
 800645c:	4b69      	ldr	r3, [pc, #420]	; (8006604 <GATT_ServerEventCallback+0x200>)
 800645e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006462:	6860      	ldr	r0, [r4, #4]
                        ValueLength = READ_UNALIGNED_WORD_LITTLE_ENDIAN(&(((Byte_t *)(&InstanceData[InstanceID-1]))[InstanceTag]));
 8006464:	9b05      	ldr	r3, [sp, #20]
 8006466:	3b01      	subs	r3, #1
 8006468:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800646c:	4a66      	ldr	r2, [pc, #408]	; (8006608 <GATT_ServerEventCallback+0x204>)
 800646e:	4413      	add	r3, r2
 8006470:	8880      	ldrh	r0, [r0, #4]
 8006472:	181a      	adds	r2, r3, r0
 8006474:	7854      	ldrb	r4, [r2, #1]
 8006476:	5c1a      	ldrb	r2, [r3, r0]
                        Value       = (Byte_t *)(&(((Byte_t *)(&InstanceData[InstanceID-1]))[InstanceTag + WORD_SIZE]));
 8006478:	3002      	adds	r0, #2
                        GATT_Read_Response(BluetoothStackID, TransactionID, (unsigned int)ValueLength, Value);
 800647a:	4403      	add	r3, r0
 800647c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8006480:	4628      	mov	r0, r5
 8006482:	f023 f9b5 	bl	80297f0 <GATT_Read_Response>
 8006486:	e7d6      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                        EventData = FormatEventHeader(sizeof(Event_Buffer), Event_Buffer, etHRS_Server_Read_Client_Configuration_Request, InstanceID, GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->ConnectionID, &TransactionID, GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->ConnectionType, &(GATT_ServerEventData->Event_Data.GATT_Read_Request_Data->RemoteDevice));
 8006488:	f103 0209 	add.w	r2, r3, #9
 800648c:	9203      	str	r2, [sp, #12]
 800648e:	7a1a      	ldrb	r2, [r3, #8]
 8006490:	9202      	str	r2, [sp, #8]
 8006492:	aa06      	add	r2, sp, #24
 8006494:	9201      	str	r2, [sp, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	9b05      	ldr	r3, [sp, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	a907      	add	r1, sp, #28
 80064a0:	201c      	movs	r0, #28
 80064a2:	f7ff fec1 	bl	8006228 <FormatEventHeader>
                        if(EventData)
 80064a6:	4601      	mov	r1, r0
 80064a8:	b148      	cbz	r0, 80064be <GATT_ServerEventCallback+0xba>
                           EventData->Event_Data_Size                                                        = HRS_READ_CLIENT_CONFIGURATION_DATA_SIZE;
 80064aa:	2314      	movs	r3, #20
 80064ac:	8043      	strh	r3, [r0, #2]
                           EventData->Event_Data.HRS_Read_Client_Configuration_Data->ClientConfigurationType = ctHeartReateMeasurement;
 80064ae:	6843      	ldr	r3, [r0, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	74da      	strb	r2, [r3, #19]
                              (*ServiceInstance->EventCallback)(ServiceInstance->BluetoothStackID, EventData, ServiceInstance->CallbackParameter);
 80064b4:	68b3      	ldr	r3, [r6, #8]
 80064b6:	68f2      	ldr	r2, [r6, #12]
 80064b8:	6830      	ldr	r0, [r6, #0]
 80064ba:	4798      	blx	r3
                           }
 80064bc:	e7bb      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                           GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_UNLIKELY_ERROR);
 80064be:	230e      	movs	r3, #14
 80064c0:	4622      	mov	r2, r4
 80064c2:	9906      	ldr	r1, [sp, #24]
 80064c4:	4628      	mov	r0, r5
 80064c6:	f022 fff5 	bl	80294b4 <GATT_Error_Response>
 80064ca:	e7b4      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                     GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_ATTRIBUTE_NOT_LONG);
 80064cc:	230b      	movs	r3, #11
 80064ce:	4622      	mov	r2, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f022 ffef 	bl	80294b4 <GATT_Error_Response>
 80064d6:	e7ae      	b.n	8006436 <GATT_ServerEventCallback+0x32>
               if(GATT_ServerEventData->Event_Data.GATT_Write_Request_Data)
 80064d8:	6863      	ldr	r3, [r4, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0ab      	beq.n	8006436 <GATT_ServerEventCallback+0x32>
                  AttributeOffset = GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->AttributeOffset;
 80064de:	8a9c      	ldrh	r4, [r3, #20]
                  TransactionID   = GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->TransactionID;
 80064e0:	6859      	ldr	r1, [r3, #4]
 80064e2:	9106      	str	r1, [sp, #24]
                  ValueLength     = GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->AttributeValueLength;
 80064e4:	8adf      	ldrh	r7, [r3, #22]
                  Value           = GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->AttributeValue;
 80064e6:	f8d3 801c 	ldr.w	r8, [r3, #28]
                  if((!(GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->AttributeValueOffset)) && (!(GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->DelayWrite)))
 80064ea:	8b1a      	ldrh	r2, [r3, #24]
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	f040 8082 	bne.w	80065f6 <GATT_ServerEventCallback+0x1f2>
 80064f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d17d      	bne.n	80065f6 <GATT_ServerEventCallback+0x1f2>
                     if(Heart_Rate_Service[AttributeOffset].Attribute_Entry_Type == aetCharacteristicDescriptor16)
 80064fa:	4a42      	ldr	r2, [pc, #264]	; (8006604 <GATT_ServerEventCallback+0x200>)
 80064fc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006500:	7852      	ldrb	r2, [r2, #1]
 8006502:	2a09      	cmp	r2, #9
 8006504:	d02d      	beq.n	8006562 <GATT_ServerEventCallback+0x15e>
                        EventData = FormatEventHeader(sizeof(Event_Buffer), Event_Buffer, etHRS_Server_Heart_Rate_Control_Point_Command, InstanceID, GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->ConnectionID, NULL, GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->ConnectionType, &(GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->RemoteDevice));
 8006506:	f103 0209 	add.w	r2, r3, #9
 800650a:	9203      	str	r2, [sp, #12]
 800650c:	7a1a      	ldrb	r2, [r3, #8]
 800650e:	9202      	str	r2, [sp, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	9201      	str	r2, [sp, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	9b05      	ldr	r3, [sp, #20]
 800651a:	2202      	movs	r2, #2
 800651c:	a907      	add	r1, sp, #28
 800651e:	201c      	movs	r0, #28
 8006520:	f7ff fe82 	bl	8006228 <FormatEventHeader>
                        if(EventData)
 8006524:	4681      	mov	r9, r0
 8006526:	2800      	cmp	r0, #0
 8006528:	d05e      	beq.n	80065e8 <GATT_ServerEventCallback+0x1e4>
                           EventData->Event_Data_Size = HRS_HEART_RATE_CONTROL_COMMAND_DATA_SIZE;
 800652a:	2310      	movs	r3, #16
 800652c:	8043      	strh	r3, [r0, #2]
                           if(!DecodeHeartRateControlCommand(ValueLength, Value, &(EventData->Event_Data.HRS_Heart_Rate_Control_Command_Data->Command)))
 800652e:	6842      	ldr	r2, [r0, #4]
 8006530:	320f      	adds	r2, #15
 8006532:	4641      	mov	r1, r8
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff fe3f 	bl	80061b8 <DecodeHeartRateControlCommand>
 800653a:	2800      	cmp	r0, #0
 800653c:	d14d      	bne.n	80065da <GATT_ServerEventCallback+0x1d6>
                              if(HeartRateControlCommandSupported(ServiceInstance, EventData->Event_Data.HRS_Heart_Rate_Control_Command_Data->Command))
 800653e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006542:	7bd9      	ldrb	r1, [r3, #15]
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff fe47 	bl	80061d8 <HeartRateControlCommandSupported>
 800654a:	2800      	cmp	r0, #0
 800654c:	d03e      	beq.n	80065cc <GATT_ServerEventCallback+0x1c8>
                                 GATT_Write_Response(BluetoothStackID, TransactionID);
 800654e:	9906      	ldr	r1, [sp, #24]
 8006550:	4628      	mov	r0, r5
 8006552:	f023 faf5 	bl	8029b40 <GATT_Write_Response>
                                    (*ServiceInstance->EventCallback)(ServiceInstance->BluetoothStackID, EventData, ServiceInstance->CallbackParameter);
 8006556:	68b3      	ldr	r3, [r6, #8]
 8006558:	68f2      	ldr	r2, [r6, #12]
 800655a:	4649      	mov	r1, r9
 800655c:	6830      	ldr	r0, [r6, #0]
 800655e:	4798      	blx	r3
                                 }
 8006560:	e769      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                        EventData = FormatEventHeader(sizeof(Event_Buffer), Event_Buffer, etHRS_Server_Client_Configuration_Update, InstanceID, GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->ConnectionID, NULL, GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->ConnectionType, &(GATT_ServerEventData->Event_Data.GATT_Write_Request_Data->RemoteDevice));
 8006562:	f103 0209 	add.w	r2, r3, #9
 8006566:	9203      	str	r2, [sp, #12]
 8006568:	7a1a      	ldrb	r2, [r3, #8]
 800656a:	9202      	str	r2, [sp, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	9201      	str	r2, [sp, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b05      	ldr	r3, [sp, #20]
 8006576:	2201      	movs	r2, #1
 8006578:	a907      	add	r1, sp, #28
 800657a:	201c      	movs	r0, #28
 800657c:	f7ff fe54 	bl	8006228 <FormatEventHeader>
                        if(EventData)
 8006580:	4681      	mov	r9, r0
 8006582:	b1e0      	cbz	r0, 80065be <GATT_ServerEventCallback+0x1ba>
                           EventData->Event_Data_Size                                                          = HRS_CLIENT_CONFIGURATION_UPDATE_DATA_SIZE;
 8006584:	2314      	movs	r3, #20
 8006586:	8043      	strh	r3, [r0, #2]
                           EventData->Event_Data.HRS_Client_Configuration_Update_Data->ClientConfigurationType = ctHeartReateMeasurement;
 8006588:	6843      	ldr	r3, [r0, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	73da      	strb	r2, [r3, #15]
                           if(!DecodeClientConfigurationValue(ValueLength, Value, &(EventData->Event_Data.HRS_Client_Configuration_Update_Data->ClientConfiguration)))
 800658e:	6842      	ldr	r2, [r0, #4]
 8006590:	3210      	adds	r2, #16
 8006592:	4641      	mov	r1, r8
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff fdf1 	bl	800617c <DecodeClientConfigurationValue>
 800659a:	b948      	cbnz	r0, 80065b0 <GATT_ServerEventCallback+0x1ac>
                              GATT_Write_Response(BluetoothStackID, TransactionID);
 800659c:	9906      	ldr	r1, [sp, #24]
 800659e:	4628      	mov	r0, r5
 80065a0:	f023 face 	bl	8029b40 <GATT_Write_Response>
                                 (*ServiceInstance->EventCallback)(ServiceInstance->BluetoothStackID, EventData, ServiceInstance->CallbackParameter);
 80065a4:	68b3      	ldr	r3, [r6, #8]
 80065a6:	68f2      	ldr	r2, [r6, #12]
 80065a8:	4649      	mov	r1, r9
 80065aa:	6830      	ldr	r0, [r6, #0]
 80065ac:	4798      	blx	r3
                              }
 80065ae:	e742      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                              GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_REQUEST_NOT_SUPPORTED);
 80065b0:	2306      	movs	r3, #6
 80065b2:	4622      	mov	r2, r4
 80065b4:	9906      	ldr	r1, [sp, #24]
 80065b6:	4628      	mov	r0, r5
 80065b8:	f022 ff7c 	bl	80294b4 <GATT_Error_Response>
 80065bc:	e73b      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                           GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_UNLIKELY_ERROR);
 80065be:	230e      	movs	r3, #14
 80065c0:	4622      	mov	r2, r4
 80065c2:	9906      	ldr	r1, [sp, #24]
 80065c4:	4628      	mov	r0, r5
 80065c6:	f022 ff75 	bl	80294b4 <GATT_Error_Response>
 80065ca:	e734      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                                 GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, HRS_ERROR_CODE_CONTROL_POINT_NOT_SUPPORTED);
 80065cc:	2380      	movs	r3, #128	; 0x80
 80065ce:	4622      	mov	r2, r4
 80065d0:	9906      	ldr	r1, [sp, #24]
 80065d2:	4628      	mov	r0, r5
 80065d4:	f022 ff6e 	bl	80294b4 <GATT_Error_Response>
 80065d8:	e72d      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                              GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, HRS_ERROR_CODE_CONTROL_POINT_NOT_SUPPORTED);
 80065da:	2380      	movs	r3, #128	; 0x80
 80065dc:	4622      	mov	r2, r4
 80065de:	9906      	ldr	r1, [sp, #24]
 80065e0:	4628      	mov	r0, r5
 80065e2:	f022 ff67 	bl	80294b4 <GATT_Error_Response>
 80065e6:	e726      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                           GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_UNLIKELY_ERROR);
 80065e8:	230e      	movs	r3, #14
 80065ea:	4622      	mov	r2, r4
 80065ec:	9906      	ldr	r1, [sp, #24]
 80065ee:	4628      	mov	r0, r5
 80065f0:	f022 ff60 	bl	80294b4 <GATT_Error_Response>
 80065f4:	e71f      	b.n	8006436 <GATT_ServerEventCallback+0x32>
                     GATT_Error_Response(BluetoothStackID, TransactionID, AttributeOffset, ATT_PROTOCOL_ERROR_CODE_REQUEST_NOT_SUPPORTED);
 80065f6:	2306      	movs	r3, #6
 80065f8:	4622      	mov	r2, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	f022 ff5a 	bl	80294b4 <GATT_Error_Response>
 8006600:	e719      	b.n	8006436 <GATT_ServerEventCallback+0x32>
 8006602:	4770      	bx	lr
 8006604:	0802f328 	.word	0x0802f328
 8006608:	200016d8 	.word	0x200016d8

0800660c <HRS_Initialize_Service>:
   /*             HRS_HEART_RATE_CONTROL_POINT_XXX_SUPPORTED            */
   /* * NOTE * All Client Requests will be dispatch to the EventCallback*/
   /*          function that is specified by the second parameter to    */
   /*          this function.                                           */
int BTPSAPI HRS_Initialize_Service(unsigned int BluetoothStackID, unsigned long Supported_Commands, HRS_Event_Callback_t EventCallback, unsigned long CallbackParameter, unsigned int *ServiceID)
{
 800660c:	b510      	push	{r4, lr}
 800660e:	b084      	sub	sp, #16
   GATT_Attribute_Handle_Group_t ServiceHandleRange;

    /* Initialize the Service Handle Group to 0.                        */
   ServiceHandleRange.Starting_Handle = 0;
 8006610:	2400      	movs	r4, #0
 8006612:	f8ad 400c 	strh.w	r4, [sp, #12]
   ServiceHandleRange.Ending_Handle   = 0;
 8006616:	f8ad 400e 	strh.w	r4, [sp, #14]

   return(HRSRegisterService(BluetoothStackID, Supported_Commands, EventCallback, CallbackParameter, ServiceID, &ServiceHandleRange));
 800661a:	ac03      	add	r4, sp, #12
 800661c:	9401      	str	r4, [sp, #4]
 800661e:	9c06      	ldr	r4, [sp, #24]
 8006620:	9400      	str	r4, [sp, #0]
 8006622:	f7ff fe89 	bl	8006338 <HRSRegisterService>
}
 8006626:	b004      	add	sp, #16
 8006628:	bd10      	pop	{r4, pc}
	...

0800662c <HRS_Cleanup_Service>:
   /* on which to close the server.  The second parameter is the        */
   /* InstanceID that was returned from a successful call to            */
   /* HRS_Initialize_Service().  This function returns a zero if        */
   /* successful or a negative return error code if an error occurs.    */
int BTPSAPI HRS_Cleanup_Service(unsigned int BluetoothStackID, unsigned int InstanceID)
{
 800662c:	b530      	push	{r4, r5, lr}
 800662e:	b083      	sub	sp, #12
 8006630:	9101      	str	r1, [sp, #4]
   int                   ret_val;
   HRSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID))
 8006632:	b1c8      	cbz	r0, 8006668 <HRS_Cleanup_Service+0x3c>
 8006634:	4604      	mov	r4, r0
 8006636:	b1c9      	cbz	r1, 800666c <HRS_Cleanup_Service+0x40>
   {
      /* Acquire the specified HRS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8006638:	a901      	add	r1, sp, #4
 800663a:	f7ff fe2d 	bl	8006298 <AcquireServiceInstance>
 800663e:	4605      	mov	r5, r0
 8006640:	b1b0      	cbz	r0, 8006670 <HRS_Cleanup_Service+0x44>
      {
         /* Verify that the service is actually registered.             */
         if(ServiceInstance->ServiceID)
 8006642:	6841      	ldr	r1, [r0, #4]
 8006644:	b931      	cbnz	r1, 8006654 <HRS_Cleanup_Service+0x28>

            /* return success to the caller.                            */
            ret_val = 0;
         }
         else
            ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006646:	4d0b      	ldr	r5, [pc, #44]	; (8006674 <HRS_Cleanup_Service+0x48>)

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(BluetoothStackID);
 8006648:	4620      	mov	r0, r4
 800664a:	f012 fe7b 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 800664e:	4628      	mov	r0, r5
 8006650:	b003      	add	sp, #12
 8006652:	bd30      	pop	{r4, r5, pc}
            GATT_Un_Register_Service(BluetoothStackID, ServiceInstance->ServiceID);
 8006654:	4620      	mov	r0, r4
 8006656:	f023 fa0b 	bl	8029a70 <GATT_Un_Register_Service>
            BTPS_MemInitialize(ServiceInstance, 0, HRS_SERVER_INSTANCE_DATA_SIZE);
 800665a:	2214      	movs	r2, #20
 800665c:	2100      	movs	r1, #0
 800665e:	4628      	mov	r0, r5
 8006660:	f00c ff2d 	bl	80134be <BTPS_MemInitialize>
            ret_val = 0;
 8006664:	2500      	movs	r5, #0
 8006666:	e7ef      	b.n	8006648 <HRS_Cleanup_Service+0x1c>
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006668:	4d02      	ldr	r5, [pc, #8]	; (8006674 <HRS_Cleanup_Service+0x48>)
 800666a:	e7f0      	b.n	800664e <HRS_Cleanup_Service+0x22>
 800666c:	4d01      	ldr	r5, [pc, #4]	; (8006674 <HRS_Cleanup_Service+0x48>)
 800666e:	e7ee      	b.n	800664e <HRS_Cleanup_Service+0x22>
         ret_val = HRS_ERROR_INVALID_INSTANCE_ID;
 8006670:	4d01      	ldr	r5, [pc, #4]	; (8006678 <HRS_Cleanup_Service+0x4c>)
   return(ret_val);
 8006672:	e7ec      	b.n	800664e <HRS_Cleanup_Service+0x22>
 8006674:	fffffc18 	.word	0xfffffc18
 8006678:	fffffc14 	.word	0xfffffc14

0800667c <HRS_Set_Body_Sensor_Location>:
   /* error occurs.                                                     */
   /* * NOTE * The Body_Sensor_Location parameter should be an          */
   /*          enumerated value of the form                             */
   /*          HRS_BODY_SENSOR_LOCATION_XXX.                            */
int BTPSAPI HRS_Set_Body_Sensor_Location(unsigned int BluetoothStackID, unsigned int InstanceID, Byte_t Body_Sensor_Location)
{
 800667c:	b510      	push	{r4, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	9101      	str	r1, [sp, #4]

   int                  ret_val;
   HRSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID))
 8006682:	b190      	cbz	r0, 80066aa <HRS_Set_Body_Sensor_Location+0x2e>
 8006684:	4614      	mov	r4, r2
 8006686:	b191      	cbz	r1, 80066ae <HRS_Set_Body_Sensor_Location+0x32>
   {
      /* Acquire the specified HRS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8006688:	a901      	add	r1, sp, #4
 800668a:	f7ff fe05 	bl	8006298 <AcquireServiceInstance>
 800668e:	b180      	cbz	r0, 80066b2 <HRS_Set_Body_Sensor_Location+0x36>
      {
         /* Assign the Temperature Type for the specified instance.     */
         ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(InstanceData[InstanceID-1].Body_Sensor_Location), Body_Sensor_Location);
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	3b01      	subs	r3, #1
 8006694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006698:	4907      	ldr	r1, [pc, #28]	; (80066b8 <HRS_Set_Body_Sensor_Location+0x3c>)
 800669a:	440b      	add	r3, r1
 800669c:	709c      	strb	r4, [r3, #2]

         /* Return success to the caller.                               */
         ret_val = 0;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 800669e:	6800      	ldr	r0, [r0, #0]
 80066a0:	f012 fe50 	bl	8019344 <BSC_UnLockBluetoothStack>
         ret_val = 0;
 80066a4:	2000      	movs	r0, #0
#else

   return(BTPS_ERROR_FEATURE_NOT_AVAILABLE);

#endif
}
 80066a6:	b002      	add	sp, #8
 80066a8:	bd10      	pop	{r4, pc}
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 80066aa:	4804      	ldr	r0, [pc, #16]	; (80066bc <HRS_Set_Body_Sensor_Location+0x40>)
 80066ac:	e7fb      	b.n	80066a6 <HRS_Set_Body_Sensor_Location+0x2a>
 80066ae:	4803      	ldr	r0, [pc, #12]	; (80066bc <HRS_Set_Body_Sensor_Location+0x40>)
 80066b0:	e7f9      	b.n	80066a6 <HRS_Set_Body_Sensor_Location+0x2a>
         ret_val = HRS_ERROR_INVALID_INSTANCE_ID;
 80066b2:	4803      	ldr	r0, [pc, #12]	; (80066c0 <HRS_Set_Body_Sensor_Location+0x44>)
   return(ret_val);
 80066b4:	e7f7      	b.n	80066a6 <HRS_Set_Body_Sensor_Location+0x2a>
 80066b6:	bf00      	nop
 80066b8:	200016d8 	.word	0x200016d8
 80066bc:	fffffc18 	.word	0xfffffc18
 80066c0:	fffffc14 	.word	0xfffffc14

080066c4 <HRS_Query_Body_Sensor_Location>:
   /* to HRS_Initialize_Server().  The final parameter is a pointer to  */
   /* return the current Body Sensor Location for the specified HRS     */
   /* Instance.  This function returns a zero if successful or a        */
   /* negative return error code if an error occurs.                    */
int BTPSAPI HRS_Query_Body_Sensor_Location(unsigned int BluetoothStackID, unsigned int InstanceID, Byte_t *Body_Sensor_Location)
{
 80066c4:	b510      	push	{r4, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	9101      	str	r1, [sp, #4]

   int                  ret_val;
   HRSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (Body_Sensor_Location))
 80066ca:	b1a0      	cbz	r0, 80066f6 <HRS_Query_Body_Sensor_Location+0x32>
 80066cc:	4614      	mov	r4, r2
 80066ce:	b1a1      	cbz	r1, 80066fa <HRS_Query_Body_Sensor_Location+0x36>
 80066d0:	b1ac      	cbz	r4, 80066fe <HRS_Query_Body_Sensor_Location+0x3a>
   {
      /* Acquire the specified HRS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 80066d2:	a901      	add	r1, sp, #4
 80066d4:	f7ff fde0 	bl	8006298 <AcquireServiceInstance>
 80066d8:	b198      	cbz	r0, 8006702 <HRS_Query_Body_Sensor_Location+0x3e>
      {
         /* Query the curent Temperature Type.                          */
         *Body_Sensor_Location = READ_UNALIGNED_BYTE_LITTLE_ENDIAN(&(InstanceData[InstanceID-1].Body_Sensor_Location));
 80066da:	9b01      	ldr	r3, [sp, #4]
 80066dc:	3b01      	subs	r3, #1
 80066de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80066e2:	4a09      	ldr	r2, [pc, #36]	; (8006708 <HRS_Query_Body_Sensor_Location+0x44>)
 80066e4:	4413      	add	r3, r2
 80066e6:	789b      	ldrb	r3, [r3, #2]
 80066e8:	7023      	strb	r3, [r4, #0]

         /* Return success to the caller.                               */
         ret_val           = 0;

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	f012 fe2a 	bl	8019344 <BSC_UnLockBluetoothStack>
         ret_val           = 0;
 80066f0:	2000      	movs	r0, #0
#else

   return(BTPS_ERROR_FEATURE_NOT_AVAILABLE);

#endif
}
 80066f2:	b002      	add	sp, #8
 80066f4:	bd10      	pop	{r4, pc}
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 80066f6:	4805      	ldr	r0, [pc, #20]	; (800670c <HRS_Query_Body_Sensor_Location+0x48>)
 80066f8:	e7fb      	b.n	80066f2 <HRS_Query_Body_Sensor_Location+0x2e>
 80066fa:	4804      	ldr	r0, [pc, #16]	; (800670c <HRS_Query_Body_Sensor_Location+0x48>)
 80066fc:	e7f9      	b.n	80066f2 <HRS_Query_Body_Sensor_Location+0x2e>
 80066fe:	4803      	ldr	r0, [pc, #12]	; (800670c <HRS_Query_Body_Sensor_Location+0x48>)
 8006700:	e7f7      	b.n	80066f2 <HRS_Query_Body_Sensor_Location+0x2e>
         ret_val = HRS_ERROR_INVALID_INSTANCE_ID;
 8006702:	4803      	ldr	r0, [pc, #12]	; (8006710 <HRS_Query_Body_Sensor_Location+0x4c>)
   return(ret_val);
 8006704:	e7f5      	b.n	80066f2 <HRS_Query_Body_Sensor_Location+0x2e>
 8006706:	bf00      	nop
 8006708:	200016d8 	.word	0x200016d8
 800670c:	fffffc18 	.word	0xfffffc18
 8006710:	fffffc14 	.word	0xfffffc14

08006714 <HRS_Read_Client_Configuration_Response>:
   /* HRS_Initialize_Server().  The third is the Transaction ID of the  */
   /* request.  The final parameter contains the Client Configuration to*/
   /* send to the remote device.  This function returns a zero if       */
   /* successful or a negative return error code if an error occurs.    */
int BTPSAPI HRS_Read_Client_Configuration_Response(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int TransactionID, Word_t Client_Configuration)
{
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	9101      	str	r1, [sp, #4]
   Word_t               ValueLength;
   NonAlignedWord_t     ClientConfiguration;
   HRSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (TransactionID))
 800671a:	b1d0      	cbz	r0, 8006752 <HRS_Read_Client_Configuration_Response+0x3e>
 800671c:	4615      	mov	r5, r2
 800671e:	461c      	mov	r4, r3
 8006720:	b1c9      	cbz	r1, 8006756 <HRS_Read_Client_Configuration_Response+0x42>
 8006722:	b1d5      	cbz	r5, 800675a <HRS_Read_Client_Configuration_Response+0x46>
   {
      /* Acquire the specified HRS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8006724:	a901      	add	r1, sp, #4
 8006726:	f7ff fdb7 	bl	8006298 <AcquireServiceInstance>
 800672a:	4606      	mov	r6, r0
 800672c:	b1b8      	cbz	r0, 800675e <HRS_Read_Client_Configuration_Response+0x4a>
      {
         /* Format the Read Response.                                   */
         ValueLength = GATT_CLIENT_CHARACTERISTIC_CONFIGURATION_LENGTH;
         ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&ClientConfiguration, Client_Configuration);
 800672e:	f88d 400c 	strb.w	r4, [sp, #12]
 8006732:	0a24      	lsrs	r4, r4, #8
 8006734:	f88d 400d 	strb.w	r4, [sp, #13]

         /* Send the response.                                          */
         ret_val = GATT_Read_Response(ServiceInstance->BluetoothStackID, TransactionID, (unsigned int)ValueLength, (Byte_t *)&ClientConfiguration);
 8006738:	ab03      	add	r3, sp, #12
 800673a:	2202      	movs	r2, #2
 800673c:	4629      	mov	r1, r5
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	f023 f856 	bl	80297f0 <GATT_Read_Response>
 8006744:	4604      	mov	r4, r0

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 8006746:	6830      	ldr	r0, [r6, #0]
 8006748:	f012 fdfc 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 800674c:	4620      	mov	r0, r4
 800674e:	b004      	add	sp, #16
 8006750:	bd70      	pop	{r4, r5, r6, pc}
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006752:	4c04      	ldr	r4, [pc, #16]	; (8006764 <HRS_Read_Client_Configuration_Response+0x50>)
 8006754:	e7fa      	b.n	800674c <HRS_Read_Client_Configuration_Response+0x38>
 8006756:	4c03      	ldr	r4, [pc, #12]	; (8006764 <HRS_Read_Client_Configuration_Response+0x50>)
 8006758:	e7f8      	b.n	800674c <HRS_Read_Client_Configuration_Response+0x38>
 800675a:	4c02      	ldr	r4, [pc, #8]	; (8006764 <HRS_Read_Client_Configuration_Response+0x50>)
 800675c:	e7f6      	b.n	800674c <HRS_Read_Client_Configuration_Response+0x38>
         ret_val = HRS_ERROR_INVALID_INSTANCE_ID;
 800675e:	4c02      	ldr	r4, [pc, #8]	; (8006768 <HRS_Read_Client_Configuration_Response+0x54>)
   return(ret_val);
 8006760:	e7f4      	b.n	800674c <HRS_Read_Client_Configuration_Response+0x38>
 8006762:	bf00      	nop
 8006764:	fffffc18 	.word	0xfffffc18
 8006768:	fffffc14 	.word	0xfffffc14

0800676c <HRS_Notify_Heart_Rate_Measurement>:
   /* ConnectionID of the remote device to send the notification to.    */
   /* The final parameter is the Heart Rate Measurement data to notify. */
   /* This function returns a zero if successful or a negative return   */
   /* error code if an error occurs.                                    */
int BTPSAPI HRS_Notify_Heart_Rate_Measurement(unsigned int BluetoothStackID, unsigned int InstanceID, unsigned int ConnectionID, HRS_Heart_Rate_Measurement_Data_t *Heart_Rate_Measurement)
{
 800676c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006770:	b087      	sub	sp, #28
 8006772:	9103      	str	r1, [sp, #12]
   Word_t               MaximumRRIntervals;
   unsigned int         NotificationDataLength;
   HRSServerInstance_t *ServiceInstance;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((BluetoothStackID) && (InstanceID) && (ConnectionID) && (Heart_Rate_Measurement) && ((!(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT)) || ((Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT) && (Heart_Rate_Measurement->Number_Of_RR_Intervals))))
 8006774:	2800      	cmp	r0, #0
 8006776:	d06c      	beq.n	8006852 <HRS_Notify_Heart_Rate_Measurement+0xe6>
 8006778:	4616      	mov	r6, r2
 800677a:	461c      	mov	r4, r3
 800677c:	4605      	mov	r5, r0
 800677e:	2900      	cmp	r1, #0
 8006780:	d06a      	beq.n	8006858 <HRS_Notify_Heart_Rate_Measurement+0xec>
 8006782:	2a00      	cmp	r2, #0
 8006784:	d06b      	beq.n	800685e <HRS_Notify_Heart_Rate_Measurement+0xf2>
 8006786:	2c00      	cmp	r4, #0
 8006788:	d06c      	beq.n	8006864 <HRS_Notify_Heart_Rate_Measurement+0xf8>
 800678a:	7823      	ldrb	r3, [r4, #0]
 800678c:	f013 0f10 	tst.w	r3, #16
 8006790:	d002      	beq.n	8006798 <HRS_Notify_Heart_Rate_Measurement+0x2c>
 8006792:	88e3      	ldrh	r3, [r4, #6]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d068      	beq.n	800686a <HRS_Notify_Heart_Rate_Measurement+0xfe>
   {
      /* Acquire the specified HRS Instance.                            */
      if((ServiceInstance = AcquireServiceInstance(BluetoothStackID, &InstanceID)) != NULL)
 8006798:	a903      	add	r1, sp, #12
 800679a:	4628      	mov	r0, r5
 800679c:	f7ff fd7c 	bl	8006298 <AcquireServiceInstance>
 80067a0:	4607      	mov	r7, r0
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d064      	beq.n	8006870 <HRS_Notify_Heart_Rate_Measurement+0x104>
#endif

         /* Call GATT to determine the Connection MTU, this is needed to*/
         /* determine the total number of RR Intervals that can be fit  */
         /* into the message (if necessary).                            */
         if(!(ret_val = GATT_Query_Connection_MTU(BluetoothStackID, ConnectionID, &MTU)))
 80067a6:	f10d 0216 	add.w	r2, sp, #22
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	f023 f807 	bl	80297c0 <GATT_Query_Connection_MTU>
 80067b2:	4680      	mov	r8, r0
 80067b4:	bb88      	cbnz	r0, 800681a <HRS_Notify_Heart_Rate_Measurement+0xae>
         {
            /* If RR Intervals were specified then we need to check to  */
            /* see what the maximum number of RR Intervals that will fit*/
            /* into a notification for this connection.                 */
            if(Heart_Rate_Measurement->Flags & HRS_HEART_RATE_MEASUREMENT_FLAGS_RR_INTERVAL_PRESENT)
 80067b6:	7825      	ldrb	r5, [r4, #0]
 80067b8:	f015 0810 	ands.w	r8, r5, #16
 80067bc:	d00a      	beq.n	80067d4 <HRS_Notify_Heart_Rate_Measurement+0x68>
            {
               /* Calculate the number of RR Intervals that can fit into*/
               /* a notification for this connection.                   */
               MaximumRRIntervals = (Word_t)CalculateMaximumSupportedIntervals(Heart_Rate_Measurement, MTU);
 80067be:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80067c2:	4620      	mov	r0, r4
 80067c4:	f7ff fbfe 	bl	8005fc4 <CalculateMaximumSupportedIntervals>
 80067c8:	b280      	uxth	r0, r0

               /* If the number of RR Intervals specified in the Heart  */
               /* Rate Measurement is more than will fit into a         */
               /* notification then truncate the number of measurements */
               /* that we will format into the notification.            */
               if(Heart_Rate_Measurement->Number_Of_RR_Intervals > MaximumRRIntervals)
 80067ca:	88e3      	ldrh	r3, [r4, #6]
 80067cc:	4283      	cmp	r3, r0
 80067ce:	d903      	bls.n	80067d8 <HRS_Notify_Heart_Rate_Measurement+0x6c>
                  Heart_Rate_Measurement->Number_Of_RR_Intervals = MaximumRRIntervals;
 80067d0:	80e0      	strh	r0, [r4, #6]
 80067d2:	e001      	b.n	80067d8 <HRS_Notify_Heart_Rate_Measurement+0x6c>
            }
            else
               Heart_Rate_Measurement->Number_Of_RR_Intervals = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	80e3      	strh	r3, [r4, #6]

            /* Allocate a buffer that is big enough to hold the         */
            /* notification.                                            */
            NotificationDataLength = HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, Heart_Rate_Measurement->Number_Of_RR_Intervals);
 80067d8:	f015 0f01 	tst.w	r5, #1
 80067dc:	d024      	beq.n	8006828 <HRS_Notify_Heart_Rate_Measurement+0xbc>
 80067de:	2303      	movs	r3, #3
 80067e0:	10ad      	asrs	r5, r5, #2
 80067e2:	f005 0502 	and.w	r5, r5, #2
 80067e6:	441d      	add	r5, r3
 80067e8:	f1b8 0f00 	cmp.w	r8, #0
 80067ec:	d01e      	beq.n	800682c <HRS_Notify_Heart_Rate_Measurement+0xc0>
 80067ee:	88e3      	ldrh	r3, [r4, #6]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	441d      	add	r5, r3
            if((NotificationData = BTPS_AllocateMemory(NotificationDataLength)) != NULL)
 80067f4:	4628      	mov	r0, r5
 80067f6:	f00c fde1 	bl	80133bc <BTPS_AllocateMemory>
 80067fa:	4681      	mov	r9, r0
 80067fc:	b330      	cbz	r0, 800684c <HRS_Notify_Heart_Rate_Measurement+0xe0>
            {
               /* Initialize the Notification Data memory.              */
               BTPS_MemInitialize(NotificationData, 0, NotificationDataLength);
 80067fe:	462a      	mov	r2, r5
 8006800:	2100      	movs	r1, #0
 8006802:	f00c fe5c 	bl	80134be <BTPS_MemInitialize>

               /* Format the Heart Rate Measurement into the            */
               /* Notification.                                         */
               if(!(ret_val = FormatHeartRateMeasurement(Heart_Rate_Measurement, NotificationDataLength, NotificationData)))
 8006806:	464a      	mov	r2, r9
 8006808:	4629      	mov	r1, r5
 800680a:	4620      	mov	r0, r4
 800680c:	f7ff fbf0 	bl	8005ff0 <FormatHeartRateMeasurement>
 8006810:	4680      	mov	r8, r0
 8006812:	b168      	cbz	r0, 8006830 <HRS_Notify_Heart_Rate_Measurement+0xc4>
                  if(ret_val > 0)
                     ret_val = 0;
               }

               /* Free the previously allocated memory.                 */
               BTPS_FreeMemory(NotificationData);
 8006814:	4648      	mov	r0, r9
 8006816:	f00c fdeb 	bl	80133f0 <BTPS_FreeMemory>
            else
               ret_val = HRS_ERROR_INSUFFICIENT_RESOURCES;
         }

         /* UnLock the previously locked Bluetooth Stack.               */
         BSC_UnLockBluetoothStack(ServiceInstance->BluetoothStackID);
 800681a:	6838      	ldr	r0, [r7, #0]
 800681c:	f012 fd92 	bl	8019344 <BSC_UnLockBluetoothStack>
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 8006820:	4640      	mov	r0, r8
 8006822:	b007      	add	sp, #28
 8006824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            NotificationDataLength = HRS_HEART_RATE_MEASUREMENT_LENGTH(Heart_Rate_Measurement->Flags, Heart_Rate_Measurement->Number_Of_RR_Intervals);
 8006828:	2302      	movs	r3, #2
 800682a:	e7d9      	b.n	80067e0 <HRS_Notify_Heart_Rate_Measurement+0x74>
 800682c:	2300      	movs	r3, #0
 800682e:	e7e0      	b.n	80067f2 <HRS_Notify_Heart_Rate_Measurement+0x86>
                  ret_val = GATT_Handle_Value_Notification(ServiceInstance->BluetoothStackID, ServiceInstance->ServiceID, ConnectionID, HRS_HEART_RATE_MEASUREMENT_ATTRIBUTE_OFFSET, (Word_t)NotificationDataLength, (Byte_t *)NotificationData);
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	6838      	ldr	r0, [r7, #0]
 8006834:	f8cd 9004 	str.w	r9, [sp, #4]
 8006838:	b2ad      	uxth	r5, r5
 800683a:	9500      	str	r5, [sp, #0]
 800683c:	2302      	movs	r3, #2
 800683e:	4632      	mov	r2, r6
 8006840:	f022 fed2 	bl	80295e8 <GATT_Handle_Value_Notification>
                  if(ret_val > 0)
 8006844:	2800      	cmp	r0, #0
 8006846:	dce5      	bgt.n	8006814 <HRS_Notify_Heart_Rate_Measurement+0xa8>
                  ret_val = GATT_Handle_Value_Notification(ServiceInstance->BluetoothStackID, ServiceInstance->ServiceID, ConnectionID, HRS_HEART_RATE_MEASUREMENT_ATTRIBUTE_OFFSET, (Word_t)NotificationDataLength, (Byte_t *)NotificationData);
 8006848:	4680      	mov	r8, r0
 800684a:	e7e3      	b.n	8006814 <HRS_Notify_Heart_Rate_Measurement+0xa8>
               ret_val = HRS_ERROR_INSUFFICIENT_RESOURCES;
 800684c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8006878 <HRS_Notify_Heart_Rate_Measurement+0x10c>
 8006850:	e7e3      	b.n	800681a <HRS_Notify_Heart_Rate_Measurement+0xae>
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 8006852:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800687c <HRS_Notify_Heart_Rate_Measurement+0x110>
 8006856:	e7e3      	b.n	8006820 <HRS_Notify_Heart_Rate_Measurement+0xb4>
 8006858:	f8df 8020 	ldr.w	r8, [pc, #32]	; 800687c <HRS_Notify_Heart_Rate_Measurement+0x110>
 800685c:	e7e0      	b.n	8006820 <HRS_Notify_Heart_Rate_Measurement+0xb4>
 800685e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 800687c <HRS_Notify_Heart_Rate_Measurement+0x110>
 8006862:	e7dd      	b.n	8006820 <HRS_Notify_Heart_Rate_Measurement+0xb4>
 8006864:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800687c <HRS_Notify_Heart_Rate_Measurement+0x110>
 8006868:	e7da      	b.n	8006820 <HRS_Notify_Heart_Rate_Measurement+0xb4>
 800686a:	f8df 8010 	ldr.w	r8, [pc, #16]	; 800687c <HRS_Notify_Heart_Rate_Measurement+0x110>
 800686e:	e7d7      	b.n	8006820 <HRS_Notify_Heart_Rate_Measurement+0xb4>
         ret_val = HRS_ERROR_INVALID_INSTANCE_ID;
 8006870:	f8df 800c 	ldr.w	r8, [pc, #12]	; 8006880 <HRS_Notify_Heart_Rate_Measurement+0x114>
   return(ret_val);
 8006874:	e7d4      	b.n	8006820 <HRS_Notify_Heart_Rate_Measurement+0xb4>
 8006876:	bf00      	nop
 8006878:	fffffc16 	.word	0xfffffc16
 800687c:	fffffc18 	.word	0xfffffc18
 8006880:	fffffc14 	.word	0xfffffc14

08006884 <HRS_Decode_Heart_Rate_Measurement>:
   /*          the Number_Of_RR_Intervals member will contain the total */
   /*          number of RR Interval values in the Heart Rate           */
   /*          Measurement value BUT no RR Intervals will be parsed into*/
   /*          the HeartRateMeasurement structure.                      */
int BTPSAPI HRS_Decode_Heart_Rate_Measurement(unsigned int ValueLength, Byte_t *Value, HRS_Heart_Rate_Measurement_Data_t *HeartRateMeasurement)
{
 8006884:	b508      	push	{r3, lr}
   /* Call the internal function to decode the Heart Rate Measurement.  */
   return(DecodeHeartRateMeasurement(ValueLength, Value, HeartRateMeasurement));
 8006886:	f7ff fc05 	bl	8006094 <DecodeHeartRateMeasurement>
}
 800688a:	bd08      	pop	{r3, pc}

0800688c <HRS_Decode_Body_Sensor_Location>:
   /* data returned by the remote HRS Server.  The final parameter is a */
   /* pointer to store the parsed Body Sensor Location value.  This     */
   /* function returns a zero if successful or a negative return error  */
   /* code if an error occurs.                                          */
int BTPSAPI HRS_Decode_Body_Sensor_Location(unsigned int ValueLength, Byte_t *Value, Byte_t *BodySensorLocation)
{
 800688c:	b508      	push	{r3, lr}
   /* Call the internal function to decode the Body Sensor Location.    */
   return(DecodeBodySensorLocation(ValueLength, Value, BodySensorLocation));
 800688e:	f7ff fc61 	bl	8006154 <DecodeBodySensorLocation>
}
 8006892:	bd08      	pop	{r3, pc}

08006894 <HRS_Format_Heart_Rate_Control_Command>:
int BTPSAPI HRS_Format_Heart_Rate_Control_Command(HRS_Heart_Rate_Control_Command_t Command, unsigned int BufferLength, Byte_t *Buffer)
{
   int ret_val;

   /* Make sure the parameters passed to us are semi-valid.             */
   if((HRS_HEART_RATE_CONTROL_POINT_VALID_COMMAND(Command)) && (BufferLength >= HRS_HEART_RATE_CONTROL_POINT_VALUE_LENGTH) && (Buffer))
 8006894:	2801      	cmp	r0, #1
 8006896:	d104      	bne.n	80068a2 <HRS_Format_Heart_Rate_Control_Command+0xe>
 8006898:	b129      	cbz	r1, 80068a6 <HRS_Format_Heart_Rate_Control_Command+0x12>
 800689a:	b132      	cbz	r2, 80068aa <HRS_Format_Heart_Rate_Control_Command+0x16>
   {
      /* Assign the command into the user specified buffer.             */
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(Buffer, Command);
 800689c:	7010      	strb	r0, [r2, #0]

      /* Return success to the caller.                                  */
      ret_val = 0;
 800689e:	2000      	movs	r0, #0
 80068a0:	4770      	bx	lr
   }
   else
      ret_val = HRS_ERROR_INVALID_PARAMETER;
 80068a2:	4803      	ldr	r0, [pc, #12]	; (80068b0 <HRS_Format_Heart_Rate_Control_Command+0x1c>)
 80068a4:	4770      	bx	lr
 80068a6:	4802      	ldr	r0, [pc, #8]	; (80068b0 <HRS_Format_Heart_Rate_Control_Command+0x1c>)
 80068a8:	4770      	bx	lr
 80068aa:	4801      	ldr	r0, [pc, #4]	; (80068b0 <HRS_Format_Heart_Rate_Control_Command+0x1c>)

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	fffffc18 	.word	0xfffffc18

080068b4 <HAL_ConsoleRead>:
   /* input queue.  the function receives a pointer to a buffer that    */
   /* will receive the UART characters a the length of the buffer.  The */
   /* function will return the number of characters that were returned  */
   /* in Buffer.                                                        */
int HAL_ConsoleRead(int Length, char *Buffer)
{
 80068b4:	b508      	push	{r3, lr}
   int ret_val;
   if((Length) && (Buffer))
 80068b6:	b118      	cbz	r0, 80068c0 <HAL_ConsoleRead+0xc>
 80068b8:	b119      	cbz	r1, 80068c2 <HAL_ConsoleRead+0xe>
   {
	   ret_val = serialInputRead((uint8_t*)Buffer);
 80068ba:	4608      	mov	r0, r1
 80068bc:	f001 f924 	bl	8007b08 <serialInputRead>
   }
   else
      ret_val = 0;

   return(ret_val);
}
 80068c0:	bd08      	pop	{r3, pc}
      ret_val = 0;
 80068c2:	2000      	movs	r0, #0
 80068c4:	e7fc      	b.n	80068c0 <HAL_ConsoleRead+0xc>

080068c6 <HAL_ConsoleWrite>:
   /* queue.  the function receives a pointer to a buffer that will     */
   /* contains the data to send and the length of the data.  The        */
   /* function will return the number of characters that were           */
   /* successfully saved in the output buffer.                          */
int HAL_ConsoleWrite(int Length, char *Buffer)
{
 80068c6:	b510      	push	{r4, lr}
   //int Count;
   //int BytesFree;
	int ret_val = Length;

   if((Length) && (Buffer))
 80068c8:	4604      	mov	r4, r0
 80068ca:	b128      	cbz	r0, 80068d8 <HAL_ConsoleWrite+0x12>
 80068cc:	460b      	mov	r3, r1
 80068ce:	b129      	cbz	r1, 80068dc <HAL_ConsoleWrite+0x16>
   {
	   serialOutputPrint((uint8_t*)Buffer, Length);
 80068d0:	4601      	mov	r1, r0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f940 	bl	8007b58 <serialOutputPrint>
   else
      ret_val = 0;


   return(ret_val);
}
 80068d8:	4620      	mov	r0, r4
 80068da:	bd10      	pop	{r4, pc}
      ret_val = 0;
 80068dc:	2400      	movs	r4, #0
 80068de:	e7fb      	b.n	80068d8 <HAL_ConsoleWrite+0x12>

080068e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80068e0:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80068e2:	4808      	ldr	r0, [pc, #32]	; (8006904 <MX_CRC_Init+0x24>)
 80068e4:	4b08      	ldr	r3, [pc, #32]	; (8006908 <MX_CRC_Init+0x28>)
 80068e6:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80068ec:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80068ee:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80068f0:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80068f2:	2301      	movs	r3, #1
 80068f4:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80068f6:	f001 ff41 	bl	800877c <HAL_CRC_Init>
 80068fa:	b900      	cbnz	r0, 80068fe <MX_CRC_Init+0x1e>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80068fc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80068fe:	f000 fcef 	bl	80072e0 <Error_Handler>
}
 8006902:	e7fb      	b.n	80068fc <MX_CRC_Init+0x1c>
 8006904:	20017a60 	.word	0x20017a60
 8006908:	40023000 	.word	0x40023000

0800690c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 800690c:	6802      	ldr	r2, [r0, #0]
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <HAL_CRC_MspInit+0x28>)
 8006910:	429a      	cmp	r2, r3
 8006912:	d000      	beq.n	8006916 <HAL_CRC_MspInit+0xa>
 8006914:	4770      	bx	lr
{
 8006916:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006918:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800691c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800691e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006922:	649a      	str	r2, [r3, #72]	; 0x48
 8006924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800692a:	9301      	str	r3, [sp, #4]
 800692c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800692e:	b002      	add	sp, #8
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40023000 	.word	0x40023000

08006938 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006938:	b500      	push	{lr}
 800693a:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800693c:	2228      	movs	r2, #40	; 0x28
 800693e:	2100      	movs	r1, #0
 8006940:	4668      	mov	r0, sp
 8006942:	f00d fcf9 	bl	8014338 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006946:	4812      	ldr	r0, [pc, #72]	; (8006990 <MX_DAC1_Init+0x58>)
 8006948:	4b12      	ldr	r3, [pc, #72]	; (8006994 <MX_DAC1_Init+0x5c>)
 800694a:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800694c:	f001 ff8d 	bl	800886a <HAL_DAC_Init>
 8006950:	b9a0      	cbnz	r0, 800697c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006952:	2200      	movs	r2, #0
 8006954:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006956:	9202      	str	r2, [sp, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006958:	9200      	str	r2, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800695a:	9203      	str	r2, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800695c:	9204      	str	r2, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800695e:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006960:	4669      	mov	r1, sp
 8006962:	480b      	ldr	r0, [pc, #44]	; (8006990 <MX_DAC1_Init+0x58>)
 8006964:	f001 ffcc 	bl	8008900 <HAL_DAC_ConfigChannel>
 8006968:	b958      	cbnz	r0, 8006982 <MX_DAC1_Init+0x4a>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800696a:	2210      	movs	r2, #16
 800696c:	4669      	mov	r1, sp
 800696e:	4808      	ldr	r0, [pc, #32]	; (8006990 <MX_DAC1_Init+0x58>)
 8006970:	f001 ffc6 	bl	8008900 <HAL_DAC_ConfigChannel>
 8006974:	b940      	cbnz	r0, 8006988 <MX_DAC1_Init+0x50>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006976:	b00b      	add	sp, #44	; 0x2c
 8006978:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800697c:	f000 fcb0 	bl	80072e0 <Error_Handler>
 8006980:	e7e7      	b.n	8006952 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8006982:	f000 fcad 	bl	80072e0 <Error_Handler>
 8006986:	e7f0      	b.n	800696a <MX_DAC1_Init+0x32>
    Error_Handler();
 8006988:	f000 fcaa 	bl	80072e0 <Error_Handler>
}
 800698c:	e7f3      	b.n	8006976 <MX_DAC1_Init+0x3e>
 800698e:	bf00      	nop
 8006990:	20017a84 	.word	0x20017a84
 8006994:	40007400 	.word	0x40007400

08006998 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006998:	b510      	push	{r4, lr}
 800699a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800699c:	2300      	movs	r3, #0
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	9306      	str	r3, [sp, #24]
 80069a6:	9307      	str	r3, [sp, #28]
  if(dacHandle->Instance==DAC1)
 80069a8:	6802      	ldr	r2, [r0, #0]
 80069aa:	4b16      	ldr	r3, [pc, #88]	; (8006a04 <HAL_DAC_MspInit+0x6c>)
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <HAL_DAC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80069b0:	b008      	add	sp, #32
 80069b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80069b4:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 80069b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80069be:	659a      	str	r2, [r3, #88]	; 0x58
 80069c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069c2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80069c6:	9201      	str	r2, [sp, #4]
 80069c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069cc:	f042 0201 	orr.w	r2, r2, #1
 80069d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80069d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	9302      	str	r3, [sp, #8]
 80069da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80069dc:	2330      	movs	r3, #48	; 0x30
 80069de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069e0:	2303      	movs	r3, #3
 80069e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2400      	movs	r4, #0
 80069e6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069e8:	a903      	add	r1, sp, #12
 80069ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069ee:	f002 f9bd 	bl	8008d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80069f2:	4622      	mov	r2, r4
 80069f4:	2105      	movs	r1, #5
 80069f6:	2036      	movs	r0, #54	; 0x36
 80069f8:	f001 fe7e 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80069fc:	2036      	movs	r0, #54	; 0x36
 80069fe:	f001 feaf 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8006a02:	e7d5      	b.n	80069b0 <HAL_DAC_MspInit+0x18>
 8006a04:	40007400 	.word	0x40007400

08006a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006a08:	b500      	push	{lr}
 8006a0a:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006a0c:	4b37      	ldr	r3, [pc, #220]	; (8006aec <MX_DMA_Init+0xe4>)
 8006a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a10:	f042 0204 	orr.w	r2, r2, #4
 8006a14:	649a      	str	r2, [r3, #72]	; 0x48
 8006a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a18:	f002 0204 	and.w	r2, r2, #4
 8006a1c:	9201      	str	r2, [sp, #4]
 8006a1e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	649a      	str	r2, [r3, #72]	; 0x48
 8006a28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a2a:	f002 0201 	and.w	r2, r2, #1
 8006a2e:	9202      	str	r2, [sp, #8]
 8006a30:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a34:	f042 0202 	orr.w	r2, r2, #2
 8006a38:	649a      	str	r2, [r3, #72]	; 0x48
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	9303      	str	r3, [sp, #12]
 8006a42:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006a44:	2200      	movs	r2, #0
 8006a46:	2105      	movs	r1, #5
 8006a48:	200b      	movs	r0, #11
 8006a4a:	f001 fe55 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006a4e:	200b      	movs	r0, #11
 8006a50:	f001 fe86 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8006a54:	2200      	movs	r2, #0
 8006a56:	2105      	movs	r1, #5
 8006a58:	200c      	movs	r0, #12
 8006a5a:	f001 fe4d 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006a5e:	200c      	movs	r0, #12
 8006a60:	f001 fe7e 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8006a64:	2200      	movs	r2, #0
 8006a66:	2105      	movs	r1, #5
 8006a68:	200d      	movs	r0, #13
 8006a6a:	f001 fe45 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006a6e:	200d      	movs	r0, #13
 8006a70:	f001 fe76 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8006a74:	2200      	movs	r2, #0
 8006a76:	2105      	movs	r1, #5
 8006a78:	200e      	movs	r0, #14
 8006a7a:	f001 fe3d 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006a7e:	200e      	movs	r0, #14
 8006a80:	f001 fe6e 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8006a84:	2200      	movs	r2, #0
 8006a86:	2105      	movs	r1, #5
 8006a88:	2011      	movs	r0, #17
 8006a8a:	f001 fe35 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8006a8e:	2011      	movs	r0, #17
 8006a90:	f001 fe66 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8006a94:	2200      	movs	r2, #0
 8006a96:	2105      	movs	r1, #5
 8006a98:	2038      	movs	r0, #56	; 0x38
 8006a9a:	f001 fe2d 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8006a9e:	2038      	movs	r0, #56	; 0x38
 8006aa0:	f001 fe5e 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2105      	movs	r1, #5
 8006aa8:	203b      	movs	r0, #59	; 0x3b
 8006aaa:	f001 fe25 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8006aae:	203b      	movs	r0, #59	; 0x3b
 8006ab0:	f001 fe56 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 5, 0);
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2105      	movs	r1, #5
 8006ab8:	203c      	movs	r0, #60	; 0x3c
 8006aba:	f001 fe1d 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8006abe:	203c      	movs	r0, #60	; 0x3c
 8006ac0:	f001 fe4e 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 5, 0);
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2105      	movs	r1, #5
 8006ac8:	2044      	movs	r0, #68	; 0x44
 8006aca:	f001 fe15 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8006ace:	2044      	movs	r0, #68	; 0x44
 8006ad0:	f001 fe46 	bl	8008760 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 5, 0);
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2105      	movs	r1, #5
 8006ad8:	2045      	movs	r0, #69	; 0x45
 8006ada:	f001 fe0d 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8006ade:	2045      	movs	r0, #69	; 0x45
 8006ae0:	f001 fe3e 	bl	8008760 <HAL_NVIC_EnableIRQ>

}
 8006ae4:	b005      	add	sp, #20
 8006ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000

08006af0 <fifoInit>:

#include "fifo.h"
#include <stdlib.h>


uint8_t fifoInit(FifoContext* context, uint32_t size, uint8_t type) {
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4604      	mov	r4, r0
	context->fifoBufferSize = size;
 8006af4:	6001      	str	r1, [r0, #0]
	context->fifoType = type;
 8006af6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

	context->fifoHead = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60c3      	str	r3, [r0, #12]
	context->fifoTail = 0;
 8006afe:	6083      	str	r3, [r0, #8]

	context->fifoMutex = xSemaphoreCreateMutexStatic(&(context->fifoMutexBuffer));
 8006b00:	f100 0118 	add.w	r1, r0, #24
 8006b04:	2001      	movs	r0, #1
 8006b06:	f00a fb1e 	bl	8011146 <xQueueCreateMutexStatic>
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	6160      	str	r0, [r4, #20]

	context->fifoEmptySpaceLeft = context->fifoBufferSize;
 8006b0e:	6820      	ldr	r0, [r4, #0]
 8006b10:	6060      	str	r0, [r4, #4]
	context->fifoBuffer = (uint8_t*)calloc(context->fifoBufferSize, sizeof(uint8_t));
 8006b12:	2101      	movs	r1, #1
 8006b14:	f00d f938 	bl	8013d88 <calloc>
 8006b18:	6120      	str	r0, [r4, #16]

	return context->fifoBuffer != NULL && context->fifoMutex != NULL;
 8006b1a:	b120      	cbz	r0, 8006b26 <fifoInit+0x36>
 8006b1c:	b10d      	cbz	r5, 8006b22 <fifoInit+0x32>
 8006b1e:	2001      	movs	r0, #1
}
 8006b20:	bd38      	pop	{r3, r4, r5, pc}
	return context->fifoBuffer != NULL && context->fifoMutex != NULL;
 8006b22:	2000      	movs	r0, #0
 8006b24:	e7fc      	b.n	8006b20 <fifoInit+0x30>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e7fa      	b.n	8006b20 <fifoInit+0x30>

08006b2a <fifoPush>:

uint8_t fifoPush(FifoContext* context, uint8_t data) {
 8006b2a:	b538      	push	{r3, r4, r5, lr}
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	460d      	mov	r5, r1

	if(context->fifoType == FIFO_TYPE_ISR_PUSH) {
 8006b30:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8006b34:	b9e3      	cbnz	r3, 8006b70 <fifoPush+0x46>
		xSemaphoreTakeFromISR(context->fifoMutex, pdFALSE);
 8006b36:	2200      	movs	r2, #0
 8006b38:	4611      	mov	r1, r2
 8006b3a:	6940      	ldr	r0, [r0, #20]
 8006b3c:	f00a fd96 	bl	801166c <xQueueReceiveFromISR>
	} else {
		xSemaphoreTake(context->fifoMutex, (TickType_t)portMAX_DELAY);
	}

	if(context->fifoEmptySpaceLeft > 0) {
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	b163      	cbz	r3, 8006b5e <fifoPush+0x34>

		context->fifoBuffer[context->fifoHead] = data;
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	54d5      	strb	r5, [r2, r3]

		if(context->fifoHead < context->fifoBufferSize - 1) {
 8006b4a:	68e2      	ldr	r2, [r4, #12]
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d213      	bcs.n	8006b7c <fifoPush+0x52>
			context->fifoHead++;
 8006b54:	3201      	adds	r2, #1
 8006b56:	60e2      	str	r2, [r4, #12]
		} else {
			context->fifoHead = 0;
		}

		context->fifoEmptySpaceLeft--;
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6063      	str	r3, [r4, #4]
		uint32_t error = 0;
		error++;

	}

	if(context->fifoType == FIFO_TYPE_ISR_PUSH) {
 8006b5e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8006b62:	b973      	cbnz	r3, 8006b82 <fifoPush+0x58>
		xSemaphoreGiveFromISR(context->fifoMutex, pdFALSE);
 8006b64:	2100      	movs	r1, #0
 8006b66:	6960      	ldr	r0, [r4, #20]
 8006b68:	f00a fb84 	bl	8011274 <xQueueGiveFromISR>
	} else {
		xSemaphoreGive(context->fifoMutex);
	}

	return 1;
}
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
		xSemaphoreTake(context->fifoMutex, (TickType_t)portMAX_DELAY);
 8006b70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b74:	6940      	ldr	r0, [r0, #20]
 8006b76:	f00a fc85 	bl	8011484 <xQueueSemaphoreTake>
 8006b7a:	e7e1      	b.n	8006b40 <fifoPush+0x16>
			context->fifoHead = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60e3      	str	r3, [r4, #12]
 8006b80:	e7ea      	b.n	8006b58 <fifoPush+0x2e>
		xSemaphoreGive(context->fifoMutex);
 8006b82:	2300      	movs	r3, #0
 8006b84:	461a      	mov	r2, r3
 8006b86:	4619      	mov	r1, r3
 8006b88:	6960      	ldr	r0, [r4, #20]
 8006b8a:	f00a fa05 	bl	8010f98 <xQueueGenericSend>
 8006b8e:	e7ed      	b.n	8006b6c <fifoPush+0x42>

08006b90 <fifoPull>:

uint8_t fifoPull(FifoContext* context, uint8_t* data) {
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1

	if(context->fifoType == FIFO_TYPE_ISR_PULL) {
 8006b96:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d023      	beq.n	8006be6 <fifoPull+0x56>
		xSemaphoreTakeFromISR(context->fifoMutex, pdFALSE);
	} else {
		xSemaphoreTake(context->fifoMutex, (TickType_t)portMAX_DELAY);
 8006b9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ba2:	6940      	ldr	r0, [r0, #20]
 8006ba4:	f00a fc6e 	bl	8011484 <xQueueSemaphoreTake>
	}

	if(context->fifoEmptySpaceLeft < context->fifoBufferSize) {
 8006ba8:	6862      	ldr	r2, [r4, #4]
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d228      	bcs.n	8006c02 <fifoPull+0x72>
		*data = context->fifoBuffer[context->fifoTail];
 8006bb0:	6922      	ldr	r2, [r4, #16]
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	5cd3      	ldrb	r3, [r2, r3]
 8006bb6:	702b      	strb	r3, [r5, #0]

		if(context->fifoTail < context->fifoBufferSize - 1) {
 8006bb8:	68a2      	ldr	r2, [r4, #8]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d217      	bcs.n	8006bf2 <fifoPull+0x62>
			context->fifoTail++;
 8006bc2:	3201      	adds	r2, #1
 8006bc4:	60a2      	str	r2, [r4, #8]
		} else {
			context->fifoTail = 0;
		}
		context->fifoEmptySpaceLeft++;
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	6063      	str	r3, [r4, #4]
	} else {
		// no data
		return 0;
	}

	if(context->fifoType == FIFO_TYPE_ISR_PULL) {
 8006bcc:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
 8006bd0:	2d01      	cmp	r5, #1
 8006bd2:	d011      	beq.n	8006bf8 <fifoPull+0x68>
		xSemaphoreGiveFromISR(context->fifoMutex, pdFALSE);
	} else {
		xSemaphoreGive(context->fifoMutex);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6960      	ldr	r0, [r4, #20]
 8006bdc:	f00a f9dc 	bl	8010f98 <xQueueGenericSend>
	}

	return 1;
 8006be0:	2501      	movs	r5, #1
}
 8006be2:	4628      	mov	r0, r5
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
		xSemaphoreTakeFromISR(context->fifoMutex, pdFALSE);
 8006be6:	2200      	movs	r2, #0
 8006be8:	4611      	mov	r1, r2
 8006bea:	6940      	ldr	r0, [r0, #20]
 8006bec:	f00a fd3e 	bl	801166c <xQueueReceiveFromISR>
 8006bf0:	e7da      	b.n	8006ba8 <fifoPull+0x18>
			context->fifoTail = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60a3      	str	r3, [r4, #8]
 8006bf6:	e7e6      	b.n	8006bc6 <fifoPull+0x36>
		xSemaphoreGiveFromISR(context->fifoMutex, pdFALSE);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6960      	ldr	r0, [r4, #20]
 8006bfc:	f00a fb3a 	bl	8011274 <xQueueGiveFromISR>
 8006c00:	e7ef      	b.n	8006be2 <fifoPull+0x52>
		return 0;
 8006c02:	2500      	movs	r5, #0
 8006c04:	e7ed      	b.n	8006be2 <fifoPull+0x52>

08006c06 <Sleep_Indication_Callback>:
}

static void Sleep_Indication_Callback(Boolean_t SleepAllowed, unsigned long CallbackParameter)
{
   /* Verify parameters. */
   if(CallbackParameter)
 8006c06:	b101      	cbz	r1, 8006c0a <Sleep_Indication_Callback+0x4>
   {
      if(SleepAllowed)
 8006c08:	b900      	cbnz	r0, 8006c0c <Sleep_Indication_Callback+0x6>
 8006c0a:	4770      	bx	lr
{
 8006c0c:	b508      	push	{r3, lr}
      {
         /* Attempt to suspend the transport. */
         HCITR_COMSuspend(1);
 8006c0e:	2001      	movs	r0, #1
 8006c10:	f7fb f8c8 	bl	8001da4 <HCITR_COMSuspend>
      }
   }
}
 8006c14:	bd08      	pop	{r3, pc}

08006c16 <DisplayCallback>:

static int DisplayCallback(int Length, char *Message)
{
 8006c16:	b538      	push	{r3, r4, r5, lr}
 8006c18:	4605      	mov	r5, r0
 8006c1a:	460c      	mov	r4, r1
   while(!HAL_ConsoleWrite(Length, Message))
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f7ff fe51 	bl	80068c6 <HAL_ConsoleWrite>
 8006c24:	b918      	cbnz	r0, 8006c2e <DisplayCallback+0x18>
   {
	   BTPS_Delay(1);
 8006c26:	2001      	movs	r0, #1
 8006c28:	f00c fb1f 	bl	801326a <BTPS_Delay>
 8006c2c:	e7f6      	b.n	8006c1c <DisplayCallback+0x6>
   }

    return TRUE;
}
 8006c2e:	2001      	movs	r0, #1
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
	...

08006c34 <GetInput>:
{
 8006c34:	b530      	push	{r4, r5, lr}
 8006c36:	b083      	sub	sp, #12
   Done = 0;
 8006c38:	2400      	movs	r4, #0
   while((!Done) && (HAL_ConsoleRead(1, &Char)))
 8006c3a:	e00f      	b.n	8006c5c <GetInput+0x28>
      switch(Char)
 8006c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3e:	d133      	bne.n	8006ca8 <GetInput+0x74>
            if(InputIndex)
 8006c40:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <GetInput+0xb0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	b153      	cbz	r3, 8006c5c <GetInput+0x28>
               InputIndex--;
 8006c46:	3b01      	subs	r3, #1
 8006c48:	4a26      	ldr	r2, [pc, #152]	; (8006ce4 <GetInput+0xb0>)
 8006c4a:	6013      	str	r3, [r2, #0]
               HAL_ConsoleWrite(3, "\b \b");
 8006c4c:	4926      	ldr	r1, [pc, #152]	; (8006ce8 <GetInput+0xb4>)
 8006c4e:	2003      	movs	r0, #3
 8006c50:	f7ff fe39 	bl	80068c6 <HAL_ConsoleWrite>
 8006c54:	e002      	b.n	8006c5c <GetInput+0x28>
            if(InputIndex)
 8006c56:	4b23      	ldr	r3, [pc, #140]	; (8006ce4 <GetInput+0xb0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	b9eb      	cbnz	r3, 8006c98 <GetInput+0x64>
   while((!Done) && (HAL_ConsoleRead(1, &Char)))
 8006c5c:	2c00      	cmp	r4, #0
 8006c5e:	d13e      	bne.n	8006cde <GetInput+0xaa>
 8006c60:	f10d 0107 	add.w	r1, sp, #7
 8006c64:	2001      	movs	r0, #1
 8006c66:	f7ff fe25 	bl	80068b4 <HAL_ConsoleRead>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d037      	beq.n	8006cde <GetInput+0xaa>
      switch(Char)
 8006c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c72:	2b0d      	cmp	r3, #13
 8006c74:	d004      	beq.n	8006c80 <GetInput+0x4c>
 8006c76:	d8e1      	bhi.n	8006c3c <GetInput+0x8>
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d0ec      	beq.n	8006c56 <GetInput+0x22>
 8006c7c:	2b0a      	cmp	r3, #10
 8006c7e:	d113      	bne.n	8006ca8 <GetInput+0x74>
             if(!InputIndex)
 8006c80:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <GetInput+0xb0>)
 8006c82:	681c      	ldr	r4, [r3, #0]
 8006c84:	b34c      	cbz	r4, 8006cda <GetInput+0xa6>
            Input[InputIndex] = '\0';
 8006c86:	4a19      	ldr	r2, [pc, #100]	; (8006cec <GetInput+0xb8>)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	5513      	strb	r3, [r2, r4]
			Input[InputIndex+1] = '\0';
 8006c8c:	1c61      	adds	r1, r4, #1
 8006c8e:	5453      	strb	r3, [r2, r1]
            Done       = (InputIndex-1);
 8006c90:	3c01      	subs	r4, #1
            InputIndex = 0;
 8006c92:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <GetInput+0xb0>)
 8006c94:	6013      	str	r3, [r2, #0]
            break;
 8006c96:	e7e1      	b.n	8006c5c <GetInput+0x28>
               InputIndex--;
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <GetInput+0xb0>)
 8006c9c:	6013      	str	r3, [r2, #0]
               HAL_ConsoleWrite(3, "\b \b");
 8006c9e:	4912      	ldr	r1, [pc, #72]	; (8006ce8 <GetInput+0xb4>)
 8006ca0:	2003      	movs	r0, #3
 8006ca2:	f7ff fe10 	bl	80068c6 <HAL_ConsoleWrite>
 8006ca6:	e7d9      	b.n	8006c5c <GetInput+0x28>
            if((Char >= ' ') && (Char <= '~'))
 8006ca8:	f1a3 0220 	sub.w	r2, r3, #32
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	2a5e      	cmp	r2, #94	; 0x5e
 8006cb0:	d8d4      	bhi.n	8006c5c <GetInput+0x28>
               Input[InputIndex++] = Char;
 8006cb2:	4d0c      	ldr	r5, [pc, #48]	; (8006ce4 <GetInput+0xb0>)
 8006cb4:	682a      	ldr	r2, [r5, #0]
 8006cb6:	1c51      	adds	r1, r2, #1
 8006cb8:	6029      	str	r1, [r5, #0]
 8006cba:	490c      	ldr	r1, [pc, #48]	; (8006cec <GetInput+0xb8>)
 8006cbc:	548b      	strb	r3, [r1, r2]
               HAL_ConsoleWrite(1, &Char);
 8006cbe:	f10d 0107 	add.w	r1, sp, #7
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	f7ff fdff 	bl	80068c6 <HAL_ConsoleWrite>
               if(InputIndex == (MAX_COMMAND_LENGTH-1))
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	2b3f      	cmp	r3, #63	; 0x3f
 8006ccc:	d1c6      	bne.n	8006c5c <GetInput+0x28>
                  Input[InputIndex] = 0;
 8006cce:	2200      	movs	r2, #0
 8006cd0:	4906      	ldr	r1, [pc, #24]	; (8006cec <GetInput+0xb8>)
 8006cd2:	54ca      	strb	r2, [r1, r3]
                  Done              = (InputIndex-1);
 8006cd4:	1e5c      	subs	r4, r3, #1
                  InputIndex        = 0;
 8006cd6:	602a      	str	r2, [r5, #0]
 8006cd8:	e7c0      	b.n	8006c5c <GetInput+0x28>
                 Done = COMMAND_LINE_ENTER_PRESSED;
 8006cda:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
 8006cde:	4620      	mov	r0, r4
 8006ce0:	b003      	add	sp, #12
 8006ce2:	bd30      	pop	{r4, r5, pc}
 8006ce4:	20001730 	.word	0x20001730
 8006ce8:	0802f368 	.word	0x0802f368
 8006cec:	200016f0 	.word	0x200016f0

08006cf0 <ProcessCharacters>:

/* The following function processes terminal input.					*/
static void ProcessCharacters(void *UserParameter)
{
 8006cf0:	b508      	push	{r3, lr}
  /* Check to see if we have a command to process.					   */
  int ret_val = GetInput();
 8006cf2:	f7ff ff9f 	bl	8006c34 <GetInput>
  if(ret_val > 0)
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	dc03      	bgt.n	8006d02 <ProcessCharacters+0x12>
  {
	 /* Attempt to process a character. 							   */
	 ProcessCommandLine(Input);
  }
  else if ((COMMAND_LINE_ENTER_PRESSED) == ret_val)
 8006cfa:	f110 0f80 	cmn.w	r0, #128	; 0x80
 8006cfe:	d004      	beq.n	8006d0a <ProcessCharacters+0x1a>
  {
	  Display(("\r\nA3DP+SNK>"));
  }
}
 8006d00:	bd08      	pop	{r3, pc}
	 ProcessCommandLine(Input);
 8006d02:	4804      	ldr	r0, [pc, #16]	; (8006d14 <ProcessCharacters+0x24>)
 8006d04:	f7ff f95a 	bl	8005fbc <ProcessCommandLine>
 8006d08:	e7fa      	b.n	8006d00 <ProcessCharacters+0x10>
	  Display(("\r\nA3DP+SNK>"));
 8006d0a:	4803      	ldr	r0, [pc, #12]	; (8006d18 <ProcessCharacters+0x28>)
 8006d0c:	f00c fd52 	bl	80137b4 <BTPS_OutputMessage>
}
 8006d10:	e7f6      	b.n	8006d00 <ProcessCharacters+0x10>
 8006d12:	bf00      	nop
 8006d14:	200016f0 	.word	0x200016f0
 8006d18:	0802f36c 	.word	0x0802f36c

08006d1c <StartBluetoothHSPTask>:

void StartBluetoothHSPTask(void *UserParameter) {
 8006d1c:	b500      	push	{lr}
 8006d1e:	b08f      	sub	sp, #60	; 0x3c
   HCI_DriverInformation_t       HCI_DriverInformation;
   HCI_HCILLConfiguration_t      HCILLConfig;
   HCI_Driver_Reconfigure_Data_t DriverReconfigureData;

   /* Configure the UART Parameters.                                    */
   HCI_DRIVER_SET_COMM_INFORMATION(&HCI_DriverInformation, 2, 115200, cpHCILL_RTS_CTS);
 8006d20:	2300      	movs	r3, #0
 8006d22:	f88d 3014 	strb.w	r3, [sp, #20]
 8006d26:	221c      	movs	r2, #28
 8006d28:	9206      	str	r2, [sp, #24]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	9207      	str	r2, [sp, #28]
 8006d2e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d32:	9208      	str	r2, [sp, #32]
 8006d34:	2207      	movs	r2, #7
 8006d36:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8006d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d3c:	930c      	str	r3, [sp, #48]	; 0x30
   HCI_DriverInformation.DriverInformation.COMMDriverInformation.InitializationDelay = 100;
 8006d3e:	2364      	movs	r3, #100	; 0x64
 8006d40:	930a      	str	r3, [sp, #40]	; 0x28

   /* Set up the application callbacks.                                 */
   BTPS_Initialization.MessageOutputCallback = DisplayCallback;
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <StartBluetoothHSPTask+0x7c>)
 8006d44:	930d      	str	r3, [sp, #52]	; 0x34

   /* Initialize the application.                                       */
   if((Result = InitializeApplication(&HCI_DriverInformation, &BTPS_Initialization)) > 0)
 8006d46:	a90d      	add	r1, sp, #52	; 0x34
 8006d48:	a805      	add	r0, sp, #20
 8006d4a:	f7ff f8ef 	bl	8005f2c <InitializeApplication>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	dd1d      	ble.n	8006d8e <StartBluetoothHSPTask+0x72>
   {
	  /* Register a sleep mode callback if we are using HCILL Mode.     */
	  if((HCI_DriverInformation.DriverInformation.COMMDriverInformation.Protocol == cpHCILL) || (HCI_DriverInformation.DriverInformation.COMMDriverInformation.Protocol == cpHCILL_RTS_CTS))
 8006d52:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8006d56:	3b06      	subs	r3, #6
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d906      	bls.n	8006d6c <StartBluetoothHSPTask+0x50>

	  /* Loop forever and process UART characters.                      */
	  while(1)
	  {
		  //CommandLineInterpreter("Pait\n\r");
		 ProcessCharacters(NULL);
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f7ff ffc6 	bl	8006cf0 <ProcessCharacters>
		 //Display(("\r\nHello"));
		 BTPS_Delay(20);
 8006d64:	2014      	movs	r0, #20
 8006d66:	f00c fa80 	bl	801326a <BTPS_Delay>
	  while(1)
 8006d6a:	e7f8      	b.n	8006d5e <StartBluetoothHSPTask+0x42>
		 HCILLConfig.SleepCallbackFunction        = Sleep_Indication_Callback;
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <StartBluetoothHSPTask+0x80>)
 8006d6e:	9303      	str	r3, [sp, #12]
		 HCILLConfig.SleepCallbackParameter       = 0;
 8006d70:	2100      	movs	r1, #0
 8006d72:	9104      	str	r1, [sp, #16]
		 DriverReconfigureData.ReconfigureCommand = HCI_COMM_DRIVER_RECONFIGURE_DATA_COMMAND_CHANGE_HCILL_PARAMETERS;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <StartBluetoothHSPTask+0x84>)
 8006d76:	9301      	str	r3, [sp, #4]
		 DriverReconfigureData.ReconfigureData    = (void *)&HCILLConfig;
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9302      	str	r3, [sp, #8]
		 Result = HCI_Reconfigure_Driver((unsigned int)Result, FALSE, &DriverReconfigureData);
 8006d7c:	aa01      	add	r2, sp, #4
 8006d7e:	f018 fedd 	bl	801fb3c <HCI_Reconfigure_Driver>
		 if(Result > 0)
 8006d82:	2800      	cmp	r0, #0
 8006d84:	ddeb      	ble.n	8006d5e <StartBluetoothHSPTask+0x42>
			Display(("Sleep is allowed.\r\n"));
 8006d86:	4807      	ldr	r0, [pc, #28]	; (8006da4 <StartBluetoothHSPTask+0x88>)
 8006d88:	f00c fd14 	bl	80137b4 <BTPS_OutputMessage>
 8006d8c:	e7e7      	b.n	8006d5e <StartBluetoothHSPTask+0x42>
	  }
   }
   while(1) {
	   osDelay(10);
 8006d8e:	200a      	movs	r0, #10
 8006d90:	f009 fe5d 	bl	8010a4e <osDelay>
   while(1) {
 8006d94:	e7fb      	b.n	8006d8e <StartBluetoothHSPTask+0x72>
 8006d96:	bf00      	nop
 8006d98:	08006c17 	.word	0x08006c17
 8006d9c:	08006c07 	.word	0x08006c07
 8006da0:	00010002 	.word	0x00010002
 8006da4:	0802f378 	.word	0x0802f378

08006da8 <StartDefaultTask>:
{
 8006da8:	b508      	push	{r3, lr}
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8006daa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006dae:	4804      	ldr	r0, [pc, #16]	; (8006dc0 <StartDefaultTask+0x18>)
 8006db0:	f002 f8c6 	bl	8008f40 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8006db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006db8:	f009 fe49 	bl	8010a4e <osDelay>
  for(;;)
 8006dbc:	e7f5      	b.n	8006daa <StartDefaultTask+0x2>
 8006dbe:	bf00      	nop
 8006dc0:	48000400 	.word	0x48000400

08006dc4 <StartSerialOutputTask>:
void StartSerialOutputTask(void *argument) {
 8006dc4:	b508      	push	{r3, lr}
 8006dc6:	e004      	b.n	8006dd2 <StartSerialOutputTask+0xe>
			serialOutputProcess();
 8006dc8:	f000 fed6 	bl	8007b78 <serialOutputProcess>
		osDelay(25);
 8006dcc:	2019      	movs	r0, #25
 8006dce:	f009 fe3e 	bl	8010a4e <osDelay>
		state = HAL_UART_GetState(&hlpuart1);
 8006dd2:	4803      	ldr	r0, [pc, #12]	; (8006de0 <StartSerialOutputTask+0x1c>)
 8006dd4:	f007 fbba 	bl	800e54c <HAL_UART_GetState>
		if(state == HAL_UART_STATE_BUSY_TX) {
 8006dd8:	2821      	cmp	r0, #33	; 0x21
 8006dda:	d1f5      	bne.n	8006dc8 <StartSerialOutputTask+0x4>
 8006ddc:	e7f6      	b.n	8006dcc <StartSerialOutputTask+0x8>
 8006dde:	bf00      	nop
 8006de0:	200182c4 	.word	0x200182c4

08006de4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8006de4:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006de6:	4a0b      	ldr	r2, [pc, #44]	; (8006e14 <MX_FREERTOS_Init+0x30>)
 8006de8:	2100      	movs	r1, #0
 8006dea:	480b      	ldr	r0, [pc, #44]	; (8006e18 <MX_FREERTOS_Init+0x34>)
 8006dec:	f009 fdd0 	bl	8010990 <osThreadNew>
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <MX_FREERTOS_Init+0x38>)
 8006df2:	6018      	str	r0, [r3, #0]
  btAudioTaskHandle = osThreadNew(StartBluetoothHSPTask, NULL, &btAudioTask_attributes);
 8006df4:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <MX_FREERTOS_Init+0x3c>)
 8006df6:	2100      	movs	r1, #0
 8006df8:	480a      	ldr	r0, [pc, #40]	; (8006e24 <MX_FREERTOS_Init+0x40>)
 8006dfa:	f009 fdc9 	bl	8010990 <osThreadNew>
 8006dfe:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <MX_FREERTOS_Init+0x44>)
 8006e00:	6018      	str	r0, [r3, #0]
  serialOutputTaskHandle = osThreadNew(StartSerialOutputTask, NULL, &serialOutputTask_attributes);
 8006e02:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <MX_FREERTOS_Init+0x48>)
 8006e04:	2100      	movs	r1, #0
 8006e06:	480a      	ldr	r0, [pc, #40]	; (8006e30 <MX_FREERTOS_Init+0x4c>)
 8006e08:	f009 fdc2 	bl	8010990 <osThreadNew>
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <MX_FREERTOS_Init+0x50>)
 8006e0e:	6018      	str	r0, [r3, #0]
}
 8006e10:	bd08      	pop	{r3, pc}
 8006e12:	bf00      	nop
 8006e14:	0802f3dc 	.word	0x0802f3dc
 8006e18:	08006da9 	.word	0x08006da9
 8006e1c:	20017a9c 	.word	0x20017a9c
 8006e20:	0802f3b8 	.word	0x0802f3b8
 8006e24:	08006d1d 	.word	0x08006d1d
 8006e28:	20017a98 	.word	0x20017a98
 8006e2c:	0802f400 	.word	0x0802f400
 8006e30:	08006dc5 	.word	0x08006dc5
 8006e34:	20017aa0 	.word	0x20017aa0

08006e38 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA2   ------> RCC_LSCO
*/
void MX_GPIO_Init(void)
{
 8006e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e3e:	2400      	movs	r4, #0
 8006e40:	9409      	str	r4, [sp, #36]	; 0x24
 8006e42:	940a      	str	r4, [sp, #40]	; 0x28
 8006e44:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e46:	940c      	str	r4, [sp, #48]	; 0x30
 8006e48:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e4a:	4b65      	ldr	r3, [pc, #404]	; (8006fe0 <MX_GPIO_Init+0x1a8>)
 8006e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e4e:	f042 0210 	orr.w	r2, r2, #16
 8006e52:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e56:	f002 0210 	and.w	r2, r2, #16
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e60:	f042 0204 	orr.w	r2, r2, #4
 8006e64:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e68:	f002 0204 	and.w	r2, r2, #4
 8006e6c:	9202      	str	r2, [sp, #8]
 8006e6e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e72:	f042 0220 	orr.w	r2, r2, #32
 8006e76:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e7a:	f002 0220 	and.w	r2, r2, #32
 8006e7e:	9203      	str	r2, [sp, #12]
 8006e80:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e88:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e8c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006e90:	9204      	str	r2, [sp, #16]
 8006e92:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e96:	f042 0201 	orr.w	r2, r2, #1
 8006e9a:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e9e:	f002 0201 	and.w	r2, r2, #1
 8006ea2:	9205      	str	r2, [sp, #20]
 8006ea4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ea8:	f042 0202 	orr.w	r2, r2, #2
 8006eac:	64da      	str	r2, [r3, #76]	; 0x4c
 8006eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eb0:	f002 0202 	and.w	r2, r2, #2
 8006eb4:	9206      	str	r2, [sp, #24]
 8006eb6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eba:	f042 0208 	orr.w	r2, r2, #8
 8006ebe:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec2:	f002 0208 	and.w	r2, r2, #8
 8006ec6:	9207      	str	r2, [sp, #28]
 8006ec8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	9308      	str	r3, [sp, #32]
 8006eda:	9b08      	ldr	r3, [sp, #32]
  HAL_PWREx_EnableVddIO2();
 8006edc:	f003 f9c0 	bl	800a260 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI2_RTS_GPIO_Port, HCI2_RTS_Pin, GPIO_PIN_SET);
 8006ee0:	4f40      	ldr	r7, [pc, #256]	; (8006fe4 <MX_GPIO_Init+0x1ac>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	2102      	movs	r1, #2
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f002 f825 	bl	8008f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8006eec:	4622      	mov	r2, r4
 8006eee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f002 f81f 	bl	8008f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BT_HCI_RESET_GPIO_Port, BT_HCI_RESET_Pin, GPIO_PIN_RESET);
 8006ef8:	4e3b      	ldr	r6, [pc, #236]	; (8006fe8 <MX_GPIO_Init+0x1b0>)
 8006efa:	4622      	mov	r2, r4
 8006efc:	2102      	movs	r1, #2
 8006efe:	4630      	mov	r0, r6
 8006f00:	f002 f819 	bl	8008f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI1_RTS_GPIO_Port, HCI1_RTS_Pin, GPIO_PIN_SET);
 8006f04:	2201      	movs	r2, #1
 8006f06:	2110      	movs	r1, #16
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f002 f814 	bl	8008f36 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HCI2_RTS_GPIO_Port, HCI2_RTS_Pin, GPIO_PIN_SET);
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2102      	movs	r1, #2
 8006f12:	4638      	mov	r0, r7
 8006f14:	f002 f80f 	bl	8008f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f1c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006f1e:	4b33      	ldr	r3, [pc, #204]	; (8006fec <MX_GPIO_Init+0x1b4>)
 8006f20:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f22:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006f24:	a909      	add	r1, sp, #36	; 0x24
 8006f26:	4832      	ldr	r0, [pc, #200]	; (8006ff0 <MX_GPIO_Init+0x1b8>)
 8006f28:	f001 ff20 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f30:	f04f 0903 	mov.w	r9, #3
 8006f34:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f38:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3a:	a909      	add	r1, sp, #36	; 0x24
 8006f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f40:	f001 ff14 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI2_RTS_Pin;
 8006f44:	f04f 0802 	mov.w	r8, #2
 8006f48:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f4c:	2501      	movs	r5, #1
 8006f4e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f50:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006f52:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  HAL_GPIO_Init(HCI2_RTS_GPIO_Port, &GPIO_InitStruct);
 8006f56:	a909      	add	r1, sp, #36	; 0x24
 8006f58:	4638      	mov	r0, r7
 8006f5a:	f001 ff07 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8006f5e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8006f62:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f64:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f66:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f68:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f6a:	a909      	add	r1, sp, #36	; 0x24
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f001 fefd 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = HCI2_CTS_Pin|HCI1_CTS_Pin;
 8006f72:	f640 0308 	movw	r3, #2056	; 0x808
 8006f76:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <MX_GPIO_Init+0x1bc>)
 8006f7a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f7e:	a909      	add	r1, sp, #36	; 0x24
 8006f80:	4630      	mov	r0, r6
 8006f82:	f001 fef3 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO_PLG_Pin;
 8006f86:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f88:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(SDIO_PLG_GPIO_Port, &GPIO_InitStruct);
 8006f8c:	a909      	add	r1, sp, #36	; 0x24
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f001 feec 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_HCI_RESET_Pin;
 8006f94:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f98:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f9a:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f9c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(BT_HCI_RESET_GPIO_Port, &GPIO_InitStruct);
 8006f9e:	a909      	add	r1, sp, #36	; 0x24
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f001 fee3 	bl	8008d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI1_RTS_Pin;
 8006fa6:	2310      	movs	r3, #16
 8006fa8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006faa:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006fae:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(HCI1_RTS_GPIO_Port, &GPIO_InitStruct);
 8006fb2:	a909      	add	r1, sp, #36	; 0x24
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f001 fed9 	bl	8008d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8006fba:	4622      	mov	r2, r4
 8006fbc:	2105      	movs	r1, #5
 8006fbe:	2009      	movs	r0, #9
 8006fc0:	f001 fb9a 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006fc4:	2009      	movs	r0, #9
 8006fc6:	f001 fbcb 	bl	8008760 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006fca:	4622      	mov	r2, r4
 8006fcc:	2105      	movs	r1, #5
 8006fce:	2028      	movs	r0, #40	; 0x28
 8006fd0:	f001 fb92 	bl	80086f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006fd4:	2028      	movs	r0, #40	; 0x28
 8006fd6:	f001 fbc3 	bl	8008760 <HAL_NVIC_EnableIRQ>

}
 8006fda:	b00f      	add	sp, #60	; 0x3c
 8006fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	48000400 	.word	0x48000400
 8006fe8:	48000c00 	.word	0x48000c00
 8006fec:	10110000 	.word	0x10110000
 8006ff0:	48000800 	.word	0x48000800
 8006ff4:	10210000 	.word	0x10210000

08006ff8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006ff8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006ffa:	4812      	ldr	r0, [pc, #72]	; (8007044 <MX_I2C1_Init+0x4c>)
 8006ffc:	4b12      	ldr	r3, [pc, #72]	; (8007048 <MX_I2C1_Init+0x50>)
 8006ffe:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00501E6C;
 8007000:	4b12      	ldr	r3, [pc, #72]	; (800704c <MX_I2C1_Init+0x54>)
 8007002:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007008:	2201      	movs	r2, #1
 800700a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800700c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800700e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007010:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007012:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007014:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007016:	f002 f812 	bl	800903e <HAL_I2C_Init>
 800701a:	b950      	cbnz	r0, 8007032 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800701c:	2100      	movs	r1, #0
 800701e:	4809      	ldr	r0, [pc, #36]	; (8007044 <MX_I2C1_Init+0x4c>)
 8007020:	f002 fb77 	bl	8009712 <HAL_I2CEx_ConfigAnalogFilter>
 8007024:	b940      	cbnz	r0, 8007038 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007026:	2100      	movs	r1, #0
 8007028:	4806      	ldr	r0, [pc, #24]	; (8007044 <MX_I2C1_Init+0x4c>)
 800702a:	f002 fba0 	bl	800976e <HAL_I2CEx_ConfigDigitalFilter>
 800702e:	b930      	cbnz	r0, 800703e <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007030:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007032:	f000 f955 	bl	80072e0 <Error_Handler>
 8007036:	e7f1      	b.n	800701c <MX_I2C1_Init+0x24>
    Error_Handler();
 8007038:	f000 f952 	bl	80072e0 <Error_Handler>
 800703c:	e7f3      	b.n	8007026 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800703e:	f000 f94f 	bl	80072e0 <Error_Handler>
}
 8007042:	e7f5      	b.n	8007030 <MX_I2C1_Init+0x38>
 8007044:	20017af0 	.word	0x20017af0
 8007048:	40005400 	.word	0x40005400
 800704c:	00501e6c 	.word	0x00501e6c

08007050 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007050:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007052:	4812      	ldr	r0, [pc, #72]	; (800709c <MX_I2C2_Init+0x4c>)
 8007054:	4b12      	ldr	r3, [pc, #72]	; (80070a0 <MX_I2C2_Init+0x50>)
 8007056:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00501E6C;
 8007058:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <MX_I2C2_Init+0x54>)
 800705a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800705c:	2300      	movs	r3, #0
 800705e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007060:	2201      	movs	r2, #1
 8007062:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007064:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007066:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007068:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800706a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800706c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800706e:	f001 ffe6 	bl	800903e <HAL_I2C_Init>
 8007072:	b950      	cbnz	r0, 800708a <MX_I2C2_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007074:	2100      	movs	r1, #0
 8007076:	4809      	ldr	r0, [pc, #36]	; (800709c <MX_I2C2_Init+0x4c>)
 8007078:	f002 fb4b 	bl	8009712 <HAL_I2CEx_ConfigAnalogFilter>
 800707c:	b940      	cbnz	r0, 8007090 <MX_I2C2_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800707e:	2100      	movs	r1, #0
 8007080:	4806      	ldr	r0, [pc, #24]	; (800709c <MX_I2C2_Init+0x4c>)
 8007082:	f002 fb74 	bl	800976e <HAL_I2CEx_ConfigDigitalFilter>
 8007086:	b930      	cbnz	r0, 8007096 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007088:	bd08      	pop	{r3, pc}
    Error_Handler();
 800708a:	f000 f929 	bl	80072e0 <Error_Handler>
 800708e:	e7f1      	b.n	8007074 <MX_I2C2_Init+0x24>
    Error_Handler();
 8007090:	f000 f926 	bl	80072e0 <Error_Handler>
 8007094:	e7f3      	b.n	800707e <MX_I2C2_Init+0x2e>
    Error_Handler();
 8007096:	f000 f923 	bl	80072e0 <Error_Handler>
}
 800709a:	e7f5      	b.n	8007088 <MX_I2C2_Init+0x38>
 800709c:	20017b3c 	.word	0x20017b3c
 80070a0:	40005800 	.word	0x40005800
 80070a4:	00501e6c 	.word	0x00501e6c

080070a8 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80070a8:	b508      	push	{r3, lr}
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80070aa:	4812      	ldr	r0, [pc, #72]	; (80070f4 <MX_I2C4_Init+0x4c>)
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <MX_I2C4_Init+0x50>)
 80070ae:	6003      	str	r3, [r0, #0]
  hi2c4.Init.Timing = 0x00501E6C;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <MX_I2C4_Init+0x54>)
 80070b2:	6043      	str	r3, [r0, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	6083      	str	r3, [r0, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070b8:	2201      	movs	r2, #1
 80070ba:	60c2      	str	r2, [r0, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070bc:	6103      	str	r3, [r0, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80070be:	6143      	str	r3, [r0, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80070c0:	6183      	str	r3, [r0, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070c2:	61c3      	str	r3, [r0, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070c4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80070c6:	f001 ffba 	bl	800903e <HAL_I2C_Init>
 80070ca:	b950      	cbnz	r0, 80070e2 <MX_I2C4_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80070cc:	2100      	movs	r1, #0
 80070ce:	4809      	ldr	r0, [pc, #36]	; (80070f4 <MX_I2C4_Init+0x4c>)
 80070d0:	f002 fb1f 	bl	8009712 <HAL_I2CEx_ConfigAnalogFilter>
 80070d4:	b940      	cbnz	r0, 80070e8 <MX_I2C4_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80070d6:	2100      	movs	r1, #0
 80070d8:	4806      	ldr	r0, [pc, #24]	; (80070f4 <MX_I2C4_Init+0x4c>)
 80070da:	f002 fb48 	bl	800976e <HAL_I2CEx_ConfigDigitalFilter>
 80070de:	b930      	cbnz	r0, 80070ee <MX_I2C4_Init+0x46>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80070e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80070e2:	f000 f8fd 	bl	80072e0 <Error_Handler>
 80070e6:	e7f1      	b.n	80070cc <MX_I2C4_Init+0x24>
    Error_Handler();
 80070e8:	f000 f8fa 	bl	80072e0 <Error_Handler>
 80070ec:	e7f3      	b.n	80070d6 <MX_I2C4_Init+0x2e>
    Error_Handler();
 80070ee:	f000 f8f7 	bl	80072e0 <Error_Handler>
}
 80070f2:	e7f5      	b.n	80070e0 <MX_I2C4_Init+0x38>
 80070f4:	20017aa4 	.word	0x20017aa4
 80070f8:	40008400 	.word	0x40008400
 80070fc:	00501e6c 	.word	0x00501e6c

08007100 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007100:	b530      	push	{r4, r5, lr}
 8007102:	b0b1      	sub	sp, #196	; 0xc4
 8007104:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007106:	2100      	movs	r1, #0
 8007108:	912b      	str	r1, [sp, #172]	; 0xac
 800710a:	912c      	str	r1, [sp, #176]	; 0xb0
 800710c:	912d      	str	r1, [sp, #180]	; 0xb4
 800710e:	912e      	str	r1, [sp, #184]	; 0xb8
 8007110:	912f      	str	r1, [sp, #188]	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007112:	2294      	movs	r2, #148	; 0x94
 8007114:	a806      	add	r0, sp, #24
 8007116:	f00d f90f 	bl	8014338 <memset>
  if(i2cHandle->Instance==I2C1)
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	4a64      	ldr	r2, [pc, #400]	; (80072b0 <HAL_I2C_MspInit+0x1b0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d007      	beq.n	8007132 <HAL_I2C_MspInit+0x32>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 8007122:	4a64      	ldr	r2, [pc, #400]	; (80072b4 <HAL_I2C_MspInit+0x1b4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d045      	beq.n	80071b4 <HAL_I2C_MspInit+0xb4>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C4)
 8007128:	4a63      	ldr	r2, [pc, #396]	; (80072b8 <HAL_I2C_MspInit+0x1b8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d07f      	beq.n	800722e <HAL_I2C_MspInit+0x12e>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800712e:	b031      	add	sp, #196	; 0xc4
 8007130:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007136:	2300      	movs	r3, #0
 8007138:	931b      	str	r3, [sp, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800713a:	a806      	add	r0, sp, #24
 800713c:	f004 f808 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 8007140:	2800      	cmp	r0, #0
 8007142:	d134      	bne.n	80071ae <HAL_I2C_MspInit+0xae>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007144:	4c5d      	ldr	r4, [pc, #372]	; (80072bc <HAL_I2C_MspInit+0x1bc>)
 8007146:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800714e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 8007158:	f003 f882 	bl	800a260 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800715c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007160:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007162:	2312      	movs	r3, #18
 8007164:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007166:	2500      	movs	r5, #0
 8007168:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800716a:	2303      	movs	r3, #3
 800716c:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800716e:	2304      	movs	r3, #4
 8007170:	932f      	str	r3, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007172:	a92b      	add	r1, sp, #172	; 0xac
 8007174:	4852      	ldr	r0, [pc, #328]	; (80072c0 <HAL_I2C_MspInit+0x1c0>)
 8007176:	f001 fdf9 	bl	8008d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800717a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800717c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007180:	65a3      	str	r3, [r4, #88]	; 0x58
 8007182:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800718c:	462a      	mov	r2, r5
 800718e:	2105      	movs	r1, #5
 8007190:	201f      	movs	r0, #31
 8007192:	f001 fab1 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007196:	201f      	movs	r0, #31
 8007198:	f001 fae2 	bl	8008760 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800719c:	462a      	mov	r2, r5
 800719e:	2105      	movs	r1, #5
 80071a0:	2020      	movs	r0, #32
 80071a2:	f001 faa9 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80071a6:	2020      	movs	r0, #32
 80071a8:	f001 fada 	bl	8008760 <HAL_NVIC_EnableIRQ>
 80071ac:	e7bf      	b.n	800712e <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 80071ae:	f000 f897 	bl	80072e0 <Error_Handler>
 80071b2:	e7c7      	b.n	8007144 <HAL_I2C_MspInit+0x44>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80071b4:	2380      	movs	r3, #128	; 0x80
 80071b6:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80071b8:	2300      	movs	r3, #0
 80071ba:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80071bc:	a806      	add	r0, sp, #24
 80071be:	f003 ffc7 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d130      	bne.n	8007228 <HAL_I2C_MspInit+0x128>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80071c6:	4c3d      	ldr	r4, [pc, #244]	; (80072bc <HAL_I2C_MspInit+0x1bc>)
 80071c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071ca:	f043 0320 	orr.w	r3, r3, #32
 80071ce:	64e3      	str	r3, [r4, #76]	; 0x4c
 80071d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	9302      	str	r3, [sp, #8]
 80071d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80071da:	2303      	movs	r3, #3
 80071dc:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071de:	2212      	movs	r2, #18
 80071e0:	922c      	str	r2, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e2:	2500      	movs	r5, #0
 80071e4:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e6:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80071e8:	2304      	movs	r3, #4
 80071ea:	932f      	str	r3, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80071ec:	a92b      	add	r1, sp, #172	; 0xac
 80071ee:	4835      	ldr	r0, [pc, #212]	; (80072c4 <HAL_I2C_MspInit+0x1c4>)
 80071f0:	f001 fdbc 	bl	8008d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80071f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80071fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007202:	9303      	str	r3, [sp, #12]
 8007204:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8007206:	462a      	mov	r2, r5
 8007208:	2105      	movs	r1, #5
 800720a:	2021      	movs	r0, #33	; 0x21
 800720c:	f001 fa74 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007210:	2021      	movs	r0, #33	; 0x21
 8007212:	f001 faa5 	bl	8008760 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8007216:	462a      	mov	r2, r5
 8007218:	2105      	movs	r1, #5
 800721a:	2022      	movs	r0, #34	; 0x22
 800721c:	f001 fa6c 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007220:	2022      	movs	r0, #34	; 0x22
 8007222:	f001 fa9d 	bl	8008760 <HAL_NVIC_EnableIRQ>
 8007226:	e782      	b.n	800712e <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 8007228:	f000 f85a 	bl	80072e0 <Error_Handler>
 800722c:	e7cb      	b.n	80071c6 <HAL_I2C_MspInit+0xc6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800722e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007232:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8007234:	2300      	movs	r3, #0
 8007236:	931e      	str	r3, [sp, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007238:	a806      	add	r0, sp, #24
 800723a:	f003 ff89 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 800723e:	2800      	cmp	r0, #0
 8007240:	d132      	bne.n	80072a8 <HAL_I2C_MspInit+0x1a8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007242:	4c1e      	ldr	r4, [pc, #120]	; (80072bc <HAL_I2C_MspInit+0x1bc>)
 8007244:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007246:	f043 0320 	orr.w	r3, r3, #32
 800724a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800724c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800724e:	f003 0320 	and.w	r3, r3, #32
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007256:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800725a:	932b      	str	r3, [sp, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800725c:	2312      	movs	r3, #18
 800725e:	932c      	str	r3, [sp, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007260:	2500      	movs	r5, #0
 8007262:	952d      	str	r5, [sp, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007264:	2303      	movs	r3, #3
 8007266:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8007268:	2304      	movs	r3, #4
 800726a:	932f      	str	r3, [sp, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800726c:	a92b      	add	r1, sp, #172	; 0xac
 800726e:	4815      	ldr	r0, [pc, #84]	; (80072c4 <HAL_I2C_MspInit+0x1c4>)
 8007270:	f001 fd7c 	bl	8008d6c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8007274:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007276:	f043 0302 	orr.w	r3, r3, #2
 800727a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800727c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8007286:	462a      	mov	r2, r5
 8007288:	2105      	movs	r1, #5
 800728a:	2054      	movs	r0, #84	; 0x54
 800728c:	f001 fa34 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8007290:	2054      	movs	r0, #84	; 0x54
 8007292:	f001 fa65 	bl	8008760 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8007296:	462a      	mov	r2, r5
 8007298:	2105      	movs	r1, #5
 800729a:	2053      	movs	r0, #83	; 0x53
 800729c:	f001 fa2c 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80072a0:	2053      	movs	r0, #83	; 0x53
 80072a2:	f001 fa5d 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 80072a6:	e742      	b.n	800712e <HAL_I2C_MspInit+0x2e>
      Error_Handler();
 80072a8:	f000 f81a 	bl	80072e0 <Error_Handler>
 80072ac:	e7c9      	b.n	8007242 <HAL_I2C_MspInit+0x142>
 80072ae:	bf00      	nop
 80072b0:	40005400 	.word	0x40005400
 80072b4:	40005800 	.word	0x40005800
 80072b8:	40008400 	.word	0x40008400
 80072bc:	40021000 	.word	0x40021000
 80072c0:	48001800 	.word	0x48001800
 80072c4:	48001400 	.word	0x48001400

080072c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80072ca:	6802      	ldr	r2, [r0, #0]
 80072cc:	4b03      	ldr	r3, [pc, #12]	; (80072dc <HAL_TIM_PeriodElapsedCallback+0x14>)
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d000      	beq.n	80072d4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80072d2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80072d4:	f001 f9d8 	bl	8008688 <HAL_IncTick>
}
 80072d8:	e7fb      	b.n	80072d2 <HAL_TIM_PeriodElapsedCallback+0xa>
 80072da:	bf00      	nop
 80072dc:	40014800 	.word	0x40014800

080072e0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80072e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80072e2:	e7fe      	b.n	80072e2 <Error_Handler+0x2>

080072e4 <SystemClock_Config>:
{
 80072e4:	b500      	push	{lr}
 80072e6:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072e8:	2244      	movs	r2, #68	; 0x44
 80072ea:	2100      	movs	r1, #0
 80072ec:	a805      	add	r0, sp, #20
 80072ee:	f00d f823 	bl	8014338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072f2:	2000      	movs	r0, #0
 80072f4:	9000      	str	r0, [sp, #0]
 80072f6:	9001      	str	r0, [sp, #4]
 80072f8:	9002      	str	r0, [sp, #8]
 80072fa:	9003      	str	r0, [sp, #12]
 80072fc:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80072fe:	f002 ff29 	bl	800a154 <HAL_PWREx_ControlVoltageScaling>
 8007302:	2800      	cmp	r0, #0
 8007304:	d137      	bne.n	8007376 <SystemClock_Config+0x92>
  HAL_PWR_EnableBkUpAccess();
 8007306:	f002 ff03 	bl	800a110 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800730a:	4a1e      	ldr	r2, [pc, #120]	; (8007384 <SystemClock_Config+0xa0>)
 800730c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007310:	f023 0318 	bic.w	r3, r3, #24
 8007314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8007318:	231c      	movs	r3, #28
 800731a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800731c:	2301      	movs	r3, #1
 800731e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007320:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007322:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007324:	2200      	movs	r2, #0
 8007326:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007328:	2260      	movs	r2, #96	; 0x60
 800732a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800732c:	2202      	movs	r2, #2
 800732e:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007330:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007332:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8007334:	233c      	movs	r3, #60	; 0x3c
 8007336:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007338:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800733a:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800733c:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800733e:	a805      	add	r0, sp, #20
 8007340:	f003 f878 	bl	800a434 <HAL_RCC_OscConfig>
 8007344:	b9c8      	cbnz	r0, 800737a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007346:	230f      	movs	r3, #15
 8007348:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800734a:	2303      	movs	r3, #3
 800734c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800734e:	2300      	movs	r3, #0
 8007350:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007356:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007358:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800735a:	2105      	movs	r1, #5
 800735c:	4668      	mov	r0, sp
 800735e:	f003 fbb1 	bl	800aac4 <HAL_RCC_ClockConfig>
 8007362:	b960      	cbnz	r0, 800737e <SystemClock_Config+0x9a>
  HAL_RCCEx_EnableLSCO(RCC_LSCOSOURCE_LSE);
 8007364:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007368:	f004 fe0e 	bl	800bf88 <HAL_RCCEx_EnableLSCO>
  HAL_RCCEx_EnableMSIPLLMode();
 800736c:	f004 fe5c 	bl	800c028 <HAL_RCCEx_EnableMSIPLLMode>
}
 8007370:	b017      	add	sp, #92	; 0x5c
 8007372:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007376:	f7ff ffb3 	bl	80072e0 <Error_Handler>
    Error_Handler();
 800737a:	f7ff ffb1 	bl	80072e0 <Error_Handler>
    Error_Handler();
 800737e:	f7ff ffaf 	bl	80072e0 <Error_Handler>
 8007382:	bf00      	nop
 8007384:	40021000 	.word	0x40021000

08007388 <PeriphCommonClock_Config>:
{
 8007388:	b500      	push	{lr}
 800738a:	b0a7      	sub	sp, #156	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800738c:	2274      	movs	r2, #116	; 0x74
 800738e:	2100      	movs	r1, #0
 8007390:	a809      	add	r0, sp, #36	; 0x24
 8007392:	f00c ffd1 	bl	8014338 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8007396:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800739a:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800739c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073a0:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80073a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073a6:	931e      	str	r3, [sp, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80073a8:	2301      	movs	r3, #1
 80073aa:	9302      	str	r3, [sp, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80073ac:	9303      	str	r3, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80073ae:	2318      	movs	r3, #24
 80073b0:	9304      	str	r3, [sp, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80073b2:	2302      	movs	r3, #2
 80073b4:	9305      	str	r3, [sp, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80073b6:	9306      	str	r3, [sp, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80073b8:	9307      	str	r3, [sp, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <PeriphCommonClock_Config+0x48>)
 80073bc:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073be:	a801      	add	r0, sp, #4
 80073c0:	f003 fec6 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 80073c4:	b910      	cbnz	r0, 80073cc <PeriphCommonClock_Config+0x44>
}
 80073c6:	b027      	add	sp, #156	; 0x9c
 80073c8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80073cc:	f7ff ff88 	bl	80072e0 <Error_Handler>
 80073d0:	01110000 	.word	0x01110000

080073d4 <main>:
{
 80073d4:	b508      	push	{r3, lr}
  HAL_Init();
 80073d6:	f001 f948 	bl	800866a <HAL_Init>
  SystemClock_Config();
 80073da:	f7ff ff83 	bl	80072e4 <SystemClock_Config>
  PeriphCommonClock_Config();
 80073de:	f7ff ffd3 	bl	8007388 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80073e2:	f7ff fd29 	bl	8006e38 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80073e6:	f000 fe39 	bl	800805c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80073ea:	f000 feed 	bl	80081c8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80073ee:	f7ff fb0b 	bl	8006a08 <MX_DMA_Init>
  MX_DAC1_Init();
 80073f2:	f7ff faa1 	bl	8006938 <MX_DAC1_Init>
  MX_I2C1_Init();
 80073f6:	f7ff fdff 	bl	8006ff8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80073fa:	f7ff fe29 	bl	8007050 <MX_I2C2_Init>
  MX_I2C4_Init();
 80073fe:	f7ff fe53 	bl	80070a8 <MX_I2C4_Init>
  MX_USART1_UART_Init();
 8007402:	f000 fe79 	bl	80080f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8007406:	f000 feab 	bl	8008160 <MX_USART2_UART_Init>
  MX_OPAMP1_Init();
 800740a:	f000 f819 	bl	8007440 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800740e:	f000 f82f 	bl	8007470 <MX_OPAMP2_Init>
  MX_SAI1_Init();
 8007412:	f000 f92d 	bl	8007670 <MX_SAI1_Init>
  MX_SPI1_Init();
 8007416:	f000 fbc7 	bl	8007ba8 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 800741a:	f000 facb 	bl	80079b4 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 800741e:	f7ff fa5f 	bl	80068e0 <MX_CRC_Init>
  MX_RTC_Init();
 8007422:	f000 f8b7 	bl	8007594 <MX_RTC_Init>
  MX_FATFS_Init();
 8007426:	f008 fbbd 	bl	800fba4 <MX_FATFS_Init>
  MX_SAI2_Init();
 800742a:	f000 f959 	bl	80076e0 <MX_SAI2_Init>
  testAll();
 800742e:	f001 f8ef 	bl	8008610 <testAll>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007432:	f009 fa63 	bl	80108fc <osKernelInitialize>
  MX_FREERTOS_Init();
 8007436:	f7ff fcd5 	bl	8006de4 <MX_FREERTOS_Init>
  osKernelStart();
 800743a:	f009 fa83 	bl	8010944 <osKernelStart>
  while (1)
 800743e:	e7fe      	b.n	800743e <main+0x6a>

08007440 <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp1;
OPAMP_HandleTypeDef hopamp2;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8007440:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8007442:	4809      	ldr	r0, [pc, #36]	; (8007468 <MX_OPAMP1_Init+0x28>)
 8007444:	4b09      	ldr	r3, [pc, #36]	; (800746c <MX_OPAMP1_Init+0x2c>)
 8007446:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 8007448:	2300      	movs	r3, #0
 800744a:	6043      	str	r3, [r0, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800744c:	2208      	movs	r2, #8
 800744e:	60c2      	str	r2, [r0, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8007450:	6143      	str	r3, [r0, #20]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8007452:	6103      	str	r3, [r0, #16]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8007454:	6183      	str	r3, [r0, #24]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8007456:	6083      	str	r3, [r0, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8007458:	61c3      	str	r3, [r0, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800745a:	f002 f9b5 	bl	80097c8 <HAL_OPAMP_Init>
 800745e:	b900      	cbnz	r0, 8007462 <MX_OPAMP1_Init+0x22>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8007460:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007462:	f7ff ff3d 	bl	80072e0 <Error_Handler>
}
 8007466:	e7fb      	b.n	8007460 <MX_OPAMP1_Init+0x20>
 8007468:	20017bbc 	.word	0x20017bbc
 800746c:	40007800 	.word	0x40007800

08007470 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8007470:	b508      	push	{r3, lr}
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8007472:	4809      	ldr	r0, [pc, #36]	; (8007498 <MX_OPAMP2_Init+0x28>)
 8007474:	4b09      	ldr	r3, [pc, #36]	; (800749c <MX_OPAMP2_Init+0x2c>)
 8007476:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 8007478:	2300      	movs	r3, #0
 800747a:	6043      	str	r3, [r0, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 800747c:	2208      	movs	r2, #8
 800747e:	60c2      	str	r2, [r0, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8007480:	6143      	str	r3, [r0, #20]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8007482:	6103      	str	r3, [r0, #16]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_2;
 8007484:	6183      	str	r3, [r0, #24]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8007486:	6083      	str	r3, [r0, #8]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8007488:	61c3      	str	r3, [r0, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800748a:	f002 f99d 	bl	80097c8 <HAL_OPAMP_Init>
 800748e:	b900      	cbnz	r0, 8007492 <MX_OPAMP2_Init+0x22>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8007490:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007492:	f7ff ff25 	bl	80072e0 <Error_Handler>
}
 8007496:	e7fb      	b.n	8007490 <MX_OPAMP2_Init+0x20>
 8007498:	20017b88 	.word	0x20017b88
 800749c:	40007810 	.word	0x40007810

080074a0 <HAL_OPAMP_MspInit>:

static uint32_t HAL_RCC_OPAMP_CLK_ENABLED=0;

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80074a0:	b530      	push	{r4, r5, lr}
 80074a2:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074a4:	2300      	movs	r3, #0
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	9306      	str	r3, [sp, #24]
 80074aa:	9307      	str	r3, [sp, #28]
 80074ac:	9308      	str	r3, [sp, #32]
 80074ae:	9309      	str	r3, [sp, #36]	; 0x24
  if(opampHandle->Instance==OPAMP1)
 80074b0:	6803      	ldr	r3, [r0, #0]
 80074b2:	4a33      	ldr	r2, [pc, #204]	; (8007580 <HAL_OPAMP_MspInit+0xe0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_OPAMP_MspInit+0x22>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(opampHandle->Instance==OPAMP2)
 80074b8:	4a32      	ldr	r2, [pc, #200]	; (8007584 <HAL_OPAMP_MspInit+0xe4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d028      	beq.n	8007510 <HAL_OPAMP_MspInit+0x70>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
}
 80074be:	b00b      	add	sp, #44	; 0x2c
 80074c0:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_OPAMP_CLK_ENABLED++;
 80074c2:	4a31      	ldr	r2, [pc, #196]	; (8007588 <HAL_OPAMP_MspInit+0xe8>)
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	3301      	adds	r3, #1
 80074c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d015      	beq.n	80074fa <HAL_OPAMP_MspInit+0x5a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ce:	4b2f      	ldr	r3, [pc, #188]	; (800758c <HAL_OPAMP_MspInit+0xec>)
 80074d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80074e2:	230b      	movs	r3, #11
 80074e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074e6:	2303      	movs	r3, #3
 80074e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ee:	a905      	add	r1, sp, #20
 80074f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074f4:	f001 fc3a 	bl	8008d6c <HAL_GPIO_Init>
 80074f8:	e7e1      	b.n	80074be <HAL_OPAMP_MspInit+0x1e>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 80074fa:	4b24      	ldr	r3, [pc, #144]	; (800758c <HAL_OPAMP_MspInit+0xec>)
 80074fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007502:	659a      	str	r2, [r3, #88]	; 0x58
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	9b00      	ldr	r3, [sp, #0]
 800750e:	e7de      	b.n	80074ce <HAL_OPAMP_MspInit+0x2e>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 8007510:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_OPAMP_MspInit+0xe8>)
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8007518:	2b01      	cmp	r3, #1
 800751a:	d026      	beq.n	800756a <HAL_OPAMP_MspInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800751c:	4b1b      	ldr	r3, [pc, #108]	; (800758c <HAL_OPAMP_MspInit+0xec>)
 800751e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007520:	f042 0201 	orr.w	r2, r2, #1
 8007524:	64da      	str	r2, [r3, #76]	; 0x4c
 8007526:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007528:	f002 0201 	and.w	r2, r2, #1
 800752c:	9203      	str	r2, [sp, #12]
 800752e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007532:	f042 0202 	orr.w	r2, r2, #2
 8007536:	64da      	str	r2, [r3, #76]	; 0x4c
 8007538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007542:	23c0      	movs	r3, #192	; 0xc0
 8007544:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007546:	2503      	movs	r5, #3
 8007548:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754a:	2400      	movs	r4, #0
 800754c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800754e:	a905      	add	r1, sp, #20
 8007550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007554:	f001 fc0a 	bl	8008d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007558:	2301      	movs	r3, #1
 800755a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800755c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007560:	a905      	add	r1, sp, #20
 8007562:	480b      	ldr	r0, [pc, #44]	; (8007590 <HAL_OPAMP_MspInit+0xf0>)
 8007564:	f001 fc02 	bl	8008d6c <HAL_GPIO_Init>
}
 8007568:	e7a9      	b.n	80074be <HAL_OPAMP_MspInit+0x1e>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <HAL_OPAMP_MspInit+0xec>)
 800756c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800756e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007572:	659a      	str	r2, [r3, #88]	; 0x58
 8007574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007576:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	e7cd      	b.n	800751c <HAL_OPAMP_MspInit+0x7c>
 8007580:	40007800 	.word	0x40007800
 8007584:	40007810 	.word	0x40007810
 8007588:	20001734 	.word	0x20001734
 800758c:	40021000 	.word	0x40021000
 8007590:	48000400 	.word	0x48000400

08007594 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007594:	b500      	push	{lr}
 8007596:	b087      	sub	sp, #28

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007598:	2300      	movs	r3, #0
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	9302      	str	r3, [sp, #8]
 800759e:	9303      	str	r3, [sp, #12]
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 80075a4:	9300      	str	r3, [sp, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80075a6:	481c      	ldr	r0, [pc, #112]	; (8007618 <MX_RTC_Init+0x84>)
 80075a8:	4a1c      	ldr	r2, [pc, #112]	; (800761c <MX_RTC_Init+0x88>)
 80075aa:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80075ac:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80075ae:	227f      	movs	r2, #127	; 0x7f
 80075b0:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80075b2:	22ff      	movs	r2, #255	; 0xff
 80075b4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80075b6:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80075b8:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80075ba:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80075bc:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80075be:	f004 fd9d 	bl	800c0fc <HAL_RTC_Init>
 80075c2:	bb00      	cbnz	r0, 8007606 <MX_RTC_Init+0x72>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80075ca:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80075ce:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80075d2:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80075d4:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80075d6:	2201      	movs	r2, #1
 80075d8:	a901      	add	r1, sp, #4
 80075da:	480f      	ldr	r0, [pc, #60]	; (8007618 <MX_RTC_Init+0x84>)
 80075dc:	f004 fde6 	bl	800c1ac <HAL_RTC_SetTime>
 80075e0:	b9a0      	cbnz	r0, 800760c <MX_RTC_Init+0x78>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80075e2:	2201      	movs	r2, #1
 80075e4:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80075e8:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 80075ec:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80075f6:	4669      	mov	r1, sp
 80075f8:	4807      	ldr	r0, [pc, #28]	; (8007618 <MX_RTC_Init+0x84>)
 80075fa:	f004 fe3b 	bl	800c274 <HAL_RTC_SetDate>
 80075fe:	b940      	cbnz	r0, 8007612 <MX_RTC_Init+0x7e>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8007600:	b007      	add	sp, #28
 8007602:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007606:	f7ff fe6b 	bl	80072e0 <Error_Handler>
 800760a:	e7db      	b.n	80075c4 <MX_RTC_Init+0x30>
    Error_Handler();
 800760c:	f7ff fe68 	bl	80072e0 <Error_Handler>
 8007610:	e7e7      	b.n	80075e2 <MX_RTC_Init+0x4e>
    Error_Handler();
 8007612:	f7ff fe65 	bl	80072e0 <Error_Handler>
}
 8007616:	e7f3      	b.n	8007600 <MX_RTC_Init+0x6c>
 8007618:	20017bf0 	.word	0x20017bf0
 800761c:	40002800 	.word	0x40002800

08007620 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8007620:	b510      	push	{r4, lr}
 8007622:	b0a6      	sub	sp, #152	; 0x98
 8007624:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007626:	2294      	movs	r2, #148	; 0x94
 8007628:	2100      	movs	r1, #0
 800762a:	a801      	add	r0, sp, #4
 800762c:	f00c fe84 	bl	8014338 <memset>
  if(rtcHandle->Instance==RTC)
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <HAL_RTC_MspInit+0x48>)
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTC_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8007638:	b026      	add	sp, #152	; 0x98
 800763a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800763c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007640:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007646:	9325      	str	r3, [sp, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007648:	a801      	add	r0, sp, #4
 800764a:	f003 fd81 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 800764e:	b938      	cbnz	r0, 8007660 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8007650:	4a06      	ldr	r2, [pc, #24]	; (800766c <HAL_RTC_MspInit+0x4c>)
 8007652:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800765e:	e7eb      	b.n	8007638 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8007660:	f7ff fe3e 	bl	80072e0 <Error_Handler>
 8007664:	e7f4      	b.n	8007650 <HAL_RTC_MspInit+0x30>
 8007666:	bf00      	nop
 8007668:	40002800 	.word	0x40002800
 800766c:	40021000 	.word	0x40021000

08007670 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8007670:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8007672:	4817      	ldr	r0, [pc, #92]	; (80076d0 <MX_SAI1_Init+0x60>)
 8007674:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <MX_SAI1_Init+0x64>)
 8007676:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8007678:	2100      	movs	r1, #0
 800767a:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800767c:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800767e:	6101      	str	r1, [r0, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007680:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8007682:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007684:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007688:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800768a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800768c:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800768e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007690:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007692:	2302      	movs	r3, #2
 8007694:	460a      	mov	r2, r1
 8007696:	f005 f853 	bl	800c740 <HAL_SAI_InitProtocol>
 800769a:	b998      	cbnz	r0, 80076c4 <MX_SAI1_Init+0x54>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800769c:	480e      	ldr	r0, [pc, #56]	; (80076d8 <MX_SAI1_Init+0x68>)
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <MX_SAI1_Init+0x6c>)
 80076a0:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80076a2:	2303      	movs	r3, #3
 80076a4:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80076a6:	2301      	movs	r3, #1
 80076a8:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80076aa:	2100      	movs	r1, #0
 80076ac:	6101      	str	r1, [r0, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80076ae:	6181      	str	r1, [r0, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80076b0:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80076b2:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80076b4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80076b6:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80076b8:	2302      	movs	r3, #2
 80076ba:	460a      	mov	r2, r1
 80076bc:	f005 f840 	bl	800c740 <HAL_SAI_InitProtocol>
 80076c0:	b918      	cbnz	r0, 80076ca <MX_SAI1_Init+0x5a>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80076c2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80076c4:	f7ff fe0c 	bl	80072e0 <Error_Handler>
 80076c8:	e7e8      	b.n	800769c <MX_SAI1_Init+0x2c>
    Error_Handler();
 80076ca:	f7ff fe09 	bl	80072e0 <Error_Handler>
}
 80076ce:	e7f8      	b.n	80076c2 <MX_SAI1_Init+0x52>
 80076d0:	20017f50 	.word	0x20017f50
 80076d4:	40015404 	.word	0x40015404
 80076d8:	20017d9c 	.word	0x20017d9c
 80076dc:	40015424 	.word	0x40015424

080076e0 <MX_SAI2_Init>:
/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80076e0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 80076e2:	4817      	ldr	r0, [pc, #92]	; (8007740 <MX_SAI2_Init+0x60>)
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <MX_SAI2_Init+0x64>)
 80076e6:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80076e8:	2100      	movs	r1, #0
 80076ea:	6041      	str	r1, [r0, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80076ec:	6081      	str	r1, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80076ee:	6101      	str	r1, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80076f0:	6141      	str	r1, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80076f2:	6181      	str	r1, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80076f4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076f8:	61c3      	str	r3, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80076fa:	60c1      	str	r1, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80076fc:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80076fe:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007700:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007702:	2302      	movs	r3, #2
 8007704:	460a      	mov	r2, r1
 8007706:	f005 f81b 	bl	800c740 <HAL_SAI_InitProtocol>
 800770a:	b998      	cbnz	r0, 8007734 <MX_SAI2_Init+0x54>
  {
    Error_Handler();
  }

  hsai_BlockB2.Instance = SAI2_Block_B;
 800770c:	480e      	ldr	r0, [pc, #56]	; (8007748 <MX_SAI2_Init+0x68>)
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <MX_SAI2_Init+0x6c>)
 8007710:	6003      	str	r3, [r0, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8007712:	2303      	movs	r3, #3
 8007714:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8007716:	2301      	movs	r3, #1
 8007718:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800771a:	2100      	movs	r1, #0
 800771c:	6101      	str	r1, [r0, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800771e:	6181      	str	r1, [r0, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007720:	60c1      	str	r1, [r0, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8007722:	6281      	str	r1, [r0, #40]	; 0x28
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8007724:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007726:	6301      	str	r1, [r0, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8007728:	2302      	movs	r3, #2
 800772a:	460a      	mov	r2, r1
 800772c:	f005 f808 	bl	800c740 <HAL_SAI_InitProtocol>
 8007730:	b918      	cbnz	r0, 800773a <MX_SAI2_Init+0x5a>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8007732:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007734:	f7ff fdd4 	bl	80072e0 <Error_Handler>
 8007738:	e7e8      	b.n	800770c <MX_SAI2_Init+0x2c>
    Error_Handler();
 800773a:	f7ff fdd1 	bl	80072e0 <Error_Handler>
}
 800773e:	e7f8      	b.n	8007732 <MX_SAI2_Init+0x52>
 8007740:	20017d08 	.word	0x20017d08
 8007744:	40015804 	.word	0x40015804
 8007748:	20017c14 	.word	0x20017c14
 800774c:	40015824 	.word	0x40015824

08007750 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8007750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007752:	b08b      	sub	sp, #44	; 0x2c
 8007754:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8007756:	6802      	ldr	r2, [r0, #0]
 8007758:	4b83      	ldr	r3, [pc, #524]	; (8007968 <HAL_SAI_MspInit+0x218>)
 800775a:	429a      	cmp	r2, r3
 800775c:	d00f      	beq.n	800777e <HAL_SAI_MspInit+0x2e>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	4b82      	ldr	r3, [pc, #520]	; (800796c <HAL_SAI_MspInit+0x21c>)
 8007762:	429a      	cmp	r2, r3
 8007764:	d04f      	beq.n	8007806 <HAL_SAI_MspInit+0xb6>
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	4b81      	ldr	r3, [pc, #516]	; (8007970 <HAL_SAI_MspInit+0x220>)
 800776a:	429a      	cmp	r2, r3
 800776c:	f000 8085 	beq.w	800787a <HAL_SAI_MspInit+0x12a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	4b80      	ldr	r3, [pc, #512]	; (8007974 <HAL_SAI_MspInit+0x224>)
 8007774:	429a      	cmp	r2, r3
 8007776:	f000 80bc 	beq.w	80078f2 <HAL_SAI_MspInit+0x1a2>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
    }
}
 800777a:	b00b      	add	sp, #44	; 0x2c
 800777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SAI1_client == 0)
 800777e:	4b7e      	ldr	r3, [pc, #504]	; (8007978 <HAL_SAI_MspInit+0x228>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	b94b      	cbnz	r3, 8007798 <HAL_SAI_MspInit+0x48>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007784:	4a7d      	ldr	r2, [pc, #500]	; (800797c <HAL_SAI_MspInit+0x22c>)
 8007786:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8007788:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 800778c:	6611      	str	r1, [r2, #96]	; 0x60
 800778e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8007790:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007794:	9201      	str	r2, [sp, #4]
 8007796:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 8007798:	3301      	adds	r3, #1
 800779a:	4a77      	ldr	r2, [pc, #476]	; (8007978 <HAL_SAI_MspInit+0x228>)
 800779c:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800779e:	2330      	movs	r3, #48	; 0x30
 80077a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077a2:	2602      	movs	r6, #2
 80077a4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a6:	2500      	movs	r5, #0
 80077a8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077aa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80077ac:	270d      	movs	r7, #13
 80077ae:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077b0:	a905      	add	r1, sp, #20
 80077b2:	4873      	ldr	r0, [pc, #460]	; (8007980 <HAL_SAI_MspInit+0x230>)
 80077b4:	f001 fada 	bl	8008d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80077b8:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ba:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077bc:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077be:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80077c0:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077c2:	a905      	add	r1, sp, #20
 80077c4:	486f      	ldr	r0, [pc, #444]	; (8007984 <HAL_SAI_MspInit+0x234>)
 80077c6:	f001 fad1 	bl	8008d6c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Channel1;
 80077ca:	486f      	ldr	r0, [pc, #444]	; (8007988 <HAL_SAI_MspInit+0x238>)
 80077cc:	4b6f      	ldr	r3, [pc, #444]	; (800798c <HAL_SAI_MspInit+0x23c>)
 80077ce:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80077d0:	2324      	movs	r3, #36	; 0x24
 80077d2:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077d4:	2310      	movs	r3, #16
 80077d6:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80077d8:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80077da:	2380      	movs	r3, #128	; 0x80
 80077dc:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80077de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077e2:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80077e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077e8:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_NORMAL;
 80077ea:	61c5      	str	r5, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80077ec:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80077ee:	f001 f97d 	bl	8008aec <HAL_DMA_Init>
 80077f2:	b928      	cbnz	r0, 8007800 <HAL_SAI_MspInit+0xb0>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80077f4:	4b64      	ldr	r3, [pc, #400]	; (8007988 <HAL_SAI_MspInit+0x238>)
 80077f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80077fa:	629c      	str	r4, [r3, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80077fc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80077fe:	e7ae      	b.n	800775e <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8007800:	f7ff fd6e 	bl	80072e0 <Error_Handler>
 8007804:	e7f6      	b.n	80077f4 <HAL_SAI_MspInit+0xa4>
      if (SAI1_client == 0)
 8007806:	4b5c      	ldr	r3, [pc, #368]	; (8007978 <HAL_SAI_MspInit+0x228>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	b94b      	cbnz	r3, 8007820 <HAL_SAI_MspInit+0xd0>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800780c:	4a5b      	ldr	r2, [pc, #364]	; (800797c <HAL_SAI_MspInit+0x22c>)
 800780e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8007810:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8007814:	6611      	str	r1, [r2, #96]	; 0x60
 8007816:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8007818:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800781c:	9202      	str	r2, [sp, #8]
 800781e:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8007820:	3301      	adds	r3, #1
 8007822:	4a55      	ldr	r2, [pc, #340]	; (8007978 <HAL_SAI_MspInit+0x228>)
 8007824:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007826:	2308      	movs	r3, #8
 8007828:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800782a:	2302      	movs	r3, #2
 800782c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782e:	2500      	movs	r5, #0
 8007830:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007832:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8007834:	230d      	movs	r3, #13
 8007836:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007838:	a905      	add	r1, sp, #20
 800783a:	4851      	ldr	r0, [pc, #324]	; (8007980 <HAL_SAI_MspInit+0x230>)
 800783c:	f001 fa96 	bl	8008d6c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Channel2;
 8007840:	4853      	ldr	r0, [pc, #332]	; (8007990 <HAL_SAI_MspInit+0x240>)
 8007842:	4b54      	ldr	r3, [pc, #336]	; (8007994 <HAL_SAI_MspInit+0x244>)
 8007844:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007846:	2325      	movs	r3, #37	; 0x25
 8007848:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800784a:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800784c:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007856:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007858:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800785c:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_NORMAL;
 800785e:	61c5      	str	r5, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8007860:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007862:	f001 f943 	bl	8008aec <HAL_DMA_Init>
 8007866:	b928      	cbnz	r0, 8007874 <HAL_SAI_MspInit+0x124>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8007868:	4b49      	ldr	r3, [pc, #292]	; (8007990 <HAL_SAI_MspInit+0x240>)
 800786a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800786e:	629c      	str	r4, [r3, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8007870:	67e3      	str	r3, [r4, #124]	; 0x7c
 8007872:	e778      	b.n	8007766 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 8007874:	f7ff fd34 	bl	80072e0 <Error_Handler>
 8007878:	e7f6      	b.n	8007868 <HAL_SAI_MspInit+0x118>
    if (SAI2_client == 0)
 800787a:	4b47      	ldr	r3, [pc, #284]	; (8007998 <HAL_SAI_MspInit+0x248>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	b94b      	cbnz	r3, 8007894 <HAL_SAI_MspInit+0x144>
       __HAL_RCC_SAI2_CLK_ENABLE();
 8007880:	4a3e      	ldr	r2, [pc, #248]	; (800797c <HAL_SAI_MspInit+0x22c>)
 8007882:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8007884:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8007888:	6611      	str	r1, [r2, #96]	; 0x60
 800788a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800788c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8007890:	9203      	str	r2, [sp, #12]
 8007892:	9a03      	ldr	r2, [sp, #12]
    SAI2_client ++;
 8007894:	3301      	adds	r3, #1
 8007896:	4a40      	ldr	r2, [pc, #256]	; (8007998 <HAL_SAI_MspInit+0x248>)
 8007898:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800789a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800789e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a0:	2302      	movs	r3, #2
 80078a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a4:	2500      	movs	r5, #0
 80078a6:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078a8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80078aa:	230d      	movs	r3, #13
 80078ac:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078ae:	a905      	add	r1, sp, #20
 80078b0:	483a      	ldr	r0, [pc, #232]	; (800799c <HAL_SAI_MspInit+0x24c>)
 80078b2:	f001 fa5b 	bl	8008d6c <HAL_GPIO_Init>
    hdma_sai2_a.Instance = DMA1_Channel3;
 80078b6:	483a      	ldr	r0, [pc, #232]	; (80079a0 <HAL_SAI_MspInit+0x250>)
 80078b8:	4b3a      	ldr	r3, [pc, #232]	; (80079a4 <HAL_SAI_MspInit+0x254>)
 80078ba:	6003      	str	r3, [r0, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_SAI2_A;
 80078bc:	2326      	movs	r3, #38	; 0x26
 80078be:	6043      	str	r3, [r0, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078c0:	2310      	movs	r3, #16
 80078c2:	6083      	str	r3, [r0, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80078c4:	60c5      	str	r5, [r0, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80078c6:	2380      	movs	r3, #128	; 0x80
 80078c8:	6103      	str	r3, [r0, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80078ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ce:	6143      	str	r3, [r0, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80078d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078d4:	6183      	str	r3, [r0, #24]
    hdma_sai2_a.Init.Mode = DMA_NORMAL;
 80078d6:	61c5      	str	r5, [r0, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80078d8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80078da:	f001 f907 	bl	8008aec <HAL_DMA_Init>
 80078de:	b928      	cbnz	r0, 80078ec <HAL_SAI_MspInit+0x19c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 80078e0:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <HAL_SAI_MspInit+0x250>)
 80078e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80078e6:	629c      	str	r4, [r3, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 80078e8:	67e3      	str	r3, [r4, #124]	; 0x7c
 80078ea:	e741      	b.n	8007770 <HAL_SAI_MspInit+0x20>
      Error_Handler();
 80078ec:	f7ff fcf8 	bl	80072e0 <Error_Handler>
 80078f0:	e7f6      	b.n	80078e0 <HAL_SAI_MspInit+0x190>
      if (SAI2_client == 0)
 80078f2:	4b29      	ldr	r3, [pc, #164]	; (8007998 <HAL_SAI_MspInit+0x248>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	b94b      	cbnz	r3, 800790c <HAL_SAI_MspInit+0x1bc>
       __HAL_RCC_SAI2_CLK_ENABLE();
 80078f8:	4a20      	ldr	r2, [pc, #128]	; (800797c <HAL_SAI_MspInit+0x22c>)
 80078fa:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80078fc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8007900:	6611      	str	r1, [r2, #96]	; 0x60
 8007902:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8007904:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8007908:	9204      	str	r2, [sp, #16]
 800790a:	9a04      	ldr	r2, [sp, #16]
    SAI2_client ++;
 800790c:	3301      	adds	r3, #1
 800790e:	4a22      	ldr	r2, [pc, #136]	; (8007998 <HAL_SAI_MspInit+0x248>)
 8007910:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007912:	2320      	movs	r3, #32
 8007914:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007916:	2302      	movs	r3, #2
 8007918:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791a:	2500      	movs	r5, #0
 800791c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800791e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8007920:	230d      	movs	r3, #13
 8007922:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007924:	a905      	add	r1, sp, #20
 8007926:	4820      	ldr	r0, [pc, #128]	; (80079a8 <HAL_SAI_MspInit+0x258>)
 8007928:	f001 fa20 	bl	8008d6c <HAL_GPIO_Init>
    hdma_sai2_b.Instance = DMA1_Channel4;
 800792c:	481f      	ldr	r0, [pc, #124]	; (80079ac <HAL_SAI_MspInit+0x25c>)
 800792e:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <HAL_SAI_MspInit+0x260>)
 8007930:	6003      	str	r3, [r0, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_SAI2_B;
 8007932:	2327      	movs	r3, #39	; 0x27
 8007934:	6043      	str	r3, [r0, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007936:	6085      	str	r5, [r0, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007938:	60c5      	str	r5, [r0, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800793a:	2380      	movs	r3, #128	; 0x80
 800793c:	6103      	str	r3, [r0, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800793e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007942:	6143      	str	r3, [r0, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007948:	6183      	str	r3, [r0, #24]
    hdma_sai2_b.Init.Mode = DMA_NORMAL;
 800794a:	61c5      	str	r5, [r0, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800794c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 800794e:	f001 f8cd 	bl	8008aec <HAL_DMA_Init>
 8007952:	b928      	cbnz	r0, 8007960 <HAL_SAI_MspInit+0x210>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8007954:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_SAI_MspInit+0x25c>)
 8007956:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800795a:	629c      	str	r4, [r3, #40]	; 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800795c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800795e:	e70c      	b.n	800777a <HAL_SAI_MspInit+0x2a>
      Error_Handler();
 8007960:	f7ff fcbe 	bl	80072e0 <Error_Handler>
 8007964:	e7f6      	b.n	8007954 <HAL_SAI_MspInit+0x204>
 8007966:	bf00      	nop
 8007968:	40015404 	.word	0x40015404
 800796c:	40015424 	.word	0x40015424
 8007970:	40015804 	.word	0x40015804
 8007974:	40015824 	.word	0x40015824
 8007978:	20001738 	.word	0x20001738
 800797c:	40021000 	.word	0x40021000
 8007980:	48001000 	.word	0x48001000
 8007984:	48000800 	.word	0x48000800
 8007988:	20017e30 	.word	0x20017e30
 800798c:	40020008 	.word	0x40020008
 8007990:	20017e90 	.word	0x20017e90
 8007994:	4002001c 	.word	0x4002001c
 8007998:	2000173c 	.word	0x2000173c
 800799c:	48000400 	.word	0x48000400
 80079a0:	20017ef0 	.word	0x20017ef0
 80079a4:	40020030 	.word	0x40020030
 80079a8:	48001800 	.word	0x48001800
 80079ac:	20017ca8 	.word	0x20017ca8
 80079b0:	40020044 	.word	0x40020044

080079b4 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <MX_SDMMC1_SD_Init+0x1c>)
 80079b6:	4a07      	ldr	r2, [pc, #28]	; (80079d4 <MX_SDMMC1_SD_Init+0x20>)
 80079b8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80079ba:	2200      	movs	r2, #0
 80079bc:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079be:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80079c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079c4:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079c6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80079c8:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 80079ca:	2201      	movs	r2, #1
 80079cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80079ce:	4770      	bx	lr
 80079d0:	20017fe4 	.word	0x20017fe4
 80079d4:	50062400 	.word	0x50062400

080079d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80079d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079da:	b0af      	sub	sp, #188	; 0xbc
 80079dc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079de:	2100      	movs	r1, #0
 80079e0:	9129      	str	r1, [sp, #164]	; 0xa4
 80079e2:	912a      	str	r1, [sp, #168]	; 0xa8
 80079e4:	912b      	str	r1, [sp, #172]	; 0xac
 80079e6:	912c      	str	r1, [sp, #176]	; 0xb0
 80079e8:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80079ea:	2294      	movs	r2, #148	; 0x94
 80079ec:	a804      	add	r0, sp, #16
 80079ee:	f00c fca3 	bl	8014338 <memset>
  if(sdHandle->Instance==SDMMC1)
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	4b32      	ldr	r3, [pc, #200]	; (8007ac0 <HAL_SD_MspInit+0xe8>)
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d001      	beq.n	80079fe <HAL_SD_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80079fa:	b02f      	add	sp, #188	; 0xbc
 80079fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80079fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a02:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8007a04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a08:	9322      	str	r3, [sp, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a0a:	a804      	add	r0, sp, #16
 8007a0c:	f003 fba0 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d152      	bne.n	8007aba <HAL_SD_MspInit+0xe2>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007a14:	4b2b      	ldr	r3, [pc, #172]	; (8007ac4 <HAL_SD_MspInit+0xec>)
 8007a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a18:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007a1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a20:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8007a24:	9200      	str	r2, [sp, #0]
 8007a26:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a2a:	f042 0204 	orr.w	r2, r2, #4
 8007a2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a32:	f002 0204 	and.w	r2, r2, #4
 8007a36:	9201      	str	r2, [sp, #4]
 8007a38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3c:	f042 0208 	orr.w	r2, r2, #8
 8007a40:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a44:	f002 0208 	and.w	r2, r2, #8
 8007a48:	9202      	str	r2, [sp, #8]
 8007a4a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a4e:	f042 0202 	orr.w	r2, r2, #2
 8007a52:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	9303      	str	r3, [sp, #12]
 8007a5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007a5e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007a62:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a64:	2602      	movs	r6, #2
 8007a66:	962a      	str	r6, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2400      	movs	r4, #0
 8007a6a:	942b      	str	r4, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a6c:	2503      	movs	r5, #3
 8007a6e:	952c      	str	r5, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007a70:	270c      	movs	r7, #12
 8007a72:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a74:	a929      	add	r1, sp, #164	; 0xa4
 8007a76:	4814      	ldr	r0, [pc, #80]	; (8007ac8 <HAL_SD_MspInit+0xf0>)
 8007a78:	f001 f978 	bl	8008d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a80:	962a      	str	r6, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a82:	942b      	str	r4, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a84:	952c      	str	r5, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8007a86:	972d      	str	r7, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a88:	a929      	add	r1, sp, #164	; 0xa4
 8007a8a:	4810      	ldr	r0, [pc, #64]	; (8007acc <HAL_SD_MspInit+0xf4>)
 8007a8c:	f001 f96e 	bl	8008d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a94:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a96:	962a      	str	r6, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a98:	942b      	str	r4, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a9a:	952c      	str	r5, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aa0:	a929      	add	r1, sp, #164	; 0xa4
 8007aa2:	480b      	ldr	r0, [pc, #44]	; (8007ad0 <HAL_SD_MspInit+0xf8>)
 8007aa4:	f001 f962 	bl	8008d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	2105      	movs	r1, #5
 8007aac:	2031      	movs	r0, #49	; 0x31
 8007aae:	f000 fe23 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8007ab2:	2031      	movs	r0, #49	; 0x31
 8007ab4:	f000 fe54 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8007ab8:	e79f      	b.n	80079fa <HAL_SD_MspInit+0x22>
      Error_Handler();
 8007aba:	f7ff fc11 	bl	80072e0 <Error_Handler>
 8007abe:	e7a9      	b.n	8007a14 <HAL_SD_MspInit+0x3c>
 8007ac0:	50062400 	.word	0x50062400
 8007ac4:	40021000 	.word	0x40021000
 8007ac8:	48000800 	.word	0x48000800
 8007acc:	48000c00 	.word	0x48000c00
 8007ad0:	48000400 	.word	0x48000400

08007ad4 <serialInputInit>:
	uint32_t bufferSize;
} SerialInputContext;

static SerialInputContext context;

void serialInputInit(SerialInputPortInitialization callback, uint32_t buffer_size) {
 8007ad4:	b508      	push	{r3, lr}
	context.bufferSize = buffer_size;
 8007ad6:	4803      	ldr	r0, [pc, #12]	; (8007ae4 <serialInputInit+0x10>)
 8007ad8:	66c1      	str	r1, [r0, #108]	; 0x6c
	fifoInit(&(context.fifoContext), buffer_size, FIFO_TYPE_ISR_PUSH);
 8007ada:	2200      	movs	r2, #0
 8007adc:	f7ff f808 	bl	8006af0 <fifoInit>
}
 8007ae0:	bd08      	pop	{r3, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001740 	.word	0x20001740

08007ae8 <serialInputProcessInterrupt>:

// Call from Rx handler
void serialInputProcessInterrupt(uint8_t* buffer, uint32_t length) {
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	4606      	mov	r6, r0
 8007aec:	460d      	mov	r5, r1
	for(uint32_t i = 0; i < length; i++) {
 8007aee:	2400      	movs	r4, #0
 8007af0:	42ac      	cmp	r4, r5
 8007af2:	d205      	bcs.n	8007b00 <serialInputProcessInterrupt+0x18>
		fifoPush(&(context.fifoContext), buffer[i]);
 8007af4:	5d31      	ldrb	r1, [r6, r4]
 8007af6:	4803      	ldr	r0, [pc, #12]	; (8007b04 <serialInputProcessInterrupt+0x1c>)
 8007af8:	f7ff f817 	bl	8006b2a <fifoPush>
	for(uint32_t i = 0; i < length; i++) {
 8007afc:	3401      	adds	r4, #1
 8007afe:	e7f7      	b.n	8007af0 <serialInputProcessInterrupt+0x8>
	}
}
 8007b00:	bd70      	pop	{r4, r5, r6, pc}
 8007b02:	bf00      	nop
 8007b04:	20001740 	.word	0x20001740

08007b08 <serialInputRead>:

// Call from RTOS task to read data
// Return number of received bytes
uint32_t serialInputRead(uint8_t* buffer) {
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	4606      	mov	r6, r0
	uint32_t dataLength = context.fifoContext.fifoBufferSize - context.fifoContext.fifoEmptySpaceLeft;
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <serialInputRead+0x24>)
 8007b0e:	681d      	ldr	r5, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	1aed      	subs	r5, r5, r3
	for(uint32_t i = 0; i < dataLength; i++) {
 8007b14:	2400      	movs	r4, #0
 8007b16:	42ac      	cmp	r4, r5
 8007b18:	d205      	bcs.n	8007b26 <serialInputRead+0x1e>
		fifoPull(&(context.fifoContext), buffer);
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4803      	ldr	r0, [pc, #12]	; (8007b2c <serialInputRead+0x24>)
 8007b1e:	f7ff f837 	bl	8006b90 <fifoPull>
	for(uint32_t i = 0; i < dataLength; i++) {
 8007b22:	3401      	adds	r4, #1
 8007b24:	e7f7      	b.n	8007b16 <serialInputRead+0xe>
	}

	return dataLength;
}
 8007b26:	4628      	mov	r0, r5
 8007b28:	bd70      	pop	{r4, r5, r6, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20001740 	.word	0x20001740

08007b30 <serialOutputInit>:
	SerialOutputProcessCallback outputCallbak;
} SerialOutputContext;

static SerialOutputContext context;

void serialOutputInit(SerialOutputProcessCallback output_callbak, SerialOutputOverflowCallback overflow_callback, uint32_t buffer_size, uint32_t overflow_size) {
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4606      	mov	r6, r0
 8007b34:	4614      	mov	r4, r2
	context.bufferSize = buffer_size;
 8007b36:	4d07      	ldr	r5, [pc, #28]	; (8007b54 <serialOutputInit+0x24>)
 8007b38:	672a      	str	r2, [r5, #112]	; 0x70
	context.outputBuffer = (uint8_t*)calloc(buffer_size, sizeof(uint8_t));
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f00c f923 	bl	8013d88 <calloc>
 8007b42:	66e8      	str	r0, [r5, #108]	; 0x6c
	context.outputCallbak = output_callbak;
 8007b44:	676e      	str	r6, [r5, #116]	; 0x74
	fifoInit(&(context.fifoContext), buffer_size, FIFO_TYPE_NO_ISR);
 8007b46:	2202      	movs	r2, #2
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7fe ffd0 	bl	8006af0 <fifoInit>
}
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	bf00      	nop
 8007b54:	200017b0 	.word	0x200017b0

08007b58 <serialOutputPrint>:

void serialOutputPrint(uint8_t* message, uint32_t length) {
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460d      	mov	r5, r1
	for(uint32_t i = 0; i < length; i++) {
 8007b5e:	2400      	movs	r4, #0
 8007b60:	42ac      	cmp	r4, r5
 8007b62:	d205      	bcs.n	8007b70 <serialOutputPrint+0x18>
		fifoPush(&(context.fifoContext), message[i]);
 8007b64:	5d31      	ldrb	r1, [r6, r4]
 8007b66:	4803      	ldr	r0, [pc, #12]	; (8007b74 <serialOutputPrint+0x1c>)
 8007b68:	f7fe ffdf 	bl	8006b2a <fifoPush>
	for(uint32_t i = 0; i < length; i++) {
 8007b6c:	3401      	adds	r4, #1
 8007b6e:	e7f7      	b.n	8007b60 <serialOutputPrint+0x8>
	}
}
 8007b70:	bd70      	pop	{r4, r5, r6, pc}
 8007b72:	bf00      	nop
 8007b74:	200017b0 	.word	0x200017b0

08007b78 <serialOutputProcess>:

void serialOutputProcess() {
 8007b78:	b538      	push	{r3, r4, r5, lr}
	uint32_t dataLength = context.fifoContext.fifoBufferSize - context.fifoContext.fifoEmptySpaceLeft;
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <serialOutputProcess+0x2c>)
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
	if(dataLength > 0) {
 8007b80:	1aed      	subs	r5, r5, r3
 8007b82:	d00e      	beq.n	8007ba2 <serialOutputProcess+0x2a>
		for(uint32_t i = 0; i < dataLength; i++) {
 8007b84:	2400      	movs	r4, #0
 8007b86:	42ac      	cmp	r4, r5
 8007b88:	d206      	bcs.n	8007b98 <serialOutputProcess+0x20>
			fifoPull(&(context.fifoContext), &(context.outputBuffer[i]));
 8007b8a:	4806      	ldr	r0, [pc, #24]	; (8007ba4 <serialOutputProcess+0x2c>)
 8007b8c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8007b8e:	4421      	add	r1, r4
 8007b90:	f7fe fffe 	bl	8006b90 <fifoPull>
		for(uint32_t i = 0; i < dataLength; i++) {
 8007b94:	3401      	adds	r4, #1
 8007b96:	e7f6      	b.n	8007b86 <serialOutputProcess+0xe>
		}
		context.outputCallbak(context.outputBuffer, dataLength);
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <serialOutputProcess+0x2c>)
 8007b9a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007ba0:	4790      	blx	r2
	}

}
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}
 8007ba4:	200017b0 	.word	0x200017b0

08007ba8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007ba8:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007baa:	4810      	ldr	r0, [pc, #64]	; (8007bec <MX_SPI1_Init+0x44>)
 8007bac:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <MX_SPI1_Init+0x48>)
 8007bae:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007bb0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007bb4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8007bba:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007bbe:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bc0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007bc2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bca:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007bcc:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007bce:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bd0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007bd2:	2207      	movs	r2, #7
 8007bd4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007bd6:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007bd8:	2308      	movs	r3, #8
 8007bda:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007bdc:	f005 fd72 	bl	800d6c4 <HAL_SPI_Init>
 8007be0:	b900      	cbnz	r0, 8007be4 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007be2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007be4:	f7ff fb7c 	bl	80072e0 <Error_Handler>
}
 8007be8:	e7fb      	b.n	8007be2 <MX_SPI1_Init+0x3a>
 8007bea:	bf00      	nop
 8007bec:	20018064 	.word	0x20018064
 8007bf0:	40013000 	.word	0x40013000

08007bf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007bf4:	b530      	push	{r4, r5, lr}
 8007bf6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9303      	str	r3, [sp, #12]
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	9305      	str	r3, [sp, #20]
 8007c00:	9306      	str	r3, [sp, #24]
 8007c02:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8007c04:	6802      	ldr	r2, [r0, #0]
 8007c06:	4b30      	ldr	r3, [pc, #192]	; (8007cc8 <HAL_SPI_MspInit+0xd4>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007c0c:	b009      	add	sp, #36	; 0x24
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007c12:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8007c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c1c:	661a      	str	r2, [r3, #96]	; 0x60
 8007c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007c20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007c24:	9201      	str	r2, [sp, #4]
 8007c26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c2a:	f042 0210 	orr.w	r2, r2, #16
 8007c2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	9302      	str	r3, [sp, #8]
 8007c38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007c3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007c3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c40:	2302      	movs	r3, #2
 8007c42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c44:	2500      	movs	r5, #0
 8007c46:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007c4c:	2305      	movs	r3, #5
 8007c4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007c50:	a903      	add	r1, sp, #12
 8007c52:	481e      	ldr	r0, [pc, #120]	; (8007ccc <HAL_SPI_MspInit+0xd8>)
 8007c54:	f001 f88a 	bl	8008d6c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel7;
 8007c58:	481d      	ldr	r0, [pc, #116]	; (8007cd0 <HAL_SPI_MspInit+0xdc>)
 8007c5a:	4b1e      	ldr	r3, [pc, #120]	; (8007cd4 <HAL_SPI_MspInit+0xe0>)
 8007c5c:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8007c5e:	230a      	movs	r3, #10
 8007c60:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c62:	6085      	str	r5, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c64:	60c5      	str	r5, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	6103      	str	r3, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c6a:	6145      	str	r5, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c6c:	6185      	str	r5, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8007c6e:	61c5      	str	r5, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c70:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007c72:	f000 ff3b 	bl	8008aec <HAL_DMA_Init>
 8007c76:	bb00      	cbnz	r0, 8007cba <HAL_SPI_MspInit+0xc6>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <HAL_SPI_MspInit+0xdc>)
 8007c7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c7c:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA2_Channel1;
 8007c7e:	4816      	ldr	r0, [pc, #88]	; (8007cd8 <HAL_SPI_MspInit+0xe4>)
 8007c80:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <HAL_SPI_MspInit+0xe8>)
 8007c82:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8007c84:	230b      	movs	r3, #11
 8007c86:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c88:	2310      	movs	r3, #16
 8007c8a:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c90:	2280      	movs	r2, #128	; 0x80
 8007c92:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c94:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c96:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007c98:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c9a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007c9c:	f000 ff26 	bl	8008aec <HAL_DMA_Init>
 8007ca0:	b970      	cbnz	r0, 8007cc0 <HAL_SPI_MspInit+0xcc>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <HAL_SPI_MspInit+0xe4>)
 8007ca4:	6563      	str	r3, [r4, #84]	; 0x54
 8007ca6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2105      	movs	r1, #5
 8007cac:	2023      	movs	r0, #35	; 0x23
 8007cae:	f000 fd23 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007cb2:	2023      	movs	r0, #35	; 0x23
 8007cb4:	f000 fd54 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8007cb8:	e7a8      	b.n	8007c0c <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8007cba:	f7ff fb11 	bl	80072e0 <Error_Handler>
 8007cbe:	e7db      	b.n	8007c78 <HAL_SPI_MspInit+0x84>
      Error_Handler();
 8007cc0:	f7ff fb0e 	bl	80072e0 <Error_Handler>
 8007cc4:	e7ed      	b.n	8007ca2 <HAL_SPI_MspInit+0xae>
 8007cc6:	bf00      	nop
 8007cc8:	40013000 	.word	0x40013000
 8007ccc:	48001000 	.word	0x48001000
 8007cd0:	200180c8 	.word	0x200180c8
 8007cd4:	40020080 	.word	0x40020080
 8007cd8:	20018128 	.word	0x20018128
 8007cdc:	40020408 	.word	0x40020408

08007ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ce0:	b500      	push	{lr}
 8007ce2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ce4:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <HAL_MspInit+0x3c>)
 8007ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ce8:	f042 0201 	orr.w	r2, r2, #1
 8007cec:	661a      	str	r2, [r3, #96]	; 0x60
 8007cee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007cf0:	f002 0201 	and.w	r2, r2, #1
 8007cf4:	9200      	str	r2, [sp, #0]
 8007cf6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cfa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8007d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	210f      	movs	r1, #15
 8007d0e:	f06f 0001 	mvn.w	r0, #1
 8007d12:	f000 fcf1 	bl	80086f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d16:	b003      	add	sp, #12
 8007d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d1c:	40021000 	.word	0x40021000

08007d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d20:	b500      	push	{lr}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8007d26:	2200      	movs	r2, #0
 8007d28:	201a      	movs	r0, #26
 8007d2a:	f000 fce5 	bl	80086f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007d2e:	201a      	movs	r0, #26
 8007d30:	f000 fd16 	bl	8008760 <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8007d34:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <HAL_InitTick+0x68>)
 8007d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007d3c:	661a      	str	r2, [r3, #96]	; 0x60
 8007d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007d48:	a902      	add	r1, sp, #8
 8007d4a:	a803      	add	r0, sp, #12
 8007d4c:	f002 ffd6 	bl	800acfc <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007d50:	f002 ffc2 	bl	800acd8 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007d54:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <HAL_InitTick+0x6c>)
 8007d56:	fba3 2300 	umull	r2, r3, r3, r0
 8007d5a:	0c9b      	lsrs	r3, r3, #18
 8007d5c:	3b01      	subs	r3, #1

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8007d5e:	480c      	ldr	r0, [pc, #48]	; (8007d90 <HAL_InitTick+0x70>)
 8007d60:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <HAL_InitTick+0x74>)
 8007d62:	6002      	str	r2, [r0, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8007d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007d68:	60c2      	str	r2, [r0, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8007d6a:	6043      	str	r3, [r0, #4]
  htim17.Init.ClockDivision = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6103      	str	r3, [r0, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d70:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8007d72:	f005 ff2f 	bl	800dbd4 <HAL_TIM_Base_Init>
 8007d76:	b118      	cbz	r0, 8007d80 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
  }

  /* Return function status */
  return HAL_ERROR;
 8007d78:	2001      	movs	r0, #1
}
 8007d7a:	b009      	add	sp, #36	; 0x24
 8007d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim17);
 8007d80:	4803      	ldr	r0, [pc, #12]	; (8007d90 <HAL_InitTick+0x70>)
 8007d82:	f005 fdab 	bl	800d8dc <HAL_TIM_Base_Start_IT>
 8007d86:	e7f8      	b.n	8007d7a <HAL_InitTick+0x5a>
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	431bde83 	.word	0x431bde83
 8007d90:	20018188 	.word	0x20018188
 8007d94:	40014800 	.word	0x40014800

08007d98 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d98:	e7fe      	b.n	8007d98 <NMI_Handler>

08007d9a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d9a:	e7fe      	b.n	8007d9a <HardFault_Handler>

08007d9c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d9c:	e7fe      	b.n	8007d9c <MemManage_Handler>

08007d9e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d9e:	e7fe      	b.n	8007d9e <BusFault_Handler>

08007da0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007da0:	e7fe      	b.n	8007da0 <UsageFault_Handler>

08007da2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007da2:	4770      	bx	lr

08007da4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007da6:	2008      	movs	r0, #8
 8007da8:	f001 f8d4 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007dac:	bd08      	pop	{r3, pc}
	...

08007db0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007db0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8007db2:	4802      	ldr	r0, [pc, #8]	; (8007dbc <DMA1_Channel1_IRQHandler+0xc>)
 8007db4:	f000 ff75 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007db8:	bd08      	pop	{r3, pc}
 8007dba:	bf00      	nop
 8007dbc:	20017e30 	.word	0x20017e30

08007dc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8007dc2:	4802      	ldr	r0, [pc, #8]	; (8007dcc <DMA1_Channel2_IRQHandler+0xc>)
 8007dc4:	f000 ff6d 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007dc8:	bd08      	pop	{r3, pc}
 8007dca:	bf00      	nop
 8007dcc:	20017e90 	.word	0x20017e90

08007dd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8007dd2:	4802      	ldr	r0, [pc, #8]	; (8007ddc <DMA1_Channel3_IRQHandler+0xc>)
 8007dd4:	f000 ff65 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007dd8:	bd08      	pop	{r3, pc}
 8007dda:	bf00      	nop
 8007ddc:	20017ef0 	.word	0x20017ef0

08007de0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8007de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8007de2:	4802      	ldr	r0, [pc, #8]	; (8007dec <DMA1_Channel4_IRQHandler+0xc>)
 8007de4:	f000 ff5d 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8007de8:	bd08      	pop	{r3, pc}
 8007dea:	bf00      	nop
 8007dec:	20017ca8 	.word	0x20017ca8

08007df0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8007df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007df2:	4802      	ldr	r0, [pc, #8]	; (8007dfc <DMA1_Channel7_IRQHandler+0xc>)
 8007df4:	f000 ff55 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8007df8:	bd08      	pop	{r3, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200180c8 	.word	0x200180c8

08007e00 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007e00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007e02:	4802      	ldr	r0, [pc, #8]	; (8007e0c <TIM1_TRG_COM_TIM17_IRQHandler+0xc>)
 8007e04:	f005 fdb4 	bl	800d970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007e08:	bd08      	pop	{r3, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20018188 	.word	0x20018188

08007e10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007e12:	4802      	ldr	r0, [pc, #8]	; (8007e1c <I2C1_EV_IRQHandler+0xc>)
 8007e14:	f001 f971 	bl	80090fa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007e18:	bd08      	pop	{r3, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20017af0 	.word	0x20017af0

08007e20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8007e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007e22:	4802      	ldr	r0, [pc, #8]	; (8007e2c <I2C1_ER_IRQHandler+0xc>)
 8007e24:	f001 fc33 	bl	800968e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007e28:	bd08      	pop	{r3, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20017af0 	.word	0x20017af0

08007e30 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8007e30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8007e32:	4802      	ldr	r0, [pc, #8]	; (8007e3c <I2C2_EV_IRQHandler+0xc>)
 8007e34:	f001 f961 	bl	80090fa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8007e38:	bd08      	pop	{r3, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20017b3c 	.word	0x20017b3c

08007e40 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8007e40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8007e42:	4802      	ldr	r0, [pc, #8]	; (8007e4c <I2C2_ER_IRQHandler+0xc>)
 8007e44:	f001 fc23 	bl	800968e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8007e48:	bd08      	pop	{r3, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20017b3c 	.word	0x20017b3c

08007e50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007e52:	4802      	ldr	r0, [pc, #8]	; (8007e5c <SPI1_IRQHandler+0xc>)
 8007e54:	f005 fca6 	bl	800d7a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007e58:	bd08      	pop	{r3, pc}
 8007e5a:	bf00      	nop
 8007e5c:	20018064 	.word	0x20018064

08007e60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007e62:	4802      	ldr	r0, [pc, #8]	; (8007e6c <USART1_IRQHandler+0xc>)
 8007e64:	f006 f822 	bl	800deac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007e68:	bd08      	pop	{r3, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20018474 	.word	0x20018474

08007e70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007e72:	4802      	ldr	r0, [pc, #8]	; (8007e7c <USART3_IRQHandler+0xc>)
 8007e74:	f006 f81a 	bl	800deac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007e78:	bd08      	pop	{r3, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20018234 	.word	0x20018234

08007e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007e82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e86:	f001 f865 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007e8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e8e:	f001 f861 	bl	8008f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e92:	bd08      	pop	{r3, pc}

08007e94 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8007e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8007e96:	4802      	ldr	r0, [pc, #8]	; (8007ea0 <SDMMC1_IRQHandler+0xc>)
 8007e98:	f004 ffae 	bl	800cdf8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8007e9c:	bd08      	pop	{r3, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20017fe4 	.word	0x20017fe4

08007ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007ea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8007ea6:	4802      	ldr	r0, [pc, #8]	; (8007eb0 <TIM6_DAC_IRQHandler+0xc>)
 8007ea8:	f000 fcf2 	bl	8008890 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007eac:	bd08      	pop	{r3, pc}
 8007eae:	bf00      	nop
 8007eb0:	20017a84 	.word	0x20017a84

08007eb4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8007eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007eb6:	4802      	ldr	r0, [pc, #8]	; (8007ec0 <DMA2_Channel1_IRQHandler+0xc>)
 8007eb8:	f000 fef3 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8007ebc:	bd08      	pop	{r3, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20018128 	.word	0x20018128

08007ec4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8007ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007ec6:	4802      	ldr	r0, [pc, #8]	; (8007ed0 <DMA2_Channel4_IRQHandler+0xc>)
 8007ec8:	f000 feeb 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8007ecc:	bd08      	pop	{r3, pc}
 8007ece:	bf00      	nop
 8007ed0:	200183b4 	.word	0x200183b4

08007ed4 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8007ed4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007ed6:	4802      	ldr	r0, [pc, #8]	; (8007ee0 <DMA2_Channel5_IRQHandler+0xc>)
 8007ed8:	f000 fee3 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8007edc:	bd08      	pop	{r3, pc}
 8007ede:	bf00      	nop
 8007ee0:	20018354 	.word	0x20018354

08007ee4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007ee4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007ee6:	4802      	ldr	r0, [pc, #8]	; (8007ef0 <OTG_FS_IRQHandler+0xc>)
 8007ee8:	f001 fd9c 	bl	8009a24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007eec:	bd08      	pop	{r3, pc}
 8007eee:	bf00      	nop
 8007ef0:	20018a44 	.word	0x20018a44

08007ef4 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8007ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007ef6:	4802      	ldr	r0, [pc, #8]	; (8007f00 <DMA2_Channel6_IRQHandler+0xc>)
 8007ef8:	f000 fed3 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8007efc:	bd08      	pop	{r3, pc}
 8007efe:	bf00      	nop
 8007f00:	200181d4 	.word	0x200181d4

08007f04 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 8007f04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007f06:	4802      	ldr	r0, [pc, #8]	; (8007f10 <DMA2_Channel7_IRQHandler+0xc>)
 8007f08:	f000 fecb 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8007f0c:	bd08      	pop	{r3, pc}
 8007f0e:	bf00      	nop
 8007f10:	20018414 	.word	0x20018414

08007f14 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8007f14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8007f16:	4802      	ldr	r0, [pc, #8]	; (8007f20 <I2C4_EV_IRQHandler+0xc>)
 8007f18:	f001 f8ef 	bl	80090fa <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8007f1c:	bd08      	pop	{r3, pc}
 8007f1e:	bf00      	nop
 8007f20:	20017aa4 	.word	0x20017aa4

08007f24 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8007f24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8007f26:	4802      	ldr	r0, [pc, #8]	; (8007f30 <I2C4_ER_IRQHandler+0xc>)
 8007f28:	f001 fbb1 	bl	800968e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8007f2c:	bd08      	pop	{r3, pc}
 8007f2e:	bf00      	nop
 8007f30:	20017aa4 	.word	0x20017aa4

08007f34 <LPUART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void LPUART1_IRQHandler(void)
{
 8007f34:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&hlpuart1);
 8007f36:	4802      	ldr	r0, [pc, #8]	; (8007f40 <LPUART1_IRQHandler+0xc>)
 8007f38:	f005 ffb8 	bl	800deac <HAL_UART_IRQHandler>
}
 8007f3c:	bd08      	pop	{r3, pc}
 8007f3e:	bf00      	nop
 8007f40:	200182c4 	.word	0x200182c4

08007f44 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007f44:	2001      	movs	r0, #1
 8007f46:	4770      	bx	lr

08007f48 <_kill>:

int _kill(int pid, int sig)
{
 8007f48:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007f4a:	f00b ff53 	bl	8013df4 <__errno>
 8007f4e:	2316      	movs	r3, #22
 8007f50:	6003      	str	r3, [r0, #0]
	return -1;
}
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f56:	bd08      	pop	{r3, pc}

08007f58 <_exit>:

void _exit (int status)
{
 8007f58:	b508      	push	{r3, lr}
	_kill(status, -1);
 8007f5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f5e:	f7ff fff3 	bl	8007f48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007f62:	e7fe      	b.n	8007f62 <_exit+0xa>

08007f64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f64:	b570      	push	{r4, r5, r6, lr}
 8007f66:	460c      	mov	r4, r1
 8007f68:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f6a:	2500      	movs	r5, #0
 8007f6c:	42b5      	cmp	r5, r6
 8007f6e:	da07      	bge.n	8007f80 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8007f70:	f3af 8000 	nop.w
 8007f74:	4621      	mov	r1, r4
 8007f76:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f7a:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	e7f5      	b.n	8007f6c <_read+0x8>
	}

return len;
}
 8007f80:	4630      	mov	r0, r6
 8007f82:	bd70      	pop	{r4, r5, r6, pc}

08007f84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f84:	b570      	push	{r4, r5, r6, lr}
 8007f86:	460c      	mov	r4, r1
 8007f88:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	42b5      	cmp	r5, r6
 8007f8e:	da05      	bge.n	8007f9c <_write+0x18>
	{
		__io_putchar(*ptr++);
 8007f90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f94:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f98:	3501      	adds	r5, #1
 8007f9a:	e7f7      	b.n	8007f8c <_write+0x8>
	}
	return len;
}
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}

08007fa0 <_close>:

int _close(int file)
{
	return -1;
}
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa4:	4770      	bx	lr

08007fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007faa:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007fac:	2000      	movs	r0, #0
 8007fae:	4770      	bx	lr

08007fb0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	4770      	bx	lr

08007fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	4770      	bx	lr

08007fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fbc:	4a0c      	ldr	r2, [pc, #48]	; (8007ff0 <_sbrk+0x38>)
 8007fbe:	490d      	ldr	r1, [pc, #52]	; (8007ff4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fc0:	480d      	ldr	r0, [pc, #52]	; (8007ff8 <_sbrk+0x40>)
 8007fc2:	6800      	ldr	r0, [r0, #0]
 8007fc4:	b140      	cbz	r0, 8007fd8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fc6:	480c      	ldr	r0, [pc, #48]	; (8007ff8 <_sbrk+0x40>)
 8007fc8:	6800      	ldr	r0, [r0, #0]
 8007fca:	4403      	add	r3, r0
 8007fcc:	1a52      	subs	r2, r2, r1
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d806      	bhi.n	8007fe0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007fd2:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <_sbrk+0x40>)
 8007fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8007fd6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007fd8:	4807      	ldr	r0, [pc, #28]	; (8007ff8 <_sbrk+0x40>)
 8007fda:	4c08      	ldr	r4, [pc, #32]	; (8007ffc <_sbrk+0x44>)
 8007fdc:	6004      	str	r4, [r0, #0]
 8007fde:	e7f2      	b.n	8007fc6 <_sbrk+0xe>
    errno = ENOMEM;
 8007fe0:	f00b ff08 	bl	8013df4 <__errno>
 8007fe4:	230c      	movs	r3, #12
 8007fe6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fec:	e7f3      	b.n	8007fd6 <_sbrk+0x1e>
 8007fee:	bf00      	nop
 8007ff0:	200a0000 	.word	0x200a0000
 8007ff4:	00000800 	.word	0x00000800
 8007ff8:	20001828 	.word	0x20001828
 8007ffc:	20018e60 	.word	0x20018e60

08008000 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008000:	4a0e      	ldr	r2, [pc, #56]	; (800803c <SystemInit+0x3c>)
 8008002:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800800a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800800e:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <SystemInit+0x40>)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	f042 0201 	orr.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008018:	2100      	movs	r1, #0
 800801a:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8008022:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008026:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800802c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008034:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008036:	6199      	str	r1, [r3, #24]
}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	e000ed00 	.word	0xe000ed00
 8008040:	40021000 	.word	0x40021000

08008044 <serialOutputOveflowCallback>:
}

void serialOutputOveflowCallback() {
	// start to print pull data to a COM port
	//HAL_UART_Transmit_IT(&hlpuart1, message, length);
}
 8008044:	4770      	bx	lr

08008046 <serialInputInitCallback>:


void serialInputInitCallback(void) {
	//HAL_UART_Receive_IT(&hlpuart1, message, length);
}
 8008046:	4770      	bx	lr

08008048 <serialOutputCallback>:
void serialOutputCallback(uint8_t* message, uint32_t length) {
 8008048:	b508      	push	{r3, lr}
	HAL_UART_Transmit_IT(&hlpuart1, message, length);
 800804a:	b28a      	uxth	r2, r1
 800804c:	4601      	mov	r1, r0
 800804e:	4802      	ldr	r0, [pc, #8]	; (8008058 <serialOutputCallback+0x10>)
 8008050:	f005 feb8 	bl	800ddc4 <HAL_UART_Transmit_IT>
}
 8008054:	bd08      	pop	{r3, pc}
 8008056:	bf00      	nop
 8008058:	200182c4 	.word	0x200182c4

0800805c <MX_LPUART1_UART_Init>:
{
 800805c:	b508      	push	{r3, lr}
  hlpuart1.Instance = LPUART1;
 800805e:	4820      	ldr	r0, [pc, #128]	; (80080e0 <MX_LPUART1_UART_Init+0x84>)
 8008060:	4b20      	ldr	r3, [pc, #128]	; (80080e4 <MX_LPUART1_UART_Init+0x88>)
 8008062:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 8008064:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008068:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800806a:	2300      	movs	r3, #0
 800806c:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800806e:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8008070:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8008072:	220c      	movs	r2, #12
 8008074:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008076:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008078:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800807a:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800807c:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800807e:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8008080:	f006 fd27 	bl	800ead2 <HAL_UART_Init>
 8008084:	bb00      	cbnz	r0, 80080c8 <MX_LPUART1_UART_Init+0x6c>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008086:	2100      	movs	r1, #0
 8008088:	4815      	ldr	r0, [pc, #84]	; (80080e0 <MX_LPUART1_UART_Init+0x84>)
 800808a:	f006 fe43 	bl	800ed14 <HAL_UARTEx_SetTxFifoThreshold>
 800808e:	b9f0      	cbnz	r0, 80080ce <MX_LPUART1_UART_Init+0x72>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008090:	2100      	movs	r1, #0
 8008092:	4813      	ldr	r0, [pc, #76]	; (80080e0 <MX_LPUART1_UART_Init+0x84>)
 8008094:	f006 fe63 	bl	800ed5e <HAL_UARTEx_SetRxFifoThreshold>
 8008098:	b9e0      	cbnz	r0, 80080d4 <MX_LPUART1_UART_Init+0x78>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800809a:	4811      	ldr	r0, [pc, #68]	; (80080e0 <MX_LPUART1_UART_Init+0x84>)
 800809c:	f006 fe1b 	bl	800ecd6 <HAL_UARTEx_DisableFifoMode>
 80080a0:	b9d8      	cbnz	r0, 80080da <MX_LPUART1_UART_Init+0x7e>
  serialOutputInit(serialOutputCallback, serialOutputOveflowCallback, 4096, 2048);
 80080a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80080aa:	490f      	ldr	r1, [pc, #60]	; (80080e8 <MX_LPUART1_UART_Init+0x8c>)
 80080ac:	480f      	ldr	r0, [pc, #60]	; (80080ec <MX_LPUART1_UART_Init+0x90>)
 80080ae:	f7ff fd3f 	bl	8007b30 <serialOutputInit>
  serialInputInit(serialInputInitCallback, 2048);
 80080b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080b6:	480e      	ldr	r0, [pc, #56]	; (80080f0 <MX_LPUART1_UART_Init+0x94>)
 80080b8:	f7ff fd0c 	bl	8007ad4 <serialInputInit>
  HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 1);
 80080bc:	2201      	movs	r2, #1
 80080be:	490d      	ldr	r1, [pc, #52]	; (80080f4 <MX_LPUART1_UART_Init+0x98>)
 80080c0:	4807      	ldr	r0, [pc, #28]	; (80080e0 <MX_LPUART1_UART_Init+0x84>)
 80080c2:	f006 fdb5 	bl	800ec30 <HAL_UART_Receive_IT>
}
 80080c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80080c8:	f7ff f90a 	bl	80072e0 <Error_Handler>
 80080cc:	e7db      	b.n	8008086 <MX_LPUART1_UART_Init+0x2a>
    Error_Handler();
 80080ce:	f7ff f907 	bl	80072e0 <Error_Handler>
 80080d2:	e7dd      	b.n	8008090 <MX_LPUART1_UART_Init+0x34>
    Error_Handler();
 80080d4:	f7ff f904 	bl	80072e0 <Error_Handler>
 80080d8:	e7df      	b.n	800809a <MX_LPUART1_UART_Init+0x3e>
    Error_Handler();
 80080da:	f7ff f901 	bl	80072e0 <Error_Handler>
 80080de:	e7e0      	b.n	80080a2 <MX_LPUART1_UART_Init+0x46>
 80080e0:	200182c4 	.word	0x200182c4
 80080e4:	40008000 	.word	0x40008000
 80080e8:	08008045 	.word	0x08008045
 80080ec:	08008049 	.word	0x08008049
 80080f0:	08008047 	.word	0x08008047
 80080f4:	2000182c 	.word	0x2000182c

080080f8 <MX_USART1_UART_Init>:
{
 80080f8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80080fa:	4817      	ldr	r0, [pc, #92]	; (8008158 <MX_USART1_UART_Init+0x60>)
 80080fc:	4b17      	ldr	r3, [pc, #92]	; (800815c <MX_USART1_UART_Init+0x64>)
 80080fe:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8008100:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8008104:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008106:	2300      	movs	r3, #0
 8008108:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800810a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800810c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800810e:	220c      	movs	r2, #12
 8008110:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008112:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008114:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008116:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008118:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800811a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800811c:	f006 fcd9 	bl	800ead2 <HAL_UART_Init>
 8008120:	b970      	cbnz	r0, 8008140 <MX_USART1_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008122:	2100      	movs	r1, #0
 8008124:	480c      	ldr	r0, [pc, #48]	; (8008158 <MX_USART1_UART_Init+0x60>)
 8008126:	f006 fdf5 	bl	800ed14 <HAL_UARTEx_SetTxFifoThreshold>
 800812a:	b960      	cbnz	r0, 8008146 <MX_USART1_UART_Init+0x4e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800812c:	2100      	movs	r1, #0
 800812e:	480a      	ldr	r0, [pc, #40]	; (8008158 <MX_USART1_UART_Init+0x60>)
 8008130:	f006 fe15 	bl	800ed5e <HAL_UARTEx_SetRxFifoThreshold>
 8008134:	b950      	cbnz	r0, 800814c <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008136:	4808      	ldr	r0, [pc, #32]	; (8008158 <MX_USART1_UART_Init+0x60>)
 8008138:	f006 fdcd 	bl	800ecd6 <HAL_UARTEx_DisableFifoMode>
 800813c:	b948      	cbnz	r0, 8008152 <MX_USART1_UART_Init+0x5a>
}
 800813e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008140:	f7ff f8ce 	bl	80072e0 <Error_Handler>
 8008144:	e7ed      	b.n	8008122 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8008146:	f7ff f8cb 	bl	80072e0 <Error_Handler>
 800814a:	e7ef      	b.n	800812c <MX_USART1_UART_Init+0x34>
    Error_Handler();
 800814c:	f7ff f8c8 	bl	80072e0 <Error_Handler>
 8008150:	e7f1      	b.n	8008136 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8008152:	f7ff f8c5 	bl	80072e0 <Error_Handler>
}
 8008156:	e7f2      	b.n	800813e <MX_USART1_UART_Init+0x46>
 8008158:	20018474 	.word	0x20018474
 800815c:	40013800 	.word	0x40013800

08008160 <MX_USART2_UART_Init>:
{
 8008160:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8008162:	4817      	ldr	r0, [pc, #92]	; (80081c0 <MX_USART2_UART_Init+0x60>)
 8008164:	4b17      	ldr	r3, [pc, #92]	; (80081c4 <MX_USART2_UART_Init+0x64>)
 8008166:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8008168:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800816c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800816e:	2300      	movs	r3, #0
 8008170:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008172:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008174:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008176:	220c      	movs	r2, #12
 8008178:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800817a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800817c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800817e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008180:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008182:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008184:	f006 fca5 	bl	800ead2 <HAL_UART_Init>
 8008188:	b970      	cbnz	r0, 80081a8 <MX_USART2_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800818a:	2100      	movs	r1, #0
 800818c:	480c      	ldr	r0, [pc, #48]	; (80081c0 <MX_USART2_UART_Init+0x60>)
 800818e:	f006 fdc1 	bl	800ed14 <HAL_UARTEx_SetTxFifoThreshold>
 8008192:	b960      	cbnz	r0, 80081ae <MX_USART2_UART_Init+0x4e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008194:	2100      	movs	r1, #0
 8008196:	480a      	ldr	r0, [pc, #40]	; (80081c0 <MX_USART2_UART_Init+0x60>)
 8008198:	f006 fde1 	bl	800ed5e <HAL_UARTEx_SetRxFifoThreshold>
 800819c:	b950      	cbnz	r0, 80081b4 <MX_USART2_UART_Init+0x54>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800819e:	4808      	ldr	r0, [pc, #32]	; (80081c0 <MX_USART2_UART_Init+0x60>)
 80081a0:	f006 fd99 	bl	800ecd6 <HAL_UARTEx_DisableFifoMode>
 80081a4:	b948      	cbnz	r0, 80081ba <MX_USART2_UART_Init+0x5a>
}
 80081a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80081a8:	f7ff f89a 	bl	80072e0 <Error_Handler>
 80081ac:	e7ed      	b.n	800818a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80081ae:	f7ff f897 	bl	80072e0 <Error_Handler>
 80081b2:	e7ef      	b.n	8008194 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80081b4:	f7ff f894 	bl	80072e0 <Error_Handler>
 80081b8:	e7f1      	b.n	800819e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80081ba:	f7ff f891 	bl	80072e0 <Error_Handler>
}
 80081be:	e7f2      	b.n	80081a6 <MX_USART2_UART_Init+0x46>
 80081c0:	20018504 	.word	0x20018504
 80081c4:	40004400 	.word	0x40004400

080081c8 <MX_USART3_UART_Init>:
{
 80081c8:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80081ca:	480f      	ldr	r0, [pc, #60]	; (8008208 <MX_USART3_UART_Init+0x40>)
 80081cc:	4b0f      	ldr	r3, [pc, #60]	; (800820c <MX_USART3_UART_Init+0x44>)
 80081ce:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80081d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80081d4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80081d6:	2300      	movs	r3, #0
 80081d8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80081da:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80081dc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80081de:	220c      	movs	r2, #12
 80081e0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081e2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80081e4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80081e6:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80081e8:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80081ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80081ec:	f006 fc71 	bl	800ead2 <HAL_UART_Init>
 80081f0:	b920      	cbnz	r0, 80081fc <MX_USART3_UART_Init+0x34>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <MX_USART3_UART_Init+0x40>)
 80081f4:	f006 fd6f 	bl	800ecd6 <HAL_UARTEx_DisableFifoMode>
 80081f8:	b918      	cbnz	r0, 8008202 <MX_USART3_UART_Init+0x3a>
}
 80081fa:	bd08      	pop	{r3, pc}
    Error_Handler();
 80081fc:	f7ff f870 	bl	80072e0 <Error_Handler>
 8008200:	e7f7      	b.n	80081f2 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8008202:	f7ff f86d 	bl	80072e0 <Error_Handler>
}
 8008206:	e7f8      	b.n	80081fa <MX_USART3_UART_Init+0x32>
 8008208:	20018234 	.word	0x20018234
 800820c:	40004800 	.word	0x40004800

08008210 <HAL_UART_MspInit>:
{
 8008210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	b0b2      	sub	sp, #200	; 0xc8
 8008216:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008218:	2100      	movs	r1, #0
 800821a:	912d      	str	r1, [sp, #180]	; 0xb4
 800821c:	912e      	str	r1, [sp, #184]	; 0xb8
 800821e:	912f      	str	r1, [sp, #188]	; 0xbc
 8008220:	9130      	str	r1, [sp, #192]	; 0xc0
 8008222:	9131      	str	r1, [sp, #196]	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008224:	2294      	movs	r2, #148	; 0x94
 8008226:	a808      	add	r0, sp, #32
 8008228:	f00c f886 	bl	8014338 <memset>
  if(uartHandle->Instance==LPUART1)
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	4a91      	ldr	r2, [pc, #580]	; (8008474 <HAL_UART_MspInit+0x264>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00d      	beq.n	8008250 <HAL_UART_MspInit+0x40>
  else if(uartHandle->Instance==USART1)
 8008234:	4a90      	ldr	r2, [pc, #576]	; (8008478 <HAL_UART_MspInit+0x268>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d042      	beq.n	80082c0 <HAL_UART_MspInit+0xb0>
  else if(uartHandle->Instance==USART2)
 800823a:	4a90      	ldr	r2, [pc, #576]	; (800847c <HAL_UART_MspInit+0x26c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	f000 80a6 	beq.w	800838e <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART3)
 8008242:	4a8f      	ldr	r2, [pc, #572]	; (8008480 <HAL_UART_MspInit+0x270>)
 8008244:	4293      	cmp	r3, r2
 8008246:	f000 8133 	beq.w	80084b0 <HAL_UART_MspInit+0x2a0>
}
 800824a:	b032      	add	sp, #200	; 0xc8
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8008250:	2320      	movs	r3, #32
 8008252:	9308      	str	r3, [sp, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008254:	2300      	movs	r3, #0
 8008256:	931c      	str	r3, [sp, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008258:	a808      	add	r0, sp, #32
 800825a:	f002 ff79 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 800825e:	bb60      	cbnz	r0, 80082ba <HAL_UART_MspInit+0xaa>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8008260:	4b88      	ldr	r3, [pc, #544]	; (8008484 <HAL_UART_MspInit+0x274>)
 8008262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008264:	f042 0201 	orr.w	r2, r2, #1
 8008268:	65da      	str	r2, [r3, #92]	; 0x5c
 800826a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800826c:	f002 0201 	and.w	r2, r2, #1
 8008270:	9200      	str	r2, [sp, #0]
 8008272:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800827a:	64da      	str	r2, [r3, #76]	; 0x4c
 800827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8008286:	f001 ffeb 	bl	800a260 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800828a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800828e:	932d      	str	r3, [sp, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008290:	2302      	movs	r3, #2
 8008292:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008294:	2301      	movs	r3, #1
 8008296:	932f      	str	r3, [sp, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008298:	2303      	movs	r3, #3
 800829a:	9330      	str	r3, [sp, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800829c:	2308      	movs	r3, #8
 800829e:	9331      	str	r3, [sp, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082a0:	a92d      	add	r1, sp, #180	; 0xb4
 80082a2:	4879      	ldr	r0, [pc, #484]	; (8008488 <HAL_UART_MspInit+0x278>)
 80082a4:	f000 fd62 	bl	8008d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 4);
 80082a8:	2204      	movs	r2, #4
 80082aa:	2105      	movs	r1, #5
 80082ac:	2046      	movs	r0, #70	; 0x46
 80082ae:	f000 fa23 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80082b2:	2046      	movs	r0, #70	; 0x46
 80082b4:	f000 fa54 	bl	8008760 <HAL_NVIC_EnableIRQ>
 80082b8:	e7c7      	b.n	800824a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80082ba:	f7ff f811 	bl	80072e0 <Error_Handler>
 80082be:	e7cf      	b.n	8008260 <HAL_UART_MspInit+0x50>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80082c0:	2301      	movs	r3, #1
 80082c2:	9308      	str	r3, [sp, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80082c4:	2300      	movs	r3, #0
 80082c6:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082c8:	a808      	add	r0, sp, #32
 80082ca:	f002 ff41 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d154      	bne.n	800837c <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80082d2:	4b6c      	ldr	r3, [pc, #432]	; (8008484 <HAL_UART_MspInit+0x274>)
 80082d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082da:	661a      	str	r2, [r3, #96]	; 0x60
 80082dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80082e2:	9202      	str	r2, [sp, #8]
 80082e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80082e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80082ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	9303      	str	r3, [sp, #12]
 80082f6:	9b03      	ldr	r3, [sp, #12]
    HAL_PWREx_EnableVddIO2();
 80082f8:	f001 ffb2 	bl	800a260 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80082fc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008300:	932d      	str	r3, [sp, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008302:	2302      	movs	r3, #2
 8008304:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008306:	2500      	movs	r5, #0
 8008308:	952f      	str	r5, [sp, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800830a:	2303      	movs	r3, #3
 800830c:	9330      	str	r3, [sp, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800830e:	2307      	movs	r3, #7
 8008310:	9331      	str	r3, [sp, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008312:	a92d      	add	r1, sp, #180	; 0xb4
 8008314:	485c      	ldr	r0, [pc, #368]	; (8008488 <HAL_UART_MspInit+0x278>)
 8008316:	f000 fd29 	bl	8008d6c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Channel4;
 800831a:	485c      	ldr	r0, [pc, #368]	; (800848c <HAL_UART_MspInit+0x27c>)
 800831c:	4b5c      	ldr	r3, [pc, #368]	; (8008490 <HAL_UART_MspInit+0x280>)
 800831e:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008320:	2318      	movs	r3, #24
 8008322:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008324:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008326:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800832c:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800832e:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008330:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008332:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008334:	f000 fbda 	bl	8008aec <HAL_DMA_Init>
 8008338:	bb18      	cbnz	r0, 8008382 <HAL_UART_MspInit+0x172>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800833a:	4b54      	ldr	r3, [pc, #336]	; (800848c <HAL_UART_MspInit+0x27c>)
 800833c:	67e3      	str	r3, [r4, #124]	; 0x7c
 800833e:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA2_Channel5;
 8008340:	4854      	ldr	r0, [pc, #336]	; (8008494 <HAL_UART_MspInit+0x284>)
 8008342:	4b55      	ldr	r3, [pc, #340]	; (8008498 <HAL_UART_MspInit+0x288>)
 8008344:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8008346:	2319      	movs	r3, #25
 8008348:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800834a:	2310      	movs	r3, #16
 800834c:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800834e:	2300      	movs	r3, #0
 8008350:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008356:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008358:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800835a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800835c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800835e:	f000 fbc5 	bl	8008aec <HAL_DMA_Init>
 8008362:	b988      	cbnz	r0, 8008388 <HAL_UART_MspInit+0x178>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008364:	4b4b      	ldr	r3, [pc, #300]	; (8008494 <HAL_UART_MspInit+0x284>)
 8008366:	67a3      	str	r3, [r4, #120]	; 0x78
 8008368:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 3);
 800836a:	2203      	movs	r2, #3
 800836c:	2105      	movs	r1, #5
 800836e:	2025      	movs	r0, #37	; 0x25
 8008370:	f000 f9c2 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008374:	2025      	movs	r0, #37	; 0x25
 8008376:	f000 f9f3 	bl	8008760 <HAL_NVIC_EnableIRQ>
 800837a:	e766      	b.n	800824a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 800837c:	f7fe ffb0 	bl	80072e0 <Error_Handler>
 8008380:	e7a7      	b.n	80082d2 <HAL_UART_MspInit+0xc2>
      Error_Handler();
 8008382:	f7fe ffad 	bl	80072e0 <Error_Handler>
 8008386:	e7d8      	b.n	800833a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8008388:	f7fe ffaa 	bl	80072e0 <Error_Handler>
 800838c:	e7ea      	b.n	8008364 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800838e:	2302      	movs	r3, #2
 8008390:	9308      	str	r3, [sp, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008392:	2300      	movs	r3, #0
 8008394:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008396:	a808      	add	r0, sp, #32
 8008398:	f002 feda 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 800839c:	2800      	cmp	r0, #0
 800839e:	d160      	bne.n	8008462 <HAL_UART_MspInit+0x252>
    __HAL_RCC_USART2_CLK_ENABLE();
 80083a0:	4b38      	ldr	r3, [pc, #224]	; (8008484 <HAL_UART_MspInit+0x274>)
 80083a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80083a8:	659a      	str	r2, [r3, #88]	; 0x58
 80083aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80083b0:	9204      	str	r2, [sp, #16]
 80083b2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80083b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083b6:	f042 0208 	orr.w	r2, r2, #8
 80083ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	f003 0308 	and.w	r3, r3, #8
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80083c6:	2320      	movs	r3, #32
 80083c8:	932d      	str	r3, [sp, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ca:	2502      	movs	r5, #2
 80083cc:	952e      	str	r5, [sp, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083ce:	2301      	movs	r3, #1
 80083d0:	932f      	str	r3, [sp, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083d2:	f04f 0803 	mov.w	r8, #3
 80083d6:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083da:	2707      	movs	r7, #7
 80083dc:	9731      	str	r7, [sp, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083de:	4e2f      	ldr	r6, [pc, #188]	; (800849c <HAL_UART_MspInit+0x28c>)
 80083e0:	a92d      	add	r1, sp, #180	; 0xb4
 80083e2:	4630      	mov	r0, r6
 80083e4:	f000 fcc2 	bl	8008d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80083e8:	2340      	movs	r3, #64	; 0x40
 80083ea:	932d      	str	r3, [sp, #180]	; 0xb4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ec:	952e      	str	r5, [sp, #184]	; 0xb8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ee:	2500      	movs	r5, #0
 80083f0:	952f      	str	r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083f2:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083f6:	9731      	str	r7, [sp, #196]	; 0xc4
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083f8:	a92d      	add	r1, sp, #180	; 0xb4
 80083fa:	4630      	mov	r0, r6
 80083fc:	f000 fcb6 	bl	8008d6c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel6;
 8008400:	4827      	ldr	r0, [pc, #156]	; (80084a0 <HAL_UART_MspInit+0x290>)
 8008402:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <HAL_UART_MspInit+0x294>)
 8008404:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008406:	231a      	movs	r3, #26
 8008408:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800840a:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800840c:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800840e:	2380      	movs	r3, #128	; 0x80
 8008410:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008412:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008414:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008416:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008418:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800841a:	f000 fb67 	bl	8008aec <HAL_DMA_Init>
 800841e:	bb18      	cbnz	r0, 8008468 <HAL_UART_MspInit+0x258>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008420:	4b1f      	ldr	r3, [pc, #124]	; (80084a0 <HAL_UART_MspInit+0x290>)
 8008422:	67e3      	str	r3, [r4, #124]	; 0x7c
 8008424:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA2_Channel7;
 8008426:	4820      	ldr	r0, [pc, #128]	; (80084a8 <HAL_UART_MspInit+0x298>)
 8008428:	4b20      	ldr	r3, [pc, #128]	; (80084ac <HAL_UART_MspInit+0x29c>)
 800842a:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800842c:	231b      	movs	r3, #27
 800842e:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008430:	2310      	movs	r3, #16
 8008432:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008434:	2300      	movs	r3, #0
 8008436:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008438:	2280      	movs	r2, #128	; 0x80
 800843a:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800843c:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800843e:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008440:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008442:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008444:	f000 fb52 	bl	8008aec <HAL_DMA_Init>
 8008448:	b988      	cbnz	r0, 800846e <HAL_UART_MspInit+0x25e>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800844a:	4b17      	ldr	r3, [pc, #92]	; (80084a8 <HAL_UART_MspInit+0x298>)
 800844c:	67a3      	str	r3, [r4, #120]	; 0x78
 800844e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 2);
 8008450:	2202      	movs	r2, #2
 8008452:	2105      	movs	r1, #5
 8008454:	2026      	movs	r0, #38	; 0x26
 8008456:	f000 f94f 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800845a:	2026      	movs	r0, #38	; 0x26
 800845c:	f000 f980 	bl	8008760 <HAL_NVIC_EnableIRQ>
 8008460:	e6f3      	b.n	800824a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8008462:	f7fe ff3d 	bl	80072e0 <Error_Handler>
 8008466:	e79b      	b.n	80083a0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8008468:	f7fe ff3a 	bl	80072e0 <Error_Handler>
 800846c:	e7d8      	b.n	8008420 <HAL_UART_MspInit+0x210>
      Error_Handler();
 800846e:	f7fe ff37 	bl	80072e0 <Error_Handler>
 8008472:	e7ea      	b.n	800844a <HAL_UART_MspInit+0x23a>
 8008474:	40008000 	.word	0x40008000
 8008478:	40013800 	.word	0x40013800
 800847c:	40004400 	.word	0x40004400
 8008480:	40004800 	.word	0x40004800
 8008484:	40021000 	.word	0x40021000
 8008488:	48001800 	.word	0x48001800
 800848c:	200183b4 	.word	0x200183b4
 8008490:	40020444 	.word	0x40020444
 8008494:	20018354 	.word	0x20018354
 8008498:	40020458 	.word	0x40020458
 800849c:	48000c00 	.word	0x48000c00
 80084a0:	200181d4 	.word	0x200181d4
 80084a4:	4002046c 	.word	0x4002046c
 80084a8:	20018414 	.word	0x20018414
 80084ac:	40020480 	.word	0x40020480
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80084b0:	2304      	movs	r3, #4
 80084b2:	9308      	str	r3, [sp, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80084b4:	2300      	movs	r3, #0
 80084b6:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084b8:	a808      	add	r0, sp, #32
 80084ba:	f002 fe49 	bl	800b150 <HAL_RCCEx_PeriphCLKConfig>
 80084be:	bb50      	cbnz	r0, 8008516 <HAL_UART_MspInit+0x306>
    __HAL_RCC_USART3_CLK_ENABLE();
 80084c0:	4b16      	ldr	r3, [pc, #88]	; (800851c <HAL_UART_MspInit+0x30c>)
 80084c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80084c8:	659a      	str	r2, [r3, #88]	; 0x58
 80084ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084cc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80084d0:	9206      	str	r2, [sp, #24]
 80084d2:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d6:	f042 0208 	orr.w	r2, r2, #8
 80084da:	64da      	str	r2, [r3, #76]	; 0x4c
 80084dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	9307      	str	r3, [sp, #28]
 80084e4:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80084e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80084ea:	932d      	str	r3, [sp, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ec:	2302      	movs	r3, #2
 80084ee:	932e      	str	r3, [sp, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f0:	2400      	movs	r4, #0
 80084f2:	942f      	str	r4, [sp, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084f4:	2303      	movs	r3, #3
 80084f6:	9330      	str	r3, [sp, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80084f8:	2307      	movs	r3, #7
 80084fa:	9331      	str	r3, [sp, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084fc:	a92d      	add	r1, sp, #180	; 0xb4
 80084fe:	4808      	ldr	r0, [pc, #32]	; (8008520 <HAL_UART_MspInit+0x310>)
 8008500:	f000 fc34 	bl	8008d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8008504:	4622      	mov	r2, r4
 8008506:	2101      	movs	r1, #1
 8008508:	2027      	movs	r0, #39	; 0x27
 800850a:	f000 f8f5 	bl	80086f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800850e:	2027      	movs	r0, #39	; 0x27
 8008510:	f000 f926 	bl	8008760 <HAL_NVIC_EnableIRQ>
}
 8008514:	e699      	b.n	800824a <HAL_UART_MspInit+0x3a>
      Error_Handler();
 8008516:	f7fe fee3 	bl	80072e0 <Error_Handler>
 800851a:	e7d1      	b.n	80084c0 <HAL_UART_MspInit+0x2b0>
 800851c:	40021000 	.word	0x40021000
 8008520:	48000c00 	.word	0x48000c00

08008524 <RxConsoleHandler>:

void TxConsoleHandler() {
	// Do nothing, STM HAL will do all for you
}

void RxConsoleHandler(uint8_t* buffer, uint32_t length) {
 8008524:	b508      	push	{r3, lr}
	serialInputProcessInterrupt(buffer, length);
 8008526:	f7ff fadf 	bl	8007ae8 <serialInputProcessInterrupt>
}
 800852a:	bd08      	pop	{r3, pc}

0800852c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800852c:	b508      	push	{r3, lr}
	if(huart->Instance == LPUART1) {
 800852e:	6803      	ldr	r3, [r0, #0]
 8008530:	4a05      	ldr	r2, [pc, #20]	; (8008548 <HAL_UART_TxCpltCallback+0x1c>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <HAL_UART_TxCpltCallback+0x12>
		TxConsoleHandler();
	} else if(huart->Instance == USART2) {
 8008536:	f5a2 5270 	sub.w	r2, r2, #15360	; 0x3c00
 800853a:	4293      	cmp	r3, r2
 800853c:	d000      	beq.n	8008540 <HAL_UART_TxCpltCallback+0x14>
		HCITxInterruptHandler();
	}
}
 800853e:	bd08      	pop	{r3, pc}
		HCITxInterruptHandler();
 8008540:	f7f9 fc5e 	bl	8001e00 <HCITxInterruptHandler>
}
 8008544:	e7fb      	b.n	800853e <HAL_UART_TxCpltCallback+0x12>
 8008546:	bf00      	nop
 8008548:	40008000 	.word	0x40008000

0800854c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800854c:	b510      	push	{r4, lr}
	if(huart->Instance == LPUART1) {
 800854e:	6803      	ldr	r3, [r0, #0]
 8008550:	4a0a      	ldr	r2, [pc, #40]	; (800857c <HAL_UART_RxCpltCallback+0x30>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d003      	beq.n	800855e <HAL_UART_RxCpltCallback+0x12>
		HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 1);
		RxConsoleHandler(huart->pRxBuffPtr, huart->RxXferSize);
	} else if(huart->Instance == USART2) {
 8008556:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <HAL_UART_RxCpltCallback+0x34>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00c      	beq.n	8008576 <HAL_UART_RxCpltCallback+0x2a>
		HCIRxInterruptHandler();
	}
}
 800855c:	bd10      	pop	{r4, pc}
 800855e:	4604      	mov	r4, r0
		HAL_UART_Receive_IT(&hlpuart1, rxBuffer, 1);
 8008560:	2201      	movs	r2, #1
 8008562:	4908      	ldr	r1, [pc, #32]	; (8008584 <HAL_UART_RxCpltCallback+0x38>)
 8008564:	4808      	ldr	r0, [pc, #32]	; (8008588 <HAL_UART_RxCpltCallback+0x3c>)
 8008566:	f006 fb63 	bl	800ec30 <HAL_UART_Receive_IT>
		RxConsoleHandler(huart->pRxBuffPtr, huart->RxXferSize);
 800856a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800856e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008570:	f7ff ffd8 	bl	8008524 <RxConsoleHandler>
 8008574:	e7f2      	b.n	800855c <HAL_UART_RxCpltCallback+0x10>
		HCIRxInterruptHandler();
 8008576:	f7f9 fc47 	bl	8001e08 <HCIRxInterruptHandler>
}
 800857a:	e7ef      	b.n	800855c <HAL_UART_RxCpltCallback+0x10>
 800857c:	40008000 	.word	0x40008000
 8008580:	40004400 	.word	0x40004400
 8008584:	2000182c 	.word	0x2000182c
 8008588:	200182c4 	.word	0x200182c4

0800858c <runFifoTest1>:

#include "tests/fifoTests.h"
#include "fifo.h"
#include "_ansi.h"

void runFifoTest1() {
 800858c:	b510      	push	{r4, lr}
 800858e:	b09e      	sub	sp, #120	; 0x78
	char* testString = "0123456789";
	char expectedString[10];

	FifoContext context;
	fifoInit(&context, 10, FIFO_TYPE_NO_ISR);
 8008590:	2202      	movs	r2, #2
 8008592:	210a      	movs	r1, #10
 8008594:	4668      	mov	r0, sp
 8008596:	f7fe faab 	bl	8006af0 <fifoInit>

	for(uint32_t i = 0; i < 5; i++) {
 800859a:	2400      	movs	r4, #0
 800859c:	2c04      	cmp	r4, #4
 800859e:	d806      	bhi.n	80085ae <runFifoTest1+0x22>
		fifoPush(&context, (uint8_t)testString[i]);
 80085a0:	4b1a      	ldr	r3, [pc, #104]	; (800860c <runFifoTest1+0x80>)
 80085a2:	5d19      	ldrb	r1, [r3, r4]
 80085a4:	4668      	mov	r0, sp
 80085a6:	f7fe fac0 	bl	8006b2a <fifoPush>
	for(uint32_t i = 0; i < 5; i++) {
 80085aa:	3401      	adds	r4, #1
 80085ac:	e7f6      	b.n	800859c <runFifoTest1+0x10>
	}

	for(uint32_t i = 5; i < 7; i++) {
 80085ae:	2405      	movs	r4, #5
 80085b0:	e005      	b.n	80085be <runFifoTest1+0x32>
		fifoPush(&context, (uint8_t)testString[i]);
 80085b2:	4b16      	ldr	r3, [pc, #88]	; (800860c <runFifoTest1+0x80>)
 80085b4:	5d19      	ldrb	r1, [r3, r4]
 80085b6:	4668      	mov	r0, sp
 80085b8:	f7fe fab7 	bl	8006b2a <fifoPush>
	for(uint32_t i = 5; i < 7; i++) {
 80085bc:	3401      	adds	r4, #1
 80085be:	2c06      	cmp	r4, #6
 80085c0:	d9f7      	bls.n	80085b2 <runFifoTest1+0x26>
	}

	for(uint32_t i = 0; i < 2; i++) {
 80085c2:	2400      	movs	r4, #0
 80085c4:	e005      	b.n	80085d2 <runFifoTest1+0x46>
		fifoPull(&context, (uint8_t*)(&expectedString[i]));
 80085c6:	ab1b      	add	r3, sp, #108	; 0x6c
 80085c8:	1919      	adds	r1, r3, r4
 80085ca:	4668      	mov	r0, sp
 80085cc:	f7fe fae0 	bl	8006b90 <fifoPull>
	for(uint32_t i = 0; i < 2; i++) {
 80085d0:	3401      	adds	r4, #1
 80085d2:	2c01      	cmp	r4, #1
 80085d4:	d9f7      	bls.n	80085c6 <runFifoTest1+0x3a>
	}

	for(uint32_t i = 7; i < 10; i++) {
 80085d6:	2407      	movs	r4, #7
 80085d8:	e005      	b.n	80085e6 <runFifoTest1+0x5a>
		fifoPush(&context, (uint8_t)testString[i]);
 80085da:	4b0c      	ldr	r3, [pc, #48]	; (800860c <runFifoTest1+0x80>)
 80085dc:	5d19      	ldrb	r1, [r3, r4]
 80085de:	4668      	mov	r0, sp
 80085e0:	f7fe faa3 	bl	8006b2a <fifoPush>
	for(uint32_t i = 7; i < 10; i++) {
 80085e4:	3401      	adds	r4, #1
 80085e6:	2c09      	cmp	r4, #9
 80085e8:	d9f7      	bls.n	80085da <runFifoTest1+0x4e>
	}

	for(uint32_t i = 2; i < 10; i++) {
 80085ea:	2402      	movs	r4, #2
 80085ec:	e005      	b.n	80085fa <runFifoTest1+0x6e>
		fifoPull(&context, (uint8_t*)(&expectedString[i]));
 80085ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80085f0:	1919      	adds	r1, r3, r4
 80085f2:	4668      	mov	r0, sp
 80085f4:	f7fe facc 	bl	8006b90 <fifoPull>
	for(uint32_t i = 2; i < 10; i++) {
 80085f8:	3401      	adds	r4, #1
 80085fa:	2c09      	cmp	r4, #9
 80085fc:	d9f7      	bls.n	80085ee <runFifoTest1+0x62>
	}

	for(uint32_t i = 0; i < 10; i++) {
 80085fe:	2300      	movs	r3, #0
 8008600:	2b09      	cmp	r3, #9
 8008602:	d801      	bhi.n	8008608 <runFifoTest1+0x7c>
 8008604:	3301      	adds	r3, #1
 8008606:	e7fb      	b.n	8008600 <runFifoTest1+0x74>
		//assert(testString[i] == expectedString[i]);
	}

}
 8008608:	b01e      	add	sp, #120	; 0x78
 800860a:	bd10      	pop	{r4, pc}
 800860c:	0802f46c 	.word	0x0802f46c

08008610 <testAll>:
 */

#include "tests/tests.h"
#include "tests/fifoTests.h"

void testAll() {
 8008610:	b508      	push	{r3, lr}
	runFifoTest1();
 8008612:	f7ff ffbb 	bl	800858c <runFifoTest1>
}
 8008616:	bd08      	pop	{r3, pc}

08008618 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8008618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008650 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800861c:	f7ff fcf0 	bl	8008000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008620:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008622:	e003      	b.n	800862c <LoopCopyDataInit>

08008624 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008624:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008626:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008628:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800862a:	3104      	adds	r1, #4

0800862c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800862c:	480a      	ldr	r0, [pc, #40]	; (8008658 <LoopForever+0xa>)
	ldr	r3, =_edata
 800862e:	4b0b      	ldr	r3, [pc, #44]	; (800865c <LoopForever+0xe>)
	adds	r2, r0, r1
 8008630:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008632:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008634:	d3f6      	bcc.n	8008624 <CopyDataInit>
	ldr	r2, =_sbss
 8008636:	4a0a      	ldr	r2, [pc, #40]	; (8008660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008638:	e002      	b.n	8008640 <LoopFillZerobss>

0800863a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800863a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800863c:	f842 3b04 	str.w	r3, [r2], #4

08008640 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <LoopForever+0x16>)
	cmp	r2, r3
 8008642:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008644:	d3f9      	bcc.n	800863a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008646:	f00b fbdb 	bl	8013e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800864a:	f7fe fec3 	bl	80073d4 <main>

0800864e <LoopForever>:

LoopForever:
    b LoopForever
 800864e:	e7fe      	b.n	800864e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008650:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8008654:	08039840 	.word	0x08039840
	ldr	r0, =_sdata
 8008658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800865c:	20000a60 	.word	0x20000a60
	ldr	r2, =_sbss
 8008660:	20000a60 	.word	0x20000a60
	ldr	r3, = _ebss
 8008664:	20018e5c 	.word	0x20018e5c

08008668 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008668:	e7fe      	b.n	8008668 <ADC1_IRQHandler>

0800866a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800866a:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800866c:	2003      	movs	r0, #3
 800866e:	f000 f831 	bl	80086d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008672:	200f      	movs	r0, #15
 8008674:	f7ff fb54 	bl	8007d20 <HAL_InitTick>
 8008678:	b110      	cbz	r0, 8008680 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800867a:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800867c:	4620      	mov	r0, r4
 800867e:	bd10      	pop	{r4, pc}
 8008680:	4604      	mov	r4, r0
    HAL_MspInit();
 8008682:	f7ff fb2d 	bl	8007ce0 <HAL_MspInit>
 8008686:	e7f9      	b.n	800867c <HAL_Init+0x12>

08008688 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008688:	4b03      	ldr	r3, [pc, #12]	; (8008698 <HAL_IncTick+0x10>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4a03      	ldr	r2, [pc, #12]	; (800869c <HAL_IncTick+0x14>)
 800868e:	6811      	ldr	r1, [r2, #0]
 8008690:	440b      	add	r3, r1
 8008692:	6013      	str	r3, [r2, #0]
}
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	200000a0 	.word	0x200000a0
 800869c:	20018594 	.word	0x20018594

080086a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80086a0:	4b01      	ldr	r3, [pc, #4]	; (80086a8 <HAL_GetTick+0x8>)
 80086a2:	6818      	ldr	r0, [r3, #0]
}
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	20018594 	.word	0x20018594

080086ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80086b0:	f7ff fff6 	bl	80086a0 <HAL_GetTick>
 80086b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086b6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80086ba:	d002      	beq.n	80086c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80086bc:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <HAL_Delay+0x24>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80086c2:	f7ff ffed 	bl	80086a0 <HAL_GetTick>
 80086c6:	1b40      	subs	r0, r0, r5
 80086c8:	42a0      	cmp	r0, r4
 80086ca:	d3fa      	bcc.n	80086c2 <HAL_Delay+0x16>
  {
  }
}
 80086cc:	bd38      	pop	{r3, r4, r5, pc}
 80086ce:	bf00      	nop
 80086d0:	200000a0 	.word	0x200000a0

080086d4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086d4:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80086d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80086dc:	041b      	lsls	r3, r3, #16
 80086de:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80086e0:	0200      	lsls	r0, r0, #8
 80086e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80086e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80086e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80086ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80086f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80086f2:	4770      	bx	lr
 80086f4:	e000ed00 	.word	0xe000ed00

080086f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086f8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086fa:	4b17      	ldr	r3, [pc, #92]	; (8008758 <HAL_NVIC_SetPriority+0x60>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008702:	f1c3 0407 	rsb	r4, r3, #7
 8008706:	2c04      	cmp	r4, #4
 8008708:	bf28      	it	cs
 800870a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800870c:	1d1d      	adds	r5, r3, #4
 800870e:	2d06      	cmp	r5, #6
 8008710:	d918      	bls.n	8008744 <HAL_NVIC_SetPriority+0x4c>
 8008712:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008714:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008718:	fa05 f404 	lsl.w	r4, r5, r4
 800871c:	ea21 0104 	bic.w	r1, r1, r4
 8008720:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008722:	fa05 f303 	lsl.w	r3, r5, r3
 8008726:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800872a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800872c:	2800      	cmp	r0, #0
 800872e:	db0b      	blt.n	8008748 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008730:	0109      	lsls	r1, r1, #4
 8008732:	b2c9      	uxtb	r1, r1
 8008734:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008738:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800873c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008740:	bc30      	pop	{r4, r5}
 8008742:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008744:	2300      	movs	r3, #0
 8008746:	e7e5      	b.n	8008714 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008748:	f000 000f 	and.w	r0, r0, #15
 800874c:	0109      	lsls	r1, r1, #4
 800874e:	b2c9      	uxtb	r1, r1
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <HAL_NVIC_SetPriority+0x64>)
 8008752:	5419      	strb	r1, [r3, r0]
 8008754:	e7f4      	b.n	8008740 <HAL_NVIC_SetPriority+0x48>
 8008756:	bf00      	nop
 8008758:	e000ed00 	.word	0xe000ed00
 800875c:	e000ed14 	.word	0xe000ed14

08008760 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008760:	2800      	cmp	r0, #0
 8008762:	db07      	blt.n	8008774 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008764:	f000 021f 	and.w	r2, r0, #31
 8008768:	0940      	lsrs	r0, r0, #5
 800876a:	2301      	movs	r3, #1
 800876c:	4093      	lsls	r3, r2
 800876e:	4a02      	ldr	r2, [pc, #8]	; (8008778 <HAL_NVIC_EnableIRQ+0x18>)
 8008770:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	e000e100 	.word	0xe000e100

0800877c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800877c:	2800      	cmp	r0, #0
 800877e:	d038      	beq.n	80087f2 <HAL_CRC_Init+0x76>
{
 8008780:	b510      	push	{r4, lr}
 8008782:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008784:	7f43      	ldrb	r3, [r0, #29]
 8008786:	b31b      	cbz	r3, 80087d0 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008788:	2302      	movs	r3, #2
 800878a:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800878c:	7923      	ldrb	r3, [r4, #4]
 800878e:	bb1b      	cbnz	r3, 80087d8 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <HAL_CRC_Init+0x7c>)
 8008794:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	6893      	ldr	r3, [r2, #8]
 800879a:	f023 0318 	bic.w	r3, r3, #24
 800879e:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80087a0:	7963      	ldrb	r3, [r4, #5]
 80087a2:	bb13      	cbnz	r3, 80087ea <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	6893      	ldr	r3, [r2, #8]
 80087b0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80087b4:	6961      	ldr	r1, [r4, #20]
 80087b6:	430b      	orrs	r3, r1
 80087b8:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	6893      	ldr	r3, [r2, #8]
 80087be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087c2:	69a1      	ldr	r1, [r4, #24]
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80087c8:	2301      	movs	r3, #1
 80087ca:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80087cc:	2000      	movs	r0, #0
}
 80087ce:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80087d0:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80087d2:	f7fe f89b 	bl	800690c <HAL_CRC_MspInit>
 80087d6:	e7d7      	b.n	8008788 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80087d8:	68e2      	ldr	r2, [r4, #12]
 80087da:	68a1      	ldr	r1, [r4, #8]
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 f80d 	bl	80087fc <HAL_CRCEx_Polynomial_Set>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d0dc      	beq.n	80087a0 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7f1      	b.n	80087ce <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	6922      	ldr	r2, [r4, #16]
 80087ee:	611a      	str	r2, [r3, #16]
 80087f0:	e7dc      	b.n	80087ac <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 80087f2:	2001      	movs	r0, #1
}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	04c11db7 	.word	0x04c11db7

080087fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80087fc:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80087fe:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008800:	461c      	mov	r4, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b134      	cbz	r4, 8008814 <HAL_CRCEx_Polynomial_Set+0x18>
 8008806:	f003 041f 	and.w	r4, r3, #31
 800880a:	fa21 f404 	lsr.w	r4, r1, r4
 800880e:	f014 0f01 	tst.w	r4, #1
 8008812:	d0f5      	beq.n	8008800 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8008814:	2a18      	cmp	r2, #24
 8008816:	d824      	bhi.n	8008862 <HAL_CRCEx_Polynomial_Set+0x66>
 8008818:	e8df f002 	tbb	[pc, r2]
 800881c:	2323230f 	.word	0x2323230f
 8008820:	23232323 	.word	0x23232323
 8008824:	2323231f 	.word	0x2323231f
 8008828:	23232323 	.word	0x23232323
 800882c:	2323231b 	.word	0x2323231b
 8008830:	23232323 	.word	0x23232323
 8008834:	0d          	.byte	0x0d
 8008835:	00          	.byte	0x00
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008836:	2b06      	cmp	r3, #6
 8008838:	d815      	bhi.n	8008866 <HAL_CRCEx_Polynomial_Set+0x6a>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800883a:	6803      	ldr	r3, [r0, #0]
 800883c:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800883e:	6801      	ldr	r1, [r0, #0]
 8008840:	688b      	ldr	r3, [r1, #8]
 8008842:	f023 0318 	bic.w	r3, r3, #24
 8008846:	431a      	orrs	r2, r3
 8008848:	608a      	str	r2, [r1, #8]
 800884a:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 800884c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008850:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_8B)
 8008852:	2b07      	cmp	r3, #7
 8008854:	d9f1      	bls.n	800883a <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 8008856:	2001      	movs	r0, #1
 8008858:	e7f8      	b.n	800884c <HAL_CRCEx_Polynomial_Set+0x50>
      if (msb >= HAL_CRC_LENGTH_16B)
 800885a:	2b0f      	cmp	r3, #15
 800885c:	d9ed      	bls.n	800883a <HAL_CRCEx_Polynomial_Set+0x3e>
        status =   HAL_ERROR;
 800885e:	2001      	movs	r0, #1
 8008860:	e7f4      	b.n	800884c <HAL_CRCEx_Polynomial_Set+0x50>
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008862:	2001      	movs	r0, #1
 8008864:	e7f2      	b.n	800884c <HAL_CRCEx_Polynomial_Set+0x50>
        status =   HAL_ERROR;
 8008866:	2001      	movs	r0, #1
 8008868:	e7f0      	b.n	800884c <HAL_CRCEx_Polynomial_Set+0x50>

0800886a <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800886a:	b170      	cbz	r0, 800888a <HAL_DAC_Init+0x20>
{
 800886c:	b510      	push	{r4, lr}
 800886e:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008870:	7903      	ldrb	r3, [r0, #4]
 8008872:	b133      	cbz	r3, 8008882 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008874:	2302      	movs	r3, #2
 8008876:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008878:	2000      	movs	r0, #0
 800887a:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800887c:	2301      	movs	r3, #1
 800887e:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8008880:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8008882:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8008884:	f7fe f888 	bl	8006998 <HAL_DAC_MspInit>
 8008888:	e7f4      	b.n	8008874 <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 800888a:	2001      	movs	r0, #1
}
 800888c:	4770      	bx	lr

0800888e <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800888e:	4770      	bx	lr

08008890 <HAL_DAC_IRQHandler>:
{
 8008890:	b510      	push	{r4, lr}
 8008892:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008894:	6803      	ldr	r3, [r0, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800889c:	d003      	beq.n	80088a6 <HAL_DAC_IRQHandler+0x16>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800889e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088a0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80088a4:	d109      	bne.n	80088ba <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80088ae:	d003      	beq.n	80088b8 <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80088b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b2:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 80088b6:	d111      	bne.n	80088dc <HAL_DAC_IRQHandler+0x4c>
}
 80088b8:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80088ba:	2204      	movs	r2, #4
 80088bc:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80088be:	6902      	ldr	r2, [r0, #16]
 80088c0:	f042 0201 	orr.w	r2, r2, #1
 80088c4:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80088c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80088ca:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80088cc:	6802      	ldr	r2, [r0, #0]
 80088ce:	6813      	ldr	r3, [r2, #0]
 80088d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088d4:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80088d6:	f7ff ffda 	bl	800888e <HAL_DAC_DMAUnderrunCallbackCh1>
 80088da:	e7e4      	b.n	80088a6 <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 80088dc:	2204      	movs	r2, #4
 80088de:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80088e0:	6922      	ldr	r2, [r4, #16]
 80088e2:	f042 0202 	orr.w	r2, r2, #2
 80088e6:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80088e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80088ec:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	6813      	ldr	r3, [r2, #0]
 80088f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f6:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 f8b7 	bl	8008a6c <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 80088fe:	e7db      	b.n	80088b8 <HAL_DAC_IRQHandler+0x28>

08008900 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008902:	7943      	ldrb	r3, [r0, #5]
 8008904:	2b01      	cmp	r3, #1
 8008906:	f000 80ad 	beq.w	8008a64 <HAL_DAC_ConfigChannel+0x164>
 800890a:	4604      	mov	r4, r0
 800890c:	460e      	mov	r6, r1
 800890e:	4615      	mov	r5, r2
 8008910:	2301      	movs	r3, #1
 8008912:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008914:	2302      	movs	r3, #2
 8008916:	7103      	strb	r3, [r0, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008918:	684b      	ldr	r3, [r1, #4]
 800891a:	2b04      	cmp	r3, #4
 800891c:	d03c      	beq.n	8008998 <HAL_DAC_ConfigChannel+0x98>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800891e:	6973      	ldr	r3, [r6, #20]
 8008920:	2b01      	cmp	r3, #1
 8008922:	f000 8084 	beq.w	8008a2e <HAL_DAC_ConfigChannel+0x12e>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008926:	6821      	ldr	r1, [r4, #0]
 8008928:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800892a:	f005 0510 	and.w	r5, r5, #16
 800892e:	2207      	movs	r2, #7
 8008930:	40aa      	lsls	r2, r5
 8008932:	ea23 0202 	bic.w	r2, r3, r2
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8008936:	6873      	ldr	r3, [r6, #4]
 8008938:	68f0      	ldr	r0, [r6, #12]
 800893a:	4303      	orrs	r3, r0
 800893c:	6930      	ldr	r0, [r6, #16]
 800893e:	4303      	orrs	r3, r0
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008940:	40ab      	lsls	r3, r5
 8008942:	4313      	orrs	r3, r2
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008944:	63cb      	str	r3, [r1, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008946:	6821      	ldr	r1, [r4, #0]
 8008948:	680b      	ldr	r3, [r1, #0]
 800894a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800894e:	40aa      	lsls	r2, r5
 8008950:	ea23 0302 	bic.w	r3, r3, r2
 8008954:	600b      	str	r3, [r1, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008956:	6823      	ldr	r3, [r4, #0]
 8008958:	681f      	ldr	r7, [r3, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800895a:	f640 73fe 	movw	r3, #4094	; 0xffe
 800895e:	40ab      	lsls	r3, r5
 8008960:	ea27 0703 	bic.w	r7, r7, r3
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008964:	68b3      	ldr	r3, [r6, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008966:	40ab      	lsls	r3, r5
 8008968:	431f      	orrs	r7, r3
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800896a:	6833      	ldr	r3, [r6, #0]
 800896c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008970:	d06a      	beq.n	8008a48 <HAL_DAC_ConfigChannel+0x148>
  {
    tmpreg1 |= DAC_CR_HFSEL;
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8008972:	2b00      	cmp	r3, #0
 8008974:	d16b      	bne.n	8008a4e <HAL_DAC_ConfigChannel+0x14e>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8008976:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800897a:	6822      	ldr	r2, [r4, #0]
 800897c:	6017      	str	r7, [r2, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800897e:	6821      	ldr	r1, [r4, #0]
 8008980:	680b      	ldr	r3, [r1, #0]
 8008982:	22c0      	movs	r2, #192	; 0xc0
 8008984:	fa02 f505 	lsl.w	r5, r2, r5
 8008988:	ea23 0505 	bic.w	r5, r3, r5
 800898c:	600d      	str	r5, [r1, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800898e:	2301      	movs	r3, #1
 8008990:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008992:	2000      	movs	r0, #0
 8008994:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8008996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 8008998:	f7ff fe82 	bl	80086a0 <HAL_GetTick>
 800899c:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 800899e:	b17d      	cbz	r5, 80089c0 <HAL_DAC_ConfigChannel+0xc0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da3b      	bge.n	8008a20 <HAL_DAC_ConfigChannel+0x120>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089a8:	f7ff fe7a 	bl	80086a0 <HAL_GetTick>
 80089ac:	1bc0      	subs	r0, r0, r7
 80089ae:	2801      	cmp	r0, #1
 80089b0:	d9f6      	bls.n	80089a0 <HAL_DAC_ConfigChannel+0xa0>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	f043 0308 	orr.w	r3, r3, #8
 80089b8:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089ba:	2003      	movs	r0, #3
 80089bc:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80089be:	e7ea      	b.n	8008996 <HAL_DAC_ConfigChannel+0x96>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80089c8:	d00b      	beq.n	80089e2 <HAL_DAC_ConfigChannel+0xe2>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80089ca:	f7ff fe69 	bl	80086a0 <HAL_GetTick>
 80089ce:	1bc0      	subs	r0, r0, r7
 80089d0:	2801      	cmp	r0, #1
 80089d2:	d9f5      	bls.n	80089c0 <HAL_DAC_ConfigChannel+0xc0>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	f043 0308 	orr.w	r3, r3, #8
 80089da:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80089dc:	2003      	movs	r0, #3
 80089de:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 80089e0:	e7d9      	b.n	8008996 <HAL_DAC_ConfigChannel+0x96>
      HAL_Delay(1);
 80089e2:	2001      	movs	r0, #1
 80089e4:	f7ff fe62 	bl	80086ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	69f2      	ldr	r2, [r6, #28]
 80089ec:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80089ee:	6820      	ldr	r0, [r4, #0]
 80089f0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80089f2:	f005 0110 	and.w	r1, r5, #16
 80089f6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80089fa:	408b      	lsls	r3, r1
 80089fc:	ea22 0203 	bic.w	r2, r2, r3
 8008a00:	6a33      	ldr	r3, [r6, #32]
 8008a02:	408b      	lsls	r3, r1
 8008a04:	431a      	orrs	r2, r3
 8008a06:	6482      	str	r2, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008a0c:	22ff      	movs	r2, #255	; 0xff
 8008a0e:	408a      	lsls	r2, r1
 8008a10:	ea23 0302 	bic.w	r3, r3, r2
 8008a14:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008a16:	fa02 f101 	lsl.w	r1, r2, r1
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008a1e:	e77e      	b.n	800891e <HAL_DAC_ConfigChannel+0x1e>
      HAL_Delay(1U);
 8008a20:	2001      	movs	r0, #1
 8008a22:	f7ff fe43 	bl	80086ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	69f2      	ldr	r2, [r6, #28]
 8008a2a:	645a      	str	r2, [r3, #68]	; 0x44
 8008a2c:	e7df      	b.n	80089ee <HAL_DAC_ConfigChannel+0xee>
    tmpreg1 = hdac->Instance->CCR;
 8008a2e:	6821      	ldr	r1, [r4, #0]
 8008a30:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008a32:	f005 0010 	and.w	r0, r5, #16
 8008a36:	231f      	movs	r3, #31
 8008a38:	4083      	lsls	r3, r0
 8008a3a:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a3e:	69b3      	ldr	r3, [r6, #24]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a40:	4083      	lsls	r3, r0
 8008a42:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8008a44:	638b      	str	r3, [r1, #56]	; 0x38
 8008a46:	e76e      	b.n	8008926 <HAL_DAC_ConfigChannel+0x26>
    tmpreg1 |= DAC_CR_HFSEL;
 8008a48:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8008a4c:	e795      	b.n	800897a <HAL_DAC_ConfigChannel+0x7a>
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8008a4e:	f002 f92b 	bl	800aca8 <HAL_RCC_GetHCLKFreq>
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_DAC_ConfigChannel+0x168>)
 8008a54:	4298      	cmp	r0, r3
 8008a56:	d902      	bls.n	8008a5e <HAL_DAC_ConfigChannel+0x15e>
         tmpreg1 |= DAC_CR_HFSEL;
 8008a58:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8008a5c:	e78d      	b.n	800897a <HAL_DAC_ConfigChannel+0x7a>
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8008a5e:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8008a62:	e78a      	b.n	800897a <HAL_DAC_ConfigChannel+0x7a>
  __HAL_LOCK(hdac);
 8008a64:	2002      	movs	r0, #2
 8008a66:	e796      	b.n	8008996 <HAL_DAC_ConfigChannel+0x96>
 8008a68:	04c4b400 	.word	0x04c4b400

08008a6c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008a6c:	4770      	bx	lr
	...

08008a70 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008a70:	6803      	ldr	r3, [r0, #0]
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d815      	bhi.n	8008aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008a78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a7a:	f022 0203 	bic.w	r2, r2, #3
 8008a7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008a82:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8008a86:	6482      	str	r2, [r0, #72]	; 0x48
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	3b08      	subs	r3, #8
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 8008a8e:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a92:	4a0a      	ldr	r2, [pc, #40]	; (8008abc <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 8008a94:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008a96:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	6503      	str	r3, [r0, #80]	; 0x50
}
 8008aa2:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008aa6:	f022 0103 	bic.w	r1, r2, #3
 8008aaa:	4a05      	ldr	r2, [pc, #20]	; (8008ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8008aac:	440a      	add	r2, r1
 8008aae:	6482      	str	r2, [r0, #72]	; 0x48
 8008ab0:	e7ea      	b.n	8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x18>
 8008ab2:	bf00      	nop
 8008ab4:	40020407 	.word	0x40020407
 8008ab8:	cccccccd 	.word	0xcccccccd
 8008abc:	40020880 	.word	0x40020880
 8008ac0:	4002081c 	.word	0x4002081c

08008ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ac4:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ac6:	4a07      	ldr	r2, [pc, #28]	; (8008ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8008ac8:	441a      	add	r2, r3
 8008aca:	0092      	lsls	r2, r2, #2
 8008acc:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ace:	4a06      	ldr	r2, [pc, #24]	; (8008ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8008ad0:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	f003 0303 	and.w	r3, r3, #3
 8008ad8:	2201      	movs	r2, #1
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	1000823f 	.word	0x1000823f
 8008ae8:	40020940 	.word	0x40020940

08008aec <HAL_DMA_Init>:
  if(hdma == NULL)
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d05b      	beq.n	8008ba8 <HAL_DMA_Init+0xbc>
{
 8008af0:	b510      	push	{r4, lr}
 8008af2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008af4:	6801      	ldr	r1, [r0, #0]
 8008af6:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <HAL_DMA_Init+0xc0>)
 8008af8:	4299      	cmp	r1, r3
 8008afa:	d83d      	bhi.n	8008b78 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008afc:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <HAL_DMA_Init+0xc4>)
 8008afe:	440b      	add	r3, r1
 8008b00:	4a2c      	ldr	r2, [pc, #176]	; (8008bb4 <HAL_DMA_Init+0xc8>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008b0c:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <HAL_DMA_Init+0xcc>)
 8008b0e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8008b10:	2302      	movs	r3, #2
 8008b12:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8008b16:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008b18:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8008b1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 8008b20:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b22:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8008b24:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b26:	6920      	ldr	r0, [r4, #16]
 8008b28:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b2a:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b2c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b2e:	69a0      	ldr	r0, [r4, #24]
 8008b30:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b32:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b34:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b36:	6a20      	ldr	r0, [r4, #32]
 8008b38:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8008b3a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8008b3c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f7ff ff96 	bl	8008a70 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008b44:	68a3      	ldr	r3, [r4, #8]
 8008b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b4a:	d020      	beq.n	8008b8e <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008b4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008b4e:	7922      	ldrb	r2, [r4, #4]
 8008b50:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8008b54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008b56:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d919      	bls.n	8008b94 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008b64:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008b66:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b68:	2000      	movs	r0, #0
 8008b6a:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8008b72:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8008b76:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008b78:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <HAL_DMA_Init+0xd0>)
 8008b7a:	440b      	add	r3, r1
 8008b7c:	4a0d      	ldr	r2, [pc, #52]	; (8008bb4 <HAL_DMA_Init+0xc8>)
 8008b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b82:	091b      	lsrs	r3, r3, #4
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008b88:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <HAL_DMA_Init+0xd4>)
 8008b8a:	6403      	str	r3, [r0, #64]	; 0x40
 8008b8c:	e7c0      	b.n	8008b10 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	e7db      	b.n	8008b4c <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7ff ff95 	bl	8008ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ba0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ba2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	e7df      	b.n	8008b68 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8008ba8:	2001      	movs	r0, #1
}
 8008baa:	4770      	bx	lr
 8008bac:	40020407 	.word	0x40020407
 8008bb0:	bffdfff8 	.word	0xbffdfff8
 8008bb4:	cccccccd 	.word	0xcccccccd
 8008bb8:	40020000 	.word	0x40020000
 8008bbc:	bffdfbf8 	.word	0xbffdfbf8
 8008bc0:	40020400 	.word	0x40020400

08008bc4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008bc4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d006      	beq.n	8008bdc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bce:	2304      	movs	r3, #4
 8008bd0:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8008bd8:	2001      	movs	r0, #1
 8008bda:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bdc:	6802      	ldr	r2, [r0, #0]
 8008bde:	6813      	ldr	r3, [r2, #0]
 8008be0:	f023 030e 	bic.w	r3, r3, #14
 8008be4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008be6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8008be8:	6813      	ldr	r3, [r2, #0]
 8008bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bee:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008bf0:	6802      	ldr	r2, [r0, #0]
 8008bf2:	6813      	ldr	r3, [r2, #0]
 8008bf4:	f023 0301 	bic.w	r3, r3, #1
 8008bf8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008bfa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008bfc:	f003 021c 	and.w	r2, r3, #28
 8008c00:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008c02:	2301      	movs	r3, #1
 8008c04:	4093      	lsls	r3, r2
 8008c06:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008c0a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008c0c:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008c0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008c10:	b133      	cbz	r3, 8008c20 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c18:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c1a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008c1c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008c1e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008c26:	2300      	movs	r3, #0
 8008c28:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8008c2c:	4618      	mov	r0, r3
}
 8008c2e:	4770      	bx	lr

08008c30 <HAL_DMA_Abort_IT>:
{
 8008c30:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008c32:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d003      	beq.n	8008c44 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8008c40:	2001      	movs	r0, #1
}
 8008c42:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c44:	6802      	ldr	r2, [r0, #0]
 8008c46:	6813      	ldr	r3, [r2, #0]
 8008c48:	f023 030e 	bic.w	r3, r3, #14
 8008c4c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008c4e:	6802      	ldr	r2, [r0, #0]
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	f023 0301 	bic.w	r3, r3, #1
 8008c56:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008c58:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c60:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008c64:	f003 021c 	and.w	r2, r3, #28
 8008c68:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4093      	lsls	r3, r2
 8008c6e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c70:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008c72:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008c74:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008c76:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008c78:	b133      	cbz	r3, 8008c88 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c80:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c82:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008c84:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008c86:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8008c94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c96:	b113      	cbz	r3, 8008c9e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8008c98:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e7d1      	b.n	8008c42 <HAL_DMA_Abort_IT+0x12>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e7cf      	b.n	8008c42 <HAL_DMA_Abort_IT+0x12>

08008ca2 <HAL_DMA_IRQHandler>:
{
 8008ca2:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008ca4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008ca6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008ca8:	6804      	ldr	r4, [r0, #0]
 8008caa:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008cac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008cae:	f003 031c 	and.w	r3, r3, #28
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	409a      	lsls	r2, r3
 8008cb6:	420a      	tst	r2, r1
 8008cb8:	d015      	beq.n	8008ce6 <HAL_DMA_IRQHandler+0x44>
 8008cba:	f015 0f04 	tst.w	r5, #4
 8008cbe:	d012      	beq.n	8008ce6 <HAL_DMA_IRQHandler+0x44>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	f013 0f20 	tst.w	r3, #32
 8008cc6:	d103      	bne.n	8008cd0 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	f023 0304 	bic.w	r3, r3, #4
 8008cce:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008cd0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008cd2:	f003 021c 	and.w	r2, r3, #28
 8008cd6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008cd8:	2304      	movs	r3, #4
 8008cda:	4093      	lsls	r3, r2
 8008cdc:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8008cde:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008ce0:	b103      	cbz	r3, 8008ce4 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8008ce2:	4798      	blx	r3
}
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	409a      	lsls	r2, r3
 8008cea:	420a      	tst	r2, r1
 8008cec:	d01c      	beq.n	8008d28 <HAL_DMA_IRQHandler+0x86>
 8008cee:	f015 0f02 	tst.w	r5, #2
 8008cf2:	d019      	beq.n	8008d28 <HAL_DMA_IRQHandler+0x86>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	f013 0f20 	tst.w	r3, #32
 8008cfa:	d106      	bne.n	8008d0a <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	f023 030a 	bic.w	r3, r3, #10
 8008d02:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008d0c:	f003 021c 	and.w	r2, r3, #28
 8008d10:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008d12:	2302      	movs	r3, #2
 8008d14:	4093      	lsls	r3, r2
 8008d16:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8008d1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0df      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8008d24:	4798      	blx	r3
 8008d26:	e7dd      	b.n	8008ce4 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008d28:	2208      	movs	r2, #8
 8008d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2e:	420b      	tst	r3, r1
 8008d30:	d0d8      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x42>
 8008d32:	f015 0f08 	tst.w	r5, #8
 8008d36:	d0d5      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	f023 030e 	bic.w	r3, r3, #14
 8008d3e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008d42:	f003 031c 	and.w	r3, r3, #28
 8008d46:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008d48:	2201      	movs	r2, #1
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d50:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8008d52:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008d56:	2300      	movs	r3, #0
 8008d58:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8008d5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c0      	beq.n	8008ce4 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8008d62:	4798      	blx	r3
  return;
 8008d64:	e7be      	b.n	8008ce4 <HAL_DMA_IRQHandler+0x42>

08008d66 <HAL_DMA_GetState>:
  return hdma->State;
 8008d66:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8008d6a:	4770      	bx	lr

08008d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d6e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8008d70:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d72:	e036      	b.n	8008de2 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d74:	2407      	movs	r4, #7
 8008d76:	e000      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008d78:	2400      	movs	r4, #0
 8008d7a:	40b4      	lsls	r4, r6
 8008d7c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d7e:	3502      	adds	r5, #2
 8008d80:	4e65      	ldr	r6, [pc, #404]	; (8008f18 <HAL_GPIO_Init+0x1ac>)
 8008d82:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008d86:	4c65      	ldr	r4, [pc, #404]	; (8008f1c <HAL_GPIO_Init+0x1b0>)
 8008d88:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8008d8a:	43d4      	mvns	r4, r2
 8008d8c:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d90:	684f      	ldr	r7, [r1, #4]
 8008d92:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8008d96:	d001      	beq.n	8008d9c <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8008d98:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8008d9c:	4d5f      	ldr	r5, [pc, #380]	; (8008f1c <HAL_GPIO_Init+0x1b0>)
 8008d9e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8008da0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8008da2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008da6:	684f      	ldr	r7, [r1, #4]
 8008da8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8008dac:	d001      	beq.n	8008db2 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8008dae:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8008db2:	4d5a      	ldr	r5, [pc, #360]	; (8008f1c <HAL_GPIO_Init+0x1b0>)
 8008db4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008db6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8008db8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008dbc:	684f      	ldr	r7, [r1, #4]
 8008dbe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8008dc2:	d001      	beq.n	8008dc8 <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8008dc4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8008dc8:	4d54      	ldr	r5, [pc, #336]	; (8008f1c <HAL_GPIO_Init+0x1b0>)
 8008dca:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8008dcc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8008dce:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008dd0:	684e      	ldr	r6, [r1, #4]
 8008dd2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8008dd6:	d001      	beq.n	8008ddc <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8008dd8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8008ddc:	4a4f      	ldr	r2, [pc, #316]	; (8008f1c <HAL_GPIO_Init+0x1b0>)
 8008dde:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8008de0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008de2:	680a      	ldr	r2, [r1, #0]
 8008de4:	fa32 f403 	lsrs.w	r4, r2, r3
 8008de8:	f000 8093 	beq.w	8008f12 <HAL_GPIO_Init+0x1a6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008dec:	2401      	movs	r4, #1
 8008dee:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8008df0:	4022      	ands	r2, r4
 8008df2:	d0f5      	beq.n	8008de0 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008df4:	684d      	ldr	r5, [r1, #4]
 8008df6:	1e6e      	subs	r6, r5, #1
 8008df8:	2e01      	cmp	r6, #1
 8008dfa:	d903      	bls.n	8008e04 <HAL_GPIO_Init+0x98>
 8008dfc:	2d11      	cmp	r5, #17
 8008dfe:	d001      	beq.n	8008e04 <HAL_GPIO_Init+0x98>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e00:	2d12      	cmp	r5, #18
 8008e02:	d112      	bne.n	8008e2a <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR;
 8008e04:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e06:	005f      	lsls	r7, r3, #1
 8008e08:	2503      	movs	r5, #3
 8008e0a:	40bd      	lsls	r5, r7
 8008e0c:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e10:	68cd      	ldr	r5, [r1, #12]
 8008e12:	40bd      	lsls	r5, r7
 8008e14:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8008e16:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8008e18:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e1a:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8008e1e:	684d      	ldr	r5, [r1, #4]
 8008e20:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8008e24:	409c      	lsls	r4, r3
 8008e26:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8008e28:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8008e2a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008e2c:	005e      	lsls	r6, r3, #1
 8008e2e:	2503      	movs	r5, #3
 8008e30:	40b5      	lsls	r5, r6
 8008e32:	43ec      	mvns	r4, r5
 8008e34:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008e38:	688d      	ldr	r5, [r1, #8]
 8008e3a:	40b5      	lsls	r5, r6
 8008e3c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8008e3e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e40:	684d      	ldr	r5, [r1, #4]
 8008e42:	2d02      	cmp	r5, #2
 8008e44:	d001      	beq.n	8008e4a <HAL_GPIO_Init+0xde>
 8008e46:	2d12      	cmp	r5, #18
 8008e48:	d113      	bne.n	8008e72 <HAL_GPIO_Init+0x106>
        temp = GPIOx->AFR[position >> 3u];
 8008e4a:	08df      	lsrs	r7, r3, #3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008e52:	f003 0507 	and.w	r5, r3, #7
 8008e56:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8008e5a:	250f      	movs	r5, #15
 8008e5c:	fa05 f50c 	lsl.w	r5, r5, ip
 8008e60:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008e64:	690d      	ldr	r5, [r1, #16]
 8008e66:	fa05 f50c 	lsl.w	r5, r5, ip
 8008e6a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8008e6e:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8008e72:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008e74:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008e76:	684c      	ldr	r4, [r1, #4]
 8008e78:	f004 0403 	and.w	r4, r4, #3
 8008e7c:	40b4      	lsls	r4, r6
 8008e7e:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8008e80:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e82:	684c      	ldr	r4, [r1, #4]
 8008e84:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8008e88:	d0aa      	beq.n	8008de0 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e8a:	4c25      	ldr	r4, [pc, #148]	; (8008f20 <HAL_GPIO_Init+0x1b4>)
 8008e8c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8008e8e:	f045 0501 	orr.w	r5, r5, #1
 8008e92:	6625      	str	r5, [r4, #96]	; 0x60
 8008e94:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8008e96:	f004 0401 	and.w	r4, r4, #1
 8008e9a:	9401      	str	r4, [sp, #4]
 8008e9c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8008e9e:	089d      	lsrs	r5, r3, #2
 8008ea0:	1cae      	adds	r6, r5, #2
 8008ea2:	4c1d      	ldr	r4, [pc, #116]	; (8008f18 <HAL_GPIO_Init+0x1ac>)
 8008ea4:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008ea8:	f003 0403 	and.w	r4, r3, #3
 8008eac:	00a6      	lsls	r6, r4, #2
 8008eae:	240f      	movs	r4, #15
 8008eb0:	40b4      	lsls	r4, r6
 8008eb2:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008eb6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8008eba:	f43f af5d 	beq.w	8008d78 <HAL_GPIO_Init+0xc>
 8008ebe:	4c19      	ldr	r4, [pc, #100]	; (8008f24 <HAL_GPIO_Init+0x1b8>)
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d01a      	beq.n	8008efa <HAL_GPIO_Init+0x18e>
 8008ec4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ec8:	42a0      	cmp	r0, r4
 8008eca:	d018      	beq.n	8008efe <HAL_GPIO_Init+0x192>
 8008ecc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ed0:	42a0      	cmp	r0, r4
 8008ed2:	d016      	beq.n	8008f02 <HAL_GPIO_Init+0x196>
 8008ed4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ed8:	42a0      	cmp	r0, r4
 8008eda:	d014      	beq.n	8008f06 <HAL_GPIO_Init+0x19a>
 8008edc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d012      	beq.n	8008f0a <HAL_GPIO_Init+0x19e>
 8008ee4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d010      	beq.n	8008f0e <HAL_GPIO_Init+0x1a2>
 8008eec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ef0:	42a0      	cmp	r0, r4
 8008ef2:	f43f af3f 	beq.w	8008d74 <HAL_GPIO_Init+0x8>
 8008ef6:	2408      	movs	r4, #8
 8008ef8:	e73f      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008efa:	2401      	movs	r4, #1
 8008efc:	e73d      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008efe:	2402      	movs	r4, #2
 8008f00:	e73b      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008f02:	2403      	movs	r4, #3
 8008f04:	e739      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008f06:	2404      	movs	r4, #4
 8008f08:	e737      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008f0a:	2405      	movs	r4, #5
 8008f0c:	e735      	b.n	8008d7a <HAL_GPIO_Init+0xe>
 8008f0e:	2406      	movs	r4, #6
 8008f10:	e733      	b.n	8008d7a <HAL_GPIO_Init+0xe>
  }
}
 8008f12:	b003      	add	sp, #12
 8008f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	40010000 	.word	0x40010000
 8008f1c:	40010400 	.word	0x40010400
 8008f20:	40021000 	.word	0x40021000
 8008f24:	48000400 	.word	0x48000400

08008f28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008f28:	6903      	ldr	r3, [r0, #16]
 8008f2a:	4219      	tst	r1, r3
 8008f2c:	d001      	beq.n	8008f32 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8008f2e:	2001      	movs	r0, #1
 8008f30:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f32:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8008f34:	4770      	bx	lr

08008f36 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f36:	b10a      	cbz	r2, 8008f3c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008f38:	6181      	str	r1, [r0, #24]
 8008f3a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008f3c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8008f3e:	4770      	bx	lr

08008f40 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008f40:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f42:	ea01 0203 	and.w	r2, r1, r3
 8008f46:	ea21 0103 	bic.w	r1, r1, r3
 8008f4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f4e:	6181      	str	r1, [r0, #24]
}
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f54:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f56:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	4203      	tst	r3, r0
 8008f5c:	d100      	bne.n	8008f60 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8008f5e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f60:	4b02      	ldr	r3, [pc, #8]	; (8008f6c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8008f62:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f64:	f7f8 fd22 	bl	80019ac <HAL_GPIO_EXTI_Callback>
}
 8008f68:	e7f9      	b.n	8008f5e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8008f6a:	bf00      	nop
 8008f6c:	40010400 	.word	0x40010400

08008f70 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f70:	6803      	ldr	r3, [r0, #0]
 8008f72:	699a      	ldr	r2, [r3, #24]
 8008f74:	f012 0f02 	tst.w	r2, #2
 8008f78:	d001      	beq.n	8008f7e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f7e:	6803      	ldr	r3, [r0, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	f012 0f01 	tst.w	r2, #1
 8008f86:	d103      	bne.n	8008f90 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f88:	699a      	ldr	r2, [r3, #24]
 8008f8a:	f042 0201 	orr.w	r2, r2, #1
 8008f8e:	619a      	str	r2, [r3, #24]
  }
}
 8008f90:	4770      	bx	lr

08008f92 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008f92:	f011 0f01 	tst.w	r1, #1
 8008f96:	d009      	beq.n	8008fac <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f98:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008f9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008fa0:	2b28      	cmp	r3, #40	; 0x28
 8008fa2:	d001      	beq.n	8008fa8 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fa4:	23f2      	movs	r3, #242	; 0xf2
 8008fa6:	e002      	b.n	8008fae <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008fa8:	2342      	movs	r3, #66	; 0x42
 8008faa:	e000      	b.n	8008fae <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8008fac:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008fae:	f011 0f02 	tst.w	r1, #2
 8008fb2:	d029      	beq.n	8009008 <I2C_Disable_IRQ+0x76>
{
 8008fb4:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008fb6:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fba:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8008fbe:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008fc2:	2a28      	cmp	r2, #40	; 0x28
 8008fc4:	d012      	beq.n	8008fec <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008fc6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008fca:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8008fce:	d10f      	bne.n	8008ff0 <I2C_Disable_IRQ+0x5e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008fd0:	2910      	cmp	r1, #16
 8008fd2:	d010      	beq.n	8008ff6 <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008fd4:	2920      	cmp	r1, #32
 8008fd6:	d011      	beq.n	8008ffc <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008fd8:	2940      	cmp	r1, #64	; 0x40
 8008fda:	d012      	beq.n	8009002 <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008fdc:	6801      	ldr	r1, [r0, #0]
 8008fde:	680a      	ldr	r2, [r1, #0]
 8008fe0:	ea22 0303 	bic.w	r3, r2, r3
 8008fe4:	600b      	str	r3, [r1, #0]
}
 8008fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fea:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008fec:	4623      	mov	r3, r4
 8008fee:	e7ec      	b.n	8008fca <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ff0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008ff4:	e7ec      	b.n	8008fd0 <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ff6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008ffa:	e7eb      	b.n	8008fd4 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 8008ffc:	f043 0320 	orr.w	r3, r3, #32
 8009000:	e7ea      	b.n	8008fd8 <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 8009002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009006:	e7e9      	b.n	8008fdc <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009008:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800900c:	d10b      	bne.n	8009026 <I2C_Disable_IRQ+0x94>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800900e:	2910      	cmp	r1, #16
 8009010:	d00c      	beq.n	800902c <I2C_Disable_IRQ+0x9a>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009012:	2920      	cmp	r1, #32
 8009014:	d00d      	beq.n	8009032 <I2C_Disable_IRQ+0xa0>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009016:	2940      	cmp	r1, #64	; 0x40
 8009018:	d00e      	beq.n	8009038 <I2C_Disable_IRQ+0xa6>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800901a:	6801      	ldr	r1, [r0, #0]
 800901c:	680a      	ldr	r2, [r1, #0]
 800901e:	ea22 0303 	bic.w	r3, r2, r3
 8009022:	600b      	str	r3, [r1, #0]
 8009024:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009026:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800902a:	e7f0      	b.n	800900e <I2C_Disable_IRQ+0x7c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800902c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009030:	e7ef      	b.n	8009012 <I2C_Disable_IRQ+0x80>
    tmpisr |= I2C_IT_STOPI;
 8009032:	f043 0320 	orr.w	r3, r3, #32
 8009036:	e7ee      	b.n	8009016 <I2C_Disable_IRQ+0x84>
    tmpisr |= I2C_IT_TCI;
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	e7ed      	b.n	800901a <I2C_Disable_IRQ+0x88>

0800903e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800903e:	2800      	cmp	r0, #0
 8009040:	d059      	beq.n	80090f6 <HAL_I2C_Init+0xb8>
{
 8009042:	b510      	push	{r4, lr}
 8009044:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009046:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800904a:	2b00      	cmp	r3, #0
 800904c:	d043      	beq.n	80090d6 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800904e:	2324      	movs	r3, #36	; 0x24
 8009050:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009054:	6822      	ldr	r2, [r4, #0]
 8009056:	6813      	ldr	r3, [r2, #0]
 8009058:	f023 0301 	bic.w	r3, r3, #1
 800905c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	6822      	ldr	r2, [r4, #0]
 8009062:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009066:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009068:	6822      	ldr	r2, [r4, #0]
 800906a:	6893      	ldr	r3, [r2, #8]
 800906c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009070:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009072:	68e3      	ldr	r3, [r4, #12]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d033      	beq.n	80090e0 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009078:	68a3      	ldr	r3, [r4, #8]
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8009080:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009082:	68e3      	ldr	r3, [r4, #12]
 8009084:	2b02      	cmp	r3, #2
 8009086:	d031      	beq.n	80090ec <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009088:	6822      	ldr	r2, [r4, #0]
 800908a:	6853      	ldr	r3, [r2, #4]
 800908c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009094:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	68d3      	ldr	r3, [r2, #12]
 800909a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800909e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	6962      	ldr	r2, [r4, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	69a1      	ldr	r1, [r4, #24]
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80090ae:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090b0:	69e3      	ldr	r3, [r4, #28]
 80090b2:	6a21      	ldr	r1, [r4, #32]
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	430b      	orrs	r3, r1
 80090b8:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80090ba:	6822      	ldr	r2, [r4, #0]
 80090bc:	6813      	ldr	r3, [r2, #0]
 80090be:	f043 0301 	orr.w	r3, r3, #1
 80090c2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090c4:	2000      	movs	r0, #0
 80090c6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090c8:	2320      	movs	r3, #32
 80090ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80090d4:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80090d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80090da:	f7fe f811 	bl	8007100 <HAL_I2C_MspInit>
 80090de:	e7b6      	b.n	800904e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80090e0:	68a3      	ldr	r3, [r4, #8]
 80090e2:	6822      	ldr	r2, [r4, #0]
 80090e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e8:	6093      	str	r3, [r2, #8]
 80090ea:	e7ca      	b.n	8009082 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090f2:	605a      	str	r2, [r3, #4]
 80090f4:	e7c8      	b.n	8009088 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80090f6:	2001      	movs	r0, #1
}
 80090f8:	4770      	bx	lr

080090fa <HAL_I2C_EV_IRQHandler>:
{
 80090fa:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80090fc:	6803      	ldr	r3, [r0, #0]
 80090fe:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009100:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8009102:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009104:	b103      	cbz	r3, 8009108 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8009106:	4798      	blx	r3
}
 8009108:	bd08      	pop	{r3, pc}

0800910a <HAL_I2C_SlaveTxCpltCallback>:
}
 800910a:	4770      	bx	lr

0800910c <HAL_I2C_SlaveRxCpltCallback>:
}
 800910c:	4770      	bx	lr

0800910e <I2C_ITSlaveSeqCplt>:
{
 800910e:	b510      	push	{r4, lr}
 8009110:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009112:	6803      	ldr	r3, [r0, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009116:	2100      	movs	r1, #0
 8009118:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800911c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8009120:	d00e      	beq.n	8009140 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009128:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800912a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b29      	cmp	r3, #41	; 0x29
 8009132:	d00d      	beq.n	8009150 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009134:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b2a      	cmp	r3, #42	; 0x2a
 800913c:	d018      	beq.n	8009170 <I2C_ITSlaveSeqCplt+0x62>
}
 800913e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009140:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009144:	d0f1      	beq.n	800912a <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e7ec      	b.n	800912a <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009150:	2328      	movs	r3, #40	; 0x28
 8009152:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009156:	2321      	movs	r3, #33	; 0x21
 8009158:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800915a:	2101      	movs	r1, #1
 800915c:	4620      	mov	r0, r4
 800915e:	f7ff ff18 	bl	8008f92 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009162:	2300      	movs	r3, #0
 8009164:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009168:	4620      	mov	r0, r4
 800916a:	f7ff ffce 	bl	800910a <HAL_I2C_SlaveTxCpltCallback>
 800916e:	e7e6      	b.n	800913e <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009170:	2328      	movs	r3, #40	; 0x28
 8009172:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009176:	2322      	movs	r3, #34	; 0x22
 8009178:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800917a:	2102      	movs	r1, #2
 800917c:	4620      	mov	r0, r4
 800917e:	f7ff ff08 	bl	8008f92 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009182:	2300      	movs	r3, #0
 8009184:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009188:	4620      	mov	r0, r4
 800918a:	f7ff ffbf 	bl	800910c <HAL_I2C_SlaveRxCpltCallback>
}
 800918e:	e7d6      	b.n	800913e <I2C_ITSlaveSeqCplt+0x30>

08009190 <HAL_I2C_AddrCallback>:
}
 8009190:	4770      	bx	lr

08009192 <I2C_ITAddrCplt>:
{
 8009192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009194:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009196:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800919a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800919e:	2b28      	cmp	r3, #40	; 0x28
 80091a0:	d006      	beq.n	80091b0 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80091a2:	6803      	ldr	r3, [r0, #0]
 80091a4:	2208      	movs	r2, #8
 80091a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80091a8:	2300      	movs	r3, #0
 80091aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80091ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 80091b0:	6803      	ldr	r3, [r0, #0]
 80091b2:	699e      	ldr	r6, [r3, #24]
 80091b4:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80091b8:	699a      	ldr	r2, [r3, #24]
 80091ba:	0c12      	lsrs	r2, r2, #16
 80091bc:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80091c6:	68df      	ldr	r7, [r3, #12]
 80091c8:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80091cc:	68c1      	ldr	r1, [r0, #12]
 80091ce:	2902      	cmp	r1, #2
 80091d0:	d122      	bne.n	8009218 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80091d2:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 80091d6:	f015 0f06 	tst.w	r5, #6
 80091da:	d110      	bne.n	80091fe <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 80091dc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80091de:	3101      	adds	r1, #1
 80091e0:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80091e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80091e4:	2902      	cmp	r1, #2
 80091e6:	d1e2      	bne.n	80091ae <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80091e8:	2100      	movs	r1, #0
 80091ea:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80091ec:	2008      	movs	r0, #8
 80091ee:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80091f0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80091f4:	4631      	mov	r1, r6
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7ff ffca 	bl	8009190 <HAL_I2C_AddrCallback>
 80091fc:	e7d7      	b.n	80091ae <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80091fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009202:	f7ff fec6 	bl	8008f92 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009206:	2300      	movs	r3, #0
 8009208:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800920c:	463a      	mov	r2, r7
 800920e:	4631      	mov	r1, r6
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff ffbd 	bl	8009190 <HAL_I2C_AddrCallback>
 8009216:	e7ca      	b.n	80091ae <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800921c:	f7ff feb9 	bl	8008f92 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009220:	2300      	movs	r3, #0
 8009222:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009226:	462a      	mov	r2, r5
 8009228:	4631      	mov	r1, r6
 800922a:	4620      	mov	r0, r4
 800922c:	f7ff ffb0 	bl	8009190 <HAL_I2C_AddrCallback>
 8009230:	e7bd      	b.n	80091ae <I2C_ITAddrCplt+0x1c>

08009232 <HAL_I2C_ListenCpltCallback>:
}
 8009232:	4770      	bx	lr

08009234 <I2C_ITListenCplt>:
{
 8009234:	b510      	push	{r4, lr}
 8009236:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009238:	4b17      	ldr	r3, [pc, #92]	; (8009298 <I2C_ITListenCplt+0x64>)
 800923a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800923c:	2300      	movs	r3, #0
 800923e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009240:	2220      	movs	r2, #32
 8009242:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009246:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800924a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800924c:	f011 0f04 	tst.w	r1, #4
 8009250:	d013      	beq.n	800927a <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009252:	6803      	ldr	r3, [r0, #0]
 8009254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009256:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009258:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800925a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800925c:	3301      	adds	r3, #1
 800925e:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009260:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8009262:	b153      	cbz	r3, 800927a <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8009264:	3b01      	subs	r3, #1
 8009266:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8009268:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800926a:	b29b      	uxth	r3, r3
 800926c:	3b01      	subs	r3, #1
 800926e:	b29b      	uxth	r3, r3
 8009270:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009272:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009274:	f043 0304 	orr.w	r3, r3, #4
 8009278:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800927a:	f248 0103 	movw	r1, #32771	; 0x8003
 800927e:	4620      	mov	r0, r4
 8009280:	f7ff fe87 	bl	8008f92 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	2210      	movs	r2, #16
 8009288:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800928a:	2300      	movs	r3, #0
 800928c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8009290:	4620      	mov	r0, r4
 8009292:	f7ff ffce 	bl	8009232 <HAL_I2C_ListenCpltCallback>
}
 8009296:	bd10      	pop	{r4, pc}
 8009298:	ffff0000 	.word	0xffff0000

0800929c <HAL_I2C_ErrorCallback>:
}
 800929c:	4770      	bx	lr

0800929e <HAL_I2C_AbortCpltCallback>:
}
 800929e:	4770      	bx	lr

080092a0 <I2C_TreatErrorCallback>:
{
 80092a0:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80092a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b60      	cmp	r3, #96	; 0x60
 80092aa:	d006      	beq.n	80092ba <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80092ac:	2300      	movs	r3, #0
 80092ae:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80092b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80092b4:	f7ff fff2 	bl	800929c <HAL_I2C_ErrorCallback>
}
 80092b8:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80092ba:	2320      	movs	r3, #32
 80092bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	2300      	movs	r3, #0
 80092c2:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80092c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80092c8:	f7ff ffe9 	bl	800929e <HAL_I2C_AbortCpltCallback>
 80092cc:	e7f4      	b.n	80092b8 <I2C_TreatErrorCallback+0x18>
	...

080092d0 <I2C_ITError>:
{
 80092d0:	b510      	push	{r4, lr}
 80092d2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80092d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092d8:	2000      	movs	r0, #0
 80092da:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092de:	4a3b      	ldr	r2, [pc, #236]	; (80093cc <I2C_ITError+0xfc>)
 80092e0:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80092e2:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80092e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80092e6:	430a      	orrs	r2, r1
 80092e8:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80092ea:	3b28      	subs	r3, #40	; 0x28
 80092ec:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d819      	bhi.n	8009326 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092f2:	2103      	movs	r1, #3
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7ff fe4c 	bl	8008f92 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092fa:	2328      	movs	r3, #40	; 0x28
 80092fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009300:	4b33      	ldr	r3, [pc, #204]	; (80093d0 <I2C_ITError+0x100>)
 8009302:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8009304:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009306:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009308:	b11a      	cbz	r2, 8009312 <I2C_ITError+0x42>
 800930a:	2b11      	cmp	r3, #17
 800930c:	d01b      	beq.n	8009346 <I2C_ITError+0x76>
 800930e:	2b21      	cmp	r3, #33	; 0x21
 8009310:	d019      	beq.n	8009346 <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009312:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009314:	b11a      	cbz	r2, 800931e <I2C_ITError+0x4e>
 8009316:	2b12      	cmp	r3, #18
 8009318:	d036      	beq.n	8009388 <I2C_ITError+0xb8>
 800931a:	2b22      	cmp	r3, #34	; 0x22
 800931c:	d034      	beq.n	8009388 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 800931e:	4620      	mov	r0, r4
 8009320:	f7ff ffbe 	bl	80092a0 <I2C_TreatErrorCallback>
}
 8009324:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009326:	f248 0103 	movw	r1, #32771	; 0x8003
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff fe31 	bl	8008f92 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009330:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b60      	cmp	r3, #96	; 0x60
 8009338:	d002      	beq.n	8009340 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 800933a:	2320      	movs	r3, #32
 800933c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	6363      	str	r3, [r4, #52]	; 0x34
 8009344:	e7de      	b.n	8009304 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800934e:	d003      	beq.n	8009358 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009356:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009358:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800935a:	f7ff fd04 	bl	8008d66 <HAL_DMA_GetState>
 800935e:	2801      	cmp	r0, #1
 8009360:	d00e      	beq.n	8009380 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009364:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <I2C_ITError+0x104>)
 8009366:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009368:	2300      	movs	r3, #0
 800936a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800936e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009370:	f7ff fc5e 	bl	8008c30 <HAL_DMA_Abort_IT>
 8009374:	2800      	cmp	r0, #0
 8009376:	d0d5      	beq.n	8009324 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009378:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800937a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800937c:	4798      	blx	r3
 800937e:	e7d1      	b.n	8009324 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8009380:	4620      	mov	r0, r4
 8009382:	f7ff ff8d 	bl	80092a0 <I2C_TreatErrorCallback>
 8009386:	e7cd      	b.n	8009324 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009390:	d003      	beq.n	800939a <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009398:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800939a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800939c:	f7ff fce3 	bl	8008d66 <HAL_DMA_GetState>
 80093a0:	2801      	cmp	r0, #1
 80093a2:	d00e      	beq.n	80093c2 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80093a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80093a6:	4a0b      	ldr	r2, [pc, #44]	; (80093d4 <I2C_ITError+0x104>)
 80093a8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80093aa:	2300      	movs	r3, #0
 80093ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80093b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80093b2:	f7ff fc3d 	bl	8008c30 <HAL_DMA_Abort_IT>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d0b4      	beq.n	8009324 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80093ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80093bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80093be:	4798      	blx	r3
 80093c0:	e7b0      	b.n	8009324 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 80093c2:	4620      	mov	r0, r4
 80093c4:	f7ff ff6c 	bl	80092a0 <I2C_TreatErrorCallback>
 80093c8:	e7ac      	b.n	8009324 <I2C_ITError+0x54>
 80093ca:	bf00      	nop
 80093cc:	ffff0000 	.word	0xffff0000
 80093d0:	08009541 	.word	0x08009541
 80093d4:	080096f9 	.word	0x080096f9

080093d8 <I2C_ITSlaveCplt>:
{
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80093de:	6802      	ldr	r2, [r0, #0]
 80093e0:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80093e2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80093e6:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093e8:	2120      	movs	r1, #32
 80093ea:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80093ec:	2b21      	cmp	r3, #33	; 0x21
 80093ee:	d00d      	beq.n	800940c <I2C_ITSlaveCplt+0x34>
 80093f0:	2b29      	cmp	r3, #41	; 0x29
 80093f2:	d00b      	beq.n	800940c <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80093f4:	2b22      	cmp	r3, #34	; 0x22
 80093f6:	d001      	beq.n	80093fc <I2C_ITSlaveCplt+0x24>
 80093f8:	2b2a      	cmp	r3, #42	; 0x2a
 80093fa:	d10e      	bne.n	800941a <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80093fc:	f248 0102 	movw	r1, #32770	; 0x8002
 8009400:	4620      	mov	r0, r4
 8009402:	f7ff fdc6 	bl	8008f92 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009406:	2322      	movs	r3, #34	; 0x22
 8009408:	6323      	str	r3, [r4, #48]	; 0x30
 800940a:	e006      	b.n	800941a <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800940c:	f248 0101 	movw	r1, #32769	; 0x8001
 8009410:	4620      	mov	r0, r4
 8009412:	f7ff fdbe 	bl	8008f92 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009416:	2321      	movs	r3, #33	; 0x21
 8009418:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	6853      	ldr	r3, [r2, #4]
 800941e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009422:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8009424:	6822      	ldr	r2, [r4, #0]
 8009426:	6853      	ldr	r3, [r2, #4]
 8009428:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800942c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8009430:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800943a:	4620      	mov	r0, r4
 800943c:	f7ff fd98 	bl	8008f70 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009440:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8009444:	d040      	beq.n	80094c8 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009446:	6822      	ldr	r2, [r4, #0]
 8009448:	6813      	ldr	r3, [r2, #0]
 800944a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800944e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8009450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009452:	b11b      	cbz	r3, 800945c <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	b29b      	uxth	r3, r3
 800945a:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800945c:	f015 0f04 	tst.w	r5, #4
 8009460:	d011      	beq.n	8009486 <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009462:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800946a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800946e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009470:	3301      	adds	r3, #1
 8009472:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009474:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009476:	b133      	cbz	r3, 8009486 <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8009478:	3b01      	subs	r3, #1
 800947a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800947c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29b      	uxth	r3, r3
 8009484:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8009486:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009488:	b29b      	uxth	r3, r3
 800948a:	b11b      	cbz	r3, 8009494 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800948c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800948e:	f043 0304 	orr.w	r3, r3, #4
 8009492:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009494:	2300      	movs	r3, #0
 8009496:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800949a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800949c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800949e:	bb1b      	cbnz	r3, 80094e8 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80094a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80094a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094a6:	d12d      	bne.n	8009504 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b22      	cmp	r3, #34	; 0x22
 80094b0:	d038      	beq.n	8009524 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 80094b2:	2320      	movs	r3, #32
 80094b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80094bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80094c0:	4620      	mov	r0, r4
 80094c2:	f7ff fe22 	bl	800910a <HAL_I2C_SlaveTxCpltCallback>
}
 80094c6:	e02c      	b.n	8009522 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80094c8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80094cc:	d0c6      	beq.n	800945c <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	6813      	ldr	r3, [r2, #0]
 80094d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094d6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80094d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0be      	beq.n	800945c <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80094e6:	e7b9      	b.n	800945c <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80094e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80094ea:	4620      	mov	r0, r4
 80094ec:	f7ff fef0 	bl	80092d0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80094f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b28      	cmp	r3, #40	; 0x28
 80094f8:	d113      	bne.n	8009522 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80094fa:	4629      	mov	r1, r5
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff fe99 	bl	8009234 <I2C_ITListenCplt>
 8009502:	e00e      	b.n	8009522 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8009504:	4620      	mov	r0, r4
 8009506:	f7ff fe02 	bl	800910e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <I2C_ITSlaveCplt+0x164>)
 800950c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800950e:	2320      	movs	r3, #32
 8009510:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009514:	2300      	movs	r3, #0
 8009516:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009518:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800951c:	4620      	mov	r0, r4
 800951e:	f7ff fe88 	bl	8009232 <HAL_I2C_ListenCpltCallback>
}
 8009522:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8009524:	2320      	movs	r3, #32
 8009526:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800952a:	2300      	movs	r3, #0
 800952c:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800952e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff fdea 	bl	800910c <HAL_I2C_SlaveRxCpltCallback>
 8009538:	e7f3      	b.n	8009522 <I2C_ITSlaveCplt+0x14a>
 800953a:	bf00      	nop
 800953c:	ffff0000 	.word	0xffff0000

08009540 <I2C_Slave_ISR_IT>:
{
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8009542:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8009544:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009548:	2b01      	cmp	r3, #1
 800954a:	f000 809e 	beq.w	800968a <I2C_Slave_ISR_IT+0x14a>
 800954e:	4604      	mov	r4, r0
 8009550:	460d      	mov	r5, r1
 8009552:	4616      	mov	r6, r2
 8009554:	2301      	movs	r3, #1
 8009556:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800955a:	f011 0f20 	tst.w	r1, #32
 800955e:	d002      	beq.n	8009566 <I2C_Slave_ISR_IT+0x26>
 8009560:	f012 0f20 	tst.w	r2, #32
 8009564:	d119      	bne.n	800959a <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009566:	f015 0f10 	tst.w	r5, #16
 800956a:	d03e      	beq.n	80095ea <I2C_Slave_ISR_IT+0xaa>
 800956c:	f016 0f10 	tst.w	r6, #16
 8009570:	d03b      	beq.n	80095ea <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8009572:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009574:	b29b      	uxth	r3, r3
 8009576:	bb43      	cbnz	r3, 80095ca <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009578:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b28      	cmp	r3, #40	; 0x28
 8009580:	d00e      	beq.n	80095a0 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009582:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b29      	cmp	r3, #41	; 0x29
 800958a:	d011      	beq.n	80095b0 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	2210      	movs	r2, #16
 8009590:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8009592:	2000      	movs	r0, #0
 8009594:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8009598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800959a:	f7ff ff1d 	bl	80093d8 <I2C_ITSlaveCplt>
 800959e:	e7e2      	b.n	8009566 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80095a0:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80095a4:	d1ed      	bne.n	8009582 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80095a6:	4629      	mov	r1, r5
 80095a8:	4620      	mov	r0, r4
 80095aa:	f7ff fe43 	bl	8009234 <I2C_ITListenCplt>
 80095ae:	e7f0      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80095b0:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80095b4:	d0ea      	beq.n	800958c <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	2210      	movs	r2, #16
 80095ba:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 80095bc:	4620      	mov	r0, r4
 80095be:	f7ff fcd7 	bl	8008f70 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 80095c2:	4620      	mov	r0, r4
 80095c4:	f7ff fda3 	bl	800910e <I2C_ITSlaveSeqCplt>
 80095c8:	e7e3      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	2210      	movs	r2, #16
 80095ce:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80095d2:	f043 0304 	orr.w	r3, r3, #4
 80095d6:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80095d8:	b117      	cbz	r7, 80095e0 <I2C_Slave_ISR_IT+0xa0>
 80095da:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80095de:	d1d8      	bne.n	8009592 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80095e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7ff fe74 	bl	80092d0 <I2C_ITError>
 80095e8:	e7d3      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80095ea:	f015 0f04 	tst.w	r5, #4
 80095ee:	d01f      	beq.n	8009630 <I2C_Slave_ISR_IT+0xf0>
 80095f0:	f016 0f04 	tst.w	r6, #4
 80095f4:	d01c      	beq.n	8009630 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 80095f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	b173      	cbz	r3, 800961a <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009602:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009606:	3301      	adds	r3, #1
 8009608:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800960a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800960c:	3b01      	subs	r3, #1
 800960e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009610:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009612:	b29b      	uxth	r3, r3
 8009614:	3b01      	subs	r3, #1
 8009616:	b29b      	uxth	r3, r3
 8009618:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800961a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800961c:	b29b      	uxth	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1b7      	bne.n	8009592 <I2C_Slave_ISR_IT+0x52>
 8009622:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8009626:	d0b4      	beq.n	8009592 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8009628:	4620      	mov	r0, r4
 800962a:	f7ff fd70 	bl	800910e <I2C_ITSlaveSeqCplt>
 800962e:	e7b0      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009630:	f015 0f08 	tst.w	r5, #8
 8009634:	d002      	beq.n	800963c <I2C_Slave_ISR_IT+0xfc>
 8009636:	f016 0f08 	tst.w	r6, #8
 800963a:	d118      	bne.n	800966e <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800963c:	f015 0f02 	tst.w	r5, #2
 8009640:	d0a7      	beq.n	8009592 <I2C_Slave_ISR_IT+0x52>
 8009642:	f016 0f02 	tst.w	r6, #2
 8009646:	d0a4      	beq.n	8009592 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8009648:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800964a:	b29b      	uxth	r3, r3
 800964c:	b1a3      	cbz	r3, 8009678 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800964e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	7812      	ldrb	r2, [r2, #0]
 8009654:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8009656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009658:	3301      	adds	r3, #1
 800965a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800965c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29b      	uxth	r3, r3
 8009664:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009666:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009668:	3b01      	subs	r3, #1
 800966a:	8523      	strh	r3, [r4, #40]	; 0x28
 800966c:	e791      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800966e:	4629      	mov	r1, r5
 8009670:	4620      	mov	r0, r4
 8009672:	f7ff fd8e 	bl	8009192 <I2C_ITAddrCplt>
 8009676:	e78c      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009678:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800967c:	d001      	beq.n	8009682 <I2C_Slave_ISR_IT+0x142>
 800967e:	2f00      	cmp	r7, #0
 8009680:	d187      	bne.n	8009592 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8009682:	4620      	mov	r0, r4
 8009684:	f7ff fd43 	bl	800910e <I2C_ITSlaveSeqCplt>
 8009688:	e783      	b.n	8009592 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800968a:	2002      	movs	r0, #2
 800968c:	e784      	b.n	8009598 <I2C_Slave_ISR_IT+0x58>

0800968e <HAL_I2C_ER_IRQHandler>:
{
 800968e:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009690:	6802      	ldr	r2, [r0, #0]
 8009692:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009694:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009696:	f413 7f80 	tst.w	r3, #256	; 0x100
 800969a:	d009      	beq.n	80096b0 <HAL_I2C_ER_IRQHandler+0x22>
 800969c:	f011 0f80 	tst.w	r1, #128	; 0x80
 80096a0:	d006      	beq.n	80096b0 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80096a2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80096a4:	f044 0401 	orr.w	r4, r4, #1
 80096a8:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096aa:	f44f 7480 	mov.w	r4, #256	; 0x100
 80096ae:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80096b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80096b4:	d00a      	beq.n	80096cc <HAL_I2C_ER_IRQHandler+0x3e>
 80096b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80096ba:	d007      	beq.n	80096cc <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80096bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096be:	f042 0208 	orr.w	r2, r2, #8
 80096c2:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096c4:	6802      	ldr	r2, [r0, #0]
 80096c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80096ca:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80096cc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80096d0:	d00a      	beq.n	80096e8 <HAL_I2C_ER_IRQHandler+0x5a>
 80096d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80096d6:	d007      	beq.n	80096e8 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80096d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80096da:	f043 0302 	orr.w	r3, r3, #2
 80096de:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096e0:	6803      	ldr	r3, [r0, #0]
 80096e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096e6:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80096e8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80096ea:	f011 0f0b 	tst.w	r1, #11
 80096ee:	d100      	bne.n	80096f2 <HAL_I2C_ER_IRQHandler+0x64>
}
 80096f0:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 80096f2:	f7ff fded 	bl	80092d0 <I2C_ITError>
}
 80096f6:	e7fb      	b.n	80096f0 <HAL_I2C_ER_IRQHandler+0x62>

080096f8 <I2C_DMAAbort>:
{
 80096f8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 80096fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80096fe:	b10b      	cbz	r3, 8009704 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009700:	2200      	movs	r2, #0
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8009704:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009706:	b10b      	cbz	r3, 800970c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009708:	2200      	movs	r2, #0
 800970a:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800970c:	f7ff fdc8 	bl	80092a0 <I2C_TreatErrorCallback>
}
 8009710:	bd08      	pop	{r3, pc}

08009712 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009712:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2b20      	cmp	r3, #32
 800971a:	d124      	bne.n	8009766 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800971c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009720:	2b01      	cmp	r3, #1
 8009722:	d022      	beq.n	800976a <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8009724:	2301      	movs	r3, #1
 8009726:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800972a:	2324      	movs	r3, #36	; 0x24
 800972c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009730:	6802      	ldr	r2, [r0, #0]
 8009732:	6813      	ldr	r3, [r2, #0]
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800973a:	6802      	ldr	r2, [r0, #0]
 800973c:	6813      	ldr	r3, [r2, #0]
 800973e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009742:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009744:	6802      	ldr	r2, [r0, #0]
 8009746:	6813      	ldr	r3, [r2, #0]
 8009748:	4319      	orrs	r1, r3
 800974a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	f043 0301 	orr.w	r3, r3, #1
 8009754:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009756:	2320      	movs	r3, #32
 8009758:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800975c:	2300      	movs	r3, #0
 800975e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009762:	4618      	mov	r0, r3
 8009764:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8009766:	2002      	movs	r0, #2
 8009768:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800976a:	2002      	movs	r0, #2
  }
}
 800976c:	4770      	bx	lr

0800976e <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800976e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b20      	cmp	r3, #32
 8009776:	d122      	bne.n	80097be <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009778:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800977c:	2b01      	cmp	r3, #1
 800977e:	d020      	beq.n	80097c2 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8009780:	2301      	movs	r3, #1
 8009782:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009786:	2324      	movs	r3, #36	; 0x24
 8009788:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800978c:	6802      	ldr	r2, [r0, #0]
 800978e:	6813      	ldr	r3, [r2, #0]
 8009790:	f023 0301 	bic.w	r3, r3, #1
 8009794:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009796:	6802      	ldr	r2, [r0, #0]
 8009798:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800979a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800979e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80097a2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097a4:	6802      	ldr	r2, [r0, #0]
 80097a6:	6813      	ldr	r3, [r2, #0]
 80097a8:	f043 0301 	orr.w	r3, r3, #1
 80097ac:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097ae:	2320      	movs	r3, #32
 80097b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097b4:	2300      	movs	r3, #0
 80097b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80097ba:	4618      	mov	r0, r3
 80097bc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80097be:	2002      	movs	r0, #2
 80097c0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80097c2:	2002      	movs	r0, #2
  }
}
 80097c4:	4770      	bx	lr
	...

080097c8 <HAL_OPAMP_Init>:
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 80097c8:	2800      	cmp	r0, #0
 80097ca:	f000 8083 	beq.w	80098d4 <HAL_OPAMP_Init+0x10c>
{
 80097ce:	b510      	push	{r4, lr}
 80097d0:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80097d2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b05      	cmp	r3, #5
 80097da:	d07d      	beq.n	80098d8 <HAL_OPAMP_Init+0x110>
  {
    return HAL_ERROR;
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80097dc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d07a      	beq.n	80098dc <HAL_OPAMP_Init+0x114>
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80097e6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80097ea:	b90b      	cbnz	r3, 80097f0 <HAL_OPAMP_Init+0x28>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80097ec:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7fd fe55 	bl	80074a0 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	6813      	ldr	r3, [r2, #0]
 80097fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097fe:	6013      	str	r3, [r2, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8009800:	68e3      	ldr	r3, [r4, #12]
 8009802:	2b08      	cmp	r3, #8
 8009804:	d027      	beq.n	8009856 <HAL_OPAMP_Init+0x8e>
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	2b0c      	cmp	r3, #12
 800980a:	d037      	beq.n	800987c <HAL_OPAMP_Init+0xb4>
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 800980c:	68e3      	ldr	r3, [r4, #12]
 800980e:	b97b      	cbnz	r3, 8009830 <HAL_OPAMP_Init+0x68>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8009810:	6821      	ldr	r1, [r4, #0]
 8009812:	680a      	ldr	r2, [r1, #0]
 8009814:	f422 428e 	bic.w	r2, r2, #18176	; 0x4700
 8009818:	f022 020e 	bic.w	r2, r2, #14
 800981c:	68a0      	ldr	r0, [r4, #8]
 800981e:	4303      	orrs	r3, r0
 8009820:	6920      	ldr	r0, [r4, #16]
 8009822:	4303      	orrs	r3, r0
 8009824:	6960      	ldr	r0, [r4, #20]
 8009826:	4303      	orrs	r3, r0
 8009828:	69e0      	ldr	r0, [r4, #28]
 800982a:	4303      	orrs	r3, r0
 800982c:	4313      	orrs	r3, r2
 800982e:	600b      	str	r3, [r1, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8009830:	69e3      	ldr	r3, [r4, #28]
 8009832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009836:	d030      	beq.n	800989a <HAL_OPAMP_Init+0xd2>
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8009838:	4a29      	ldr	r2, [pc, #164]	; (80098e0 <HAL_OPAMP_Init+0x118>)
 800983a:	6813      	ldr	r3, [r2, #0]
 800983c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009840:	6861      	ldr	r1, [r4, #4]
 8009842:	430b      	orrs	r3, r1
 8009844:	6013      	str	r3, [r2, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009846:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800984a:	b913      	cbnz	r3, 8009852 <HAL_OPAMP_Init+0x8a>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800984c:	2301      	movs	r3, #1
 800984e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8009852:	2000      	movs	r0, #0
  }
}
 8009854:	bd10      	pop	{r4, pc}
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8009856:	6821      	ldr	r1, [r4, #0]
 8009858:	680a      	ldr	r2, [r1, #0]
 800985a:	f422 428e 	bic.w	r2, r2, #18176	; 0x4700
 800985e:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8009862:	68a0      	ldr	r0, [r4, #8]
 8009864:	4303      	orrs	r3, r0
 8009866:	69a0      	ldr	r0, [r4, #24]
 8009868:	4303      	orrs	r3, r0
 800986a:	6920      	ldr	r0, [r4, #16]
 800986c:	4303      	orrs	r3, r0
 800986e:	6960      	ldr	r0, [r4, #20]
 8009870:	4303      	orrs	r3, r0
 8009872:	69e0      	ldr	r0, [r4, #28]
 8009874:	4303      	orrs	r3, r0
 8009876:	4313      	orrs	r3, r2
 8009878:	600b      	str	r3, [r1, #0]
 800987a:	e7c4      	b.n	8009806 <HAL_OPAMP_Init+0x3e>
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800987c:	6821      	ldr	r1, [r4, #0]
 800987e:	680a      	ldr	r2, [r1, #0]
 8009880:	f422 4288 	bic.w	r2, r2, #17408	; 0x4400
 8009884:	f022 020e 	bic.w	r2, r2, #14
 8009888:	68a0      	ldr	r0, [r4, #8]
 800988a:	4303      	orrs	r3, r0
 800988c:	6960      	ldr	r0, [r4, #20]
 800988e:	4303      	orrs	r3, r0
 8009890:	69e0      	ldr	r0, [r4, #28]
 8009892:	4303      	orrs	r3, r0
 8009894:	4313      	orrs	r3, r2
 8009896:	600b      	str	r3, [r1, #0]
 8009898:	e7b8      	b.n	800980c <HAL_OPAMP_Init+0x44>
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d00c      	beq.n	80098ba <HAL_OPAMP_Init+0xf2>
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80098a0:	6a22      	ldr	r2, [r4, #32]
                         | (hopamp->Init.TrimmingValueN));
 80098a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 80098a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80098a8:	6821      	ldr	r1, [r4, #0]
 80098aa:	684b      	ldr	r3, [r1, #4]
 80098ac:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80098b0:	f023 031f 	bic.w	r3, r3, #31
 80098b4:	4313      	orrs	r3, r2
 80098b6:	604b      	str	r3, [r1, #4]
 80098b8:	e7be      	b.n	8009838 <HAL_OPAMP_Init+0x70>
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80098ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                         | (hopamp->Init.TrimmingValueNLowPower));
 80098bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 80098be:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 80098c2:	6821      	ldr	r1, [r4, #0]
 80098c4:	688b      	ldr	r3, [r1, #8]
 80098c6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80098ca:	f023 031f 	bic.w	r3, r3, #31
 80098ce:	4313      	orrs	r3, r2
 80098d0:	608b      	str	r3, [r1, #8]
 80098d2:	e7b1      	b.n	8009838 <HAL_OPAMP_Init+0x70>
    return HAL_ERROR;
 80098d4:	2001      	movs	r0, #1
}
 80098d6:	4770      	bx	lr
    return HAL_ERROR;
 80098d8:	2001      	movs	r0, #1
 80098da:	e7bb      	b.n	8009854 <HAL_OPAMP_Init+0x8c>
    return HAL_ERROR;
 80098dc:	2001      	movs	r0, #1
 80098de:	e7b9      	b.n	8009854 <HAL_OPAMP_Init+0x8c>
 80098e0:	40007800 	.word	0x40007800

080098e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098e8:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 80098ec:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80098f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80098f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d853      	bhi.n	80099a4 <PCD_WriteEmptyTxFifo+0xc0>
 80098fc:	4607      	mov	r7, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8009902:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8009904:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8009908:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800990c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800990e:	429a      	cmp	r2, r3
 8009910:	d300      	bcc.n	8009914 <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 8009912:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8009914:	f102 0a03 	add.w	sl, r2, #3
 8009918:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800991c:	e013      	b.n	8009946 <PCD_WriteEmptyTxFifo+0x62>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800991e:	f106 0a03 	add.w	sl, r6, #3
 8009922:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009926:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800992a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800992e:	b2b3      	uxth	r3, r6
 8009930:	b2e2      	uxtb	r2, r4
 8009932:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8009934:	4640      	mov	r0, r8
 8009936:	f005 ff6b 	bl	800f810 <USB_WritePacket>

    ep->xfer_buff  += len;
 800993a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800993c:	4433      	add	r3, r6
 800993e:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8009940:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009942:	441e      	add	r6, r3
 8009944:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009946:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 800994a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	b29b      	uxth	r3, r3
 8009952:	4553      	cmp	r3, sl
 8009954:	d312      	bcc.n	800997c <PCD_WriteEmptyTxFifo+0x98>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009956:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800995a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800995e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8009960:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009962:	4299      	cmp	r1, r3
 8009964:	d20a      	bcs.n	800997c <PCD_WriteEmptyTxFifo+0x98>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009966:	b14b      	cbz	r3, 800997c <PCD_WriteEmptyTxFifo+0x98>
    len = ep->xfer_len - ep->xfer_count;
 8009968:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 800996a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800996e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8009972:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8009974:	429e      	cmp	r6, r3
 8009976:	d3d2      	bcc.n	800991e <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 8009978:	461e      	mov	r6, r3
 800997a:	e7d0      	b.n	800991e <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800997c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8009980:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8009984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009988:	429a      	cmp	r2, r3
 800998a:	d80e      	bhi.n	80099aa <PCD_WriteEmptyTxFifo+0xc6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800998c:	f004 040f 	and.w	r4, r4, #15
 8009990:	2301      	movs	r3, #1
 8009992:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009994:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8009998:	ea24 0403 	bic.w	r4, r4, r3
 800999c:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 80099a0:	2000      	movs	r0, #0
 80099a2:	e000      	b.n	80099a6 <PCD_WriteEmptyTxFifo+0xc2>
    return HAL_ERROR;
 80099a4:	2001      	movs	r0, #1
}
 80099a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 80099aa:	2000      	movs	r0, #0
 80099ac:	e7fb      	b.n	80099a6 <PCD_WriteEmptyTxFifo+0xc2>
	...

080099b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099b0:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099b2:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099b4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80099ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099be:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80099c0:	4a0b      	ldr	r2, [pc, #44]	; (80099f0 <PCD_EP_OutXfrComplete_int+0x40>)
 80099c2:	4294      	cmp	r4, r2
 80099c4:	d10f      	bne.n	80099e6 <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80099c6:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 80099ca:	d003      	beq.n	80099d4 <PCD_EP_OutXfrComplete_int+0x24>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80099d0:	609a      	str	r2, [r3, #8]
 80099d2:	e00b      	b.n	80099ec <PCD_EP_OutXfrComplete_int+0x3c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80099d4:	f015 0f20 	tst.w	r5, #32
 80099d8:	d001      	beq.n	80099de <PCD_EP_OutXfrComplete_int+0x2e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099da:	2220      	movs	r2, #32
 80099dc:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099de:	b2c9      	uxtb	r1, r1
 80099e0:	f009 fa5e 	bl	8012ea0 <HAL_PCD_DataOutStageCallback>
 80099e4:	e002      	b.n	80099ec <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099e6:	b2c9      	uxtb	r1, r1
 80099e8:	f009 fa5a 	bl	8012ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 80099ec:	2000      	movs	r0, #0
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	4f54310a 	.word	0x4f54310a

080099f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099f4:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099f6:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099f8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80099fe:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a02:	4a07      	ldr	r2, [pc, #28]	; (8009a20 <PCD_EP_OutSetupPacket_int+0x2c>)
 8009a04:	4294      	cmp	r4, r2
 8009a06:	d907      	bls.n	8009a18 <PCD_EP_OutSetupPacket_int+0x24>
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8009a10:	d002      	beq.n	8009a18 <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009a16:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009a18:	f009 fa3a 	bl	8012e90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	bd10      	pop	{r4, pc}
 8009a20:	4f54300a 	.word	0x4f54300a

08009a24 <HAL_PCD_IRQHandler>:
{
 8009a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a2c:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f006 f881 	bl	800fb36 <USB_GetMode>
 8009a34:	b110      	cbz	r0, 8009a3c <HAL_PCD_IRQHandler+0x18>
}
 8009a36:	b003      	add	sp, #12
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3c:	462f      	mov	r7, r5
 8009a3e:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	f006 f847 	bl	800fad4 <USB_ReadInterrupts>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d0f5      	beq.n	8009a36 <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009a4a:	6820      	ldr	r0, [r4, #0]
 8009a4c:	f006 f842 	bl	800fad4 <USB_ReadInterrupts>
 8009a50:	f010 0f02 	tst.w	r0, #2
 8009a54:	d004      	beq.n	8009a60 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	6953      	ldr	r3, [r2, #20]
 8009a5a:	f003 0302 	and.w	r3, r3, #2
 8009a5e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	f006 f837 	bl	800fad4 <USB_ReadInterrupts>
 8009a66:	f010 0f10 	tst.w	r0, #16
 8009a6a:	d015      	beq.n	8009a98 <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a6c:	6822      	ldr	r2, [r4, #0]
 8009a6e:	6993      	ldr	r3, [r2, #24]
 8009a70:	f023 0310 	bic.w	r3, r3, #16
 8009a74:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8009a76:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009a7a:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009a7e:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	f000 8085 	beq.w	8009b92 <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	f000 80aa 	beq.w	8009be2 <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	6993      	ldr	r3, [r2, #24]
 8009a92:	f043 0310 	orr.w	r3, r3, #16
 8009a96:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009a98:	6820      	ldr	r0, [r4, #0]
 8009a9a:	f006 f81b 	bl	800fad4 <USB_ReadInterrupts>
 8009a9e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8009aa2:	f040 80b0 	bne.w	8009c06 <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009aa6:	6820      	ldr	r0, [r4, #0]
 8009aa8:	f006 f814 	bl	800fad4 <USB_ReadInterrupts>
 8009aac:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8009ab0:	f040 80f4 	bne.w	8009c9c <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	f006 f80d 	bl	800fad4 <USB_ReadInterrupts>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f2c0 8146 	blt.w	8009d4c <HAL_PCD_IRQHandler+0x328>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	f006 f807 	bl	800fad4 <USB_ReadInterrupts>
 8009ac6:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8009aca:	d00a      	beq.n	8009ae2 <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009acc:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8009ad0:	f013 0f01 	tst.w	r3, #1
 8009ad4:	f040 8154 	bne.w	8009d80 <HAL_PCD_IRQHandler+0x35c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009ad8:	6822      	ldr	r2, [r4, #0]
 8009ada:	6953      	ldr	r3, [r2, #20]
 8009adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ae2:	6820      	ldr	r0, [r4, #0]
 8009ae4:	f005 fff6 	bl	800fad4 <USB_ReadInterrupts>
 8009ae8:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8009aec:	d015      	beq.n	8009b1a <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	6953      	ldr	r3, [r2, #20]
 8009af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009af6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8009af8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f040 8143 	bne.w	8009d88 <HAL_PCD_IRQHandler+0x364>
        hpcd->LPM_State = LPM_L1;
 8009b02:	2101      	movs	r1, #1
 8009b04:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b0c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009b10:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009b14:	4620      	mov	r0, r4
 8009b16:	f009 fab1 	bl	801307c <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009b1a:	6820      	ldr	r0, [r4, #0]
 8009b1c:	f005 ffda 	bl	800fad4 <USB_ReadInterrupts>
 8009b20:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8009b24:	f040 8134 	bne.w	8009d90 <HAL_PCD_IRQHandler+0x36c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009b28:	6820      	ldr	r0, [r4, #0]
 8009b2a:	f005 ffd3 	bl	800fad4 <USB_ReadInterrupts>
 8009b2e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8009b32:	f040 8192 	bne.w	8009e5a <HAL_PCD_IRQHandler+0x436>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009b36:	6820      	ldr	r0, [r4, #0]
 8009b38:	f005 ffcc 	bl	800fad4 <USB_ReadInterrupts>
 8009b3c:	f010 0f08 	tst.w	r0, #8
 8009b40:	f040 81a3 	bne.w	8009e8a <HAL_PCD_IRQHandler+0x466>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b44:	6820      	ldr	r0, [r4, #0]
 8009b46:	f005 ffc5 	bl	800fad4 <USB_ReadInterrupts>
 8009b4a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8009b4e:	f040 81a5 	bne.w	8009e9c <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	f005 ffbe 	bl	800fad4 <USB_ReadInterrupts>
 8009b58:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8009b5c:	f040 81a8 	bne.w	8009eb0 <HAL_PCD_IRQHandler+0x48c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	f005 ffb7 	bl	800fad4 <USB_ReadInterrupts>
 8009b66:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b6a:	f040 81ab 	bne.w	8009ec4 <HAL_PCD_IRQHandler+0x4a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009b6e:	6820      	ldr	r0, [r4, #0]
 8009b70:	f005 ffb0 	bl	800fad4 <USB_ReadInterrupts>
 8009b74:	f010 0f04 	tst.w	r0, #4
 8009b78:	f43f af5d 	beq.w	8009a36 <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009b80:	f015 0f04 	tst.w	r5, #4
 8009b84:	f040 81a7 	bne.w	8009ed6 <HAL_PCD_IRQHandler+0x4b2>
      hpcd->Instance->GOTGINT |= temp;
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	6853      	ldr	r3, [r2, #4]
 8009b8c:	432b      	orrs	r3, r5
 8009b8e:	6053      	str	r3, [r2, #4]
 8009b90:	e751      	b.n	8009a36 <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009b92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009b96:	ea18 0f03 	tst.w	r8, r3
 8009b9a:	f43f af78 	beq.w	8009a8e <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009b9e:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8009bac:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8009bb0:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8009bb4:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8009bb8:	4628      	mov	r0, r5
 8009bba:	f005 ff0f 	bl	800f9dc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bbe:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8009bc2:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8009bc6:	445b      	add	r3, fp
 8009bc8:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bcc:	9b01      	ldr	r3, [sp, #4]
 8009bce:	eba3 0309 	sub.w	r3, r3, r9
 8009bd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bda:	445b      	add	r3, fp
 8009bdc:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8009be0:	e755      	b.n	8009a8e <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009be2:	2208      	movs	r2, #8
 8009be4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8009be8:	4628      	mov	r0, r5
 8009bea:	f005 fef7 	bl	800f9dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bee:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8009bf2:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8009bf6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009bfa:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8009bfe:	4443      	add	r3, r8
 8009c00:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8009c04:	e743      	b.n	8009a8e <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009c06:	6820      	ldr	r0, [r4, #0]
 8009c08:	f005 ff68 	bl	800fadc <USB_ReadDevAllOutEpInterrupt>
 8009c0c:	4680      	mov	r8, r0
      epnum = 0U;
 8009c0e:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8009c10:	e017      	b.n	8009c42 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009c12:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009c16:	2201      	movs	r2, #1
 8009c18:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7ff fec6 	bl	80099b0 <PCD_EP_OutXfrComplete_int>
 8009c24:	e01d      	b.n	8009c62 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009c26:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009c2a:	2208      	movs	r2, #8
 8009c2c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009c30:	4649      	mov	r1, r9
 8009c32:	4620      	mov	r0, r4
 8009c34:	f7ff fede 	bl	80099f4 <PCD_EP_OutSetupPacket_int>
 8009c38:	e016      	b.n	8009c68 <HAL_PCD_IRQHandler+0x244>
        epnum++;
 8009c3a:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8009c3e:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8009c42:	f1b8 0f00 	cmp.w	r8, #0
 8009c46:	f43f af2e 	beq.w	8009aa6 <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 8009c4a:	f018 0f01 	tst.w	r8, #1
 8009c4e:	d0f4      	beq.n	8009c3a <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c50:	fa5f f189 	uxtb.w	r1, r9
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	f005 ff51 	bl	800fafc <USB_ReadDevOutEPInterrupt>
 8009c5a:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009c5c:	f010 0f01 	tst.w	r0, #1
 8009c60:	d1d7      	bne.n	8009c12 <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009c62:	f01a 0f08 	tst.w	sl, #8
 8009c66:	d1de      	bne.n	8009c26 <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009c68:	f01a 0f10 	tst.w	sl, #16
 8009c6c:	d004      	beq.n	8009c78 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009c6e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009c72:	2210      	movs	r2, #16
 8009c74:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c78:	f01a 0f20 	tst.w	sl, #32
 8009c7c:	d004      	beq.n	8009c88 <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c7e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009c88:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8009c8c:	d0d5      	beq.n	8009c3a <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009c8e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009c96:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8009c9a:	e7ce      	b.n	8009c3a <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	f005 ff25 	bl	800faec <USB_ReadDevAllInEpInterrupt>
 8009ca2:	4680      	mov	r8, r0
      epnum = 0U;
 8009ca4:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8009ca6:	e01a      	b.n	8009cde <HAL_PCD_IRQHandler+0x2ba>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009ca8:	f009 030f 	and.w	r3, r9, #15
 8009cac:	2101      	movs	r1, #1
 8009cae:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009cb2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8009cb6:	ea23 0302 	bic.w	r3, r3, r2
 8009cba:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009cbe:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009cc2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009cc6:	4659      	mov	r1, fp
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f009 f8f5 	bl	8012eb8 <HAL_PCD_DataInStageCallback>
 8009cce:	e017      	b.n	8009d00 <HAL_PCD_IRQHandler+0x2dc>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009cd0:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8009cd4:	d135      	bne.n	8009d42 <HAL_PCD_IRQHandler+0x31e>
        epnum++;
 8009cd6:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8009cda:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8009cde:	f1b8 0f00 	cmp.w	r8, #0
 8009ce2:	f43f aee7 	beq.w	8009ab4 <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009ce6:	f018 0f01 	tst.w	r8, #1
 8009cea:	d0f4      	beq.n	8009cd6 <HAL_PCD_IRQHandler+0x2b2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009cec:	fa5f fb89 	uxtb.w	fp, r9
 8009cf0:	4659      	mov	r1, fp
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	f005 ff0b 	bl	800fb0e <USB_ReadDevInEPInterrupt>
 8009cf8:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009cfa:	f010 0f01 	tst.w	r0, #1
 8009cfe:	d1d3      	bne.n	8009ca8 <HAL_PCD_IRQHandler+0x284>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009d00:	f01a 0f08 	tst.w	sl, #8
 8009d04:	d004      	beq.n	8009d10 <HAL_PCD_IRQHandler+0x2ec>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009d06:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009d10:	f01a 0f10 	tst.w	sl, #16
 8009d14:	d004      	beq.n	8009d20 <HAL_PCD_IRQHandler+0x2fc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009d16:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009d1a:	2210      	movs	r2, #16
 8009d1c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009d20:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009d24:	d004      	beq.n	8009d30 <HAL_PCD_IRQHandler+0x30c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009d26:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009d2a:	2240      	movs	r2, #64	; 0x40
 8009d2c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009d30:	f01a 0f02 	tst.w	sl, #2
 8009d34:	d0cc      	beq.n	8009cd0 <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009d36:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8009d40:	e7c6      	b.n	8009cd0 <HAL_PCD_IRQHandler+0x2ac>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009d42:	4649      	mov	r1, r9
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7ff fdcd 	bl	80098e4 <PCD_WriteEmptyTxFifo>
 8009d4a:	e7c4      	b.n	8009cd6 <HAL_PCD_IRQHandler+0x2b2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d4c:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8009d50:	f023 0301 	bic.w	r3, r3, #1
 8009d54:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8009d58:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d008      	beq.n	8009d72 <HAL_PCD_IRQHandler+0x34e>
        HAL_PCD_ResumeCallback(hpcd);
 8009d60:	4620      	mov	r0, r4
 8009d62:	f009 f8e5 	bl	8012f30 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	6953      	ldr	r3, [r2, #20]
 8009d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d6e:	6153      	str	r3, [r2, #20]
 8009d70:	e6a6      	b.n	8009ac0 <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 8009d72:	2100      	movs	r1, #0
 8009d74:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f009 f97f 	bl	801307c <HAL_PCDEx_LPM_Callback>
 8009d7e:	e7f2      	b.n	8009d66 <HAL_PCD_IRQHandler+0x342>
        HAL_PCD_SuspendCallback(hpcd);
 8009d80:	4620      	mov	r0, r4
 8009d82:	f009 f8bd 	bl	8012f00 <HAL_PCD_SuspendCallback>
 8009d86:	e6a7      	b.n	8009ad8 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f009 f8b9 	bl	8012f00 <HAL_PCD_SuspendCallback>
 8009d8e:	e6c4      	b.n	8009b1a <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009d90:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8009d94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d98:	f023 0301 	bic.w	r3, r3, #1
 8009d9c:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009da0:	2110      	movs	r1, #16
 8009da2:	6820      	ldr	r0, [r4, #0]
 8009da4:	f005 fc52 	bl	800f64c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009da8:	e020      	b.n	8009dec <HAL_PCD_IRQHandler+0x3c8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009daa:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8009dae:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8009db2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009db6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8009dba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009dbe:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009dc2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8009dc6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009dca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009dce:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dd2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8009dd6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009dda:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009dde:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8009de2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009de6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dea:	3601      	adds	r6, #1
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	42b3      	cmp	r3, r6
 8009df0:	d8db      	bhi.n	8009daa <HAL_PCD_IRQHandler+0x386>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009df2:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8009df6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009dfa:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e00:	b1e3      	cbz	r3, 8009e3c <HAL_PCD_IRQHandler+0x418>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009e02:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8009e06:	f043 030b 	orr.w	r3, r3, #11
 8009e0a:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009e0e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009e12:	f043 030b 	orr.w	r3, r3, #11
 8009e16:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009e1a:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8009e1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e22:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009e26:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8009e2a:	6820      	ldr	r0, [r4, #0]
 8009e2c:	f005 fe98 	bl	800fb60 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	6953      	ldr	r3, [r2, #20]
 8009e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e38:	6153      	str	r3, [r2, #20]
 8009e3a:	e675      	b.n	8009b28 <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009e3c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009e48:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009e4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009e50:	f043 030b 	orr.w	r3, r3, #11
 8009e54:	f8c8 3010 	str.w	r3, [r8, #16]
 8009e58:	e7df      	b.n	8009e1a <HAL_PCD_IRQHandler+0x3f6>
      (void)USB_ActivateSetup(hpcd->Instance);
 8009e5a:	6820      	ldr	r0, [r4, #0]
 8009e5c:	f005 fe6f 	bl	800fb3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009e60:	6820      	ldr	r0, [r4, #0]
 8009e62:	f005 fc07 	bl	800f674 <USB_GetDevSpeed>
 8009e66:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009e68:	6825      	ldr	r5, [r4, #0]
 8009e6a:	f000 ff1d 	bl	800aca8 <HAL_RCC_GetHCLKFreq>
 8009e6e:	4601      	mov	r1, r0
 8009e70:	7b22      	ldrb	r2, [r4, #12]
 8009e72:	4628      	mov	r0, r5
 8009e74:	f005 fb78 	bl	800f568 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f009 f82e 	bl	8012eda <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	6953      	ldr	r3, [r2, #20]
 8009e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e86:	6153      	str	r3, [r2, #20]
 8009e88:	e655      	b.n	8009b36 <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f009 f81f 	bl	8012ece <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009e90:	6822      	ldr	r2, [r4, #0]
 8009e92:	6953      	ldr	r3, [r2, #20]
 8009e94:	f003 0308 	and.w	r3, r3, #8
 8009e98:	6153      	str	r3, [r2, #20]
 8009e9a:	e653      	b.n	8009b44 <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f009 f866 	bl	8012f70 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	6953      	ldr	r3, [r2, #20]
 8009ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eac:	6153      	str	r3, [r2, #20]
 8009eae:	e650      	b.n	8009b52 <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f009 f856 	bl	8012f64 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009eb8:	6822      	ldr	r2, [r4, #0]
 8009eba:	6953      	ldr	r3, [r2, #20]
 8009ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ec0:	6153      	str	r3, [r2, #20]
 8009ec2:	e64d      	b.n	8009b60 <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f009 f859 	bl	8012f7c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009eca:	6822      	ldr	r2, [r4, #0]
 8009ecc:	6953      	ldr	r3, [r2, #20]
 8009ece:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ed2:	6153      	str	r3, [r2, #20]
 8009ed4:	e64b      	b.n	8009b6e <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f009 f856 	bl	8012f88 <HAL_PCD_DisconnectCallback>
 8009edc:	e654      	b.n	8009b88 <HAL_PCD_IRQHandler+0x164>

08009ede <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8009ede:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d00d      	beq.n	8009f02 <HAL_PCD_SetAddress+0x24>
{
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8009eea:	2301      	movs	r3, #1
 8009eec:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009ef0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009ef4:	6800      	ldr	r0, [r0, #0]
 8009ef6:	f005 fddd 	bl	800fab4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009efa:	2000      	movs	r0, #0
 8009efc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8009f00:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8009f02:	2002      	movs	r0, #2
}
 8009f04:	4770      	bx	lr

08009f06 <HAL_PCD_EP_Open>:
{
 8009f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f08:	4607      	mov	r7, r0
 8009f0a:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8009f0c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009f10:	d127      	bne.n	8009f62 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f12:	f001 050f 	and.w	r5, r1, #15
 8009f16:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8009f1a:	00b6      	lsls	r6, r6, #2
 8009f1c:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8009f20:	4406      	add	r6, r0
 8009f22:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8009f24:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8009f28:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f32:	f004 040f 	and.w	r4, r4, #15
 8009f36:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8009f38:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8009f3a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8009f3c:	784a      	ldrb	r2, [r1, #1]
 8009f3e:	b102      	cbz	r2, 8009f42 <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8009f40:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d01d      	beq.n	8009f82 <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8009f46:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d01c      	beq.n	8009f88 <HAL_PCD_EP_Open+0x82>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009f54:	6838      	ldr	r0, [r7, #0]
 8009f56:	f005 fb9b 	bl	800f690 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 8009f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f62:	f001 000f 	and.w	r0, r1, #15
 8009f66:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8009f6a:	0089      	lsls	r1, r1, #2
 8009f6c:	3138      	adds	r1, #56	; 0x38
 8009f6e:	4439      	add	r1, r7
 8009f70:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8009f72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009f76:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8009f7a:	2501      	movs	r5, #1
 8009f7c:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8009f80:	e7d7      	b.n	8009f32 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	710b      	strb	r3, [r1, #4]
 8009f86:	e7de      	b.n	8009f46 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8009f88:	2002      	movs	r0, #2
 8009f8a:	e7e9      	b.n	8009f60 <HAL_PCD_EP_Open+0x5a>

08009f8c <HAL_PCD_EP_Receive>:
{
 8009f8c:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f8e:	f001 040f 	and.w	r4, r1, #15
 8009f92:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8009f96:	0089      	lsls	r1, r1, #2
 8009f98:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8009f9c:	4401      	add	r1, r0
 8009f9e:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8009fa0:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8009fa4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009fa8:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 8009fac:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 8009fb6:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fba:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009fbe:	b924      	cbnz	r4, 8009fca <HAL_PCD_EP_Receive+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009fc0:	6800      	ldr	r0, [r0, #0]
 8009fc2:	f005 fbaf 	bl	800f724 <USB_EP0StartXfer>
}
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	f005 fc32 	bl	800f834 <USB_EPStartXfer>
 8009fd0:	e7f9      	b.n	8009fc6 <HAL_PCD_EP_Receive+0x3a>

08009fd2 <HAL_PCD_EP_Transmit>:
{
 8009fd2:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fd4:	f001 040f 	and.w	r4, r1, #15
 8009fd8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8009fdc:	0089      	lsls	r1, r1, #2
 8009fde:	3138      	adds	r1, #56	; 0x38
 8009fe0:	4401      	add	r1, r0
 8009fe2:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8009fe4:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8009fe8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8009fec:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8009fee:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ffa:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009ffe:	b924      	cbnz	r4, 800a00a <HAL_PCD_EP_Transmit+0x38>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a000:	6800      	ldr	r0, [r0, #0]
 800a002:	f005 fb8f 	bl	800f724 <USB_EP0StartXfer>
}
 800a006:	2000      	movs	r0, #0
 800a008:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a00a:	6800      	ldr	r0, [r0, #0]
 800a00c:	f005 fc12 	bl	800f834 <USB_EPStartXfer>
 800a010:	e7f9      	b.n	800a006 <HAL_PCD_EP_Transmit+0x34>

0800a012 <HAL_PCD_EP_SetStall>:
{
 800a012:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a014:	f001 050f 	and.w	r5, r1, #15
 800a018:	6842      	ldr	r2, [r0, #4]
 800a01a:	4295      	cmp	r5, r2
 800a01c:	d838      	bhi.n	800a090 <HAL_PCD_EP_SetStall+0x7e>
 800a01e:	4604      	mov	r4, r0
 800a020:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 800a022:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a026:	d11f      	bne.n	800a068 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 800a028:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a02c:	0089      	lsls	r1, r1, #2
 800a02e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800a032:	4401      	add	r1, r0
 800a034:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800a036:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a03a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800a044:	2301      	movs	r3, #1
 800a046:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a048:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800a04a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d020      	beq.n	800a094 <HAL_PCD_EP_SetStall+0x82>
 800a052:	2301      	movs	r3, #1
 800a054:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	f005 fcd0 	bl	800f9fe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a05e:	b18d      	cbz	r5, 800a084 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 800a060:	2000      	movs	r0, #0
 800a062:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800a066:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a068:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800a06c:	0089      	lsls	r1, r1, #2
 800a06e:	3138      	adds	r1, #56	; 0x38
 800a070:	4401      	add	r1, r0
 800a072:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800a074:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800a078:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a082:	e7df      	b.n	800a044 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a084:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800a088:	6820      	ldr	r0, [r4, #0]
 800a08a:	f005 fd69 	bl	800fb60 <USB_EP0_OutStart>
 800a08e:	e7e7      	b.n	800a060 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 800a090:	2001      	movs	r0, #1
 800a092:	e7e8      	b.n	800a066 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 800a094:	2002      	movs	r0, #2
 800a096:	e7e6      	b.n	800a066 <HAL_PCD_EP_SetStall+0x54>

0800a098 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a098:	f001 030f 	and.w	r3, r1, #15
 800a09c:	6842      	ldr	r2, [r0, #4]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d831      	bhi.n	800a106 <HAL_PCD_EP_ClrStall+0x6e>
{
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800a0a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a0aa:	d11e      	bne.n	800a0ea <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0ac:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800a0b0:	0089      	lsls	r1, r1, #2
 800a0b2:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 800a0b6:	4401      	add	r1, r0
 800a0b8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800a0ba:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800a0be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0cc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a0ce:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d019      	beq.n	800a10a <HAL_PCD_EP_ClrStall+0x72>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	f005 fcbb 	bl	800fa58 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800a0e8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0ea:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800a0ee:	0089      	lsls	r1, r1, #2
 800a0f0:	3138      	adds	r1, #56	; 0x38
 800a0f2:	4401      	add	r1, r0
 800a0f4:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800a0f6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800a0fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a0fe:	2001      	movs	r0, #1
 800a100:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 800a104:	e7e0      	b.n	800a0c8 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800a106:	2001      	movs	r0, #1
}
 800a108:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800a10a:	2002      	movs	r0, #2
 800a10c:	e7ec      	b.n	800a0e8 <HAL_PCD_EP_ClrStall+0x50>
	...

0800a110 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a110:	4a02      	ldr	r2, [pc, #8]	; (800a11c <HAL_PWR_EnableBkUpAccess+0xc>)
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a118:	6013      	str	r3, [r2, #0]
}
 800a11a:	4770      	bx	lr
 800a11c:	40007000 	.word	0x40007000

0800a120 <HAL_PWR_DisableBkUpAccess>:
  *        (RTC registers, RTC backup data registers).
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
  CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800a120:	4a02      	ldr	r2, [pc, #8]	; (800a12c <HAL_PWR_DisableBkUpAccess+0xc>)
 800a122:	6813      	ldr	r3, [r2, #0]
 800a124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a128:	6013      	str	r3, [r2, #0]
}
 800a12a:	4770      	bx	lr
 800a12c:	40007000 	.word	0x40007000

0800a130 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <HAL_PWREx_GetVoltageRange+0x20>)
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800a138:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a13c:	d004      	beq.n	800a148 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800a13e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a142:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800a146:	d100      	bne.n	800a14a <HAL_PWREx_GetVoltageRange+0x1a>
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800a148:	4770      	bx	lr
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800a14a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a14e:	e7fb      	b.n	800a148 <HAL_PWREx_GetVoltageRange+0x18>
 800a150:	40007000 	.word	0x40007000

0800a154 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a154:	2800      	cmp	r0, #0
 800a156:	d136      	bne.n	800a1c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a158:	4b3e      	ldr	r3, [pc, #248]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a164:	d008      	beq.n	800a178 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a166:	4a3b      	ldr	r2, [pc, #236]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a168:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a16c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a174:	2000      	movs	r0, #0
 800a176:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a178:	4a36      	ldr	r2, [pc, #216]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a17a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a17e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a182:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a186:	6813      	ldr	r3, [r2, #0]
 800a188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a18c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a190:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a192:	4b31      	ldr	r3, [pc, #196]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	2332      	movs	r3, #50	; 0x32
 800a198:	fb03 f302 	mul.w	r3, r3, r2
 800a19c:	4a2f      	ldr	r2, [pc, #188]	; (800a25c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800a19e:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a2:	0c9b      	lsrs	r3, r3, #18
 800a1a4:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a1a6:	e000      	b.n	800a1aa <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 800a1a8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a1aa:	4a2a      	ldr	r2, [pc, #168]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a1ac:	6952      	ldr	r2, [r2, #20]
 800a1ae:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a1b2:	d001      	beq.n	800a1b8 <HAL_PWREx_ControlVoltageScaling+0x64>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1f7      	bne.n	800a1a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a1b8:	4b26      	ldr	r3, [pc, #152]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a1c0:	d144      	bne.n	800a24c <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1c6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a1ca:	d008      	beq.n	800a1de <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a1cc:	4a21      	ldr	r2, [pc, #132]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a1ce:	6813      	ldr	r3, [r2, #0]
 800a1d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a1d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1d8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800a1da:	2000      	movs	r0, #0
 800a1dc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a1de:	4b1d      	ldr	r3, [pc, #116]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ea:	d008      	beq.n	800a1fe <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1ec:	4a19      	ldr	r2, [pc, #100]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a1ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a1f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a1fe:	4a15      	ldr	r2, [pc, #84]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a200:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800a204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a20c:	6813      	ldr	r3, [r2, #0]
 800a20e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a216:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0x104>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	2332      	movs	r3, #50	; 0x32
 800a21e:	fb03 f302 	mul.w	r3, r3, r2
 800a222:	4a0e      	ldr	r2, [pc, #56]	; (800a25c <HAL_PWREx_ControlVoltageScaling+0x108>)
 800a224:	fba2 2303 	umull	r2, r3, r2, r3
 800a228:	0c9b      	lsrs	r3, r3, #18
 800a22a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a22c:	e000      	b.n	800a230 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 800a22e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a230:	4a08      	ldr	r2, [pc, #32]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a232:	6952      	ldr	r2, [r2, #20]
 800a234:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a238:	d001      	beq.n	800a23e <HAL_PWREx_ControlVoltageScaling+0xea>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1f7      	bne.n	800a22e <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a23e:	4b05      	ldr	r3, [pc, #20]	; (800a254 <HAL_PWREx_ControlVoltageScaling+0x100>)
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a246:	d103      	bne.n	800a250 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 800a248:	2000      	movs	r0, #0
 800a24a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800a24c:	2003      	movs	r0, #3
 800a24e:	4770      	bx	lr
        return HAL_TIMEOUT;
 800a250:	2003      	movs	r0, #3
}
 800a252:	4770      	bx	lr
 800a254:	40007000 	.word	0x40007000
 800a258:	2000009c 	.word	0x2000009c
 800a25c:	431bde83 	.word	0x431bde83

0800a260 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800a260:	4a02      	ldr	r2, [pc, #8]	; (800a26c <HAL_PWREx_EnableVddIO2+0xc>)
 800a262:	6853      	ldr	r3, [r2, #4]
 800a264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a268:	6053      	str	r3, [r2, #4]
}
 800a26a:	4770      	bx	lr
 800a26c:	40007000 	.word	0x40007000

0800a270 <RCC_GetSysClockFreqFromPLLSource>:
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800a270:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	f003 0303 	and.w	r3, r3, #3
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d01d      	beq.n	800a2b8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  uint32_t msirange = 0U;
 800a27c:	2300      	movs	r3, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a27e:	4a19      	ldr	r2, [pc, #100]	; (800a2e4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 800a280:	68d2      	ldr	r2, [r2, #12]
 800a282:	f002 0203 	and.w	r2, r2, #3

  switch (pllsource)
 800a286:	2a02      	cmp	r2, #2
 800a288:	d029      	beq.n	800a2de <RCC_GetSysClockFreqFromPLLSource+0x6e>
 800a28a:	2a03      	cmp	r2, #3
 800a28c:	d100      	bne.n	800a290 <RCC_GetSysClockFreqFromPLLSource+0x20>
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
    break;

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a28e:	4b16      	ldr	r3, [pc, #88]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x78>)
  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a290:	4a14      	ldr	r2, [pc, #80]	; (800a2e4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 800a292:	68d0      	ldr	r0, [r2, #12]
 800a294:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800a298:	3001      	adds	r0, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a29a:	68d1      	ldr	r1, [r2, #12]
 800a29c:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800a2a0:	fb03 f301 	mul.w	r3, r3, r1
 800a2a4:	fbb3 f0f0 	udiv	r0, r3, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a2a8:	68d3      	ldr	r3, [r2, #12]
 800a2aa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco / pllr;

  return sysclockfreq;
}
 800a2b2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a2b6:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f013 0f08 	tst.w	r3, #8
 800a2c0:	d108      	bne.n	800a2d4 <RCC_GetSysClockFreqFromPLLSource+0x64>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a2c2:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 800a2c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2c8:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 800a2cc:	4a07      	ldr	r2, [pc, #28]	; (800a2ec <RCC_GetSysClockFreqFromPLLSource+0x7c>)
 800a2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d2:	e7d4      	b.n	800a27e <RCC_GetSysClockFreqFromPLLSource+0xe>
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <RCC_GetSysClockFreqFromPLLSource+0x74>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a2dc:	e7f6      	b.n	800a2cc <RCC_GetSysClockFreqFromPLLSource+0x5c>
  switch (pllsource)
 800a2de:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2e0:	e7d6      	b.n	800a290 <RCC_GetSysClockFreqFromPLLSource+0x20>
 800a2e2:	bf00      	nop
 800a2e4:	40021000 	.word	0x40021000
 800a2e8:	007a1200 	.word	0x007a1200
 800a2ec:	0802f43c 	.word	0x0802f43c
 800a2f0:	00f42400 	.word	0x00f42400

0800a2f4 <RCC_SetFlashLatencyFromMSIRange>:
{
 800a2f4:	b530      	push	{r4, r5, lr}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a2fa:	4b1f      	ldr	r3, [pc, #124]	; (800a378 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800a2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2fe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a302:	d00a      	beq.n	800a31a <RCC_SetFlashLatencyFromMSIRange+0x26>
    vos = HAL_PWREx_GetVoltageRange();
 800a304:	f7ff ff14 	bl	800a130 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a308:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a30c:	d016      	beq.n	800a33c <RCC_SetFlashLatencyFromMSIRange+0x48>
    if(msirange >= RCC_MSIRANGE_8)
 800a30e:	2c7f      	cmp	r4, #127	; 0x7f
 800a310:	d81e      	bhi.n	800a350 <RCC_SetFlashLatencyFromMSIRange+0x5c>
      if(msirange == RCC_MSIRANGE_7)
 800a312:	2c70      	cmp	r4, #112	; 0x70
 800a314:	d02b      	beq.n	800a36e <RCC_SetFlashLatencyFromMSIRange+0x7a>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a316:	2100      	movs	r1, #0
 800a318:	e01b      	b.n	800a352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 800a31a:	4d17      	ldr	r5, [pc, #92]	; (800a378 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800a31c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a31e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a322:	65ab      	str	r3, [r5, #88]	; 0x58
 800a324:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a32a:	9301      	str	r3, [sp, #4]
 800a32c:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800a32e:	f7ff feff 	bl	800a130 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800a332:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a338:	65ab      	str	r3, [r5, #88]	; 0x58
 800a33a:	e7e5      	b.n	800a308 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800a33c:	2c80      	cmp	r4, #128	; 0x80
 800a33e:	d903      	bls.n	800a348 <RCC_SetFlashLatencyFromMSIRange+0x54>
      if(msirange > RCC_MSIRANGE_10)
 800a340:	2ca0      	cmp	r4, #160	; 0xa0
 800a342:	d903      	bls.n	800a34c <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 800a344:	2102      	movs	r1, #2
 800a346:	e004      	b.n	800a352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a348:	2100      	movs	r1, #0
 800a34a:	e002      	b.n	800a352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
        latency = FLASH_LATENCY_1; /* 1WS */
 800a34c:	2101      	movs	r1, #1
 800a34e:	e000      	b.n	800a352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 800a350:	2102      	movs	r1, #2
  __HAL_FLASH_SET_LATENCY(latency);
 800a352:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800a354:	6813      	ldr	r3, [r2, #0]
 800a356:	f023 030f 	bic.w	r3, r3, #15
 800a35a:	430b      	orrs	r3, r1
 800a35c:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a35e:	6813      	ldr	r3, [r2, #0]
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	428b      	cmp	r3, r1
 800a366:	d104      	bne.n	800a372 <RCC_SetFlashLatencyFromMSIRange+0x7e>
  return HAL_OK;
 800a368:	2000      	movs	r0, #0
}
 800a36a:	b003      	add	sp, #12
 800a36c:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_1; /* 1WS */
 800a36e:	2101      	movs	r1, #1
 800a370:	e7ef      	b.n	800a352 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    return HAL_ERROR;
 800a372:	2001      	movs	r0, #1
 800a374:	e7f9      	b.n	800a36a <RCC_SetFlashLatencyFromMSIRange+0x76>
 800a376:	bf00      	nop
 800a378:	40021000 	.word	0x40021000
 800a37c:	40022000 	.word	0x40022000

0800a380 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a380:	4a28      	ldr	r2, [pc, #160]	; (800a424 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a382:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a384:	68d2      	ldr	r2, [r2, #12]
 800a386:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a38a:	f013 030c 	ands.w	r3, r3, #12
 800a38e:	d00a      	beq.n	800a3a6 <HAL_RCC_GetSysClockFreq+0x26>
 800a390:	2b0c      	cmp	r3, #12
 800a392:	d006      	beq.n	800a3a2 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a394:	2b04      	cmp	r3, #4
 800a396:	d01f      	beq.n	800a3d8 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d020      	beq.n	800a3de <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a39c:	2000      	movs	r0, #0
 800a39e:	4602      	mov	r2, r0
 800a3a0:	e010      	b.n	800a3c4 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a3a2:	2a01      	cmp	r2, #1
 800a3a4:	d1f6      	bne.n	800a394 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a3a6:	4a1f      	ldr	r2, [pc, #124]	; (800a424 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	f012 0f08 	tst.w	r2, #8
 800a3ae:	d10c      	bne.n	800a3ca <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a3b0:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3b2:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800a3b6:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800a3ba:	491b      	ldr	r1, [pc, #108]	; (800a428 <HAL_RCC_GetSysClockFreq+0xa8>)
 800a3bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a3c0:	b143      	cbz	r3, 800a3d4 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a3c2:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a3c4:	2b0c      	cmp	r3, #12
 800a3c6:	d00d      	beq.n	800a3e4 <HAL_RCC_GetSysClockFreq+0x64>
}
 800a3c8:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a3ca:	4a16      	ldr	r2, [pc, #88]	; (800a424 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3cc:	6812      	ldr	r2, [r2, #0]
 800a3ce:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800a3d2:	e7f2      	b.n	800a3ba <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	e7f5      	b.n	800a3c4 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 800a3d8:	4814      	ldr	r0, [pc, #80]	; (800a42c <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a3da:	2200      	movs	r2, #0
 800a3dc:	e7f2      	b.n	800a3c4 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 800a3de:	4814      	ldr	r0, [pc, #80]	; (800a430 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	e7ef      	b.n	800a3c4 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a3e4:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d016      	beq.n	800a41e <HAL_RCC_GetSysClockFreq+0x9e>
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d100      	bne.n	800a3f6 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 800a3f4:	4a0e      	ldr	r2, [pc, #56]	; (800a430 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3f8:	68d8      	ldr	r0, [r3, #12]
 800a3fa:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800a3fe:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a400:	68d9      	ldr	r1, [r3, #12]
 800a402:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800a406:	fb02 f201 	mul.w	r2, r2, r1
 800a40a:	fbb2 f2f0 	udiv	r2, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a40e:	68d8      	ldr	r0, [r3, #12]
 800a410:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800a414:	3001      	adds	r0, #1
 800a416:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800a418:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800a41c:	e7d4      	b.n	800a3c8 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 800a41e:	4a03      	ldr	r2, [pc, #12]	; (800a42c <HAL_RCC_GetSysClockFreq+0xac>)
 800a420:	e7e9      	b.n	800a3f6 <HAL_RCC_GetSysClockFreq+0x76>
 800a422:	bf00      	nop
 800a424:	40021000 	.word	0x40021000
 800a428:	0802f43c 	.word	0x0802f43c
 800a42c:	00f42400 	.word	0x00f42400
 800a430:	007a1200 	.word	0x007a1200

0800a434 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800a434:	2800      	cmp	r0, #0
 800a436:	f000 832d 	beq.w	800aa94 <HAL_RCC_OscConfig+0x660>
{
 800a43a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43c:	b083      	sub	sp, #12
 800a43e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a440:	4bae      	ldr	r3, [pc, #696]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a442:	689d      	ldr	r5, [r3, #8]
 800a444:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a448:	68de      	ldr	r6, [r3, #12]
 800a44a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a44e:	6803      	ldr	r3, [r0, #0]
 800a450:	f013 0f10 	tst.w	r3, #16
 800a454:	d05a      	beq.n	800a50c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a456:	b1e5      	cbz	r5, 800a492 <HAL_RCC_OscConfig+0x5e>
 800a458:	2d0c      	cmp	r5, #12
 800a45a:	d018      	beq.n	800a48e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a45c:	69a3      	ldr	r3, [r4, #24]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 80bb 	beq.w	800a5da <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800a464:	4aa5      	ldr	r2, [pc, #660]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a466:	6813      	ldr	r3, [r2, #0]
 800a468:	f043 0301 	orr.w	r3, r3, #1
 800a46c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a46e:	f7fe f917 	bl	80086a0 <HAL_GetTick>
 800a472:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a474:	4ba1      	ldr	r3, [pc, #644]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f013 0f02 	tst.w	r3, #2
 800a47c:	f040 809a 	bne.w	800a5b4 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a480:	f7fe f90e 	bl	80086a0 <HAL_GetTick>
 800a484:	1bc0      	subs	r0, r0, r7
 800a486:	2802      	cmp	r0, #2
 800a488:	d9f4      	bls.n	800a474 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800a48a:	2003      	movs	r0, #3
 800a48c:	e30d      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a48e:	2e01      	cmp	r6, #1
 800a490:	d1e4      	bne.n	800a45c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a492:	4b9a      	ldr	r3, [pc, #616]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f013 0f02 	tst.w	r3, #2
 800a49a:	d003      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x70>
 800a49c:	69a3      	ldr	r3, [r4, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 82fa 	beq.w	800aa98 <HAL_RCC_OscConfig+0x664>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a4a4:	6a20      	ldr	r0, [r4, #32]
 800a4a6:	4b95      	ldr	r3, [pc, #596]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f013 0f08 	tst.w	r3, #8
 800a4ae:	d05b      	beq.n	800a568 <HAL_RCC_OscConfig+0x134>
 800a4b0:	4b92      	ldr	r3, [pc, #584]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4b8:	4298      	cmp	r0, r3
 800a4ba:	d85c      	bhi.n	800a576 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a4bc:	4b8f      	ldr	r3, [pc, #572]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	f042 0208 	orr.w	r2, r2, #8
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a4cc:	6a21      	ldr	r1, [r4, #32]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a4d8:	69e1      	ldr	r1, [r4, #28]
 800a4da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a4de:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	d060      	beq.n	800a5a6 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a4e4:	f7ff ff4c 	bl	800a380 <HAL_RCC_GetSysClockFreq>
 800a4e8:	4b84      	ldr	r3, [pc, #528]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a4f0:	4a83      	ldr	r2, [pc, #524]	; (800a700 <HAL_RCC_OscConfig+0x2cc>)
 800a4f2:	5cd3      	ldrb	r3, [r2, r3]
 800a4f4:	f003 031f 	and.w	r3, r3, #31
 800a4f8:	40d8      	lsrs	r0, r3
 800a4fa:	4b82      	ldr	r3, [pc, #520]	; (800a704 <HAL_RCC_OscConfig+0x2d0>)
 800a4fc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800a4fe:	4b82      	ldr	r3, [pc, #520]	; (800a708 <HAL_RCC_OscConfig+0x2d4>)
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	f7fd fc0d 	bl	8007d20 <HAL_InitTick>
        if(status != HAL_OK)
 800a506:	2800      	cmp	r0, #0
 800a508:	f040 82cf 	bne.w	800aaaa <HAL_RCC_OscConfig+0x676>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	f013 0f01 	tst.w	r3, #1
 800a512:	f000 8081 	beq.w	800a618 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a516:	2d08      	cmp	r5, #8
 800a518:	d075      	beq.n	800a606 <HAL_RCC_OscConfig+0x1d2>
 800a51a:	2d0c      	cmp	r5, #12
 800a51c:	d071      	beq.n	800a602 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a524:	f000 8097 	beq.w	800a656 <HAL_RCC_OscConfig+0x222>
 800a528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a52c:	f000 8099 	beq.w	800a662 <HAL_RCC_OscConfig+0x22e>
 800a530:	4b72      	ldr	r3, [pc, #456]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a540:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a542:	6863      	ldr	r3, [r4, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8099 	beq.w	800a67c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800a54a:	f7fe f8a9 	bl	80086a0 <HAL_GetTick>
 800a54e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a550:	4b6a      	ldr	r3, [pc, #424]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a558:	d15e      	bne.n	800a618 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a55a:	f7fe f8a1 	bl	80086a0 <HAL_GetTick>
 800a55e:	1bc0      	subs	r0, r0, r7
 800a560:	2864      	cmp	r0, #100	; 0x64
 800a562:	d9f5      	bls.n	800a550 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800a564:	2003      	movs	r0, #3
 800a566:	e2a0      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a568:	4b64      	ldr	r3, [pc, #400]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a56a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a56e:	091b      	lsrs	r3, r3, #4
 800a570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a574:	e7a0      	b.n	800a4b8 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a576:	f7ff febd 	bl	800a2f4 <RCC_SetFlashLatencyFromMSIRange>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f040 828e 	bne.w	800aa9c <HAL_RCC_OscConfig+0x668>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a580:	4b5e      	ldr	r3, [pc, #376]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	f042 0208 	orr.w	r2, r2, #8
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a590:	6a21      	ldr	r1, [r4, #32]
 800a592:	430a      	orrs	r2, r1
 800a594:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a59c:	69e1      	ldr	r1, [r4, #28]
 800a59e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a5a2:	605a      	str	r2, [r3, #4]
 800a5a4:	e79e      	b.n	800a4e4 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a5a6:	6a20      	ldr	r0, [r4, #32]
 800a5a8:	f7ff fea4 	bl	800a2f4 <RCC_SetFlashLatencyFromMSIRange>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d099      	beq.n	800a4e4 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	e27a      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a5b4:	4b51      	ldr	r3, [pc, #324]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	f042 0208 	orr.w	r2, r2, #8
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a5c4:	6a21      	ldr	r1, [r4, #32]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a5d0:	69e1      	ldr	r1, [r4, #28]
 800a5d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a5d6:	605a      	str	r2, [r3, #4]
 800a5d8:	e798      	b.n	800a50c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800a5da:	4a48      	ldr	r2, [pc, #288]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a5dc:	6813      	ldr	r3, [r2, #0]
 800a5de:	f023 0301 	bic.w	r3, r3, #1
 800a5e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a5e4:	f7fe f85c 	bl	80086a0 <HAL_GetTick>
 800a5e8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a5ea:	4b44      	ldr	r3, [pc, #272]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f013 0f02 	tst.w	r3, #2
 800a5f2:	d08b      	beq.n	800a50c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a5f4:	f7fe f854 	bl	80086a0 <HAL_GetTick>
 800a5f8:	1bc0      	subs	r0, r0, r7
 800a5fa:	2802      	cmp	r0, #2
 800a5fc:	d9f5      	bls.n	800a5ea <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800a5fe:	2003      	movs	r0, #3
 800a600:	e253      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a602:	2e03      	cmp	r6, #3
 800a604:	d18b      	bne.n	800a51e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a606:	4b3d      	ldr	r3, [pc, #244]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a60e:	d003      	beq.n	800a618 <HAL_RCC_OscConfig+0x1e4>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8244 	beq.w	800aaa0 <HAL_RCC_OscConfig+0x66c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	f013 0f02 	tst.w	r3, #2
 800a61e:	d04f      	beq.n	800a6c0 <HAL_RCC_OscConfig+0x28c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a620:	2d04      	cmp	r5, #4
 800a622:	d03c      	beq.n	800a69e <HAL_RCC_OscConfig+0x26a>
 800a624:	2d0c      	cmp	r5, #12
 800a626:	d038      	beq.n	800a69a <HAL_RCC_OscConfig+0x266>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a628:	68e3      	ldr	r3, [r4, #12]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d077      	beq.n	800a71e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800a62e:	4a33      	ldr	r2, [pc, #204]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a630:	6813      	ldr	r3, [r2, #0]
 800a632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a636:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a638:	f7fe f832 	bl	80086a0 <HAL_GetTick>
 800a63c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a63e:	4b2f      	ldr	r3, [pc, #188]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a646:	d161      	bne.n	800a70c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a648:	f7fe f82a 	bl	80086a0 <HAL_GetTick>
 800a64c:	1b80      	subs	r0, r0, r6
 800a64e:	2802      	cmp	r0, #2
 800a650:	d9f5      	bls.n	800a63e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800a652:	2003      	movs	r0, #3
 800a654:	e229      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a656:	4a29      	ldr	r2, [pc, #164]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a658:	6813      	ldr	r3, [r2, #0]
 800a65a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	e76f      	b.n	800a542 <HAL_RCC_OscConfig+0x10e>
 800a662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a666:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	e762      	b.n	800a542 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800a67c:	f7fe f810 	bl	80086a0 <HAL_GetTick>
 800a680:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a682:	4b1e      	ldr	r3, [pc, #120]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a68a:	d0c5      	beq.n	800a618 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a68c:	f7fe f808 	bl	80086a0 <HAL_GetTick>
 800a690:	1bc0      	subs	r0, r0, r7
 800a692:	2864      	cmp	r0, #100	; 0x64
 800a694:	d9f5      	bls.n	800a682 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800a696:	2003      	movs	r0, #3
 800a698:	e207      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a69a:	2e02      	cmp	r6, #2
 800a69c:	d1c4      	bne.n	800a628 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a69e:	4b17      	ldr	r3, [pc, #92]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a6a6:	d003      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x27c>
 800a6a8:	68e3      	ldr	r3, [r4, #12]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 81fa 	beq.w	800aaa4 <HAL_RCC_OscConfig+0x670>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6b0:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a6b2:	6853      	ldr	r3, [r2, #4]
 800a6b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a6b8:	6921      	ldr	r1, [r4, #16]
 800a6ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a6be:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	f013 0f08 	tst.w	r3, #8
 800a6c6:	d055      	beq.n	800a774 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a6c8:	6963      	ldr	r3, [r4, #20]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d03b      	beq.n	800a746 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800a6ce:	4a0b      	ldr	r2, [pc, #44]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a6d0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a6d4:	f043 0301 	orr.w	r3, r3, #1
 800a6d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a6dc:	f7fd ffe0 	bl	80086a0 <HAL_GetTick>
 800a6e0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a6e2:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <HAL_RCC_OscConfig+0x2c8>)
 800a6e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6e8:	f013 0f02 	tst.w	r3, #2
 800a6ec:	d142      	bne.n	800a774 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6ee:	f7fd ffd7 	bl	80086a0 <HAL_GetTick>
 800a6f2:	1b80      	subs	r0, r0, r6
 800a6f4:	2802      	cmp	r0, #2
 800a6f6:	d9f4      	bls.n	800a6e2 <HAL_RCC_OscConfig+0x2ae>
          return HAL_TIMEOUT;
 800a6f8:	2003      	movs	r0, #3
 800a6fa:	e1d6      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
 800a6fc:	40021000 	.word	0x40021000
 800a700:	0802f424 	.word	0x0802f424
 800a704:	2000009c 	.word	0x2000009c
 800a708:	200000a4 	.word	0x200000a4
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a70c:	4ab7      	ldr	r2, [pc, #732]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a70e:	6853      	ldr	r3, [r2, #4]
 800a710:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a714:	6921      	ldr	r1, [r4, #16]
 800a716:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a71a:	6053      	str	r3, [r2, #4]
 800a71c:	e7d0      	b.n	800a6c0 <HAL_RCC_OscConfig+0x28c>
        __HAL_RCC_HSI_DISABLE();
 800a71e:	4ab3      	ldr	r2, [pc, #716]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a720:	6813      	ldr	r3, [r2, #0]
 800a722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a726:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a728:	f7fd ffba 	bl	80086a0 <HAL_GetTick>
 800a72c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a72e:	4baf      	ldr	r3, [pc, #700]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a736:	d0c3      	beq.n	800a6c0 <HAL_RCC_OscConfig+0x28c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a738:	f7fd ffb2 	bl	80086a0 <HAL_GetTick>
 800a73c:	1b80      	subs	r0, r0, r6
 800a73e:	2802      	cmp	r0, #2
 800a740:	d9f5      	bls.n	800a72e <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800a742:	2003      	movs	r0, #3
 800a744:	e1b1      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
      __HAL_RCC_LSI_DISABLE();
 800a746:	4aa9      	ldr	r2, [pc, #676]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a748:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a74c:	f023 0301 	bic.w	r3, r3, #1
 800a750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a754:	f7fd ffa4 	bl	80086a0 <HAL_GetTick>
 800a758:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a75a:	4ba4      	ldr	r3, [pc, #656]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a75c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a760:	f013 0f02 	tst.w	r3, #2
 800a764:	d006      	beq.n	800a774 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a766:	f7fd ff9b 	bl	80086a0 <HAL_GetTick>
 800a76a:	1b80      	subs	r0, r0, r6
 800a76c:	2802      	cmp	r0, #2
 800a76e:	d9f4      	bls.n	800a75a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800a770:	2003      	movs	r0, #3
 800a772:	e19a      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	f013 0f04 	tst.w	r3, #4
 800a77a:	d07a      	beq.n	800a872 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a77c:	4b9b      	ldr	r3, [pc, #620]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a77e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a780:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a784:	d136      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a786:	4b99      	ldr	r3, [pc, #612]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a78a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a78e:	659a      	str	r2, [r3, #88]	; 0x58
 800a790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a79a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a79c:	4b94      	ldr	r3, [pc, #592]	; (800a9f0 <HAL_RCC_OscConfig+0x5bc>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a7a4:	d028      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d039      	beq.n	800a820 <HAL_RCC_OscConfig+0x3ec>
 800a7ac:	2b05      	cmp	r3, #5
 800a7ae:	d03f      	beq.n	800a830 <HAL_RCC_OscConfig+0x3fc>
 800a7b0:	4b8e      	ldr	r3, [pc, #568]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a7b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a7b6:	f022 0201 	bic.w	r2, r2, #1
 800a7ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a7be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a7c2:	f022 0204 	bic.w	r2, r2, #4
 800a7c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d03d      	beq.n	800a84c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800a7d0:	f7fd ff66 	bl	80086a0 <HAL_GetTick>
 800a7d4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7d6:	4b85      	ldr	r3, [pc, #532]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a7d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7dc:	f013 0f02 	tst.w	r3, #2
 800a7e0:	d146      	bne.n	800a870 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7e2:	f7fd ff5d 	bl	80086a0 <HAL_GetTick>
 800a7e6:	1bc0      	subs	r0, r0, r7
 800a7e8:	f241 3388 	movw	r3, #5000	; 0x1388
 800a7ec:	4298      	cmp	r0, r3
 800a7ee:	d9f2      	bls.n	800a7d6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800a7f0:	2003      	movs	r0, #3
 800a7f2:	e15a      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
    FlagStatus       pwrclkchanged = RESET;
 800a7f4:	2600      	movs	r6, #0
 800a7f6:	e7d1      	b.n	800a79c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7f8:	4a7d      	ldr	r2, [pc, #500]	; (800a9f0 <HAL_RCC_OscConfig+0x5bc>)
 800a7fa:	6813      	ldr	r3, [r2, #0]
 800a7fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a800:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800a802:	f7fd ff4d 	bl	80086a0 <HAL_GetTick>
 800a806:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a808:	4b79      	ldr	r3, [pc, #484]	; (800a9f0 <HAL_RCC_OscConfig+0x5bc>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a810:	d1c9      	bne.n	800a7a6 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a812:	f7fd ff45 	bl	80086a0 <HAL_GetTick>
 800a816:	1bc0      	subs	r0, r0, r7
 800a818:	2802      	cmp	r0, #2
 800a81a:	d9f5      	bls.n	800a808 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800a81c:	2003      	movs	r0, #3
 800a81e:	e144      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a820:	4a72      	ldr	r2, [pc, #456]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a822:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a82e:	e7cc      	b.n	800a7ca <HAL_RCC_OscConfig+0x396>
 800a830:	4b6e      	ldr	r3, [pc, #440]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a832:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a836:	f042 0204 	orr.w	r2, r2, #4
 800a83a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a83e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a842:	f042 0201 	orr.w	r2, r2, #1
 800a846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800a84a:	e7be      	b.n	800a7ca <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800a84c:	f7fd ff28 	bl	80086a0 <HAL_GetTick>
 800a850:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a852:	4b66      	ldr	r3, [pc, #408]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a858:	f013 0f02 	tst.w	r3, #2
 800a85c:	d008      	beq.n	800a870 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a85e:	f7fd ff1f 	bl	80086a0 <HAL_GetTick>
 800a862:	1bc0      	subs	r0, r0, r7
 800a864:	f241 3388 	movw	r3, #5000	; 0x1388
 800a868:	4298      	cmp	r0, r3
 800a86a:	d9f2      	bls.n	800a852 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800a86c:	2003      	movs	r0, #3
 800a86e:	e11c      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
    if(pwrclkchanged == SET)
 800a870:	b9e6      	cbnz	r6, 800a8ac <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	f013 0f20 	tst.w	r3, #32
 800a878:	d035      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a87a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a87c:	b1e3      	cbz	r3, 800a8b8 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800a87e:	4a5b      	ldr	r2, [pc, #364]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a880:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800a884:	f043 0301 	orr.w	r3, r3, #1
 800a888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800a88c:	f7fd ff08 	bl	80086a0 <HAL_GetTick>
 800a890:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a892:	4b56      	ldr	r3, [pc, #344]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a898:	f013 0f02 	tst.w	r3, #2
 800a89c:	d123      	bne.n	800a8e6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a89e:	f7fd feff 	bl	80086a0 <HAL_GetTick>
 800a8a2:	1b80      	subs	r0, r0, r6
 800a8a4:	2802      	cmp	r0, #2
 800a8a6:	d9f4      	bls.n	800a892 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800a8a8:	2003      	movs	r0, #3
 800a8aa:	e0fe      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8ac:	4a4f      	ldr	r2, [pc, #316]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a8ae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a8b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8b4:	6593      	str	r3, [r2, #88]	; 0x58
 800a8b6:	e7dc      	b.n	800a872 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 800a8b8:	4a4c      	ldr	r2, [pc, #304]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a8ba:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800a8be:	f023 0301 	bic.w	r3, r3, #1
 800a8c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800a8c6:	f7fd feeb 	bl	80086a0 <HAL_GetTick>
 800a8ca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a8cc:	4b47      	ldr	r3, [pc, #284]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a8ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8d2:	f013 0f02 	tst.w	r3, #2
 800a8d6:	d006      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8d8:	f7fd fee2 	bl	80086a0 <HAL_GetTick>
 800a8dc:	1b80      	subs	r0, r0, r6
 800a8de:	2802      	cmp	r0, #2
 800a8e0:	d9f4      	bls.n	800a8cc <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800a8e2:	2003      	movs	r0, #3
 800a8e4:	e0e1      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a8e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80dd 	beq.w	800aaa8 <HAL_RCC_OscConfig+0x674>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d027      	beq.n	800a942 <HAL_RCC_OscConfig+0x50e>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a8f2:	2d0c      	cmp	r5, #12
 800a8f4:	f000 80df 	beq.w	800aab6 <HAL_RCC_OscConfig+0x682>
        __HAL_RCC_PLL_DISABLE();
 800a8f8:	4b3c      	ldr	r3, [pc, #240]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a900:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800a908:	d104      	bne.n	800a914 <HAL_RCC_OscConfig+0x4e0>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a90a:	4a38      	ldr	r2, [pc, #224]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a90c:	68d3      	ldr	r3, [r2, #12]
 800a90e:	f023 0303 	bic.w	r3, r3, #3
 800a912:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a914:	4a35      	ldr	r2, [pc, #212]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a916:	68d3      	ldr	r3, [r2, #12]
 800a918:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a91c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a920:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800a922:	f7fd febd 	bl	80086a0 <HAL_GetTick>
 800a926:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a928:	4b30      	ldr	r3, [pc, #192]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a930:	f000 80ae 	beq.w	800aa90 <HAL_RCC_OscConfig+0x65c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a934:	f7fd feb4 	bl	80086a0 <HAL_GetTick>
 800a938:	1b00      	subs	r0, r0, r4
 800a93a:	2802      	cmp	r0, #2
 800a93c:	d9f4      	bls.n	800a928 <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 800a93e:	2003      	movs	r0, #3
 800a940:	e0b3      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
      pll_config = RCC->PLLCFGR;
 800a942:	4b2a      	ldr	r3, [pc, #168]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a944:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a946:	f003 0103 	and.w	r1, r3, #3
 800a94a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a94c:	4291      	cmp	r1, r2
 800a94e:	d00f      	beq.n	800a970 <HAL_RCC_OscConfig+0x53c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a950:	2d0c      	cmp	r5, #12
 800a952:	f000 80ac 	beq.w	800aaae <HAL_RCC_OscConfig+0x67a>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a956:	4b25      	ldr	r3, [pc, #148]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800a95e:	f040 80a8 	bne.w	800aab2 <HAL_RCC_OscConfig+0x67e>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a962:	4b22      	ldr	r3, [pc, #136]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800a96a:	d02b      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x590>
            return HAL_ERROR;
 800a96c:	2001      	movs	r0, #1
 800a96e:	e09c      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a974:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a976:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a978:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800a97c:	d1e8      	bne.n	800a950 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a97e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a982:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a984:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800a988:	d1e2      	bne.n	800a950 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a98a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a98e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a990:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800a994:	d1dc      	bne.n	800a950 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a996:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800a99a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a99c:	0852      	lsrs	r2, r2, #1
 800a99e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a9a0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800a9a4:	d1d4      	bne.n	800a950 <HAL_RCC_OscConfig+0x51c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a9a6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a9aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a9ac:	0852      	lsrs	r2, r2, #1
 800a9ae:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a9b0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800a9b4:	d1cc      	bne.n	800a950 <HAL_RCC_OscConfig+0x51c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9b6:	4b0d      	ldr	r3, [pc, #52]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a9be:	d04d      	beq.n	800aa5c <HAL_RCC_OscConfig+0x628>
  return HAL_OK;
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e072      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
            __HAL_RCC_PLL_DISABLE();
 800a9c4:	4a09      	ldr	r2, [pc, #36]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a9c6:	6813      	ldr	r3, [r2, #0]
 800a9c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9cc:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800a9ce:	f7fd fe67 	bl	80086a0 <HAL_GetTick>
 800a9d2:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <HAL_RCC_OscConfig+0x5b8>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a9dc:	d00a      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x5c0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9de:	f7fd fe5f 	bl	80086a0 <HAL_GetTick>
 800a9e2:	1b40      	subs	r0, r0, r5
 800a9e4:	2802      	cmp	r0, #2
 800a9e6:	d9f5      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x5a0>
                return HAL_TIMEOUT;
 800a9e8:	2003      	movs	r0, #3
 800a9ea:	e05e      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	40007000 	.word	0x40007000
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a9f4:	4a31      	ldr	r2, [pc, #196]	; (800aabc <HAL_RCC_OscConfig+0x688>)
 800a9f6:	68d3      	ldr	r3, [r2, #12]
 800a9f8:	4931      	ldr	r1, [pc, #196]	; (800aac0 <HAL_RCC_OscConfig+0x68c>)
 800a9fa:	4019      	ands	r1, r3
 800a9fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800aa00:	3801      	subs	r0, #1
 800aa02:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800aa06:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800aa08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800aa0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800aa0e:	0840      	lsrs	r0, r0, #1
 800aa10:	3801      	subs	r0, #1
 800aa12:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800aa16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800aa18:	0840      	lsrs	r0, r0, #1
 800aa1a:	3801      	subs	r0, #1
 800aa1c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800aa20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800aa22:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800aa26:	430b      	orrs	r3, r1
 800aa28:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800aa2a:	6813      	ldr	r3, [r2, #0]
 800aa2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa30:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa32:	68d3      	ldr	r3, [r2, #12]
 800aa34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa38:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800aa3a:	f7fd fe31 	bl	80086a0 <HAL_GetTick>
 800aa3e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa40:	4b1e      	ldr	r3, [pc, #120]	; (800aabc <HAL_RCC_OscConfig+0x688>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800aa48:	d106      	bne.n	800aa58 <HAL_RCC_OscConfig+0x624>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa4a:	f7fd fe29 	bl	80086a0 <HAL_GetTick>
 800aa4e:	1b00      	subs	r0, r0, r4
 800aa50:	2802      	cmp	r0, #2
 800aa52:	d9f5      	bls.n	800aa40 <HAL_RCC_OscConfig+0x60c>
                return HAL_TIMEOUT;
 800aa54:	2003      	movs	r0, #3
 800aa56:	e028      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 800aa58:	2000      	movs	r0, #0
 800aa5a:	e026      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
          __HAL_RCC_PLL_ENABLE();
 800aa5c:	4b17      	ldr	r3, [pc, #92]	; (800aabc <HAL_RCC_OscConfig+0x688>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800aa64:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800aa6c:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800aa6e:	f7fd fe17 	bl	80086a0 <HAL_GetTick>
 800aa72:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa74:	4b11      	ldr	r3, [pc, #68]	; (800aabc <HAL_RCC_OscConfig+0x688>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800aa7c:	d106      	bne.n	800aa8c <HAL_RCC_OscConfig+0x658>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa7e:	f7fd fe0f 	bl	80086a0 <HAL_GetTick>
 800aa82:	1b03      	subs	r3, r0, r4
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d9f5      	bls.n	800aa74 <HAL_RCC_OscConfig+0x640>
              return HAL_TIMEOUT;
 800aa88:	2003      	movs	r0, #3
 800aa8a:	e00e      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e00c      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
 800aa90:	2000      	movs	r0, #0
 800aa92:	e00a      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
    return HAL_ERROR;
 800aa94:	2001      	movs	r0, #1
}
 800aa96:	4770      	bx	lr
        return HAL_ERROR;
 800aa98:	2001      	movs	r0, #1
 800aa9a:	e006      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
            return HAL_ERROR;
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	e004      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
        return HAL_ERROR;
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	e002      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
        return HAL_ERROR;
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	e000      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
  return HAL_OK;
 800aaa8:	2000      	movs	r0, #0
}
 800aaaa:	b003      	add	sp, #12
 800aaac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800aaae:	2001      	movs	r0, #1
 800aab0:	e7fb      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
            return HAL_ERROR;
 800aab2:	2001      	movs	r0, #1
 800aab4:	e7f9      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
        return HAL_ERROR;
 800aab6:	2001      	movs	r0, #1
 800aab8:	e7f7      	b.n	800aaaa <HAL_RCC_OscConfig+0x676>
 800aaba:	bf00      	nop
 800aabc:	40021000 	.word	0x40021000
 800aac0:	019d800c 	.word	0x019d800c

0800aac4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f000 80db 	beq.w	800ac80 <HAL_RCC_ClockConfig+0x1bc>
{
 800aaca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aacc:	460c      	mov	r4, r1
 800aace:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aad0:	4b6f      	ldr	r3, [pc, #444]	; (800ac90 <HAL_RCC_ClockConfig+0x1cc>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 030f 	and.w	r3, r3, #15
 800aad8:	428b      	cmp	r3, r1
 800aada:	d20b      	bcs.n	800aaf4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aadc:	4a6c      	ldr	r2, [pc, #432]	; (800ac90 <HAL_RCC_ClockConfig+0x1cc>)
 800aade:	6813      	ldr	r3, [r2, #0]
 800aae0:	f023 030f 	bic.w	r3, r3, #15
 800aae4:	430b      	orrs	r3, r1
 800aae6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aae8:	6813      	ldr	r3, [r2, #0]
 800aaea:	f003 030f 	and.w	r3, r3, #15
 800aaee:	428b      	cmp	r3, r1
 800aaf0:	f040 80c8 	bne.w	800ac84 <HAL_RCC_ClockConfig+0x1c0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaf4:	682e      	ldr	r6, [r5, #0]
 800aaf6:	f016 0601 	ands.w	r6, r6, #1
 800aafa:	d074      	beq.n	800abe6 <HAL_RCC_ClockConfig+0x122>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aafc:	686b      	ldr	r3, [r5, #4]
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d00d      	beq.n	800ab1e <HAL_RCC_ClockConfig+0x5a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d034      	beq.n	800ab70 <HAL_RCC_ClockConfig+0xac>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d146      	bne.n	800ab98 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab0e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f013 0f02 	tst.w	r3, #2
 800ab18:	d130      	bne.n	800ab7c <HAL_RCC_ClockConfig+0xb8>
          return HAL_ERROR;
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e0a7      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab1e:	4b5d      	ldr	r3, [pc, #372]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ab26:	d101      	bne.n	800ab2c <HAL_RCC_ClockConfig+0x68>
        return HAL_ERROR;
 800ab28:	2001      	movs	r0, #1
 800ab2a:	e0a0      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800ab2c:	f7ff fba0 	bl	800a270 <RCC_GetSysClockFreqFromPLLSource>
 800ab30:	4b59      	ldr	r3, [pc, #356]	; (800ac98 <HAL_RCC_ClockConfig+0x1d4>)
 800ab32:	4298      	cmp	r0, r3
 800ab34:	d937      	bls.n	800aba6 <HAL_RCC_ClockConfig+0xe2>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800ab36:	4b57      	ldr	r3, [pc, #348]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800ab3e:	d108      	bne.n	800ab52 <HAL_RCC_ClockConfig+0x8e>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab40:	4a54      	ldr	r2, [pc, #336]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab42:	6893      	ldr	r3, [r2, #8]
 800ab44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ab4e:	2680      	movs	r6, #128	; 0x80
 800ab50:	e02e      	b.n	800abb0 <HAL_RCC_ClockConfig+0xec>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800ab52:	682e      	ldr	r6, [r5, #0]
 800ab54:	f016 0602 	ands.w	r6, r6, #2
 800ab58:	d02a      	beq.n	800abb0 <HAL_RCC_ClockConfig+0xec>
 800ab5a:	68ab      	ldr	r3, [r5, #8]
 800ab5c:	bb2b      	cbnz	r3, 800abaa <HAL_RCC_ClockConfig+0xe6>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab5e:	4a4d      	ldr	r2, [pc, #308]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab60:	6893      	ldr	r3, [r2, #8]
 800ab62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ab6c:	2680      	movs	r6, #128	; 0x80
 800ab6e:	e01f      	b.n	800abb0 <HAL_RCC_ClockConfig+0xec>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab70:	4b48      	ldr	r3, [pc, #288]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ab78:	f000 8086 	beq.w	800ac88 <HAL_RCC_ClockConfig+0x1c4>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800ab7c:	f7ff fc00 	bl	800a380 <HAL_RCC_GetSysClockFreq>
 800ab80:	4b45      	ldr	r3, [pc, #276]	; (800ac98 <HAL_RCC_ClockConfig+0x1d4>)
 800ab82:	4298      	cmp	r0, r3
 800ab84:	d913      	bls.n	800abae <HAL_RCC_ClockConfig+0xea>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab86:	4a43      	ldr	r2, [pc, #268]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab88:	6893      	ldr	r3, [r2, #8]
 800ab8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab92:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ab94:	2680      	movs	r6, #128	; 0x80
 800ab96:	e00b      	b.n	800abb0 <HAL_RCC_ClockConfig+0xec>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab98:	4b3e      	ldr	r3, [pc, #248]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800aba0:	d1ec      	bne.n	800ab7c <HAL_RCC_ClockConfig+0xb8>
          return HAL_ERROR;
 800aba2:	2001      	movs	r0, #1
 800aba4:	e063      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aba6:	2600      	movs	r6, #0
 800aba8:	e002      	b.n	800abb0 <HAL_RCC_ClockConfig+0xec>
 800abaa:	2600      	movs	r6, #0
 800abac:	e000      	b.n	800abb0 <HAL_RCC_ClockConfig+0xec>
 800abae:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800abb0:	4a38      	ldr	r2, [pc, #224]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800abb2:	6893      	ldr	r3, [r2, #8]
 800abb4:	f023 0303 	bic.w	r3, r3, #3
 800abb8:	6869      	ldr	r1, [r5, #4]
 800abba:	430b      	orrs	r3, r1
 800abbc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800abbe:	f7fd fd6f 	bl	80086a0 <HAL_GetTick>
 800abc2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800abc4:	4b33      	ldr	r3, [pc, #204]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f003 030c 	and.w	r3, r3, #12
 800abcc:	686a      	ldr	r2, [r5, #4]
 800abce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800abd2:	d008      	beq.n	800abe6 <HAL_RCC_ClockConfig+0x122>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800abd4:	f7fd fd64 	bl	80086a0 <HAL_GetTick>
 800abd8:	1bc0      	subs	r0, r0, r7
 800abda:	f241 3388 	movw	r3, #5000	; 0x1388
 800abde:	4298      	cmp	r0, r3
 800abe0:	d9f0      	bls.n	800abc4 <HAL_RCC_ClockConfig+0x100>
        return HAL_TIMEOUT;
 800abe2:	2003      	movs	r0, #3
 800abe4:	e043      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	f013 0f02 	tst.w	r3, #2
 800abec:	d040      	beq.n	800ac70 <HAL_RCC_ClockConfig+0x1ac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abee:	4a29      	ldr	r2, [pc, #164]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800abf0:	6893      	ldr	r3, [r2, #8]
 800abf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abf6:	68a9      	ldr	r1, [r5, #8]
 800abf8:	430b      	orrs	r3, r1
 800abfa:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800abfc:	4b24      	ldr	r3, [pc, #144]	; (800ac90 <HAL_RCC_ClockConfig+0x1cc>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 030f 	and.w	r3, r3, #15
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	d90a      	bls.n	800ac1e <HAL_RCC_ClockConfig+0x15a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac08:	4a21      	ldr	r2, [pc, #132]	; (800ac90 <HAL_RCC_ClockConfig+0x1cc>)
 800ac0a:	6813      	ldr	r3, [r2, #0]
 800ac0c:	f023 030f 	bic.w	r3, r3, #15
 800ac10:	4323      	orrs	r3, r4
 800ac12:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac14:	6813      	ldr	r3, [r2, #0]
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	d136      	bne.n	800ac8c <HAL_RCC_ClockConfig+0x1c8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac1e:	682b      	ldr	r3, [r5, #0]
 800ac20:	f013 0f04 	tst.w	r3, #4
 800ac24:	d006      	beq.n	800ac34 <HAL_RCC_ClockConfig+0x170>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac26:	4a1b      	ldr	r2, [pc, #108]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ac28:	6893      	ldr	r3, [r2, #8]
 800ac2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800ac2e:	68e9      	ldr	r1, [r5, #12]
 800ac30:	430b      	orrs	r3, r1
 800ac32:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	f013 0f08 	tst.w	r3, #8
 800ac3a:	d007      	beq.n	800ac4c <HAL_RCC_ClockConfig+0x188>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac3c:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ac3e:	6893      	ldr	r3, [r2, #8]
 800ac40:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800ac44:	6929      	ldr	r1, [r5, #16]
 800ac46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ac4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac4c:	f7ff fb98 	bl	800a380 <HAL_RCC_GetSysClockFreq>
 800ac50:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ac58:	4a10      	ldr	r2, [pc, #64]	; (800ac9c <HAL_RCC_ClockConfig+0x1d8>)
 800ac5a:	5cd3      	ldrb	r3, [r2, r3]
 800ac5c:	f003 031f 	and.w	r3, r3, #31
 800ac60:	40d8      	lsrs	r0, r3
 800ac62:	4b0f      	ldr	r3, [pc, #60]	; (800aca0 <HAL_RCC_ClockConfig+0x1dc>)
 800ac64:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800ac66:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <HAL_RCC_ClockConfig+0x1e0>)
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	f7fd f859 	bl	8007d20 <HAL_InitTick>
}
 800ac6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800ac70:	2e80      	cmp	r6, #128	; 0x80
 800ac72:	d1c3      	bne.n	800abfc <HAL_RCC_ClockConfig+0x138>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ac74:	4a07      	ldr	r2, [pc, #28]	; (800ac94 <HAL_RCC_ClockConfig+0x1d0>)
 800ac76:	6893      	ldr	r3, [r2, #8]
 800ac78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac7c:	6093      	str	r3, [r2, #8]
 800ac7e:	e7bd      	b.n	800abfc <HAL_RCC_ClockConfig+0x138>
    return HAL_ERROR;
 800ac80:	2001      	movs	r0, #1
}
 800ac82:	4770      	bx	lr
      return HAL_ERROR;
 800ac84:	2001      	movs	r0, #1
 800ac86:	e7f2      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
          return HAL_ERROR;
 800ac88:	2001      	movs	r0, #1
 800ac8a:	e7f0      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
      return HAL_ERROR;
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	e7ee      	b.n	800ac6e <HAL_RCC_ClockConfig+0x1aa>
 800ac90:	40022000 	.word	0x40022000
 800ac94:	40021000 	.word	0x40021000
 800ac98:	04c4b400 	.word	0x04c4b400
 800ac9c:	0802f424 	.word	0x0802f424
 800aca0:	2000009c 	.word	0x2000009c
 800aca4:	200000a4 	.word	0x200000a4

0800aca8 <HAL_RCC_GetHCLKFreq>:
}
 800aca8:	4b01      	ldr	r3, [pc, #4]	; (800acb0 <HAL_RCC_GetHCLKFreq+0x8>)
 800acaa:	6818      	ldr	r0, [r3, #0]
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	2000009c 	.word	0x2000009c

0800acb4 <HAL_RCC_GetPCLK1Freq>:
{
 800acb4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800acb6:	f7ff fff7 	bl	800aca8 <HAL_RCC_GetHCLKFreq>
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800acc2:	4a04      	ldr	r2, [pc, #16]	; (800acd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800acc4:	5cd3      	ldrb	r3, [r2, r3]
 800acc6:	f003 031f 	and.w	r3, r3, #31
}
 800acca:	40d8      	lsrs	r0, r3
 800accc:	bd08      	pop	{r3, pc}
 800acce:	bf00      	nop
 800acd0:	40021000 	.word	0x40021000
 800acd4:	0802f434 	.word	0x0802f434

0800acd8 <HAL_RCC_GetPCLK2Freq>:
{
 800acd8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800acda:	f7ff ffe5 	bl	800aca8 <HAL_RCC_GetHCLKFreq>
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800ace6:	4a04      	ldr	r2, [pc, #16]	; (800acf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ace8:	5cd3      	ldrb	r3, [r2, r3]
 800acea:	f003 031f 	and.w	r3, r3, #31
}
 800acee:	40d8      	lsrs	r0, r3
 800acf0:	bd08      	pop	{r3, pc}
 800acf2:	bf00      	nop
 800acf4:	40021000 	.word	0x40021000
 800acf8:	0802f434 	.word	0x0802f434

0800acfc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800acfc:	230f      	movs	r3, #15
 800acfe:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800ad00:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <HAL_RCC_GetClockConfig+0x34>)
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	f002 0203 	and.w	r2, r2, #3
 800ad08:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800ad10:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800ad18:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	08db      	lsrs	r3, r3, #3
 800ad1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad22:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800ad24:	4b03      	ldr	r3, [pc, #12]	; (800ad34 <HAL_RCC_GetClockConfig+0x38>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	600b      	str	r3, [r1, #0]
}
 800ad2e:	4770      	bx	lr
 800ad30:	40021000 	.word	0x40021000
 800ad34:	40022000 	.word	0x40022000

0800ad38 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800ad38:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800ad3c:	d02d      	beq.n	800ad9a <RCCEx_GetSAIxPeriphCLKFreq+0x62>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800ad3e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ad42:	d033      	beq.n	800adac <RCCEx_GetSAIxPeriphCLKFreq+0x74>
  uint32_t srcclk = 0U;
 800ad44:	2300      	movs	r3, #0
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800ad46:	2b40      	cmp	r3, #64	; 0x40
 800ad48:	d03a      	beq.n	800adc0 <RCCEx_GetSAIxPeriphCLKFreq+0x88>
 800ad4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad4e:	d037      	beq.n	800adc0 <RCCEx_GetSAIxPeriphCLKFreq+0x88>
          }
        }
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d159      	bne.n	800ae08 <RCCEx_GetSAIxPeriphCLKFreq+0xd0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800ad54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad58:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ad5c:	6818      	ldr	r0, [r3, #0]
 800ad5e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ad62:	d062      	beq.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
 800ad64:	6918      	ldr	r0, [r3, #16]
 800ad66:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800ad6a:	d05e      	beq.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ad6c:	6918      	ldr	r0, [r3, #16]
 800ad6e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800ad72:	3001      	adds	r0, #1
 800ad74:	fbb1 f1f0 	udiv	r1, r1, r0
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ad78:	6918      	ldr	r0, [r3, #16]
 800ad7a:	f3c0 2006 	ubfx	r0, r0, #8, #7
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800ad7e:	691b      	ldr	r3, [r3, #16]
#endif
        if(pllp == 0U)
 800ad80:	0edb      	lsrs	r3, r3, #27
 800ad82:	d105      	bne.n	800ad90 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800ad84:	4b3b      	ldr	r3, [pc, #236]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ad8c:	d03a      	beq.n	800ae04 <RCCEx_GetSAIxPeriphCLKFreq+0xcc>
          {
            pllp = 17U;
 800ad8e:	2311      	movs	r3, #17
          else
          {
            pllp = 7U;
          }
        }
        frequency = (pllvco * plln) / pllp;
 800ad90:	fb00 f001 	mul.w	r0, r0, r1
 800ad94:	fbb0 f0f3 	udiv	r0, r0, r3
 800ad98:	4770      	bx	lr
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800ad9a:	4b36      	ldr	r3, [pc, #216]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800ad9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ada0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800ada4:	2b60      	cmp	r3, #96	; 0x60
 800ada6:	d1ce      	bne.n	800ad46 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ada8:	4833      	ldr	r0, [pc, #204]	; (800ae78 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800adaa:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800adac:	4b31      	ldr	r3, [pc, #196]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800adae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800adb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800adb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adba:	d1c4      	bne.n	800ad46 <RCCEx_GetSAIxPeriphCLKFreq+0xe>
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800adbc:	482e      	ldr	r0, [pc, #184]	; (800ae78 <RCCEx_GetSAIxPeriphCLKFreq+0x140>)
 800adbe:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800adc0:	4b2c      	ldr	r3, [pc, #176]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800adc8:	d02f      	beq.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
 800adca:	68d8      	ldr	r0, [r3, #12]
 800adcc:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800add0:	d02b      	beq.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800add2:	68d8      	ldr	r0, [r3, #12]
 800add4:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800add8:	3001      	adds	r0, #1
 800adda:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800adde:	68d8      	ldr	r0, [r3, #12]
 800ade0:	f3c0 2006 	ubfx	r0, r0, #8, #7
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ade4:	68db      	ldr	r3, [r3, #12]
        if(pllp == 0U)
 800ade6:	0edb      	lsrs	r3, r3, #27
 800ade8:	d105      	bne.n	800adf6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800adea:	4b22      	ldr	r3, [pc, #136]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800adf2:	d005      	beq.n	800ae00 <RCCEx_GetSAIxPeriphCLKFreq+0xc8>
            pllp = 17U;
 800adf4:	2311      	movs	r3, #17
        frequency = (pllvco * plln) / pllp;
 800adf6:	fb00 f001 	mul.w	r0, r0, r1
 800adfa:	fbb0 f0f3 	udiv	r0, r0, r3
 800adfe:	4770      	bx	lr
            pllp = 7U;
 800ae00:	2307      	movs	r3, #7
 800ae02:	e7f8      	b.n	800adf6 <RCCEx_GetSAIxPeriphCLKFreq+0xbe>
            pllp = 7U;
 800ae04:	2307      	movs	r3, #7
 800ae06:	e7c3      	b.n	800ad90 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800ae08:	2b80      	cmp	r3, #128	; 0x80
 800ae0a:	d009      	beq.n	800ae20 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
 800ae0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae10:	d006      	beq.n	800ae20 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d00a      	beq.n	800ae2c <RCCEx_GetSAIxPeriphCLKFreq+0xf4>
 800ae16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1a:	d007      	beq.n	800ae2c <RCCEx_GetSAIxPeriphCLKFreq+0xf4>
 800ae1c:	2000      	movs	r0, #0
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800ae1e:	e004      	b.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae20:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800ae28:	d122      	bne.n	800ae70 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
}
 800ae2a:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800ae2c:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ae34:	d0f9      	beq.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
 800ae36:	6958      	ldr	r0, [r3, #20]
 800ae38:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800ae3c:	d0f5      	beq.n	800ae2a <RCCEx_GetSAIxPeriphCLKFreq+0xf2>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800ae3e:	6958      	ldr	r0, [r3, #20]
 800ae40:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800ae44:	3001      	adds	r0, #1
 800ae46:	fbb1 f1f0 	udiv	r1, r1, r0
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800ae4a:	6958      	ldr	r0, [r3, #20]
 800ae4c:	f3c0 2006 	ubfx	r0, r0, #8, #7
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800ae50:	695b      	ldr	r3, [r3, #20]
        if(pllp == 0U)
 800ae52:	0edb      	lsrs	r3, r3, #27
 800ae54:	d105      	bne.n	800ae62 <RCCEx_GetSAIxPeriphCLKFreq+0x12a>
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800ae56:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>)
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ae5e:	d005      	beq.n	800ae6c <RCCEx_GetSAIxPeriphCLKFreq+0x134>
            pllp = 17U;
 800ae60:	2311      	movs	r3, #17
        frequency = (pllvco * plln) / pllp;
 800ae62:	fb00 f001 	mul.w	r0, r0, r1
 800ae66:	fbb0 f0f3 	udiv	r0, r0, r3
 800ae6a:	4770      	bx	lr
            pllp = 7U;
 800ae6c:	2307      	movs	r3, #7
 800ae6e:	e7f8      	b.n	800ae62 <RCCEx_GetSAIxPeriphCLKFreq+0x12a>
        frequency = HSI_VALUE;
 800ae70:	4802      	ldr	r0, [pc, #8]	; (800ae7c <RCCEx_GetSAIxPeriphCLKFreq+0x144>)
 800ae72:	4770      	bx	lr
 800ae74:	40021000 	.word	0x40021000
 800ae78:	001fff68 	.word	0x001fff68
 800ae7c:	00f42400 	.word	0x00f42400

0800ae80 <RCCEx_PLLSAI2_Config>:
{
 800ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ae86:	4b54      	ldr	r3, [pc, #336]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f013 0f03 	tst.w	r3, #3
 800ae8e:	d00e      	beq.n	800aeae <RCCEx_PLLSAI2_Config+0x2e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ae90:	4b51      	ldr	r3, [pc, #324]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f003 0303 	and.w	r3, r3, #3
 800ae98:	6802      	ldr	r2, [r0, #0]
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d002      	beq.n	800aea4 <RCCEx_PLLSAI2_Config+0x24>
      status = HAL_ERROR;
 800ae9e:	2501      	movs	r5, #1
}
 800aea0:	4628      	mov	r0, r5
 800aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	f000 8095 	beq.w	800afd4 <RCCEx_PLLSAI2_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 800aeaa:	2500      	movs	r5, #0
 800aeac:	e009      	b.n	800aec2 <RCCEx_PLLSAI2_Config+0x42>
    switch(PllSai2->PLLSAI2Source)
 800aeae:	6803      	ldr	r3, [r0, #0]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d054      	beq.n	800af5e <RCCEx_PLLSAI2_Config+0xde>
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d059      	beq.n	800af6c <RCCEx_PLLSAI2_Config+0xec>
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d043      	beq.n	800af44 <RCCEx_PLLSAI2_Config+0xc4>
 800aebc:	2501      	movs	r5, #1
  if(status == HAL_OK)
 800aebe:	2d00      	cmp	r5, #0
 800aec0:	d1ee      	bne.n	800aea0 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 800aec2:	4a45      	ldr	r2, [pc, #276]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800aec4:	6813      	ldr	r3, [r2, #0]
 800aec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aeca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800aecc:	f7fd fbe8 	bl	80086a0 <HAL_GetTick>
 800aed0:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800aed2:	4b41      	ldr	r3, [pc, #260]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800aeda:	d005      	beq.n	800aee8 <RCCEx_PLLSAI2_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800aedc:	f7fd fbe0 	bl	80086a0 <HAL_GetTick>
 800aee0:	1b83      	subs	r3, r0, r6
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d9f5      	bls.n	800aed2 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_TIMEOUT;
 800aee6:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800aee8:	2d00      	cmp	r5, #0
 800aeea:	d1d9      	bne.n	800aea0 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800aeec:	2f00      	cmp	r7, #0
 800aeee:	d14b      	bne.n	800af88 <RCCEx_PLLSAI2_Config+0x108>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800aef0:	4839      	ldr	r0, [pc, #228]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800aef2:	6943      	ldr	r3, [r0, #20]
 800aef4:	4a39      	ldr	r2, [pc, #228]	; (800afdc <RCCEx_PLLSAI2_Config+0x15c>)
 800aef6:	401a      	ands	r2, r3
 800aef8:	68a1      	ldr	r1, [r4, #8]
 800aefa:	68e3      	ldr	r3, [r4, #12]
 800aefc:	06db      	lsls	r3, r3, #27
 800aefe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800af02:	6861      	ldr	r1, [r4, #4]
 800af04:	3901      	subs	r1, #1
 800af06:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800af0a:	4313      	orrs	r3, r2
 800af0c:	6143      	str	r3, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800af0e:	4a32      	ldr	r2, [pc, #200]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af10:	6813      	ldr	r3, [r2, #0]
 800af12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af16:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800af18:	f7fd fbc2 	bl	80086a0 <HAL_GetTick>
 800af1c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800af1e:	4b2e      	ldr	r3, [pc, #184]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800af26:	d105      	bne.n	800af34 <RCCEx_PLLSAI2_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800af28:	f7fd fbba 	bl	80086a0 <HAL_GetTick>
 800af2c:	1b83      	subs	r3, r0, r6
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d9f5      	bls.n	800af1e <RCCEx_PLLSAI2_Config+0x9e>
          status = HAL_TIMEOUT;
 800af32:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800af34:	2d00      	cmp	r5, #0
 800af36:	d1b3      	bne.n	800aea0 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800af38:	4a27      	ldr	r2, [pc, #156]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af3a:	6953      	ldr	r3, [r2, #20]
 800af3c:	69a1      	ldr	r1, [r4, #24]
 800af3e:	430b      	orrs	r3, r1
 800af40:	6153      	str	r3, [r2, #20]
 800af42:	e7ad      	b.n	800aea0 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800af44:	4a24      	ldr	r2, [pc, #144]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	f012 0f02 	tst.w	r2, #2
 800af4c:	d01a      	beq.n	800af84 <RCCEx_PLLSAI2_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800af4e:	4922      	ldr	r1, [pc, #136]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af50:	68ca      	ldr	r2, [r1, #12]
 800af52:	f022 0203 	bic.w	r2, r2, #3
 800af56:	4313      	orrs	r3, r2
 800af58:	60cb      	str	r3, [r1, #12]
 800af5a:	2500      	movs	r5, #0
 800af5c:	e7af      	b.n	800aebe <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800af5e:	4a1e      	ldr	r2, [pc, #120]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af60:	6812      	ldr	r2, [r2, #0]
 800af62:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800af66:	d1f2      	bne.n	800af4e <RCCEx_PLLSAI2_Config+0xce>
        status = HAL_ERROR;
 800af68:	2501      	movs	r5, #1
 800af6a:	e7a8      	b.n	800aebe <RCCEx_PLLSAI2_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af6c:	4a1a      	ldr	r2, [pc, #104]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af6e:	6812      	ldr	r2, [r2, #0]
 800af70:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800af74:	d1eb      	bne.n	800af4e <RCCEx_PLLSAI2_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800af76:	4a18      	ldr	r2, [pc, #96]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af78:	6812      	ldr	r2, [r2, #0]
 800af7a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800af7e:	d1e6      	bne.n	800af4e <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_ERROR;
 800af80:	2501      	movs	r5, #1
 800af82:	e79c      	b.n	800aebe <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_ERROR;
 800af84:	2501      	movs	r5, #1
 800af86:	e79a      	b.n	800aebe <RCCEx_PLLSAI2_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 800af88:	2f01      	cmp	r7, #1
 800af8a:	d011      	beq.n	800afb0 <RCCEx_PLLSAI2_Config+0x130>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800af8c:	4812      	ldr	r0, [pc, #72]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800af8e:	6943      	ldr	r3, [r0, #20]
 800af90:	4a13      	ldr	r2, [pc, #76]	; (800afe0 <RCCEx_PLLSAI2_Config+0x160>)
 800af92:	401a      	ands	r2, r3
 800af94:	68a1      	ldr	r1, [r4, #8]
 800af96:	6963      	ldr	r3, [r4, #20]
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	3b01      	subs	r3, #1
 800af9c:	065b      	lsls	r3, r3, #25
 800af9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800afa2:	6861      	ldr	r1, [r4, #4]
 800afa4:	3901      	subs	r1, #1
 800afa6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800afaa:	4313      	orrs	r3, r2
 800afac:	6143      	str	r3, [r0, #20]
 800afae:	e7ae      	b.n	800af0e <RCCEx_PLLSAI2_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800afb0:	4809      	ldr	r0, [pc, #36]	; (800afd8 <RCCEx_PLLSAI2_Config+0x158>)
 800afb2:	6943      	ldr	r3, [r0, #20]
 800afb4:	4a0b      	ldr	r2, [pc, #44]	; (800afe4 <RCCEx_PLLSAI2_Config+0x164>)
 800afb6:	401a      	ands	r2, r3
 800afb8:	68a1      	ldr	r1, [r4, #8]
 800afba:	6923      	ldr	r3, [r4, #16]
 800afbc:	085b      	lsrs	r3, r3, #1
 800afbe:	3b01      	subs	r3, #1
 800afc0:	055b      	lsls	r3, r3, #21
 800afc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800afc6:	6861      	ldr	r1, [r4, #4]
 800afc8:	3901      	subs	r1, #1
 800afca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800afce:	4313      	orrs	r3, r2
 800afd0:	6143      	str	r3, [r0, #20]
 800afd2:	e79c      	b.n	800af0e <RCCEx_PLLSAI2_Config+0x8e>
      status = HAL_ERROR;
 800afd4:	2501      	movs	r5, #1
 800afd6:	e763      	b.n	800aea0 <RCCEx_PLLSAI2_Config+0x20>
 800afd8:	40021000 	.word	0x40021000
 800afdc:	07ff800f 	.word	0x07ff800f
 800afe0:	f9ff800f 	.word	0xf9ff800f
 800afe4:	ff9f800f 	.word	0xff9f800f

0800afe8 <RCCEx_PLLSAI1_Config>:
{
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	4604      	mov	r4, r0
 800afec:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800afee:	4b54      	ldr	r3, [pc, #336]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f013 0f03 	tst.w	r3, #3
 800aff6:	d00e      	beq.n	800b016 <RCCEx_PLLSAI1_Config+0x2e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800aff8:	4b51      	ldr	r3, [pc, #324]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	f003 0303 	and.w	r3, r3, #3
 800b000:	6802      	ldr	r2, [r0, #0]
 800b002:	4293      	cmp	r3, r2
 800b004:	d002      	beq.n	800b00c <RCCEx_PLLSAI1_Config+0x24>
      status = HAL_ERROR;
 800b006:	2501      	movs	r5, #1
}
 800b008:	4628      	mov	r0, r5
 800b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800b00c:	2a00      	cmp	r2, #0
 800b00e:	f000 8095 	beq.w	800b13c <RCCEx_PLLSAI1_Config+0x154>
  HAL_StatusTypeDef status = HAL_OK;
 800b012:	2500      	movs	r5, #0
 800b014:	e009      	b.n	800b02a <RCCEx_PLLSAI1_Config+0x42>
    switch(PllSai1->PLLSAI1Source)
 800b016:	6803      	ldr	r3, [r0, #0]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d054      	beq.n	800b0c6 <RCCEx_PLLSAI1_Config+0xde>
 800b01c:	2b03      	cmp	r3, #3
 800b01e:	d059      	beq.n	800b0d4 <RCCEx_PLLSAI1_Config+0xec>
 800b020:	2b01      	cmp	r3, #1
 800b022:	d043      	beq.n	800b0ac <RCCEx_PLLSAI1_Config+0xc4>
 800b024:	2501      	movs	r5, #1
  if(status == HAL_OK)
 800b026:	2d00      	cmp	r5, #0
 800b028:	d1ee      	bne.n	800b008 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800b02a:	4a45      	ldr	r2, [pc, #276]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b02c:	6813      	ldr	r3, [r2, #0]
 800b02e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b032:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b034:	f7fd fb34 	bl	80086a0 <HAL_GetTick>
 800b038:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b03a:	4b41      	ldr	r3, [pc, #260]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b042:	d005      	beq.n	800b050 <RCCEx_PLLSAI1_Config+0x68>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b044:	f7fd fb2c 	bl	80086a0 <HAL_GetTick>
 800b048:	1b83      	subs	r3, r0, r6
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d9f5      	bls.n	800b03a <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_TIMEOUT;
 800b04e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800b050:	2d00      	cmp	r5, #0
 800b052:	d1d9      	bne.n	800b008 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800b054:	2f00      	cmp	r7, #0
 800b056:	d14b      	bne.n	800b0f0 <RCCEx_PLLSAI1_Config+0x108>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b058:	4839      	ldr	r0, [pc, #228]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b05a:	6903      	ldr	r3, [r0, #16]
 800b05c:	4a39      	ldr	r2, [pc, #228]	; (800b144 <RCCEx_PLLSAI1_Config+0x15c>)
 800b05e:	401a      	ands	r2, r3
 800b060:	68a1      	ldr	r1, [r4, #8]
 800b062:	68e3      	ldr	r3, [r4, #12]
 800b064:	06db      	lsls	r3, r3, #27
 800b066:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b06a:	6861      	ldr	r1, [r4, #4]
 800b06c:	3901      	subs	r1, #1
 800b06e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800b072:	4313      	orrs	r3, r2
 800b074:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800b076:	4a32      	ldr	r2, [pc, #200]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b078:	6813      	ldr	r3, [r2, #0]
 800b07a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b07e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800b080:	f7fd fb0e 	bl	80086a0 <HAL_GetTick>
 800b084:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b086:	4b2e      	ldr	r3, [pc, #184]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b08e:	d105      	bne.n	800b09c <RCCEx_PLLSAI1_Config+0xb4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b090:	f7fd fb06 	bl	80086a0 <HAL_GetTick>
 800b094:	1b83      	subs	r3, r0, r6
 800b096:	2b02      	cmp	r3, #2
 800b098:	d9f5      	bls.n	800b086 <RCCEx_PLLSAI1_Config+0x9e>
          status = HAL_TIMEOUT;
 800b09a:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800b09c:	2d00      	cmp	r5, #0
 800b09e:	d1b3      	bne.n	800b008 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b0a0:	4a27      	ldr	r2, [pc, #156]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0a2:	6913      	ldr	r3, [r2, #16]
 800b0a4:	69a1      	ldr	r1, [r4, #24]
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	6113      	str	r3, [r2, #16]
 800b0aa:	e7ad      	b.n	800b008 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b0ac:	4a24      	ldr	r2, [pc, #144]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0ae:	6812      	ldr	r2, [r2, #0]
 800b0b0:	f012 0f02 	tst.w	r2, #2
 800b0b4:	d01a      	beq.n	800b0ec <RCCEx_PLLSAI1_Config+0x104>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b0b6:	4922      	ldr	r1, [pc, #136]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0b8:	68ca      	ldr	r2, [r1, #12]
 800b0ba:	f022 0203 	bic.w	r2, r2, #3
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60cb      	str	r3, [r1, #12]
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	e7af      	b.n	800b026 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b0c6:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0c8:	6812      	ldr	r2, [r2, #0]
 800b0ca:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800b0ce:	d1f2      	bne.n	800b0b6 <RCCEx_PLLSAI1_Config+0xce>
        status = HAL_ERROR;
 800b0d0:	2501      	movs	r5, #1
 800b0d2:	e7a8      	b.n	800b026 <RCCEx_PLLSAI1_Config+0x3e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b0d4:	4a1a      	ldr	r2, [pc, #104]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800b0dc:	d1eb      	bne.n	800b0b6 <RCCEx_PLLSAI1_Config+0xce>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b0de:	4a18      	ldr	r2, [pc, #96]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0e0:	6812      	ldr	r2, [r2, #0]
 800b0e2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800b0e6:	d1e6      	bne.n	800b0b6 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_ERROR;
 800b0e8:	2501      	movs	r5, #1
 800b0ea:	e79c      	b.n	800b026 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_ERROR;
 800b0ec:	2501      	movs	r5, #1
 800b0ee:	e79a      	b.n	800b026 <RCCEx_PLLSAI1_Config+0x3e>
      else if(Divider == DIVIDER_Q_UPDATE)
 800b0f0:	2f01      	cmp	r7, #1
 800b0f2:	d011      	beq.n	800b118 <RCCEx_PLLSAI1_Config+0x130>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b0f4:	4812      	ldr	r0, [pc, #72]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b0f6:	6903      	ldr	r3, [r0, #16]
 800b0f8:	4a13      	ldr	r2, [pc, #76]	; (800b148 <RCCEx_PLLSAI1_Config+0x160>)
 800b0fa:	401a      	ands	r2, r3
 800b0fc:	68a1      	ldr	r1, [r4, #8]
 800b0fe:	6963      	ldr	r3, [r4, #20]
 800b100:	085b      	lsrs	r3, r3, #1
 800b102:	3b01      	subs	r3, #1
 800b104:	065b      	lsls	r3, r3, #25
 800b106:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b10a:	6861      	ldr	r1, [r4, #4]
 800b10c:	3901      	subs	r1, #1
 800b10e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800b112:	4313      	orrs	r3, r2
 800b114:	6103      	str	r3, [r0, #16]
 800b116:	e7ae      	b.n	800b076 <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b118:	4809      	ldr	r0, [pc, #36]	; (800b140 <RCCEx_PLLSAI1_Config+0x158>)
 800b11a:	6903      	ldr	r3, [r0, #16]
 800b11c:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <RCCEx_PLLSAI1_Config+0x164>)
 800b11e:	401a      	ands	r2, r3
 800b120:	68a1      	ldr	r1, [r4, #8]
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	085b      	lsrs	r3, r3, #1
 800b126:	3b01      	subs	r3, #1
 800b128:	055b      	lsls	r3, r3, #21
 800b12a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b12e:	6861      	ldr	r1, [r4, #4]
 800b130:	3901      	subs	r1, #1
 800b132:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800b136:	4313      	orrs	r3, r2
 800b138:	6103      	str	r3, [r0, #16]
 800b13a:	e79c      	b.n	800b076 <RCCEx_PLLSAI1_Config+0x8e>
      status = HAL_ERROR;
 800b13c:	2501      	movs	r5, #1
 800b13e:	e763      	b.n	800b008 <RCCEx_PLLSAI1_Config+0x20>
 800b140:	40021000 	.word	0x40021000
 800b144:	07ff800f 	.word	0x07ff800f
 800b148:	f9ff800f 	.word	0xf9ff800f
 800b14c:	ff9f800f 	.word	0xff9f800f

0800b150 <HAL_RCCEx_PeriphCLKConfig>:
{
 800b150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b158:	6803      	ldr	r3, [r0, #0]
 800b15a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b15e:	d034      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b160:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b162:	2b40      	cmp	r3, #64	; 0x40
 800b164:	d01f      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b166:	d80b      	bhi.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800b168:	b323      	cbz	r3, 800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b16a:	2b20      	cmp	r3, #32
 800b16c:	d105      	bne.n	800b17a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b16e:	2100      	movs	r1, #0
 800b170:	3020      	adds	r0, #32
 800b172:	f7ff fe85 	bl	800ae80 <RCCEx_PLLSAI2_Config>
 800b176:	4606      	mov	r6, r0
      break;
 800b178:	e021      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b17a:	2701      	movs	r7, #1
 800b17c:	463e      	mov	r6, r7
 800b17e:	e026      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800b180:	2b60      	cmp	r3, #96	; 0x60
 800b182:	d020      	beq.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b184:	2b80      	cmp	r3, #128	; 0x80
 800b186:	d10b      	bne.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800b188:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b18a:	4a65      	ldr	r2, [pc, #404]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b18c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b190:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b194:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b196:	430b      	orrs	r3, r1
 800b198:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b19c:	2700      	movs	r7, #0
 800b19e:	e016      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b1a0:	2701      	movs	r7, #1
 800b1a2:	463e      	mov	r6, r7
 800b1a4:	e013      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b1a6:	4a5e      	ldr	r2, [pc, #376]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b1a8:	68d3      	ldr	r3, [r2, #12]
 800b1aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1ae:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	e7ea      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	3004      	adds	r0, #4
 800b1b8:	f7ff ff16 	bl	800afe8 <RCCEx_PLLSAI1_Config>
 800b1bc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	d0e3      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800b1c2:	4637      	mov	r7, r6
 800b1c4:	e003      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	e7df      	b.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b1ca:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1cc:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800b1d4:	d024      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b1d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1dc:	d07c      	beq.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800b1de:	d80e      	bhi.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xae>
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d07f      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 800b1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e8:	d106      	bne.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	f104 0020 	add.w	r0, r4, #32
 800b1f0:	f7ff fe46 	bl	800ae80 <RCCEx_PLLSAI2_Config>
 800b1f4:	4606      	mov	r6, r0
      break;
 800b1f6:	e008      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xba>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b1f8:	2701      	movs	r7, #1
 800b1fa:	463e      	mov	r6, r7
 800b1fc:	e010      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800b1fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b202:	d002      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xba>
 800b204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b208:	d163      	bne.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    if(ret == HAL_OK)
 800b20a:	2e00      	cmp	r6, #0
 800b20c:	d170      	bne.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b20e:	4a44      	ldr	r2, [pc, #272]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b210:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b214:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b218:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b21a:	430b      	orrs	r3, r1
 800b21c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b226:	f000 8084 	beq.w	800b332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b22a:	4b3d      	ldr	r3, [pc, #244]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b22e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800b232:	d15f      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b234:	4b3a      	ldr	r3, [pc, #232]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b23c:	659a      	str	r2, [r3, #88]	; 0x58
 800b23e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b248:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b24c:	4a35      	ldr	r2, [pc, #212]	; (800b324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b24e:	6813      	ldr	r3, [r2, #0]
 800b250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b254:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b256:	f7fd fa23 	bl	80086a0 <HAL_GetTick>
 800b25a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b25c:	4b31      	ldr	r3, [pc, #196]	; (800b324 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b264:	d105      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x122>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b266:	f7fd fa1b 	bl	80086a0 <HAL_GetTick>
 800b26a:	1b40      	subs	r0, r0, r5
 800b26c:	2802      	cmp	r0, #2
 800b26e:	d9f5      	bls.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        ret = HAL_TIMEOUT;
 800b270:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 800b272:	2e00      	cmp	r6, #0
 800b274:	d158      	bne.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b276:	4b2a      	ldr	r3, [pc, #168]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b27c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800b280:	d016      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b282:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b286:	429a      	cmp	r2, r3
 800b288:	d012      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b28a:	4a25      	ldr	r2, [pc, #148]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b28c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b294:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800b298:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800b29c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2a0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800b2a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b2a8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800b2ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b2b0:	f013 0f01 	tst.w	r3, #1
 800b2b4:	d121      	bne.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      if(ret == HAL_OK)
 800b2b6:	2e00      	cmp	r6, #0
 800b2b8:	f040 816b 	bne.w	800b592 <HAL_RCCEx_PeriphCLKConfig+0x442>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2bc:	4a18      	ldr	r2, [pc, #96]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b2c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2c6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b2d0:	e02b      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch(PeriphClkInit->Sai2ClockSelection)
 800b2d2:	2701      	movs	r7, #1
 800b2d4:	463e      	mov	r6, r7
 800b2d6:	e7a3      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b2d8:	4a11      	ldr	r2, [pc, #68]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b2da:	68d3      	ldr	r3, [r2, #12]
 800b2dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2e0:	60d3      	str	r3, [r2, #12]
      break;
 800b2e2:	e792      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	1d20      	adds	r0, r4, #4
 800b2e8:	f7ff fe7e 	bl	800afe8 <RCCEx_PLLSAI1_Config>
 800b2ec:	4606      	mov	r6, r0
      break;
 800b2ee:	e78c      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0xba>
 800b2f0:	4637      	mov	r7, r6
 800b2f2:	e795      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    FlagStatus       pwrclkchanged = RESET;
 800b2f4:	f04f 0800 	mov.w	r8, #0
 800b2f8:	e7a8      	b.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0xfc>
        tickstart = HAL_GetTick();
 800b2fa:	f7fd f9d1 	bl	80086a0 <HAL_GetTick>
 800b2fe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b306:	f013 0f02 	tst.w	r3, #2
 800b30a:	d1d4      	bne.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b30c:	f7fd f9c8 	bl	80086a0 <HAL_GetTick>
 800b310:	1b40      	subs	r0, r0, r5
 800b312:	f241 3388 	movw	r3, #5000	; 0x1388
 800b316:	4298      	cmp	r0, r3
 800b318:	d9f2      	bls.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            ret = HAL_TIMEOUT;
 800b31a:	2603      	movs	r6, #3
 800b31c:	e7cb      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800b31e:	bf00      	nop
 800b320:	40021000 	.word	0x40021000
 800b324:	40007000 	.word	0x40007000
      status = ret;
 800b328:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 800b32a:	f1b8 0f00 	cmp.w	r8, #0
 800b32e:	f040 8132 	bne.w	800b596 <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	f013 0f01 	tst.w	r3, #1
 800b338:	d008      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b33a:	4abd      	ldr	r2, [pc, #756]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b33c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b340:	f023 0303 	bic.w	r3, r3, #3
 800b344:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b346:	430b      	orrs	r3, r1
 800b348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	f013 0f02 	tst.w	r3, #2
 800b352:	d008      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b354:	4ab6      	ldr	r2, [pc, #728]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b356:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b35a:	f023 030c 	bic.w	r3, r3, #12
 800b35e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b360:	430b      	orrs	r3, r1
 800b362:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	f013 0f04 	tst.w	r3, #4
 800b36c:	d008      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x230>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b36e:	4ab0      	ldr	r2, [pc, #704]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b370:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b374:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b378:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b37a:	430b      	orrs	r3, r1
 800b37c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	f013 0f08 	tst.w	r3, #8
 800b386:	d008      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x24a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b388:	4aa9      	ldr	r2, [pc, #676]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b38a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b38e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b392:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b394:	430b      	orrs	r3, r1
 800b396:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	f013 0f10 	tst.w	r3, #16
 800b3a0:	d008      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b3a2:	4aa3      	ldr	r2, [pc, #652]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b3a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b3a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b3ae:	430b      	orrs	r3, r1
 800b3b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	f013 0f20 	tst.w	r3, #32
 800b3ba:	d008      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b3bc:	4a9c      	ldr	r2, [pc, #624]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b3be:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b3c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b3c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b3d4:	d008      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3d6:	4a96      	ldr	r2, [pc, #600]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b3d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b3dc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800b3e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b3e2:	430b      	orrs	r3, r1
 800b3e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b3e8:	6823      	ldr	r3, [r4, #0]
 800b3ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800b3ee:	d008      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3f0:	4a8f      	ldr	r2, [pc, #572]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b3f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b3f6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b3fa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b408:	d008      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b40a:	4a89      	ldr	r2, [pc, #548]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b40c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b410:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b414:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b416:	430b      	orrs	r3, r1
 800b418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b422:	d008      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b424:	4a82      	ldr	r2, [pc, #520]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b426:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b42a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b42e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b430:	430b      	orrs	r3, r1
 800b432:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b43c:	d008      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b43e:	4a7c      	ldr	r2, [pc, #496]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b440:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b444:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b448:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b44a:	430b      	orrs	r3, r1
 800b44c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b456:	d008      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b458:	4a75      	ldr	r2, [pc, #468]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b45a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b45e:	f023 0303 	bic.w	r3, r3, #3
 800b462:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b464:	430b      	orrs	r3, r1
 800b466:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b46a:	6823      	ldr	r3, [r4, #0]
 800b46c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b470:	d011      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x346>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b472:	4a6f      	ldr	r2, [pc, #444]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b474:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b478:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b47c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b47e:	430b      	orrs	r3, r1
 800b480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b484:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b48a:	f000 808a 	beq.w	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b48e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b492:	f000 808b 	beq.w	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x45c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800b49c:	d01f      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b49e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b4a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a4:	f000 808b 	beq.w	800b5be <HAL_RCCEx_PeriphCLKConfig+0x46e>
 800b4a8:	4a61      	ldr	r2, [pc, #388]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b4aa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b4ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b4b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b4ba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b4be:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b4c0:	430b      	orrs	r3, r1
 800b4c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b4c6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b4c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4cc:	d07f      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x47e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b4ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4d2:	f000 8082 	beq.w	800b5da <HAL_RCCEx_PeriphCLKConfig+0x48a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b4d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4da:	f000 8084 	beq.w	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0x496>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b4e4:	d00f      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4e6:	4a52      	ldr	r2, [pc, #328]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b4e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b4ec:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800b4f0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b4f2:	430b      	orrs	r3, r1
 800b4f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b4f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b4fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4fe:	d07b      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b504:	d07d      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b50c:	d00e      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b50e:	4a48      	ldr	r2, [pc, #288]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b510:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b514:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b518:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b51c:	430b      	orrs	r3, r1
 800b51e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b522:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b52a:	d073      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b532:	d009      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b534:	4a3e      	ldr	r2, [pc, #248]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b536:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b53a:	f023 0304 	bic.w	r3, r3, #4
 800b53e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800b542:	430b      	orrs	r3, r1
 800b544:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800b54e:	d009      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x414>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b550:	4a37      	ldr	r2, [pc, #220]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b552:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b556:	f023 0318 	bic.w	r3, r3, #24
 800b55a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b55e:	430b      	orrs	r3, r1
 800b560:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b56a:	d00e      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b56c:	4a30      	ldr	r2, [pc, #192]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b56e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b572:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b576:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b57a:	430b      	orrs	r3, r1
 800b57c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b580:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b588:	d04c      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
}
 800b58a:	4638      	mov	r0, r7
 800b58c:	b002      	add	sp, #8
 800b58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800b592:	4637      	mov	r7, r6
 800b594:	e6c9      	b.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b596:	4a26      	ldr	r2, [pc, #152]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b598:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b59a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b59e:	6593      	str	r3, [r2, #88]	; 0x58
 800b5a0:	e6c7      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5a2:	68d3      	ldr	r3, [r2, #12]
 800b5a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5a8:	60d3      	str	r3, [r2, #12]
 800b5aa:	e774      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x346>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	1d20      	adds	r0, r4, #4
 800b5b0:	f7ff fd1a 	bl	800afe8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f43f af6e 	beq.w	800b496 <HAL_RCCEx_PeriphCLKConfig+0x346>
          status = ret;
 800b5ba:	4607      	mov	r7, r0
 800b5bc:	e76b      	b.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x346>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b5be:	4a1c      	ldr	r2, [pc, #112]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b5c0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800b5c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b5c8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b5cc:	e77b      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5ce:	4a18      	ldr	r2, [pc, #96]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b5d0:	68d3      	ldr	r3, [r2, #12]
 800b5d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5d6:	60d3      	str	r3, [r2, #12]
 800b5d8:	e781      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 800b5dc:	68d3      	ldr	r3, [r2, #12]
 800b5de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5e2:	60d3      	str	r3, [r2, #12]
 800b5e4:	e77b      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	1d20      	adds	r0, r4, #4
 800b5ea:	f7ff fcfd 	bl	800afe8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	f43f af75 	beq.w	800b4de <HAL_RCCEx_PeriphCLKConfig+0x38e>
        status = ret;
 800b5f4:	4607      	mov	r7, r0
 800b5f6:	e772      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5f8:	68d3      	ldr	r3, [r2, #12]
 800b5fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5fe:	60d3      	str	r3, [r2, #12]
 800b600:	e781      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b602:	2101      	movs	r1, #1
 800b604:	1d20      	adds	r0, r4, #4
 800b606:	f7ff fcef 	bl	800afe8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800b60a:	2800      	cmp	r0, #0
 800b60c:	f43f af7b 	beq.w	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        status = ret;
 800b610:	4607      	mov	r7, r0
 800b612:	e778      	b.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b614:	2102      	movs	r1, #2
 800b616:	1d20      	adds	r0, r4, #4
 800b618:	f7ff fce6 	bl	800afe8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d085      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        status = ret;
 800b620:	4607      	mov	r7, r0
 800b622:	e783      	b.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b624:	68d3      	ldr	r3, [r2, #12]
 800b626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b62a:	60d3      	str	r3, [r2, #12]
 800b62c:	e7ad      	b.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800b62e:	bf00      	nop
 800b630:	40021000 	.word	0x40021000

0800b634 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 800b634:	b508      	push	{r3, lr}
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800b636:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800b63a:	d03c      	beq.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b63c:	4bbd      	ldr	r3, [pc, #756]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f003 0303 	and.w	r3, r3, #3
    switch(pll_oscsource)
 800b644:	2b02      	cmp	r3, #2
 800b646:	d07d      	beq.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b648:	2b03      	cmp	r3, #3
 800b64a:	f000 8082 	beq.w	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d061      	beq.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800b652:	2100      	movs	r1, #0
    switch(PeriphClk)
 800b654:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b658:	f000 8418 	beq.w	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800b65c:	f200 80c0 	bhi.w	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800b660:	2820      	cmp	r0, #32
 800b662:	d87e      	bhi.n	800b762 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
 800b664:	2800      	cmp	r0, #0
 800b666:	f000 847f 	beq.w	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800b66a:	3801      	subs	r0, #1
 800b66c:	281f      	cmp	r0, #31
 800b66e:	f200 847d 	bhi.w	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b672:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b676:	0235      	.short	0x0235
 800b678:	047b0259 	.word	0x047b0259
 800b67c:	047b0288 	.word	0x047b0288
 800b680:	047b047b 	.word	0x047b047b
 800b684:	047b02b1 	.word	0x047b02b1
 800b688:	047b047b 	.word	0x047b047b
 800b68c:	047b047b 	.word	0x047b047b
 800b690:	047b047b 	.word	0x047b047b
 800b694:	047b02e3 	.word	0x047b02e3
 800b698:	047b047b 	.word	0x047b047b
 800b69c:	047b047b 	.word	0x047b047b
 800b6a0:	047b047b 	.word	0x047b047b
 800b6a4:	047b047b 	.word	0x047b047b
 800b6a8:	047b047b 	.word	0x047b047b
 800b6ac:	047b047b 	.word	0x047b047b
 800b6b0:	047b047b 	.word	0x047b047b
 800b6b4:	030f      	.short	0x030f
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b6b6:	4b9f      	ldr	r3, [pc, #636]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
    switch(srcclk)
 800b6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6c4:	d013      	beq.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800b6c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6ca:	d01b      	beq.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800b6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d0:	d002      	beq.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	f000 bc49 	b.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b6d8:	4b96      	ldr	r3, [pc, #600]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b6da:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800b6de:	f010 0002 	ands.w	r0, r0, #2
 800b6e2:	f000 8442 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        frequency = LSE_VALUE;
 800b6e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b6ea:	f000 bc3e 	b.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b6ee:	4b91      	ldr	r3, [pc, #580]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b6f0:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800b6f4:	f010 0002 	ands.w	r0, r0, #2
 800b6f8:	f000 8437 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = LSI_VALUE;
 800b6fc:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800b700:	f000 bc33 	b.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b704:	4b8b      	ldr	r3, [pc, #556]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b70c:	f000 842d 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        frequency = HSE_VALUE / 32U;
 800b710:	4889      	ldr	r0, [pc, #548]	; (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800b712:	f000 bc2a 	b.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b716:	4b87      	ldr	r3, [pc, #540]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b718:	6819      	ldr	r1, [r3, #0]
 800b71a:	f011 0102 	ands.w	r1, r1, #2
 800b71e:	d099      	beq.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f013 0f08 	tst.w	r3, #8
 800b726:	d007      	beq.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b728:	4b82      	ldr	r3, [pc, #520]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b730:	4a82      	ldr	r2, [pc, #520]	; (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800b732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b736:	e78d      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 800b738:	4b7e      	ldr	r3, [pc, #504]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b73a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b73e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b742:	e7f5      	b.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b744:	4b7b      	ldr	r3, [pc, #492]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b746:	6819      	ldr	r1, [r3, #0]
 800b748:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 800b74c:	d082      	beq.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        pllvco = HSI_VALUE;
 800b74e:	497c      	ldr	r1, [pc, #496]	; (800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800b750:	e780      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b752:	4b78      	ldr	r3, [pc, #480]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b754:	6819      	ldr	r1, [r3, #0]
 800b756:	f411 3100 	ands.w	r1, r1, #131072	; 0x20000
 800b75a:	f43f af7b 	beq.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        pllvco = HSE_VALUE;
 800b75e:	4979      	ldr	r1, [pc, #484]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800b760:	e778      	b.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
    switch(PeriphClk)
 800b762:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b766:	f000 834d 	beq.w	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800b76a:	d91e      	bls.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b76c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800b770:	d134      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b772:	4b70      	ldr	r3, [pc, #448]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b778:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
        switch(srcclk)
 800b77c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b780:	f000 837d 	beq.w	800be7e <HAL_RCCEx_GetPeriphCLKFreq+0x84a>
 800b784:	f200 836a 	bhi.w	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 8375 	beq.w	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800b78e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b792:	f040 8361 	bne.w	800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b796:	4b67      	ldr	r3, [pc, #412]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b798:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800b79c:	f010 0002 	ands.w	r0, r0, #2
 800b7a0:	f000 83e3 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              frequency = LSI_VALUE;
 800b7a4:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800b7a8:	e3df      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800b7aa:	2840      	cmp	r0, #64	; 0x40
 800b7ac:	f000 8300 	beq.w	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
 800b7b0:	2880      	cmp	r0, #128	; 0x80
 800b7b2:	d111      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b7b4:	4b5f      	ldr	r3, [pc, #380]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
        switch(srcclk)
 800b7be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7c2:	f000 8314 	beq.w	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x7ba>
 800b7c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7ca:	f000 8313 	beq.w	800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 830a 	beq.w	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e3c8      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800b7d8:	2000      	movs	r0, #0
 800b7da:	e3c6      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e3c4      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b7e0:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800b7e4:	d05e      	beq.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 800b7e6:	d919      	bls.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800b7e8:	f5b0 1f00 	cmp.w	r0, #2097152	; 0x200000
 800b7ec:	f000 82af 	beq.w	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 800b7f0:	d938      	bls.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800b7f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800b7f6:	d14e      	bne.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b7f8:	4b4e      	ldr	r3, [pc, #312]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b7fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 800b802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b806:	f000 837b 	beq.w	800bf00 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800b80a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b80e:	f000 838e 	beq.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 836a 	beq.w	800beec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800b818:	2000      	movs	r0, #0
  return(frequency);
 800b81a:	e3a6      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800b81c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800b820:	d040      	beq.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 800b822:	d910      	bls.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 800b824:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b828:	f000 8260 	beq.w	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800b82c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800b830:	d116      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800b832:	4b40      	ldr	r3, [pc, #256]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800b838:	f013 0f04 	tst.w	r3, #4
 800b83c:	f040 8284 	bne.w	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
          frequency = HAL_RCC_GetPCLK2Freq();
 800b840:	f7ff fa4a 	bl	800acd8 <HAL_RCC_GetPCLK2Freq>
 800b844:	e391      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800b846:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b84a:	d026      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800b84c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b850:	d104      	bne.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800b852:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b856:	f7ff fa6f 	bl	800ad38 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 800b85a:	e386      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800b85c:	2000      	movs	r0, #0
 800b85e:	e384      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b860:	2000      	movs	r0, #0
 800b862:	e382      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b864:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 800b868:	f000 809c 	beq.w	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b86c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 800b870:	d10f      	bne.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b872:	4b30      	ldr	r3, [pc, #192]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b878:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	f000 82e0 	beq.w	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800b882:	2b02      	cmp	r3, #2
 800b884:	f000 82e0 	beq.w	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 82d7 	beq.w	800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800b88e:	2000      	movs	r0, #0
 800b890:	e36b      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800b892:	2000      	movs	r0, #0
 800b894:	e369      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b896:	2000      	movs	r0, #0
 800b898:	e367      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800b89a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b89e:	f7ff fa4b 	bl	800ad38 <RCCEx_GetSAIxPeriphCLKFreq>
      break;
 800b8a2:	e362      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800b8a4:	4b23      	ldr	r3, [pc, #140]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8aa:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 800b8ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8b2:	d04f      	beq.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800b8b4:	d825      	bhi.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d06b      	beq.n	800b992 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800b8ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8be:	d11e      	bne.n	800b8fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800b8c0:	4b1c      	ldr	r3, [pc, #112]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b8c8:	f000 834f 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800b8cc:	6918      	ldr	r0, [r3, #16]
 800b8ce:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800b8d2:	f000 834a 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b8de:	fb03 f001 	mul.w	r0, r3, r1
 800b8e2:	6913      	ldr	r3, [r2, #16]
 800b8e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800b8ee:	6913      	ldr	r3, [r2, #16]
 800b8f0:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	fbb0 f0f3 	udiv	r0, r0, r3
 800b8fc:	e335      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b8fe:	2000      	movs	r0, #0
 800b900:	e333      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b902:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b906:	f040 8333 	bne.w	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b90a:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 800b90e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	f010 0002 	ands.w	r0, r0, #2
 800b918:	f000 8327 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f013 0f08 	tst.w	r3, #8
 800b922:	d011      	beq.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800b924:	4b03      	ldr	r3, [pc, #12]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b92c:	4a03      	ldr	r2, [pc, #12]	; (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800b92e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b932:	e31a      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b934:	40021000 	.word	0x40021000
 800b938:	0003d090 	.word	0x0003d090
 800b93c:	0802f43c 	.word	0x0802f43c
 800b940:	00f42400 	.word	0x00f42400
 800b944:	007a1200 	.word	0x007a1200
 800b948:	4bb8      	ldr	r3, [pc, #736]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800b94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b94e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b952:	e7eb      	b.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b954:	4bb5      	ldr	r3, [pc, #724]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800b956:	6818      	ldr	r0, [r3, #0]
 800b958:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b95c:	f000 8305 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b960:	68d8      	ldr	r0, [r3, #12]
 800b962:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800b966:	f000 8300 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b96a:	461a      	mov	r2, r3
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b972:	fb03 f001 	mul.w	r0, r3, r1
 800b976:	68d3      	ldr	r3, [r2, #12]
 800b978:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b97c:	3301      	adds	r3, #1
 800b97e:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b982:	68d3      	ldr	r3, [r2, #12]
 800b984:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800b988:	3301      	adds	r3, #1
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	fbb0 f0f3 	udiv	r0, r0, r3
 800b990:	e2eb      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800b992:	4ba6      	ldr	r3, [pc, #664]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800b994:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800b998:	f010 0002 	ands.w	r0, r0, #2
 800b99c:	f000 82e5 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI48_VALUE;
 800b9a0:	48a3      	ldr	r0, [pc, #652]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 800b9a2:	e2e2      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800b9a4:	4ba1      	ldr	r3, [pc, #644]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800b9a6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800b9aa:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800b9ae:	d022      	beq.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b9b6:	f000 82d8 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800b9ba:	68d8      	ldr	r0, [r3, #12]
 800b9bc:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800b9c0:	f000 82d3 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b9cc:	fb03 f001 	mul.w	r0, r3, r1
 800b9d0:	68d3      	ldr	r3, [r2, #12]
 800b9d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	fbb0 f0f3 	udiv	r0, r0, r3
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800b9dc:	68d3      	ldr	r3, [r2, #12]
            if(pllp == 0U)
 800b9de:	0edb      	lsrs	r3, r3, #27
 800b9e0:	d104      	bne.n	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800b9e2:	68d3      	ldr	r3, [r2, #12]
 800b9e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b9e8:	d003      	beq.n	800b9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
                pllp = 17U;
 800b9ea:	2311      	movs	r3, #17
            frequency = (pllvco / pllp);
 800b9ec:	fbb0 f0f3 	udiv	r0, r0, r3
 800b9f0:	e2bb      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
                pllp = 7U;
 800b9f2:	2307      	movs	r3, #7
 800b9f4:	e7fa      	b.n	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800b9f6:	4b8d      	ldr	r3, [pc, #564]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800b9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9fc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
        switch(srcclk)
 800ba00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba04:	d044      	beq.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
 800ba06:	d824      	bhi.n	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d060      	beq.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
 800ba0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ba10:	f040 82ab 	bne.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800ba14:	4b85      	ldr	r3, [pc, #532]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800ba16:	6818      	ldr	r0, [r3, #0]
 800ba18:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ba1c:	f000 82a5 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800ba20:	6918      	ldr	r0, [r3, #16]
 800ba22:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800ba26:	f000 82a0 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800ba32:	fb03 f001 	mul.w	r0, r3, r1
 800ba36:	6913      	ldr	r3, [r2, #16]
 800ba38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800ba42:	6913      	ldr	r3, [r2, #16]
 800ba44:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800ba48:	3301      	adds	r3, #1
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	fbb0 f0f3 	udiv	r0, r0, r3
 800ba50:	e28b      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ba52:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ba56:	f040 8288 	bne.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ba5a:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 800ba5e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ba62:	6818      	ldr	r0, [r3, #0]
 800ba64:	f010 0002 	ands.w	r0, r0, #2
 800ba68:	f000 827f 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f013 0f08 	tst.w	r3, #8
 800ba72:	d007      	beq.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800ba74:	4b6d      	ldr	r3, [pc, #436]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ba7c:	4a6d      	ldr	r2, [pc, #436]	; (800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x600>)
 800ba7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ba82:	e272      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ba84:	4b69      	ldr	r3, [pc, #420]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800ba86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba8a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ba8e:	e7f5      	b.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ba90:	4b66      	ldr	r3, [pc, #408]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ba98:	f000 8267 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800ba9c:	68d8      	ldr	r0, [r3, #12]
 800ba9e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800baa2:	f000 8262 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800baa6:	461a      	mov	r2, r3
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800baae:	fb03 f001 	mul.w	r0, r3, r1
 800bab2:	68d3      	ldr	r3, [r2, #12]
 800bab4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bab8:	3301      	adds	r3, #1
 800baba:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800babe:	68d3      	ldr	r3, [r2, #12]
 800bac0:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800bac4:	3301      	adds	r3, #1
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	fbb0 f0f3 	udiv	r0, r0, r3
 800bacc:	e24d      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800bace:	4b57      	ldr	r3, [pc, #348]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bad0:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 800bad4:	f010 0002 	ands.w	r0, r0, #2
 800bad8:	f000 8247 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI48_VALUE;
 800badc:	4854      	ldr	r0, [pc, #336]	; (800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>)
 800bade:	e244      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bae0:	4b52      	ldr	r3, [pc, #328]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae6:	f003 0303 	and.w	r3, r3, #3
        switch(srcclk)
 800baea:	2b03      	cmp	r3, #3
 800baec:	f200 8242 	bhi.w	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800baf0:	e8df f003 	tbb	[pc, r3]
 800baf4:	10080502 	.word	0x10080502
          frequency = HAL_RCC_GetPCLK2Freq();
 800baf8:	f7ff f8ee 	bl	800acd8 <HAL_RCC_GetPCLK2Freq>
          break;
 800bafc:	e235      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800bafe:	f7fe fc3f 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bb02:	e232      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb04:	4b49      	ldr	r3, [pc, #292]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bb06:	6818      	ldr	r0, [r3, #0]
 800bb08:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bb0c:	f000 822d 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bb10:	4849      	ldr	r0, [pc, #292]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800bb12:	e22a      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bb14:	4b45      	ldr	r3, [pc, #276]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bb16:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bb1a:	f010 0002 	ands.w	r0, r0, #2
 800bb1e:	f000 8224 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bb22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bb26:	e220      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bb28:	4b40      	ldr	r3, [pc, #256]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bb2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb2e:	f003 030c 	and.w	r3, r3, #12
        switch(srcclk)
 800bb32:	2b0c      	cmp	r3, #12
 800bb34:	f200 8220 	bhi.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800bb38:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb3c:	021e000d 	.word	0x021e000d
 800bb40:	021e021e 	.word	0x021e021e
 800bb44:	021e0010 	.word	0x021e0010
 800bb48:	021e021e 	.word	0x021e021e
 800bb4c:	021e0013 	.word	0x021e0013
 800bb50:	021e021e 	.word	0x021e021e
 800bb54:	001b      	.short	0x001b
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb56:	f7ff f8ad 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bb5a:	e206      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb5c:	f7fe fc10 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bb60:	e203      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb62:	4b32      	ldr	r3, [pc, #200]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bb64:	6818      	ldr	r0, [r3, #0]
 800bb66:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bb6a:	f000 81fe 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bb6e:	4832      	ldr	r0, [pc, #200]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800bb70:	e1fb      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bb74:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bb78:	f010 0002 	ands.w	r0, r0, #2
 800bb7c:	f000 81f5 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bb80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bb84:	e1f1      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800bb86:	4b29      	ldr	r3, [pc, #164]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        switch(srcclk)
 800bb90:	2b20      	cmp	r3, #32
 800bb92:	d019      	beq.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 800bb94:	d807      	bhi.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x572>
 800bb96:	b1a3      	cbz	r3, 800bbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800bb98:	2b10      	cmp	r3, #16
 800bb9a:	d102      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb9c:	f7fe fbf0 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bba0:	e1e3      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bba2:	2000      	movs	r0, #0
 800bba4:	e1e1      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bba6:	2b30      	cmp	r3, #48	; 0x30
 800bba8:	d109      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bbaa:	4b20      	ldr	r3, [pc, #128]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bbac:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bbb0:	f010 0002 	ands.w	r0, r0, #2
 800bbb4:	f000 81d9 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bbb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bbbc:	e1d5      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	e1d3      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bbc2:	f7ff f877 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bbc6:	e1d0      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bbc8:	4b18      	ldr	r3, [pc, #96]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bbca:	6818      	ldr	r0, [r3, #0]
 800bbcc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bbd0:	f000 81cb 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bbd4:	4818      	ldr	r0, [pc, #96]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800bbd6:	e1c8      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800bbd8:	4b14      	ldr	r3, [pc, #80]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        switch(srcclk)
 800bbe2:	2b80      	cmp	r3, #128	; 0x80
 800bbe4:	d019      	beq.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800bbe6:	d807      	bhi.n	800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800bbe8:	b1a3      	cbz	r3, 800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
 800bbea:	2b40      	cmp	r3, #64	; 0x40
 800bbec:	d102      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          frequency = HAL_RCC_GetSysClockFreq();
 800bbee:	f7fe fbc7 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bbf2:	e1ba      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e1b8      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bbf8:	2bc0      	cmp	r3, #192	; 0xc0
 800bbfa:	d109      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bbfc:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bbfe:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bc02:	f010 0002 	ands.w	r0, r0, #2
 800bc06:	f000 81b0 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bc0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bc0e:	e1ac      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e1aa      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc14:	f7ff f84e 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bc18:	e1a7      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc1a:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>)
 800bc1c:	6818      	ldr	r0, [r3, #0]
 800bc1e:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bc22:	f000 81a2 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bc26:	4804      	ldr	r0, [pc, #16]	; (800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800bc28:	e19f      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bc2a:	bf00      	nop
 800bc2c:	40021000 	.word	0x40021000
 800bc30:	02dc6c00 	.word	0x02dc6c00
 800bc34:	0802f43c 	.word	0x0802f43c
 800bc38:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800bc3c:	4bad      	ldr	r3, [pc, #692]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc42:	f403 7340 	and.w	r3, r3, #768	; 0x300
        switch(srcclk)
 800bc46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc4a:	d01b      	beq.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800bc4c:	d808      	bhi.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800bc4e:	b1b3      	cbz	r3, 800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800bc50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc54:	d102      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          frequency = HAL_RCC_GetSysClockFreq();
 800bc56:	f7fe fb93 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bc5a:	e186      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e184      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bc60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc64:	d109      	bne.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bc66:	4ba3      	ldr	r3, [pc, #652]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bc68:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bc6c:	f010 0002 	ands.w	r0, r0, #2
 800bc70:	f000 817b 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bc74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bc78:	e177      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	e175      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc7e:	f7ff f819 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bc82:	e172      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc84:	4b9b      	ldr	r3, [pc, #620]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bc86:	6818      	ldr	r0, [r3, #0]
 800bc88:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bc8c:	f000 816d 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bc90:	4899      	ldr	r0, [pc, #612]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800bc92:	e16a      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800bc94:	4b97      	ldr	r3, [pc, #604]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
        switch(srcclk)
 800bc9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca2:	d01b      	beq.n	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 800bca4:	d808      	bhi.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800bca6:	b1b3      	cbz	r3, 800bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800bca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcac:	d102      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
          frequency = HAL_RCC_GetSysClockFreq();
 800bcae:	f7fe fb67 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bcb2:	e15a      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e158      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bcb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcbc:	d109      	bne.n	800bcd2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bcbe:	4b8d      	ldr	r3, [pc, #564]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bcc0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bcc4:	f010 0002 	ands.w	r0, r0, #2
 800bcc8:	f000 814f 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bccc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bcd0:	e14b      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e149      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bcd6:	f7fe ffed 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bcda:	e146      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bcdc:	4b85      	ldr	r3, [pc, #532]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bcde:	6818      	ldr	r0, [r3, #0]
 800bce0:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bce4:	f000 8141 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bce8:	4883      	ldr	r0, [pc, #524]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800bcea:	e13e      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bcec:	4b81      	ldr	r3, [pc, #516]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bcee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        switch(srcclk)
 800bcf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcfa:	d006      	beq.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800bcfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd00:	f040 813c 	bne.w	800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800bd04:	f7fe fb3c 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bd08:	e12f      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800bd0a:	4b7a      	ldr	r3, [pc, #488]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bd0c:	6818      	ldr	r0, [r3, #0]
 800bd0e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800bd12:	f000 812a 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bd16:	6918      	ldr	r0, [r3, #16]
 800bd18:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800bd1c:	f000 8125 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bd20:	461a      	mov	r2, r3
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	f3c3 2306 	ubfx	r3, r3, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800bd28:	fb03 f001 	mul.w	r0, r3, r1
 800bd2c:	6913      	ldr	r3, [r2, #16]
 800bd2e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bd32:	3301      	adds	r3, #1
 800bd34:	fbb0 f0f3 	udiv	r0, r0, r3
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800bd38:	6913      	ldr	r3, [r2, #16]
 800bd3a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800bd3e:	3301      	adds	r3, #1
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	fbb0 f0f3 	udiv	r0, r0, r3
 800bd46:	e110      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800bd48:	f7fe fb1a 	bl	800a380 <HAL_RCC_GetSysClockFreq>
 800bd4c:	e10d      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800bd4e:	4b69      	ldr	r3, [pc, #420]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bd50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd54:	f003 0318 	and.w	r3, r3, #24
        switch(srcclk)
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d021      	beq.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800bd5c:	2b10      	cmp	r3, #16
 800bd5e:	d007      	beq.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bd60:	b10b      	cbz	r3, 800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e101      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800bd66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bd6a:	f7fe ffe5 	bl	800ad38 <RCCEx_GetSAIxPeriphCLKFreq>
          break;
 800bd6e:	e0fc      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bd70:	4b60      	ldr	r3, [pc, #384]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bd72:	6818      	ldr	r0, [r3, #0]
 800bd74:	f010 0002 	ands.w	r0, r0, #2
 800bd78:	f000 80f7 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f013 0f08 	tst.w	r3, #8
 800bd82:	d007      	beq.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800bd84:	4b5b      	ldr	r3, [pc, #364]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bd8c:	4a5b      	ldr	r2, [pc, #364]	; (800befc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
 800bd8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bd92:	e0ea      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bd94:	4b57      	ldr	r3, [pc, #348]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bd96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd9a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800bd9e:	e7f5      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x758>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bda0:	4b54      	ldr	r3, [pc, #336]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bda8:	f000 80df 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bdac:	4852      	ldr	r0, [pc, #328]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800bdae:	e0dc      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bdb0:	4b50      	ldr	r3, [pc, #320]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bdb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
        switch(srcclk)
 800bdba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdbe:	d008      	beq.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 800bdc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc4:	d008      	beq.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800bdc6:	b10b      	cbz	r3, 800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e0ce      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bdcc:	f7fe ff72 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bdd0:	e0cb      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800bdd2:	f7fe fad5 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bdd6:	e0c8      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bdd8:	4b46      	ldr	r3, [pc, #280]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bdda:	6818      	ldr	r0, [r3, #0]
 800bddc:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bde0:	f000 80c3 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bde4:	4844      	ldr	r0, [pc, #272]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800bde6:	e0c0      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bde8:	f7fe ff64 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bdec:	e0bd      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800bdee:	f7fe fac7 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bdf2:	e0ba      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bdf4:	4b3f      	ldr	r3, [pc, #252]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bdf6:	6818      	ldr	r0, [r3, #0]
 800bdf8:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bdfc:	f000 80b5 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800be00:	483d      	ldr	r0, [pc, #244]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800be02:	e0b2      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800be04:	4b3b      	ldr	r3, [pc, #236]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800be06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
        switch(srcclk)
 800be0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be12:	d008      	beq.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800be14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be18:	d008      	beq.n	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800be1a:	b10b      	cbz	r3, 800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 800be1c:	2000      	movs	r0, #0
 800be1e:	e0a4      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800be20:	f7fe ff48 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800be24:	e0a1      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800be26:	f7fe faab 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800be2a:	e09e      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be2c:	4b31      	ldr	r3, [pc, #196]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800be2e:	6818      	ldr	r0, [r3, #0]
 800be30:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800be34:	f000 8099 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800be38:	482f      	ldr	r0, [pc, #188]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800be3a:	e096      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800be3c:	f7fe ff3a 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800be40:	e093      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800be42:	f7fe fa9d 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800be46:	e090      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be48:	4b2a      	ldr	r3, [pc, #168]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800be4a:	6818      	ldr	r0, [r3, #0]
 800be4c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800be50:	f000 808b 	beq.w	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800be54:	4828      	ldr	r0, [pc, #160]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800be56:	e088      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800be58:	2000      	movs	r0, #0
 800be5a:	e086      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800be5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800be60:	d108      	bne.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800be62:	4b24      	ldr	r3, [pc, #144]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800be64:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800be68:	f010 0002 	ands.w	r0, r0, #2
 800be6c:	d07d      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800be6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800be72:	e07a      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800be74:	2000      	movs	r0, #0
 800be76:	e078      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800be78:	f7fe ff1c 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800be7c:	e075      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be7e:	4b1d      	ldr	r3, [pc, #116]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800be86:	d070      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800be88:	481b      	ldr	r0, [pc, #108]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800be8a:	e06e      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800be8c:	4b19      	ldr	r3, [pc, #100]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800be8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
        switch(srcclk)
 800be96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be9a:	d020      	beq.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800be9c:	d80e      	bhi.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800be9e:	b1db      	cbz	r3, 800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 800bea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bea4:	d108      	bne.n	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800bea6:	4b13      	ldr	r3, [pc, #76]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bea8:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
 800beac:	f010 0002 	ands.w	r0, r0, #2
 800beb0:	d05b      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              frequency = LSI_VALUE;
 800beb2:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800beb6:	e058      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800beb8:	2000      	movs	r0, #0
 800beba:	e056      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bebc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bec0:	d108      	bne.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bec2:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bec4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800bec8:	f010 0002 	ands.w	r0, r0, #2
 800becc:	d04d      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = LSE_VALUE;
 800bece:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bed2:	e04a      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bed4:	2000      	movs	r0, #0
 800bed6:	e048      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bed8:	f7fe feec 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
          break;
 800bedc:	e045      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bede:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800bee6:	d040      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = HSI_VALUE;
 800bee8:	4803      	ldr	r0, [pc, #12]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
 800beea:	e03e      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = HAL_RCC_GetSysClockFreq();
 800beec:	f7fe fa48 	bl	800a380 <HAL_RCC_GetSysClockFreq>
          break;
 800bef0:	e03b      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bef2:	bf00      	nop
 800bef4:	40021000 	.word	0x40021000
 800bef8:	00f42400 	.word	0x00f42400
 800befc:	0802f43c 	.word	0x0802f43c
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bf00:	4b1f      	ldr	r3, [pc, #124]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	f010 0002 	ands.w	r0, r0, #2
 800bf08:	d02f      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f013 0f08 	tst.w	r3, #8
 800bf10:	d007      	beq.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
 800bf12:	4b1b      	ldr	r3, [pc, #108]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bf1a:	4a1a      	ldr	r2, [pc, #104]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
 800bf1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bf20:	e023      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bf22:	4b17      	ldr	r3, [pc, #92]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
 800bf24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf28:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800bf2c:	e7f5      	b.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800bf2e:	4b14      	ldr	r3, [pc, #80]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800bf36:	d018      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800bf38:	68d8      	ldr	r0, [r3, #12]
 800bf3a:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 800bf3e:	d014      	beq.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800bf40:	461a      	mov	r2, r3
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f3c3 2306 	ubfx	r3, r3, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bf48:	fb03 f001 	mul.w	r0, r3, r1
 800bf4c:	68d3      	ldr	r3, [r2, #12]
 800bf4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bf52:	3301      	adds	r3, #1
 800bf54:	fbb0 f0f3 	udiv	r0, r0, r3
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800bf58:	68d3      	ldr	r3, [r2, #12]
 800bf5a:	f3c3 5341 	ubfx	r3, r3, #21, #2
 800bf5e:	3301      	adds	r3, #1
 800bf60:	005b      	lsls	r3, r3, #1
 800bf62:	fbb0 f0f3 	udiv	r0, r0, r3
 800bf66:	e000      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
    switch(PeriphClk)
 800bf68:	2000      	movs	r0, #0
}
 800bf6a:	bd08      	pop	{r3, pc}
    switch(PeriphClk)
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e7fc      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bf70:	2000      	movs	r0, #0
 800bf72:	e7fa      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bf74:	2000      	movs	r0, #0
 800bf76:	e7f8      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bf78:	2000      	movs	r0, #0
 800bf7a:	e7f6      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	e7f4      	b.n	800bf6a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800bf80:	40021000 	.word	0x40021000
 800bf84:	0802f43c 	.word	0x0802f43c

0800bf88 <HAL_RCCEx_EnableLSCO>:
{
 800bf88:	b530      	push	{r4, r5, lr}
 800bf8a:	b089      	sub	sp, #36	; 0x24
 800bf8c:	4605      	mov	r5, r0
  __LSCO_CLK_ENABLE();
 800bf8e:	4c24      	ldr	r4, [pc, #144]	; (800c020 <HAL_RCCEx_EnableLSCO+0x98>)
 800bf90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bf92:	f043 0301 	orr.w	r3, r3, #1
 800bf96:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bf98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LSCO_PIN;
 800bfa2:	2304      	movs	r3, #4
 800bfa4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bfaa:	2302      	movs	r3, #2
 800bfac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LSCO_GPIO_PORT, &GPIO_InitStruct);
 800bfb2:	a903      	add	r1, sp, #12
 800bfb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bfb8:	f7fc fed8 	bl	8008d6c <HAL_GPIO_Init>
  if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfbe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800bfc2:	d11e      	bne.n	800c002 <HAL_RCCEx_EnableLSCO+0x7a>
    __HAL_RCC_PWR_CLK_ENABLE();
 800bfc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bfc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bfca:	65a2      	str	r2, [r4, #88]	; 0x58
 800bfcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfd2:	9302      	str	r3, [sp, #8]
 800bfd4:	9b02      	ldr	r3, [sp, #8]
    pwrclkchanged = SET;
 800bfd6:	2401      	movs	r4, #1
  if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bfd8:	4b12      	ldr	r3, [pc, #72]	; (800c024 <HAL_RCCEx_EnableLSCO+0x9c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 800bfe0:	d011      	beq.n	800c006 <HAL_RCCEx_EnableLSCO+0x7e>
  FlagStatus       backupchanged = RESET;
 800bfe2:	2100      	movs	r1, #0
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSCOSEL | RCC_BDCR_LSCOEN, LSCOSource | RCC_BDCR_LSCOEN);
 800bfe4:	4a0e      	ldr	r2, [pc, #56]	; (800c020 <HAL_RCCEx_EnableLSCO+0x98>)
 800bfe6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800bfea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800bfee:	ea43 0005 	orr.w	r0, r3, r5
 800bff2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800bff6:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  if(backupchanged == SET)
 800bffa:	b941      	cbnz	r1, 800c00e <HAL_RCCEx_EnableLSCO+0x86>
  if(pwrclkchanged == SET)
 800bffc:	b954      	cbnz	r4, 800c014 <HAL_RCCEx_EnableLSCO+0x8c>
}
 800bffe:	b009      	add	sp, #36	; 0x24
 800c000:	bd30      	pop	{r4, r5, pc}
  FlagStatus       pwrclkchanged = RESET;
 800c002:	2400      	movs	r4, #0
 800c004:	e7e8      	b.n	800bfd8 <HAL_RCCEx_EnableLSCO+0x50>
    HAL_PWR_EnableBkUpAccess();
 800c006:	f7fe f883 	bl	800a110 <HAL_PWR_EnableBkUpAccess>
    backupchanged = SET;
 800c00a:	2101      	movs	r1, #1
 800c00c:	e7ea      	b.n	800bfe4 <HAL_RCCEx_EnableLSCO+0x5c>
    HAL_PWR_DisableBkUpAccess();
 800c00e:	f7fe f887 	bl	800a120 <HAL_PWR_DisableBkUpAccess>
 800c012:	e7f3      	b.n	800bffc <HAL_RCCEx_EnableLSCO+0x74>
    __HAL_RCC_PWR_CLK_DISABLE();
 800c014:	4a02      	ldr	r2, [pc, #8]	; (800c020 <HAL_RCCEx_EnableLSCO+0x98>)
 800c016:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c01c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800c01e:	e7ee      	b.n	800bffe <HAL_RCCEx_EnableLSCO+0x76>
 800c020:	40021000 	.word	0x40021000
 800c024:	40007000 	.word	0x40007000

0800c028 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c028:	4a02      	ldr	r2, [pc, #8]	; (800c034 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800c02a:	6813      	ldr	r3, [r2, #0]
 800c02c:	f043 0304 	orr.w	r3, r3, #4
 800c030:	6013      	str	r3, [r2, #0]
}
 800c032:	4770      	bx	lr
 800c034:	40021000 	.word	0x40021000

0800c038 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4604      	mov	r4, r0

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c03c:	6802      	ldr	r2, [r0, #0]
 800c03e:	68d3      	ldr	r3, [r2, #12]
 800c040:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c044:	60d3      	str	r3, [r2, #12]
#endif

  tickstart = HAL_GetTick();
 800c046:	f7fc fb2b 	bl	80086a0 <HAL_GetTick>
 800c04a:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f013 0f20 	tst.w	r3, #32
 800c054:	d107      	bne.n	800c066 <HAL_RTC_WaitForSynchro+0x2e>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c056:	f7fc fb23 	bl	80086a0 <HAL_GetTick>
 800c05a:	1b40      	subs	r0, r0, r5
 800c05c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c060:	d9f4      	bls.n	800c04c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 800c062:	2003      	movs	r0, #3
 800c064:	e000      	b.n	800c068 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800c066:	2000      	movs	r0, #0
}
 800c068:	bd38      	pop	{r3, r4, r5, pc}

0800c06a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c06a:	b570      	push	{r4, r5, r6, lr}
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c06c:	6803      	ldr	r3, [r0, #0]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c074:	d002      	beq.n	800c07c <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800c076:	2500      	movs	r5, #0
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
}
 800c078:	4628      	mov	r0, r5
 800c07a:	bd70      	pop	{r4, r5, r6, pc}
 800c07c:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c082:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800c084:	f7fc fb0c 	bl	80086a0 <HAL_GetTick>
 800c088:	4606      	mov	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800c08a:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c094:	d1f0      	bne.n	800c078 <RTC_EnterInitMode+0xe>
 800c096:	2d03      	cmp	r5, #3
 800c098:	d0ee      	beq.n	800c078 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c09a:	f7fc fb01 	bl	80086a0 <HAL_GetTick>
 800c09e:	1b83      	subs	r3, r0, r6
 800c0a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0a4:	d9f2      	bls.n	800c08c <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c0a6:	2503      	movs	r5, #3
 800c0a8:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800c0ac:	e7ee      	b.n	800c08c <RTC_EnterInitMode+0x22>
	...

0800c0b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	4604      	mov	r4, r0
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c0b4:	4b10      	ldr	r3, [pc, #64]	; (800c0f8 <RTC_ExitInitMode+0x48>)
 800c0b6:	68da      	ldr	r2, [r3, #12]
 800c0b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0bc:	60da      	str	r2, [r3, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f013 0f20 	tst.w	r3, #32
 800c0c4:	d106      	bne.n	800c0d4 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0c6:	f7ff ffb7 	bl	800c038 <HAL_RTC_WaitForSynchro>
 800c0ca:	b198      	cbz	r0, 800c0f4 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c0cc:	2003      	movs	r0, #3
 800c0ce:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c0d2:	e00f      	b.n	800c0f4 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c0d4:	4a08      	ldr	r2, [pc, #32]	; (800c0f8 <RTC_ExitInitMode+0x48>)
 800c0d6:	6893      	ldr	r3, [r2, #8]
 800c0d8:	f023 0320 	bic.w	r3, r3, #32
 800c0dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c0de:	f7ff ffab 	bl	800c038 <HAL_RTC_WaitForSynchro>
 800c0e2:	b110      	cbz	r0, 800c0ea <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c0e4:	2003      	movs	r0, #3
 800c0e6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c0ea:	4a03      	ldr	r2, [pc, #12]	; (800c0f8 <RTC_ExitInitMode+0x48>)
 800c0ec:	6893      	ldr	r3, [r2, #8]
 800c0ee:	f043 0320 	orr.w	r3, r3, #32
 800c0f2:	6093      	str	r3, [r2, #8]
  }

  return status;
}
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40002800 	.word	0x40002800

0800c0fc <HAL_RTC_Init>:
  if (hrtc != NULL)
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d048      	beq.n	800c192 <HAL_RTC_Init+0x96>
{
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c104:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800c108:	b16b      	cbz	r3, 800c126 <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c10a:	2302      	movs	r3, #2
 800c10c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	22ca      	movs	r2, #202	; 0xca
 800c114:	625a      	str	r2, [r3, #36]	; 0x24
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	2253      	movs	r2, #83	; 0x53
 800c11a:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800c11c:	4620      	mov	r0, r4
 800c11e:	f7ff ffa4 	bl	800c06a <RTC_EnterInitMode>
    if (status == HAL_OK)
 800c122:	b128      	cbz	r0, 800c130 <HAL_RTC_Init+0x34>
}
 800c124:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800c126:	f880 3020 	strb.w	r3, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800c12a:	f7fb fa79 	bl	8007620 <HAL_RTC_MspInit>
 800c12e:	e7ec      	b.n	800c10a <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c130:	6822      	ldr	r2, [r4, #0]
 800c132:	6893      	ldr	r3, [r2, #8]
 800c134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c13c:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c13e:	6821      	ldr	r1, [r4, #0]
 800c140:	688a      	ldr	r2, [r1, #8]
 800c142:	6863      	ldr	r3, [r4, #4]
 800c144:	6920      	ldr	r0, [r4, #16]
 800c146:	4303      	orrs	r3, r0
 800c148:	69a0      	ldr	r0, [r4, #24]
 800c14a:	4303      	orrs	r3, r0
 800c14c:	4313      	orrs	r3, r2
 800c14e:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	68e2      	ldr	r2, [r4, #12]
 800c154:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c156:	6822      	ldr	r2, [r4, #0]
 800c158:	6913      	ldr	r3, [r2, #16]
 800c15a:	68a1      	ldr	r1, [r4, #8]
 800c15c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c160:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800c162:	4620      	mov	r0, r4
 800c164:	f7ff ffa4 	bl	800c0b0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800c168:	2800      	cmp	r0, #0
 800c16a:	d1db      	bne.n	800c124 <HAL_RTC_Init+0x28>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c16c:	6822      	ldr	r2, [r4, #0]
 800c16e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c170:	f023 0303 	bic.w	r3, r3, #3
 800c174:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c176:	6821      	ldr	r1, [r4, #0]
 800c178:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800c17a:	69e2      	ldr	r2, [r4, #28]
 800c17c:	6965      	ldr	r5, [r4, #20]
 800c17e:	432a      	orrs	r2, r5
 800c180:	4313      	orrs	r3, r2
 800c182:	64cb      	str	r3, [r1, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	22ff      	movs	r2, #255	; 0xff
 800c188:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_READY;
 800c18a:	2301      	movs	r3, #1
 800c18c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800c190:	e7c8      	b.n	800c124 <HAL_RTC_Init+0x28>
  HAL_StatusTypeDef status = HAL_ERROR;
 800c192:	2001      	movs	r0, #1
}
 800c194:	4770      	bx	lr

0800c196 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800c196:	2300      	movs	r3, #0
  uint8_t temp = Value;

  while (temp >= 10U)
 800c198:	2809      	cmp	r0, #9
 800c19a:	d903      	bls.n	800c1a4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 800c19c:	3301      	adds	r3, #1
    temp -= 10U;
 800c19e:	380a      	subs	r0, #10
 800c1a0:	b2c0      	uxtb	r0, r0
 800c1a2:	e7f9      	b.n	800c198 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800c1a4:	011b      	lsls	r3, r3, #4
 800c1a6:	b2db      	uxtb	r3, r3
}
 800c1a8:	4318      	orrs	r0, r3
 800c1aa:	4770      	bx	lr

0800c1ac <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800c1ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d05d      	beq.n	800c270 <HAL_RTC_SetTime+0xc4>
{
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 800c1bc:	2301      	movs	r3, #1
 800c1be:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1c8:	6803      	ldr	r3, [r0, #0]
 800c1ca:	22ca      	movs	r2, #202	; 0xca
 800c1cc:	625a      	str	r2, [r3, #36]	; 0x24
 800c1ce:	6803      	ldr	r3, [r0, #0]
 800c1d0:	2253      	movs	r2, #83	; 0x53
 800c1d2:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800c1d4:	f7ff ff49 	bl	800c06a <RTC_EnterInitMode>
  if (status == HAL_OK)
 800c1d8:	bb68      	cbnz	r0, 800c236 <HAL_RTC_SetTime+0x8a>
    if (Format == RTC_FORMAT_BIN)
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	d136      	bne.n	800c24c <HAL_RTC_SetTime+0xa0>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1e6:	d101      	bne.n	800c1ec <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c1ec:	7828      	ldrb	r0, [r5, #0]
 800c1ee:	f7ff ffd2 	bl	800c196 <RTC_ByteToBcd2>
 800c1f2:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c1f4:	7868      	ldrb	r0, [r5, #1]
 800c1f6:	f7ff ffce 	bl	800c196 <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c1fa:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c1fe:	78a8      	ldrb	r0, [r5, #2]
 800c200:	f7ff ffc9 	bl	800c196 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c204:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c206:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c208:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 800c212:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 800c216:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	6893      	ldr	r3, [r2, #8]
 800c21c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c220:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c222:	6821      	ldr	r1, [r4, #0]
 800c224:	688b      	ldr	r3, [r1, #8]
 800c226:	68ea      	ldr	r2, [r5, #12]
 800c228:	6928      	ldr	r0, [r5, #16]
 800c22a:	4302      	orrs	r2, r0
 800c22c:	4313      	orrs	r3, r2
 800c22e:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff ff3d 	bl	800c0b0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	22ff      	movs	r2, #255	; 0xff
 800c23a:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800c23c:	b910      	cbnz	r0, 800c244 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 800c23e:	2301      	movs	r3, #1
 800c240:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800c244:	2300      	movs	r3, #0
 800c246:	f884 3020 	strb.w	r3, [r4, #32]
}
 800c24a:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c24c:	6823      	ldr	r3, [r4, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c254:	d101      	bne.n	800c25a <HAL_RTC_SetTime+0xae>
        sTime->TimeFormat = 0x00U;
 800c256:	2300      	movs	r3, #0
 800c258:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c25a:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c25c:	7868      	ldrb	r0, [r5, #1]
 800c25e:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c260:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c264:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c266:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c268:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c26a:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800c26e:	e7cd      	b.n	800c20c <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 800c270:	2002      	movs	r0, #2
}
 800c272:	4770      	bx	lr

0800c274 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800c274:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d04c      	beq.n	800c316 <HAL_RTC_SetDate+0xa2>
{
 800c27c:	b570      	push	{r4, r5, r6, lr}
 800c27e:	4604      	mov	r4, r0
 800c280:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800c282:	2301      	movs	r3, #1
 800c284:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c288:	2302      	movs	r3, #2
 800c28a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c28e:	b93a      	cbnz	r2, 800c2a0 <HAL_RTC_SetDate+0x2c>
 800c290:	784b      	ldrb	r3, [r1, #1]
 800c292:	f013 0f10 	tst.w	r3, #16
 800c296:	d003      	beq.n	800c2a0 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c298:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800c29c:	330a      	adds	r3, #10
 800c29e:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 800c2a0:	bb22      	cbnz	r2, 800c2ec <HAL_RTC_SetDate+0x78>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c2a2:	78f0      	ldrb	r0, [r6, #3]
 800c2a4:	f7ff ff77 	bl	800c196 <RTC_ByteToBcd2>
 800c2a8:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2aa:	7870      	ldrb	r0, [r6, #1]
 800c2ac:	f7ff ff73 	bl	800c196 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c2b0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c2b4:	78b0      	ldrb	r0, [r6, #2]
 800c2b6:	f7ff ff6e 	bl	800c196 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2ba:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c2bc:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c2be:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	22ca      	movs	r2, #202	; 0xca
 800c2c6:	625a      	str	r2, [r3, #36]	; 0x24
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	2253      	movs	r2, #83	; 0x53
 800c2cc:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f7ff fecb 	bl	800c06a <RTC_EnterInitMode>
  if (status == HAL_OK)
 800c2d4:	b1a8      	cbz	r0, 800c302 <HAL_RTC_SetDate+0x8e>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	22ff      	movs	r2, #255	; 0xff
 800c2da:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800c2dc:	b910      	cbnz	r0, 800c2e4 <HAL_RTC_SetDate+0x70>
    hrtc->State = HAL_RTC_STATE_READY ;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f884 3020 	strb.w	r3, [r4, #32]
}
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c2ec:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c2ee:	7875      	ldrb	r5, [r6, #1]
 800c2f0:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c2f2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c2f6:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c2f8:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c2fa:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c2fc:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 800c300:	e7df      	b.n	800c2c2 <HAL_RTC_SetDate+0x4e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800c308:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800c30c:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800c30e:	4620      	mov	r0, r4
 800c310:	f7ff fece 	bl	800c0b0 <RTC_ExitInitMode>
 800c314:	e7df      	b.n	800c2d6 <HAL_RTC_SetDate+0x62>
  __HAL_LOCK(hrtc);
 800c316:	2002      	movs	r0, #2
}
 800c318:	4770      	bx	lr

0800c31a <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c31a:	b430      	push	{r4, r5}
 800c31c:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c31e:	2000      	movs	r0, #0
 800c320:	6420      	str	r0, [r4, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c322:	64a0      	str	r0, [r4, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c324:	6860      	ldr	r0, [r4, #4]
 800c326:	b120      	cbz	r0, 800c332 <SAI_InitI2S+0x18>
 800c328:	2802      	cmp	r0, #2
 800c32a:	d002      	beq.n	800c332 <SAI_InitI2S+0x18>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c32c:	2001      	movs	r0, #1
 800c32e:	64e0      	str	r0, [r4, #76]	; 0x4c
 800c330:	e001      	b.n	800c336 <SAI_InitI2S+0x1c>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c332:	2000      	movs	r0, #0
 800c334:	64e0      	str	r0, [r4, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800c336:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c33a:	65a0      	str	r0, [r4, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c33c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c340:	6720      	str	r0, [r4, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800c342:	2000      	movs	r0, #0
 800c344:	6660      	str	r0, [r4, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800c346:	66e3      	str	r3, [r4, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800c348:	f013 0f01 	tst.w	r3, #1
 800c34c:	d14a      	bne.n	800c3e4 <SAI_InitI2S+0xca>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 800c34e:	b949      	cbnz	r1, 800c364 <SAI_InitI2S+0x4a>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c350:	65e0      	str	r0, [r4, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800c352:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c356:	6620      	str	r0, [r4, #96]	; 0x60
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 800c358:	2a03      	cmp	r2, #3
 800c35a:	d837      	bhi.n	800c3cc <SAI_InitI2S+0xb2>
 800c35c:	e8df f002 	tbb	[pc, r2]
 800c360:	2b201608 	.word	0x2b201608
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800c364:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c368:	65e0      	str	r0, [r4, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c36a:	2000      	movs	r0, #0
 800c36c:	6620      	str	r0, [r4, #96]	; 0x60
 800c36e:	e7f3      	b.n	800c358 <SAI_InitI2S+0x3e>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c370:	2080      	movs	r0, #128	; 0x80
 800c372:	6460      	str	r0, [r4, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c374:	085b      	lsrs	r3, r3, #1
 800c376:	0158      	lsls	r0, r3, #5
 800c378:	6520      	str	r0, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c37e:	2340      	movs	r3, #64	; 0x40
 800c380:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c382:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c384:	2902      	cmp	r1, #2
 800c386:	d023      	beq.n	800c3d0 <SAI_InitI2S+0xb6>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
 800c388:	bc30      	pop	{r4, r5}
 800c38a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c38c:	2080      	movs	r0, #128	; 0x80
 800c38e:	6460      	str	r0, [r4, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c390:	085b      	lsrs	r3, r3, #1
 800c392:	019d      	lsls	r5, r3, #6
 800c394:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c396:	015b      	lsls	r3, r3, #5
 800c398:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c39a:	66a0      	str	r0, [r4, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c39c:	2000      	movs	r0, #0
      break;
 800c39e:	e7f1      	b.n	800c384 <SAI_InitI2S+0x6a>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c3a0:	20c0      	movs	r0, #192	; 0xc0
 800c3a2:	6460      	str	r0, [r4, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c3a4:	085b      	lsrs	r3, r3, #1
 800c3a6:	0198      	lsls	r0, r3, #6
 800c3a8:	6520      	str	r0, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c3aa:	015b      	lsls	r3, r3, #5
 800c3ac:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c3ae:	2380      	movs	r3, #128	; 0x80
 800c3b0:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c3b2:	2000      	movs	r0, #0
      break;
 800c3b4:	e7e6      	b.n	800c384 <SAI_InitI2S+0x6a>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c3b6:	20e0      	movs	r0, #224	; 0xe0
 800c3b8:	6460      	str	r0, [r4, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c3ba:	085b      	lsrs	r3, r3, #1
 800c3bc:	0198      	lsls	r0, r3, #6
 800c3be:	6520      	str	r0, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c3c0:	015b      	lsls	r3, r3, #5
 800c3c2:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c3c4:	2380      	movs	r3, #128	; 0x80
 800c3c6:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c3c8:	2000      	movs	r0, #0
      break;
 800c3ca:	e7db      	b.n	800c384 <SAI_InitI2S+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	e7d9      	b.n	800c384 <SAI_InitI2S+0x6a>
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800c3d0:	2a01      	cmp	r2, #1
 800c3d2:	d004      	beq.n	800c3de <SAI_InitI2S+0xc4>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800c3d4:	2a02      	cmp	r2, #2
 800c3d6:	d1d7      	bne.n	800c388 <SAI_InitI2S+0x6e>
      hsai->SlotInit.FirstBitOffset = 8;
 800c3d8:	2308      	movs	r3, #8
 800c3da:	6663      	str	r3, [r4, #100]	; 0x64
 800c3dc:	e7d4      	b.n	800c388 <SAI_InitI2S+0x6e>
      hsai->SlotInit.FirstBitOffset = 16;
 800c3de:	2310      	movs	r3, #16
 800c3e0:	6663      	str	r3, [r4, #100]	; 0x64
 800c3e2:	e7f7      	b.n	800c3d4 <SAI_InitI2S+0xba>
    return HAL_ERROR;
 800c3e4:	2001      	movs	r0, #1
 800c3e6:	e7cf      	b.n	800c388 <SAI_InitI2S+0x6e>

0800c3e8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c3e8:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c3ea:	2400      	movs	r4, #0
 800c3ec:	6404      	str	r4, [r0, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c3ee:	6484      	str	r4, [r0, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c3f0:	6844      	ldr	r4, [r0, #4]
 800c3f2:	b124      	cbz	r4, 800c3fe <SAI_InitPCM+0x16>
 800c3f4:	2c02      	cmp	r4, #2
 800c3f6:	d002      	beq.n	800c3fe <SAI_InitPCM+0x16>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c3f8:	2400      	movs	r4, #0
 800c3fa:	64c4      	str	r4, [r0, #76]	; 0x4c
 800c3fc:	e001      	b.n	800c402 <SAI_InitPCM+0x1a>
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c3fe:	2401      	movs	r4, #1
 800c400:	64c4      	str	r4, [r0, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800c402:	2400      	movs	r4, #0
 800c404:	6584      	str	r4, [r0, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800c406:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800c40a:	65c5      	str	r5, [r0, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800c40c:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800c410:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800c412:	6644      	str	r4, [r0, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800c414:	66c3      	str	r3, [r0, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c416:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800c41a:	6704      	str	r4, [r0, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 800c41c:	2904      	cmp	r1, #4
 800c41e:	d007      	beq.n	800c430 <SAI_InitPCM+0x48>
    hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800c420:	210d      	movs	r1, #13
 800c422:	6541      	str	r1, [r0, #84]	; 0x54
  }

  switch (datasize)
 800c424:	2a03      	cmp	r2, #3
 800c426:	d826      	bhi.n	800c476 <SAI_InitPCM+0x8e>
 800c428:	e8df f002 	tbb	[pc, r2]
 800c42c:	1d150e05 	.word	0x1d150e05
    hsai->FrameInit.ActiveFrameLength = 1;
 800c430:	2101      	movs	r1, #1
 800c432:	6541      	str	r1, [r0, #84]	; 0x54
 800c434:	e7f6      	b.n	800c424 <SAI_InitPCM+0x3c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c436:	2280      	movs	r2, #128	; 0x80
 800c438:	6442      	str	r2, [r0, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	6503      	str	r3, [r0, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c43e:	2340      	movs	r3, #64	; 0x40
 800c440:	6683      	str	r3, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c442:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 800c444:	bc30      	pop	{r4, r5}
 800c446:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c448:	2280      	movs	r2, #128	; 0x80
 800c44a:	6442      	str	r2, [r0, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c44c:	015b      	lsls	r3, r3, #5
 800c44e:	6503      	str	r3, [r0, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c450:	6682      	str	r2, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c452:	2000      	movs	r0, #0
      break;
 800c454:	e7f6      	b.n	800c444 <SAI_InitPCM+0x5c>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c456:	22c0      	movs	r2, #192	; 0xc0
 800c458:	6442      	str	r2, [r0, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c45a:	015b      	lsls	r3, r3, #5
 800c45c:	6503      	str	r3, [r0, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c45e:	2380      	movs	r3, #128	; 0x80
 800c460:	6683      	str	r3, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c462:	2000      	movs	r0, #0
      break;
 800c464:	e7ee      	b.n	800c444 <SAI_InitPCM+0x5c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c466:	22e0      	movs	r2, #224	; 0xe0
 800c468:	6442      	str	r2, [r0, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c46a:	015b      	lsls	r3, r3, #5
 800c46c:	6503      	str	r3, [r0, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c46e:	2380      	movs	r3, #128	; 0x80
 800c470:	6683      	str	r3, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800c472:	2000      	movs	r0, #0
      break;
 800c474:	e7e6      	b.n	800c444 <SAI_InitPCM+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 800c476:	2001      	movs	r0, #1
 800c478:	e7e4      	b.n	800c444 <SAI_InitPCM+0x5c>
	...

0800c47c <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c47c:	4b0e      	ldr	r3, [pc, #56]	; (800c4b8 <SAI_Disable+0x3c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <SAI_Disable+0x40>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	0b1b      	lsrs	r3, r3, #12
 800c488:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c48a:	6801      	ldr	r1, [r0, #0]
 800c48c:	680a      	ldr	r2, [r1, #0]
 800c48e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c492:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c494:	b13b      	cbz	r3, 800c4a6 <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 800c496:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c498:	6802      	ldr	r2, [r0, #0]
 800c49a:	6812      	ldr	r2, [r2, #0]
 800c49c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800c4a0:	d1f8      	bne.n	800c494 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800c4a2:	2000      	movs	r0, #0

  return status;
}
 800c4a4:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c4a6:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800c4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4ae:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
      status = HAL_TIMEOUT;
 800c4b2:	2003      	movs	r0, #3
      break;
 800c4b4:	4770      	bx	lr
 800c4b6:	bf00      	nop
 800c4b8:	2000009c 	.word	0x2000009c
 800c4bc:	95cbec1b 	.word	0x95cbec1b

0800c4c0 <HAL_SAI_Init>:
{
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	f000 812c 	beq.w	800c720 <HAL_SAI_Init+0x260>
 800c4c8:	4604      	mov	r4, r0
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800c4ca:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 800c4ce:	2d01      	cmp	r5, #1
 800c4d0:	d024      	beq.n	800c51c <HAL_SAI_Init+0x5c>
  if (hsai->State == HAL_SAI_STATE_RESET)
 800c4d2:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 800c4d6:	b373      	cbz	r3, 800c536 <HAL_SAI_Init+0x76>
  if (SAI_Disable(hsai) != HAL_OK)
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f7ff ffcf 	bl	800c47c <SAI_Disable>
 800c4de:	4605      	mov	r5, r0
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	f040 811f 	bne.w	800c724 <HAL_SAI_Init+0x264>
  hsai->State = HAL_SAI_STATE_BUSY;
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
  switch (hsai->Init.SynchroExt)
 800c4ec:	68e3      	ldr	r3, [r4, #12]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d027      	beq.n	800c542 <HAL_SAI_Init+0x82>
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d127      	bne.n	800c546 <HAL_SAI_Init+0x86>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c4f6:	2220      	movs	r2, #32
  switch (hsai->Init.Synchro)
 800c4f8:	68a3      	ldr	r3, [r4, #8]
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d02d      	beq.n	800c55a <HAL_SAI_Init+0x9a>
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d026      	beq.n	800c550 <HAL_SAI_Init+0x90>
 800c502:	2b01      	cmp	r3, #1
 800c504:	d021      	beq.n	800c54a <HAL_SAI_Init+0x8a>
 800c506:	2600      	movs	r6, #0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c508:	6823      	ldr	r3, [r4, #0]
 800c50a:	4987      	ldr	r1, [pc, #540]	; (800c728 <HAL_SAI_Init+0x268>)
 800c50c:	428b      	cmp	r3, r1
 800c50e:	d027      	beq.n	800c560 <HAL_SAI_Init+0xa0>
 800c510:	3120      	adds	r1, #32
 800c512:	428b      	cmp	r3, r1
 800c514:	d024      	beq.n	800c560 <HAL_SAI_Init+0xa0>
    SAI2->GCR = tmpregisterGCR;
 800c516:	4b85      	ldr	r3, [pc, #532]	; (800c72c <HAL_SAI_Init+0x26c>)
 800c518:	601a      	str	r2, [r3, #0]
 800c51a:	e023      	b.n	800c564 <HAL_SAI_Init+0xa4>
    if ((hsai->Instance != SAI1_Block_A) ||
 800c51c:	6802      	ldr	r2, [r0, #0]
 800c51e:	4b82      	ldr	r3, [pc, #520]	; (800c728 <HAL_SAI_Init+0x268>)
 800c520:	429a      	cmp	r2, r3
 800c522:	f040 80e1 	bne.w	800c6e8 <HAL_SAI_Init+0x228>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c526:	6843      	ldr	r3, [r0, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800c528:	2b01      	cmp	r3, #1
 800c52a:	f040 80dd 	bne.w	800c6e8 <HAL_SAI_Init+0x228>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800c52e:	6c03      	ldr	r3, [r0, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0ce      	beq.n	800c4d2 <HAL_SAI_Init+0x12>
 800c534:	e0d8      	b.n	800c6e8 <HAL_SAI_Init+0x228>
    hsai->Lock = HAL_UNLOCKED;
 800c536:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    HAL_SAI_MspInit(hsai);
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7fb f908 	bl	8007750 <HAL_SAI_MspInit>
 800c540:	e7ca      	b.n	800c4d8 <HAL_SAI_Init+0x18>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c542:	2210      	movs	r2, #16
 800c544:	e7d8      	b.n	800c4f8 <HAL_SAI_Init+0x38>
  switch (hsai->Init.SynchroExt)
 800c546:	2200      	movs	r2, #0
 800c548:	e7d6      	b.n	800c4f8 <HAL_SAI_Init+0x38>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c54a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800c54e:	e7db      	b.n	800c508 <HAL_SAI_Init+0x48>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c550:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c554:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800c558:	e7d6      	b.n	800c508 <HAL_SAI_Init+0x48>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c55a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800c55e:	e7d3      	b.n	800c508 <HAL_SAI_Init+0x48>
    SAI1->GCR = tmpregisterGCR;
 800c560:	4b73      	ldr	r3, [pc, #460]	; (800c730 <HAL_SAI_Init+0x270>)
 800c562:	601a      	str	r2, [r3, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c564:	69e3      	ldr	r3, [r4, #28]
 800c566:	b38b      	cbz	r3, 800c5cc <HAL_SAI_Init+0x10c>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c568:	6823      	ldr	r3, [r4, #0]
 800c56a:	4a6f      	ldr	r2, [pc, #444]	; (800c728 <HAL_SAI_Init+0x268>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d007      	beq.n	800c580 <HAL_SAI_Init+0xc0>
 800c570:	3220      	adds	r2, #32
 800c572:	4293      	cmp	r3, r2
 800c574:	d004      	beq.n	800c580 <HAL_SAI_Init+0xc0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c576:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c57a:	f7ff f85b 	bl	800b634 <HAL_RCCEx_GetPeriphCLKFreq>
 800c57e:	e003      	b.n	800c588 <HAL_SAI_Init+0xc8>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c580:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c584:	f7ff f856 	bl	800b634 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800c588:	6963      	ldr	r3, [r4, #20]
 800c58a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c58e:	d027      	beq.n	800c5e0 <HAL_SAI_Init+0x120>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c596:	d037      	beq.n	800c608 <HAL_SAI_Init+0x148>
 800c598:	2201      	movs	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c59a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c59e:	0043      	lsls	r3, r0, #1
 800c5a0:	69e1      	ldr	r1, [r4, #28]
 800c5a2:	fb02 f201 	mul.w	r2, r2, r1
 800c5a6:	0212      	lsls	r2, r2, #8
 800c5a8:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800c5ac:	4a61      	ldr	r2, [pc, #388]	; (800c734 <HAL_SAI_Init+0x274>)
 800c5ae:	fba2 1203 	umull	r1, r2, r2, r3
 800c5b2:	08d2      	lsrs	r2, r2, #3
 800c5b4:	6222      	str	r2, [r4, #32]
    if ((tmpval % 10U) > 8U)
 800c5b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800c5ba:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800c5be:	2b08      	cmp	r3, #8
 800c5c0:	d901      	bls.n	800c5c6 <HAL_SAI_Init+0x106>
      hsai->Init.Mckdiv += 1U;
 800c5c2:	3201      	adds	r2, #1
 800c5c4:	6222      	str	r2, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c5c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5c8:	2b04      	cmp	r3, #4
 800c5ca:	d01f      	beq.n	800c60c <HAL_SAI_Init+0x14c>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c5cc:	6863      	ldr	r3, [r4, #4]
 800c5ce:	b30b      	cbz	r3, 800c614 <HAL_SAI_Init+0x154>
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d01f      	beq.n	800c614 <HAL_SAI_Init+0x154>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800c5d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c5d6:	2b01      	cmp	r3, #1
 800c5d8:	f000 808a 	beq.w	800c6f0 <HAL_SAI_Init+0x230>
 800c5dc:	2700      	movs	r7, #0
 800c5de:	e01e      	b.n	800c61e <HAL_SAI_Init+0x15e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c5e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d00b      	beq.n	800c5fe <HAL_SAI_Init+0x13e>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800c5e6:	2b08      	cmp	r3, #8
 800c5e8:	d00b      	beq.n	800c602 <HAL_SAI_Init+0x142>
        tmpframelength = hsai->FrameInit.FrameLength;
 800c5ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800c5ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c5f0:	0043      	lsls	r3, r0, #1
 800c5f2:	69e1      	ldr	r1, [r4, #28]
 800c5f4:	fb02 f201 	mul.w	r2, r2, r1
 800c5f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5fc:	e7d6      	b.n	800c5ac <HAL_SAI_Init+0xec>
        tmpframelength = 64U;
 800c5fe:	2240      	movs	r2, #64	; 0x40
 800c600:	e7f4      	b.n	800c5ec <HAL_SAI_Init+0x12c>
        tmpframelength = 256U;
 800c602:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c606:	e7f1      	b.n	800c5ec <HAL_SAI_Init+0x12c>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c608:	2202      	movs	r2, #2
 800c60a:	e7c6      	b.n	800c59a <HAL_SAI_Init+0xda>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c60c:	6a23      	ldr	r3, [r4, #32]
 800c60e:	085b      	lsrs	r3, r3, #1
 800c610:	6223      	str	r3, [r4, #32]
 800c612:	e7db      	b.n	800c5cc <HAL_SAI_Init+0x10c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c614:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c616:	2b01      	cmp	r3, #1
 800c618:	d068      	beq.n	800c6ec <HAL_SAI_Init+0x22c>
 800c61a:	f44f 7700 	mov.w	r7, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c61e:	6821      	ldr	r1, [r4, #0]
 800c620:	680b      	ldr	r3, [r1, #0]
 800c622:	4a45      	ldr	r2, [pc, #276]	; (800c738 <HAL_SAI_Init+0x278>)
 800c624:	401a      	ands	r2, r3
 800c626:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c628:	6821      	ldr	r1, [r4, #0]
 800c62a:	680a      	ldr	r2, [r1, #0]
 800c62c:	6863      	ldr	r3, [r4, #4]
 800c62e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c630:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c632:	6c60      	ldr	r0, [r4, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c634:	4303      	orrs	r3, r0
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c636:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c638:	4303      	orrs	r3, r0
 800c63a:	433b      	orrs	r3, r7
                          ckstr_bits | syncen_bits |                             \
 800c63c:	4333      	orrs	r3, r6
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c63e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800c640:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c642:	6920      	ldr	r0, [r4, #16]
 800c644:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c646:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c648:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c64a:	6a20      	ldr	r0, [r4, #32]
 800c64c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                          hsai->Init.MckOverSampling);
 800c650:	6a60      	ldr	r0, [r4, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c652:	4303      	orrs	r3, r0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c654:	4313      	orrs	r3, r2
 800c656:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c658:	6822      	ldr	r2, [r4, #0]
 800c65a:	6853      	ldr	r3, [r2, #4]
 800c65c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c660:	f023 030f 	bic.w	r3, r3, #15
 800c664:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c666:	6821      	ldr	r1, [r4, #0]
 800c668:	684a      	ldr	r2, [r1, #4]
 800c66a:	69a3      	ldr	r3, [r4, #24]
 800c66c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c66e:	4303      	orrs	r3, r0
 800c670:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c672:	4303      	orrs	r3, r0
 800c674:	4313      	orrs	r3, r2
 800c676:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c678:	6822      	ldr	r2, [r4, #0]
 800c67a:	6891      	ldr	r1, [r2, #8]
 800c67c:	4b2f      	ldr	r3, [pc, #188]	; (800c73c <HAL_SAI_Init+0x27c>)
 800c67e:	400b      	ands	r3, r1
 800c680:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c682:	6820      	ldr	r0, [r4, #0]
 800c684:	6882      	ldr	r2, [r0, #8]
 800c686:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c688:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 800c68a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c68c:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 800c68e:	6da1      	ldr	r1, [r4, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800c690:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 800c692:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800c694:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c696:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c698:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 800c69a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c6a2:	6822      	ldr	r2, [r4, #0]
 800c6a4:	68d3      	ldr	r3, [r2, #12]
 800c6a6:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 800c6aa:	f023 030f 	bic.w	r3, r3, #15
 800c6ae:	041b      	lsls	r3, r3, #16
 800c6b0:	0c1b      	lsrs	r3, r3, #16
 800c6b2:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	68c2      	ldr	r2, [r0, #12]
 800c6b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6ba:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c6bc:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c6be:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c6c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c6c4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c6c6:	3901      	subs	r1, #1
 800c6c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	60c3      	str	r3, [r0, #12]
  if (hsai->Instance == SAI1_Block_A)
 800c6d0:	6822      	ldr	r2, [r4, #0]
 800c6d2:	4b15      	ldr	r3, [pc, #84]	; (800c728 <HAL_SAI_Init+0x268>)
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d00e      	beq.n	800c6f6 <HAL_SAI_Init+0x236>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
  __HAL_UNLOCK(hsai);
 800c6e4:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
}
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c6ec:	2700      	movs	r7, #0
 800c6ee:	e796      	b.n	800c61e <HAL_SAI_Init+0x15e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800c6f0:	f44f 7700 	mov.w	r7, #512	; 0x200
 800c6f4:	e793      	b.n	800c61e <HAL_SAI_Init+0x15e>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800c6f6:	4a0e      	ldr	r2, [pc, #56]	; (800c730 <HAL_SAI_Init+0x270>)
 800c6f8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800c6fa:	f023 0301 	bic.w	r3, r3, #1
 800c6fe:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800c700:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c704:	2b01      	cmp	r3, #1
 800c706:	d1e7      	bne.n	800c6d8 <HAL_SAI_Init+0x218>
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800c70a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c70c:	3a01      	subs	r2, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c70e:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 800c712:	4b07      	ldr	r3, [pc, #28]	; (800c730 <HAL_SAI_Init+0x270>)
 800c714:	645a      	str	r2, [r3, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800c716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c718:	f042 0201 	orr.w	r2, r2, #1
 800c71c:	645a      	str	r2, [r3, #68]	; 0x44
 800c71e:	e7db      	b.n	800c6d8 <HAL_SAI_Init+0x218>
    return HAL_ERROR;
 800c720:	2501      	movs	r5, #1
 800c722:	e7e1      	b.n	800c6e8 <HAL_SAI_Init+0x228>
    return HAL_ERROR;
 800c724:	2501      	movs	r5, #1
 800c726:	e7df      	b.n	800c6e8 <HAL_SAI_Init+0x228>
 800c728:	40015404 	.word	0x40015404
 800c72c:	40015800 	.word	0x40015800
 800c730:	40015400 	.word	0x40015400
 800c734:	cccccccd 	.word	0xcccccccd
 800c738:	f805c010 	.word	0xf805c010
 800c73c:	fff88000 	.word	0xfff88000

0800c740 <HAL_SAI_InitProtocol>:
{
 800c740:	b510      	push	{r4, lr}
 800c742:	4604      	mov	r4, r0
  switch (protocol)
 800c744:	2902      	cmp	r1, #2
 800c746:	d906      	bls.n	800c756 <HAL_SAI_InitProtocol+0x16>
 800c748:	1ec8      	subs	r0, r1, #3
 800c74a:	2801      	cmp	r0, #1
 800c74c:	d80b      	bhi.n	800c766 <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800c74e:	4620      	mov	r0, r4
 800c750:	f7ff fe4a 	bl	800c3e8 <SAI_InitPCM>
      break;
 800c754:	e001      	b.n	800c75a <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800c756:	f7ff fde0 	bl	800c31a <SAI_InitI2S>
  if (status == HAL_OK)
 800c75a:	b100      	cbz	r0, 800c75e <HAL_SAI_InitProtocol+0x1e>
}
 800c75c:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 800c75e:	4620      	mov	r0, r4
 800c760:	f7ff feae 	bl	800c4c0 <HAL_SAI_Init>
 800c764:	e7fa      	b.n	800c75c <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 800c766:	2001      	movs	r0, #1
 800c768:	e7f8      	b.n	800c75c <HAL_SAI_InitProtocol+0x1c>
	...

0800c76c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	b083      	sub	sp, #12
 800c770:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800c772:	2300      	movs	r3, #0
 800c774:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800c776:	f7fb ff93 	bl	80086a0 <HAL_GetTick>
 800c77a:	4606      	mov	r6, r0
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c77c:	6820      	ldr	r0, [r4, #0]
 800c77e:	f002 fb8b 	bl	800ee98 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c782:	4605      	mov	r5, r0
 800c784:	b110      	cbz	r0, 800c78c <SD_PowerON+0x20>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 800c786:	4628      	mov	r0, r5
 800c788:	b003      	add	sp, #12
 800c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	f002 fed3 	bl	800f538 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c792:	b938      	cbnz	r0, 800c7a4 <SD_PowerON+0x38>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c794:	2301      	movs	r3, #1
 800c796:	6423      	str	r3, [r4, #64]	; 0x40
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d00b      	beq.n	800c7b6 <SD_PowerON+0x4a>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c79e:	462f      	mov	r7, r5
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	e014      	b.n	800c7ce <SD_PowerON+0x62>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c7a8:	6820      	ldr	r0, [r4, #0]
 800c7aa:	f002 fb75 	bl	800ee98 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d0f2      	beq.n	800c798 <SD_PowerON+0x2c>
      return errorstate;
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	e7e7      	b.n	800c786 <SD_PowerON+0x1a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	6820      	ldr	r0, [r4, #0]
 800c7ba:	f002 fcee 	bl	800f19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d0ed      	beq.n	800c79e <SD_PowerON+0x32>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7c2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c7c6:	e7de      	b.n	800c786 <SD_PowerON+0x1a>
    count++;
 800c7c8:	9b01      	ldr	r3, [sp, #4]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c7ce:	9a01      	ldr	r2, [sp, #4]
 800c7d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d815      	bhi.n	800c804 <SD_PowerON+0x98>
 800c7d8:	b9a7      	cbnz	r7, 800c804 <SD_PowerON+0x98>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7da:	2100      	movs	r1, #0
 800c7dc:	6820      	ldr	r0, [r4, #0]
 800c7de:	f002 fcdc 	bl	800f19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d16b      	bne.n	800c8be <SD_PowerON+0x152>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c7e6:	493d      	ldr	r1, [pc, #244]	; (800c8dc <SD_PowerON+0x170>)
 800c7e8:	6820      	ldr	r0, [r4, #0]
 800c7ea:	f002 fdf1 	bl	800f3d0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d166      	bne.n	800c8c2 <SD_PowerON+0x156>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	6820      	ldr	r0, [r4, #0]
 800c7f8:	f002 fb39 	bl	800ee6e <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c7fc:	0fc3      	lsrs	r3, r0, #31
 800c7fe:	d0e3      	beq.n	800c7c8 <SD_PowerON+0x5c>
 800c800:	461f      	mov	r7, r3
 800c802:	e7e1      	b.n	800c7c8 <SD_PowerON+0x5c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c804:	9a01      	ldr	r2, [sp, #4]
 800c806:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d85c      	bhi.n	800c8c8 <SD_PowerON+0x15c>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c80e:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 800c812:	d050      	beq.n	800c8b6 <SD_PowerON+0x14a>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c814:	2301      	movs	r3, #1
 800c816:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800c818:	69a3      	ldr	r3, [r4, #24]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d1b3      	bne.n	800c786 <SD_PowerON+0x1a>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800c81e:	f010 7580 	ands.w	r5, r0, #16777216	; 0x1000000
 800c822:	d0b0      	beq.n	800c786 <SD_PowerON+0x1a>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c824:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c828:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800c82a:	6822      	ldr	r2, [r4, #0]
 800c82c:	6813      	ldr	r3, [r2, #0]
 800c82e:	f043 0308 	orr.w	r3, r3, #8
 800c832:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800c834:	6820      	ldr	r0, [r4, #0]
 800c836:	f002 fd2d 	bl	800f294 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800c83a:	4605      	mov	r5, r0
 800c83c:	2800      	cmp	r0, #0
 800c83e:	d1a2      	bne.n	800c786 <SD_PowerON+0x1a>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c844:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 800c848:	d108      	bne.n	800c85c <SD_PowerON+0xf0>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c84a:	f7fb ff29 	bl	80086a0 <HAL_GetTick>
 800c84e:	1b83      	subs	r3, r0, r6
 800c850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c854:	d1f4      	bne.n	800c840 <SD_PowerON+0xd4>
            return HAL_SD_ERROR_TIMEOUT;
 800c856:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800c85a:	e794      	b.n	800c786 <SD_PowerON+0x1a>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800c85c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c860:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c866:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c86a:	d030      	beq.n	800c8ce <SD_PowerON+0x162>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800c86c:	2001      	movs	r0, #1
 800c86e:	f000 ff24 	bl	800d6ba <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800c872:	6822      	ldr	r2, [r4, #0]
 800c874:	6813      	ldr	r3, [r2, #0]
 800c876:	f043 0304 	orr.w	r3, r3, #4
 800c87a:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800c87c:	6823      	ldr	r3, [r4, #0]
 800c87e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c880:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800c884:	d108      	bne.n	800c898 <SD_PowerON+0x12c>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c886:	f7fb ff0b 	bl	80086a0 <HAL_GetTick>
 800c88a:	1b83      	subs	r3, r0, r6
 800c88c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c890:	d1f4      	bne.n	800c87c <SD_PowerON+0x110>
              return HAL_SD_ERROR_TIMEOUT;
 800c892:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800c896:	e776      	b.n	800c786 <SD_PowerON+0x1a>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800c898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c89c:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800c8a2:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
 800c8a6:	d115      	bne.n	800c8d4 <SD_PowerON+0x168>
          hsd->Instance->POWER = 0x13U;
 800c8a8:	2213      	movs	r2, #19
 800c8aa:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38
 800c8b4:	e767      	b.n	800c786 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	63e2      	str	r2, [r4, #60]	; 0x3c
  return HAL_SD_ERROR_NONE;
 800c8ba:	461d      	mov	r5, r3
 800c8bc:	e763      	b.n	800c786 <SD_PowerON+0x1a>
      return errorstate;
 800c8be:	4605      	mov	r5, r0
 800c8c0:	e761      	b.n	800c786 <SD_PowerON+0x1a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c8c2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c8c6:	e75e      	b.n	800c786 <SD_PowerON+0x1a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c8c8:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800c8cc:	e75b      	b.n	800c786 <SD_PowerON+0x1a>
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800c8ce:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c8d2:	e758      	b.n	800c786 <SD_PowerON+0x1a>
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c8d4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800c8d8:	e755      	b.n	800c786 <SD_PowerON+0x1a>
 800c8da:	bf00      	nop
 800c8dc:	c1100000 	.word	0xc1100000

0800c8e0 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c8e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  dataremaining = hsd->RxXferSize;
 800c8e4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  if (dataremaining > 0U)
 800c8e6:	b1ae      	cbz	r6, 800c914 <SD_Read_IT+0x34>
 800c8e8:	4607      	mov	r7, r0
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c8ea:	2500      	movs	r5, #0
 800c8ec:	e00e      	b.n	800c90c <SD_Read_IT+0x2c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c8ee:	6838      	ldr	r0, [r7, #0]
 800c8f0:	f002 fa92 	bl	800ee18 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800c8f4:	7020      	strb	r0, [r4, #0]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c8f6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c8fa:	7063      	strb	r3, [r4, #1]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c8fc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c900:	70a3      	strb	r3, [r4, #2]
      tmp++;
      dataremaining--;
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c902:	0e00      	lsrs	r0, r0, #24
 800c904:	70e0      	strb	r0, [r4, #3]
      tmp++;
 800c906:	3404      	adds	r4, #4
      dataremaining--;
 800c908:	3e04      	subs	r6, #4
    for(count = 0U; count < 8U; count++)
 800c90a:	3501      	adds	r5, #1
 800c90c:	2d07      	cmp	r5, #7
 800c90e:	d9ee      	bls.n	800c8ee <SD_Read_IT+0xe>
    }

    hsd->pRxBuffPtr = tmp;
 800c910:	62bc      	str	r4, [r7, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c912:	62fe      	str	r6, [r7, #44]	; 0x2c
  }
}
 800c914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c916 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c916:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c918:	b083      	sub	sp, #12
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c91a:	6a04      	ldr	r4, [r0, #32]
  dataremaining = hsd->TxXferSize;
 800c91c:	6a46      	ldr	r6, [r0, #36]	; 0x24

  if (dataremaining > 0U)
 800c91e:	b1de      	cbz	r6, 800c958 <SD_Write_IT+0x42>
 800c920:	4607      	mov	r7, r0
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c922:	2500      	movs	r5, #0
 800c924:	e014      	b.n	800c950 <SD_Write_IT+0x3a>
    {
      data = (uint32_t)(*tmp);
 800c926:	7823      	ldrb	r3, [r4, #0]
 800c928:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 8U);
 800c92a:	7862      	ldrb	r2, [r4, #1]
 800c92c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c930:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 16U);
 800c932:	78a2      	ldrb	r2, [r4, #2]
 800c934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c938:	9301      	str	r3, [sp, #4]
      tmp++;
      dataremaining--;
      data |= ((uint32_t)(*tmp) << 24U);
 800c93a:	78e2      	ldrb	r2, [r4, #3]
 800c93c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c940:	9301      	str	r3, [sp, #4]
      tmp++;
 800c942:	3404      	adds	r4, #4
      dataremaining--;
 800c944:	3e04      	subs	r6, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c946:	a901      	add	r1, sp, #4
 800c948:	6838      	ldr	r0, [r7, #0]
 800c94a:	f002 fa68 	bl	800ee1e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c94e:	3501      	adds	r5, #1
 800c950:	2d07      	cmp	r5, #7
 800c952:	d9e8      	bls.n	800c926 <SD_Write_IT+0x10>
    }

    hsd->pTxBuffPtr = tmp;
 800c954:	623c      	str	r4, [r7, #32]
    hsd->TxXferSize = dataremaining;
 800c956:	627e      	str	r6, [r7, #36]	; 0x24
  }
}
 800c958:	b003      	add	sp, #12
 800c95a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c95c <SD_SendSDStatus>:
{
 800c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c95e:	b087      	sub	sp, #28
 800c960:	4605      	mov	r5, r0
 800c962:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 800c964:	f7fb fe9c 	bl	80086a0 <HAL_GetTick>
 800c968:	4607      	mov	r7, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c96a:	2100      	movs	r1, #0
 800c96c:	6828      	ldr	r0, [r5, #0]
 800c96e:	f002 fa7e 	bl	800ee6e <SDMMC_GetResponse>
 800c972:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800c976:	d164      	bne.n	800ca42 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800c978:	2140      	movs	r1, #64	; 0x40
 800c97a:	6828      	ldr	r0, [r5, #0]
 800c97c:	f002 fb50 	bl	800f020 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c980:	4603      	mov	r3, r0
 800c982:	b110      	cbz	r0, 800c98a <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c984:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800c986:	63aa      	str	r2, [r5, #56]	; 0x38
    return errorstate;
 800c988:	e05d      	b.n	800ca46 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c98a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800c98c:	0409      	lsls	r1, r1, #16
 800c98e:	6828      	ldr	r0, [r5, #0]
 800c990:	f002 fc03 	bl	800f19a <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c994:	4603      	mov	r3, r0
 800c996:	b110      	cbz	r0, 800c99e <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c998:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800c99a:	63aa      	str	r2, [r5, #56]	; 0x38
    return errorstate;
 800c99c:	e053      	b.n	800ca46 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c99e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9a2:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 800c9a4:	2340      	movs	r3, #64	; 0x40
 800c9a6:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800c9a8:	2360      	movs	r3, #96	; 0x60
 800c9aa:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c9b8:	4669      	mov	r1, sp
 800c9ba:	6828      	ldr	r0, [r5, #0]
 800c9bc:	f002 fa5a 	bl	800ee74 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c9c0:	6828      	ldr	r0, [r5, #0]
 800c9c2:	f002 fc4e 	bl	800f262 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	b180      	cbz	r0, 800c9ec <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800c9ca:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800c9cc:	63aa      	str	r2, [r5, #56]	; 0x38
    return errorstate;
 800c9ce:	e03a      	b.n	800ca46 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c9d0:	6828      	ldr	r0, [r5, #0]
 800c9d2:	f002 fa21 	bl	800ee18 <SDMMC_ReadFIFO>
 800c9d6:	f846 0b04 	str.w	r0, [r6], #4
      for(count = 0U; count < 8U; count++)
 800c9da:	3401      	adds	r4, #1
 800c9dc:	2c07      	cmp	r4, #7
 800c9de:	d9f7      	bls.n	800c9d0 <SD_SendSDStatus+0x74>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c9e0:	f7fb fe5e 	bl	80086a0 <HAL_GetTick>
 800c9e4:	1bc0      	subs	r0, r0, r7
 800c9e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c9ea:	d02f      	beq.n	800ca4c <SD_SendSDStatus+0xf0>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c9f0:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 800c9f4:	d104      	bne.n	800ca00 <SD_SendSDStatus+0xa4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c9fc:	d0f0      	beq.n	800c9e0 <SD_SendSDStatus+0x84>
 800c9fe:	e7ed      	b.n	800c9dc <SD_SendSDStatus+0x80>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ca00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca02:	f012 0f08 	tst.w	r2, #8
 800ca06:	d124      	bne.n	800ca52 <SD_SendSDStatus+0xf6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ca08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca0a:	f012 0f02 	tst.w	r2, #2
 800ca0e:	d122      	bne.n	800ca56 <SD_SendSDStatus+0xfa>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ca10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca12:	f013 0f20 	tst.w	r3, #32
 800ca16:	d120      	bne.n	800ca5a <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ca18:	6828      	ldr	r0, [r5, #0]
 800ca1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ca1c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800ca20:	d00c      	beq.n	800ca3c <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ca22:	f002 f9f9 	bl	800ee18 <SDMMC_ReadFIFO>
 800ca26:	f846 0b04 	str.w	r0, [r6], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ca2a:	f7fb fe39 	bl	80086a0 <HAL_GetTick>
 800ca2e:	1bc0      	subs	r0, r0, r7
 800ca30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ca34:	d1f0      	bne.n	800ca18 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 800ca36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca3a:	e004      	b.n	800ca46 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca3c:	4a08      	ldr	r2, [pc, #32]	; (800ca60 <SD_SendSDStatus+0x104>)
 800ca3e:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 800ca40:	e001      	b.n	800ca46 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ca42:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	b007      	add	sp, #28
 800ca4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 800ca4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca50:	e7f9      	b.n	800ca46 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ca52:	2308      	movs	r3, #8
 800ca54:	e7f7      	b.n	800ca46 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ca56:	2302      	movs	r3, #2
 800ca58:	e7f5      	b.n	800ca46 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 800ca5a:	2320      	movs	r3, #32
 800ca5c:	e7f3      	b.n	800ca46 <SD_SendSDStatus+0xea>
 800ca5e:	bf00      	nop
 800ca60:	18000f3a 	.word	0x18000f3a

0800ca64 <SD_FindSCR>:
{
 800ca64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca66:	b089      	sub	sp, #36	; 0x24
 800ca68:	4604      	mov	r4, r0
 800ca6a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ca6c:	f7fb fe18 	bl	80086a0 <HAL_GetTick>
 800ca70:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ca72:	2300      	movs	r3, #0
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ca78:	2108      	movs	r1, #8
 800ca7a:	6820      	ldr	r0, [r4, #0]
 800ca7c:	f002 fad0 	bl	800f020 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca80:	4606      	mov	r6, r0
 800ca82:	b110      	cbz	r0, 800ca8a <SD_FindSCR+0x26>
}
 800ca84:	4630      	mov	r0, r6
 800ca86:	b009      	add	sp, #36	; 0x24
 800ca88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ca8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ca8c:	0409      	lsls	r1, r1, #16
 800ca8e:	6820      	ldr	r0, [r4, #0]
 800ca90:	f002 fb83 	bl	800f19a <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca94:	4606      	mov	r6, r0
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d1f4      	bne.n	800ca84 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca9e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800caa0:	2308      	movs	r3, #8
 800caa2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800caa4:	2330      	movs	r3, #48	; 0x30
 800caa6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800caa8:	2302      	movs	r3, #2
 800caaa:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800caac:	2300      	movs	r3, #0
 800caae:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800cab0:	2301      	movs	r3, #1
 800cab2:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cab4:	a902      	add	r1, sp, #8
 800cab6:	6820      	ldr	r0, [r4, #0]
 800cab8:	f002 f9dc 	bl	800ee74 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	f002 fb9e 	bl	800f1fe <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800cac2:	4606      	mov	r6, r0
 800cac4:	b170      	cbz	r0, 800cae4 <SD_FindSCR+0x80>
 800cac6:	e7dd      	b.n	800ca84 <SD_FindSCR+0x20>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800cac8:	f002 f9a6 	bl	800ee18 <SDMMC_ReadFIFO>
 800cacc:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800cace:	6820      	ldr	r0, [r4, #0]
 800cad0:	f002 f9a2 	bl	800ee18 <SDMMC_ReadFIFO>
 800cad4:	9001      	str	r0, [sp, #4]
      index++;
 800cad6:	3601      	adds	r6, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cad8:	f7fb fde2 	bl	80086a0 <HAL_GetTick>
 800cadc:	1b43      	subs	r3, r0, r5
 800cade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cae2:	d03e      	beq.n	800cb62 <SD_FindSCR+0xfe>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cae8:	f240 532a 	movw	r3, #1322	; 0x52a
 800caec:	421a      	tst	r2, r3
 800caee:	d106      	bne.n	800cafe <SD_FindSCR+0x9a>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800caf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800caf2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800caf6:	d1ef      	bne.n	800cad8 <SD_FindSCR+0x74>
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	d1ed      	bne.n	800cad8 <SD_FindSCR+0x74>
 800cafc:	e7e4      	b.n	800cac8 <SD_FindSCR+0x64>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cafe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb00:	f013 0f08 	tst.w	r3, #8
 800cb04:	d124      	bne.n	800cb50 <SD_FindSCR+0xec>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cb06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb08:	f013 0f02 	tst.w	r3, #2
 800cb0c:	d123      	bne.n	800cb56 <SD_FindSCR+0xf2>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cb0e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800cb10:	f016 0620 	ands.w	r6, r6, #32
 800cb14:	d122      	bne.n	800cb5c <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb16:	4b14      	ldr	r3, [pc, #80]	; (800cb68 <SD_FindSCR+0x104>)
 800cb18:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cb1a:	9a01      	ldr	r2, [sp, #4]
 800cb1c:	0213      	lsls	r3, r2, #8
 800cb1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb22:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cb26:	0a11      	lsrs	r1, r2, #8
 800cb28:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cb2c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cb2e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cb32:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cb34:	9a00      	ldr	r2, [sp, #0]
 800cb36:	0213      	lsls	r3, r2, #8
 800cb38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cb40:	0a11      	lsrs	r1, r2, #8
 800cb42:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cb46:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cb48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cb4c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800cb4e:	e799      	b.n	800ca84 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cb50:	2608      	movs	r6, #8
 800cb52:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cb54:	e796      	b.n	800ca84 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cb56:	2602      	movs	r6, #2
 800cb58:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb5a:	e793      	b.n	800ca84 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cb5c:	2620      	movs	r6, #32
 800cb5e:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800cb60:	e790      	b.n	800ca84 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 800cb62:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cb66:	e78d      	b.n	800ca84 <SD_FindSCR+0x20>
 800cb68:	18000f3a 	.word	0x18000f3a

0800cb6c <SD_WideBus_Enable>:
{
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800cb72:	2100      	movs	r1, #0
 800cb74:	9100      	str	r1, [sp, #0]
 800cb76:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb78:	6800      	ldr	r0, [r0, #0]
 800cb7a:	f002 f978 	bl	800ee6e <SDMMC_GetResponse>
 800cb7e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800cb82:	d113      	bne.n	800cbac <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800cb84:	4669      	mov	r1, sp
 800cb86:	4620      	mov	r0, r4
 800cb88:	f7ff ff6c 	bl	800ca64 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb8c:	b980      	cbnz	r0, 800cbb0 <SD_WideBus_Enable+0x44>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb8e:	9b01      	ldr	r3, [sp, #4]
 800cb90:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800cb94:	d00e      	beq.n	800cbb4 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb96:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb98:	0409      	lsls	r1, r1, #16
 800cb9a:	6820      	ldr	r0, [r4, #0]
 800cb9c:	f002 fafd 	bl	800f19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800cba0:	b930      	cbnz	r0, 800cbb0 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cba2:	2102      	movs	r1, #2
 800cba4:	6820      	ldr	r0, [r4, #0]
 800cba6:	f002 fb11 	bl	800f1cc <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbaa:	e001      	b.n	800cbb0 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cbac:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800cbb0:	b002      	add	sp, #8
 800cbb2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cbb4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800cbb8:	e7fa      	b.n	800cbb0 <SD_WideBus_Enable+0x44>

0800cbba <SD_WideBus_Disable>:
{
 800cbba:	b510      	push	{r4, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	9100      	str	r1, [sp, #0]
 800cbc4:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cbc6:	6800      	ldr	r0, [r0, #0]
 800cbc8:	f002 f951 	bl	800ee6e <SDMMC_GetResponse>
 800cbcc:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800cbd0:	d113      	bne.n	800cbfa <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 800cbd2:	4669      	mov	r1, sp
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f7ff ff45 	bl	800ca64 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbda:	b980      	cbnz	r0, 800cbfe <SD_WideBus_Disable+0x44>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800cbe2:	d00e      	beq.n	800cc02 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cbe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cbe6:	0409      	lsls	r1, r1, #16
 800cbe8:	6820      	ldr	r0, [r4, #0]
 800cbea:	f002 fad6 	bl	800f19a <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbee:	b930      	cbnz	r0, 800cbfe <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	6820      	ldr	r0, [r4, #0]
 800cbf4:	f002 faea 	bl	800f1cc <SDMMC_CmdBusWidth>
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbf8:	e001      	b.n	800cbfe <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cbfa:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800cbfe:	b002      	add	sp, #8
 800cc00:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc02:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800cc06:	e7fa      	b.n	800cbfe <SD_WideBus_Disable+0x44>

0800cc08 <SD_SendStatus>:
{
 800cc08:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 800cc0a:	b181      	cbz	r1, 800cc2e <SD_SendStatus+0x26>
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc10:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800cc12:	0409      	lsls	r1, r1, #16
 800cc14:	6800      	ldr	r0, [r0, #0]
 800cc16:	f002 fb0b 	bl	800f230 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	b108      	cbz	r0, 800cc22 <SD_SendStatus+0x1a>
}
 800cc1e:	4628      	mov	r0, r5
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc22:	2100      	movs	r1, #0
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	f002 f922 	bl	800ee6e <SDMMC_GetResponse>
 800cc2a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800cc2c:	e7f7      	b.n	800cc1e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800cc2e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800cc32:	e7f4      	b.n	800cc1e <SD_SendStatus+0x16>

0800cc34 <HAL_SD_ReadBlocks_DMA>:
{
 800cc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc38:	b086      	sub	sp, #24
 800cc3a:	4604      	mov	r4, r0
  if(NULL == pData)
 800cc3c:	2900      	cmp	r1, #0
 800cc3e:	d049      	beq.n	800ccd4 <HAL_SD_ReadBlocks_DMA+0xa0>
 800cc40:	4616      	mov	r6, r2
 800cc42:	461f      	mov	r7, r3
 800cc44:	4688      	mov	r8, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800cc46:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 800cc4a:	b2ed      	uxtb	r5, r5
 800cc4c:	2d01      	cmp	r5, #1
 800cc4e:	d15a      	bne.n	800cd06 <HAL_SD_ReadBlocks_DMA+0xd2>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc50:	2300      	movs	r3, #0
 800cc52:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc54:	19d3      	adds	r3, r2, r7
 800cc56:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d841      	bhi.n	800cce0 <HAL_SD_ReadBlocks_DMA+0xac>
    hsd->State = HAL_SD_STATE_BUSY;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800cc62:	6803      	ldr	r3, [r0, #0]
 800cc64:	2200      	movs	r2, #0
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->pRxBuffPtr = pData;
 800cc68:	62a1      	str	r1, [r4, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cc6a:	027b      	lsls	r3, r7, #9
 800cc6c:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc6e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cc70:	2a01      	cmp	r2, #1
 800cc72:	d000      	beq.n	800cc76 <HAL_SD_ReadBlocks_DMA+0x42>
        add *= 512U;
 800cc74:	0276      	lsls	r6, r6, #9
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc7a:	9200      	str	r2, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc7c:	9301      	str	r3, [sp, #4]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cc7e:	2390      	movs	r3, #144	; 0x90
 800cc80:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cc82:	2302      	movs	r3, #2
 800cc84:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800cc8a:	9305      	str	r3, [sp, #20]
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cc8c:	4669      	mov	r1, sp
 800cc8e:	6820      	ldr	r0, [r4, #0]
 800cc90:	f002 f8f0 	bl	800ee74 <SDMMC_ConfigData>
      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cc94:	6822      	ldr	r2, [r4, #0]
 800cc96:	68d3      	ldr	r3, [r2, #12]
 800cc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc9c:	60d3      	str	r3, [r2, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	2201      	movs	r2, #1
 800cca8:	651a      	str	r2, [r3, #80]	; 0x50
      if(NumberOfBlocks > 1U)
 800ccaa:	4297      	cmp	r7, r2
 800ccac:	d91d      	bls.n	800ccea <HAL_SD_ReadBlocks_DMA+0xb6>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ccae:	2382      	movs	r3, #130	; 0x82
 800ccb0:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	6820      	ldr	r0, [r4, #0]
 800ccb6:	f002 f9e5 	bl	800f084 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 800ccba:	b1e8      	cbz	r0, 800ccf8 <HAL_SD_ReadBlocks_DMA+0xc4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	4a14      	ldr	r2, [pc, #80]	; (800cd10 <HAL_SD_ReadBlocks_DMA+0xdc>)
 800ccc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ccc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ccc4:	4318      	orrs	r0, r3
 800ccc6:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 800ccd2:	e019      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ccd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ccda:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800ccdc:	2501      	movs	r5, #1
 800ccde:	e013      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0xd4>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cce6:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 800cce8:	e00e      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0xd4>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ccea:	2381      	movs	r3, #129	; 0x81
 800ccec:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ccee:	4631      	mov	r1, r6
 800ccf0:	6820      	ldr	r0, [r4, #0]
 800ccf2:	f002 f9ae 	bl	800f052 <SDMMC_CmdReadSingleBlock>
 800ccf6:	e7e0      	b.n	800ccba <HAL_SD_ReadBlocks_DMA+0x86>
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ccfc:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 800cd00:	63d3      	str	r3, [r2, #60]	; 0x3c
      return HAL_OK;
 800cd02:	2500      	movs	r5, #0
 800cd04:	e000      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0xd4>
    return HAL_BUSY;
 800cd06:	2502      	movs	r5, #2
}
 800cd08:	4628      	mov	r0, r5
 800cd0a:	b006      	add	sp, #24
 800cd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd10:	1fe00fff 	.word	0x1fe00fff

0800cd14 <HAL_SD_WriteBlocks_DMA>:
{
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd18:	b086      	sub	sp, #24
 800cd1a:	4604      	mov	r4, r0
  if(NULL == pData)
 800cd1c:	2900      	cmp	r1, #0
 800cd1e:	d048      	beq.n	800cdb2 <HAL_SD_WriteBlocks_DMA+0x9e>
 800cd20:	4616      	mov	r6, r2
 800cd22:	461f      	mov	r7, r3
 800cd24:	4688      	mov	r8, r1
  if(hsd->State == HAL_SD_STATE_READY)
 800cd26:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
 800cd2a:	b2ed      	uxtb	r5, r5
 800cd2c:	2d01      	cmp	r5, #1
 800cd2e:	d159      	bne.n	800cde4 <HAL_SD_WriteBlocks_DMA+0xd0>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd30:	2300      	movs	r3, #0
 800cd32:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd34:	19d3      	adds	r3, r2, r7
 800cd36:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d840      	bhi.n	800cdbe <HAL_SD_WriteBlocks_DMA+0xaa>
    hsd->State = HAL_SD_STATE_BUSY;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800cd42:	6803      	ldr	r3, [r0, #0]
 800cd44:	2200      	movs	r2, #0
 800cd46:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->pTxBuffPtr = pData;
 800cd48:	6221      	str	r1, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cd4a:	027b      	lsls	r3, r7, #9
 800cd4c:	6243      	str	r3, [r0, #36]	; 0x24
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd4e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cd50:	2a01      	cmp	r2, #1
 800cd52:	d000      	beq.n	800cd56 <HAL_SD_WriteBlocks_DMA+0x42>
      add *= 512U;
 800cd54:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd5a:	9200      	str	r2, [sp, #0]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd5c:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd5e:	2390      	movs	r3, #144	; 0x90
 800cd60:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cd62:	2300      	movs	r3, #0
 800cd64:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd66:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd68:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd6a:	4669      	mov	r1, sp
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	f002 f881 	bl	800ee74 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cd72:	6822      	ldr	r2, [r4, #0]
 800cd74:	68d3      	ldr	r3, [r2, #12]
 800cd76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7a:	60d3      	str	r3, [r2, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cd82:	6823      	ldr	r3, [r4, #0]
 800cd84:	2201      	movs	r2, #1
 800cd86:	651a      	str	r2, [r3, #80]	; 0x50
    if(NumberOfBlocks > 1U)
 800cd88:	4297      	cmp	r7, r2
 800cd8a:	d91d      	bls.n	800cdc8 <HAL_SD_WriteBlocks_DMA+0xb4>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd8c:	23a0      	movs	r3, #160	; 0xa0
 800cd8e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cd90:	4631      	mov	r1, r6
 800cd92:	6820      	ldr	r0, [r4, #0]
 800cd94:	f002 f9a8 	bl	800f0e8 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd98:	b1e8      	cbz	r0, 800cdd6 <HAL_SD_WriteBlocks_DMA+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	4a14      	ldr	r2, [pc, #80]	; (800cdf0 <HAL_SD_WriteBlocks_DMA+0xdc>)
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cda0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cda2:	4318      	orrs	r0, r3
 800cda4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cda6:	2301      	movs	r3, #1
 800cda8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdac:	2300      	movs	r3, #0
 800cdae:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800cdb0:	e019      	b.n	800cde6 <HAL_SD_WriteBlocks_DMA+0xd2>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cdb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdb8:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800cdba:	2501      	movs	r5, #1
 800cdbc:	e013      	b.n	800cde6 <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cdbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cdc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cdc4:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 800cdc6:	e00e      	b.n	800cde6 <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cdc8:	2390      	movs	r3, #144	; 0x90
 800cdca:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cdcc:	4631      	mov	r1, r6
 800cdce:	6820      	ldr	r0, [r4, #0]
 800cdd0:	f002 f971 	bl	800f0b6 <SDMMC_CmdWriteSingleBlock>
 800cdd4:	e7e0      	b.n	800cd98 <HAL_SD_WriteBlocks_DMA+0x84>
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cdd6:	6822      	ldr	r2, [r4, #0]
 800cdd8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cdda:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 800cdde:	63d3      	str	r3, [r2, #60]	; 0x3c
      return HAL_OK;
 800cde0:	2500      	movs	r5, #0
 800cde2:	e000      	b.n	800cde6 <HAL_SD_WriteBlocks_DMA+0xd2>
    return HAL_BUSY;
 800cde4:	2502      	movs	r5, #2
}
 800cde6:	4628      	mov	r0, r5
 800cde8:	b006      	add	sp, #24
 800cdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdee:	bf00      	nop
 800cdf0:	1fe00fff 	.word	0x1fe00fff

0800cdf4 <HAL_SD_ErrorCallback>:
}
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <HAL_SD_IRQHandler>:
{
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800cdfc:	6b05      	ldr	r5, [r0, #48]	; 0x30
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cdfe:	6803      	ldr	r3, [r0, #0]
 800ce00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce02:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800ce06:	d002      	beq.n	800ce0e <HAL_SD_IRQHandler+0x16>
 800ce08:	f015 0f08 	tst.w	r5, #8
 800ce0c:	d12c      	bne.n	800ce68 <HAL_SD_IRQHandler+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800ce0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce10:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ce14:	d069      	beq.n	800ceea <HAL_SD_IRQHandler+0xf2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800ce16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800ce1c:	6822      	ldr	r2, [r4, #0]
 800ce1e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ce20:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ce24:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ce28:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ce2a:	6822      	ldr	r2, [r4, #0]
 800ce2c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ce2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce32:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ce34:	6822      	ldr	r2, [r4, #0]
 800ce36:	68d3      	ldr	r3, [r2, #12]
 800ce38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce3c:	60d3      	str	r3, [r2, #12]
    if((context & SD_CONTEXT_IT) != 0U)
 800ce3e:	f015 0f08 	tst.w	r5, #8
 800ce42:	d025      	beq.n	800ce90 <HAL_SD_IRQHandler+0x98>
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce44:	f015 0f22 	tst.w	r5, #34	; 0x22
 800ce48:	d111      	bne.n	800ce6e <HAL_SD_IRQHandler+0x76>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	4a74      	ldr	r2, [pc, #464]	; (800d020 <HAL_SD_IRQHandler+0x228>)
 800ce4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce50:	2301      	movs	r3, #1
 800ce52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce56:	2300      	movs	r3, #0
 800ce58:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce5a:	f015 0f03 	tst.w	r5, #3
 800ce5e:	d013      	beq.n	800ce88 <HAL_SD_IRQHandler+0x90>
        HAL_SD_RxCpltCallback(hsd);
 800ce60:	4620      	mov	r0, r4
 800ce62:	f002 fedb 	bl	800fc1c <HAL_SD_RxCpltCallback>
 800ce66:	e001      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
    SD_Read_IT(hsd);
 800ce68:	f7ff fd3a 	bl	800c8e0 <SD_Read_IT>
}
 800ce6c:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	f002 f954 	bl	800f11c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce74:	4603      	mov	r3, r0
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d0e7      	beq.n	800ce4a <HAL_SD_IRQHandler+0x52>
          hsd->ErrorCode |= errorstate;
 800ce7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ce80:	4620      	mov	r0, r4
 800ce82:	f7ff ffb7 	bl	800cdf4 <HAL_SD_ErrorCallback>
 800ce86:	e7e0      	b.n	800ce4a <HAL_SD_IRQHandler+0x52>
        HAL_SD_TxCpltCallback(hsd);
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f002 fec3 	bl	800fc14 <HAL_SD_TxCpltCallback>
 800ce8e:	e7ed      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce90:	f015 0f80 	tst.w	r5, #128	; 0x80
 800ce94:	d0ea      	beq.n	800ce6c <HAL_SD_IRQHandler+0x74>
      hsd->Instance->DLEN = 0;
 800ce96:	6822      	ldr	r2, [r4, #0]
 800ce98:	2300      	movs	r3, #0
 800ce9a:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800ce9c:	6822      	ldr	r2, [r4, #0]
 800ce9e:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cea0:	6822      	ldr	r2, [r4, #0]
 800cea2:	6513      	str	r3, [r2, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cea4:	f015 0f22 	tst.w	r5, #34	; 0x22
 800cea8:	d10e      	bne.n	800cec8 <HAL_SD_IRQHandler+0xd0>
      hsd->State = HAL_SD_STATE_READY;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	6323      	str	r3, [r4, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ceb4:	f015 0f30 	tst.w	r5, #48	; 0x30
 800ceb8:	d113      	bne.n	800cee2 <HAL_SD_IRQHandler+0xea>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ceba:	f015 0f03 	tst.w	r5, #3
 800cebe:	d0d5      	beq.n	800ce6c <HAL_SD_IRQHandler+0x74>
        HAL_SD_RxCpltCallback(hsd);
 800cec0:	4620      	mov	r0, r4
 800cec2:	f002 feab 	bl	800fc1c <HAL_SD_RxCpltCallback>
 800cec6:	e7d1      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cec8:	6820      	ldr	r0, [r4, #0]
 800ceca:	f002 f927 	bl	800f11c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800cece:	4603      	mov	r3, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d0ea      	beq.n	800ceaa <HAL_SD_IRQHandler+0xb2>
          hsd->ErrorCode |= errorstate;
 800ced4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ced6:	4313      	orrs	r3, r2
 800ced8:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff ff8a 	bl	800cdf4 <HAL_SD_ErrorCallback>
 800cee0:	e7e3      	b.n	800ceaa <HAL_SD_IRQHandler+0xb2>
        HAL_SD_TxCpltCallback(hsd);
 800cee2:	4620      	mov	r0, r4
 800cee4:	f002 fe96 	bl	800fc14 <HAL_SD_TxCpltCallback>
 800cee8:	e7e7      	b.n	800ceba <HAL_SD_IRQHandler+0xc2>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ceea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceec:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800cef0:	d002      	beq.n	800cef8 <HAL_SD_IRQHandler+0x100>
 800cef2:	f015 0f08 	tst.w	r5, #8
 800cef6:	d162      	bne.n	800cfbe <HAL_SD_IRQHandler+0x1c6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800cef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cefa:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 800cefe:	d06b      	beq.n	800cfd8 <HAL_SD_IRQHandler+0x1e0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cf00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf02:	f012 0f02 	tst.w	r2, #2
 800cf06:	d003      	beq.n	800cf10 <HAL_SD_IRQHandler+0x118>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cf0a:	f042 0202 	orr.w	r2, r2, #2
 800cf0e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cf10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf12:	f012 0f08 	tst.w	r2, #8
 800cf16:	d003      	beq.n	800cf20 <HAL_SD_IRQHandler+0x128>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cf1a:	f042 0208 	orr.w	r2, r2, #8
 800cf1e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cf20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf22:	f012 0f20 	tst.w	r2, #32
 800cf26:	d003      	beq.n	800cf30 <HAL_SD_IRQHandler+0x138>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cf2a:	f042 0220 	orr.w	r2, r2, #32
 800cf2e:	63a2      	str	r2, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cf30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf32:	f012 0f10 	tst.w	r2, #16
 800cf36:	d003      	beq.n	800cf40 <HAL_SD_IRQHandler+0x148>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cf38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cf3a:	f042 0210 	orr.w	r2, r2, #16
 800cf3e:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf40:	4a37      	ldr	r2, [pc, #220]	; (800d020 <HAL_SD_IRQHandler+0x228>)
 800cf42:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800cf44:	6822      	ldr	r2, [r4, #0]
 800cf46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cf48:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800cf4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cf4e:	6822      	ldr	r2, [r4, #0]
 800cf50:	68d3      	ldr	r3, [r2, #12]
 800cf52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf56:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cf58:	6822      	ldr	r2, [r4, #0]
 800cf5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cf5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf60:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	68d3      	ldr	r3, [r2, #12]
 800cf66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf6a:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf6c:	6820      	ldr	r0, [r4, #0]
 800cf6e:	f002 f8d5 	bl	800f11c <SDMMC_CmdStopTransfer>
 800cf72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf74:	4303      	orrs	r3, r0
 800cf76:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cf78:	6822      	ldr	r2, [r4, #0]
 800cf7a:	68d3      	ldr	r3, [r2, #12]
 800cf7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf80:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf88:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cf8a:	f015 0f08 	tst.w	r5, #8
 800cf8e:	d11a      	bne.n	800cfc6 <HAL_SD_IRQHandler+0x1ce>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cf90:	f015 0f80 	tst.w	r5, #128	; 0x80
 800cf94:	f43f af6a 	beq.w	800ce6c <HAL_SD_IRQHandler+0x74>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cf98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f43f af66 	beq.w	800ce6c <HAL_SD_IRQHandler+0x74>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cfa0:	6822      	ldr	r2, [r4, #0]
 800cfa2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cfa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfa8:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	2200      	movs	r2, #0
 800cfae:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7ff ff1c 	bl	800cdf4 <HAL_SD_ErrorCallback>
 800cfbc:	e756      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
    SD_Write_IT(hsd);
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f7ff fca9 	bl	800c916 <SD_Write_IT>
 800cfc4:	e752      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
      hsd->State = HAL_SD_STATE_READY;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f7ff ff0f 	bl	800cdf4 <HAL_SD_ErrorCallback>
 800cfd6:	e749      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cfd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfda:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800cfde:	f43f af45 	beq.w	800ce6c <HAL_SD_IRQHandler+0x74>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cfe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe6:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cfe8:	6823      	ldr	r3, [r4, #0]
 800cfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfec:	f013 0f04 	tst.w	r3, #4
 800cff0:	d10a      	bne.n	800d008 <HAL_SD_IRQHandler+0x210>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cff2:	f015 0f20 	tst.w	r5, #32
 800cff6:	d003      	beq.n	800d000 <HAL_SD_IRQHandler+0x208>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 800cff8:	4620      	mov	r0, r4
 800cffa:	f000 fb62 	bl	800d6c2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
 800cffe:	e735      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fb5c 	bl	800d6be <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 800d006:	e731      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d008:	f015 0f20 	tst.w	r5, #32
 800d00c:	d003      	beq.n	800d016 <HAL_SD_IRQHandler+0x21e>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800d00e:	4620      	mov	r0, r4
 800d010:	f000 fb56 	bl	800d6c0 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 800d014:	e72a      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800d016:	4620      	mov	r0, r4
 800d018:	f000 fb50 	bl	800d6bc <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800d01c:	e726      	b.n	800ce6c <HAL_SD_IRQHandler+0x74>
 800d01e:	bf00      	nop
 800d020:	18000f3a 	.word	0x18000f3a

0800d024 <HAL_SD_GetCardCSD>:
{
 800d024:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d026:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d028:	0f9b      	lsrs	r3, r3, #30
 800d02a:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d02c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d02e:	f3c3 6383 	ubfx	r3, r3, #26, #4
 800d032:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d034:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
 800d038:	f003 0303 	and.w	r3, r3, #3
 800d03c:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d03e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 800d042:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d044:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800d048:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d04a:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800d04e:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d050:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d052:	0d1b      	lsrs	r3, r3, #20
 800d054:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d056:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
 800d05a:	f003 030f 	and.w	r3, r3, #15
 800d05e:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d060:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d062:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800d066:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d068:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d06a:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800d06e:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d070:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d072:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800d076:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d078:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d07a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800d07e:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d080:	2300      	movs	r3, #0
 800d082:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800d084:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d086:	2b00      	cmp	r3, #0
 800d088:	f040 8088 	bne.w	800d19c <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d08c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800d08e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d092:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800d096:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800d098:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800d09c:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d09e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d0a0:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800d0a4:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d0a6:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800d0aa:	f003 0307 	and.w	r3, r3, #7
 800d0ae:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d0b0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d0b2:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800d0b6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d0b8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d0ba:	f3c3 4382 	ubfx	r3, r3, #18, #3
 800d0be:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d0c0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d0c2:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 800d0c6:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d0c8:	690b      	ldr	r3, [r1, #16]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d0ce:	7e0a      	ldrb	r2, [r1, #24]
 800d0d0:	f002 0207 	and.w	r2, r2, #7
 800d0d4:	3202      	adds	r2, #2
 800d0d6:	fa03 f202 	lsl.w	r2, r3, r2
 800d0da:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d0dc:	7a0b      	ldrb	r3, [r1, #8]
 800d0de:	f003 040f 	and.w	r4, r3, #15
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	40a3      	lsls	r3, r4
 800d0e6:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d0e8:	0a5b      	lsrs	r3, r3, #9
 800d0ea:	fb03 f302 	mul.w	r3, r3, r2
 800d0ee:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800d0f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0f4:	6583      	str	r3, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d0f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d0f8:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800d0fc:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d0fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d100:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 800d104:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d106:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800d108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10c:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d10e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d110:	0fdb      	lsrs	r3, r3, #31
 800d112:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d114:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d116:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800d11a:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d11c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d11e:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800d122:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d124:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d126:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800d12a:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d12c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800d12e:	f3c3 5340 	ubfx	r3, r3, #21, #1
 800d132:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d13c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800d140:	f002 0201 	and.w	r2, r2, #1
 800d144:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d148:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d14a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800d14e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d152:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d154:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800d158:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d15c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d15e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800d162:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d166:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d168:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800d16c:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d170:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d172:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800d176:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d17a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d17c:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800d180:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d184:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d186:	f3c2 0246 	ubfx	r2, r2, #1, #7
 800d18a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800d18e:	2201      	movs	r2, #1
 800d190:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800d194:	4618      	mov	r0, r3
}
 800d196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d19a:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d111      	bne.n	800d1c4 <HAL_SD_GetCardCSD+0x1a0>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d1a0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800d1a2:	041b      	lsls	r3, r3, #16
 800d1a4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d1a8:	f8b0 206a 	ldrh.w	r2, [r0, #106]	; 0x6a
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d1b0:	690b      	ldr	r3, [r1, #16]
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	029b      	lsls	r3, r3, #10
 800d1b6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d1b8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800d1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1be:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d1c0:	6583      	str	r3, [r0, #88]	; 0x58
 800d1c2:	e798      	b.n	800d0f6 <HAL_SD_GetCardCSD+0xd2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1c4:	6803      	ldr	r3, [r0, #0]
 800d1c6:	4a05      	ldr	r2, [pc, #20]	; (800d1dc <HAL_SD_GetCardCSD+0x1b8>)
 800d1c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d1cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1d0:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800d1d8:	4618      	mov	r0, r3
 800d1da:	e7dc      	b.n	800d196 <HAL_SD_GetCardCSD+0x172>
 800d1dc:	1fe00fff 	.word	0x1fe00fff

0800d1e0 <SD_InitCard>:
{
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	b08c      	sub	sp, #48	; 0x30
 800d1e4:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d1ec:	6800      	ldr	r0, [r0, #0]
 800d1ee:	f001 fe25 	bl	800ee3c <SDMMC_GetPowerState>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d058      	beq.n	800d2a8 <SD_InitCard+0xc8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d1f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d134      	bne.n	800d266 <SD_InitCard+0x86>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d1fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d14a      	bne.n	800d298 <SD_InitCard+0xb8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d204:	2b03      	cmp	r3, #3
 800d206:	d01c      	beq.n	800d242 <SD_InitCard+0x62>
    hsd->SdCard.RelCardAdd = sd_rca;
 800d208:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800d20c:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d20e:	0409      	lsls	r1, r1, #16
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	f002 f89f 	bl	800f354 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800d216:	2800      	cmp	r0, #0
 800d218:	d148      	bne.n	800d2ac <SD_InitCard+0xcc>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d21a:	2100      	movs	r1, #0
 800d21c:	6820      	ldr	r0, [r4, #0]
 800d21e:	f001 fe26 	bl	800ee6e <SDMMC_GetResponse>
 800d222:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d224:	2104      	movs	r1, #4
 800d226:	6820      	ldr	r0, [r4, #0]
 800d228:	f001 fe21 	bl	800ee6e <SDMMC_GetResponse>
 800d22c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d22e:	2108      	movs	r1, #8
 800d230:	6820      	ldr	r0, [r4, #0]
 800d232:	f001 fe1c 	bl	800ee6e <SDMMC_GetResponse>
 800d236:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d238:	210c      	movs	r1, #12
 800d23a:	6820      	ldr	r0, [r4, #0]
 800d23c:	f001 fe17 	bl	800ee6e <SDMMC_GetResponse>
 800d240:	66e0      	str	r0, [r4, #108]	; 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d242:	2104      	movs	r1, #4
 800d244:	6820      	ldr	r0, [r4, #0]
 800d246:	f001 fe12 	bl	800ee6e <SDMMC_GetResponse>
 800d24a:	0d00      	lsrs	r0, r0, #20
 800d24c:	6460      	str	r0, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d24e:	a901      	add	r1, sp, #4
 800d250:	4620      	mov	r0, r4
 800d252:	f7ff fee7 	bl	800d024 <HAL_SD_GetCardCSD>
 800d256:	bb58      	cbnz	r0, 800d2b0 <SD_InitCard+0xd0>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d258:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d25a:	0412      	lsls	r2, r2, #16
 800d25c:	2300      	movs	r3, #0
 800d25e:	6820      	ldr	r0, [r4, #0]
 800d260:	f001 ff82 	bl	800f168 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d264:	e022      	b.n	800d2ac <SD_InitCard+0xcc>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	f002 f85e 	bl	800f328 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800d26c:	b9f0      	cbnz	r0, 800d2ac <SD_InitCard+0xcc>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d26e:	2100      	movs	r1, #0
 800d270:	6820      	ldr	r0, [r4, #0]
 800d272:	f001 fdfc 	bl	800ee6e <SDMMC_GetResponse>
 800d276:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d278:	2104      	movs	r1, #4
 800d27a:	6820      	ldr	r0, [r4, #0]
 800d27c:	f001 fdf7 	bl	800ee6e <SDMMC_GetResponse>
 800d280:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d282:	2108      	movs	r1, #8
 800d284:	6820      	ldr	r0, [r4, #0]
 800d286:	f001 fdf2 	bl	800ee6e <SDMMC_GetResponse>
 800d28a:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d28c:	210c      	movs	r1, #12
 800d28e:	6820      	ldr	r0, [r4, #0]
 800d290:	f001 fded 	bl	800ee6e <SDMMC_GetResponse>
 800d294:	67e0      	str	r0, [r4, #124]	; 0x7c
 800d296:	e7b1      	b.n	800d1fc <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d298:	f10d 0102 	add.w	r1, sp, #2
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	f002 f8ff 	bl	800f4a0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d0ad      	beq.n	800d202 <SD_InitCard+0x22>
 800d2a6:	e001      	b.n	800d2ac <SD_InitCard+0xcc>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d2a8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
}
 800d2ac:	b00c      	add	sp, #48	; 0x30
 800d2ae:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d2b4:	e7fa      	b.n	800d2ac <SD_InitCard+0xcc>
	...

0800d2b8 <HAL_SD_InitCard>:
{
 800d2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ba:	b08b      	sub	sp, #44	; 0x2c
 800d2bc:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	9304      	str	r3, [sp, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d2c2:	9305      	str	r3, [sp, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d2c4:	9306      	str	r3, [sp, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d2c6:	9307      	str	r3, [sp, #28]
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d2c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d2cc:	f7fe f9b2 	bl	800b634 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800d2d0:	b1b8      	cbz	r0, 800d302 <HAL_SD_InitCard+0x4a>
 800d2d2:	4607      	mov	r7, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d2d4:	0a05      	lsrs	r5, r0, #8
 800d2d6:	4b2e      	ldr	r3, [pc, #184]	; (800d390 <HAL_SD_InitCard+0xd8>)
 800d2d8:	fba3 3505 	umull	r3, r5, r3, r5
 800d2dc:	092d      	lsrs	r5, r5, #4
 800d2de:	9508      	str	r5, [sp, #32]
  Init.Transceiver = hsd->Init.Transceiver;
 800d2e0:	69a3      	ldr	r3, [r4, #24]
 800d2e2:	9309      	str	r3, [sp, #36]	; 0x24
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d015      	beq.n	800d314 <HAL_SD_InitCard+0x5c>
  status = SDMMC_Init(hsd->Instance, Init);
 800d2e8:	ab0a      	add	r3, sp, #40	; 0x28
 800d2ea:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d2ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d2f2:	ab04      	add	r3, sp, #16
 800d2f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2f6:	6820      	ldr	r0, [r4, #0]
 800d2f8:	f001 fd74 	bl	800ede4 <SDMMC_Init>
  if(status != HAL_OK)
 800d2fc:	b180      	cbz	r0, 800d320 <HAL_SD_InitCard+0x68>
    return HAL_ERROR;
 800d2fe:	2601      	movs	r6, #1
 800d300:	e005      	b.n	800d30e <HAL_SD_InitCard+0x56>
      hsd->State = HAL_SD_STATE_READY;
 800d302:	2601      	movs	r6, #1
 800d304:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d30c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800d30e:	4630      	mov	r0, r6
 800d310:	b00b      	add	sp, #44	; 0x2c
 800d312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800d314:	6822      	ldr	r2, [r4, #0]
 800d316:	6813      	ldr	r3, [r2, #0]
 800d318:	f043 0310 	orr.w	r3, r3, #16
 800d31c:	6013      	str	r3, [r2, #0]
 800d31e:	e7e3      	b.n	800d2e8 <HAL_SD_InitCard+0x30>
  status = SDMMC_PowerState_ON(hsd->Instance);
 800d320:	6820      	ldr	r0, [r4, #0]
 800d322:	f001 fd81 	bl	800ee28 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800d326:	4606      	mov	r6, r0
 800d328:	b108      	cbz	r0, 800d32e <HAL_SD_InitCard+0x76>
    return HAL_ERROR;
 800d32a:	2601      	movs	r6, #1
 800d32c:	e7ef      	b.n	800d30e <HAL_SD_InitCard+0x56>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800d32e:	006d      	lsls	r5, r5, #1
 800d330:	fbb7 f7f5 	udiv	r7, r7, r5
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d334:	4817      	ldr	r0, [pc, #92]	; (800d394 <HAL_SD_InitCard+0xdc>)
 800d336:	fbb0 f0f7 	udiv	r0, r0, r7
 800d33a:	3001      	adds	r0, #1
 800d33c:	f7fb f9b6 	bl	80086ac <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800d340:	4620      	mov	r0, r4
 800d342:	f7ff fa13 	bl	800c76c <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d346:	b130      	cbz	r0, 800d356 <HAL_SD_InitCard+0x9e>
    hsd->State = HAL_SD_STATE_READY;
 800d348:	2601      	movs	r6, #1
 800d34a:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d34e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d350:	4303      	orrs	r3, r0
 800d352:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800d354:	e7db      	b.n	800d30e <HAL_SD_InitCard+0x56>
  errorstate = SD_InitCard(hsd);
 800d356:	4620      	mov	r0, r4
 800d358:	f7ff ff42 	bl	800d1e0 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d35c:	b130      	cbz	r0, 800d36c <HAL_SD_InitCard+0xb4>
    hsd->State = HAL_SD_STATE_READY;
 800d35e:	2601      	movs	r6, #1
 800d360:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d366:	4303      	orrs	r3, r0
 800d368:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800d36a:	e7d0      	b.n	800d30e <HAL_SD_InitCard+0x56>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d36c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d370:	6820      	ldr	r0, [r4, #0]
 800d372:	f001 fe55 	bl	800f020 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d376:	4603      	mov	r3, r0
 800d378:	2800      	cmp	r0, #0
 800d37a:	d0c8      	beq.n	800d30e <HAL_SD_InitCard+0x56>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d37c:	6822      	ldr	r2, [r4, #0]
 800d37e:	4906      	ldr	r1, [pc, #24]	; (800d398 <HAL_SD_InitCard+0xe0>)
 800d380:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d382:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d384:	4313      	orrs	r3, r2
 800d386:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d388:	2601      	movs	r6, #1
 800d38a:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    return HAL_ERROR;
 800d38e:	e7be      	b.n	800d30e <HAL_SD_InitCard+0x56>
 800d390:	014f8b59 	.word	0x014f8b59
 800d394:	00012110 	.word	0x00012110
 800d398:	1fe00fff 	.word	0x1fe00fff

0800d39c <HAL_SD_GetCardStatus>:
{
 800d39c:	b530      	push	{r4, r5, lr}
 800d39e:	b091      	sub	sp, #68	; 0x44
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	460c      	mov	r4, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d3a4:	4669      	mov	r1, sp
 800d3a6:	f7ff fad9 	bl	800c95c <SD_SendSDStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3aa:	b1c0      	cbz	r0, 800d3de <HAL_SD_GetCardStatus+0x42>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	492a      	ldr	r1, [pc, #168]	; (800d458 <HAL_SD_GetCardStatus+0xbc>)
 800d3b0:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d3b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d3b4:	4303      	orrs	r3, r0
 800d3b6:	63ab      	str	r3, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d3b8:	2401      	movs	r4, #1
 800d3ba:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d3be:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3c2:	6828      	ldr	r0, [r5, #0]
 800d3c4:	f001 fe2c 	bl	800f020 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3c8:	b130      	cbz	r0, 800d3d8 <HAL_SD_GetCardStatus+0x3c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3ca:	682a      	ldr	r2, [r5, #0]
 800d3cc:	4922      	ldr	r1, [pc, #136]	; (800d458 <HAL_SD_GetCardStatus+0xbc>)
 800d3ce:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d3d0:	63a8      	str	r0, [r5, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d3d2:	2401      	movs	r4, #1
 800d3d4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
}
 800d3d8:	4620      	mov	r0, r4
 800d3da:	b011      	add	sp, #68	; 0x44
 800d3dc:	bd30      	pop	{r4, r5, pc}
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d3de:	9a00      	ldr	r2, [sp, #0]
 800d3e0:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800d3e4:	7023      	strb	r3, [r4, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d3e6:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800d3ea:	7063      	strb	r3, [r4, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d3ec:	0a13      	lsrs	r3, r2, #8
 800d3ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d3f2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	8063      	strh	r3, [r4, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3fa:	9a01      	ldr	r2, [sp, #4]
 800d3fc:	0213      	lsls	r3, r2, #8
 800d3fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d402:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d406:	0a11      	lsrs	r1, r2, #8
 800d408:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d40c:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d40e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d412:	6063      	str	r3, [r4, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d414:	9b02      	ldr	r3, [sp, #8]
 800d416:	b2da      	uxtb	r2, r3
 800d418:	7222      	strb	r2, [r4, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d41a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d41e:	7262      	strb	r2, [r4, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d420:	f3c3 5203 	ubfx	r2, r3, #20, #4
 800d424:	72a2      	strb	r2, [r4, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d426:	0c1b      	lsrs	r3, r3, #16
 800d428:	9a03      	ldr	r2, [sp, #12]
 800d42a:	b2d1      	uxtb	r1, r2
 800d42c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d430:	430b      	orrs	r3, r1
 800d432:	81a3      	strh	r3, [r4, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d434:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800d438:	73a3      	strb	r3, [r4, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d43a:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800d43e:	73e3      	strb	r3, [r4, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d440:	f3c2 1303 	ubfx	r3, r2, #4, #4
 800d444:	7423      	strb	r3, [r4, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d446:	f002 020f 	and.w	r2, r2, #15
 800d44a:	7462      	strb	r2, [r4, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d44c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800d450:	74a3      	strb	r3, [r4, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800d452:	2400      	movs	r4, #0
 800d454:	e7b3      	b.n	800d3be <HAL_SD_GetCardStatus+0x22>
 800d456:	bf00      	nop
 800d458:	1fe00fff 	.word	0x1fe00fff

0800d45c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d45c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d45e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d460:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800d462:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d464:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d466:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d468:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800d46a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d46c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800d46e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d470:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800d472:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d474:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800d476:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d478:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800d47a:	61cb      	str	r3, [r1, #28]
}
 800d47c:	2000      	movs	r0, #0
 800d47e:	4770      	bx	lr

0800d480 <HAL_SD_ConfigWideBusOperation>:
{
 800d480:	b530      	push	{r4, r5, lr}
 800d482:	b08b      	sub	sp, #44	; 0x2c
 800d484:	4604      	mov	r4, r0
 800d486:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800d488:	2303      	movs	r3, #3
 800d48a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d48e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d490:	2b03      	cmp	r3, #3
 800d492:	d01c      	beq.n	800d4ce <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d494:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800d498:	d008      	beq.n	800d4ac <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d49a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800d49e:	d00a      	beq.n	800d4b6 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d4a0:	b179      	cbz	r1, 800d4c2 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d4a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d4a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4a8:	6383      	str	r3, [r0, #56]	; 0x38
 800d4aa:	e014      	b.n	800d4d6 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d4ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4b2:	6383      	str	r3, [r0, #56]	; 0x38
 800d4b4:	e00f      	b.n	800d4d6 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800d4b6:	f7ff fb59 	bl	800cb6c <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800d4ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4bc:	4303      	orrs	r3, r0
 800d4be:	63a3      	str	r3, [r4, #56]	; 0x38
 800d4c0:	e009      	b.n	800d4d6 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800d4c2:	f7ff fb7a 	bl	800cbba <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800d4c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4c8:	4303      	orrs	r3, r0
 800d4ca:	63a3      	str	r3, [r4, #56]	; 0x38
 800d4cc:	e003      	b.n	800d4d6 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d4d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4d4:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4d8:	b1b3      	cbz	r3, 800d508 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	4a3a      	ldr	r2, [pc, #232]	; (800d5c8 <HAL_SD_ConfigWideBusOperation+0x148>)
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d4e0:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4e6:	6820      	ldr	r0, [r4, #0]
 800d4e8:	f001 fd9a 	bl	800f020 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4ec:	b130      	cbz	r0, 800d4fc <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	4935      	ldr	r1, [pc, #212]	; (800d5c8 <HAL_SD_ConfigWideBusOperation+0x148>)
 800d4f2:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d4f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4f6:	4303      	orrs	r3, r0
 800d4f8:	63a3      	str	r3, [r4, #56]	; 0x38
    status = HAL_ERROR;
 800d4fa:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800d502:	4628      	mov	r0, r5
 800d504:	b00b      	add	sp, #44	; 0x2c
 800d506:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d508:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d50c:	f7fe f892 	bl	800b634 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800d510:	4602      	mov	r2, r0
 800d512:	2800      	cmp	r0, #0
 800d514:	d052      	beq.n	800d5bc <HAL_SD_ConfigWideBusOperation+0x13c>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d516:	6863      	ldr	r3, [r4, #4]
 800d518:	9304      	str	r3, [sp, #16]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d51a:	68a3      	ldr	r3, [r4, #8]
 800d51c:	9305      	str	r3, [sp, #20]
      Init.BusWide             = WideMode;
 800d51e:	9506      	str	r5, [sp, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	9307      	str	r3, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d524:	6961      	ldr	r1, [r4, #20]
 800d526:	4b29      	ldr	r3, [pc, #164]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x14c>)
 800d528:	fba3 0302 	umull	r0, r3, r3, r2
 800d52c:	0e18      	lsrs	r0, r3, #24
 800d52e:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 800d532:	d30e      	bcc.n	800d552 <HAL_SD_ConfigWideBusOperation+0xd2>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d534:	9108      	str	r1, [sp, #32]
      Init.Transceiver = hsd->Init.Transceiver;
 800d536:	69a3      	ldr	r3, [r4, #24]
 800d538:	9309      	str	r3, [sp, #36]	; 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 800d53a:	ab0a      	add	r3, sp, #40	; 0x28
 800d53c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d540:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d544:	ab04      	add	r3, sp, #16
 800d546:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d548:	6820      	ldr	r0, [r4, #0]
 800d54a:	f001 fc4b 	bl	800ede4 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800d54e:	2500      	movs	r5, #0
 800d550:	e7c7      	b.n	800d4e2 <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d552:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d558:	d008      	beq.n	800d56c <HAL_SD_ConfigWideBusOperation+0xec>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d55e:	d007      	beq.n	800d570 <HAL_SD_ConfigWideBusOperation+0xf0>
        if (hsd->Init.ClockDiv == 0U)
 800d560:	bb11      	cbnz	r1, 800d5a8 <HAL_SD_ConfigWideBusOperation+0x128>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d562:	4b1b      	ldr	r3, [pc, #108]	; (800d5d0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d564:	429a      	cmp	r2, r3
 800d566:	d91d      	bls.n	800d5a4 <HAL_SD_ConfigWideBusOperation+0x124>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d568:	9008      	str	r0, [sp, #32]
 800d56a:	e7e4      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d56c:	9108      	str	r1, [sp, #32]
 800d56e:	e7e2      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
        if (hsd->Init.ClockDiv == 0U)
 800d570:	b951      	cbnz	r1, 800d588 <HAL_SD_ConfigWideBusOperation+0x108>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d572:	4b18      	ldr	r3, [pc, #96]	; (800d5d4 <HAL_SD_ConfigWideBusOperation+0x154>)
 800d574:	429a      	cmp	r2, r3
 800d576:	d905      	bls.n	800d584 <HAL_SD_ConfigWideBusOperation+0x104>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d578:	4b14      	ldr	r3, [pc, #80]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x14c>)
 800d57a:	fba3 2302 	umull	r2, r3, r3, r2
 800d57e:	0e5b      	lsrs	r3, r3, #25
 800d580:	9308      	str	r3, [sp, #32]
 800d582:	e7d8      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d584:	9108      	str	r1, [sp, #32]
 800d586:	e7d6      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d588:	004b      	lsls	r3, r1, #1
 800d58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d58e:	4811      	ldr	r0, [pc, #68]	; (800d5d4 <HAL_SD_ConfigWideBusOperation+0x154>)
 800d590:	4283      	cmp	r3, r0
 800d592:	d905      	bls.n	800d5a0 <HAL_SD_ConfigWideBusOperation+0x120>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d594:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <HAL_SD_ConfigWideBusOperation+0x14c>)
 800d596:	fba3 2302 	umull	r2, r3, r3, r2
 800d59a:	0e5b      	lsrs	r3, r3, #25
 800d59c:	9308      	str	r3, [sp, #32]
 800d59e:	e7ca      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d5a0:	9108      	str	r1, [sp, #32]
 800d5a2:	e7c8      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d5a4:	9108      	str	r1, [sp, #32]
 800d5a6:	e7c6      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d5a8:	004b      	lsls	r3, r1, #1
 800d5aa:	fbb2 f2f3 	udiv	r2, r2, r3
 800d5ae:	4b08      	ldr	r3, [pc, #32]	; (800d5d0 <HAL_SD_ConfigWideBusOperation+0x150>)
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d901      	bls.n	800d5b8 <HAL_SD_ConfigWideBusOperation+0x138>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d5b4:	9008      	str	r0, [sp, #32]
 800d5b6:	e7be      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d5b8:	9108      	str	r1, [sp, #32]
 800d5ba:	e7bc      	b.n	800d536 <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d5bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5c2:	63a3      	str	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 800d5c4:	2501      	movs	r5, #1
 800d5c6:	e78c      	b.n	800d4e2 <HAL_SD_ConfigWideBusOperation+0x62>
 800d5c8:	1fe00fff 	.word	0x1fe00fff
 800d5cc:	55e63b89 	.word	0x55e63b89
 800d5d0:	017d7840 	.word	0x017d7840
 800d5d4:	02faf080 	.word	0x02faf080

0800d5d8 <HAL_SD_GetCardState>:
{
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 800d5e2:	a901      	add	r1, sp, #4
 800d5e4:	f7ff fb10 	bl	800cc08 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5e8:	b110      	cbz	r0, 800d5f0 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800d5ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5ec:	4303      	orrs	r3, r0
 800d5ee:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800d5f0:	9801      	ldr	r0, [sp, #4]
 800d5f2:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800d5f6:	b002      	add	sp, #8
 800d5f8:	bd10      	pop	{r4, pc}

0800d5fa <HAL_SD_Init>:
{
 800d5fa:	b570      	push	{r4, r5, r6, lr}
 800d5fc:	b086      	sub	sp, #24
  if(hsd == NULL)
 800d5fe:	2800      	cmp	r0, #0
 800d600:	d057      	beq.n	800d6b2 <HAL_SD_Init+0xb8>
 800d602:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800d604:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800d608:	b153      	cbz	r3, 800d620 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_BUSY;
 800d60a:	2303      	movs	r3, #3
 800d60c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d610:	4620      	mov	r0, r4
 800d612:	f7ff fe51 	bl	800d2b8 <HAL_SD_InitCard>
 800d616:	b138      	cbz	r0, 800d628 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 800d618:	2501      	movs	r5, #1
}
 800d61a:	4628      	mov	r0, r5
 800d61c:	b006      	add	sp, #24
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 800d620:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 800d622:	f7fa f9d9 	bl	80079d8 <HAL_SD_MspInit>
 800d626:	e7f0      	b.n	800d60a <HAL_SD_Init+0x10>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d628:	a901      	add	r1, sp, #4
 800d62a:	4620      	mov	r0, r4
 800d62c:	f7ff feb6 	bl	800d39c <HAL_SD_GetCardStatus>
 800d630:	2800      	cmp	r0, #0
 800d632:	d140      	bne.n	800d6b6 <HAL_SD_Init+0xbc>
  speedgrade = CardStatus.UhsSpeedGrade;
 800d634:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d638:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d63a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800d63e:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d640:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d642:	2901      	cmp	r1, #1
 800d644:	d00b      	beq.n	800d65e <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d646:	2901      	cmp	r1, #1
 800d648:	d010      	beq.n	800d66c <HAL_SD_Init+0x72>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d64a:	2300      	movs	r3, #0
 800d64c:	65e3      	str	r3, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d64e:	68e1      	ldr	r1, [r4, #12]
 800d650:	4620      	mov	r0, r4
 800d652:	f7ff ff15 	bl	800d480 <HAL_SD_ConfigWideBusOperation>
 800d656:	4605      	mov	r5, r0
 800d658:	b160      	cbz	r0, 800d674 <HAL_SD_Init+0x7a>
    return HAL_ERROR;
 800d65a:	2501      	movs	r5, #1
 800d65c:	e7dd      	b.n	800d61a <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d65e:	b90b      	cbnz	r3, 800d664 <HAL_SD_Init+0x6a>
 800d660:	2a00      	cmp	r2, #0
 800d662:	d0f0      	beq.n	800d646 <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d664:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d668:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d66a:	e7f0      	b.n	800d64e <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d670:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d672:	e7ec      	b.n	800d64e <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 800d674:	f7fb f814 	bl	80086a0 <HAL_GetTick>
 800d678:	4606      	mov	r6, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d67a:	4620      	mov	r0, r4
 800d67c:	f7ff ffac 	bl	800d5d8 <HAL_SD_GetCardState>
 800d680:	2804      	cmp	r0, #4
 800d682:	d00f      	beq.n	800d6a4 <HAL_SD_Init+0xaa>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800d684:	f7fb f80c 	bl	80086a0 <HAL_GetTick>
 800d688:	1b80      	subs	r0, r0, r6
 800d68a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d68e:	d1f4      	bne.n	800d67a <HAL_SD_Init+0x80>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d694:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800d696:	2301      	movs	r3, #1
 800d698:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d69c:	2300      	movs	r3, #0
 800d69e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800d6a0:	2503      	movs	r5, #3
 800d6a2:	e7ba      	b.n	800d61a <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800d6a8:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800d6b0:	e7b3      	b.n	800d61a <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800d6b2:	2501      	movs	r5, #1
 800d6b4:	e7b1      	b.n	800d61a <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800d6b6:	2501      	movs	r5, #1
 800d6b8:	e7af      	b.n	800d61a <HAL_SD_Init+0x20>

0800d6ba <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800d6bc:	4770      	bx	lr

0800d6be <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800d6be:	4770      	bx	lr

0800d6c0 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800d6c0:	4770      	bx	lr

0800d6c2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800d6c2:	4770      	bx	lr

0800d6c4 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	d06a      	beq.n	800d79e <HAL_SPI_Init+0xda>
{
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d6cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6ce:	b933      	cbnz	r3, 800d6de <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6d0:	6843      	ldr	r3, [r0, #4]
 800d6d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6d6:	d005      	beq.n	800d6e4 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	61c3      	str	r3, [r0, #28]
 800d6dc:	e002      	b.n	800d6e4 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d6e2:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d6e8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d04d      	beq.n	800d78c <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d6f6:	6822      	ldr	r2, [r4, #0]
 800d6f8:	6813      	ldr	r3, [r2, #0]
 800d6fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6fe:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d700:	68e3      	ldr	r3, [r4, #12]
 800d702:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d706:	d947      	bls.n	800d798 <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d708:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d70a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d70e:	d004      	beq.n	800d71a <HAL_SPI_Init+0x56>
 800d710:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d714:	d001      	beq.n	800d71a <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d716:	2300      	movs	r3, #0
 800d718:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d71a:	6863      	ldr	r3, [r4, #4]
 800d71c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800d720:	68a1      	ldr	r1, [r4, #8]
 800d722:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800d726:	430b      	orrs	r3, r1
 800d728:	6921      	ldr	r1, [r4, #16]
 800d72a:	f001 0102 	and.w	r1, r1, #2
 800d72e:	430b      	orrs	r3, r1
 800d730:	6961      	ldr	r1, [r4, #20]
 800d732:	f001 0101 	and.w	r1, r1, #1
 800d736:	430b      	orrs	r3, r1
 800d738:	69a1      	ldr	r1, [r4, #24]
 800d73a:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800d73e:	430b      	orrs	r3, r1
 800d740:	69e1      	ldr	r1, [r4, #28]
 800d742:	f001 0138 	and.w	r1, r1, #56	; 0x38
 800d746:	430b      	orrs	r3, r1
 800d748:	6a21      	ldr	r1, [r4, #32]
 800d74a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800d74e:	430b      	orrs	r3, r1
 800d750:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d752:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800d756:	6820      	ldr	r0, [r4, #0]
 800d758:	430b      	orrs	r3, r1
 800d75a:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d75c:	8b63      	ldrh	r3, [r4, #26]
 800d75e:	f003 0304 	and.w	r3, r3, #4
 800d762:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d764:	f001 0110 	and.w	r1, r1, #16
 800d768:	430b      	orrs	r3, r1
 800d76a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d76c:	f001 0108 	and.w	r1, r1, #8
 800d770:	430b      	orrs	r3, r1
 800d772:	68e1      	ldr	r1, [r4, #12]
 800d774:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800d778:	430b      	orrs	r3, r1
 800d77a:	6821      	ldr	r1, [r4, #0]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	604b      	str	r3, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d780:	2000      	movs	r0, #0
 800d782:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d784:	2301      	movs	r3, #1
 800d786:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800d78a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800d78c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800d790:	4620      	mov	r0, r4
 800d792:	f7fa fa2f 	bl	8007bf4 <HAL_SPI_MspInit>
 800d796:	e7ab      	b.n	800d6f0 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d79c:	e7b5      	b.n	800d70a <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 800d79e:	2001      	movs	r0, #1
}
 800d7a0:	4770      	bx	lr

0800d7a2 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d7a2:	4770      	bx	lr

0800d7a4 <HAL_SPI_IRQHandler>:
{
 800d7a4:	b530      	push	{r4, r5, lr}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800d7aa:	6802      	ldr	r2, [r0, #0]
 800d7ac:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800d7ae:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d7b0:	f3c3 1080 	ubfx	r0, r3, #6, #1
 800d7b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d7b8:	d105      	bne.n	800d7c6 <HAL_SPI_IRQHandler+0x22>
 800d7ba:	f013 0f01 	tst.w	r3, #1
 800d7be:	d002      	beq.n	800d7c6 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d7c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800d7c4:	d169      	bne.n	800d89a <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d7c6:	f013 0f02 	tst.w	r3, #2
 800d7ca:	d002      	beq.n	800d7d2 <HAL_SPI_IRQHandler+0x2e>
 800d7cc:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d7d0:	d167      	bne.n	800d8a2 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d7d2:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800d7d6:	f013 0f20 	tst.w	r3, #32
 800d7da:	d103      	bne.n	800d7e4 <HAL_SPI_IRQHandler+0x40>
 800d7dc:	b910      	cbnz	r0, 800d7e4 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d7de:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d7e2:	d061      	beq.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
 800d7e4:	f011 0f20 	tst.w	r1, #32
 800d7e8:	d05e      	beq.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d7ea:	b178      	cbz	r0, 800d80c <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d7ec:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800d7f0:	b2c0      	uxtb	r0, r0
 800d7f2:	2803      	cmp	r0, #3
 800d7f4:	d05a      	beq.n	800d8ac <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d7f6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d7f8:	f040 0004 	orr.w	r0, r0, #4
 800d7fc:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d7fe:	2000      	movs	r0, #0
 800d800:	9000      	str	r0, [sp, #0]
 800d802:	68d0      	ldr	r0, [r2, #12]
 800d804:	9000      	str	r0, [sp, #0]
 800d806:	6890      	ldr	r0, [r2, #8]
 800d808:	9000      	str	r0, [sp, #0]
 800d80a:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d80c:	b165      	cbz	r5, 800d828 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d80e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800d810:	f040 0001 	orr.w	r0, r0, #1
 800d814:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d816:	2000      	movs	r0, #0
 800d818:	9002      	str	r0, [sp, #8]
 800d81a:	6890      	ldr	r0, [r2, #8]
 800d81c:	9002      	str	r0, [sp, #8]
 800d81e:	6810      	ldr	r0, [r2, #0]
 800d820:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800d824:	6010      	str	r0, [r2, #0]
 800d826:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d828:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d82c:	d009      	beq.n	800d842 <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d82e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d830:	f043 0308 	orr.w	r3, r3, #8
 800d834:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d836:	2300      	movs	r3, #0
 800d838:	9303      	str	r3, [sp, #12]
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	9303      	str	r3, [sp, #12]
 800d840:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d842:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d844:	2b00      	cmp	r3, #0
 800d846:	d02f      	beq.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d848:	6822      	ldr	r2, [r4, #0]
 800d84a:	6853      	ldr	r3, [r2, #4]
 800d84c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800d850:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800d852:	2301      	movs	r3, #1
 800d854:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d858:	f011 0f03 	tst.w	r1, #3
 800d85c:	d02e      	beq.n	800d8bc <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d85e:	6822      	ldr	r2, [r4, #0]
 800d860:	6853      	ldr	r3, [r2, #4]
 800d862:	f023 0303 	bic.w	r3, r3, #3
 800d866:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800d868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d86a:	b14b      	cbz	r3, 800d880 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d86c:	4a15      	ldr	r2, [pc, #84]	; (800d8c4 <HAL_SPI_IRQHandler+0x120>)
 800d86e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d872:	f7fb f9dd 	bl	8008c30 <HAL_DMA_Abort_IT>
 800d876:	b118      	cbz	r0, 800d880 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d878:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d87a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d87e:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d880:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d882:	b18b      	cbz	r3, 800d8a8 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d884:	4a0f      	ldr	r2, [pc, #60]	; (800d8c4 <HAL_SPI_IRQHandler+0x120>)
 800d886:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d88a:	f7fb f9d1 	bl	8008c30 <HAL_DMA_Abort_IT>
 800d88e:	b158      	cbz	r0, 800d8a8 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d890:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800d892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d896:	6623      	str	r3, [r4, #96]	; 0x60
 800d898:	e006      	b.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 800d89a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d89c:	4620      	mov	r0, r4
 800d89e:	4798      	blx	r3
    return;
 800d8a0:	e002      	b.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800d8a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	4798      	blx	r3
}
 800d8a8:	b005      	add	sp, #20
 800d8aa:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	68d3      	ldr	r3, [r2, #12]
 800d8b2:	9301      	str	r3, [sp, #4]
 800d8b4:	6893      	ldr	r3, [r2, #8]
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	9b01      	ldr	r3, [sp, #4]
        return;
 800d8ba:	e7f5      	b.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f7ff ff70 	bl	800d7a2 <HAL_SPI_ErrorCallback>
    return;
 800d8c2:	e7f1      	b.n	800d8a8 <HAL_SPI_IRQHandler+0x104>
 800d8c4:	0800d8c9 	.word	0x0800d8c9

0800d8c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d8c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d8ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d8d2:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d8d4:	f7ff ff65 	bl	800d7a2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d8d8:	bd08      	pop	{r3, pc}

0800d8da <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d8da:	4770      	bx	lr

0800d8dc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d136      	bne.n	800d954 <HAL_TIM_Base_Start_IT+0x78>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8ec:	6802      	ldr	r2, [r0, #0]
 800d8ee:	68d3      	ldr	r3, [r2, #12]
 800d8f0:	f043 0301 	orr.w	r3, r3, #1
 800d8f4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8f6:	6803      	ldr	r3, [r0, #0]
 800d8f8:	4a19      	ldr	r2, [pc, #100]	; (800d960 <HAL_TIM_Base_Start_IT+0x84>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d01c      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
 800d8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d902:	d019      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
 800d904:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800d908:	4293      	cmp	r3, r2
 800d90a:	d015      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
 800d90c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d910:	4293      	cmp	r3, r2
 800d912:	d011      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
 800d914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d918:	4293      	cmp	r3, r2
 800d91a:	d00d      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
 800d91c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d920:	4293      	cmp	r3, r2
 800d922:	d009      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
 800d924:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800d928:	4293      	cmp	r3, r2
 800d92a:	d005      	beq.n	800d938 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	f042 0201 	orr.w	r2, r2, #1
 800d932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d934:	2000      	movs	r0, #0
 800d936:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d938:	6899      	ldr	r1, [r3, #8]
 800d93a:	4a0a      	ldr	r2, [pc, #40]	; (800d964 <HAL_TIM_Base_Start_IT+0x88>)
 800d93c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d93e:	2a06      	cmp	r2, #6
 800d940:	d00a      	beq.n	800d958 <HAL_TIM_Base_Start_IT+0x7c>
 800d942:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d946:	d009      	beq.n	800d95c <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800d950:	2000      	movs	r0, #0
 800d952:	4770      	bx	lr
    return HAL_ERROR;
 800d954:	2001      	movs	r0, #1
 800d956:	4770      	bx	lr
  return HAL_OK;
 800d958:	2000      	movs	r0, #0
 800d95a:	4770      	bx	lr
 800d95c:	2000      	movs	r0, #0
}
 800d95e:	4770      	bx	lr
 800d960:	40012c00 	.word	0x40012c00
 800d964:	00010007 	.word	0x00010007

0800d968 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d968:	4770      	bx	lr

0800d96a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d96a:	4770      	bx	lr

0800d96c <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d96c:	4770      	bx	lr

0800d96e <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d96e:	4770      	bx	lr

0800d970 <HAL_TIM_IRQHandler>:
{
 800d970:	b510      	push	{r4, lr}
 800d972:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d974:	6803      	ldr	r3, [r0, #0]
 800d976:	691a      	ldr	r2, [r3, #16]
 800d978:	f012 0f02 	tst.w	r2, #2
 800d97c:	d011      	beq.n	800d9a2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	f012 0f02 	tst.w	r2, #2
 800d984:	d00d      	beq.n	800d9a2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d986:	f06f 0202 	mvn.w	r2, #2
 800d98a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d98c:	2301      	movs	r3, #1
 800d98e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d990:	6803      	ldr	r3, [r0, #0]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	f013 0f03 	tst.w	r3, #3
 800d998:	d079      	beq.n	800da8e <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800d99a:	f7ff ffe6 	bl	800d96a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d9a2:	6823      	ldr	r3, [r4, #0]
 800d9a4:	691a      	ldr	r2, [r3, #16]
 800d9a6:	f012 0f04 	tst.w	r2, #4
 800d9aa:	d012      	beq.n	800d9d2 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9ac:	68da      	ldr	r2, [r3, #12]
 800d9ae:	f012 0f04 	tst.w	r2, #4
 800d9b2:	d00e      	beq.n	800d9d2 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9b4:	f06f 0204 	mvn.w	r2, #4
 800d9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d9c6:	d068      	beq.n	800da9a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f7ff ffce 	bl	800d96a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	691a      	ldr	r2, [r3, #16]
 800d9d6:	f012 0f08 	tst.w	r2, #8
 800d9da:	d012      	beq.n	800da02 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9dc:	68da      	ldr	r2, [r3, #12]
 800d9de:	f012 0f08 	tst.w	r2, #8
 800d9e2:	d00e      	beq.n	800da02 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d9e4:	f06f 0208 	mvn.w	r2, #8
 800d9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9ea:	2304      	movs	r3, #4
 800d9ec:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	69db      	ldr	r3, [r3, #28]
 800d9f2:	f013 0f03 	tst.w	r3, #3
 800d9f6:	d057      	beq.n	800daa8 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f7ff ffb6 	bl	800d96a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9fe:	2300      	movs	r3, #0
 800da00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	691a      	ldr	r2, [r3, #16]
 800da06:	f012 0f10 	tst.w	r2, #16
 800da0a:	d012      	beq.n	800da32 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da0c:	68da      	ldr	r2, [r3, #12]
 800da0e:	f012 0f10 	tst.w	r2, #16
 800da12:	d00e      	beq.n	800da32 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da14:	f06f 0210 	mvn.w	r2, #16
 800da18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da1a:	2308      	movs	r3, #8
 800da1c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	f413 7f40 	tst.w	r3, #768	; 0x300
 800da26:	d046      	beq.n	800dab6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800da28:	4620      	mov	r0, r4
 800da2a:	f7ff ff9e 	bl	800d96a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da2e:	2300      	movs	r3, #0
 800da30:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	691a      	ldr	r2, [r3, #16]
 800da36:	f012 0f01 	tst.w	r2, #1
 800da3a:	d003      	beq.n	800da44 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	f012 0f01 	tst.w	r2, #1
 800da42:	d13f      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	691a      	ldr	r2, [r3, #16]
 800da48:	f012 0f80 	tst.w	r2, #128	; 0x80
 800da4c:	d003      	beq.n	800da56 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da4e:	68da      	ldr	r2, [r3, #12]
 800da50:	f012 0f80 	tst.w	r2, #128	; 0x80
 800da54:	d13d      	bne.n	800dad2 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	691a      	ldr	r2, [r3, #16]
 800da5a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800da5e:	d003      	beq.n	800da68 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	f012 0f80 	tst.w	r2, #128	; 0x80
 800da66:	d13b      	bne.n	800dae0 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da68:	6823      	ldr	r3, [r4, #0]
 800da6a:	691a      	ldr	r2, [r3, #16]
 800da6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 800da70:	d003      	beq.n	800da7a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	f012 0f40 	tst.w	r2, #64	; 0x40
 800da78:	d139      	bne.n	800daee <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da7a:	6823      	ldr	r3, [r4, #0]
 800da7c:	691a      	ldr	r2, [r3, #16]
 800da7e:	f012 0f20 	tst.w	r2, #32
 800da82:	d003      	beq.n	800da8c <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da84:	68da      	ldr	r2, [r3, #12]
 800da86:	f012 0f20 	tst.w	r2, #32
 800da8a:	d137      	bne.n	800dafc <HAL_TIM_IRQHandler+0x18c>
}
 800da8c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da8e:	f7ff ff6b 	bl	800d968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da92:	4620      	mov	r0, r4
 800da94:	f7ff ff6a 	bl	800d96c <HAL_TIM_PWM_PulseFinishedCallback>
 800da98:	e781      	b.n	800d99e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da9a:	4620      	mov	r0, r4
 800da9c:	f7ff ff64 	bl	800d968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daa0:	4620      	mov	r0, r4
 800daa2:	f7ff ff63 	bl	800d96c <HAL_TIM_PWM_PulseFinishedCallback>
 800daa6:	e792      	b.n	800d9ce <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daa8:	4620      	mov	r0, r4
 800daaa:	f7ff ff5d 	bl	800d968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daae:	4620      	mov	r0, r4
 800dab0:	f7ff ff5c 	bl	800d96c <HAL_TIM_PWM_PulseFinishedCallback>
 800dab4:	e7a3      	b.n	800d9fe <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dab6:	4620      	mov	r0, r4
 800dab8:	f7ff ff56 	bl	800d968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dabc:	4620      	mov	r0, r4
 800dabe:	f7ff ff55 	bl	800d96c <HAL_TIM_PWM_PulseFinishedCallback>
 800dac2:	e7b4      	b.n	800da2e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dac4:	f06f 0201 	mvn.w	r2, #1
 800dac8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800daca:	4620      	mov	r0, r4
 800dacc:	f7f9 fbfc 	bl	80072c8 <HAL_TIM_PeriodElapsedCallback>
 800dad0:	e7b8      	b.n	800da44 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dad2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dad6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 f8ac 	bl	800dc36 <HAL_TIMEx_BreakCallback>
 800dade:	e7ba      	b.n	800da56 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dae0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dae4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 f8a6 	bl	800dc38 <HAL_TIMEx_Break2Callback>
 800daec:	e7bc      	b.n	800da68 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800daee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800daf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7ff ff3a 	bl	800d96e <HAL_TIM_TriggerCallback>
 800dafa:	e7be      	b.n	800da7a <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dafc:	f06f 0220 	mvn.w	r2, #32
 800db00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800db02:	4620      	mov	r0, r4
 800db04:	f000 f896 	bl	800dc34 <HAL_TIMEx_CommutCallback>
}
 800db08:	e7c0      	b.n	800da8c <HAL_TIM_IRQHandler+0x11c>
	...

0800db0c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db0c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db0e:	4a30      	ldr	r2, [pc, #192]	; (800dbd0 <TIM_Base_SetConfig+0xc4>)
 800db10:	4290      	cmp	r0, r2
 800db12:	d012      	beq.n	800db3a <TIM_Base_SetConfig+0x2e>
 800db14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800db18:	d00f      	beq.n	800db3a <TIM_Base_SetConfig+0x2e>
 800db1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800db1e:	4290      	cmp	r0, r2
 800db20:	d00b      	beq.n	800db3a <TIM_Base_SetConfig+0x2e>
 800db22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db26:	4290      	cmp	r0, r2
 800db28:	d007      	beq.n	800db3a <TIM_Base_SetConfig+0x2e>
 800db2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db2e:	4290      	cmp	r0, r2
 800db30:	d003      	beq.n	800db3a <TIM_Base_SetConfig+0x2e>
 800db32:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800db36:	4290      	cmp	r0, r2
 800db38:	d103      	bne.n	800db42 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800db3e:	684a      	ldr	r2, [r1, #4]
 800db40:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db42:	4a23      	ldr	r2, [pc, #140]	; (800dbd0 <TIM_Base_SetConfig+0xc4>)
 800db44:	4290      	cmp	r0, r2
 800db46:	d01e      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800db4c:	d01b      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800db52:	4290      	cmp	r0, r2
 800db54:	d017      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db5a:	4290      	cmp	r0, r2
 800db5c:	d013      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db62:	4290      	cmp	r0, r2
 800db64:	d00f      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db66:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800db6a:	4290      	cmp	r0, r2
 800db6c:	d00b      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db6e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800db72:	4290      	cmp	r0, r2
 800db74:	d007      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db7a:	4290      	cmp	r0, r2
 800db7c:	d003      	beq.n	800db86 <TIM_Base_SetConfig+0x7a>
 800db7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db82:	4290      	cmp	r0, r2
 800db84:	d103      	bne.n	800db8e <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db8a:	68ca      	ldr	r2, [r1, #12]
 800db8c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db92:	694a      	ldr	r2, [r1, #20]
 800db94:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800db96:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db98:	688b      	ldr	r3, [r1, #8]
 800db9a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db9c:	680b      	ldr	r3, [r1, #0]
 800db9e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dba0:	4b0b      	ldr	r3, [pc, #44]	; (800dbd0 <TIM_Base_SetConfig+0xc4>)
 800dba2:	4298      	cmp	r0, r3
 800dba4:	d00f      	beq.n	800dbc6 <TIM_Base_SetConfig+0xba>
 800dba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbaa:	4298      	cmp	r0, r3
 800dbac:	d00b      	beq.n	800dbc6 <TIM_Base_SetConfig+0xba>
 800dbae:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800dbb2:	4298      	cmp	r0, r3
 800dbb4:	d007      	beq.n	800dbc6 <TIM_Base_SetConfig+0xba>
 800dbb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbba:	4298      	cmp	r0, r3
 800dbbc:	d003      	beq.n	800dbc6 <TIM_Base_SetConfig+0xba>
 800dbbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbc2:	4298      	cmp	r0, r3
 800dbc4:	d101      	bne.n	800dbca <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbc6:	690b      	ldr	r3, [r1, #16]
 800dbc8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	6143      	str	r3, [r0, #20]
}
 800dbce:	4770      	bx	lr
 800dbd0:	40012c00 	.word	0x40012c00

0800dbd4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800dbd4:	b360      	cbz	r0, 800dc30 <HAL_TIM_Base_Init+0x5c>
{
 800dbd6:	b510      	push	{r4, lr}
 800dbd8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800dbda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dbde:	b313      	cbz	r3, 800dc26 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	f851 0b04 	ldr.w	r0, [r1], #4
 800dbec:	f7ff ff8e 	bl	800db0c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800dbfa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dbfe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dc02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dc06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800dc12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc16:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800dc1a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800dc1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800dc22:	2000      	movs	r0, #0
}
 800dc24:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800dc26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800dc2a:	f7ff fe56 	bl	800d8da <HAL_TIM_Base_MspInit>
 800dc2e:	e7d7      	b.n	800dbe0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800dc30:	2001      	movs	r0, #1
}
 800dc32:	4770      	bx	lr

0800dc34 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc34:	4770      	bx	lr

0800dc36 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc36:	4770      	bx	lr

0800dc38 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc38:	4770      	bx	lr

0800dc3a <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc3a:	6802      	ldr	r2, [r0, #0]
 800dc3c:	6813      	ldr	r3, [r2, #0]
 800dc3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dc42:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc44:	6802      	ldr	r2, [r0, #0]
 800dc46:	6893      	ldr	r3, [r2, #8]
 800dc48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc4c:	f023 0301 	bic.w	r3, r3, #1
 800dc50:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc52:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d006      	beq.n	800dc66 <UART_EndRxTransfer+0x2c>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc58:	2320      	movs	r3, #32
 800dc5a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc62:	6703      	str	r3, [r0, #112]	; 0x70
}
 800dc64:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc66:	6802      	ldr	r2, [r0, #0]
 800dc68:	6813      	ldr	r3, [r2, #0]
 800dc6a:	f023 0310 	bic.w	r3, r3, #16
 800dc6e:	6013      	str	r3, [r2, #0]
 800dc70:	e7f2      	b.n	800dc58 <UART_EndRxTransfer+0x1e>

0800dc72 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc72:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800dc76:	2b21      	cmp	r3, #33	; 0x21
 800dc78:	d000      	beq.n	800dc7c <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800dc7a:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800dc7c:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	b953      	cbnz	r3, 800dc9a <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dc84:	6802      	ldr	r2, [r0, #0]
 800dc86:	6813      	ldr	r3, [r2, #0]
 800dc88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc8c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc8e:	6802      	ldr	r2, [r0, #0]
 800dc90:	6813      	ldr	r3, [r2, #0]
 800dc92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	4770      	bx	lr
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dc9a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800dc9c:	6803      	ldr	r3, [r0, #0]
 800dc9e:	7812      	ldrb	r2, [r2, #0]
 800dca0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800dca2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dca4:	3301      	adds	r3, #1
 800dca6:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800dca8:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800dcb6:	e7e0      	b.n	800dc7a <UART_TxISR_8BIT+0x8>

0800dcb8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dcb8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800dcbc:	2b21      	cmp	r3, #33	; 0x21
 800dcbe:	d000      	beq.n	800dcc2 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800dcc0:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800dcc2:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	b953      	cbnz	r3, 800dce0 <UART_TxISR_16BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800dcca:	6802      	ldr	r2, [r0, #0]
 800dccc:	6813      	ldr	r3, [r2, #0]
 800dcce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcd2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dcd4:	6802      	ldr	r2, [r0, #0]
 800dcd6:	6813      	ldr	r3, [r2, #0]
 800dcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcdc:	6013      	str	r3, [r2, #0]
 800dcde:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dce0:	6d03      	ldr	r3, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dce2:	881b      	ldrh	r3, [r3, #0]
 800dce4:	6802      	ldr	r2, [r0, #0]
 800dce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcea:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800dcec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dcee:	3302      	adds	r3, #2
 800dcf0:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800dcf2:	f8b0 3056 	ldrh.w	r3, [r0, #86]	; 0x56
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	3b01      	subs	r3, #1
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
}
 800dd00:	e7de      	b.n	800dcc0 <UART_TxISR_16BIT+0x8>

0800dd02 <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd02:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800dd06:	2b21      	cmp	r3, #33	; 0x21
 800dd08:	d000      	beq.n	800dd0c <UART_TxISR_8BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800dd0a:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dd0c:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dd10:	e00c      	b.n	800dd2c <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dd12:	6802      	ldr	r2, [r0, #0]
 800dd14:	6893      	ldr	r3, [r2, #8]
 800dd16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dd1a:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd1c:	6802      	ldr	r2, [r0, #0]
 800dd1e:	6813      	ldr	r3, [r2, #0]
 800dd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd24:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 800dd26:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d0ec      	beq.n	800dd0a <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800dd30:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800dd34:	b292      	uxth	r2, r2
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	d0eb      	beq.n	800dd12 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800dd3a:	6802      	ldr	r2, [r0, #0]
 800dd3c:	69d1      	ldr	r1, [r2, #28]
 800dd3e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800dd42:	d0f1      	beq.n	800dd28 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800dd44:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800dd46:	7809      	ldrb	r1, [r1, #0]
 800dd48:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 800dd4a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800dd4c:	3201      	adds	r2, #1
 800dd4e:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800dd50:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800dd54:	b292      	uxth	r2, r2
 800dd56:	3a01      	subs	r2, #1
 800dd58:	b292      	uxth	r2, r2
 800dd5a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 800dd5e:	e7e3      	b.n	800dd28 <UART_TxISR_8BIT_FIFOEN+0x26>

0800dd60 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dd60:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800dd64:	2b21      	cmp	r3, #33	; 0x21
 800dd66:	d000      	beq.n	800dd6a <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800dd68:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dd6a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800dd6e:	e00c      	b.n	800dd8a <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800dd70:	6802      	ldr	r2, [r0, #0]
 800dd72:	6893      	ldr	r3, [r2, #8]
 800dd74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dd78:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd7a:	6802      	ldr	r2, [r0, #0]
 800dd7c:	6813      	ldr	r3, [r2, #0]
 800dd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd82:	6013      	str	r3, [r2, #0]
        break; /* force exit loop */
 800dd84:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800dd86:	3b01      	subs	r3, #1
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0ec      	beq.n	800dd68 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800dd8e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800dd92:	b292      	uxth	r2, r2
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	d0eb      	beq.n	800dd70 <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800dd98:	6802      	ldr	r2, [r0, #0]
 800dd9a:	69d1      	ldr	r1, [r2, #28]
 800dd9c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800dda0:	d0f1      	beq.n	800dd86 <UART_TxISR_16BIT_FIFOEN+0x26>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800dda2:	6d01      	ldr	r1, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800dda4:	8809      	ldrh	r1, [r1, #0]
 800dda6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800ddaa:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800ddac:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ddae:	3202      	adds	r2, #2
 800ddb0:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800ddb2:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
 800ddb6:	b292      	uxth	r2, r2
 800ddb8:	3a01      	subs	r2, #1
 800ddba:	b292      	uxth	r2, r2
 800ddbc:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
 800ddc0:	e7e1      	b.n	800dd86 <UART_TxISR_16BIT_FIFOEN+0x26>
	...

0800ddc4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800ddc4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800ddc8:	2b20      	cmp	r3, #32
 800ddca:	d144      	bne.n	800de56 <HAL_UART_Transmit_IT+0x92>
    if ((pData == NULL) || (Size == 0U))
 800ddcc:	2900      	cmp	r1, #0
 800ddce:	d044      	beq.n	800de5a <HAL_UART_Transmit_IT+0x96>
 800ddd0:	2a00      	cmp	r2, #0
 800ddd2:	d044      	beq.n	800de5e <HAL_UART_Transmit_IT+0x9a>
    __HAL_LOCK(huart);
 800ddd4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d042      	beq.n	800de62 <HAL_UART_Transmit_IT+0x9e>
 800dddc:	2301      	movs	r3, #1
 800ddde:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800dde2:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dde4:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800dde8:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddec:	2300      	movs	r3, #0
 800ddee:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddf2:	2321      	movs	r3, #33	; 0x21
 800ddf4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ddf8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800ddfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ddfe:	d00f      	beq.n	800de20 <HAL_UART_Transmit_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de00:	6883      	ldr	r3, [r0, #8]
 800de02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de06:	d020      	beq.n	800de4a <HAL_UART_Transmit_IT+0x86>
        huart->TxISR = UART_TxISR_8BIT;
 800de08:	4b17      	ldr	r3, [pc, #92]	; (800de68 <HAL_UART_Transmit_IT+0xa4>)
 800de0a:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 800de0c:	2300      	movs	r3, #0
 800de0e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800de12:	6802      	ldr	r2, [r0, #0]
 800de14:	6813      	ldr	r3, [r2, #0]
 800de16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de1a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800de1c:	2000      	movs	r0, #0
 800de1e:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de20:	6883      	ldr	r3, [r0, #8]
 800de22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de26:	d00a      	beq.n	800de3e <HAL_UART_Transmit_IT+0x7a>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800de28:	4b10      	ldr	r3, [pc, #64]	; (800de6c <HAL_UART_Transmit_IT+0xa8>)
 800de2a:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 800de2c:	2300      	movs	r3, #0
 800de2e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800de32:	6802      	ldr	r2, [r0, #0]
 800de34:	6893      	ldr	r3, [r2, #8]
 800de36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de3a:	6093      	str	r3, [r2, #8]
 800de3c:	e7ee      	b.n	800de1c <HAL_UART_Transmit_IT+0x58>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de3e:	6903      	ldr	r3, [r0, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d1f1      	bne.n	800de28 <HAL_UART_Transmit_IT+0x64>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800de44:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <HAL_UART_Transmit_IT+0xac>)
 800de46:	6743      	str	r3, [r0, #116]	; 0x74
 800de48:	e7f0      	b.n	800de2c <HAL_UART_Transmit_IT+0x68>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de4a:	6903      	ldr	r3, [r0, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1db      	bne.n	800de08 <HAL_UART_Transmit_IT+0x44>
        huart->TxISR = UART_TxISR_16BIT;
 800de50:	4b08      	ldr	r3, [pc, #32]	; (800de74 <HAL_UART_Transmit_IT+0xb0>)
 800de52:	6743      	str	r3, [r0, #116]	; 0x74
 800de54:	e7da      	b.n	800de0c <HAL_UART_Transmit_IT+0x48>
    return HAL_BUSY;
 800de56:	2002      	movs	r0, #2
 800de58:	4770      	bx	lr
      return HAL_ERROR;
 800de5a:	2001      	movs	r0, #1
 800de5c:	4770      	bx	lr
 800de5e:	2001      	movs	r0, #1
 800de60:	4770      	bx	lr
    __HAL_LOCK(huart);
 800de62:	2002      	movs	r0, #2
}
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	0800dc73 	.word	0x0800dc73
 800de6c:	0800dd03 	.word	0x0800dd03
 800de70:	0800dd61 	.word	0x0800dd61
 800de74:	0800dcb9 	.word	0x0800dcb9

0800de78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de78:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de7a:	6801      	ldr	r1, [r0, #0]
 800de7c:	680a      	ldr	r2, [r1, #0]
 800de7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de82:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de84:	2220      	movs	r2, #32
 800de86:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800de8a:	2200      	movs	r2, #0
 800de8c:	6742      	str	r2, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de8e:	f7fa fb4d 	bl	800852c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de92:	bd08      	pop	{r3, pc}

0800de94 <HAL_UART_ErrorCallback>:
}
 800de94:	4770      	bx	lr

0800de96 <UART_DMAAbortOnError>:
{
 800de96:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de98:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800de9a:	2300      	movs	r3, #0
 800de9c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dea0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800dea4:	f7ff fff6 	bl	800de94 <HAL_UART_ErrorCallback>
}
 800dea8:	bd08      	pop	{r3, pc}

0800deaa <HAL_UARTEx_RxEventCallback>:
}
 800deaa:	4770      	bx	lr

0800deac <HAL_UART_IRQHandler>:
{
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800deb0:	6801      	ldr	r1, [r0, #0]
 800deb2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800deb4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800deb6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800deb8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800debc:	401a      	ands	r2, r3
 800debe:	d108      	bne.n	800ded2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dec0:	f013 0f20 	tst.w	r3, #32
 800dec4:	d005      	beq.n	800ded2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dec6:	f010 0f20 	tst.w	r0, #32
 800deca:	d134      	bne.n	800df36 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800decc:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800ded0:	d131      	bne.n	800df36 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800ded2:	b12a      	cbz	r2, 800dee0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ded4:	4aa8      	ldr	r2, [pc, #672]	; (800e178 <HAL_UART_IRQHandler+0x2cc>)
 800ded6:	402a      	ands	r2, r5
 800ded8:	d133      	bne.n	800df42 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800deda:	4ea8      	ldr	r6, [pc, #672]	; (800e17c <HAL_UART_IRQHandler+0x2d0>)
 800dedc:	4230      	tst	r0, r6
 800dede:	d130      	bne.n	800df42 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dee0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800dee2:	2a01      	cmp	r2, #1
 800dee4:	f000 80bb 	beq.w	800e05e <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dee8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800deec:	d003      	beq.n	800def6 <HAL_UART_IRQHandler+0x4a>
 800deee:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800def2:	f040 8127 	bne.w	800e144 <HAL_UART_IRQHandler+0x298>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800def6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800defa:	d007      	beq.n	800df0c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800defc:	f010 0f80 	tst.w	r0, #128	; 0x80
 800df00:	f040 8127 	bne.w	800e152 <HAL_UART_IRQHandler+0x2a6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800df04:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800df08:	f040 8123 	bne.w	800e152 <HAL_UART_IRQHandler+0x2a6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800df0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800df10:	d003      	beq.n	800df1a <HAL_UART_IRQHandler+0x6e>
 800df12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800df16:	f040 8123 	bne.w	800e160 <HAL_UART_IRQHandler+0x2b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800df1a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800df1e:	d003      	beq.n	800df28 <HAL_UART_IRQHandler+0x7c>
 800df20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df24:	f040 8120 	bne.w	800e168 <HAL_UART_IRQHandler+0x2bc>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800df28:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800df2c:	d002      	beq.n	800df34 <HAL_UART_IRQHandler+0x88>
 800df2e:	2800      	cmp	r0, #0
 800df30:	f2c0 811e 	blt.w	800e170 <HAL_UART_IRQHandler+0x2c4>
}
 800df34:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800df36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0fb      	beq.n	800df34 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 800df3c:	4620      	mov	r0, r4
 800df3e:	4798      	blx	r3
      return;
 800df40:	e7f8      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800df42:	f013 0f01 	tst.w	r3, #1
 800df46:	d009      	beq.n	800df5c <HAL_UART_IRQHandler+0xb0>
 800df48:	f410 7f80 	tst.w	r0, #256	; 0x100
 800df4c:	d006      	beq.n	800df5c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800df4e:	2601      	movs	r6, #1
 800df50:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800df56:	4331      	orrs	r1, r6
 800df58:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df5c:	f013 0f02 	tst.w	r3, #2
 800df60:	d00b      	beq.n	800df7a <HAL_UART_IRQHandler+0xce>
 800df62:	f015 0f01 	tst.w	r5, #1
 800df66:	d008      	beq.n	800df7a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df68:	6821      	ldr	r1, [r4, #0]
 800df6a:	2602      	movs	r6, #2
 800df6c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df6e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800df72:	f041 0104 	orr.w	r1, r1, #4
 800df76:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df7a:	f013 0f04 	tst.w	r3, #4
 800df7e:	d00b      	beq.n	800df98 <HAL_UART_IRQHandler+0xec>
 800df80:	f015 0f01 	tst.w	r5, #1
 800df84:	d008      	beq.n	800df98 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800df86:	6821      	ldr	r1, [r4, #0]
 800df88:	2604      	movs	r6, #4
 800df8a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df8c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800df90:	f041 0102 	orr.w	r1, r1, #2
 800df94:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800df98:	f013 0f08 	tst.w	r3, #8
 800df9c:	d00b      	beq.n	800dfb6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800df9e:	f010 0f20 	tst.w	r0, #32
 800dfa2:	d100      	bne.n	800dfa6 <HAL_UART_IRQHandler+0xfa>
 800dfa4:	b13a      	cbz	r2, 800dfb6 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfa6:	6822      	ldr	r2, [r4, #0]
 800dfa8:	2108      	movs	r1, #8
 800dfaa:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dfac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800dfb0:	430a      	orrs	r2, r1
 800dfb2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dfb6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800dfba:	d00c      	beq.n	800dfd6 <HAL_UART_IRQHandler+0x12a>
 800dfbc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800dfc0:	d009      	beq.n	800dfd6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dfc2:	6822      	ldr	r2, [r4, #0]
 800dfc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dfc8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dfca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800dfce:	f042 0220 	orr.w	r2, r2, #32
 800dfd2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfd6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800dfda:	2a00      	cmp	r2, #0
 800dfdc:	d0aa      	beq.n	800df34 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dfde:	f013 0f20 	tst.w	r3, #32
 800dfe2:	d009      	beq.n	800dff8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dfe4:	f010 0f20 	tst.w	r0, #32
 800dfe8:	d102      	bne.n	800dff0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dfea:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800dfee:	d003      	beq.n	800dff8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800dff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dff2:	b10b      	cbz	r3, 800dff8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800dff4:	4620      	mov	r0, r4
 800dff6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800dff8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e004:	d102      	bne.n	800e00c <HAL_UART_IRQHandler+0x160>
 800e006:	f012 0f28 	tst.w	r2, #40	; 0x28
 800e00a:	d021      	beq.n	800e050 <HAL_UART_IRQHandler+0x1a4>
        UART_EndRxTransfer(huart);
 800e00c:	4620      	mov	r0, r4
 800e00e:	f7ff fe14 	bl	800dc3a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e012:	6823      	ldr	r3, [r4, #0]
 800e014:	689a      	ldr	r2, [r3, #8]
 800e016:	f012 0f40 	tst.w	r2, #64	; 0x40
 800e01a:	d015      	beq.n	800e048 <HAL_UART_IRQHandler+0x19c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e01c:	689a      	ldr	r2, [r3, #8]
 800e01e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e022:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800e024:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800e026:	b15b      	cbz	r3, 800e040 <HAL_UART_IRQHandler+0x194>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e028:	4a55      	ldr	r2, [pc, #340]	; (800e180 <HAL_UART_IRQHandler+0x2d4>)
 800e02a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e02c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e02e:	f7fa fdff 	bl	8008c30 <HAL_DMA_Abort_IT>
 800e032:	2800      	cmp	r0, #0
 800e034:	f43f af7e 	beq.w	800df34 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e038:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e03a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e03c:	4798      	blx	r3
 800e03e:	e779      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800e040:	4620      	mov	r0, r4
 800e042:	f7ff ff27 	bl	800de94 <HAL_UART_ErrorCallback>
 800e046:	e775      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800e048:	4620      	mov	r0, r4
 800e04a:	f7ff ff23 	bl	800de94 <HAL_UART_ErrorCallback>
 800e04e:	e771      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800e050:	4620      	mov	r0, r4
 800e052:	f7ff ff1f 	bl	800de94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e056:	2300      	movs	r3, #0
 800e058:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 800e05c:	e76a      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800e05e:	f013 0f10 	tst.w	r3, #16
 800e062:	f43f af41 	beq.w	800dee8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800e066:	f010 0f10 	tst.w	r0, #16
 800e06a:	f43f af3d 	beq.w	800dee8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e06e:	2310      	movs	r3, #16
 800e070:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e072:	6822      	ldr	r2, [r4, #0]
 800e074:	6893      	ldr	r3, [r2, #8]
 800e076:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e07a:	d039      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x244>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e07c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800e07e:	680b      	ldr	r3, [r1, #0]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800e084:	2b00      	cmp	r3, #0
 800e086:	f43f af55 	beq.w	800df34 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800e08a:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800e08e:	4298      	cmp	r0, r3
 800e090:	f67f af50 	bls.w	800df34 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800e094:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e098:	680b      	ldr	r3, [r1, #0]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f013 0f20 	tst.w	r3, #32
 800e0a0:	d00a      	beq.n	800e0b8 <HAL_UART_IRQHandler+0x20c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e0a2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e0a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	1ac9      	subs	r1, r1, r3
 800e0ae:	b289      	uxth	r1, r1
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7ff fefa 	bl	800deaa <HAL_UARTEx_RxEventCallback>
      return;
 800e0b6:	e73d      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0b8:	6813      	ldr	r3, [r2, #0]
 800e0ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0be:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0c0:	6822      	ldr	r2, [r4, #0]
 800e0c2:	6893      	ldr	r3, [r2, #8]
 800e0c4:	f023 0301 	bic.w	r3, r3, #1
 800e0c8:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0ca:	6822      	ldr	r2, [r4, #0]
 800e0cc:	6893      	ldr	r3, [r2, #8]
 800e0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0d2:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 800e0d4:	2320      	movs	r3, #32
 800e0d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0de:	6822      	ldr	r2, [r4, #0]
 800e0e0:	6813      	ldr	r3, [r2, #0]
 800e0e2:	f023 0310 	bic.w	r3, r3, #16
 800e0e6:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e0e8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e0ea:	f7fa fd6b 	bl	8008bc4 <HAL_DMA_Abort>
 800e0ee:	e7d8      	b.n	800e0a2 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e0f0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e0f4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	1ac9      	subs	r1, r1, r3
 800e0fc:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800e0fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e102:	b29b      	uxth	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	f43f af15 	beq.w	800df34 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 800e10a:	2900      	cmp	r1, #0
 800e10c:	f43f af12 	beq.w	800df34 <HAL_UART_IRQHandler+0x88>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e110:	6813      	ldr	r3, [r2, #0]
 800e112:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e116:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e118:	6822      	ldr	r2, [r4, #0]
 800e11a:	6893      	ldr	r3, [r2, #8]
 800e11c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e120:	f023 0301 	bic.w	r3, r3, #1
 800e124:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800e126:	2320      	movs	r3, #32
 800e128:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e12c:	2300      	movs	r3, #0
 800e12e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800e130:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e132:	6822      	ldr	r2, [r4, #0]
 800e134:	6813      	ldr	r3, [r2, #0]
 800e136:	f023 0310 	bic.w	r3, r3, #16
 800e13a:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e13c:	4620      	mov	r0, r4
 800e13e:	f7ff feb4 	bl	800deaa <HAL_UARTEx_RxEventCallback>
      return;
 800e142:	e6f7      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e148:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800e14a:	4620      	mov	r0, r4
 800e14c:	f000 fdc0 	bl	800ecd0 <HAL_UARTEx_WakeupCallback>
    return;
 800e150:	e6f0      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800e152:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e154:	2b00      	cmp	r3, #0
 800e156:	f43f aeed 	beq.w	800df34 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800e15a:	4620      	mov	r0, r4
 800e15c:	4798      	blx	r3
    return;
 800e15e:	e6e9      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800e160:	4620      	mov	r0, r4
 800e162:	f7ff fe89 	bl	800de78 <UART_EndTransmit_IT>
    return;
 800e166:	e6e5      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 fdb3 	bl	800ecd4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800e16e:	e6e1      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e170:	4620      	mov	r0, r4
 800e172:	f000 fdae 	bl	800ecd2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800e176:	e6dd      	b.n	800df34 <HAL_UART_IRQHandler+0x88>
 800e178:	10000001 	.word	0x10000001
 800e17c:	04000120 	.word	0x04000120
 800e180:	0800de97 	.word	0x0800de97

0800e184 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e184:	b510      	push	{r4, lr}
 800e186:	4604      	mov	r4, r0
  uint16_t uhMask = huart->Mask;
 800e188:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e18c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e190:	2a22      	cmp	r2, #34	; 0x22
 800e192:	d006      	beq.n	800e1a2 <UART_RxISR_8BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e194:	6802      	ldr	r2, [r0, #0]
 800e196:	8b13      	ldrh	r3, [r2, #24]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	f043 0308 	orr.w	r3, r3, #8
 800e19e:	8313      	strh	r3, [r2, #24]
  }
}
 800e1a0:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e1a2:	6802      	ldr	r2, [r0, #0]
 800e1a4:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800e1aa:	400b      	ands	r3, r1
 800e1ac:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800e1ae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800e1b4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	3b01      	subs	r3, #1
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800e1c2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e9      	bne.n	800e1a0 <UART_RxISR_8BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1cc:	6802      	ldr	r2, [r0, #0]
 800e1ce:	6813      	ldr	r3, [r2, #0]
 800e1d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1d4:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1d6:	6802      	ldr	r2, [r0, #0]
 800e1d8:	6893      	ldr	r3, [r2, #8]
 800e1da:	f023 0301 	bic.w	r3, r3, #1
 800e1de:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800e1e0:	2320      	movs	r3, #32
 800e1e2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d004      	beq.n	800e1fa <UART_RxISR_8BIT+0x76>
        HAL_UART_RxCpltCallback(huart);
 800e1f0:	f7fa f9ac 	bl	800854c <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e1f8:	e7d2      	b.n	800e1a0 <UART_RxISR_8BIT+0x1c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1fa:	6802      	ldr	r2, [r0, #0]
 800e1fc:	6813      	ldr	r3, [r2, #0]
 800e1fe:	f023 0310 	bic.w	r3, r3, #16
 800e202:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e204:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800e208:	f7ff fe4f 	bl	800deaa <HAL_UARTEx_RxEventCallback>
 800e20c:	e7f2      	b.n	800e1f4 <UART_RxISR_8BIT+0x70>

0800e20e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e20e:	b510      	push	{r4, lr}
 800e210:	4604      	mov	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e212:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e216:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e21a:	2a22      	cmp	r2, #34	; 0x22
 800e21c:	d006      	beq.n	800e22c <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e21e:	6802      	ldr	r2, [r0, #0]
 800e220:	8b13      	ldrh	r3, [r2, #24]
 800e222:	b29b      	uxth	r3, r3
 800e224:	f043 0308 	orr.w	r3, r3, #8
 800e228:	8313      	strh	r3, [r2, #24]
  }
}
 800e22a:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e22c:	6802      	ldr	r2, [r0, #0]
 800e22e:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e230:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800e232:	400b      	ands	r3, r1
 800e234:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800e236:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800e238:	3302      	adds	r3, #2
 800e23a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800e23c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800e240:	b29b      	uxth	r3, r3
 800e242:	3b01      	subs	r3, #1
 800e244:	b29b      	uxth	r3, r3
 800e246:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800e24a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800e24e:	b29b      	uxth	r3, r3
 800e250:	2b00      	cmp	r3, #0
 800e252:	d1ea      	bne.n	800e22a <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e254:	6802      	ldr	r2, [r0, #0]
 800e256:	6813      	ldr	r3, [r2, #0]
 800e258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e25c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e25e:	6802      	ldr	r2, [r0, #0]
 800e260:	6893      	ldr	r3, [r2, #8]
 800e262:	f023 0301 	bic.w	r3, r3, #1
 800e266:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800e268:	2320      	movs	r3, #32
 800e26a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800e26e:	2300      	movs	r3, #0
 800e270:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e272:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e274:	2b01      	cmp	r3, #1
 800e276:	d004      	beq.n	800e282 <UART_RxISR_16BIT+0x74>
        HAL_UART_RxCpltCallback(huart);
 800e278:	f7fa f968 	bl	800854c <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e27c:	2300      	movs	r3, #0
 800e27e:	66e3      	str	r3, [r4, #108]	; 0x6c
 800e280:	e7d3      	b.n	800e22a <UART_RxISR_16BIT+0x1c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e282:	6802      	ldr	r2, [r0, #0]
 800e284:	6813      	ldr	r3, [r2, #0]
 800e286:	f023 0310 	bic.w	r3, r3, #16
 800e28a:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e28c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800e290:	f7ff fe0b 	bl	800deaa <HAL_UARTEx_RxEventCallback>
 800e294:	e7f2      	b.n	800e27c <UART_RxISR_16BIT+0x6e>
	...

0800e298 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800e29c:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e2a0:	6803      	ldr	r3, [r0, #0]
 800e2a2:	f8d3 901c 	ldr.w	r9, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e2a6:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e2aa:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e2ac:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e2b0:	2a22      	cmp	r2, #34	; 0x22
 800e2b2:	d006      	beq.n	800e2c2 <UART_RxISR_8BIT_FIFOEN+0x2a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2b4:	8b1a      	ldrh	r2, [r3, #24]
 800e2b6:	b292      	uxth	r2, r2
 800e2b8:	f042 0208 	orr.w	r2, r2, #8
 800e2bc:	831a      	strh	r2, [r3, #24]
  }
}
 800e2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2c2:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800e2c4:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e2c8:	e020      	b.n	800e30c <UART_RxISR_8BIT_FIFOEN+0x74>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2ca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d163      	bne.n	800e39a <UART_RxISR_8BIT_FIFOEN+0x102>
      if (huart->RxXferCount == 0U)
 800e2d2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	b9c3      	cbnz	r3, 800e30c <UART_RxISR_8BIT_FIFOEN+0x74>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2da:	6822      	ldr	r2, [r4, #0]
 800e2dc:	6813      	ldr	r3, [r2, #0]
 800e2de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2e2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2e4:	6822      	ldr	r2, [r4, #0]
 800e2e6:	6893      	ldr	r3, [r2, #8]
 800e2e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2ec:	f023 0301 	bic.w	r3, r3, #1
 800e2f0:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800e2f2:	2320      	movs	r3, #32
 800e2f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d052      	beq.n	800e3a8 <UART_RxISR_8BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 800e302:	4620      	mov	r0, r4
 800e304:	f7fa f922 	bl	800854c <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e308:	2300      	movs	r3, #0
 800e30a:	66e3      	str	r3, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e30c:	2e00      	cmp	r6, #0
 800e30e:	d056      	beq.n	800e3be <UART_RxISR_8BIT_FIFOEN+0x126>
 800e310:	f019 0f20 	tst.w	r9, #32
 800e314:	d053      	beq.n	800e3be <UART_RxISR_8BIT_FIFOEN+0x126>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e31a:	b2eb      	uxtb	r3, r5
 800e31c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e31e:	400b      	ands	r3, r1
 800e320:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800e322:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e324:	3301      	adds	r3, #1
 800e326:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800e328:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	3b01      	subs	r3, #1
 800e330:	b29b      	uxth	r3, r3
 800e332:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e336:	6823      	ldr	r3, [r4, #0]
 800e338:	f8d3 901c 	ldr.w	r9, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e33c:	f019 0f07 	tst.w	r9, #7
 800e340:	d0c7      	beq.n	800e2d2 <UART_RxISR_8BIT_FIFOEN+0x3a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e342:	f019 0f01 	tst.w	r9, #1
 800e346:	d009      	beq.n	800e35c <UART_RxISR_8BIT_FIFOEN+0xc4>
 800e348:	f418 7f80 	tst.w	r8, #256	; 0x100
 800e34c:	d006      	beq.n	800e35c <UART_RxISR_8BIT_FIFOEN+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e34e:	2201      	movs	r2, #1
 800e350:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e352:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e356:	4313      	orrs	r3, r2
 800e358:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e35c:	f019 0f02 	tst.w	r9, #2
 800e360:	d00b      	beq.n	800e37a <UART_RxISR_8BIT_FIFOEN+0xe2>
 800e362:	f017 0f01 	tst.w	r7, #1
 800e366:	d008      	beq.n	800e37a <UART_RxISR_8BIT_FIFOEN+0xe2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	2202      	movs	r2, #2
 800e36c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e36e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e372:	f043 0304 	orr.w	r3, r3, #4
 800e376:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e37a:	f019 0f04 	tst.w	r9, #4
 800e37e:	d0a4      	beq.n	800e2ca <UART_RxISR_8BIT_FIFOEN+0x32>
 800e380:	f017 0f01 	tst.w	r7, #1
 800e384:	d0a1      	beq.n	800e2ca <UART_RxISR_8BIT_FIFOEN+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	2204      	movs	r2, #4
 800e38a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e38c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e390:	f043 0302 	orr.w	r3, r3, #2
 800e394:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800e398:	e797      	b.n	800e2ca <UART_RxISR_8BIT_FIFOEN+0x32>
          HAL_UART_ErrorCallback(huart);
 800e39a:	4620      	mov	r0, r4
 800e39c:	f7ff fd7a 	bl	800de94 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800e3a6:	e794      	b.n	800e2d2 <UART_RxISR_8BIT_FIFOEN+0x3a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3a8:	6822      	ldr	r2, [r4, #0]
 800e3aa:	6813      	ldr	r3, [r2, #0]
 800e3ac:	f023 0310 	bic.w	r3, r3, #16
 800e3b0:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f7ff fd77 	bl	800deaa <HAL_UARTEx_RxEventCallback>
 800e3bc:	e7a4      	b.n	800e308 <UART_RxISR_8BIT_FIFOEN+0x70>
    rxdatacount = huart->RxXferCount;
 800e3be:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e3c2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f43f af7a 	beq.w	800e2be <UART_RxISR_8BIT_FIFOEN+0x26>
 800e3ca:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	f67f af75 	bls.w	800e2be <UART_RxISR_8BIT_FIFOEN+0x26>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e3d4:	6822      	ldr	r2, [r4, #0]
 800e3d6:	6893      	ldr	r3, [r2, #8]
 800e3d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e3dc:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800e3de:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <UART_RxISR_8BIT_FIFOEN+0x158>)
 800e3e0:	6723      	str	r3, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e3e2:	6822      	ldr	r2, [r4, #0]
 800e3e4:	6813      	ldr	r3, [r2, #0]
 800e3e6:	f043 0320 	orr.w	r3, r3, #32
 800e3ea:	6013      	str	r3, [r2, #0]
 800e3ec:	e767      	b.n	800e2be <UART_RxISR_8BIT_FIFOEN+0x26>
 800e3ee:	bf00      	nop
 800e3f0:	0800e185 	.word	0x0800e185

0800e3f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e3f8:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3fc:	6803      	ldr	r3, [r0, #0]
 800e3fe:	f8d3 901c 	ldr.w	r9, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e402:	f8d3 8000 	ldr.w	r8, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e406:	689f      	ldr	r7, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e408:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e40c:	2a22      	cmp	r2, #34	; 0x22
 800e40e:	d006      	beq.n	800e41e <UART_RxISR_16BIT_FIFOEN+0x2a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e410:	8b1a      	ldrh	r2, [r3, #24]
 800e412:	b292      	uxth	r2, r2
 800e414:	f042 0208 	orr.w	r2, r2, #8
 800e418:	831a      	strh	r2, [r3, #24]
  }
}
 800e41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e41e:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800e420:	f8b0 6068 	ldrh.w	r6, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e424:	e020      	b.n	800e468 <UART_RxISR_16BIT_FIFOEN+0x74>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e426:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d162      	bne.n	800e4f4 <UART_RxISR_16BIT_FIFOEN+0x100>
      if (huart->RxXferCount == 0U)
 800e42e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e432:	b29b      	uxth	r3, r3
 800e434:	b9c3      	cbnz	r3, 800e468 <UART_RxISR_16BIT_FIFOEN+0x74>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e436:	6822      	ldr	r2, [r4, #0]
 800e438:	6813      	ldr	r3, [r2, #0]
 800e43a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e43e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e440:	6822      	ldr	r2, [r4, #0]
 800e442:	6893      	ldr	r3, [r2, #8]
 800e444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e448:	f023 0301 	bic.w	r3, r3, #1
 800e44c:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800e44e:	2320      	movs	r3, #32
 800e450:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800e454:	2300      	movs	r3, #0
 800e456:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e458:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d051      	beq.n	800e502 <UART_RxISR_16BIT_FIFOEN+0x10e>
          HAL_UART_RxCpltCallback(huart);
 800e45e:	4620      	mov	r0, r4
 800e460:	f7fa f874 	bl	800854c <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e464:	2300      	movs	r3, #0
 800e466:	66e3      	str	r3, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e468:	2e00      	cmp	r6, #0
 800e46a:	d055      	beq.n	800e518 <UART_RxISR_16BIT_FIFOEN+0x124>
 800e46c:	f019 0f20 	tst.w	r9, #32
 800e470:	d052      	beq.n	800e518 <UART_RxISR_16BIT_FIFOEN+0x124>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e476:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800e478:	402b      	ands	r3, r5
 800e47a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800e47c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e47e:	3302      	adds	r3, #2
 800e480:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800e482:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e486:	b29b      	uxth	r3, r3
 800e488:	3b01      	subs	r3, #1
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	f8d3 901c 	ldr.w	r9, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e496:	f019 0f07 	tst.w	r9, #7
 800e49a:	d0c8      	beq.n	800e42e <UART_RxISR_16BIT_FIFOEN+0x3a>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e49c:	f019 0f01 	tst.w	r9, #1
 800e4a0:	d009      	beq.n	800e4b6 <UART_RxISR_16BIT_FIFOEN+0xc2>
 800e4a2:	f418 7f80 	tst.w	r8, #256	; 0x100
 800e4a6:	d006      	beq.n	800e4b6 <UART_RxISR_16BIT_FIFOEN+0xc2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4b6:	f019 0f02 	tst.w	r9, #2
 800e4ba:	d00b      	beq.n	800e4d4 <UART_RxISR_16BIT_FIFOEN+0xe0>
 800e4bc:	f017 0f01 	tst.w	r7, #1
 800e4c0:	d008      	beq.n	800e4d4 <UART_RxISR_16BIT_FIFOEN+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4c8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e4cc:	f043 0304 	orr.w	r3, r3, #4
 800e4d0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4d4:	f019 0f04 	tst.w	r9, #4
 800e4d8:	d0a5      	beq.n	800e426 <UART_RxISR_16BIT_FIFOEN+0x32>
 800e4da:	f017 0f01 	tst.w	r7, #1
 800e4de:	d0a2      	beq.n	800e426 <UART_RxISR_16BIT_FIFOEN+0x32>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4e0:	6823      	ldr	r3, [r4, #0]
 800e4e2:	2204      	movs	r2, #4
 800e4e4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4e6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e4ea:	f043 0302 	orr.w	r3, r3, #2
 800e4ee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800e4f2:	e798      	b.n	800e426 <UART_RxISR_16BIT_FIFOEN+0x32>
          HAL_UART_ErrorCallback(huart);
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f7ff fccd 	bl	800de94 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800e500:	e795      	b.n	800e42e <UART_RxISR_16BIT_FIFOEN+0x3a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e502:	6822      	ldr	r2, [r4, #0]
 800e504:	6813      	ldr	r3, [r2, #0]
 800e506:	f023 0310 	bic.w	r3, r3, #16
 800e50a:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e50c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e510:	4620      	mov	r0, r4
 800e512:	f7ff fcca 	bl	800deaa <HAL_UARTEx_RxEventCallback>
 800e516:	e7a5      	b.n	800e464 <UART_RxISR_16BIT_FIFOEN+0x70>
    rxdatacount = huart->RxXferCount;
 800e518:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800e51c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f43f af7b 	beq.w	800e41a <UART_RxISR_16BIT_FIFOEN+0x26>
 800e524:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800e528:	429a      	cmp	r2, r3
 800e52a:	f67f af76 	bls.w	800e41a <UART_RxISR_16BIT_FIFOEN+0x26>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e52e:	6822      	ldr	r2, [r4, #0]
 800e530:	6893      	ldr	r3, [r2, #8]
 800e532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e536:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 800e538:	4b03      	ldr	r3, [pc, #12]	; (800e548 <UART_RxISR_16BIT_FIFOEN+0x154>)
 800e53a:	6723      	str	r3, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e53c:	6822      	ldr	r2, [r4, #0]
 800e53e:	6813      	ldr	r3, [r2, #0]
 800e540:	f043 0320 	orr.w	r3, r3, #32
 800e544:	6013      	str	r3, [r2, #0]
 800e546:	e768      	b.n	800e41a <UART_RxISR_16BIT_FIFOEN+0x26>
 800e548:	0800e20f 	.word	0x0800e20f

0800e54c <HAL_UART_GetState>:
  temp1 = huart->gState;
 800e54c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  temp2 = huart->RxState;
 800e550:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
 800e554:	4310      	orrs	r0, r2
 800e556:	4770      	bx	lr

0800e558 <UART_SetConfig>:
{
 800e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800e55e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e560:	6883      	ldr	r3, [r0, #8]
 800e562:	6902      	ldr	r2, [r0, #16]
 800e564:	4313      	orrs	r3, r2
 800e566:	6942      	ldr	r2, [r0, #20]
 800e568:	4313      	orrs	r3, r2
 800e56a:	69c2      	ldr	r2, [r0, #28]
 800e56c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e56e:	6808      	ldr	r0, [r1, #0]
 800e570:	4a9c      	ldr	r2, [pc, #624]	; (800e7e4 <UART_SetConfig+0x28c>)
 800e572:	4002      	ands	r2, r0
 800e574:	4313      	orrs	r3, r2
 800e576:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e578:	6822      	ldr	r2, [r4, #0]
 800e57a:	6853      	ldr	r3, [r2, #4]
 800e57c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e580:	68e1      	ldr	r1, [r4, #12]
 800e582:	430b      	orrs	r3, r1
 800e584:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e586:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e588:	6822      	ldr	r2, [r4, #0]
 800e58a:	4b97      	ldr	r3, [pc, #604]	; (800e7e8 <UART_SetConfig+0x290>)
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d001      	beq.n	800e594 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800e590:	6a23      	ldr	r3, [r4, #32]
 800e592:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e594:	6893      	ldr	r3, [r2, #8]
 800e596:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e59a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e59e:	430b      	orrs	r3, r1
 800e5a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e5a2:	6822      	ldr	r2, [r4, #0]
 800e5a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e5a6:	f023 030f 	bic.w	r3, r3, #15
 800e5aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e5ac:	430b      	orrs	r3, r1
 800e5ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5b0:	6822      	ldr	r2, [r4, #0]
 800e5b2:	4b8e      	ldr	r3, [pc, #568]	; (800e7ec <UART_SetConfig+0x294>)
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d010      	beq.n	800e5da <UART_SetConfig+0x82>
 800e5b8:	4b8d      	ldr	r3, [pc, #564]	; (800e7f0 <UART_SetConfig+0x298>)
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d021      	beq.n	800e602 <UART_SetConfig+0xaa>
 800e5be:	4b8d      	ldr	r3, [pc, #564]	; (800e7f4 <UART_SetConfig+0x29c>)
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d037      	beq.n	800e634 <UART_SetConfig+0xdc>
 800e5c4:	4b8c      	ldr	r3, [pc, #560]	; (800e7f8 <UART_SetConfig+0x2a0>)
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d05c      	beq.n	800e684 <UART_SetConfig+0x12c>
 800e5ca:	4b8c      	ldr	r3, [pc, #560]	; (800e7fc <UART_SetConfig+0x2a4>)
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d06b      	beq.n	800e6a8 <UART_SetConfig+0x150>
 800e5d0:	4b85      	ldr	r3, [pc, #532]	; (800e7e8 <UART_SetConfig+0x290>)
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d07d      	beq.n	800e6d2 <UART_SetConfig+0x17a>
 800e5d6:	2310      	movs	r3, #16
 800e5d8:	e03a      	b.n	800e650 <UART_SetConfig+0xf8>
 800e5da:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800e5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5e2:	f003 0303 	and.w	r3, r3, #3
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d809      	bhi.n	800e5fe <UART_SetConfig+0xa6>
 800e5ea:	e8df f003 	tbb	[pc, r3]
 800e5ee:	0402      	.short	0x0402
 800e5f0:	0687      	.short	0x0687
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e02c      	b.n	800e650 <UART_SetConfig+0xf8>
 800e5f6:	2304      	movs	r3, #4
 800e5f8:	e02a      	b.n	800e650 <UART_SetConfig+0xf8>
 800e5fa:	2308      	movs	r3, #8
 800e5fc:	e028      	b.n	800e650 <UART_SetConfig+0xf8>
 800e5fe:	2310      	movs	r3, #16
 800e600:	e026      	b.n	800e650 <UART_SetConfig+0xf8>
 800e602:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800e606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e60a:	f003 030c 	and.w	r3, r3, #12
 800e60e:	2b0c      	cmp	r3, #12
 800e610:	d80e      	bhi.n	800e630 <UART_SetConfig+0xd8>
 800e612:	e8df f003 	tbb	[pc, r3]
 800e616:	0d07      	.short	0x0d07
 800e618:	0d090d0d 	.word	0x0d090d0d
 800e61c:	0d750d0d 	.word	0x0d750d0d
 800e620:	0d0d      	.short	0x0d0d
 800e622:	0b          	.byte	0x0b
 800e623:	00          	.byte	0x00
 800e624:	2300      	movs	r3, #0
 800e626:	e013      	b.n	800e650 <UART_SetConfig+0xf8>
 800e628:	2304      	movs	r3, #4
 800e62a:	e011      	b.n	800e650 <UART_SetConfig+0xf8>
 800e62c:	2308      	movs	r3, #8
 800e62e:	e00f      	b.n	800e650 <UART_SetConfig+0xf8>
 800e630:	2310      	movs	r3, #16
 800e632:	e00d      	b.n	800e650 <UART_SetConfig+0xf8>
 800e634:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800e638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e63c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e640:	2b20      	cmp	r3, #32
 800e642:	d05f      	beq.n	800e704 <UART_SetConfig+0x1ac>
 800e644:	d81a      	bhi.n	800e67c <UART_SetConfig+0x124>
 800e646:	2b00      	cmp	r3, #0
 800e648:	d05e      	beq.n	800e708 <UART_SetConfig+0x1b0>
 800e64a:	2b10      	cmp	r3, #16
 800e64c:	d15e      	bne.n	800e70c <UART_SetConfig+0x1b4>
 800e64e:	2304      	movs	r3, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 800e650:	4965      	ldr	r1, [pc, #404]	; (800e7e8 <UART_SetConfig+0x290>)
 800e652:	428a      	cmp	r2, r1
 800e654:	d076      	beq.n	800e744 <UART_SetConfig+0x1ec>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e656:	69e0      	ldr	r0, [r4, #28]
 800e658:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800e65c:	f000 80b6 	beq.w	800e7cc <UART_SetConfig+0x274>
    switch (clocksource)
 800e660:	2b08      	cmp	r3, #8
 800e662:	f200 8137 	bhi.w	800e8d4 <UART_SetConfig+0x37c>
 800e666:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e66a:	00f9      	.short	0x00f9
 800e66c:	00f7011c 	.word	0x00f7011c
 800e670:	011f0135 	.word	0x011f0135
 800e674:	01350135 	.word	0x01350135
 800e678:	01220135 	.word	0x01220135
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e67c:	2b30      	cmp	r3, #48	; 0x30
 800e67e:	d147      	bne.n	800e710 <UART_SetConfig+0x1b8>
 800e680:	2308      	movs	r3, #8
 800e682:	e7e5      	b.n	800e650 <UART_SetConfig+0xf8>
 800e684:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800e688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e68c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e690:	2b80      	cmp	r3, #128	; 0x80
 800e692:	d03f      	beq.n	800e714 <UART_SetConfig+0x1bc>
 800e694:	d804      	bhi.n	800e6a0 <UART_SetConfig+0x148>
 800e696:	b3fb      	cbz	r3, 800e718 <UART_SetConfig+0x1c0>
 800e698:	2b40      	cmp	r3, #64	; 0x40
 800e69a:	d13f      	bne.n	800e71c <UART_SetConfig+0x1c4>
 800e69c:	2304      	movs	r3, #4
 800e69e:	e7d7      	b.n	800e650 <UART_SetConfig+0xf8>
 800e6a0:	2bc0      	cmp	r3, #192	; 0xc0
 800e6a2:	d13d      	bne.n	800e720 <UART_SetConfig+0x1c8>
 800e6a4:	2308      	movs	r3, #8
 800e6a6:	e7d3      	b.n	800e650 <UART_SetConfig+0xf8>
 800e6a8:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800e6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6b8:	d034      	beq.n	800e724 <UART_SetConfig+0x1cc>
 800e6ba:	d805      	bhi.n	800e6c8 <UART_SetConfig+0x170>
 800e6bc:	b3a3      	cbz	r3, 800e728 <UART_SetConfig+0x1d0>
 800e6be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6c2:	d133      	bne.n	800e72c <UART_SetConfig+0x1d4>
 800e6c4:	2304      	movs	r3, #4
 800e6c6:	e7c3      	b.n	800e650 <UART_SetConfig+0xf8>
 800e6c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6cc:	d130      	bne.n	800e730 <UART_SetConfig+0x1d8>
 800e6ce:	2308      	movs	r3, #8
 800e6d0:	e7be      	b.n	800e650 <UART_SetConfig+0xf8>
 800e6d2:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 800e6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e6de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6e2:	d027      	beq.n	800e734 <UART_SetConfig+0x1dc>
 800e6e4:	d805      	bhi.n	800e6f2 <UART_SetConfig+0x19a>
 800e6e6:	b33b      	cbz	r3, 800e738 <UART_SetConfig+0x1e0>
 800e6e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6ec:	d126      	bne.n	800e73c <UART_SetConfig+0x1e4>
 800e6ee:	2304      	movs	r3, #4
 800e6f0:	e7ae      	b.n	800e650 <UART_SetConfig+0xf8>
 800e6f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e6f6:	d123      	bne.n	800e740 <UART_SetConfig+0x1e8>
 800e6f8:	2308      	movs	r3, #8
 800e6fa:	e7a9      	b.n	800e650 <UART_SetConfig+0xf8>
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e7a7      	b.n	800e650 <UART_SetConfig+0xf8>
 800e700:	2302      	movs	r3, #2
 800e702:	e7a5      	b.n	800e650 <UART_SetConfig+0xf8>
 800e704:	2302      	movs	r3, #2
 800e706:	e7a3      	b.n	800e650 <UART_SetConfig+0xf8>
 800e708:	2300      	movs	r3, #0
 800e70a:	e7a1      	b.n	800e650 <UART_SetConfig+0xf8>
 800e70c:	2310      	movs	r3, #16
 800e70e:	e79f      	b.n	800e650 <UART_SetConfig+0xf8>
 800e710:	2310      	movs	r3, #16
 800e712:	e79d      	b.n	800e650 <UART_SetConfig+0xf8>
 800e714:	2302      	movs	r3, #2
 800e716:	e79b      	b.n	800e650 <UART_SetConfig+0xf8>
 800e718:	2300      	movs	r3, #0
 800e71a:	e799      	b.n	800e650 <UART_SetConfig+0xf8>
 800e71c:	2310      	movs	r3, #16
 800e71e:	e797      	b.n	800e650 <UART_SetConfig+0xf8>
 800e720:	2310      	movs	r3, #16
 800e722:	e795      	b.n	800e650 <UART_SetConfig+0xf8>
 800e724:	2302      	movs	r3, #2
 800e726:	e793      	b.n	800e650 <UART_SetConfig+0xf8>
 800e728:	2300      	movs	r3, #0
 800e72a:	e791      	b.n	800e650 <UART_SetConfig+0xf8>
 800e72c:	2310      	movs	r3, #16
 800e72e:	e78f      	b.n	800e650 <UART_SetConfig+0xf8>
 800e730:	2310      	movs	r3, #16
 800e732:	e78d      	b.n	800e650 <UART_SetConfig+0xf8>
 800e734:	2302      	movs	r3, #2
 800e736:	e78b      	b.n	800e650 <UART_SetConfig+0xf8>
 800e738:	2300      	movs	r3, #0
 800e73a:	e789      	b.n	800e650 <UART_SetConfig+0xf8>
 800e73c:	2310      	movs	r3, #16
 800e73e:	e787      	b.n	800e650 <UART_SetConfig+0xf8>
 800e740:	2310      	movs	r3, #16
 800e742:	e785      	b.n	800e650 <UART_SetConfig+0xf8>
    switch (clocksource)
 800e744:	2b08      	cmp	r3, #8
 800e746:	f200 80b5 	bhi.w	800e8b4 <UART_SetConfig+0x35c>
 800e74a:	e8df f003 	tbb	[pc, r3]
 800e74e:	b308      	.short	0xb308
 800e750:	b33ab33d 	.word	0xb33ab33d
 800e754:	b3b3      	.short	0xb3b3
 800e756:	05          	.byte	0x05
 800e757:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 800e758:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e75c:	e004      	b.n	800e768 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e75e:	f7fc faa9 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e762:	2800      	cmp	r0, #0
 800e764:	f000 80a8 	beq.w	800e8b8 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e768:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e76a:	4b25      	ldr	r3, [pc, #148]	; (800e800 <UART_SetConfig+0x2a8>)
 800e76c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800e770:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e774:	6865      	ldr	r5, [r4, #4]
 800e776:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e77a:	4299      	cmp	r1, r3
 800e77c:	f200 809e 	bhi.w	800e8bc <UART_SetConfig+0x364>
 800e780:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800e784:	f200 809c 	bhi.w	800e8c0 <UART_SetConfig+0x368>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e788:	f04f 0800 	mov.w	r8, #0
 800e78c:	b292      	uxth	r2, r2
 800e78e:	2300      	movs	r3, #0
 800e790:	4641      	mov	r1, r8
 800e792:	f7f2 fa21 	bl	8000bd8 <__aeabi_uldivmod>
 800e796:	020f      	lsls	r7, r1, #8
 800e798:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800e79c:	0206      	lsls	r6, r0, #8
 800e79e:	0868      	lsrs	r0, r5, #1
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	4643      	mov	r3, r8
 800e7a4:	1830      	adds	r0, r6, r0
 800e7a6:	f147 0100 	adc.w	r1, r7, #0
 800e7aa:	f7f2 fa15 	bl	8000bd8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e7ae:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800e7b2:	4b14      	ldr	r3, [pc, #80]	; (800e804 <UART_SetConfig+0x2ac>)
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	f200 8085 	bhi.w	800e8c4 <UART_SetConfig+0x36c>
          huart->Instance->BRR = usartdiv;
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	60d8      	str	r0, [r3, #12]
 800e7be:	4640      	mov	r0, r8
 800e7c0:	e065      	b.n	800e88e <UART_SetConfig+0x336>
        pclk = HAL_RCC_GetSysClockFreq();
 800e7c2:	f7fb fddd 	bl	800a380 <HAL_RCC_GetSysClockFreq>
        break;
 800e7c6:	e7cc      	b.n	800e762 <UART_SetConfig+0x20a>
        pclk = (uint32_t) HSI_VALUE;
 800e7c8:	480f      	ldr	r0, [pc, #60]	; (800e808 <UART_SetConfig+0x2b0>)
 800e7ca:	e7cd      	b.n	800e768 <UART_SetConfig+0x210>
    switch (clocksource)
 800e7cc:	2b08      	cmp	r3, #8
 800e7ce:	d87b      	bhi.n	800e8c8 <UART_SetConfig+0x370>
 800e7d0:	e8df f003 	tbb	[pc, r3]
 800e7d4:	7a053c1c 	.word	0x7a053c1c
 800e7d8:	7a7a7a3f 	.word	0x7a7a7a3f
 800e7dc:	20          	.byte	0x20
 800e7dd:	00          	.byte	0x00
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e7de:	480a      	ldr	r0, [pc, #40]	; (800e808 <UART_SetConfig+0x2b0>)
 800e7e0:	e018      	b.n	800e814 <UART_SetConfig+0x2bc>
 800e7e2:	bf00      	nop
 800e7e4:	cfff69f3 	.word	0xcfff69f3
 800e7e8:	40008000 	.word	0x40008000
 800e7ec:	40013800 	.word	0x40013800
 800e7f0:	40004400 	.word	0x40004400
 800e7f4:	40004800 	.word	0x40004800
 800e7f8:	40004c00 	.word	0x40004c00
 800e7fc:	40005000 	.word	0x40005000
 800e800:	0802f478 	.word	0x0802f478
 800e804:	000ffcff 	.word	0x000ffcff
 800e808:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 800e80c:	f7fc fa52 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e810:	2800      	cmp	r0, #0
 800e812:	d05b      	beq.n	800e8cc <UART_SetConfig+0x374>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e814:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e816:	4b32      	ldr	r3, [pc, #200]	; (800e8e0 <UART_SetConfig+0x388>)
 800e818:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e81c:	fbb0 f0f3 	udiv	r0, r0, r3
 800e820:	6862      	ldr	r2, [r4, #4]
 800e822:	0853      	lsrs	r3, r2, #1
 800e824:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e828:	fbb0 f0f2 	udiv	r0, r0, r2
 800e82c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e82e:	f1a0 0210 	sub.w	r2, r0, #16
 800e832:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800e836:	429a      	cmp	r2, r3
 800e838:	d84a      	bhi.n	800e8d0 <UART_SetConfig+0x378>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e83a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e83e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800e842:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800e844:	6823      	ldr	r3, [r4, #0]
 800e846:	60d8      	str	r0, [r3, #12]
 800e848:	2000      	movs	r0, #0
 800e84a:	e020      	b.n	800e88e <UART_SetConfig+0x336>
        pclk = HAL_RCC_GetPCLK2Freq();
 800e84c:	f7fc fa44 	bl	800acd8 <HAL_RCC_GetPCLK2Freq>
        break;
 800e850:	e7de      	b.n	800e810 <UART_SetConfig+0x2b8>
        pclk = HAL_RCC_GetSysClockFreq();
 800e852:	f7fb fd95 	bl	800a380 <HAL_RCC_GetSysClockFreq>
        break;
 800e856:	e7db      	b.n	800e810 <UART_SetConfig+0x2b8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e858:	4822      	ldr	r0, [pc, #136]	; (800e8e4 <UART_SetConfig+0x38c>)
 800e85a:	e003      	b.n	800e864 <UART_SetConfig+0x30c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800e85c:	f7fc fa2a 	bl	800acb4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800e860:	2800      	cmp	r0, #0
 800e862:	d039      	beq.n	800e8d8 <UART_SetConfig+0x380>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e864:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e866:	4b1e      	ldr	r3, [pc, #120]	; (800e8e0 <UART_SetConfig+0x388>)
 800e868:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e86c:	fbb0 f0f3 	udiv	r0, r0, r3
 800e870:	6863      	ldr	r3, [r4, #4]
 800e872:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800e876:	fbb0 f0f3 	udiv	r0, r0, r3
 800e87a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e87c:	f1a0 0210 	sub.w	r2, r0, #16
 800e880:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800e884:	429a      	cmp	r2, r3
 800e886:	d829      	bhi.n	800e8dc <UART_SetConfig+0x384>
        huart->Instance->BRR = usartdiv;
 800e888:	6823      	ldr	r3, [r4, #0]
 800e88a:	60d8      	str	r0, [r3, #12]
 800e88c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800e88e:	2301      	movs	r3, #1
 800e890:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e894:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800e898:	2300      	movs	r3, #0
 800e89a:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800e89c:	6763      	str	r3, [r4, #116]	; 0x74
}
 800e89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8a2:	f7fc fa19 	bl	800acd8 <HAL_RCC_GetPCLK2Freq>
        break;
 800e8a6:	e7db      	b.n	800e860 <UART_SetConfig+0x308>
        pclk = HAL_RCC_GetSysClockFreq();
 800e8a8:	f7fb fd6a 	bl	800a380 <HAL_RCC_GetSysClockFreq>
        break;
 800e8ac:	e7d8      	b.n	800e860 <UART_SetConfig+0x308>
        pclk = (uint32_t) LSE_VALUE;
 800e8ae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e8b2:	e7d7      	b.n	800e864 <UART_SetConfig+0x30c>
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	e7ea      	b.n	800e88e <UART_SetConfig+0x336>
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	e7e8      	b.n	800e88e <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 800e8bc:	2001      	movs	r0, #1
 800e8be:	e7e6      	b.n	800e88e <UART_SetConfig+0x336>
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	e7e4      	b.n	800e88e <UART_SetConfig+0x336>
          ret = HAL_ERROR;
 800e8c4:	2001      	movs	r0, #1
 800e8c6:	e7e2      	b.n	800e88e <UART_SetConfig+0x336>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	e7e0      	b.n	800e88e <UART_SetConfig+0x336>
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	e7de      	b.n	800e88e <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	e7dc      	b.n	800e88e <UART_SetConfig+0x336>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e8d4:	2001      	movs	r0, #1
 800e8d6:	e7da      	b.n	800e88e <UART_SetConfig+0x336>
 800e8d8:	2000      	movs	r0, #0
 800e8da:	e7d8      	b.n	800e88e <UART_SetConfig+0x336>
        ret = HAL_ERROR;
 800e8dc:	2001      	movs	r0, #1
 800e8de:	e7d6      	b.n	800e88e <UART_SetConfig+0x336>
 800e8e0:	0802f478 	.word	0x0802f478
 800e8e4:	00f42400 	.word	0x00f42400

0800e8e8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e8ea:	f013 0f01 	tst.w	r3, #1
 800e8ee:	d006      	beq.n	800e8fe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8f0:	6802      	ldr	r2, [r0, #0]
 800e8f2:	6853      	ldr	r3, [r2, #4]
 800e8f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e8f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800e8fa:	430b      	orrs	r3, r1
 800e8fc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e900:	f013 0f02 	tst.w	r3, #2
 800e904:	d006      	beq.n	800e914 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e906:	6802      	ldr	r2, [r0, #0]
 800e908:	6853      	ldr	r3, [r2, #4]
 800e90a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e90e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800e910:	430b      	orrs	r3, r1
 800e912:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e914:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e916:	f013 0f04 	tst.w	r3, #4
 800e91a:	d006      	beq.n	800e92a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e91c:	6802      	ldr	r2, [r0, #0]
 800e91e:	6853      	ldr	r3, [r2, #4]
 800e920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e924:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e926:	430b      	orrs	r3, r1
 800e928:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e92a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e92c:	f013 0f08 	tst.w	r3, #8
 800e930:	d006      	beq.n	800e940 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e932:	6802      	ldr	r2, [r0, #0]
 800e934:	6853      	ldr	r3, [r2, #4]
 800e936:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e93a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800e93c:	430b      	orrs	r3, r1
 800e93e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e940:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e942:	f013 0f10 	tst.w	r3, #16
 800e946:	d006      	beq.n	800e956 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e948:	6802      	ldr	r2, [r0, #0]
 800e94a:	6893      	ldr	r3, [r2, #8]
 800e94c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e950:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800e952:	430b      	orrs	r3, r1
 800e954:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e956:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e958:	f013 0f20 	tst.w	r3, #32
 800e95c:	d006      	beq.n	800e96c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e95e:	6802      	ldr	r2, [r0, #0]
 800e960:	6893      	ldr	r3, [r2, #8]
 800e962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e966:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800e968:	430b      	orrs	r3, r1
 800e96a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e96c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e96e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e972:	d00a      	beq.n	800e98a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e974:	6802      	ldr	r2, [r0, #0]
 800e976:	6853      	ldr	r3, [r2, #4]
 800e978:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e97c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800e97e:	430b      	orrs	r3, r1
 800e980:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e982:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e988:	d00b      	beq.n	800e9a2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e98a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800e98c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e990:	d006      	beq.n	800e9a0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e992:	6802      	ldr	r2, [r0, #0]
 800e994:	6853      	ldr	r3, [r2, #4]
 800e996:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800e99a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800e99c:	430b      	orrs	r3, r1
 800e99e:	6053      	str	r3, [r2, #4]
}
 800e9a0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e9a2:	6802      	ldr	r2, [r0, #0]
 800e9a4:	6853      	ldr	r3, [r2, #4]
 800e9a6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800e9aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800e9ac:	430b      	orrs	r3, r1
 800e9ae:	6053      	str	r3, [r2, #4]
 800e9b0:	e7eb      	b.n	800e98a <UART_AdvFeatureConfig+0xa2>

0800e9b2 <UART_WaitOnFlagUntilTimeout>:
{
 800e9b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	460f      	mov	r7, r1
 800e9ba:	4616      	mov	r6, r2
 800e9bc:	4699      	mov	r9, r3
 800e9be:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9c2:	682c      	ldr	r4, [r5, #0]
 800e9c4:	69e4      	ldr	r4, [r4, #28]
 800e9c6:	ea37 0304 	bics.w	r3, r7, r4
 800e9ca:	bf0c      	ite	eq
 800e9cc:	2401      	moveq	r4, #1
 800e9ce:	2400      	movne	r4, #0
 800e9d0:	42b4      	cmp	r4, r6
 800e9d2:	d141      	bne.n	800ea58 <UART_WaitOnFlagUntilTimeout+0xa6>
    if (Timeout != HAL_MAX_DELAY)
 800e9d4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800e9d8:	d0f3      	beq.n	800e9c2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9da:	f7f9 fe61 	bl	80086a0 <HAL_GetTick>
 800e9de:	eba0 0009 	sub.w	r0, r0, r9
 800e9e2:	4540      	cmp	r0, r8
 800e9e4:	d824      	bhi.n	800ea30 <UART_WaitOnFlagUntilTimeout+0x7e>
 800e9e6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ea:	d021      	beq.n	800ea30 <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e9ec:	682b      	ldr	r3, [r5, #0]
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	f012 0f04 	tst.w	r2, #4
 800e9f4:	d0e5      	beq.n	800e9c2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e9f6:	69da      	ldr	r2, [r3, #28]
 800e9f8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800e9fc:	d0e1      	beq.n	800e9c2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea02:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ea04:	682a      	ldr	r2, [r5, #0]
 800ea06:	6813      	ldr	r3, [r2, #0]
 800ea08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea0c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea0e:	682a      	ldr	r2, [r5, #0]
 800ea10:	6893      	ldr	r3, [r2, #8]
 800ea12:	f023 0301 	bic.w	r3, r3, #1
 800ea16:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800ea18:	2320      	movs	r3, #32
 800ea1a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ea1e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ea22:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800ea26:	2300      	movs	r3, #0
 800ea28:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800ea2c:	2003      	movs	r0, #3
 800ea2e:	e014      	b.n	800ea5a <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ea30:	682a      	ldr	r2, [r5, #0]
 800ea32:	6813      	ldr	r3, [r2, #0]
 800ea34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ea38:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea3a:	682a      	ldr	r2, [r5, #0]
 800ea3c:	6893      	ldr	r3, [r2, #8]
 800ea3e:	f023 0301 	bic.w	r3, r3, #1
 800ea42:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800ea44:	2320      	movs	r3, #32
 800ea46:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ea4a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 800ea4e:	2300      	movs	r3, #0
 800ea50:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800ea54:	2003      	movs	r0, #3
 800ea56:	e000      	b.n	800ea5a <UART_WaitOnFlagUntilTimeout+0xa8>
  return HAL_OK;
 800ea58:	2000      	movs	r0, #0
}
 800ea5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ea5e <UART_CheckIdleState>:
{
 800ea5e:	b530      	push	{r4, r5, lr}
 800ea60:	b083      	sub	sp, #12
 800ea62:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea64:	2300      	movs	r3, #0
 800ea66:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800ea6a:	f7f9 fe19 	bl	80086a0 <HAL_GetTick>
 800ea6e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f013 0f08 	tst.w	r3, #8
 800ea78:	d10f      	bne.n	800ea9a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f013 0f04 	tst.w	r3, #4
 800ea82:	d118      	bne.n	800eab6 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800ea84:	2320      	movs	r3, #32
 800ea86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ea8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea8e:	2000      	movs	r0, #0
 800ea90:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800ea92:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800ea96:	b003      	add	sp, #12
 800ea98:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea9e:	9300      	str	r3, [sp, #0]
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f7ff ff82 	bl	800e9b2 <UART_WaitOnFlagUntilTimeout>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d0e3      	beq.n	800ea7a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800eab2:	2003      	movs	r0, #3
 800eab4:	e7ef      	b.n	800ea96 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	462b      	mov	r3, r5
 800eabe:	2200      	movs	r2, #0
 800eac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eac4:	4620      	mov	r0, r4
 800eac6:	f7ff ff74 	bl	800e9b2 <UART_WaitOnFlagUntilTimeout>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d0da      	beq.n	800ea84 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800eace:	2003      	movs	r0, #3
 800ead0:	e7e1      	b.n	800ea96 <UART_CheckIdleState+0x38>

0800ead2 <HAL_UART_Init>:
  if (huart == NULL)
 800ead2:	b378      	cbz	r0, 800eb34 <HAL_UART_Init+0x62>
{
 800ead4:	b510      	push	{r4, lr}
 800ead6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800ead8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800eadc:	b30b      	cbz	r3, 800eb22 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800eade:	2324      	movs	r3, #36	; 0x24
 800eae0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800eae4:	6822      	ldr	r2, [r4, #0]
 800eae6:	6813      	ldr	r3, [r2, #0]
 800eae8:	f023 0301 	bic.w	r3, r3, #1
 800eaec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f7ff fd32 	bl	800e558 <UART_SetConfig>
 800eaf4:	2801      	cmp	r0, #1
 800eaf6:	d013      	beq.n	800eb20 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eaf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eafa:	b9bb      	cbnz	r3, 800eb2c <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	6853      	ldr	r3, [r2, #4]
 800eb00:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800eb04:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb06:	6822      	ldr	r2, [r4, #0]
 800eb08:	6893      	ldr	r3, [r2, #8]
 800eb0a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800eb0e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800eb10:	6822      	ldr	r2, [r4, #0]
 800eb12:	6813      	ldr	r3, [r2, #0]
 800eb14:	f043 0301 	orr.w	r3, r3, #1
 800eb18:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f7ff ff9f 	bl	800ea5e <UART_CheckIdleState>
}
 800eb20:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800eb22:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 800eb26:	f7f9 fb73 	bl	8008210 <HAL_UART_MspInit>
 800eb2a:	e7d8      	b.n	800eade <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f7ff fedb 	bl	800e8e8 <UART_AdvFeatureConfig>
 800eb32:	e7e3      	b.n	800eafc <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800eb34:	2001      	movs	r0, #1
}
 800eb36:	4770      	bx	lr

0800eb38 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 800eb38:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800eb3a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800eb3e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800eb46:	6883      	ldr	r3, [r0, #8]
 800eb48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb4c:	d006      	beq.n	800eb5c <UART_Start_Receive_IT+0x24>
 800eb4e:	b9a3      	cbnz	r3, 800eb7a <UART_Start_Receive_IT+0x42>
 800eb50:	6903      	ldr	r3, [r0, #16]
 800eb52:	b973      	cbnz	r3, 800eb72 <UART_Start_Receive_IT+0x3a>
 800eb54:	23ff      	movs	r3, #255	; 0xff
 800eb56:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800eb5a:	e014      	b.n	800eb86 <UART_Start_Receive_IT+0x4e>
 800eb5c:	6903      	ldr	r3, [r0, #16]
 800eb5e:	b923      	cbnz	r3, 800eb6a <UART_Start_Receive_IT+0x32>
 800eb60:	f240 13ff 	movw	r3, #511	; 0x1ff
 800eb64:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800eb68:	e00d      	b.n	800eb86 <UART_Start_Receive_IT+0x4e>
 800eb6a:	23ff      	movs	r3, #255	; 0xff
 800eb6c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800eb70:	e009      	b.n	800eb86 <UART_Start_Receive_IT+0x4e>
 800eb72:	237f      	movs	r3, #127	; 0x7f
 800eb74:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800eb78:	e005      	b.n	800eb86 <UART_Start_Receive_IT+0x4e>
 800eb7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb7e:	d021      	beq.n	800ebc4 <UART_Start_Receive_IT+0x8c>
 800eb80:	2300      	movs	r3, #0
 800eb82:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb86:	2300      	movs	r3, #0
 800eb88:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb8c:	2322      	movs	r3, #34	; 0x22
 800eb8e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb92:	6801      	ldr	r1, [r0, #0]
 800eb94:	688b      	ldr	r3, [r1, #8]
 800eb96:	f043 0301 	orr.w	r3, r3, #1
 800eb9a:	608b      	str	r3, [r1, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eb9c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800eb9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eba2:	d019      	beq.n	800ebd8 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eba4:	6883      	ldr	r3, [r0, #8]
 800eba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebaa:	d033      	beq.n	800ec14 <UART_Start_Receive_IT+0xdc>
      huart->RxISR = UART_RxISR_8BIT;
 800ebac:	4b1c      	ldr	r3, [pc, #112]	; (800ec20 <UART_Start_Receive_IT+0xe8>)
 800ebae:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ebb6:	6802      	ldr	r2, [r0, #0]
 800ebb8:	6813      	ldr	r3, [r2, #0]
 800ebba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ebbe:	6013      	str	r3, [r2, #0]
}
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800ebc4:	6903      	ldr	r3, [r0, #16]
 800ebc6:	b91b      	cbnz	r3, 800ebd0 <UART_Start_Receive_IT+0x98>
 800ebc8:	237f      	movs	r3, #127	; 0x7f
 800ebca:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800ebce:	e7da      	b.n	800eb86 <UART_Start_Receive_IT+0x4e>
 800ebd0:	233f      	movs	r3, #63	; 0x3f
 800ebd2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800ebd6:	e7d6      	b.n	800eb86 <UART_Start_Receive_IT+0x4e>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ebd8:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d8e1      	bhi.n	800eba4 <UART_Start_Receive_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebe0:	6883      	ldr	r3, [r0, #8]
 800ebe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebe6:	d00f      	beq.n	800ec08 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ebe8:	4b0e      	ldr	r3, [pc, #56]	; (800ec24 <UART_Start_Receive_IT+0xec>)
 800ebea:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800ebec:	2300      	movs	r3, #0
 800ebee:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebf2:	6802      	ldr	r2, [r0, #0]
 800ebf4:	6813      	ldr	r3, [r2, #0]
 800ebf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebfa:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ebfc:	6802      	ldr	r2, [r0, #0]
 800ebfe:	6893      	ldr	r3, [r2, #8]
 800ec00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ec04:	6093      	str	r3, [r2, #8]
 800ec06:	e7db      	b.n	800ebc0 <UART_Start_Receive_IT+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec08:	6903      	ldr	r3, [r0, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1ec      	bne.n	800ebe8 <UART_Start_Receive_IT+0xb0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ec0e:	4b06      	ldr	r3, [pc, #24]	; (800ec28 <UART_Start_Receive_IT+0xf0>)
 800ec10:	6703      	str	r3, [r0, #112]	; 0x70
 800ec12:	e7eb      	b.n	800ebec <UART_Start_Receive_IT+0xb4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec14:	6903      	ldr	r3, [r0, #16]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1c8      	bne.n	800ebac <UART_Start_Receive_IT+0x74>
      huart->RxISR = UART_RxISR_16BIT;
 800ec1a:	4b04      	ldr	r3, [pc, #16]	; (800ec2c <UART_Start_Receive_IT+0xf4>)
 800ec1c:	6703      	str	r3, [r0, #112]	; 0x70
 800ec1e:	e7c7      	b.n	800ebb0 <UART_Start_Receive_IT+0x78>
 800ec20:	0800e185 	.word	0x0800e185
 800ec24:	0800e299 	.word	0x0800e299
 800ec28:	0800e3f5 	.word	0x0800e3f5
 800ec2c:	0800e20f 	.word	0x0800e20f

0800ec30 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec30:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ec34:	2b20      	cmp	r3, #32
 800ec36:	d11a      	bne.n	800ec6e <HAL_UART_Receive_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 800ec38:	b1d9      	cbz	r1, 800ec72 <HAL_UART_Receive_IT+0x42>
 800ec3a:	b1e2      	cbz	r2, 800ec76 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800ec3c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d01a      	beq.n	800ec7a <HAL_UART_Receive_IT+0x4a>
{
 800ec44:	b510      	push	{r4, lr}
    __HAL_LOCK(huart);
 800ec46:	2301      	movs	r3, #1
 800ec48:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec50:	6803      	ldr	r3, [r0, #0]
 800ec52:	4c0b      	ldr	r4, [pc, #44]	; (800ec80 <HAL_UART_Receive_IT+0x50>)
 800ec54:	42a3      	cmp	r3, r4
 800ec56:	d007      	beq.n	800ec68 <HAL_UART_Receive_IT+0x38>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec58:	685c      	ldr	r4, [r3, #4]
 800ec5a:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 800ec5e:	d003      	beq.n	800ec68 <HAL_UART_Receive_IT+0x38>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec60:	681c      	ldr	r4, [r3, #0]
 800ec62:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 800ec66:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800ec68:	f7ff ff66 	bl	800eb38 <UART_Start_Receive_IT>
}
 800ec6c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800ec6e:	2002      	movs	r0, #2
 800ec70:	4770      	bx	lr
      return HAL_ERROR;
 800ec72:	2001      	movs	r0, #1
 800ec74:	4770      	bx	lr
 800ec76:	2001      	movs	r0, #1
 800ec78:	4770      	bx	lr
    __HAL_LOCK(huart);
 800ec7a:	2002      	movs	r0, #2
}
 800ec7c:	4770      	bx	lr
 800ec7e:	bf00      	nop
 800ec80:	40008000 	.word	0x40008000

0800ec84 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec84:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800ec86:	b92b      	cbnz	r3, 800ec94 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec8e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800ec92:	4770      	bx	lr
{
 800ec94:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec96:	6803      	ldr	r3, [r0, #0]
 800ec98:	689a      	ldr	r2, [r3, #8]
 800ec9a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec9e:	6899      	ldr	r1, [r3, #8]
 800eca0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eca2:	4d09      	ldr	r5, [pc, #36]	; (800ecc8 <UARTEx_SetNbDataToProcess+0x44>)
 800eca4:	5c6b      	ldrb	r3, [r5, r1]
 800eca6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eca8:	4c08      	ldr	r4, [pc, #32]	; (800eccc <UARTEx_SetNbDataToProcess+0x48>)
 800ecaa:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecac:	fb93 f3f1 	sdiv	r3, r3, r1
 800ecb0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecb4:	5cab      	ldrb	r3, [r5, r2]
 800ecb6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ecb8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecba:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecbe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800ecc2:	bc30      	pop	{r4, r5}
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	0802f498 	.word	0x0802f498
 800eccc:	0802f490 	.word	0x0802f490

0800ecd0 <HAL_UARTEx_WakeupCallback>:
}
 800ecd0:	4770      	bx	lr

0800ecd2 <HAL_UARTEx_RxFifoFullCallback>:
}
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800ecd4:	4770      	bx	lr

0800ecd6 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800ecd6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d018      	beq.n	800ed10 <HAL_UARTEx_DisableFifoMode+0x3a>
 800ecde:	2301      	movs	r3, #1
 800ece0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800ece4:	2324      	movs	r3, #36	; 0x24
 800ece6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecea:	6803      	ldr	r3, [r0, #0]
 800ecec:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ecee:	6819      	ldr	r1, [r3, #0]
 800ecf0:	f021 0101 	bic.w	r1, r1, #1
 800ecf4:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecf6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecfe:	6801      	ldr	r1, [r0, #0]
 800ed00:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ed02:	2220      	movs	r2, #32
 800ed04:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ed08:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	4770      	bx	lr
  __HAL_LOCK(huart);
 800ed10:	2002      	movs	r0, #2
}
 800ed12:	4770      	bx	lr

0800ed14 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800ed14:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ed16:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d01d      	beq.n	800ed5a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800ed1e:	4604      	mov	r4, r0
 800ed20:	2301      	movs	r3, #1
 800ed22:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800ed26:	2324      	movs	r3, #36	; 0x24
 800ed28:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed2c:	6803      	ldr	r3, [r0, #0]
 800ed2e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	f022 0201 	bic.w	r2, r2, #1
 800ed36:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed38:	6802      	ldr	r2, [r0, #0]
 800ed3a:	6893      	ldr	r3, [r2, #8]
 800ed3c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800ed40:	4319      	orrs	r1, r3
 800ed42:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ed44:	f7ff ff9e 	bl	800ec84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ed4c:	2320      	movs	r3, #32
 800ed4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ed52:	2000      	movs	r0, #0
 800ed54:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800ed58:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ed5a:	2002      	movs	r0, #2
 800ed5c:	e7fc      	b.n	800ed58 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800ed5e <HAL_UARTEx_SetRxFifoThreshold>:
{
 800ed5e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800ed60:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d01d      	beq.n	800eda4 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800ed68:	4604      	mov	r4, r0
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 800ed70:	2324      	movs	r3, #36	; 0x24
 800ed72:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed76:	6803      	ldr	r3, [r0, #0]
 800ed78:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	f022 0201 	bic.w	r2, r2, #1
 800ed80:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed82:	6802      	ldr	r2, [r0, #0]
 800ed84:	6893      	ldr	r3, [r2, #8]
 800ed86:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800ed8a:	4319      	orrs	r1, r3
 800ed8c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ed8e:	f7ff ff79 	bl	800ec84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed92:	6823      	ldr	r3, [r4, #0]
 800ed94:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ed96:	2320      	movs	r3, #32
 800ed98:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800eda4:	2002      	movs	r0, #2
 800eda6:	e7fc      	b.n	800eda2 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800eda8 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eda8:	4b0b      	ldr	r3, [pc, #44]	; (800edd8 <SDMMC_GetCmdError+0x30>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a0b      	ldr	r2, [pc, #44]	; (800eddc <SDMMC_GetCmdError+0x34>)
 800edae:	fba2 2303 	umull	r2, r3, r2, r3
 800edb2:	0a5a      	lsrs	r2, r3, #9
 800edb4:	f241 3388 	movw	r3, #5000	; 0x1388
 800edb8:	fb03 f302 	mul.w	r3, r3, r2

  do
  {
    if (count-- == 0U)
 800edbc:	461a      	mov	r2, r3
 800edbe:	3b01      	subs	r3, #1
 800edc0:	b13a      	cbz	r2, 800edd2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800edc2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800edc4:	f012 0f80 	tst.w	r2, #128	; 0x80
 800edc8:	d0f8      	beq.n	800edbc <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edca:	4b05      	ldr	r3, [pc, #20]	; (800ede0 <SDMMC_GetCmdError+0x38>)
 800edcc:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800edce:	2000      	movs	r0, #0
 800edd0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800edd2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800edd6:	4770      	bx	lr
 800edd8:	2000009c 	.word	0x2000009c
 800eddc:	10624dd3 	.word	0x10624dd3
 800ede0:	002000c5 	.word	0x002000c5

0800ede4 <SDMMC_Init>:
{
 800ede4:	b084      	sub	sp, #16
 800ede6:	b410      	push	{r4}
 800ede8:	ac02      	add	r4, sp, #8
 800edea:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800edee:	460b      	mov	r3, r1
 800edf0:	9a03      	ldr	r2, [sp, #12]
 800edf2:	4313      	orrs	r3, r2
             Init.BusWide             |\
 800edf4:	9a04      	ldr	r2, [sp, #16]
             Init.ClockPowerSave      |\
 800edf6:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800edf8:	9a05      	ldr	r2, [sp, #20]
             Init.BusWide             |\
 800edfa:	4313      	orrs	r3, r2
             Init.ClockDiv
 800edfc:	9a06      	ldr	r2, [sp, #24]
             Init.HardwareFlowControl |\
 800edfe:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ee00:	6841      	ldr	r1, [r0, #4]
 800ee02:	4a04      	ldr	r2, [pc, #16]	; (800ee14 <SDMMC_Init+0x30>)
 800ee04:	400a      	ands	r2, r1
 800ee06:	4313      	orrs	r3, r2
 800ee08:	6043      	str	r3, [r0, #4]
}
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee10:	b004      	add	sp, #16
 800ee12:	4770      	bx	lr
 800ee14:	ffc02c00 	.word	0xffc02c00

0800ee18 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800ee18:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800ee1c:	4770      	bx	lr

0800ee1e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800ee1e:	680b      	ldr	r3, [r1, #0]
 800ee20:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800ee24:	2000      	movs	r0, #0
 800ee26:	4770      	bx	lr

0800ee28 <SDMMC_PowerState_ON>:
{
 800ee28:	b508      	push	{r3, lr}
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ee2a:	6803      	ldr	r3, [r0, #0]
 800ee2c:	f043 0303 	orr.w	r3, r3, #3
 800ee30:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 800ee32:	2002      	movs	r0, #2
 800ee34:	f7f9 fc3a 	bl	80086ac <HAL_Delay>
}
 800ee38:	2000      	movs	r0, #0
 800ee3a:	bd08      	pop	{r3, pc}

0800ee3c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ee3c:	6800      	ldr	r0, [r0, #0]
}
 800ee3e:	f000 0003 	and.w	r0, r0, #3
 800ee42:	4770      	bx	lr

0800ee44 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800ee44:	680b      	ldr	r3, [r1, #0]
 800ee46:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ee48:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800ee4a:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ee4c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800ee4e:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 800ee50:	4313      	orrs	r3, r2
                       Command->CPSM);
 800ee52:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 800ee54:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ee56:	68c1      	ldr	r1, [r0, #12]
 800ee58:	4a02      	ldr	r2, [pc, #8]	; (800ee64 <SDMMC_SendCommand+0x20>)
 800ee5a:	400a      	ands	r2, r1
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	60c3      	str	r3, [r0, #12]
}
 800ee60:	2000      	movs	r0, #0
 800ee62:	4770      	bx	lr
 800ee64:	fffee0c0 	.word	0xfffee0c0

0800ee68 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800ee68:	6900      	ldr	r0, [r0, #16]
}
 800ee6a:	b2c0      	uxtb	r0, r0
 800ee6c:	4770      	bx	lr

0800ee6e <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ee6e:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800ee70:	5840      	ldr	r0, [r0, r1]
}
 800ee72:	4770      	bx	lr

0800ee74 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ee74:	680b      	ldr	r3, [r1, #0]
 800ee76:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800ee78:	684b      	ldr	r3, [r1, #4]
 800ee7a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ee7c:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800ee7e:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ee80:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800ee82:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800ee84:	4313      	orrs	r3, r2
                       Data->DPSM);
 800ee86:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 800ee88:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ee8a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ee8c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ee90:	4313      	orrs	r3, r2
 800ee92:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800ee94:	2000      	movs	r0, #0
 800ee96:	4770      	bx	lr

0800ee98 <SDMMC_CmdGoIdleState>:
{
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eea2:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800eea4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eea6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeae:	a901      	add	r1, sp, #4
 800eeb0:	f7ff ffc8 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f7ff ff77 	bl	800eda8 <SDMMC_GetCmdError>
}
 800eeba:	b006      	add	sp, #24
 800eebc:	bd10      	pop	{r4, pc}
	...

0800eec0 <SDMMC_GetCmdResp1>:
{
 800eec0:	b570      	push	{r4, r5, r6, lr}
 800eec2:	4605      	mov	r5, r0
 800eec4:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800eec6:	4b51      	ldr	r3, [pc, #324]	; (800f00c <SDMMC_GetCmdResp1+0x14c>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	4951      	ldr	r1, [pc, #324]	; (800f010 <SDMMC_GetCmdResp1+0x150>)
 800eecc:	fba1 1303 	umull	r1, r3, r1, r3
 800eed0:	0a5b      	lsrs	r3, r3, #9
 800eed2:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800eed6:	4613      	mov	r3, r2
 800eed8:	3a01      	subs	r2, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d05e      	beq.n	800ef9c <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800eede:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800eee0:	4b4c      	ldr	r3, [pc, #304]	; (800f014 <SDMMC_GetCmdResp1+0x154>)
 800eee2:	4023      	ands	r3, r4
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d0f6      	beq.n	800eed6 <SDMMC_GetCmdResp1+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800eee8:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800eeec:	d1f3      	bne.n	800eed6 <SDMMC_GetCmdResp1+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eeee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800eef0:	f013 0f04 	tst.w	r3, #4
 800eef4:	d106      	bne.n	800ef04 <SDMMC_GetCmdResp1+0x44>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eef6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800eef8:	f013 0f01 	tst.w	r3, #1
 800eefc:	d005      	beq.n	800ef0a <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eefe:	2001      	movs	r0, #1
 800ef00:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef02:	e04d      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef04:	2004      	movs	r0, #4
 800ef06:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef08:	e04a      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef0a:	4b43      	ldr	r3, [pc, #268]	; (800f018 <SDMMC_GetCmdResp1+0x158>)
 800ef0c:	63ab      	str	r3, [r5, #56]	; 0x38
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f7ff ffaa 	bl	800ee68 <SDMMC_GetCommandResponse>
 800ef14:	42b0      	cmp	r0, r6
 800ef16:	d001      	beq.n	800ef1c <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef18:	2001      	movs	r0, #1
 800ef1a:	e041      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f7ff ffa5 	bl	800ee6e <SDMMC_GetResponse>
 800ef24:	4603      	mov	r3, r0
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ef26:	483d      	ldr	r0, [pc, #244]	; (800f01c <SDMMC_GetCmdResp1+0x15c>)
 800ef28:	4018      	ands	r0, r3
 800ef2a:	b3c8      	cbz	r0, 800efa0 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	db38      	blt.n	800efa2 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ef30:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ef34:	d138      	bne.n	800efa8 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ef36:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800ef3a:	d137      	bne.n	800efac <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ef3c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800ef40:	d136      	bne.n	800efb0 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ef42:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800ef46:	d136      	bne.n	800efb6 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ef48:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800ef4c:	d136      	bne.n	800efbc <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ef4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800ef52:	d136      	bne.n	800efc2 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ef54:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800ef58:	d136      	bne.n	800efc8 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ef5a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ef5e:	d136      	bne.n	800efce <SDMMC_GetCmdResp1+0x10e>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ef60:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800ef64:	d136      	bne.n	800efd4 <SDMMC_GetCmdResp1+0x114>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ef66:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ef6a:	d136      	bne.n	800efda <SDMMC_GetCmdResp1+0x11a>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ef6c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800ef70:	d136      	bne.n	800efe0 <SDMMC_GetCmdResp1+0x120>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ef72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ef76:	d136      	bne.n	800efe6 <SDMMC_GetCmdResp1+0x126>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ef78:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ef7c:	d136      	bne.n	800efec <SDMMC_GetCmdResp1+0x12c>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ef7e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800ef82:	d136      	bne.n	800eff2 <SDMMC_GetCmdResp1+0x132>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ef84:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800ef88:	d136      	bne.n	800eff8 <SDMMC_GetCmdResp1+0x138>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ef8a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800ef8e:	d136      	bne.n	800effe <SDMMC_GetCmdResp1+0x13e>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ef90:	f013 0f08 	tst.w	r3, #8
 800ef94:	d036      	beq.n	800f004 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ef96:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ef9a:	e001      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800ef9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800efa2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800efa6:	e7fb      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800efa8:	2040      	movs	r0, #64	; 0x40
 800efaa:	e7f9      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800efac:	2080      	movs	r0, #128	; 0x80
 800efae:	e7f7      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800efb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 800efb4:	e7f4      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800efb6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800efba:	e7f1      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800efbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800efc0:	e7ee      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800efc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800efc6:	e7eb      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800efc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800efcc:	e7e8      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800efce:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800efd2:	e7e5      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800efd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800efd8:	e7e2      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800efda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800efde:	e7df      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800efe0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800efe4:	e7dc      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800efe6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800efea:	e7d9      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800efec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800eff0:	e7d6      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eff2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800eff6:	e7d3      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eff8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800effc:	e7d0      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800effe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800f002:	e7cd      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f004:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f008:	e7ca      	b.n	800efa0 <SDMMC_GetCmdResp1+0xe0>
 800f00a:	bf00      	nop
 800f00c:	2000009c 	.word	0x2000009c
 800f010:	10624dd3 	.word	0x10624dd3
 800f014:	00200045 	.word	0x00200045
 800f018:	002000c5 	.word	0x002000c5
 800f01c:	fdffe008 	.word	0xfdffe008

0800f020 <SDMMC_CmdBlockLength>:
{
 800f020:	b530      	push	{r4, r5, lr}
 800f022:	b087      	sub	sp, #28
 800f024:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f026:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f028:	2510      	movs	r5, #16
 800f02a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f030:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f032:	2300      	movs	r3, #0
 800f034:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f03a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f03c:	a901      	add	r1, sp, #4
 800f03e:	f7ff ff01 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f042:	f241 3288 	movw	r2, #5000	; 0x1388
 800f046:	4629      	mov	r1, r5
 800f048:	4620      	mov	r0, r4
 800f04a:	f7ff ff39 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f04e:	b007      	add	sp, #28
 800f050:	bd30      	pop	{r4, r5, pc}

0800f052 <SDMMC_CmdReadSingleBlock>:
{
 800f052:	b530      	push	{r4, r5, lr}
 800f054:	b087      	sub	sp, #28
 800f056:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f058:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f05a:	2511      	movs	r5, #17
 800f05c:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f05e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f062:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f064:	2300      	movs	r3, #0
 800f066:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f06c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f06e:	a901      	add	r1, sp, #4
 800f070:	f7ff fee8 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f074:	f241 3288 	movw	r2, #5000	; 0x1388
 800f078:	4629      	mov	r1, r5
 800f07a:	4620      	mov	r0, r4
 800f07c:	f7ff ff20 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f080:	b007      	add	sp, #28
 800f082:	bd30      	pop	{r4, r5, pc}

0800f084 <SDMMC_CmdReadMultiBlock>:
{
 800f084:	b530      	push	{r4, r5, lr}
 800f086:	b087      	sub	sp, #28
 800f088:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f08a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f08c:	2512      	movs	r5, #18
 800f08e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f090:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f094:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f096:	2300      	movs	r3, #0
 800f098:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f09a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f09e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0a0:	a901      	add	r1, sp, #4
 800f0a2:	f7ff fecf 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f7ff ff07 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f0b2:	b007      	add	sp, #28
 800f0b4:	bd30      	pop	{r4, r5, pc}

0800f0b6 <SDMMC_CmdWriteSingleBlock>:
{
 800f0b6:	b530      	push	{r4, r5, lr}
 800f0b8:	b087      	sub	sp, #28
 800f0ba:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f0bc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f0be:	2518      	movs	r5, #24
 800f0c0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0c6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0d0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0d2:	a901      	add	r1, sp, #4
 800f0d4:	f7ff feb6 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0dc:	4629      	mov	r1, r5
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f7ff feee 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f0e4:	b007      	add	sp, #28
 800f0e6:	bd30      	pop	{r4, r5, pc}

0800f0e8 <SDMMC_CmdWriteMultiBlock>:
{
 800f0e8:	b530      	push	{r4, r5, lr}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f0ee:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f0f0:	2519      	movs	r5, #25
 800f0f2:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0f8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f102:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f104:	a901      	add	r1, sp, #4
 800f106:	f7ff fe9d 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f10a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f10e:	4629      	mov	r1, r5
 800f110:	4620      	mov	r0, r4
 800f112:	f7ff fed5 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f116:	b007      	add	sp, #28
 800f118:	bd30      	pop	{r4, r5, pc}
	...

0800f11c <SDMMC_CmdStopTransfer>:
{
 800f11c:	b530      	push	{r4, r5, lr}
 800f11e:	b087      	sub	sp, #28
 800f120:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800f122:	2300      	movs	r3, #0
 800f124:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f126:	250c      	movs	r5, #12
 800f128:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f12a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f12e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f130:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f136:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800f138:	68c3      	ldr	r3, [r0, #12]
 800f13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f13e:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800f140:	68c3      	ldr	r3, [r0, #12]
 800f142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f146:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f148:	a901      	add	r1, sp, #4
 800f14a:	f7ff fe7b 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f14e:	4a05      	ldr	r2, [pc, #20]	; (800f164 <SDMMC_CmdStopTransfer+0x48>)
 800f150:	4629      	mov	r1, r5
 800f152:	4620      	mov	r0, r4
 800f154:	f7ff feb4 	bl	800eec0 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800f158:	68e3      	ldr	r3, [r4, #12]
 800f15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f15e:	60e3      	str	r3, [r4, #12]
}
 800f160:	b007      	add	sp, #28
 800f162:	bd30      	pop	{r4, r5, pc}
 800f164:	05f5e100 	.word	0x05f5e100

0800f168 <SDMMC_CmdSelDesel>:
{
 800f168:	b530      	push	{r4, r5, lr}
 800f16a:	b087      	sub	sp, #28
 800f16c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f16e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f170:	2507      	movs	r5, #7
 800f172:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f174:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f178:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f17a:	2300      	movs	r3, #0
 800f17c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f17e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f182:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f184:	a901      	add	r1, sp, #4
 800f186:	f7ff fe5d 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f18a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f18e:	4629      	mov	r1, r5
 800f190:	4620      	mov	r0, r4
 800f192:	f7ff fe95 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f196:	b007      	add	sp, #28
 800f198:	bd30      	pop	{r4, r5, pc}

0800f19a <SDMMC_CmdAppCommand>:
{
 800f19a:	b530      	push	{r4, r5, lr}
 800f19c:	b087      	sub	sp, #28
 800f19e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f1a0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f1a2:	2537      	movs	r5, #55	; 0x37
 800f1a4:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1aa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1b4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1b6:	a901      	add	r1, sp, #4
 800f1b8:	f7ff fe44 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f7ff fe7c 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f1c8:	b007      	add	sp, #28
 800f1ca:	bd30      	pop	{r4, r5, pc}

0800f1cc <SDMMC_CmdBusWidth>:
{
 800f1cc:	b530      	push	{r4, r5, lr}
 800f1ce:	b087      	sub	sp, #28
 800f1d0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f1d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f1d4:	2506      	movs	r5, #6
 800f1d6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1dc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1e6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1e8:	a901      	add	r1, sp, #4
 800f1ea:	f7ff fe2b 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f1ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f7ff fe63 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f1fa:	b007      	add	sp, #28
 800f1fc:	bd30      	pop	{r4, r5, pc}

0800f1fe <SDMMC_CmdSendSCR>:
{
 800f1fe:	b530      	push	{r4, r5, lr}
 800f200:	b087      	sub	sp, #28
 800f202:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800f204:	2300      	movs	r3, #0
 800f206:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f208:	2533      	movs	r5, #51	; 0x33
 800f20a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f20c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f210:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f212:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f218:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f21a:	a901      	add	r1, sp, #4
 800f21c:	f7ff fe12 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f220:	f241 3288 	movw	r2, #5000	; 0x1388
 800f224:	4629      	mov	r1, r5
 800f226:	4620      	mov	r0, r4
 800f228:	f7ff fe4a 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f22c:	b007      	add	sp, #28
 800f22e:	bd30      	pop	{r4, r5, pc}

0800f230 <SDMMC_CmdSendStatus>:
{
 800f230:	b530      	push	{r4, r5, lr}
 800f232:	b087      	sub	sp, #28
 800f234:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800f236:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f238:	250d      	movs	r5, #13
 800f23a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f23c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f240:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f242:	2300      	movs	r3, #0
 800f244:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f24a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f24c:	a901      	add	r1, sp, #4
 800f24e:	f7ff fdf9 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f252:	f241 3288 	movw	r2, #5000	; 0x1388
 800f256:	4629      	mov	r1, r5
 800f258:	4620      	mov	r0, r4
 800f25a:	f7ff fe31 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f25e:	b007      	add	sp, #28
 800f260:	bd30      	pop	{r4, r5, pc}

0800f262 <SDMMC_CmdStatusRegister>:
{
 800f262:	b530      	push	{r4, r5, lr}
 800f264:	b087      	sub	sp, #28
 800f266:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800f268:	2300      	movs	r3, #0
 800f26a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f26c:	250d      	movs	r5, #13
 800f26e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f270:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f274:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f276:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f27c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f27e:	a901      	add	r1, sp, #4
 800f280:	f7ff fde0 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f284:	f241 3288 	movw	r2, #5000	; 0x1388
 800f288:	4629      	mov	r1, r5
 800f28a:	4620      	mov	r0, r4
 800f28c:	f7ff fe18 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f290:	b007      	add	sp, #28
 800f292:	bd30      	pop	{r4, r5, pc}

0800f294 <SDMMC_CmdVoltageSwitch>:
{
 800f294:	b530      	push	{r4, r5, lr}
 800f296:	b087      	sub	sp, #28
 800f298:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 800f29a:	2300      	movs	r3, #0
 800f29c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800f29e:	250b      	movs	r5, #11
 800f2a0:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f2a6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2ae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2b0:	a901      	add	r1, sp, #4
 800f2b2:	f7ff fdc7 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800f2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7ff fdff 	bl	800eec0 <SDMMC_GetCmdResp1>
}
 800f2c2:	b007      	add	sp, #28
 800f2c4:	bd30      	pop	{r4, r5, pc}
	...

0800f2c8 <SDMMC_GetCmdResp2>:
{
 800f2c8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2ca:	4b14      	ldr	r3, [pc, #80]	; (800f31c <SDMMC_GetCmdResp2+0x54>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	4a14      	ldr	r2, [pc, #80]	; (800f320 <SDMMC_GetCmdResp2+0x58>)
 800f2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800f2d4:	0a5a      	lsrs	r2, r3, #9
 800f2d6:	f241 3388 	movw	r3, #5000	; 0x1388
 800f2da:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 800f2de:	461a      	mov	r2, r3
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	b1ba      	cbz	r2, 800f314 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800f2e4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f2e6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f2ea:	d0f8      	beq.n	800f2de <SDMMC_GetCmdResp2+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2ec:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800f2f0:	d1f5      	bne.n	800f2de <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f2f2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f2f4:	f013 0f04 	tst.w	r3, #4
 800f2f8:	d106      	bne.n	800f308 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f2fa:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800f2fc:	f010 0001 	ands.w	r0, r0, #1
 800f300:	d105      	bne.n	800f30e <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f302:	4b08      	ldr	r3, [pc, #32]	; (800f324 <SDMMC_GetCmdResp2+0x5c>)
 800f304:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800f306:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f308:	2004      	movs	r0, #4
 800f30a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f30c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f30e:	2001      	movs	r0, #1
 800f310:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f312:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800f314:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	2000009c 	.word	0x2000009c
 800f320:	10624dd3 	.word	0x10624dd3
 800f324:	002000c5 	.word	0x002000c5

0800f328 <SDMMC_CmdSendCID>:
{
 800f328:	b510      	push	{r4, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800f32e:	2300      	movs	r3, #0
 800f330:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f332:	2202      	movs	r2, #2
 800f334:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f336:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f33a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f33c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f33e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f342:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f344:	a901      	add	r1, sp, #4
 800f346:	f7ff fd7d 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f34a:	4620      	mov	r0, r4
 800f34c:	f7ff ffbc 	bl	800f2c8 <SDMMC_GetCmdResp2>
}
 800f350:	b006      	add	sp, #24
 800f352:	bd10      	pop	{r4, pc}

0800f354 <SDMMC_CmdSendCSD>:
{
 800f354:	b510      	push	{r4, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800f35a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f35c:	2309      	movs	r3, #9
 800f35e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f360:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f364:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f366:	2300      	movs	r3, #0
 800f368:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f36a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f36e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f370:	a901      	add	r1, sp, #4
 800f372:	f7ff fd67 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f376:	4620      	mov	r0, r4
 800f378:	f7ff ffa6 	bl	800f2c8 <SDMMC_GetCmdResp2>
}
 800f37c:	b006      	add	sp, #24
 800f37e:	bd10      	pop	{r4, pc}

0800f380 <SDMMC_GetCmdResp3>:
{
 800f380:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f382:	4b10      	ldr	r3, [pc, #64]	; (800f3c4 <SDMMC_GetCmdResp3+0x44>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a10      	ldr	r2, [pc, #64]	; (800f3c8 <SDMMC_GetCmdResp3+0x48>)
 800f388:	fba2 2303 	umull	r2, r3, r2, r3
 800f38c:	0a5a      	lsrs	r2, r3, #9
 800f38e:	f241 3388 	movw	r3, #5000	; 0x1388
 800f392:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 800f396:	461a      	mov	r2, r3
 800f398:	3b01      	subs	r3, #1
 800f39a:	b182      	cbz	r2, 800f3be <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800f39c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f39e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f3a2:	d0f8      	beq.n	800f396 <SDMMC_GetCmdResp3+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3a4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800f3a8:	d1f5      	bne.n	800f396 <SDMMC_GetCmdResp3+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3aa:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800f3ac:	f010 0004 	ands.w	r0, r0, #4
 800f3b0:	d102      	bne.n	800f3b8 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3b2:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <SDMMC_GetCmdResp3+0x4c>)
 800f3b4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800f3b6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3b8:	2004      	movs	r0, #4
 800f3ba:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3bc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800f3be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f3c2:	4770      	bx	lr
 800f3c4:	2000009c 	.word	0x2000009c
 800f3c8:	10624dd3 	.word	0x10624dd3
 800f3cc:	002000c5 	.word	0x002000c5

0800f3d0 <SDMMC_CmdAppOperCommand>:
{
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800f3d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f3d8:	2329      	movs	r3, #41	; 0x29
 800f3da:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3e0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f3ea:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3ec:	a901      	add	r1, sp, #4
 800f3ee:	f7ff fd29 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f7ff ffc4 	bl	800f380 <SDMMC_GetCmdResp3>
}
 800f3f8:	b006      	add	sp, #24
 800f3fa:	bd10      	pop	{r4, pc}

0800f3fc <SDMMC_GetCmdResp6>:
{
 800f3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3fe:	4605      	mov	r5, r0
 800f400:	460e      	mov	r6, r1
 800f402:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f404:	4b23      	ldr	r3, [pc, #140]	; (800f494 <SDMMC_GetCmdResp6+0x98>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4823      	ldr	r0, [pc, #140]	; (800f498 <SDMMC_GetCmdResp6+0x9c>)
 800f40a:	fba0 2303 	umull	r2, r3, r0, r3
 800f40e:	0a58      	lsrs	r0, r3, #9
 800f410:	f241 3388 	movw	r3, #5000	; 0x1388
 800f414:	fb03 f300 	mul.w	r3, r3, r0
    if (count-- == 0U)
 800f418:	461c      	mov	r4, r3
 800f41a:	3b01      	subs	r3, #1
 800f41c:	b38c      	cbz	r4, 800f482 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800f41e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f420:	f014 0f45 	tst.w	r4, #69	; 0x45
 800f424:	d0f8      	beq.n	800f418 <SDMMC_GetCmdResp6+0x1c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f426:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800f42a:	d1f5      	bne.n	800f418 <SDMMC_GetCmdResp6+0x1c>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f42c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f42e:	f013 0f04 	tst.w	r3, #4
 800f432:	d106      	bne.n	800f442 <SDMMC_GetCmdResp6+0x46>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f434:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f436:	f013 0f01 	tst.w	r3, #1
 800f43a:	d005      	beq.n	800f448 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f43c:	2001      	movs	r0, #1
 800f43e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f440:	e021      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f442:	2004      	movs	r0, #4
 800f444:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f446:	e01e      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f448:	4628      	mov	r0, r5
 800f44a:	f7ff fd0d 	bl	800ee68 <SDMMC_GetCommandResponse>
 800f44e:	42b0      	cmp	r0, r6
 800f450:	d001      	beq.n	800f456 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f452:	2001      	movs	r0, #1
 800f454:	e017      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f456:	4b11      	ldr	r3, [pc, #68]	; (800f49c <SDMMC_GetCmdResp6+0xa0>)
 800f458:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f45a:	2100      	movs	r1, #0
 800f45c:	4628      	mov	r0, r5
 800f45e:	f7ff fd06 	bl	800ee6e <SDMMC_GetResponse>
 800f462:	4603      	mov	r3, r0
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f464:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 800f468:	d008      	beq.n	800f47c <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f46a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800f46e:	d10b      	bne.n	800f488 <SDMMC_GetCmdResp6+0x8c>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f470:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f474:	d00b      	beq.n	800f48e <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f476:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f47a:	e004      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f47c:	0c1b      	lsrs	r3, r3, #16
 800f47e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800f480:	e001      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800f482:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f488:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800f48c:	e7fb      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f48e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f492:	e7f8      	b.n	800f486 <SDMMC_GetCmdResp6+0x8a>
 800f494:	2000009c 	.word	0x2000009c
 800f498:	10624dd3 	.word	0x10624dd3
 800f49c:	002000c5 	.word	0x002000c5

0800f4a0 <SDMMC_CmdSetRelAdd>:
{
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	b086      	sub	sp, #24
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f4ac:	2603      	movs	r6, #3
 800f4ae:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4b4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4bc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4be:	a901      	add	r1, sp, #4
 800f4c0:	f7ff fcc0 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f4c4:	462a      	mov	r2, r5
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f7ff ff97 	bl	800f3fc <SDMMC_GetCmdResp6>
}
 800f4ce:	b006      	add	sp, #24
 800f4d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f4d4 <SDMMC_GetCmdResp7>:
{
 800f4d4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f4d6:	4b16      	ldr	r3, [pc, #88]	; (800f530 <SDMMC_GetCmdResp7+0x5c>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4a16      	ldr	r2, [pc, #88]	; (800f534 <SDMMC_GetCmdResp7+0x60>)
 800f4dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e0:	0a5a      	lsrs	r2, r3, #9
 800f4e2:	f241 3388 	movw	r3, #5000	; 0x1388
 800f4e6:	fb03 f302 	mul.w	r3, r3, r2
    if (count-- == 0U)
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	b1e2      	cbz	r2, 800f52a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800f4f0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f4f2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f4f6:	d0f8      	beq.n	800f4ea <SDMMC_GetCmdResp7+0x16>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4f8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800f4fc:	d1f5      	bne.n	800f4ea <SDMMC_GetCmdResp7+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4fe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f500:	f013 0f04 	tst.w	r3, #4
 800f504:	d10b      	bne.n	800f51e <SDMMC_GetCmdResp7+0x4a>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f506:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f508:	f013 0301 	ands.w	r3, r3, #1
 800f50c:	d10a      	bne.n	800f524 <SDMMC_GetCmdResp7+0x50>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f50e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800f510:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800f514:	d00b      	beq.n	800f52e <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f516:	2240      	movs	r2, #64	; 0x40
 800f518:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800f51a:	4618      	mov	r0, r3
 800f51c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f51e:	2004      	movs	r0, #4
 800f520:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f522:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f524:	2001      	movs	r0, #1
 800f526:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f528:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800f52a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f52e:	4770      	bx	lr
 800f530:	2000009c 	.word	0x2000009c
 800f534:	10624dd3 	.word	0x10624dd3

0800f538 <SDMMC_CmdOperCond>:
{
 800f538:	b510      	push	{r4, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f53e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f542:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f544:	2308      	movs	r3, #8
 800f546:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f54c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f54e:	2300      	movs	r3, #0
 800f550:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f556:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f558:	a901      	add	r1, sp, #4
 800f55a:	f7ff fc73 	bl	800ee44 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f55e:	4620      	mov	r0, r4
 800f560:	f7ff ffb8 	bl	800f4d4 <SDMMC_GetCmdResp7>
}
 800f564:	b006      	add	sp, #24
 800f566:	bd10      	pop	{r4, pc}

0800f568 <USB_SetTurnaroundTime>:

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f568:	2a02      	cmp	r2, #2
 800f56a:	d00a      	beq.n	800f582 <USB_SetTurnaroundTime+0x1a>
      UsbTrd = 0x6U;
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f56c:	2109      	movs	r1, #9
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f56e:	68c2      	ldr	r2, [r0, #12]
 800f570:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800f574:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f576:	68c3      	ldr	r3, [r0, #12]
 800f578:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800f57c:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800f57e:	2000      	movs	r0, #0
 800f580:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f582:	4b23      	ldr	r3, [pc, #140]	; (800f610 <USB_SetTurnaroundTime+0xa8>)
 800f584:	440b      	add	r3, r1
 800f586:	4a23      	ldr	r2, [pc, #140]	; (800f614 <USB_SetTurnaroundTime+0xac>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d92f      	bls.n	800f5ec <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f58c:	4b22      	ldr	r3, [pc, #136]	; (800f618 <USB_SetTurnaroundTime+0xb0>)
 800f58e:	440b      	add	r3, r1
 800f590:	4a22      	ldr	r2, [pc, #136]	; (800f61c <USB_SetTurnaroundTime+0xb4>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d92c      	bls.n	800f5f0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f596:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800f59a:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800f59e:	4a20      	ldr	r2, [pc, #128]	; (800f620 <USB_SetTurnaroundTime+0xb8>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d927      	bls.n	800f5f4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f5a4:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800f5a8:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800f5ac:	4a1d      	ldr	r2, [pc, #116]	; (800f624 <USB_SetTurnaroundTime+0xbc>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d322      	bcc.n	800f5f8 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	; (800f628 <USB_SetTurnaroundTime+0xc0>)
 800f5b4:	440b      	add	r3, r1
 800f5b6:	4a1d      	ldr	r2, [pc, #116]	; (800f62c <USB_SetTurnaroundTime+0xc4>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d91f      	bls.n	800f5fc <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f5bc:	4b1c      	ldr	r3, [pc, #112]	; (800f630 <USB_SetTurnaroundTime+0xc8>)
 800f5be:	440b      	add	r3, r1
 800f5c0:	4a1c      	ldr	r2, [pc, #112]	; (800f634 <USB_SetTurnaroundTime+0xcc>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d31c      	bcc.n	800f600 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f5c6:	4b1c      	ldr	r3, [pc, #112]	; (800f638 <USB_SetTurnaroundTime+0xd0>)
 800f5c8:	440b      	add	r3, r1
 800f5ca:	4a1c      	ldr	r2, [pc, #112]	; (800f63c <USB_SetTurnaroundTime+0xd4>)
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	d319      	bcc.n	800f604 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f5d0:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800f5d4:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800f5d8:	4a19      	ldr	r2, [pc, #100]	; (800f640 <USB_SetTurnaroundTime+0xd8>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d314      	bcc.n	800f608 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f5de:	4b19      	ldr	r3, [pc, #100]	; (800f644 <USB_SetTurnaroundTime+0xdc>)
 800f5e0:	440b      	add	r3, r1
 800f5e2:	4a19      	ldr	r2, [pc, #100]	; (800f648 <USB_SetTurnaroundTime+0xe0>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d211      	bcs.n	800f60c <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800f5e8:	2107      	movs	r1, #7
 800f5ea:	e7c0      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800f5ec:	210f      	movs	r1, #15
 800f5ee:	e7be      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800f5f0:	210e      	movs	r1, #14
 800f5f2:	e7bc      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800f5f4:	210d      	movs	r1, #13
 800f5f6:	e7ba      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800f5f8:	210c      	movs	r1, #12
 800f5fa:	e7b8      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800f5fc:	210b      	movs	r1, #11
 800f5fe:	e7b6      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800f600:	210a      	movs	r1, #10
 800f602:	e7b4      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800f604:	2109      	movs	r1, #9
 800f606:	e7b2      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800f608:	2108      	movs	r1, #8
 800f60a:	e7b0      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800f60c:	2106      	movs	r1, #6
 800f60e:	e7ae      	b.n	800f56e <USB_SetTurnaroundTime+0x6>
 800f610:	ff275340 	.word	0xff275340
 800f614:	000c34ff 	.word	0x000c34ff
 800f618:	ff1b1e40 	.word	0xff1b1e40
 800f61c:	000f423f 	.word	0x000f423f
 800f620:	00124f7f 	.word	0x00124f7f
 800f624:	0013d620 	.word	0x0013d620
 800f628:	fee5b660 	.word	0xfee5b660
 800f62c:	0016e35f 	.word	0x0016e35f
 800f630:	feced300 	.word	0xfeced300
 800f634:	001b7740 	.word	0x001b7740
 800f638:	feb35bc0 	.word	0xfeb35bc0
 800f63c:	002191c0 	.word	0x002191c0
 800f640:	00387520 	.word	0x00387520
 800f644:	fe5954e0 	.word	0xfe5954e0
 800f648:	00419ce0 	.word	0x00419ce0

0800f64c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
  uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f64c:	0189      	lsls	r1, r1, #6
 800f64e:	f041 0120 	orr.w	r1, r1, #32
 800f652:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800f654:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800f656:	3301      	adds	r3, #1
 800f658:	4a05      	ldr	r2, [pc, #20]	; (800f670 <USB_FlushTxFifo+0x24>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d805      	bhi.n	800f66a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f65e:	6902      	ldr	r2, [r0, #16]
 800f660:	f012 0f20 	tst.w	r2, #32
 800f664:	d1f7      	bne.n	800f656 <USB_FlushTxFifo+0xa>

  return HAL_OK;
 800f666:	2000      	movs	r0, #0
 800f668:	4770      	bx	lr
      return HAL_TIMEOUT;
 800f66a:	2003      	movs	r0, #3
}
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	00030d40 	.word	0x00030d40

0800f674 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f674:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800f678:	f003 0306 	and.w	r3, r3, #6

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d005      	beq.n	800f68c <USB_GetDevSpeed+0x18>
 800f680:	2b06      	cmp	r3, #6
 800f682:	d001      	beq.n	800f688 <USB_GetDevSpeed+0x14>
  {
    speed = USBD_FS_SPEED;
  }
  else
  {
    speed = 0xFU;
 800f684:	200f      	movs	r0, #15
  }

  return speed;
}
 800f686:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800f688:	2002      	movs	r0, #2
 800f68a:	4770      	bx	lr
 800f68c:	2002      	movs	r0, #2
 800f68e:	4770      	bx	lr

0800f690 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f690:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800f692:	780c      	ldrb	r4, [r1, #0]

  if (ep->is_in == 1U)
 800f694:	784b      	ldrb	r3, [r1, #1]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d022      	beq.n	800f6e0 <USB_ActivateEndpoint+0x50>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f69a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800f69e:	f004 060f 	and.w	r6, r4, #15
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	40b2      	lsls	r2, r6
 800f6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6aa:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f6ae:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800f6b2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f6b6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f6ba:	d10e      	bne.n	800f6da <USB_ActivateEndpoint+0x4a>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f6bc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f6c0:	688a      	ldr	r2, [r1, #8]
 800f6c2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f6c6:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f6c8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6d6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
}
 800f6da:	2000      	movs	r0, #0
 800f6dc:	bc70      	pop	{r4, r5, r6}
 800f6de:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f6e0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800f6e4:	f004 060f 	and.w	r6, r4, #15
 800f6e8:	40b3      	lsls	r3, r6
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f6f2:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800f6f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f6fa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800f6fe:	d1ec      	bne.n	800f6da <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f700:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800f704:	688a      	ldr	r2, [r1, #8]
 800f706:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f70a:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f70c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f710:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f714:	431c      	orrs	r4, r3
 800f716:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800f71a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800f71e:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
 800f722:	e7da      	b.n	800f6da <USB_ActivateEndpoint+0x4a>

0800f724 <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800f724:	780b      	ldrb	r3, [r1, #0]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f726:	784a      	ldrb	r2, [r1, #1]
 800f728:	2a01      	cmp	r2, #1
 800f72a:	d023      	beq.n	800f774 <USB_EP0StartXfer+0x50>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f72c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800f730:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800f734:	691a      	ldr	r2, [r3, #16]
 800f736:	0cd2      	lsrs	r2, r2, #19
 800f738:	04d2      	lsls	r2, r2, #19
 800f73a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f73c:	691a      	ldr	r2, [r3, #16]
 800f73e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800f742:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800f746:	611a      	str	r2, [r3, #16]

    if (ep->xfer_len > 0U)
 800f748:	694a      	ldr	r2, [r1, #20]
 800f74a:	b10a      	cbz	r2, 800f750 <USB_EP0StartXfer+0x2c>
    {
      ep->xfer_len = ep->maxpacket;
 800f74c:	688a      	ldr	r2, [r1, #8]
 800f74e:	614a      	str	r2, [r1, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f750:	691a      	ldr	r2, [r3, #16]
 800f752:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800f756:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f758:	691a      	ldr	r2, [r3, #16]
 800f75a:	6889      	ldr	r1, [r1, #8]
 800f75c:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800f760:	430a      	orrs	r2, r1
 800f762:	611a      	str	r2, [r3, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f764:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800f768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f76c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800f770:	2000      	movs	r0, #0
 800f772:	4770      	bx	lr
{
 800f774:	b430      	push	{r4, r5}
    if (ep->xfer_len == 0U)
 800f776:	694a      	ldr	r2, [r1, #20]
 800f778:	bb62      	cbnz	r2, 800f7d4 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f77a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800f77e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f782:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800f786:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800f78a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f78e:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f792:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f796:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f79a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f79e:	0ce4      	lsrs	r4, r4, #19
 800f7a0:	04e4      	lsls	r4, r4, #19
 800f7a2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7a6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f7aa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f7ae:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f7b2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800f7b6:	694b      	ldr	r3, [r1, #20]
 800f7b8:	b14b      	cbz	r3, 800f7ce <USB_EP0StartXfer+0xaa>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f7ba:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800f7be:	780a      	ldrb	r2, [r1, #0]
 800f7c0:	f002 010f 	and.w	r1, r2, #15
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	408a      	lsls	r2, r1
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	bc30      	pop	{r4, r5}
 800f7d2:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f7d4:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800f7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7dc:	6914      	ldr	r4, [r2, #16]
 800f7de:	0ce4      	lsrs	r4, r4, #19
 800f7e0:	04e4      	lsls	r4, r4, #19
 800f7e2:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f7e4:	6914      	ldr	r4, [r2, #16]
 800f7e6:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800f7ea:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800f7ee:	6114      	str	r4, [r2, #16]
      if (ep->xfer_len > ep->maxpacket)
 800f7f0:	694d      	ldr	r5, [r1, #20]
 800f7f2:	688c      	ldr	r4, [r1, #8]
 800f7f4:	42a5      	cmp	r5, r4
 800f7f6:	d900      	bls.n	800f7fa <USB_EP0StartXfer+0xd6>
        ep->xfer_len = ep->maxpacket;
 800f7f8:	614c      	str	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7fa:	6914      	ldr	r4, [r2, #16]
 800f7fc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f800:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f802:	6914      	ldr	r4, [r2, #16]
 800f804:	694d      	ldr	r5, [r1, #20]
 800f806:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f80a:	432c      	orrs	r4, r5
 800f80c:	6114      	str	r4, [r2, #16]
 800f80e:	e7ca      	b.n	800f7a6 <USB_EP0StartXfer+0x82>

0800f810 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800f810:	b470      	push	{r4, r5, r6}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pSrc = (uint32_t *)src;
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800f812:	3303      	adds	r3, #3
 800f814:	089e      	lsrs	r6, r3, #2
  for (i = 0U; i < count32b; i++)
 800f816:	2400      	movs	r4, #0
 800f818:	42b4      	cmp	r4, r6
 800f81a:	d208      	bcs.n	800f82e <USB_WritePacket+0x1e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f81c:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800f820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f824:	f851 5b04 	ldr.w	r5, [r1], #4
 800f828:	601d      	str	r5, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800f82a:	3401      	adds	r4, #1
 800f82c:	e7f4      	b.n	800f818 <USB_WritePacket+0x8>
    pSrc++;
  }

  return HAL_OK;
}
 800f82e:	2000      	movs	r0, #0
 800f830:	bc70      	pop	{r4, r5, r6}
 800f832:	4770      	bx	lr

0800f834 <USB_EPStartXfer>:
{
 800f834:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800f836:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800f838:	784a      	ldrb	r2, [r1, #1]
 800f83a:	2a01      	cmp	r2, #1
 800f83c:	d027      	beq.n	800f88e <USB_EPStartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f83e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f842:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800f846:	6914      	ldr	r4, [r2, #16]
 800f848:	0ce4      	lsrs	r4, r4, #19
 800f84a:	04e4      	lsls	r4, r4, #19
 800f84c:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f84e:	6914      	ldr	r4, [r2, #16]
 800f850:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800f854:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800f858:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 800f85a:	694c      	ldr	r4, [r1, #20]
 800f85c:	2c00      	cmp	r4, #0
 800f85e:	f040 8093 	bne.w	800f988 <USB_EPStartXfer+0x154>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f862:	6914      	ldr	r4, [r2, #16]
 800f864:	688d      	ldr	r5, [r1, #8]
 800f866:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f86a:	432c      	orrs	r4, r5
 800f86c:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f86e:	6914      	ldr	r4, [r2, #16]
 800f870:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f874:	6114      	str	r4, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800f876:	78ca      	ldrb	r2, [r1, #3]
 800f878:	2a01      	cmp	r2, #1
 800f87a:	f000 809a 	beq.w	800f9b2 <USB_EPStartXfer+0x17e>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f87e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f882:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f886:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800f88a:	2000      	movs	r0, #0
 800f88c:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 800f88e:	694a      	ldr	r2, [r1, #20]
 800f890:	bb72      	cbnz	r2, 800f8f0 <USB_EPStartXfer+0xbc>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f892:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800f896:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f89a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800f89e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800f8a2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f8a6:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f8aa:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800f8ae:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8b2:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f8b6:	0ce4      	lsrs	r4, r4, #19
 800f8b8:	04e4      	lsls	r4, r4, #19
 800f8ba:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8be:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800f8c2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f8c6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800f8ca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800f8ce:	78ca      	ldrb	r2, [r1, #3]
 800f8d0:	2a01      	cmp	r2, #1
 800f8d2:	d041      	beq.n	800f958 <USB_EPStartXfer+0x124>
      if (ep->xfer_len > 0U)
 800f8d4:	694b      	ldr	r3, [r1, #20]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d0d7      	beq.n	800f88a <USB_EPStartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f8da:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800f8de:	780a      	ldrb	r2, [r1, #0]
 800f8e0:	f002 010f 	and.w	r1, r2, #15
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	408a      	lsls	r2, r1
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800f8ee:	e7cc      	b.n	800f88a <USB_EPStartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f8f0:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800f8f4:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f8f8:	0ce4      	lsrs	r4, r4, #19
 800f8fa:	04e4      	lsls	r4, r4, #19
 800f8fc:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f900:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f904:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800f908:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800f90c:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f910:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800f914:	694c      	ldr	r4, [r1, #20]
 800f916:	688e      	ldr	r6, [r1, #8]
 800f918:	4434      	add	r4, r6
 800f91a:	3c01      	subs	r4, #1
 800f91c:	fbb4 f4f6 	udiv	r4, r4, r6
 800f920:	4e2d      	ldr	r6, [pc, #180]	; (800f9d8 <USB_EPStartXfer+0x1a4>)
 800f922:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800f926:	432c      	orrs	r4, r5
 800f928:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f92c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800f930:	694d      	ldr	r5, [r1, #20]
 800f932:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800f936:	432c      	orrs	r4, r5
 800f938:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f93c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800f940:	78cc      	ldrb	r4, [r1, #3]
 800f942:	2c01      	cmp	r4, #1
 800f944:	d1bb      	bne.n	800f8be <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f946:	6914      	ldr	r4, [r2, #16]
 800f948:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800f94c:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f94e:	6914      	ldr	r4, [r2, #16]
 800f950:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800f954:	6114      	str	r4, [r2, #16]
 800f956:	e7b2      	b.n	800f8be <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f958:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f95c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f960:	d10b      	bne.n	800f97a <USB_EPStartXfer+0x146>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f962:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f966:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800f96a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800f96e:	8a8b      	ldrh	r3, [r1, #20]
 800f970:	780a      	ldrb	r2, [r1, #0]
 800f972:	68c9      	ldr	r1, [r1, #12]
 800f974:	f7ff ff4c 	bl	800f810 <USB_WritePacket>
 800f978:	e787      	b.n	800f88a <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f97a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800f97e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f982:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800f986:	e7f2      	b.n	800f96e <USB_EPStartXfer+0x13a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f988:	688d      	ldr	r5, [r1, #8]
 800f98a:	442c      	add	r4, r5
 800f98c:	3c01      	subs	r4, #1
 800f98e:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f992:	6915      	ldr	r5, [r2, #16]
 800f994:	4e10      	ldr	r6, [pc, #64]	; (800f9d8 <USB_EPStartXfer+0x1a4>)
 800f996:	ea06 46c4 	and.w	r6, r6, r4, lsl #19
 800f99a:	4335      	orrs	r5, r6
 800f99c:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f99e:	6916      	ldr	r6, [r2, #16]
 800f9a0:	688d      	ldr	r5, [r1, #8]
 800f9a2:	b2a4      	uxth	r4, r4
 800f9a4:	fb05 f404 	mul.w	r4, r5, r4
 800f9a8:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800f9ac:	4334      	orrs	r4, r6
 800f9ae:	6114      	str	r4, [r2, #16]
 800f9b0:	e761      	b.n	800f876 <USB_EPStartXfer+0x42>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f9b2:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800f9b6:	f412 7f80 	tst.w	r2, #256	; 0x100
 800f9ba:	d106      	bne.n	800f9ca <USB_EPStartXfer+0x196>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f9bc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f9c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800f9c4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800f9c8:	e759      	b.n	800f87e <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f9ca:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800f9ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f9d2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800f9d6:	e752      	b.n	800f87e <USB_EPStartXfer+0x4a>
 800f9d8:	1ff80000 	.word	0x1ff80000

0800f9dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f9dc:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t *pDest = (uint32_t *)dest;
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f9de:	3203      	adds	r2, #3
 800f9e0:	0894      	lsrs	r4, r2, #2

  for (i = 0U; i < count32b; i++)
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	42a3      	cmp	r3, r4
 800f9e6:	d206      	bcs.n	800f9f6 <USB_ReadPacket+0x1a>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f9e8:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 800f9ec:	6812      	ldr	r2, [r2, #0]
 800f9ee:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	e7f6      	b.n	800f9e4 <USB_ReadPacket+0x8>
    pDest++;
  }

  return ((void *)pDest);
}
 800f9f6:	4608      	mov	r0, r1
 800f9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <USB_EPSetStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800f9fe:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800fa00:	784a      	ldrb	r2, [r1, #1]
 800fa02:	2a01      	cmp	r2, #1
 800fa04:	d014      	beq.n	800fa30 <USB_EPSetStall+0x32>
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fa06:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800fa0a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800fa0e:	2a00      	cmp	r2, #0
 800fa10:	db06      	blt.n	800fa20 <USB_EPSetStall+0x22>
 800fa12:	b12b      	cbz	r3, 800fa20 <USB_EPSetStall+0x22>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fa14:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fa18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa1c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fa20:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fa24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa28:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }

  return HAL_OK;
}
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fa30:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800fa34:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	db06      	blt.n	800fa4a <USB_EPSetStall+0x4c>
 800fa3c:	b12b      	cbz	r3, 800fa4a <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fa3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fa42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fa46:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fa4a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fa4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fa52:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800fa56:	e7e9      	b.n	800fa2c <USB_EPSetStall+0x2e>

0800fa58 <USB_EPClearStall>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t epnum = (uint32_t)ep->num;
 800fa58:	780b      	ldrb	r3, [r1, #0]

  if (ep->is_in == 1U)
 800fa5a:	784a      	ldrb	r2, [r1, #1]
 800fa5c:	2a01      	cmp	r2, #1
 800fa5e:	d00e      	beq.n	800fa7e <USB_EPClearStall+0x26>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fa60:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800fa64:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fa68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa6c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa70:	78cb      	ldrb	r3, [r1, #3]
 800fa72:	3b02      	subs	r3, #2
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d915      	bls.n	800faa6 <USB_EPClearStall+0x4e>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }
  }
  return HAL_OK;
}
 800fa7a:	2000      	movs	r0, #0
 800fa7c:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fa7e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800fa82:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fa86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa8a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fa8e:	78cb      	ldrb	r3, [r1, #3]
 800fa90:	3b02      	subs	r3, #2
 800fa92:	b2db      	uxtb	r3, r3
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d8f0      	bhi.n	800fa7a <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fa98:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fa9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800faa0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800faa4:	e7e9      	b.n	800fa7a <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800faa6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800faaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800faae:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800fab2:	e7e2      	b.n	800fa7a <USB_EPClearStall+0x22>

0800fab4 <USB_SetDevAddress>:
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fab4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800fab8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fabc:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fac0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800fac4:	0109      	lsls	r1, r1, #4
 800fac6:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800faca:	4319      	orrs	r1, r3
 800facc:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800

  return HAL_OK;
}
 800fad0:	2000      	movs	r0, #0
 800fad2:	4770      	bx	lr

0800fad4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fad4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800fad6:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 800fad8:	4010      	ands	r0, r2
 800fada:	4770      	bx	lr

0800fadc <USB_ReadDevAllOutEpInterrupt>:
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fadc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800fae0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fae4:	69c0      	ldr	r0, [r0, #28]
 800fae6:	4018      	ands	r0, r3

  return ((tmpreg & 0xffff0000U) >> 16);
}
 800fae8:	0c00      	lsrs	r0, r0, #16
 800faea:	4770      	bx	lr

0800faec <USB_ReadDevAllInEpInterrupt>:
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800faec:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800faf0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800faf4:	69c0      	ldr	r0, [r0, #28]
 800faf6:	4018      	ands	r0, r3

  return ((tmpreg & 0xFFFFU));
}
 800faf8:	b280      	uxth	r0, r0
 800fafa:	4770      	bx	lr

0800fafc <USB_ReadDevOutEPInterrupt>:
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fafc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800fb00:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fb04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fb08:	6940      	ldr	r0, [r0, #20]

  return tmpreg;
}
 800fb0a:	4010      	ands	r0, r2
 800fb0c:	4770      	bx	lr

0800fb0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fb0e:	b410      	push	{r4}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fb10:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fb14:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fb18:	f001 020f 	and.w	r2, r1, #15
 800fb1c:	40d3      	lsrs	r3, r2
 800fb1e:	01db      	lsls	r3, r3, #7
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fb24:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800fb28:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800fb2c:	6880      	ldr	r0, [r0, #8]

  return tmpreg;
}
 800fb2e:	4018      	ands	r0, r3
 800fb30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 800fb36:	6940      	ldr	r0, [r0, #20]
}
 800fb38:	f000 0001 	and.w	r0, r0, #1
 800fb3c:	4770      	bx	lr

0800fb3e <USB_ActivateSetup>:
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fb3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800fb42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fb46:	f023 0307 	bic.w	r3, r3, #7
 800fb4a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fb4e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800fb52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb56:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

  return HAL_OK;
}
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	4770      	bx	lr
	...

0800fb60 <USB_EP0_OutStart>:
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fb60:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fb62:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <USB_EP0_OutStart+0x40>)
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d903      	bls.n	800fb70 <USB_EP0_OutStart+0x10>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fb68:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	db14      	blt.n	800fb9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fb70:	2300      	movs	r3, #0
 800fb72:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb76:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800fb7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb7e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fb82:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800fb86:	f043 0318 	orr.w	r3, r3, #24
 800fb8a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fb8e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800fb92:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fb96:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10

  return HAL_OK;
}
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop
 800fba0:	4f54300a 	.word	0x4f54300a

0800fba4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fba4:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fba6:	4903      	ldr	r1, [pc, #12]	; (800fbb4 <MX_FATFS_Init+0x10>)
 800fba8:	4803      	ldr	r0, [pc, #12]	; (800fbb8 <MX_FATFS_Init+0x14>)
 800fbaa:	f000 fe93 	bl	80108d4 <FATFS_LinkDriver>
 800fbae:	4b03      	ldr	r3, [pc, #12]	; (800fbbc <MX_FATFS_Init+0x18>)
 800fbb0:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fbb2:	bd08      	pop	{r3, pc}
 800fbb4:	2001859c 	.word	0x2001859c
 800fbb8:	0802f4a0 	.word	0x0802f4a0
 800fbbc:	20018598 	.word	0x20018598

0800fbc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fbc0:	b508      	push	{r3, lr}
 800fbc2:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fbc4:	460a      	mov	r2, r1
 800fbc6:	4601      	mov	r1, r0
 800fbc8:	4802      	ldr	r0, [pc, #8]	; (800fbd4 <BSP_SD_ReadBlocks_DMA+0x14>)
 800fbca:	f7fd f833 	bl	800cc34 <HAL_SD_ReadBlocks_DMA>
 800fbce:	b100      	cbz	r0, 800fbd2 <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 800fbd0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800fbd2:	bd08      	pop	{r3, pc}
 800fbd4:	20017fe4 	.word	0x20017fe4

0800fbd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fbd8:	b508      	push	{r3, lr}
 800fbda:	4613      	mov	r3, r2
  uint8_t sd_state = MSD_OK;

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fbdc:	460a      	mov	r2, r1
 800fbde:	4601      	mov	r1, r0
 800fbe0:	4802      	ldr	r0, [pc, #8]	; (800fbec <BSP_SD_WriteBlocks_DMA+0x14>)
 800fbe2:	f7fd f897 	bl	800cd14 <HAL_SD_WriteBlocks_DMA>
 800fbe6:	b100      	cbz	r0, 800fbea <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 800fbe8:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800fbea:	bd08      	pop	{r3, pc}
 800fbec:	20017fe4 	.word	0x20017fe4

0800fbf0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fbf0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fbf2:	4803      	ldr	r0, [pc, #12]	; (800fc00 <BSP_SD_GetCardState+0x10>)
 800fbf4:	f7fd fcf0 	bl	800d5d8 <HAL_SD_GetCardState>
}
 800fbf8:	3804      	subs	r0, #4
 800fbfa:	bf18      	it	ne
 800fbfc:	2001      	movne	r0, #1
 800fbfe:	bd08      	pop	{r3, pc}
 800fc00:	20017fe4 	.word	0x20017fe4

0800fc04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800fc04:	b508      	push	{r3, lr}
 800fc06:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fc08:	4801      	ldr	r0, [pc, #4]	; (800fc10 <BSP_SD_GetCardInfo+0xc>)
 800fc0a:	f7fd fc27 	bl	800d45c <HAL_SD_GetCardInfo>
}
 800fc0e:	bd08      	pop	{r3, pc}
 800fc10:	20017fe4 	.word	0x20017fe4

0800fc14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc14:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800fc16:	f000 f93d 	bl	800fe94 <BSP_SD_WriteCpltCallback>
}
 800fc1a:	bd08      	pop	{r3, pc}

0800fc1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc1c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800fc1e:	f000 f94b 	bl	800feb8 <BSP_SD_ReadCpltCallback>
}
 800fc22:	bd08      	pop	{r3, pc}

0800fc24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fc24:	b500      	push	{lr}
 800fc26:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fc2e:	f000 f823 	bl	800fc78 <BSP_PlatformIsDetected>
 800fc32:	b910      	cbnz	r0, 800fc3a <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 800fc34:	2300      	movs	r3, #0
 800fc36:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800fc3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800fc3e:	b003      	add	sp, #12
 800fc40:	f85d fb04 	ldr.w	pc, [sp], #4

0800fc44 <BSP_SD_Init>:
{
 800fc44:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fc46:	f7ff ffed 	bl	800fc24 <BSP_SD_IsDetected>
 800fc4a:	2801      	cmp	r0, #1
 800fc4c:	d002      	beq.n	800fc54 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800fc4e:	2502      	movs	r5, #2
}
 800fc50:	4628      	mov	r0, r5
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 800fc56:	4807      	ldr	r0, [pc, #28]	; (800fc74 <BSP_SD_Init+0x30>)
 800fc58:	f7fd fccf 	bl	800d5fa <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d1f6      	bne.n	800fc50 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fc62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fc66:	4803      	ldr	r0, [pc, #12]	; (800fc74 <BSP_SD_Init+0x30>)
 800fc68:	f7fd fc0a 	bl	800d480 <HAL_SD_ConfigWideBusOperation>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d0ef      	beq.n	800fc50 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800fc70:	4625      	mov	r5, r4
 800fc72:	e7ed      	b.n	800fc50 <BSP_SD_Init+0xc>
 800fc74:	20017fe4 	.word	0x20017fe4

0800fc78 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fc78:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	4803      	ldr	r0, [pc, #12]	; (800fc8c <BSP_PlatformIsDetected+0x14>)
 800fc7e:	f7f9 f953 	bl	8008f28 <HAL_GPIO_ReadPin>
 800fc82:	b908      	cbnz	r0, 800fc88 <BSP_PlatformIsDetected+0x10>
    uint8_t status = SD_PRESENT;
 800fc84:	2001      	movs	r0, #1
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800fc86:	bd08      	pop	{r3, pc}
        status = SD_NOT_PRESENT;
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e7fc      	b.n	800fc86 <BSP_PlatformIsDetected+0xe>
 800fc8c:	48000c00 	.word	0x48000c00

0800fc90 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc90:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800fc92:	4b07      	ldr	r3, [pc, #28]	; (800fcb0 <SD_CheckStatus+0x20>)
 800fc94:	2201      	movs	r2, #1
 800fc96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fc98:	f7ff ffaa 	bl	800fbf0 <BSP_SD_GetCardState>
 800fc9c:	b920      	cbnz	r0, 800fca8 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800fc9e:	4a04      	ldr	r2, [pc, #16]	; (800fcb0 <SD_CheckStatus+0x20>)
 800fca0:	7813      	ldrb	r3, [r2, #0]
 800fca2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fca6:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800fca8:	4b01      	ldr	r3, [pc, #4]	; (800fcb0 <SD_CheckStatus+0x20>)
 800fcaa:	7818      	ldrb	r0, [r3, #0]
}
 800fcac:	bd08      	pop	{r3, pc}
 800fcae:	bf00      	nop
 800fcb0:	200000a8 	.word	0x200000a8

0800fcb4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fcb4:	b510      	push	{r4, lr}
 800fcb6:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 800fcb8:	4b16      	ldr	r3, [pc, #88]	; (800fd14 <SD_initialize+0x60>)
 800fcba:	2201      	movs	r2, #1
 800fcbc:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800fcbe:	f000 fe2f 	bl	8010920 <osKernelGetState>
 800fcc2:	2802      	cmp	r0, #2
 800fcc4:	d002      	beq.n	800fccc <SD_initialize+0x18>
        Stat |= STA_NOINIT;
      }
    }
  }

  return Stat;
 800fcc6:	4b13      	ldr	r3, [pc, #76]	; (800fd14 <SD_initialize+0x60>)
 800fcc8:	7818      	ldrb	r0, [r3, #0]
}
 800fcca:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 800fccc:	f7ff ffba 	bl	800fc44 <BSP_SD_Init>
 800fcd0:	b188      	cbz	r0, 800fcf6 <SD_initialize+0x42>
    if (Stat != STA_NOINIT)
 800fcd2:	4b10      	ldr	r3, [pc, #64]	; (800fd14 <SD_initialize+0x60>)
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d0f4      	beq.n	800fcc6 <SD_initialize+0x12>
      if (SDQueueID == NULL)
 800fcdc:	4b0e      	ldr	r3, [pc, #56]	; (800fd18 <SD_initialize+0x64>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	b17b      	cbz	r3, 800fd02 <SD_initialize+0x4e>
      if (SDQueueID == NULL)
 800fce2:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <SD_initialize+0x64>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1ed      	bne.n	800fcc6 <SD_initialize+0x12>
        Stat |= STA_NOINIT;
 800fcea:	4a0a      	ldr	r2, [pc, #40]	; (800fd14 <SD_initialize+0x60>)
 800fcec:	7813      	ldrb	r3, [r2, #0]
 800fcee:	f043 0301 	orr.w	r3, r3, #1
 800fcf2:	7013      	strb	r3, [r2, #0]
 800fcf4:	e7e7      	b.n	800fcc6 <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f7ff ffca 	bl	800fc90 <SD_CheckStatus>
 800fcfc:	4b05      	ldr	r3, [pc, #20]	; (800fd14 <SD_initialize+0x60>)
 800fcfe:	7018      	strb	r0, [r3, #0]
 800fd00:	e7e7      	b.n	800fcd2 <SD_initialize+0x1e>
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800fd02:	2200      	movs	r2, #0
 800fd04:	2102      	movs	r1, #2
 800fd06:	200a      	movs	r0, #10
 800fd08:	f000 feaf 	bl	8010a6a <osMessageQueueNew>
 800fd0c:	4b02      	ldr	r3, [pc, #8]	; (800fd18 <SD_initialize+0x64>)
 800fd0e:	6018      	str	r0, [r3, #0]
 800fd10:	e7e7      	b.n	800fce2 <SD_initialize+0x2e>
 800fd12:	bf00      	nop
 800fd14:	200000a8 	.word	0x200000a8
 800fd18:	20001890 	.word	0x20001890

0800fd1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fd1c:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800fd1e:	f7ff ffb7 	bl	800fc90 <SD_CheckStatus>
}
 800fd22:	bd08      	pop	{r3, pc}

0800fd24 <SD_CheckStatusWithTimeout>:
{
 800fd24:	b538      	push	{r3, r4, r5, lr}
 800fd26:	4605      	mov	r5, r0
  timer = osKernelGetTickCount();
 800fd28:	f000 fe28 	bl	801097c <osKernelGetTickCount>
 800fd2c:	4604      	mov	r4, r0
  while( osKernelGetTickCount() - timer < timeout)
 800fd2e:	f000 fe25 	bl	801097c <osKernelGetTickCount>
 800fd32:	1b00      	subs	r0, r0, r4
 800fd34:	42a8      	cmp	r0, r5
 800fd36:	d205      	bcs.n	800fd44 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd38:	f7ff ff5a 	bl	800fbf0 <BSP_SD_GetCardState>
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	d1f6      	bne.n	800fd2e <SD_CheckStatusWithTimeout+0xa>
      return 0;
 800fd40:	2000      	movs	r0, #0
 800fd42:	e001      	b.n	800fd48 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 800fd44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800fd48:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fd4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fd4c:	b570      	push	{r4, r5, r6, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	460c      	mov	r4, r1
 800fd52:	4615      	mov	r5, r2
 800fd54:	461e      	mov	r6, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd56:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd5a:	f7ff ffe3 	bl	800fd24 <SD_CheckStatusWithTimeout>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	db28      	blt.n	800fdb4 <SD_read+0x68>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800fd62:	4632      	mov	r2, r6
 800fd64:	4629      	mov	r1, r5
 800fd66:	4620      	mov	r0, r4
 800fd68:	f7ff ff2a 	bl	800fbc0 <BSP_SD_ReadBlocks_DMA>

    if (ret == MSD_OK) {
 800fd6c:	b108      	cbz	r0, 800fd72 <SD_read+0x26>
  DRESULT res = RES_ERROR;
 800fd6e:	2001      	movs	r0, #1
 800fd70:	e021      	b.n	800fdb6 <SD_read+0x6a>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fd72:	f247 5330 	movw	r3, #30000	; 0x7530
 800fd76:	2200      	movs	r2, #0
 800fd78:	f10d 0106 	add.w	r1, sp, #6
 800fd7c:	4810      	ldr	r0, [pc, #64]	; (800fdc0 <SD_read+0x74>)
 800fd7e:	6800      	ldr	r0, [r0, #0]
 800fd80:	f000 ff00 	bl	8010b84 <osMessageQueueGet>
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800fd84:	b9c8      	cbnz	r0, 800fdba <SD_read+0x6e>
 800fd86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d001      	beq.n	800fd92 <SD_read+0x46>
  DRESULT res = RES_ERROR;
 800fd8e:	2001      	movs	r0, #1
 800fd90:	e011      	b.n	800fdb6 <SD_read+0x6a>
          {
            timer = osKernelGetTickCount();
 800fd92:	f000 fdf3 	bl	801097c <osKernelGetTickCount>
 800fd96:	4604      	mov	r4, r0
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800fd98:	f000 fdf0 	bl	801097c <osKernelGetTickCount>
 800fd9c:	1b00      	subs	r0, r0, r4
 800fd9e:	f247 532f 	movw	r3, #29999	; 0x752f
 800fda2:	4298      	cmp	r0, r3
 800fda4:	d804      	bhi.n	800fdb0 <SD_read+0x64>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fda6:	f7ff ff23 	bl	800fbf0 <BSP_SD_GetCardState>
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d1f4      	bne.n	800fd98 <SD_read+0x4c>
 800fdae:	e002      	b.n	800fdb6 <SD_read+0x6a>
  DRESULT res = RES_ERROR;
 800fdb0:	2001      	movs	r0, #1
 800fdb2:	e000      	b.n	800fdb6 <SD_read+0x6a>
    return res;
 800fdb4:	2001      	movs	r0, #1
      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
}
 800fdb6:	b002      	add	sp, #8
 800fdb8:	bd70      	pop	{r4, r5, r6, pc}
  DRESULT res = RES_ERROR;
 800fdba:	2001      	movs	r0, #1
 800fdbc:	e7fb      	b.n	800fdb6 <SD_read+0x6a>
 800fdbe:	bf00      	nop
 800fdc0:	20001890 	.word	0x20001890

0800fdc4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fdc4:	b570      	push	{r4, r5, r6, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	460c      	mov	r4, r1
 800fdca:	4615      	mov	r5, r2
 800fdcc:	461e      	mov	r6, r3

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fdce:	f247 5030 	movw	r0, #30000	; 0x7530
 800fdd2:	f7ff ffa7 	bl	800fd24 <SD_CheckStatusWithTimeout>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	db28      	blt.n	800fe2c <SD_write+0x68>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fdda:	4632      	mov	r2, r6
 800fddc:	4629      	mov	r1, r5
 800fdde:	4620      	mov	r0, r4
 800fde0:	f7ff fefa 	bl	800fbd8 <BSP_SD_WriteBlocks_DMA>
 800fde4:	b108      	cbz	r0, 800fdea <SD_write+0x26>
  DRESULT res = RES_ERROR;
 800fde6:	2001      	movs	r0, #1
 800fde8:	e021      	b.n	800fe2e <SD_write+0x6a>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fdea:	f247 5330 	movw	r3, #30000	; 0x7530
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f10d 0106 	add.w	r1, sp, #6
 800fdf4:	4810      	ldr	r0, [pc, #64]	; (800fe38 <SD_write+0x74>)
 800fdf6:	6800      	ldr	r0, [r0, #0]
 800fdf8:	f000 fec4 	bl	8010b84 <osMessageQueueGet>
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800fdfc:	b9c8      	cbnz	r0, 800fe32 <SD_write+0x6e>
 800fdfe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fe02:	2b02      	cmp	r3, #2
 800fe04:	d001      	beq.n	800fe0a <SD_write+0x46>
  DRESULT res = RES_ERROR;
 800fe06:	2001      	movs	r0, #1
 800fe08:	e011      	b.n	800fe2e <SD_write+0x6a>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800fe0a:	f000 fdb7 	bl	801097c <osKernelGetTickCount>
 800fe0e:	4604      	mov	r4, r0
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fe10:	f000 fdb4 	bl	801097c <osKernelGetTickCount>
 800fe14:	1b00      	subs	r0, r0, r4
 800fe16:	f247 532f 	movw	r3, #29999	; 0x752f
 800fe1a:	4298      	cmp	r0, r3
 800fe1c:	d804      	bhi.n	800fe28 <SD_write+0x64>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe1e:	f7ff fee7 	bl	800fbf0 <BSP_SD_GetCardState>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d1f4      	bne.n	800fe10 <SD_write+0x4c>
 800fe26:	e002      	b.n	800fe2e <SD_write+0x6a>
  DRESULT res = RES_ERROR;
 800fe28:	2001      	movs	r0, #1
 800fe2a:	e000      	b.n	800fe2e <SD_write+0x6a>
    return res;
 800fe2c:	2001      	movs	r0, #1

  }
#endif

  return res;
}
 800fe2e:	b002      	add	sp, #8
 800fe30:	bd70      	pop	{r4, r5, r6, pc}
  DRESULT res = RES_ERROR;
 800fe32:	2001      	movs	r0, #1
 800fe34:	e7fb      	b.n	800fe2e <SD_write+0x6a>
 800fe36:	bf00      	nop
 800fe38:	20001890 	.word	0x20001890

0800fe3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fe3c:	b530      	push	{r4, r5, lr}
 800fe3e:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe40:	4b13      	ldr	r3, [pc, #76]	; (800fe90 <SD_ioctl+0x54>)
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f013 0401 	ands.w	r4, r3, #1
 800fe48:	d11d      	bne.n	800fe86 <SD_ioctl+0x4a>
 800fe4a:	4608      	mov	r0, r1
 800fe4c:	4615      	mov	r5, r2

  switch (cmd)
 800fe4e:	2903      	cmp	r1, #3
 800fe50:	d81c      	bhi.n	800fe8c <SD_ioctl+0x50>
 800fe52:	e8df f001 	tbb	[pc, r1]
 800fe56:	0219      	.short	0x0219
 800fe58:	1009      	.short	0x1009
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe5a:	a801      	add	r0, sp, #4
 800fe5c:	f7ff fed2 	bl	800fc04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fe60:	9b07      	ldr	r3, [sp, #28]
 800fe62:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 800fe64:	4620      	mov	r0, r4
    break;
 800fe66:	e00f      	b.n	800fe88 <SD_ioctl+0x4c>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe68:	a801      	add	r0, sp, #4
 800fe6a:	f7ff fecb 	bl	800fc04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fe6e:	9b08      	ldr	r3, [sp, #32]
 800fe70:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
 800fe72:	4620      	mov	r0, r4
    break;
 800fe74:	e008      	b.n	800fe88 <SD_ioctl+0x4c>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe76:	a801      	add	r0, sp, #4
 800fe78:	f7ff fec4 	bl	800fc04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fe7c:	9b08      	ldr	r3, [sp, #32]
 800fe7e:	0a5b      	lsrs	r3, r3, #9
 800fe80:	602b      	str	r3, [r5, #0]
    res = RES_OK;
 800fe82:	4620      	mov	r0, r4
    break;
 800fe84:	e000      	b.n	800fe88 <SD_ioctl+0x4c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe86:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800fe88:	b00b      	add	sp, #44	; 0x2c
 800fe8a:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800fe8c:	2004      	movs	r0, #4
 800fe8e:	e7fb      	b.n	800fe88 <SD_ioctl+0x4c>
 800fe90:	200000a8 	.word	0x200000a8

0800fe94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fe94:	b500      	push	{lr}
 800fe96:	b083      	sub	sp, #12
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800fe98:	2302      	movs	r3, #2
 800fe9a:	f8ad 3006 	strh.w	r3, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800fe9e:	2300      	movs	r3, #0
 800fea0:	461a      	mov	r2, r3
 800fea2:	f10d 0106 	add.w	r1, sp, #6
 800fea6:	4803      	ldr	r0, [pc, #12]	; (800feb4 <BSP_SD_WriteCpltCallback+0x20>)
 800fea8:	6800      	ldr	r0, [r0, #0]
 800feaa:	f000 fe29 	bl	8010b00 <osMessageQueuePut>
#endif
}
 800feae:	b003      	add	sp, #12
 800feb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800feb4:	20001890 	.word	0x20001890

0800feb8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800feb8:	b500      	push	{lr}
 800feba:	b083      	sub	sp, #12
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800febc:	2301      	movs	r3, #1
 800febe:	f8ad 3006 	strh.w	r3, [sp, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800fec2:	2300      	movs	r3, #0
 800fec4:	461a      	mov	r2, r3
 800fec6:	f10d 0106 	add.w	r1, sp, #6
 800feca:	4803      	ldr	r0, [pc, #12]	; (800fed8 <BSP_SD_ReadCpltCallback+0x20>)
 800fecc:	6800      	ldr	r0, [r0, #0]
 800fece:	f000 fe17 	bl	8010b00 <osMessageQueuePut>
#endif
}
 800fed2:	b003      	add	sp, #12
 800fed4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fed8:	20001890 	.word	0x20001890

0800fedc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fedc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800fede:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fee2:	b113      	cbz	r3, 800feea <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4798      	blx	r3
  }

  return ret;
}
 800fee8:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800feea:	2003      	movs	r0, #3
 800feec:	e7fc      	b.n	800fee8 <USBD_SetClassConfig+0xc>

0800feee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800feee:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fef0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800fef4:	b10b      	cbz	r3, 800fefa <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	4798      	blx	r3
  }

  return USBD_OK;
}
 800fefa:	2000      	movs	r0, #0
 800fefc:	bd08      	pop	{r3, pc}

0800fefe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fefe:	b538      	push	{r3, r4, r5, lr}
 800ff00:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ff02:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800ff06:	4628      	mov	r0, r5
 800ff08:	f000 f95b 	bl	80101c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ff12:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800ff16:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ff1a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800ff1e:	f001 031f 	and.w	r3, r1, #31
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d00d      	beq.n	800ff42 <USBD_LL_SetupStage+0x44>
 800ff26:	2b02      	cmp	r3, #2
 800ff28:	d010      	beq.n	800ff4c <USBD_LL_SetupStage+0x4e>
 800ff2a:	b12b      	cbz	r3, 800ff38 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff2c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ff30:	4620      	mov	r0, r4
 800ff32:	f003 f841 	bl	8012fb8 <USBD_LL_StallEP>
      break;
 800ff36:	e003      	b.n	800ff40 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ff38:	4629      	mov	r1, r5
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 fb11 	bl	8010562 <USBD_StdDevReq>
  }

  return ret;
}
 800ff40:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ff42:	4629      	mov	r1, r5
 800ff44:	4620      	mov	r0, r4
 800ff46:	f000 fb44 	bl	80105d2 <USBD_StdItfReq>
      break;
 800ff4a:	e7f9      	b.n	800ff40 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 fb73 	bl	801063a <USBD_StdEPReq>
      break;
 800ff54:	e7f4      	b.n	800ff40 <USBD_LL_SetupStage+0x42>

0800ff56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff56:	b538      	push	{r3, r4, r5, lr}
 800ff58:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ff5a:	460d      	mov	r5, r1
 800ff5c:	bb41      	cbnz	r1, 800ffb0 <USBD_LL_DataOutStage+0x5a>
 800ff5e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff60:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800ff64:	2a03      	cmp	r2, #3
 800ff66:	d001      	beq.n	800ff6c <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800ff68:	4608      	mov	r0, r1
}
 800ff6a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800ff6c:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800ff70:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800ff74:	4291      	cmp	r1, r2
 800ff76:	d809      	bhi.n	800ff8c <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b03      	cmp	r3, #3
 800ff80:	d00f      	beq.n	800ffa2 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800ff82:	4620      	mov	r0, r4
 800ff84:	f000 fc6c 	bl	8010860 <USBD_CtlSendStatus>
  return USBD_OK;
 800ff88:	4628      	mov	r0, r5
 800ff8a:	e7ee      	b.n	800ff6a <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800ff8c:	1a89      	subs	r1, r1, r2
 800ff8e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ff92:	428a      	cmp	r2, r1
 800ff94:	bf28      	it	cs
 800ff96:	460a      	movcs	r2, r1
 800ff98:	4619      	mov	r1, r3
 800ff9a:	f000 fc59 	bl	8010850 <USBD_CtlContinueRx>
  return USBD_OK;
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	e7e3      	b.n	800ff6a <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800ffa2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ffa6:	691b      	ldr	r3, [r3, #16]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d0ea      	beq.n	800ff82 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800ffac:	4798      	blx	r3
 800ffae:	e7e8      	b.n	800ff82 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ffb4:	b2db      	uxtb	r3, r3
 800ffb6:	2b03      	cmp	r3, #3
 800ffb8:	d001      	beq.n	800ffbe <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800ffba:	2000      	movs	r0, #0
 800ffbc:	e7d5      	b.n	800ff6a <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800ffbe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ffc2:	699b      	ldr	r3, [r3, #24]
 800ffc4:	b10b      	cbz	r3, 800ffca <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ffc6:	4798      	blx	r3
        if (ret != USBD_OK)
 800ffc8:	e7cf      	b.n	800ff6a <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800ffca:	2000      	movs	r0, #0
 800ffcc:	e7cd      	b.n	800ff6a <USBD_LL_DataOutStage+0x14>

0800ffce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ffce:	b538      	push	{r3, r4, r5, lr}
 800ffd0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	2900      	cmp	r1, #0
 800ffd6:	d14a      	bne.n	801006e <USBD_LL_DataInStage+0xa0>
 800ffd8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ffda:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800ffde:	2a02      	cmp	r2, #2
 800ffe0:	d005      	beq.n	800ffee <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ffe2:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d03c      	beq.n	8010064 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800ffea:	4628      	mov	r0, r5
}
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800ffee:	69c2      	ldr	r2, [r0, #28]
 800fff0:	6a01      	ldr	r1, [r0, #32]
 800fff2:	428a      	cmp	r2, r1
 800fff4:	d80e      	bhi.n	8010014 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800fff6:	428a      	cmp	r2, r1
 800fff8:	d018      	beq.n	801002c <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fffa:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b03      	cmp	r3, #3
 8010002:	d027      	beq.n	8010054 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010004:	2180      	movs	r1, #128	; 0x80
 8010006:	4620      	mov	r0, r4
 8010008:	f002 ffd6 	bl	8012fb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801000c:	4620      	mov	r0, r4
 801000e:	f000 fc32 	bl	8010876 <USBD_CtlReceiveStatus>
 8010012:	e7e6      	b.n	800ffe2 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8010014:	1a52      	subs	r2, r2, r1
 8010016:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010018:	4619      	mov	r1, r3
 801001a:	f000 fc11 	bl	8010840 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801001e:	2300      	movs	r3, #0
 8010020:	461a      	mov	r2, r3
 8010022:	4619      	mov	r1, r3
 8010024:	4620      	mov	r0, r4
 8010026:	f003 f81a 	bl	801305e <USBD_LL_PrepareReceive>
 801002a:	e7da      	b.n	800ffe2 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 801002c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 801002e:	4299      	cmp	r1, r3
 8010030:	d8e3      	bhi.n	800fffa <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 8010032:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010036:	4293      	cmp	r3, r2
 8010038:	d2df      	bcs.n	800fffa <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801003a:	2200      	movs	r2, #0
 801003c:	4611      	mov	r1, r2
 801003e:	f000 fbff 	bl	8010840 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010042:	2100      	movs	r1, #0
 8010044:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010048:	460b      	mov	r3, r1
 801004a:	460a      	mov	r2, r1
 801004c:	4620      	mov	r0, r4
 801004e:	f003 f806 	bl	801305e <USBD_LL_PrepareReceive>
 8010052:	e7c6      	b.n	800ffe2 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 8010054:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d0d2      	beq.n	8010004 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 801005e:	4620      	mov	r0, r4
 8010060:	4798      	blx	r3
 8010062:	e7cf      	b.n	8010004 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 8010064:	2300      	movs	r3, #0
 8010066:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 801006a:	4628      	mov	r0, r5
 801006c:	e7be      	b.n	800ffec <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801006e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010072:	b2db      	uxtb	r3, r3
 8010074:	2b03      	cmp	r3, #3
 8010076:	d001      	beq.n	801007c <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 8010078:	2000      	movs	r0, #0
 801007a:	e7b7      	b.n	800ffec <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 801007c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010080:	695b      	ldr	r3, [r3, #20]
 8010082:	b10b      	cbz	r3, 8010088 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010084:	4798      	blx	r3
        if (ret != USBD_OK)
 8010086:	e7b1      	b.n	800ffec <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 8010088:	2000      	movs	r0, #0
 801008a:	e7af      	b.n	800ffec <USBD_LL_DataInStage+0x1e>

0801008c <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801008c:	2301      	movs	r3, #1
 801008e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010092:	2300      	movs	r3, #0
 8010094:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8010098:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 801009a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801009e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80100a2:	b1f3      	cbz	r3, 80100e2 <USBD_LL_Reset+0x56>
{
 80100a4:	b570      	push	{r4, r5, r6, lr}
 80100a6:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80100a8:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80100ac:	b11a      	cbz	r2, 80100b6 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	b10b      	cbz	r3, 80100b6 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80100b2:	2100      	movs	r1, #0
 80100b4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80100b6:	2340      	movs	r3, #64	; 0x40
 80100b8:	2200      	movs	r2, #0
 80100ba:	4611      	mov	r1, r2
 80100bc:	4620      	mov	r0, r4
 80100be:	f002 ff69 	bl	8012f94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80100c2:	2601      	movs	r6, #1
 80100c4:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80100c8:	2540      	movs	r5, #64	; 0x40
 80100ca:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80100ce:	462b      	mov	r3, r5
 80100d0:	2200      	movs	r2, #0
 80100d2:	2180      	movs	r1, #128	; 0x80
 80100d4:	4620      	mov	r0, r4
 80100d6:	f002 ff5d 	bl	8012f94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80100da:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80100dc:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80100de:	2000      	movs	r0, #0
}
 80100e0:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80100e2:	2003      	movs	r0, #3
}
 80100e4:	4770      	bx	lr

080100e6 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80100e6:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80100e8:	2000      	movs	r0, #0
 80100ea:	4770      	bx	lr

080100ec <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80100ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80100f6:	2304      	movs	r3, #4
 80100f8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80100fc:	2000      	movs	r0, #0
 80100fe:	4770      	bx	lr

08010100 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010100:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010104:	b2db      	uxtb	r3, r3
 8010106:	2b04      	cmp	r3, #4
 8010108:	d001      	beq.n	801010e <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 801010a:	2000      	movs	r0, #0
 801010c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 801010e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8010118:	e7f7      	b.n	801010a <USBD_LL_Resume+0xa>

0801011a <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 801011a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 801011e:	b162      	cbz	r2, 801013a <USBD_LL_SOF+0x20>
{
 8010120:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010122:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010126:	b2db      	uxtb	r3, r3
 8010128:	2b03      	cmp	r3, #3
 801012a:	d001      	beq.n	8010130 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 801012c:	2000      	movs	r0, #0
}
 801012e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8010130:	69d3      	ldr	r3, [r2, #28]
 8010132:	b123      	cbz	r3, 801013e <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 8010134:	4798      	blx	r3
  return USBD_OK;
 8010136:	2000      	movs	r0, #0
 8010138:	e7f9      	b.n	801012e <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 801013a:	2003      	movs	r0, #3
}
 801013c:	4770      	bx	lr
  return USBD_OK;
 801013e:	2000      	movs	r0, #0
 8010140:	e7f5      	b.n	801012e <USBD_LL_SOF+0x14>

08010142 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8010142:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8010146:	b162      	cbz	r2, 8010162 <USBD_LL_IsoINIncomplete+0x20>
{
 8010148:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801014a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801014e:	b2db      	uxtb	r3, r3
 8010150:	2b03      	cmp	r3, #3
 8010152:	d001      	beq.n	8010158 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8010154:	2000      	movs	r0, #0
}
 8010156:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 8010158:	6a13      	ldr	r3, [r2, #32]
 801015a:	b123      	cbz	r3, 8010166 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801015c:	4798      	blx	r3
  return USBD_OK;
 801015e:	2000      	movs	r0, #0
 8010160:	e7f9      	b.n	8010156 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 8010162:	2003      	movs	r0, #3
}
 8010164:	4770      	bx	lr
  return USBD_OK;
 8010166:	2000      	movs	r0, #0
 8010168:	e7f5      	b.n	8010156 <USBD_LL_IsoINIncomplete+0x14>

0801016a <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 801016a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 801016e:	b162      	cbz	r2, 801018a <USBD_LL_IsoOUTIncomplete+0x20>
{
 8010170:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010172:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010176:	b2db      	uxtb	r3, r3
 8010178:	2b03      	cmp	r3, #3
 801017a:	d001      	beq.n	8010180 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 801017c:	2000      	movs	r0, #0
}
 801017e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8010180:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010182:	b123      	cbz	r3, 801018e <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8010184:	4798      	blx	r3
  return USBD_OK;
 8010186:	2000      	movs	r0, #0
 8010188:	e7f9      	b.n	801017e <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 801018a:	2003      	movs	r0, #3
}
 801018c:	4770      	bx	lr
  return USBD_OK;
 801018e:	2000      	movs	r0, #0
 8010190:	e7f5      	b.n	801017e <USBD_LL_IsoOUTIncomplete+0x14>

08010192 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8010192:	2000      	movs	r0, #0
 8010194:	4770      	bx	lr

08010196 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010196:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010198:	2301      	movs	r3, #1
 801019a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801019e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80101a2:	b113      	cbz	r3, 80101aa <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	7901      	ldrb	r1, [r0, #4]
 80101a8:	4798      	blx	r3
  }

  return USBD_OK;
}
 80101aa:	2000      	movs	r0, #0
 80101ac:	bd08      	pop	{r3, pc}

080101ae <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101ae:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101b0:	884b      	ldrh	r3, [r1, #2]
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d000      	beq.n	80101b8 <USBD_SetFeature+0xa>
  {
    pdev->dev_remote_wakeup = 1U;
    (void)USBD_CtlSendStatus(pdev);
  }
}
 80101b6:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80101b8:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80101bc:	f000 fb50 	bl	8010860 <USBD_CtlSendStatus>
}
 80101c0:	e7f9      	b.n	80101b6 <USBD_SetFeature+0x8>

080101c2 <USBD_ParseSetupRequest>:
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  uint8_t *pbuff = pdata;

  req->bmRequest = *(uint8_t *)(pbuff);
 80101c2:	780b      	ldrb	r3, [r1, #0]
 80101c4:	7003      	strb	r3, [r0, #0]

  pbuff++;
  req->bRequest = *(uint8_t *)(pbuff);
 80101c6:	784b      	ldrb	r3, [r1, #1]
 80101c8:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80101ca:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80101cc:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  req->wValue = SWAPBYTE(pbuff);
 80101d2:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80101d4:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80101d6:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wIndex = SWAPBYTE(pbuff);
 80101dc:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80101de:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80101e0:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  pbuff++;
  pbuff++;
  req->wLength = SWAPBYTE(pbuff);
 80101e6:	80c3      	strh	r3, [r0, #6]
}
 80101e8:	4770      	bx	lr

080101ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101ea:	b510      	push	{r4, lr}
 80101ec:	4604      	mov	r4, r0
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80101ee:	2180      	movs	r1, #128	; 0x80
 80101f0:	f002 fee2 	bl	8012fb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101f4:	2100      	movs	r1, #0
 80101f6:	4620      	mov	r0, r4
 80101f8:	f002 fede 	bl	8012fb8 <USBD_LL_StallEP>
}
 80101fc:	bd10      	pop	{r4, pc}

080101fe <USBD_GetDescriptor>:
{
 80101fe:	b530      	push	{r4, r5, lr}
 8010200:	b083      	sub	sp, #12
 8010202:	4604      	mov	r4, r0
 8010204:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8010206:	2300      	movs	r3, #0
 8010208:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 801020c:	884a      	ldrh	r2, [r1, #2]
 801020e:	0a13      	lsrs	r3, r2, #8
 8010210:	3b01      	subs	r3, #1
 8010212:	2b0e      	cmp	r3, #14
 8010214:	f200 80bc 	bhi.w	8010390 <USBD_GetDescriptor+0x192>
 8010218:	e8df f003 	tbb	[pc, r3]
 801021c:	ba443015 	.word	0xba443015
 8010220:	baab9eba 	.word	0xbaab9eba
 8010224:	babababa 	.word	0xbabababa
 8010228:	baba      	.short	0xbaba
 801022a:	08          	.byte	0x08
 801022b:	00          	.byte	0x00
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801022c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010230:	69db      	ldr	r3, [r3, #28]
 8010232:	b123      	cbz	r3, 801023e <USBD_GetDescriptor+0x40>
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010234:	f10d 0106 	add.w	r1, sp, #6
 8010238:	7c00      	ldrb	r0, [r0, #16]
 801023a:	4798      	blx	r3
  if (err != 0U)
 801023c:	e00a      	b.n	8010254 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 801023e:	4629      	mov	r1, r5
 8010240:	f7ff ffd3 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 8010244:	e018      	b.n	8010278 <USBD_GetDescriptor+0x7a>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010246:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	f10d 0106 	add.w	r1, sp, #6
 8010250:	7c00      	ldrb	r0, [r0, #16]
 8010252:	4798      	blx	r3
  if (req->wLength != 0U)
 8010254:	88ea      	ldrh	r2, [r5, #6]
 8010256:	2a00      	cmp	r2, #0
 8010258:	f000 80a3 	beq.w	80103a2 <USBD_GetDescriptor+0x1a4>
    if (len != 0U)
 801025c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 8099 	beq.w	8010398 <USBD_GetDescriptor+0x19a>
      len = MIN(len, req->wLength);
 8010266:	429a      	cmp	r2, r3
 8010268:	bf28      	it	cs
 801026a:	461a      	movcs	r2, r3
 801026c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010270:	4601      	mov	r1, r0
 8010272:	4620      	mov	r0, r4
 8010274:	f000 fad7 	bl	8010826 <USBD_CtlSendData>
}
 8010278:	b003      	add	sp, #12
 801027a:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801027c:	7c03      	ldrb	r3, [r0, #16]
 801027e:	b943      	cbnz	r3, 8010292 <USBD_GetDescriptor+0x94>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010280:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010286:	f10d 0006 	add.w	r0, sp, #6
 801028a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801028c:	2302      	movs	r3, #2
 801028e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010290:	e7e0      	b.n	8010254 <USBD_GetDescriptor+0x56>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010292:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010298:	f10d 0006 	add.w	r0, sp, #6
 801029c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801029e:	2302      	movs	r3, #2
 80102a0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80102a2:	e7d7      	b.n	8010254 <USBD_GetDescriptor+0x56>
      switch ((uint8_t)(req->wValue))
 80102a4:	b2d2      	uxtb	r2, r2
 80102a6:	2a05      	cmp	r2, #5
 80102a8:	d852      	bhi.n	8010350 <USBD_GetDescriptor+0x152>
 80102aa:	e8df f002 	tbb	[pc, r2]
 80102ae:	1003      	.short	0x1003
 80102b0:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80102b4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	b123      	cbz	r3, 80102c6 <USBD_GetDescriptor+0xc8>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80102bc:	f10d 0106 	add.w	r1, sp, #6
 80102c0:	7c00      	ldrb	r0, [r0, #16]
 80102c2:	4798      	blx	r3
  if (err != 0U)
 80102c4:	e7c6      	b.n	8010254 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80102c6:	4629      	mov	r1, r5
 80102c8:	f7ff ff8f 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 80102cc:	e7d4      	b.n	8010278 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80102ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	b123      	cbz	r3, 80102e0 <USBD_GetDescriptor+0xe2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80102d6:	f10d 0106 	add.w	r1, sp, #6
 80102da:	7c00      	ldrb	r0, [r0, #16]
 80102dc:	4798      	blx	r3
  if (err != 0U)
 80102de:	e7b9      	b.n	8010254 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80102e0:	4629      	mov	r1, r5
 80102e2:	f7ff ff82 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 80102e6:	e7c7      	b.n	8010278 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80102e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	b123      	cbz	r3, 80102fa <USBD_GetDescriptor+0xfc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80102f0:	f10d 0106 	add.w	r1, sp, #6
 80102f4:	7c00      	ldrb	r0, [r0, #16]
 80102f6:	4798      	blx	r3
  if (err != 0U)
 80102f8:	e7ac      	b.n	8010254 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 80102fa:	4629      	mov	r1, r5
 80102fc:	f7ff ff75 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 8010300:	e7ba      	b.n	8010278 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010302:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	b123      	cbz	r3, 8010314 <USBD_GetDescriptor+0x116>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801030a:	f10d 0106 	add.w	r1, sp, #6
 801030e:	7c00      	ldrb	r0, [r0, #16]
 8010310:	4798      	blx	r3
  if (err != 0U)
 8010312:	e79f      	b.n	8010254 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8010314:	4629      	mov	r1, r5
 8010316:	f7ff ff68 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 801031a:	e7ad      	b.n	8010278 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801031c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8010320:	695b      	ldr	r3, [r3, #20]
 8010322:	b123      	cbz	r3, 801032e <USBD_GetDescriptor+0x130>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010324:	f10d 0106 	add.w	r1, sp, #6
 8010328:	7c00      	ldrb	r0, [r0, #16]
 801032a:	4798      	blx	r3
  if (err != 0U)
 801032c:	e792      	b.n	8010254 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 801032e:	4629      	mov	r1, r5
 8010330:	f7ff ff5b 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 8010334:	e7a0      	b.n	8010278 <USBD_GetDescriptor+0x7a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010336:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	b123      	cbz	r3, 8010348 <USBD_GetDescriptor+0x14a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801033e:	f10d 0106 	add.w	r1, sp, #6
 8010342:	7c00      	ldrb	r0, [r0, #16]
 8010344:	4798      	blx	r3
  if (err != 0U)
 8010346:	e785      	b.n	8010254 <USBD_GetDescriptor+0x56>
            USBD_CtlError(pdev, req);
 8010348:	4629      	mov	r1, r5
 801034a:	f7ff ff4e 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 801034e:	e793      	b.n	8010278 <USBD_GetDescriptor+0x7a>
          USBD_CtlError(pdev, req);
 8010350:	4629      	mov	r1, r5
 8010352:	f7ff ff4a 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 8010356:	e78f      	b.n	8010278 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010358:	7c03      	ldrb	r3, [r0, #16]
 801035a:	b933      	cbnz	r3, 801036a <USBD_GetDescriptor+0x16c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801035c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010362:	f10d 0006 	add.w	r0, sp, #6
 8010366:	4798      	blx	r3
  if (err != 0U)
 8010368:	e774      	b.n	8010254 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 801036a:	4629      	mov	r1, r5
 801036c:	f7ff ff3d 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 8010370:	e782      	b.n	8010278 <USBD_GetDescriptor+0x7a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010372:	7c03      	ldrb	r3, [r0, #16]
 8010374:	b943      	cbnz	r3, 8010388 <USBD_GetDescriptor+0x18a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010376:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037c:	f10d 0006 	add.w	r0, sp, #6
 8010380:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010382:	2307      	movs	r3, #7
 8010384:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8010386:	e765      	b.n	8010254 <USBD_GetDescriptor+0x56>
        USBD_CtlError(pdev, req);
 8010388:	4629      	mov	r1, r5
 801038a:	f7ff ff2e 	bl	80101ea <USBD_CtlError>
  if (err != 0U)
 801038e:	e773      	b.n	8010278 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8010390:	4629      	mov	r1, r5
 8010392:	f7ff ff2a 	bl	80101ea <USBD_CtlError>
    return;
 8010396:	e76f      	b.n	8010278 <USBD_GetDescriptor+0x7a>
      USBD_CtlError(pdev, req);
 8010398:	4629      	mov	r1, r5
 801039a:	4620      	mov	r0, r4
 801039c:	f7ff ff25 	bl	80101ea <USBD_CtlError>
 80103a0:	e76a      	b.n	8010278 <USBD_GetDescriptor+0x7a>
    (void)USBD_CtlSendStatus(pdev);
 80103a2:	4620      	mov	r0, r4
 80103a4:	f000 fa5c 	bl	8010860 <USBD_CtlSendStatus>
 80103a8:	e766      	b.n	8010278 <USBD_GetDescriptor+0x7a>

080103aa <USBD_SetAddress>:
{
 80103aa:	b538      	push	{r3, r4, r5, lr}
 80103ac:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103ae:	888b      	ldrh	r3, [r1, #4]
 80103b0:	b9fb      	cbnz	r3, 80103f2 <USBD_SetAddress+0x48>
 80103b2:	88cb      	ldrh	r3, [r1, #6]
 80103b4:	b9eb      	cbnz	r3, 80103f2 <USBD_SetAddress+0x48>
 80103b6:	884b      	ldrh	r3, [r1, #2]
 80103b8:	2b7f      	cmp	r3, #127	; 0x7f
 80103ba:	d81a      	bhi.n	80103f2 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103bc:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b03      	cmp	r3, #3
 80103c8:	d00c      	beq.n	80103e4 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 80103ca:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80103ce:	4629      	mov	r1, r5
 80103d0:	f002 fe27 	bl	8013022 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80103d4:	4620      	mov	r0, r4
 80103d6:	f000 fa43 	bl	8010860 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80103da:	b135      	cbz	r5, 80103ea <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80103dc:	2302      	movs	r3, #2
 80103de:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80103e2:	e009      	b.n	80103f8 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 80103e4:	f7ff ff01 	bl	80101ea <USBD_CtlError>
 80103e8:	e006      	b.n	80103f8 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80103ea:	2301      	movs	r3, #1
 80103ec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80103f0:	e002      	b.n	80103f8 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 80103f2:	4620      	mov	r0, r4
 80103f4:	f7ff fef9 	bl	80101ea <USBD_CtlError>
}
 80103f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080103fc <USBD_SetConfig>:
{
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	4604      	mov	r4, r0
 8010400:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8010402:	788d      	ldrb	r5, [r1, #2]
 8010404:	4b2e      	ldr	r3, [pc, #184]	; (80104c0 <USBD_SetConfig+0xc4>)
 8010406:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010408:	2d01      	cmp	r5, #1
 801040a:	d810      	bhi.n	801042e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 801040c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b02      	cmp	r3, #2
 8010414:	d00f      	beq.n	8010436 <USBD_SetConfig+0x3a>
 8010416:	2b03      	cmp	r3, #3
 8010418:	d023      	beq.n	8010462 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 801041a:	f7ff fee6 	bl	80101ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801041e:	4b28      	ldr	r3, [pc, #160]	; (80104c0 <USBD_SetConfig+0xc4>)
 8010420:	7819      	ldrb	r1, [r3, #0]
 8010422:	4620      	mov	r0, r4
 8010424:	f7ff fd63 	bl	800feee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010428:	2503      	movs	r5, #3
}
 801042a:	4628      	mov	r0, r5
 801042c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 801042e:	f7ff fedc 	bl	80101ea <USBD_CtlError>
    return USBD_FAIL;
 8010432:	2503      	movs	r5, #3
 8010434:	e7f9      	b.n	801042a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8010436:	b18d      	cbz	r5, 801045c <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 8010438:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801043a:	4629      	mov	r1, r5
 801043c:	f7ff fd4e 	bl	800fedc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8010440:	4605      	mov	r5, r0
 8010442:	b120      	cbz	r0, 801044e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 8010444:	4631      	mov	r1, r6
 8010446:	4620      	mov	r0, r4
 8010448:	f7ff fecf 	bl	80101ea <USBD_CtlError>
 801044c:	e7ed      	b.n	801042a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 801044e:	4620      	mov	r0, r4
 8010450:	f000 fa06 	bl	8010860 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010454:	2303      	movs	r3, #3
 8010456:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 801045a:	e7e6      	b.n	801042a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 801045c:	f000 fa00 	bl	8010860 <USBD_CtlSendStatus>
 8010460:	e7e3      	b.n	801042a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8010462:	b1cd      	cbz	r5, 8010498 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 8010464:	6841      	ldr	r1, [r0, #4]
 8010466:	428d      	cmp	r5, r1
 8010468:	d025      	beq.n	80104b6 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801046a:	b2c9      	uxtb	r1, r1
 801046c:	f7ff fd3f 	bl	800feee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010470:	4b13      	ldr	r3, [pc, #76]	; (80104c0 <USBD_SetConfig+0xc4>)
 8010472:	7819      	ldrb	r1, [r3, #0]
 8010474:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010476:	4620      	mov	r0, r4
 8010478:	f7ff fd30 	bl	800fedc <USBD_SetClassConfig>
        if (ret != USBD_OK)
 801047c:	4605      	mov	r5, r0
 801047e:	b1b0      	cbz	r0, 80104ae <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 8010480:	4631      	mov	r1, r6
 8010482:	4620      	mov	r0, r4
 8010484:	f7ff feb1 	bl	80101ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010488:	7921      	ldrb	r1, [r4, #4]
 801048a:	4620      	mov	r0, r4
 801048c:	f7ff fd2f 	bl	800feee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010490:	2302      	movs	r3, #2
 8010492:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8010496:	e7c8      	b.n	801042a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010498:	2302      	movs	r3, #2
 801049a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801049e:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104a0:	4629      	mov	r1, r5
 80104a2:	f7ff fd24 	bl	800feee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80104a6:	4620      	mov	r0, r4
 80104a8:	f000 f9da 	bl	8010860 <USBD_CtlSendStatus>
 80104ac:	e7bd      	b.n	801042a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 80104ae:	4620      	mov	r0, r4
 80104b0:	f000 f9d6 	bl	8010860 <USBD_CtlSendStatus>
 80104b4:	e7b9      	b.n	801042a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 80104b6:	f000 f9d3 	bl	8010860 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80104ba:	2500      	movs	r5, #0
 80104bc:	e7b5      	b.n	801042a <USBD_SetConfig+0x2e>
 80104be:	bf00      	nop
 80104c0:	20001894 	.word	0x20001894

080104c4 <USBD_GetConfig>:
{
 80104c4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80104c6:	88cb      	ldrh	r3, [r1, #6]
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d10b      	bne.n	80104e4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80104cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	d909      	bls.n	80104ea <USBD_GetConfig+0x26>
 80104d6:	2b03      	cmp	r3, #3
 80104d8:	d109      	bne.n	80104ee <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80104da:	2201      	movs	r2, #1
 80104dc:	1d01      	adds	r1, r0, #4
 80104de:	f000 f9a2 	bl	8010826 <USBD_CtlSendData>
        break;
 80104e2:	e001      	b.n	80104e8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80104e4:	f7ff fe81 	bl	80101ea <USBD_CtlError>
}
 80104e8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80104ea:	b25b      	sxtb	r3, r3
 80104ec:	b913      	cbnz	r3, 80104f4 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 80104ee:	f7ff fe7c 	bl	80101ea <USBD_CtlError>
}
 80104f2:	e7f9      	b.n	80104e8 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 80104f4:	4601      	mov	r1, r0
 80104f6:	2300      	movs	r3, #0
 80104f8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80104fc:	2201      	movs	r2, #1
 80104fe:	f000 f992 	bl	8010826 <USBD_CtlSendData>
        break;
 8010502:	e7f1      	b.n	80104e8 <USBD_GetConfig+0x24>

08010504 <USBD_GetStatus>:
{
 8010504:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8010506:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801050a:	3b01      	subs	r3, #1
 801050c:	2b02      	cmp	r3, #2
 801050e:	d812      	bhi.n	8010536 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 8010510:	88cb      	ldrh	r3, [r1, #6]
 8010512:	2b02      	cmp	r3, #2
 8010514:	d10c      	bne.n	8010530 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010516:	2301      	movs	r3, #1
 8010518:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 801051a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 801051e:	b10b      	cbz	r3, 8010524 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010520:	2303      	movs	r3, #3
 8010522:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010524:	2202      	movs	r2, #2
 8010526:	f100 010c 	add.w	r1, r0, #12
 801052a:	f000 f97c 	bl	8010826 <USBD_CtlSendData>
}
 801052e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8010530:	f7ff fe5b 	bl	80101ea <USBD_CtlError>
        break;
 8010534:	e7fb      	b.n	801052e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8010536:	f7ff fe58 	bl	80101ea <USBD_CtlError>
}
 801053a:	e7f8      	b.n	801052e <USBD_GetStatus+0x2a>

0801053c <USBD_ClrFeature>:
{
 801053c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 801053e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8010542:	3b01      	subs	r3, #1
 8010544:	2b02      	cmp	r3, #2
 8010546:	d809      	bhi.n	801055c <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010548:	884b      	ldrh	r3, [r1, #2]
 801054a:	2b01      	cmp	r3, #1
 801054c:	d000      	beq.n	8010550 <USBD_ClrFeature+0x14>
}
 801054e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8010550:	2300      	movs	r3, #0
 8010552:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010556:	f000 f983 	bl	8010860 <USBD_CtlSendStatus>
 801055a:	e7f8      	b.n	801054e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 801055c:	f7ff fe45 	bl	80101ea <USBD_CtlError>
}
 8010560:	e7f5      	b.n	801054e <USBD_ClrFeature+0x12>

08010562 <USBD_StdDevReq>:
{
 8010562:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010564:	780c      	ldrb	r4, [r1, #0]
 8010566:	f004 0460 	and.w	r4, r4, #96	; 0x60
 801056a:	2c20      	cmp	r4, #32
 801056c:	d006      	beq.n	801057c <USBD_StdDevReq+0x1a>
 801056e:	2c40      	cmp	r4, #64	; 0x40
 8010570:	d004      	beq.n	801057c <USBD_StdDevReq+0x1a>
 8010572:	b154      	cbz	r4, 801058a <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 8010574:	f7ff fe39 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010578:	2400      	movs	r4, #0
      break;
 801057a:	e004      	b.n	8010586 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801057c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	4798      	blx	r3
 8010584:	4604      	mov	r4, r0
}
 8010586:	4620      	mov	r0, r4
 8010588:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 801058a:	784d      	ldrb	r5, [r1, #1]
 801058c:	2d09      	cmp	r5, #9
 801058e:	d81d      	bhi.n	80105cc <USBD_StdDevReq+0x6a>
 8010590:	e8df f005 	tbb	[pc, r5]
 8010594:	161c1912 	.word	0x161c1912
 8010598:	1c05081c 	.word	0x1c05081c
 801059c:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 801059e:	f7ff fe2e 	bl	80101fe <USBD_GetDescriptor>
          break;
 80105a2:	e7f0      	b.n	8010586 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 80105a4:	f7ff ff01 	bl	80103aa <USBD_SetAddress>
          break;
 80105a8:	e7ed      	b.n	8010586 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 80105aa:	f7ff ff27 	bl	80103fc <USBD_SetConfig>
 80105ae:	4604      	mov	r4, r0
          break;
 80105b0:	e7e9      	b.n	8010586 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 80105b2:	f7ff ff87 	bl	80104c4 <USBD_GetConfig>
          break;
 80105b6:	e7e6      	b.n	8010586 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 80105b8:	f7ff ffa4 	bl	8010504 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80105bc:	462c      	mov	r4, r5
          break;
 80105be:	e7e2      	b.n	8010586 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 80105c0:	f7ff fdf5 	bl	80101ae <USBD_SetFeature>
          break;
 80105c4:	e7df      	b.n	8010586 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 80105c6:	f7ff ffb9 	bl	801053c <USBD_ClrFeature>
          break;
 80105ca:	e7dc      	b.n	8010586 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 80105cc:	f7ff fe0d 	bl	80101ea <USBD_CtlError>
          break;
 80105d0:	e7d9      	b.n	8010586 <USBD_StdDevReq+0x24>

080105d2 <USBD_StdItfReq>:
{
 80105d2:	b570      	push	{r4, r5, r6, lr}
 80105d4:	4605      	mov	r5, r0
 80105d6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105d8:	780b      	ldrb	r3, [r1, #0]
 80105da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105de:	2b20      	cmp	r3, #32
 80105e0:	d007      	beq.n	80105f2 <USBD_StdItfReq+0x20>
 80105e2:	2b40      	cmp	r3, #64	; 0x40
 80105e4:	d005      	beq.n	80105f2 <USBD_StdItfReq+0x20>
 80105e6:	b123      	cbz	r3, 80105f2 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80105e8:	f7ff fdff 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80105ec:	2600      	movs	r6, #0
}
 80105ee:	4630      	mov	r0, r6
 80105f0:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 80105f2:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80105f6:	3b01      	subs	r3, #1
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	d818      	bhi.n	801062e <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80105fc:	7923      	ldrb	r3, [r4, #4]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d80f      	bhi.n	8010622 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010602:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	4621      	mov	r1, r4
 801060a:	4628      	mov	r0, r5
 801060c:	4798      	blx	r3
 801060e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010610:	88e3      	ldrh	r3, [r4, #6]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d1eb      	bne.n	80105ee <USBD_StdItfReq+0x1c>
 8010616:	2800      	cmp	r0, #0
 8010618:	d1e9      	bne.n	80105ee <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 801061a:	4628      	mov	r0, r5
 801061c:	f000 f920 	bl	8010860 <USBD_CtlSendStatus>
 8010620:	e7e5      	b.n	80105ee <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 8010622:	4621      	mov	r1, r4
 8010624:	4628      	mov	r0, r5
 8010626:	f7ff fde0 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 801062a:	2600      	movs	r6, #0
 801062c:	e7df      	b.n	80105ee <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 801062e:	4621      	mov	r1, r4
 8010630:	4628      	mov	r0, r5
 8010632:	f7ff fdda 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010636:	2600      	movs	r6, #0
          break;
 8010638:	e7d9      	b.n	80105ee <USBD_StdItfReq+0x1c>

0801063a <USBD_StdEPReq>:
{
 801063a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801063c:	4606      	mov	r6, r0
 801063e:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8010640:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010642:	780c      	ldrb	r4, [r1, #0]
 8010644:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8010648:	2c20      	cmp	r4, #32
 801064a:	d008      	beq.n	801065e <USBD_StdEPReq+0x24>
 801064c:	b2d9      	uxtb	r1, r3
 801064e:	2c40      	cmp	r4, #64	; 0x40
 8010650:	d005      	beq.n	801065e <USBD_StdEPReq+0x24>
 8010652:	b16c      	cbz	r4, 8010670 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 8010654:	4629      	mov	r1, r5
 8010656:	f7ff fdc8 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 801065a:	2400      	movs	r4, #0
      break;
 801065c:	e006      	b.n	801066c <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801065e:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8010662:	689b      	ldr	r3, [r3, #8]
 8010664:	4629      	mov	r1, r5
 8010666:	4630      	mov	r0, r6
 8010668:	4798      	blx	r3
 801066a:	4604      	mov	r4, r0
}
 801066c:	4620      	mov	r0, r4
 801066e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 8010670:	786f      	ldrb	r7, [r5, #1]
 8010672:	2f01      	cmp	r7, #1
 8010674:	d02f      	beq.n	80106d6 <USBD_StdEPReq+0x9c>
 8010676:	2f03      	cmp	r7, #3
 8010678:	d005      	beq.n	8010686 <USBD_StdEPReq+0x4c>
 801067a:	2f00      	cmp	r7, #0
 801067c:	d059      	beq.n	8010732 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 801067e:	4629      	mov	r1, r5
 8010680:	f7ff fdb3 	bl	80101ea <USBD_CtlError>
          break;
 8010684:	e7f2      	b.n	801066c <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8010686:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801068a:	b2db      	uxtb	r3, r3
 801068c:	2b02      	cmp	r3, #2
 801068e:	d005      	beq.n	801069c <USBD_StdEPReq+0x62>
 8010690:	2b03      	cmp	r3, #3
 8010692:	d012      	beq.n	80106ba <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 8010694:	4629      	mov	r1, r5
 8010696:	f7ff fda8 	bl	80101ea <USBD_CtlError>
              break;
 801069a:	e7e7      	b.n	801066c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801069c:	b109      	cbz	r1, 80106a2 <USBD_StdEPReq+0x68>
 801069e:	2980      	cmp	r1, #128	; 0x80
 80106a0:	d104      	bne.n	80106ac <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 80106a2:	4629      	mov	r1, r5
 80106a4:	4630      	mov	r0, r6
 80106a6:	f7ff fda0 	bl	80101ea <USBD_CtlError>
 80106aa:	e7df      	b.n	801066c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106ac:	f002 fc84 	bl	8012fb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80106b0:	2180      	movs	r1, #128	; 0x80
 80106b2:	4630      	mov	r0, r6
 80106b4:	f002 fc80 	bl	8012fb8 <USBD_LL_StallEP>
 80106b8:	e7d8      	b.n	801066c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80106ba:	886b      	ldrh	r3, [r5, #2]
 80106bc:	b923      	cbnz	r3, 80106c8 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80106be:	b119      	cbz	r1, 80106c8 <USBD_StdEPReq+0x8e>
 80106c0:	2980      	cmp	r1, #128	; 0x80
 80106c2:	d001      	beq.n	80106c8 <USBD_StdEPReq+0x8e>
 80106c4:	88eb      	ldrh	r3, [r5, #6]
 80106c6:	b11b      	cbz	r3, 80106d0 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 80106c8:	4630      	mov	r0, r6
 80106ca:	f000 f8c9 	bl	8010860 <USBD_CtlSendStatus>
              break;
 80106ce:	e7cd      	b.n	801066c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80106d0:	f002 fc72 	bl	8012fb8 <USBD_LL_StallEP>
 80106d4:	e7f8      	b.n	80106c8 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 80106d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d005      	beq.n	80106ec <USBD_StdEPReq+0xb2>
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	d012      	beq.n	801070a <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 80106e4:	4629      	mov	r1, r5
 80106e6:	f7ff fd80 	bl	80101ea <USBD_CtlError>
              break;
 80106ea:	e7bf      	b.n	801066c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80106ec:	b109      	cbz	r1, 80106f2 <USBD_StdEPReq+0xb8>
 80106ee:	2980      	cmp	r1, #128	; 0x80
 80106f0:	d104      	bne.n	80106fc <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 80106f2:	4629      	mov	r1, r5
 80106f4:	4630      	mov	r0, r6
 80106f6:	f7ff fd78 	bl	80101ea <USBD_CtlError>
 80106fa:	e7b7      	b.n	801066c <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80106fc:	f002 fc5c 	bl	8012fb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010700:	2180      	movs	r1, #128	; 0x80
 8010702:	4630      	mov	r0, r6
 8010704:	f002 fc58 	bl	8012fb8 <USBD_LL_StallEP>
 8010708:	e7b0      	b.n	801066c <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 801070a:	886b      	ldrh	r3, [r5, #2]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1ad      	bne.n	801066c <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8010710:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8010714:	d10a      	bne.n	801072c <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 8010716:	4630      	mov	r0, r6
 8010718:	f000 f8a2 	bl	8010860 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801071c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	4629      	mov	r1, r5
 8010724:	4630      	mov	r0, r6
 8010726:	4798      	blx	r3
 8010728:	4604      	mov	r4, r0
 801072a:	e79f      	b.n	801066c <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801072c:	f002 fc53 	bl	8012fd6 <USBD_LL_ClearStallEP>
 8010730:	e7f1      	b.n	8010716 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 8010732:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8010736:	b2d2      	uxtb	r2, r2
 8010738:	2a02      	cmp	r2, #2
 801073a:	d006      	beq.n	801074a <USBD_StdEPReq+0x110>
 801073c:	2a03      	cmp	r2, #3
 801073e:	d029      	beq.n	8010794 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 8010740:	4629      	mov	r1, r5
 8010742:	f7ff fd52 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8010746:	463c      	mov	r4, r7
              break;
 8010748:	e790      	b.n	801066c <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801074a:	b109      	cbz	r1, 8010750 <USBD_StdEPReq+0x116>
 801074c:	2980      	cmp	r1, #128	; 0x80
 801074e:	d113      	bne.n	8010778 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010750:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010754:	d115      	bne.n	8010782 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010756:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801075a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801075e:	0089      	lsls	r1, r1, #2
 8010760:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8010764:	4431      	add	r1, r6
 8010766:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8010768:	2300      	movs	r3, #0
 801076a:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801076c:	2202      	movs	r2, #2
 801076e:	4630      	mov	r0, r6
 8010770:	f000 f859 	bl	8010826 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8010774:	463c      	mov	r4, r7
              break;
 8010776:	e779      	b.n	801066c <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 8010778:	4629      	mov	r1, r5
 801077a:	f7ff fd36 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 801077e:	463c      	mov	r4, r7
                break;
 8010780:	e774      	b.n	801066c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010782:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8010786:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801078a:	0089      	lsls	r1, r1, #2
 801078c:	3110      	adds	r1, #16
 801078e:	4431      	add	r1, r6
 8010790:	3104      	adds	r1, #4
 8010792:	e7e9      	b.n	8010768 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 8010794:	b25b      	sxtb	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	db1f      	blt.n	80107da <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801079a:	f001 020f 	and.w	r2, r1, #15
 801079e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80107a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80107a6:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 80107aa:	b322      	cbz	r2, 80107f6 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	db27      	blt.n	8010800 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80107b0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80107b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80107b8:	009c      	lsls	r4, r3, #2
 80107ba:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80107be:	4434      	add	r4, r6
 80107c0:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80107c2:	b109      	cbz	r1, 80107c8 <USBD_StdEPReq+0x18e>
 80107c4:	2980      	cmp	r1, #128	; 0x80
 80107c6:	d124      	bne.n	8010812 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 80107c8:	2300      	movs	r3, #0
 80107ca:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80107cc:	2202      	movs	r2, #2
 80107ce:	4621      	mov	r1, r4
 80107d0:	4630      	mov	r0, r6
 80107d2:	f000 f828 	bl	8010826 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80107d6:	463c      	mov	r4, r7
              break;
 80107d8:	e748      	b.n	801066c <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80107da:	f001 020f 	and.w	r2, r1, #15
 80107de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80107e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80107e6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80107e8:	2a00      	cmp	r2, #0
 80107ea:	d1df      	bne.n	80107ac <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 80107ec:	4629      	mov	r1, r5
 80107ee:	f7ff fcfc 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80107f2:	463c      	mov	r4, r7
                  break;
 80107f4:	e73a      	b.n	801066c <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7ff fcf7 	bl	80101ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80107fc:	463c      	mov	r4, r7
                  break;
 80107fe:	e735      	b.n	801066c <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010800:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8010804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010808:	009c      	lsls	r4, r3, #2
 801080a:	3410      	adds	r4, #16
 801080c:	4434      	add	r4, r6
 801080e:	3404      	adds	r4, #4
 8010810:	e7d7      	b.n	80107c2 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010812:	4630      	mov	r0, r6
 8010814:	f002 fbee 	bl	8012ff4 <USBD_LL_IsStallEP>
 8010818:	b110      	cbz	r0, 8010820 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 801081a:	2301      	movs	r3, #1
 801081c:	6023      	str	r3, [r4, #0]
 801081e:	e7d5      	b.n	80107cc <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 8010820:	2300      	movs	r3, #0
 8010822:	6023      	str	r3, [r4, #0]
 8010824:	e7d2      	b.n	80107cc <USBD_StdEPReq+0x192>

08010826 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010826:	b510      	push	{r4, lr}
 8010828:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801082a:	2202      	movs	r2, #2
 801082c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010830:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010832:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010834:	460a      	mov	r2, r1
 8010836:	2100      	movs	r1, #0
 8010838:	f002 fc02 	bl	8013040 <USBD_LL_Transmit>

  return USBD_OK;
}
 801083c:	2000      	movs	r0, #0
 801083e:	bd10      	pop	{r4, pc}

08010840 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010840:	b508      	push	{r3, lr}
 8010842:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010844:	460a      	mov	r2, r1
 8010846:	2100      	movs	r1, #0
 8010848:	f002 fbfa 	bl	8013040 <USBD_LL_Transmit>

  return USBD_OK;
}
 801084c:	2000      	movs	r0, #0
 801084e:	bd08      	pop	{r3, pc}

08010850 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010850:	b508      	push	{r3, lr}
 8010852:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010854:	460a      	mov	r2, r1
 8010856:	2100      	movs	r1, #0
 8010858:	f002 fc01 	bl	801305e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801085c:	2000      	movs	r0, #0
 801085e:	bd08      	pop	{r3, pc}

08010860 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010860:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010862:	2204      	movs	r2, #4
 8010864:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010868:	2300      	movs	r3, #0
 801086a:	461a      	mov	r2, r3
 801086c:	4619      	mov	r1, r3
 801086e:	f002 fbe7 	bl	8013040 <USBD_LL_Transmit>

  return USBD_OK;
}
 8010872:	2000      	movs	r0, #0
 8010874:	bd08      	pop	{r3, pc}

08010876 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010876:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010878:	2205      	movs	r2, #5
 801087a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801087e:	2300      	movs	r3, #0
 8010880:	461a      	mov	r2, r3
 8010882:	4619      	mov	r1, r3
 8010884:	f002 fbeb 	bl	801305e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8010888:	2000      	movs	r0, #0
 801088a:	bd08      	pop	{r3, pc}

0801088c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801088c:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <FATFS_LinkDriverEx+0x44>)
 801088e:	7a5b      	ldrb	r3, [r3, #9]
 8010890:	b9e3      	cbnz	r3, 80108cc <FATFS_LinkDriverEx+0x40>
{
 8010892:	b470      	push	{r4, r5, r6}
 8010894:	4604      	mov	r4, r0
 8010896:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 801089a:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <FATFS_LinkDriverEx+0x44>)
 801089c:	7a5d      	ldrb	r5, [r3, #9]
 801089e:	b2ed      	uxtb	r5, r5
 80108a0:	2600      	movs	r6, #0
 80108a2:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80108a4:	7a5d      	ldrb	r5, [r3, #9]
 80108a6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80108aa:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80108ac:	7a5c      	ldrb	r4, [r3, #9]
 80108ae:	441c      	add	r4, r3
 80108b0:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80108b2:	7a5a      	ldrb	r2, [r3, #9]
 80108b4:	1c54      	adds	r4, r2, #1
 80108b6:	b2e4      	uxtb	r4, r4
 80108b8:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80108ba:	3230      	adds	r2, #48	; 0x30
 80108bc:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80108be:	233a      	movs	r3, #58	; 0x3a
 80108c0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80108c2:	232f      	movs	r3, #47	; 0x2f
 80108c4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80108c6:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80108c8:	bc70      	pop	{r4, r5, r6}
 80108ca:	4770      	bx	lr
  uint8_t ret = 1;
 80108cc:	2001      	movs	r0, #1
}
 80108ce:	4770      	bx	lr
 80108d0:	20001898 	.word	0x20001898

080108d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80108d4:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80108d6:	2200      	movs	r2, #0
 80108d8:	f7ff ffd8 	bl	801088c <FATFS_LinkDriverEx>
}
 80108dc:	bd08      	pop	{r3, pc}
	...

080108e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80108e0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80108e2:	4b05      	ldr	r3, [pc, #20]	; (80108f8 <SysTick_Handler+0x18>)
 80108e4:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80108e6:	f001 fcc5 	bl	8012274 <xTaskGetSchedulerState>
 80108ea:	2801      	cmp	r0, #1
 80108ec:	d100      	bne.n	80108f0 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80108ee:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80108f0:	f002 f8c8 	bl	8012a84 <xPortSysTickHandler>
}
 80108f4:	e7fb      	b.n	80108ee <SysTick_Handler+0xe>
 80108f6:	bf00      	nop
 80108f8:	e000e010 	.word	0xe000e010

080108fc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108fc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8010900:	b92b      	cbnz	r3, 801090e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8010902:	4b06      	ldr	r3, [pc, #24]	; (801091c <osKernelInitialize+0x20>)
 8010904:	6818      	ldr	r0, [r3, #0]
 8010906:	b928      	cbnz	r0, 8010914 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010908:	2201      	movs	r2, #1
 801090a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801090c:	4770      	bx	lr
    stat = osErrorISR;
 801090e:	f06f 0005 	mvn.w	r0, #5
 8010912:	4770      	bx	lr
    } else {
      stat = osError;
 8010914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	20001f30 	.word	0x20001f30

08010920 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010920:	b508      	push	{r3, lr}
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010922:	f001 fca7 	bl	8012274 <xTaskGetSchedulerState>
 8010926:	b140      	cbz	r0, 801093a <osKernelGetState+0x1a>
 8010928:	4603      	mov	r3, r0
 801092a:	2802      	cmp	r0, #2
 801092c:	d006      	beq.n	801093c <osKernelGetState+0x1c>
      state = osKernelLocked;
      break;

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801092e:	4b04      	ldr	r3, [pc, #16]	; (8010940 <osKernelGetState+0x20>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d002      	beq.n	801093c <osKernelGetState+0x1c>
        state = osKernelReady;
      } else {
        state = osKernelInactive;
 8010936:	2300      	movs	r3, #0
      }
      break;
  }

  return (state);
 8010938:	e000      	b.n	801093c <osKernelGetState+0x1c>
      state = osKernelLocked;
 801093a:	2303      	movs	r3, #3
}
 801093c:	4618      	mov	r0, r3
 801093e:	bd08      	pop	{r3, pc}
 8010940:	20001f30 	.word	0x20001f30

08010944 <osKernelStart>:
 8010944:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8010948:	b973      	cbnz	r3, 8010968 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 801094a:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <osKernelStart+0x30>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b01      	cmp	r3, #1
 8010950:	d10d      	bne.n	801096e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8010952:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010954:	2400      	movs	r4, #0
 8010956:	4b08      	ldr	r3, [pc, #32]	; (8010978 <osKernelStart+0x34>)
 8010958:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801095a:	4b06      	ldr	r3, [pc, #24]	; (8010974 <osKernelStart+0x30>)
 801095c:	2202      	movs	r2, #2
 801095e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010960:	f001 f9c8 	bl	8011cf4 <vTaskStartScheduler>
      stat = osOK;
 8010964:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8010966:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8010968:	f06f 0005 	mvn.w	r0, #5
 801096c:	4770      	bx	lr
      stat = osError;
 801096e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010972:	4770      	bx	lr
 8010974:	20001f30 	.word	0x20001f30
 8010978:	e000ed00 	.word	0xe000ed00

0801097c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801097c:	b508      	push	{r3, lr}
 801097e:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8010982:	b113      	cbz	r3, 801098a <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8010984:	f001 fa18 	bl	8011db8 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8010988:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 801098a:	f001 fa0f 	bl	8011dac <xTaskGetTickCount>
  return (ticks);
 801098e:	e7fb      	b.n	8010988 <osKernelGetTickCount+0xc>

08010990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010992:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010994:	2400      	movs	r4, #0
 8010996:	9405      	str	r4, [sp, #20]
 8010998:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 801099c:	bb7c      	cbnz	r4, 80109fe <osThreadNew+0x6e>
 801099e:	b370      	cbz	r0, 80109fe <osThreadNew+0x6e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80109a0:	b32a      	cbz	r2, 80109ee <osThreadNew+0x5e>
      if (attr->name != NULL) {
 80109a2:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80109a4:	6993      	ldr	r3, [r2, #24]
 80109a6:	b903      	cbnz	r3, 80109aa <osThreadNew+0x1a>
    prio  = (UBaseType_t)osPriorityNormal;
 80109a8:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80109aa:	1e5c      	subs	r4, r3, #1
 80109ac:	2c37      	cmp	r4, #55	; 0x37
 80109ae:	d84a      	bhi.n	8010a46 <osThreadNew+0xb6>
 80109b0:	6854      	ldr	r4, [r2, #4]
 80109b2:	f014 0f01 	tst.w	r4, #1
 80109b6:	d148      	bne.n	8010a4a <osThreadNew+0xba>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80109b8:	6956      	ldr	r6, [r2, #20]
 80109ba:	b176      	cbz	r6, 80109da <osThreadNew+0x4a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80109bc:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80109c0:	6894      	ldr	r4, [r2, #8]
 80109c2:	b134      	cbz	r4, 80109d2 <osThreadNew+0x42>
 80109c4:	68d7      	ldr	r7, [r2, #12]
 80109c6:	f5b7 6f91 	cmp.w	r7, #1160	; 0x488
 80109ca:	d302      	bcc.n	80109d2 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80109cc:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80109ce:	b107      	cbz	r7, 80109d2 <osThreadNew+0x42>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80109d0:	b9c6      	cbnz	r6, 8010a04 <osThreadNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80109d2:	b12c      	cbz	r4, 80109e0 <osThreadNew+0x50>
    mem  = -1;
 80109d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80109d8:	e00e      	b.n	80109f8 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 80109da:	f04f 0c80 	mov.w	ip, #128	; 0x80
 80109de:	e7ef      	b.n	80109c0 <osThreadNew+0x30>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80109e0:	68d4      	ldr	r4, [r2, #12]
 80109e2:	b98c      	cbnz	r4, 8010a08 <osThreadNew+0x78>
 80109e4:	6914      	ldr	r4, [r2, #16]
 80109e6:	b194      	cbz	r4, 8010a0e <osThreadNew+0x7e>
    mem  = -1;
 80109e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80109ec:	e004      	b.n	80109f8 <osThreadNew+0x68>
    name = NULL;
 80109ee:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80109f0:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80109f2:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80109f4:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 80109f8:	2c01      	cmp	r4, #1
 80109fa:	d00a      	beq.n	8010a12 <osThreadNew+0x82>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80109fc:	b1ac      	cbz	r4, 8010a2a <osThreadNew+0x9a>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80109fe:	9805      	ldr	r0, [sp, #20]
}
 8010a00:	b007      	add	sp, #28
 8010a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8010a04:	2401      	movs	r4, #1
 8010a06:	e7f7      	b.n	80109f8 <osThreadNew+0x68>
    mem  = -1;
 8010a08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010a0c:	e7f4      	b.n	80109f8 <osThreadNew+0x68>
          mem = 0;
 8010a0e:	2400      	movs	r4, #0
 8010a10:	e7f2      	b.n	80109f8 <osThreadNew+0x68>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010a12:	6914      	ldr	r4, [r2, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010a14:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010a16:	9202      	str	r2, [sp, #8]
 8010a18:	9401      	str	r4, [sp, #4]
 8010a1a:	9300      	str	r3, [sp, #0]
 8010a1c:	460b      	mov	r3, r1
 8010a1e:	4662      	mov	r2, ip
 8010a20:	4629      	mov	r1, r5
 8010a22:	f001 f899 	bl	8011b58 <xTaskCreateStatic>
 8010a26:	9005      	str	r0, [sp, #20]
 8010a28:	e7e9      	b.n	80109fe <osThreadNew+0x6e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010a2a:	aa05      	add	r2, sp, #20
 8010a2c:	9201      	str	r2, [sp, #4]
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	460b      	mov	r3, r1
 8010a32:	fa1f f28c 	uxth.w	r2, ip
 8010a36:	4629      	mov	r1, r5
 8010a38:	f001 f8ca 	bl	8011bd0 <xTaskCreate>
 8010a3c:	2801      	cmp	r0, #1
 8010a3e:	d0de      	beq.n	80109fe <osThreadNew+0x6e>
            hTask = NULL;
 8010a40:	2300      	movs	r3, #0
 8010a42:	9305      	str	r3, [sp, #20]
 8010a44:	e7db      	b.n	80109fe <osThreadNew+0x6e>
        return (NULL);
 8010a46:	2000      	movs	r0, #0
 8010a48:	e7da      	b.n	8010a00 <osThreadNew+0x70>
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	e7d8      	b.n	8010a00 <osThreadNew+0x70>

08010a4e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010a4e:	b508      	push	{r3, lr}
 8010a50:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8010a54:	b933      	cbnz	r3, 8010a64 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8010a56:	b908      	cbnz	r0, 8010a5c <osDelay+0xe>
    stat = osOK;
 8010a58:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8010a5a:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8010a5c:	f001 fabe 	bl	8011fdc <vTaskDelay>
    stat = osOK;
 8010a60:	2000      	movs	r0, #0
 8010a62:	e7fa      	b.n	8010a5a <osDelay+0xc>
    stat = osErrorISR;
 8010a64:	f06f 0005 	mvn.w	r0, #5
 8010a68:	e7f7      	b.n	8010a5a <osDelay+0xc>

08010a6a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010a6a:	b570      	push	{r4, r5, r6, lr}
 8010a6c:	b082      	sub	sp, #8
 8010a6e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d13a      	bne.n	8010aec <osMessageQueueNew+0x82>
 8010a76:	4614      	mov	r4, r2
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	d03b      	beq.n	8010af4 <osMessageQueueNew+0x8a>
 8010a7c:	2900      	cmp	r1, #0
 8010a7e:	d03b      	beq.n	8010af8 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8010a80:	b36a      	cbz	r2, 8010ade <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010a82:	6893      	ldr	r3, [r2, #8]
 8010a84:	b14b      	cbz	r3, 8010a9a <osMessageQueueNew+0x30>
 8010a86:	68d2      	ldr	r2, [r2, #12]
 8010a88:	2a4f      	cmp	r2, #79	; 0x4f
 8010a8a:	d906      	bls.n	8010a9a <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010a8c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010a8e:	b122      	cbz	r2, 8010a9a <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010a90:	6966      	ldr	r6, [r4, #20]
 8010a92:	fb01 f500 	mul.w	r5, r1, r0
 8010a96:	42ae      	cmp	r6, r5
 8010a98:	d21b      	bcs.n	8010ad2 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010a9a:	b173      	cbz	r3, 8010aba <osMessageQueueNew+0x50>
    mem = -1;
 8010a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8010aa0:	bb63      	cbnz	r3, 8010afc <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f000 fa53 	bl	8010f4e <xQueueGenericCreate>
 8010aa8:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010aaa:	b305      	cbz	r5, 8010aee <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8010aac:	b104      	cbz	r4, 8010ab0 <osMessageQueueNew+0x46>
        name = attr->name;
 8010aae:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8010ab0:	4621      	mov	r1, r4
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	f000 fe30 	bl	8011718 <vQueueAddToRegistry>
 8010ab8:	e019      	b.n	8010aee <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010aba:	68e3      	ldr	r3, [r4, #12]
 8010abc:	b98b      	cbnz	r3, 8010ae2 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010abe:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010ac0:	b113      	cbz	r3, 8010ac8 <osMessageQueueNew+0x5e>
    mem = -1;
 8010ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ac6:	e7eb      	b.n	8010aa0 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010ac8:	6963      	ldr	r3, [r4, #20]
 8010aca:	b16b      	cbz	r3, 8010ae8 <osMessageQueueNew+0x7e>
    mem = -1;
 8010acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ad0:	e7e6      	b.n	8010aa0 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010ad2:	2500      	movs	r5, #0
 8010ad4:	9500      	str	r5, [sp, #0]
 8010ad6:	f000 f9f0 	bl	8010eba <xQueueGenericCreateStatic>
 8010ada:	4605      	mov	r5, r0
 8010adc:	e7e5      	b.n	8010aaa <osMessageQueueNew+0x40>
      mem = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	e7de      	b.n	8010aa0 <osMessageQueueNew+0x36>
    mem = -1;
 8010ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ae6:	e7db      	b.n	8010aa0 <osMessageQueueNew+0x36>
          mem = 0;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	e7d9      	b.n	8010aa0 <osMessageQueueNew+0x36>
  hQueue = NULL;
 8010aec:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8010aee:	4628      	mov	r0, r5
 8010af0:	b002      	add	sp, #8
 8010af2:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8010af4:	2500      	movs	r5, #0
 8010af6:	e7fa      	b.n	8010aee <osMessageQueueNew+0x84>
 8010af8:	2500      	movs	r5, #0
 8010afa:	e7f8      	b.n	8010aee <osMessageQueueNew+0x84>
 8010afc:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8010afe:	e7f6      	b.n	8010aee <osMessageQueueNew+0x84>

08010b00 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010b00:	b510      	push	{r4, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	461c      	mov	r4, r3
 8010b06:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8010b0a:	b1b3      	cbz	r3, 8010b3a <osMessageQueuePut+0x3a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b0c:	b308      	cbz	r0, 8010b52 <osMessageQueuePut+0x52>
 8010b0e:	b319      	cbz	r1, 8010b58 <osMessageQueuePut+0x58>
 8010b10:	bb2c      	cbnz	r4, 8010b5e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8010b12:	2300      	movs	r3, #0
 8010b14:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010b16:	aa01      	add	r2, sp, #4
 8010b18:	f000 fb44 	bl	80111a4 <xQueueGenericSendFromISR>
 8010b1c:	2801      	cmp	r0, #1
 8010b1e:	d121      	bne.n	8010b64 <osMessageQueuePut+0x64>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8010b20:	9801      	ldr	r0, [sp, #4]
 8010b22:	b140      	cbz	r0, 8010b36 <osMessageQueuePut+0x36>
 8010b24:	4b16      	ldr	r3, [pc, #88]	; (8010b80 <osMessageQueuePut+0x80>)
 8010b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b2a:	601a      	str	r2, [r3, #0]
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8010b34:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8010b36:	b002      	add	sp, #8
 8010b38:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010b3a:	b1b0      	cbz	r0, 8010b6a <osMessageQueuePut+0x6a>
 8010b3c:	b1c1      	cbz	r1, 8010b70 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010b3e:	2300      	movs	r3, #0
 8010b40:	4622      	mov	r2, r4
 8010b42:	f000 fa29 	bl	8010f98 <xQueueGenericSend>
 8010b46:	2801      	cmp	r0, #1
 8010b48:	d015      	beq.n	8010b76 <osMessageQueuePut+0x76>
        if (timeout != 0U) {
 8010b4a:	b1b4      	cbz	r4, 8010b7a <osMessageQueuePut+0x7a>
          stat = osErrorTimeout;
 8010b4c:	f06f 0001 	mvn.w	r0, #1
 8010b50:	e7f1      	b.n	8010b36 <osMessageQueuePut+0x36>
      stat = osErrorParameter;
 8010b52:	f06f 0003 	mvn.w	r0, #3
 8010b56:	e7ee      	b.n	8010b36 <osMessageQueuePut+0x36>
 8010b58:	f06f 0003 	mvn.w	r0, #3
 8010b5c:	e7eb      	b.n	8010b36 <osMessageQueuePut+0x36>
 8010b5e:	f06f 0003 	mvn.w	r0, #3
 8010b62:	e7e8      	b.n	8010b36 <osMessageQueuePut+0x36>
        stat = osErrorResource;
 8010b64:	f06f 0002 	mvn.w	r0, #2
 8010b68:	e7e5      	b.n	8010b36 <osMessageQueuePut+0x36>
      stat = osErrorParameter;
 8010b6a:	f06f 0003 	mvn.w	r0, #3
 8010b6e:	e7e2      	b.n	8010b36 <osMessageQueuePut+0x36>
 8010b70:	f06f 0003 	mvn.w	r0, #3
 8010b74:	e7df      	b.n	8010b36 <osMessageQueuePut+0x36>
  stat = osOK;
 8010b76:	2000      	movs	r0, #0
 8010b78:	e7dd      	b.n	8010b36 <osMessageQueuePut+0x36>
          stat = osErrorResource;
 8010b7a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8010b7e:	e7da      	b.n	8010b36 <osMessageQueuePut+0x36>
 8010b80:	e000ed04 	.word	0xe000ed04

08010b84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010b84:	b510      	push	{r4, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	461c      	mov	r4, r3
 8010b8a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8010b8e:	b1b3      	cbz	r3, 8010bbe <osMessageQueueGet+0x3a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010b90:	b300      	cbz	r0, 8010bd4 <osMessageQueueGet+0x50>
 8010b92:	b311      	cbz	r1, 8010bda <osMessageQueueGet+0x56>
 8010b94:	bb24      	cbnz	r4, 8010be0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8010b96:	2300      	movs	r3, #0
 8010b98:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010b9a:	aa01      	add	r2, sp, #4
 8010b9c:	f000 fd66 	bl	801166c <xQueueReceiveFromISR>
 8010ba0:	2801      	cmp	r0, #1
 8010ba2:	d120      	bne.n	8010be6 <osMessageQueueGet+0x62>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8010ba4:	9801      	ldr	r0, [sp, #4]
 8010ba6:	b140      	cbz	r0, 8010bba <osMessageQueueGet+0x36>
 8010ba8:	4b16      	ldr	r3, [pc, #88]	; (8010c04 <osMessageQueueGet+0x80>)
 8010baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bae:	601a      	str	r2, [r3, #0]
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8010bb8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8010bba:	b002      	add	sp, #8
 8010bbc:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010bbe:	b1a8      	cbz	r0, 8010bec <osMessageQueueGet+0x68>
 8010bc0:	b1b9      	cbz	r1, 8010bf2 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	f000 fbb0 	bl	8011328 <xQueueReceive>
 8010bc8:	2801      	cmp	r0, #1
 8010bca:	d015      	beq.n	8010bf8 <osMessageQueueGet+0x74>
        if (timeout != 0U) {
 8010bcc:	b1b4      	cbz	r4, 8010bfc <osMessageQueueGet+0x78>
          stat = osErrorTimeout;
 8010bce:	f06f 0001 	mvn.w	r0, #1
 8010bd2:	e7f2      	b.n	8010bba <osMessageQueueGet+0x36>
      stat = osErrorParameter;
 8010bd4:	f06f 0003 	mvn.w	r0, #3
 8010bd8:	e7ef      	b.n	8010bba <osMessageQueueGet+0x36>
 8010bda:	f06f 0003 	mvn.w	r0, #3
 8010bde:	e7ec      	b.n	8010bba <osMessageQueueGet+0x36>
 8010be0:	f06f 0003 	mvn.w	r0, #3
 8010be4:	e7e9      	b.n	8010bba <osMessageQueueGet+0x36>
        stat = osErrorResource;
 8010be6:	f06f 0002 	mvn.w	r0, #2
 8010bea:	e7e6      	b.n	8010bba <osMessageQueueGet+0x36>
      stat = osErrorParameter;
 8010bec:	f06f 0003 	mvn.w	r0, #3
 8010bf0:	e7e3      	b.n	8010bba <osMessageQueueGet+0x36>
 8010bf2:	f06f 0003 	mvn.w	r0, #3
 8010bf6:	e7e0      	b.n	8010bba <osMessageQueueGet+0x36>
  stat = osOK;
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	e7de      	b.n	8010bba <osMessageQueueGet+0x36>
          stat = osErrorResource;
 8010bfc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8010c00:	e7db      	b.n	8010bba <osMessageQueueGet+0x36>
 8010c02:	bf00      	nop
 8010c04:	e000ed04 	.word	0xe000ed04

08010c08 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010c08:	4b03      	ldr	r3, [pc, #12]	; (8010c18 <vApplicationGetIdleTaskMemory+0x10>)
 8010c0a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010c0c:	4b03      	ldr	r3, [pc, #12]	; (8010c1c <vApplicationGetIdleTaskMemory+0x14>)
 8010c0e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010c10:	2380      	movs	r3, #128	; 0x80
 8010c12:	6013      	str	r3, [r2, #0]
}
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop
 8010c18:	20001aa8 	.word	0x20001aa8
 8010c1c:	200018a4 	.word	0x200018a4

08010c20 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010c20:	4b03      	ldr	r3, [pc, #12]	; (8010c30 <vApplicationGetTimerTaskMemory+0x10>)
 8010c22:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010c24:	4b03      	ldr	r3, [pc, #12]	; (8010c34 <vApplicationGetTimerTaskMemory+0x14>)
 8010c26:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c2c:	6013      	str	r3, [r2, #0]
}
 8010c2e:	4770      	bx	lr
 8010c30:	20002338 	.word	0x20002338
 8010c34:	20001f34 	.word	0x20001f34

08010c38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c38:	f100 0308 	add.w	r3, r0, #8
 8010c3c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c42:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c44:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010c46:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010c4c:	4770      	bx	lr

08010c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010c52:	4770      	bx	lr

08010c54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8010c54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010c56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c58:	689a      	ldr	r2, [r3, #8]
 8010c5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c5c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c5e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c60:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8010c62:	6803      	ldr	r3, [r0, #0]
 8010c64:	3301      	adds	r3, #1
 8010c66:	6003      	str	r3, [r0, #0]
}
 8010c68:	4770      	bx	lr

08010c6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010c6a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010c6c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010c6e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8010c72:	d011      	beq.n	8010c98 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010c74:	f100 0308 	add.w	r3, r0, #8
 8010c78:	461c      	mov	r4, r3
 8010c7a:	685b      	ldr	r3, [r3, #4]
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	42aa      	cmp	r2, r5
 8010c80:	d9fa      	bls.n	8010c78 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010c82:	6863      	ldr	r3, [r4, #4]
 8010c84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010c86:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010c88:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010c8a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010c8c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8010c8e:	6803      	ldr	r3, [r0, #0]
 8010c90:	3301      	adds	r3, #1
 8010c92:	6003      	str	r3, [r0, #0]
}
 8010c94:	bc30      	pop	{r4, r5}
 8010c96:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8010c98:	6904      	ldr	r4, [r0, #16]
 8010c9a:	e7f2      	b.n	8010c82 <vListInsert+0x18>

08010c9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010c9c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c9e:	6841      	ldr	r1, [r0, #4]
 8010ca0:	6882      	ldr	r2, [r0, #8]
 8010ca2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010ca4:	6841      	ldr	r1, [r0, #4]
 8010ca6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010ca8:	685a      	ldr	r2, [r3, #4]
 8010caa:	4282      	cmp	r2, r0
 8010cac:	d006      	beq.n	8010cbc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010cae:	2200      	movs	r2, #0
 8010cb0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	3a01      	subs	r2, #1
 8010cb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010cb8:	6818      	ldr	r0, [r3, #0]
}
 8010cba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010cbc:	6882      	ldr	r2, [r0, #8]
 8010cbe:	605a      	str	r2, [r3, #4]
 8010cc0:	e7f5      	b.n	8010cae <uxListRemove+0x12>

08010cc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010cc2:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010cc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010cc6:	b118      	cbz	r0, 8010cd0 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cca:	6818      	ldr	r0, [r3, #0]
 8010ccc:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8010cd0:	4770      	bx	lr

08010cd2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010cd2:	b510      	push	{r4, lr}
 8010cd4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010cd6:	f001 fe65 	bl	80129a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010cda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010cdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d004      	beq.n	8010cec <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8010ce2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8010ce4:	f001 fe80 	bl	80129e8 <vPortExitCritical>

	return xReturn;
}
 8010ce8:	4620      	mov	r0, r4
 8010cea:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8010cec:	2401      	movs	r4, #1
 8010cee:	e7f9      	b.n	8010ce4 <prvIsQueueFull+0x12>

08010cf0 <prvIsQueueEmpty>:
{
 8010cf0:	b510      	push	{r4, lr}
 8010cf2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010cf4:	f001 fe56 	bl	80129a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010cfa:	b923      	cbnz	r3, 8010d06 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8010cfc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8010cfe:	f001 fe73 	bl	80129e8 <vPortExitCritical>
}
 8010d02:	4620      	mov	r0, r4
 8010d04:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8010d06:	2400      	movs	r4, #0
 8010d08:	e7f9      	b.n	8010cfe <prvIsQueueEmpty+0xe>

08010d0a <prvCopyDataToQueue>:
{
 8010d0a:	b570      	push	{r4, r5, r6, lr}
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d10:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d12:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010d14:	b95a      	cbnz	r2, 8010d2e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d16:	6803      	ldr	r3, [r0, #0]
 8010d18:	b11b      	cbz	r3, 8010d22 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8010d1a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d1c:	3601      	adds	r6, #1
 8010d1e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8010d20:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d22:	6880      	ldr	r0, [r0, #8]
 8010d24:	f001 fb02 	bl	801232c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	60a3      	str	r3, [r4, #8]
 8010d2c:	e7f6      	b.n	8010d1c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8010d2e:	b96d      	cbnz	r5, 8010d4c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d30:	6840      	ldr	r0, [r0, #4]
 8010d32:	f003 fad9 	bl	80142e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d36:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010d38:	6863      	ldr	r3, [r4, #4]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d3e:	68a2      	ldr	r2, [r4, #8]
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d319      	bcc.n	8010d78 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d44:	6823      	ldr	r3, [r4, #0]
 8010d46:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8010d48:	4628      	mov	r0, r5
 8010d4a:	e7e7      	b.n	8010d1c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d4c:	68c0      	ldr	r0, [r0, #12]
 8010d4e:	f003 facb 	bl	80142e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010d52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010d54:	4251      	negs	r1, r2
 8010d56:	68e3      	ldr	r3, [r4, #12]
 8010d58:	1a9b      	subs	r3, r3, r2
 8010d5a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d5c:	6822      	ldr	r2, [r4, #0]
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d202      	bcs.n	8010d68 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010d62:	68a3      	ldr	r3, [r4, #8]
 8010d64:	440b      	add	r3, r1
 8010d66:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010d68:	2d02      	cmp	r5, #2
 8010d6a:	d001      	beq.n	8010d70 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	e7d5      	b.n	8010d1c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d70:	b126      	cbz	r6, 8010d7c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8010d72:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8010d74:	2000      	movs	r0, #0
 8010d76:	e7d1      	b.n	8010d1c <prvCopyDataToQueue+0x12>
 8010d78:	4628      	mov	r0, r5
 8010d7a:	e7cf      	b.n	8010d1c <prvCopyDataToQueue+0x12>
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	e7cd      	b.n	8010d1c <prvCopyDataToQueue+0x12>

08010d80 <prvCopyDataFromQueue>:
{
 8010d80:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010d84:	b16a      	cbz	r2, 8010da2 <prvCopyDataFromQueue+0x22>
{
 8010d86:	b510      	push	{r4, lr}
 8010d88:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d8a:	68d9      	ldr	r1, [r3, #12]
 8010d8c:	4411      	add	r1, r2
 8010d8e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d90:	689c      	ldr	r4, [r3, #8]
 8010d92:	42a1      	cmp	r1, r4
 8010d94:	d301      	bcc.n	8010d9a <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010d96:	6819      	ldr	r1, [r3, #0]
 8010d98:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d9a:	68d9      	ldr	r1, [r3, #12]
 8010d9c:	f003 faa4 	bl	80142e8 <memcpy>
}
 8010da0:	bd10      	pop	{r4, pc}
 8010da2:	4770      	bx	lr

08010da4 <prvUnlockQueue>:
{
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8010da8:	f001 fdfc 	bl	80129a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010dac:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8010db0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010db2:	e003      	b.n	8010dbc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8010db4:	f001 fa52 	bl	801225c <vTaskMissedYield>
			--cTxLock;
 8010db8:	3c01      	subs	r4, #1
 8010dba:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dbc:	2c00      	cmp	r4, #0
 8010dbe:	dd08      	ble.n	8010dd2 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010dc2:	b133      	cbz	r3, 8010dd2 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010dc4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8010dc8:	f001 f9b4 	bl	8012134 <xTaskRemoveFromEventList>
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	d0f3      	beq.n	8010db8 <prvUnlockQueue+0x14>
 8010dd0:	e7f0      	b.n	8010db4 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8010dd2:	23ff      	movs	r3, #255	; 0xff
 8010dd4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8010dd8:	f001 fe06 	bl	80129e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010ddc:	f001 fde2 	bl	80129a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010de0:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8010de4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010de6:	e003      	b.n	8010df0 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8010de8:	f001 fa38 	bl	801225c <vTaskMissedYield>
				--cRxLock;
 8010dec:	3c01      	subs	r4, #1
 8010dee:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010df0:	2c00      	cmp	r4, #0
 8010df2:	dd08      	ble.n	8010e06 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010df4:	692b      	ldr	r3, [r5, #16]
 8010df6:	b133      	cbz	r3, 8010e06 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010df8:	f105 0010 	add.w	r0, r5, #16
 8010dfc:	f001 f99a 	bl	8012134 <xTaskRemoveFromEventList>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	d0f3      	beq.n	8010dec <prvUnlockQueue+0x48>
 8010e04:	e7f0      	b.n	8010de8 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8010e06:	23ff      	movs	r3, #255	; 0xff
 8010e08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8010e0c:	f001 fdec 	bl	80129e8 <vPortExitCritical>
}
 8010e10:	bd38      	pop	{r3, r4, r5, pc}
	...

08010e14 <xQueueGenericReset>:
{
 8010e14:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8010e16:	b1e0      	cbz	r0, 8010e52 <xQueueGenericReset+0x3e>
 8010e18:	460d      	mov	r5, r1
 8010e1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010e1c:	f001 fdc2 	bl	80129a4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e20:	6821      	ldr	r1, [r4, #0]
 8010e22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010e24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e26:	fb03 1002 	mla	r0, r3, r2, r1
 8010e2a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e30:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e32:	3a01      	subs	r2, #1
 8010e34:	fb02 1303 	mla	r3, r2, r3, r1
 8010e38:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010e3a:	23ff      	movs	r3, #255	; 0xff
 8010e3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010e40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8010e44:	b9ed      	cbnz	r5, 8010e82 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e46:	6923      	ldr	r3, [r4, #16]
 8010e48:	b963      	cbnz	r3, 8010e64 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8010e4a:	f001 fdcd 	bl	80129e8 <vPortExitCritical>
}
 8010e4e:	2001      	movs	r0, #1
 8010e50:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e56:	f383 8811 	msr	BASEPRI, r3
 8010e5a:	f3bf 8f6f 	isb	sy
 8010e5e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010e62:	e7fe      	b.n	8010e62 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e64:	f104 0010 	add.w	r0, r4, #16
 8010e68:	f001 f964 	bl	8012134 <xTaskRemoveFromEventList>
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	d0ec      	beq.n	8010e4a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8010e70:	4b08      	ldr	r3, [pc, #32]	; (8010e94 <xQueueGenericReset+0x80>)
 8010e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e76:	601a      	str	r2, [r3, #0]
 8010e78:	f3bf 8f4f 	dsb	sy
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	e7e3      	b.n	8010e4a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010e82:	f104 0010 	add.w	r0, r4, #16
 8010e86:	f7ff fed7 	bl	8010c38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010e8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010e8e:	f7ff fed3 	bl	8010c38 <vListInitialise>
 8010e92:	e7da      	b.n	8010e4a <xQueueGenericReset+0x36>
 8010e94:	e000ed04 	.word	0xe000ed04

08010e98 <prvInitialiseNewQueue>:
{
 8010e98:	b538      	push	{r3, r4, r5, lr}
 8010e9a:	461d      	mov	r5, r3
 8010e9c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	b949      	cbnz	r1, 8010eb6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010ea2:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8010ea4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010ea6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ea8:	2101      	movs	r1, #1
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f7ff ffb2 	bl	8010e14 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8010eb0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8010eb4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010eb6:	6022      	str	r2, [r4, #0]
 8010eb8:	e7f4      	b.n	8010ea4 <prvInitialiseNewQueue+0xc>

08010eba <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010eba:	b940      	cbnz	r0, 8010ece <xQueueGenericCreateStatic+0x14>
 8010ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec0:	f383 8811 	msr	BASEPRI, r3
 8010ec4:	f3bf 8f6f 	isb	sy
 8010ec8:	f3bf 8f4f 	dsb	sy
 8010ecc:	e7fe      	b.n	8010ecc <xQueueGenericCreateStatic+0x12>
	{
 8010ece:	b530      	push	{r4, r5, lr}
 8010ed0:	b085      	sub	sp, #20
 8010ed2:	461c      	mov	r4, r3
 8010ed4:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 8010ed6:	b153      	cbz	r3, 8010eee <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010ed8:	b192      	cbz	r2, 8010f00 <xQueueGenericCreateStatic+0x46>
 8010eda:	b989      	cbnz	r1, 8010f00 <xQueueGenericCreateStatic+0x46>
 8010edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee0:	f383 8811 	msr	BASEPRI, r3
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	f3bf 8f4f 	dsb	sy
 8010eec:	e7fe      	b.n	8010eec <xQueueGenericCreateStatic+0x32>
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	f383 8811 	msr	BASEPRI, r3
 8010ef6:	f3bf 8f6f 	isb	sy
 8010efa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8010efe:	e7fe      	b.n	8010efe <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010f00:	b16a      	cbz	r2, 8010f1e <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010f02:	2350      	movs	r3, #80	; 0x50
 8010f04:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010f06:	9b03      	ldr	r3, [sp, #12]
 8010f08:	2b50      	cmp	r3, #80	; 0x50
 8010f0a:	d013      	beq.n	8010f34 <xQueueGenericCreateStatic+0x7a>
 8010f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f10:	f383 8811 	msr	BASEPRI, r3
 8010f14:	f3bf 8f6f 	isb	sy
 8010f18:	f3bf 8f4f 	dsb	sy
 8010f1c:	e7fe      	b.n	8010f1c <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010f1e:	2900      	cmp	r1, #0
 8010f20:	d0ef      	beq.n	8010f02 <xQueueGenericCreateStatic+0x48>
 8010f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f26:	f383 8811 	msr	BASEPRI, r3
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	f3bf 8f4f 	dsb	sy
 8010f32:	e7fe      	b.n	8010f32 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010f34:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010f36:	2301      	movs	r3, #1
 8010f38:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f3c:	9400      	str	r4, [sp, #0]
 8010f3e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8010f42:	4628      	mov	r0, r5
 8010f44:	f7ff ffa8 	bl	8010e98 <prvInitialiseNewQueue>
	}
 8010f48:	4620      	mov	r0, r4
 8010f4a:	b005      	add	sp, #20
 8010f4c:	bd30      	pop	{r4, r5, pc}

08010f4e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f4e:	b940      	cbnz	r0, 8010f62 <xQueueGenericCreate+0x14>
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	e7fe      	b.n	8010f60 <xQueueGenericCreate+0x12>
	{
 8010f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f64:	b083      	sub	sp, #12
 8010f66:	460d      	mov	r5, r1
 8010f68:	4616      	mov	r6, r2
 8010f6a:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f6c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010f70:	3050      	adds	r0, #80	; 0x50
 8010f72:	f001 fecd 	bl	8012d10 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010f76:	4604      	mov	r4, r0
 8010f78:	b150      	cbz	r0, 8010f90 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010f80:	9000      	str	r0, [sp, #0]
 8010f82:	4633      	mov	r3, r6
 8010f84:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010f88:	4629      	mov	r1, r5
 8010f8a:	4638      	mov	r0, r7
 8010f8c:	f7ff ff84 	bl	8010e98 <prvInitialiseNewQueue>
	}
 8010f90:	4620      	mov	r0, r4
 8010f92:	b003      	add	sp, #12
 8010f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010f98 <xQueueGenericSend>:
{
 8010f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8010f9e:	b188      	cbz	r0, 8010fc4 <xQueueGenericSend+0x2c>
 8010fa0:	460e      	mov	r6, r1
 8010fa2:	461d      	mov	r5, r3
 8010fa4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fa6:	b1b1      	cbz	r1, 8010fd6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fa8:	2d02      	cmp	r5, #2
 8010faa:	d120      	bne.n	8010fee <xQueueGenericSend+0x56>
 8010fac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d01d      	beq.n	8010fee <xQueueGenericSend+0x56>
 8010fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	e7fe      	b.n	8010fc2 <xQueueGenericSend+0x2a>
 8010fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8010fd4:	e7fe      	b.n	8010fd4 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d0e5      	beq.n	8010fa8 <xQueueGenericSend+0x10>
 8010fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe0:	f383 8811 	msr	BASEPRI, r3
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	f3bf 8f4f 	dsb	sy
 8010fec:	e7fe      	b.n	8010fec <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fee:	f001 f941 	bl	8012274 <xTaskGetSchedulerState>
 8010ff2:	4607      	mov	r7, r0
 8010ff4:	b958      	cbnz	r0, 801100e <xQueueGenericSend+0x76>
 8010ff6:	9b01      	ldr	r3, [sp, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d044      	beq.n	8011086 <xQueueGenericSend+0xee>
 8010ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011000:	f383 8811 	msr	BASEPRI, r3
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	e7fe      	b.n	801100c <xQueueGenericSend+0x74>
 801100e:	2700      	movs	r7, #0
 8011010:	e039      	b.n	8011086 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011012:	462a      	mov	r2, r5
 8011014:	4631      	mov	r1, r6
 8011016:	4620      	mov	r0, r4
 8011018:	f7ff fe77 	bl	8010d0a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801101c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801101e:	b96a      	cbnz	r2, 801103c <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 8011020:	b138      	cbz	r0, 8011032 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 8011022:	4b3c      	ldr	r3, [pc, #240]	; (8011114 <xQueueGenericSend+0x17c>)
 8011024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011032:	f001 fcd9 	bl	80129e8 <vPortExitCritical>
				return pdPASS;
 8011036:	2001      	movs	r0, #1
}
 8011038:	b005      	add	sp, #20
 801103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801103c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011040:	f001 f878 	bl	8012134 <xTaskRemoveFromEventList>
 8011044:	2800      	cmp	r0, #0
 8011046:	d0f4      	beq.n	8011032 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8011048:	4b32      	ldr	r3, [pc, #200]	; (8011114 <xQueueGenericSend+0x17c>)
 801104a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801104e:	601a      	str	r2, [r3, #0]
 8011050:	f3bf 8f4f 	dsb	sy
 8011054:	f3bf 8f6f 	isb	sy
 8011058:	e7eb      	b.n	8011032 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 801105a:	f001 fcc5 	bl	80129e8 <vPortExitCritical>
					return errQUEUE_FULL;
 801105e:	2000      	movs	r0, #0
 8011060:	e7ea      	b.n	8011038 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011062:	a802      	add	r0, sp, #8
 8011064:	f001 f8ac 	bl	80121c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011068:	2701      	movs	r7, #1
 801106a:	e019      	b.n	80110a0 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 801106c:	2300      	movs	r3, #0
 801106e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011072:	e021      	b.n	80110b8 <xQueueGenericSend+0x120>
 8011074:	2300      	movs	r3, #0
 8011076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801107a:	e023      	b.n	80110c4 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 801107c:	4620      	mov	r0, r4
 801107e:	f7ff fe91 	bl	8010da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011082:	f000 ff2f 	bl	8011ee4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8011086:	f001 fc8d 	bl	80129a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801108a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801108c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801108e:	429a      	cmp	r2, r3
 8011090:	d3bf      	bcc.n	8011012 <xQueueGenericSend+0x7a>
 8011092:	2d02      	cmp	r5, #2
 8011094:	d0bd      	beq.n	8011012 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011096:	9b01      	ldr	r3, [sp, #4]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d0de      	beq.n	801105a <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 801109c:	2f00      	cmp	r7, #0
 801109e:	d0e0      	beq.n	8011062 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80110a0:	f001 fca2 	bl	80129e8 <vPortExitCritical>
		vTaskSuspendAll();
 80110a4:	f000 fe7a 	bl	8011d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80110a8:	f001 fc7c 	bl	80129a4 <vPortEnterCritical>
 80110ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80110b0:	b25b      	sxtb	r3, r3
 80110b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110b6:	d0d9      	beq.n	801106c <xQueueGenericSend+0xd4>
 80110b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80110bc:	b25b      	sxtb	r3, r3
 80110be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110c2:	d0d7      	beq.n	8011074 <xQueueGenericSend+0xdc>
 80110c4:	f001 fc90 	bl	80129e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110c8:	a901      	add	r1, sp, #4
 80110ca:	a802      	add	r0, sp, #8
 80110cc:	f001 f884 	bl	80121d8 <xTaskCheckForTimeOut>
 80110d0:	b9c8      	cbnz	r0, 8011106 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80110d2:	4620      	mov	r0, r4
 80110d4:	f7ff fdfd 	bl	8010cd2 <prvIsQueueFull>
 80110d8:	2800      	cmp	r0, #0
 80110da:	d0cf      	beq.n	801107c <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80110dc:	9901      	ldr	r1, [sp, #4]
 80110de:	f104 0010 	add.w	r0, r4, #16
 80110e2:	f000 fff3 	bl	80120cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110e6:	4620      	mov	r0, r4
 80110e8:	f7ff fe5c 	bl	8010da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110ec:	f000 fefa 	bl	8011ee4 <xTaskResumeAll>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	d1c8      	bne.n	8011086 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 80110f4:	4b07      	ldr	r3, [pc, #28]	; (8011114 <xQueueGenericSend+0x17c>)
 80110f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110fa:	601a      	str	r2, [r3, #0]
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	e7bf      	b.n	8011086 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8011106:	4620      	mov	r0, r4
 8011108:	f7ff fe4c 	bl	8010da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801110c:	f000 feea 	bl	8011ee4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8011110:	2000      	movs	r0, #0
 8011112:	e791      	b.n	8011038 <xQueueGenericSend+0xa0>
 8011114:	e000ed04 	.word	0xe000ed04

08011118 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8011118:	b148      	cbz	r0, 801112e <prvInitialiseMutex+0x16>
	{
 801111a:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801111c:	2100      	movs	r1, #0
 801111e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011120:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011122:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011124:	460b      	mov	r3, r1
 8011126:	460a      	mov	r2, r1
 8011128:	f7ff ff36 	bl	8010f98 <xQueueGenericSend>
	}
 801112c:	bd10      	pop	{r4, pc}
 801112e:	4770      	bx	lr

08011130 <xQueueCreateMutex>:
	{
 8011130:	b510      	push	{r4, lr}
 8011132:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011134:	2100      	movs	r1, #0
 8011136:	2001      	movs	r0, #1
 8011138:	f7ff ff09 	bl	8010f4e <xQueueGenericCreate>
 801113c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801113e:	f7ff ffeb 	bl	8011118 <prvInitialiseMutex>
	}
 8011142:	4620      	mov	r0, r4
 8011144:	bd10      	pop	{r4, pc}

08011146 <xQueueCreateMutexStatic>:
	{
 8011146:	b510      	push	{r4, lr}
 8011148:	b082      	sub	sp, #8
 801114a:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801114c:	9000      	str	r0, [sp, #0]
 801114e:	2200      	movs	r2, #0
 8011150:	4611      	mov	r1, r2
 8011152:	2001      	movs	r0, #1
 8011154:	f7ff feb1 	bl	8010eba <xQueueGenericCreateStatic>
 8011158:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801115a:	f7ff ffdd 	bl	8011118 <prvInitialiseMutex>
	}
 801115e:	4620      	mov	r0, r4
 8011160:	b002      	add	sp, #8
 8011162:	bd10      	pop	{r4, pc}

08011164 <xQueueGiveMutexRecursive>:
	{
 8011164:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8011166:	b138      	cbz	r0, 8011178 <xQueueGiveMutexRecursive+0x14>
 8011168:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801116a:	6885      	ldr	r5, [r0, #8]
 801116c:	f001 f87c 	bl	8012268 <xTaskGetCurrentTaskHandle>
 8011170:	4285      	cmp	r5, r0
 8011172:	d00a      	beq.n	801118a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8011174:	2000      	movs	r0, #0
	}
 8011176:	bd38      	pop	{r3, r4, r5, pc}
 8011178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117c:	f383 8811 	msr	BASEPRI, r3
 8011180:	f3bf 8f6f 	isb	sy
 8011184:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8011188:	e7fe      	b.n	8011188 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801118a:	68e3      	ldr	r3, [r4, #12]
 801118c:	3b01      	subs	r3, #1
 801118e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011190:	b10b      	cbz	r3, 8011196 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8011192:	2001      	movs	r0, #1
		return xReturn;
 8011194:	e7ef      	b.n	8011176 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8011196:	461a      	mov	r2, r3
 8011198:	4619      	mov	r1, r3
 801119a:	4620      	mov	r0, r4
 801119c:	f7ff fefc 	bl	8010f98 <xQueueGenericSend>
			xReturn = pdPASS;
 80111a0:	2001      	movs	r0, #1
 80111a2:	e7e8      	b.n	8011176 <xQueueGiveMutexRecursive+0x12>

080111a4 <xQueueGenericSendFromISR>:
{
 80111a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80111a8:	b190      	cbz	r0, 80111d0 <xQueueGenericSendFromISR+0x2c>
 80111aa:	4689      	mov	r9, r1
 80111ac:	4690      	mov	r8, r2
 80111ae:	461f      	mov	r7, r3
 80111b0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111b2:	b1b1      	cbz	r1, 80111e2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80111b4:	2f02      	cmp	r7, #2
 80111b6:	d120      	bne.n	80111fa <xQueueGenericSendFromISR+0x56>
 80111b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d01d      	beq.n	80111fa <xQueueGenericSendFromISR+0x56>
 80111be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c2:	f383 8811 	msr	BASEPRI, r3
 80111c6:	f3bf 8f6f 	isb	sy
 80111ca:	f3bf 8f4f 	dsb	sy
 80111ce:	e7fe      	b.n	80111ce <xQueueGenericSendFromISR+0x2a>
 80111d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80111e0:	e7fe      	b.n	80111e0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d0e5      	beq.n	80111b4 <xQueueGenericSendFromISR+0x10>
 80111e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ec:	f383 8811 	msr	BASEPRI, r3
 80111f0:	f3bf 8f6f 	isb	sy
 80111f4:	f3bf 8f4f 	dsb	sy
 80111f8:	e7fe      	b.n	80111f8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80111fa:	f001 fcfd 	bl	8012bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80111fe:	f3ef 8611 	mrs	r6, BASEPRI
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011216:	429a      	cmp	r2, r3
 8011218:	d306      	bcc.n	8011228 <xQueueGenericSendFromISR+0x84>
 801121a:	2f02      	cmp	r7, #2
 801121c:	d004      	beq.n	8011228 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 801121e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011220:	f386 8811 	msr	BASEPRI, r6
}
 8011224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8011228:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801122c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801122e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011230:	463a      	mov	r2, r7
 8011232:	4649      	mov	r1, r9
 8011234:	4620      	mov	r0, r4
 8011236:	f7ff fd68 	bl	8010d0a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801123a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 801123e:	d005      	beq.n	801124c <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011240:	1c6b      	adds	r3, r5, #1
 8011242:	b25b      	sxtb	r3, r3
 8011244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8011248:	2001      	movs	r0, #1
 801124a:	e7e9      	b.n	8011220 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801124c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801124e:	b90b      	cbnz	r3, 8011254 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8011250:	2001      	movs	r0, #1
 8011252:	e7e5      	b.n	8011220 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011254:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011258:	f000 ff6c 	bl	8012134 <xTaskRemoveFromEventList>
 801125c:	b130      	cbz	r0, 801126c <xQueueGenericSendFromISR+0xc8>
							if( pxHigherPriorityTaskWoken != NULL )
 801125e:	f1b8 0f00 	cmp.w	r8, #0
 8011262:	d005      	beq.n	8011270 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011264:	2001      	movs	r0, #1
 8011266:	f8c8 0000 	str.w	r0, [r8]
 801126a:	e7d9      	b.n	8011220 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 801126c:	2001      	movs	r0, #1
 801126e:	e7d7      	b.n	8011220 <xQueueGenericSendFromISR+0x7c>
 8011270:	2001      	movs	r0, #1
 8011272:	e7d5      	b.n	8011220 <xQueueGenericSendFromISR+0x7c>

08011274 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8011274:	b168      	cbz	r0, 8011292 <xQueueGiveFromISR+0x1e>
{
 8011276:	b570      	push	{r4, r5, r6, lr}
 8011278:	460e      	mov	r6, r1
 801127a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 801127c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801127e:	b18b      	cbz	r3, 80112a4 <xQueueGiveFromISR+0x30>
	__asm volatile
 8011280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011284:	f383 8811 	msr	BASEPRI, r3
 8011288:	f3bf 8f6f 	isb	sy
 801128c:	f3bf 8f4f 	dsb	sy
 8011290:	e7fe      	b.n	8011290 <xQueueGiveFromISR+0x1c>
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80112a2:	e7fe      	b.n	80112a2 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80112a4:	6803      	ldr	r3, [r0, #0]
 80112a6:	b1eb      	cbz	r3, 80112e4 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112a8:	f001 fca6 	bl	8012bf8 <vPortValidateInterruptPriority>
	__asm volatile
 80112ac:	f3ef 8511 	mrs	r5, BASEPRI
 80112b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b4:	f383 8811 	msr	BASEPRI, r3
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80112c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d926      	bls.n	8011316 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80112c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80112cc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80112ce:	3201      	adds	r2, #1
 80112d0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80112d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112d6:	d011      	beq.n	80112fc <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80112d8:	3301      	adds	r3, #1
 80112da:	b25b      	sxtb	r3, r3
 80112dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80112e0:	2001      	movs	r0, #1
 80112e2:	e019      	b.n	8011318 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80112e4:	6883      	ldr	r3, [r0, #8]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0de      	beq.n	80112a8 <xQueueGiveFromISR+0x34>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	e7fe      	b.n	80112fa <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112fe:	b90b      	cbnz	r3, 8011304 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8011300:	2001      	movs	r0, #1
 8011302:	e009      	b.n	8011318 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011304:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011308:	f000 ff14 	bl	8012134 <xTaskRemoveFromEventList>
 801130c:	b138      	cbz	r0, 801131e <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 801130e:	b146      	cbz	r6, 8011322 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011310:	2001      	movs	r0, #1
 8011312:	6030      	str	r0, [r6, #0]
 8011314:	e000      	b.n	8011318 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8011316:	2000      	movs	r0, #0
	__asm volatile
 8011318:	f385 8811 	msr	BASEPRI, r5
}
 801131c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 801131e:	2001      	movs	r0, #1
 8011320:	e7fa      	b.n	8011318 <xQueueGiveFromISR+0xa4>
 8011322:	2001      	movs	r0, #1
 8011324:	e7f8      	b.n	8011318 <xQueueGiveFromISR+0xa4>
	...

08011328 <xQueueReceive>:
{
 8011328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801132a:	b085      	sub	sp, #20
 801132c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801132e:	b190      	cbz	r0, 8011356 <xQueueReceive+0x2e>
 8011330:	460e      	mov	r6, r1
 8011332:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011334:	b1c1      	cbz	r1, 8011368 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011336:	f000 ff9d 	bl	8012274 <xTaskGetSchedulerState>
 801133a:	4607      	mov	r7, r0
 801133c:	bb00      	cbnz	r0, 8011380 <xQueueReceive+0x58>
 801133e:	9b01      	ldr	r3, [sp, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d05c      	beq.n	80113fe <xQueueReceive+0xd6>
	__asm volatile
 8011344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011348:	f383 8811 	msr	BASEPRI, r3
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f3bf 8f4f 	dsb	sy
 8011354:	e7fe      	b.n	8011354 <xQueueReceive+0x2c>
 8011356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8011366:	e7fe      	b.n	8011366 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011368:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801136a:	2b00      	cmp	r3, #0
 801136c:	d0e3      	beq.n	8011336 <xQueueReceive+0xe>
 801136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011372:	f383 8811 	msr	BASEPRI, r3
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	f3bf 8f4f 	dsb	sy
 801137e:	e7fe      	b.n	801137e <xQueueReceive+0x56>
 8011380:	2700      	movs	r7, #0
 8011382:	e03c      	b.n	80113fe <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011384:	4631      	mov	r1, r6
 8011386:	4620      	mov	r0, r4
 8011388:	f7ff fcfa 	bl	8010d80 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801138c:	3d01      	subs	r5, #1
 801138e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011390:	6923      	ldr	r3, [r4, #16]
 8011392:	b923      	cbnz	r3, 801139e <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8011394:	f001 fb28 	bl	80129e8 <vPortExitCritical>
				return pdPASS;
 8011398:	2001      	movs	r0, #1
}
 801139a:	b005      	add	sp, #20
 801139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801139e:	f104 0010 	add.w	r0, r4, #16
 80113a2:	f000 fec7 	bl	8012134 <xTaskRemoveFromEventList>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d0f4      	beq.n	8011394 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80113aa:	4b35      	ldr	r3, [pc, #212]	; (8011480 <xQueueReceive+0x158>)
 80113ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113b0:	601a      	str	r2, [r3, #0]
 80113b2:	f3bf 8f4f 	dsb	sy
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	e7eb      	b.n	8011394 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80113bc:	f001 fb14 	bl	80129e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80113c0:	2000      	movs	r0, #0
 80113c2:	e7ea      	b.n	801139a <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113c4:	a802      	add	r0, sp, #8
 80113c6:	f000 fefb 	bl	80121c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113ca:	2701      	movs	r7, #1
 80113cc:	e021      	b.n	8011412 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 80113ce:	2300      	movs	r3, #0
 80113d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80113d4:	e029      	b.n	801142a <xQueueReceive+0x102>
 80113d6:	2300      	movs	r3, #0
 80113d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113dc:	e02b      	b.n	8011436 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 80113de:	4620      	mov	r0, r4
 80113e0:	f7ff fce0 	bl	8010da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80113e4:	f000 fd7e 	bl	8011ee4 <xTaskResumeAll>
 80113e8:	e009      	b.n	80113fe <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80113ea:	4620      	mov	r0, r4
 80113ec:	f7ff fcda 	bl	8010da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80113f0:	f000 fd78 	bl	8011ee4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80113f4:	4620      	mov	r0, r4
 80113f6:	f7ff fc7b 	bl	8010cf0 <prvIsQueueEmpty>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d13d      	bne.n	801147a <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 80113fe:	f001 fad1 	bl	80129a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011402:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011404:	2d00      	cmp	r5, #0
 8011406:	d1bd      	bne.n	8011384 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8011408:	9b01      	ldr	r3, [sp, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d0d6      	beq.n	80113bc <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 801140e:	2f00      	cmp	r7, #0
 8011410:	d0d8      	beq.n	80113c4 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 8011412:	f001 fae9 	bl	80129e8 <vPortExitCritical>
		vTaskSuspendAll();
 8011416:	f000 fcc1 	bl	8011d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801141a:	f001 fac3 	bl	80129a4 <vPortEnterCritical>
 801141e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011422:	b25b      	sxtb	r3, r3
 8011424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011428:	d0d1      	beq.n	80113ce <xQueueReceive+0xa6>
 801142a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801142e:	b25b      	sxtb	r3, r3
 8011430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011434:	d0cf      	beq.n	80113d6 <xQueueReceive+0xae>
 8011436:	f001 fad7 	bl	80129e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801143a:	a901      	add	r1, sp, #4
 801143c:	a802      	add	r0, sp, #8
 801143e:	f000 fecb 	bl	80121d8 <xTaskCheckForTimeOut>
 8011442:	2800      	cmp	r0, #0
 8011444:	d1d1      	bne.n	80113ea <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011446:	4620      	mov	r0, r4
 8011448:	f7ff fc52 	bl	8010cf0 <prvIsQueueEmpty>
 801144c:	2800      	cmp	r0, #0
 801144e:	d0c6      	beq.n	80113de <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011450:	9901      	ldr	r1, [sp, #4]
 8011452:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011456:	f000 fe39 	bl	80120cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801145a:	4620      	mov	r0, r4
 801145c:	f7ff fca2 	bl	8010da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011460:	f000 fd40 	bl	8011ee4 <xTaskResumeAll>
 8011464:	2800      	cmp	r0, #0
 8011466:	d1ca      	bne.n	80113fe <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8011468:	4b05      	ldr	r3, [pc, #20]	; (8011480 <xQueueReceive+0x158>)
 801146a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801146e:	601a      	str	r2, [r3, #0]
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	f3bf 8f6f 	isb	sy
 8011478:	e7c1      	b.n	80113fe <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 801147a:	2000      	movs	r0, #0
 801147c:	e78d      	b.n	801139a <xQueueReceive+0x72>
 801147e:	bf00      	nop
 8011480:	e000ed04 	.word	0xe000ed04

08011484 <xQueueSemaphoreTake>:
{
 8011484:	b570      	push	{r4, r5, r6, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801148a:	b158      	cbz	r0, 80114a4 <xQueueSemaphoreTake+0x20>
 801148c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 801148e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011490:	b18b      	cbz	r3, 80114b6 <xQueueSemaphoreTake+0x32>
 8011492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011496:	f383 8811 	msr	BASEPRI, r3
 801149a:	f3bf 8f6f 	isb	sy
 801149e:	f3bf 8f4f 	dsb	sy
 80114a2:	e7fe      	b.n	80114a2 <xQueueSemaphoreTake+0x1e>
 80114a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a8:	f383 8811 	msr	BASEPRI, r3
 80114ac:	f3bf 8f6f 	isb	sy
 80114b0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80114b4:	e7fe      	b.n	80114b4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114b6:	f000 fedd 	bl	8012274 <xTaskGetSchedulerState>
 80114ba:	4606      	mov	r6, r0
 80114bc:	b950      	cbnz	r0, 80114d4 <xQueueSemaphoreTake+0x50>
 80114be:	9b01      	ldr	r3, [sp, #4]
 80114c0:	b15b      	cbz	r3, 80114da <xQueueSemaphoreTake+0x56>
 80114c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c6:	f383 8811 	msr	BASEPRI, r3
 80114ca:	f3bf 8f6f 	isb	sy
 80114ce:	f3bf 8f4f 	dsb	sy
 80114d2:	e7fe      	b.n	80114d2 <xQueueSemaphoreTake+0x4e>
 80114d4:	2500      	movs	r5, #0
 80114d6:	462e      	mov	r6, r5
 80114d8:	e053      	b.n	8011582 <xQueueSemaphoreTake+0xfe>
 80114da:	4605      	mov	r5, r0
 80114dc:	e051      	b.n	8011582 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80114de:	3b01      	subs	r3, #1
 80114e0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	b13b      	cbz	r3, 80114f6 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114e6:	6923      	ldr	r3, [r4, #16]
 80114e8:	b94b      	cbnz	r3, 80114fe <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 80114ea:	f001 fa7d 	bl	80129e8 <vPortExitCritical>
				return pdPASS;
 80114ee:	2501      	movs	r5, #1
}
 80114f0:	4628      	mov	r0, r5
 80114f2:	b004      	add	sp, #16
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80114f6:	f000 ffb3 	bl	8012460 <pvTaskIncrementMutexHeldCount>
 80114fa:	60a0      	str	r0, [r4, #8]
 80114fc:	e7f3      	b.n	80114e6 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114fe:	f104 0010 	add.w	r0, r4, #16
 8011502:	f000 fe17 	bl	8012134 <xTaskRemoveFromEventList>
 8011506:	2800      	cmp	r0, #0
 8011508:	d0ef      	beq.n	80114ea <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 801150a:	4b46      	ldr	r3, [pc, #280]	; (8011624 <xQueueSemaphoreTake+0x1a0>)
 801150c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011510:	601a      	str	r2, [r3, #0]
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	f3bf 8f6f 	isb	sy
 801151a:	e7e6      	b.n	80114ea <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 801151c:	b145      	cbz	r5, 8011530 <xQueueSemaphoreTake+0xac>
 801151e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
 801152e:	e7fe      	b.n	801152e <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
 8011530:	f001 fa5a 	bl	80129e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8011534:	e7dc      	b.n	80114f0 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011536:	a802      	add	r0, sp, #8
 8011538:	f000 fe42 	bl	80121c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801153c:	2601      	movs	r6, #1
 801153e:	e02a      	b.n	8011596 <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
 8011540:	2300      	movs	r3, #0
 8011542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011546:	e032      	b.n	80115ae <xQueueSemaphoreTake+0x12a>
 8011548:	2300      	movs	r3, #0
 801154a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801154e:	e034      	b.n	80115ba <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
 8011550:	f001 fa28 	bl	80129a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011554:	68a0      	ldr	r0, [r4, #8]
 8011556:	f000 fe9d 	bl	8012294 <xTaskPriorityInherit>
 801155a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801155c:	f001 fa44 	bl	80129e8 <vPortExitCritical>
 8011560:	e03b      	b.n	80115da <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
 8011562:	4620      	mov	r0, r4
 8011564:	f7ff fc1e 	bl	8010da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011568:	f000 fcbc 	bl	8011ee4 <xTaskResumeAll>
 801156c:	e009      	b.n	8011582 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
 801156e:	4620      	mov	r0, r4
 8011570:	f7ff fc18 	bl	8010da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011574:	f000 fcb6 	bl	8011ee4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011578:	4620      	mov	r0, r4
 801157a:	f7ff fbb9 	bl	8010cf0 <prvIsQueueEmpty>
 801157e:	2800      	cmp	r0, #0
 8011580:	d140      	bne.n	8011604 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
 8011582:	f001 fa0f 	bl	80129a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011588:	2b00      	cmp	r3, #0
 801158a:	d1a8      	bne.n	80114de <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 801158c:	9b01      	ldr	r3, [sp, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d0c4      	beq.n	801151c <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8011592:	2e00      	cmp	r6, #0
 8011594:	d0cf      	beq.n	8011536 <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
 8011596:	f001 fa27 	bl	80129e8 <vPortExitCritical>
		vTaskSuspendAll();
 801159a:	f000 fbff 	bl	8011d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801159e:	f001 fa01 	bl	80129a4 <vPortEnterCritical>
 80115a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80115a6:	b25b      	sxtb	r3, r3
 80115a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115ac:	d0c8      	beq.n	8011540 <xQueueSemaphoreTake+0xbc>
 80115ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80115b2:	b25b      	sxtb	r3, r3
 80115b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115b8:	d0c6      	beq.n	8011548 <xQueueSemaphoreTake+0xc4>
 80115ba:	f001 fa15 	bl	80129e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115be:	a901      	add	r1, sp, #4
 80115c0:	a802      	add	r0, sp, #8
 80115c2:	f000 fe09 	bl	80121d8 <xTaskCheckForTimeOut>
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d1d1      	bne.n	801156e <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115ca:	4620      	mov	r0, r4
 80115cc:	f7ff fb90 	bl	8010cf0 <prvIsQueueEmpty>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d0c6      	beq.n	8011562 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115d4:	6823      	ldr	r3, [r4, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0ba      	beq.n	8011550 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80115da:	9901      	ldr	r1, [sp, #4]
 80115dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80115e0:	f000 fd74 	bl	80120cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80115e4:	4620      	mov	r0, r4
 80115e6:	f7ff fbdd 	bl	8010da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80115ea:	f000 fc7b 	bl	8011ee4 <xTaskResumeAll>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d1c7      	bne.n	8011582 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
 80115f2:	4b0c      	ldr	r3, [pc, #48]	; (8011624 <xQueueSemaphoreTake+0x1a0>)
 80115f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115f8:	601a      	str	r2, [r3, #0]
 80115fa:	f3bf 8f4f 	dsb	sy
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	e7be      	b.n	8011582 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
 8011604:	b90d      	cbnz	r5, 801160a <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
 8011606:	2500      	movs	r5, #0
 8011608:	e772      	b.n	80114f0 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 801160a:	f001 f9cb 	bl	80129a4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801160e:	4620      	mov	r0, r4
 8011610:	f7ff fb57 	bl	8010cc2 <prvGetDisinheritPriorityAfterTimeout>
 8011614:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011616:	68a0      	ldr	r0, [r4, #8]
 8011618:	f000 fed0 	bl	80123bc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801161c:	f001 f9e4 	bl	80129e8 <vPortExitCritical>
 8011620:	e7f1      	b.n	8011606 <xQueueSemaphoreTake+0x182>
 8011622:	bf00      	nop
 8011624:	e000ed04 	.word	0xe000ed04

08011628 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8011628:	b188      	cbz	r0, 801164e <xQueueTakeMutexRecursive+0x26>
	{
 801162a:	b570      	push	{r4, r5, r6, lr}
 801162c:	460d      	mov	r5, r1
 801162e:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8011630:	6886      	ldr	r6, [r0, #8]
 8011632:	f000 fe19 	bl	8012268 <xTaskGetCurrentTaskHandle>
 8011636:	4286      	cmp	r6, r0
 8011638:	d012      	beq.n	8011660 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 801163a:	4629      	mov	r1, r5
 801163c:	4620      	mov	r0, r4
 801163e:	f7ff ff21 	bl	8011484 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8011642:	4602      	mov	r2, r0
 8011644:	b180      	cbz	r0, 8011668 <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011646:	68e3      	ldr	r3, [r4, #12]
 8011648:	3301      	adds	r3, #1
 801164a:	60e3      	str	r3, [r4, #12]
		return xReturn;
 801164c:	e00c      	b.n	8011668 <xQueueTakeMutexRecursive+0x40>
 801164e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011652:	f383 8811 	msr	BASEPRI, r3
 8011656:	f3bf 8f6f 	isb	sy
 801165a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 801165e:	e7fe      	b.n	801165e <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011660:	68e3      	ldr	r3, [r4, #12]
 8011662:	3301      	adds	r3, #1
 8011664:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8011666:	2201      	movs	r2, #1
	}
 8011668:	4610      	mov	r0, r2
 801166a:	bd70      	pop	{r4, r5, r6, pc}

0801166c <xQueueReceiveFromISR>:
{
 801166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8011670:	b1c8      	cbz	r0, 80116a6 <xQueueReceiveFromISR+0x3a>
 8011672:	4689      	mov	r9, r1
 8011674:	4617      	mov	r7, r2
 8011676:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011678:	b1f1      	cbz	r1, 80116b8 <xQueueReceiveFromISR+0x4c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801167a:	f001 fabd 	bl	8012bf8 <vPortValidateInterruptPriority>
	__asm volatile
 801167e:	f3ef 8611 	mrs	r6, BASEPRI
 8011682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011686:	f383 8811 	msr	BASEPRI, r3
 801168a:	f3bf 8f6f 	isb	sy
 801168e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011692:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011696:	f1b8 0f00 	cmp.w	r8, #0
 801169a:	d119      	bne.n	80116d0 <xQueueReceiveFromISR+0x64>
			xReturn = pdFAIL;
 801169c:	2000      	movs	r0, #0
	__asm volatile
 801169e:	f386 8811 	msr	BASEPRI, r6
}
 80116a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80116b6:	e7fe      	b.n	80116b6 <xQueueReceiveFromISR+0x4a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80116b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0dd      	beq.n	801167a <xQueueReceiveFromISR+0xe>
 80116be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	e7fe      	b.n	80116ce <xQueueReceiveFromISR+0x62>
			const int8_t cRxLock = pxQueue->cRxLock;
 80116d0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80116d4:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80116d6:	4649      	mov	r1, r9
 80116d8:	4620      	mov	r0, r4
 80116da:	f7ff fb51 	bl	8010d80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80116de:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80116e2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80116e4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80116e8:	d005      	beq.n	80116f6 <xQueueReceiveFromISR+0x8a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80116ea:	1c6b      	adds	r3, r5, #1
 80116ec:	b25b      	sxtb	r3, r3
 80116ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80116f2:	2001      	movs	r0, #1
 80116f4:	e7d3      	b.n	801169e <xQueueReceiveFromISR+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116f6:	6923      	ldr	r3, [r4, #16]
 80116f8:	b90b      	cbnz	r3, 80116fe <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80116fa:	2001      	movs	r0, #1
 80116fc:	e7cf      	b.n	801169e <xQueueReceiveFromISR+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116fe:	f104 0010 	add.w	r0, r4, #16
 8011702:	f000 fd17 	bl	8012134 <xTaskRemoveFromEventList>
 8011706:	b118      	cbz	r0, 8011710 <xQueueReceiveFromISR+0xa4>
						if( pxHigherPriorityTaskWoken != NULL )
 8011708:	b127      	cbz	r7, 8011714 <xQueueReceiveFromISR+0xa8>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801170a:	2001      	movs	r0, #1
 801170c:	6038      	str	r0, [r7, #0]
 801170e:	e7c6      	b.n	801169e <xQueueReceiveFromISR+0x32>
			xReturn = pdPASS;
 8011710:	2001      	movs	r0, #1
 8011712:	e7c4      	b.n	801169e <xQueueReceiveFromISR+0x32>
 8011714:	2001      	movs	r0, #1
 8011716:	e7c2      	b.n	801169e <xQueueReceiveFromISR+0x32>

08011718 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011718:	2300      	movs	r3, #0
 801171a:	e000      	b.n	801171e <vQueueAddToRegistry+0x6>
 801171c:	3301      	adds	r3, #1
 801171e:	2b07      	cmp	r3, #7
 8011720:	d80b      	bhi.n	801173a <vQueueAddToRegistry+0x22>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011722:	4a06      	ldr	r2, [pc, #24]	; (801173c <vQueueAddToRegistry+0x24>)
 8011724:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011728:	2a00      	cmp	r2, #0
 801172a:	d1f7      	bne.n	801171c <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801172c:	4a03      	ldr	r2, [pc, #12]	; (801173c <vQueueAddToRegistry+0x24>)
 801172e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011732:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011736:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011738:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801173a:	4770      	bx	lr
 801173c:	20018a04 	.word	0x20018a04

08011740 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011740:	2300      	movs	r3, #0
 8011742:	e000      	b.n	8011746 <vQueueUnregisterQueue+0x6>
 8011744:	3301      	adds	r3, #1
 8011746:	2b07      	cmp	r3, #7
 8011748:	d80d      	bhi.n	8011766 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801174a:	4a07      	ldr	r2, [pc, #28]	; (8011768 <vQueueUnregisterQueue+0x28>)
 801174c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011750:	6852      	ldr	r2, [r2, #4]
 8011752:	4282      	cmp	r2, r0
 8011754:	d1f6      	bne.n	8011744 <vQueueUnregisterQueue+0x4>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011756:	4a04      	ldr	r2, [pc, #16]	; (8011768 <vQueueUnregisterQueue+0x28>)
 8011758:	2100      	movs	r1, #0
 801175a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801175e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011762:	6059      	str	r1, [r3, #4]
				break;
 8011764:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011766:	4770      	bx	lr
 8011768:	20018a04 	.word	0x20018a04

0801176c <vQueueDelete>:
	configASSERT( pxQueue );
 801176c:	b138      	cbz	r0, 801177e <vQueueDelete+0x12>
{
 801176e:	b510      	push	{r4, lr}
 8011770:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8011772:	f7ff ffe5 	bl	8011740 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011776:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801177a:	b14b      	cbz	r3, 8011790 <vQueueDelete+0x24>
}
 801177c:	bd10      	pop	{r4, pc}
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801178e:	e7fe      	b.n	801178e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8011790:	4620      	mov	r0, r4
 8011792:	f001 fb3b 	bl	8012e0c <vPortFree>
}
 8011796:	e7f1      	b.n	801177c <vQueueDelete+0x10>

08011798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	4604      	mov	r4, r0
 801179c:	460d      	mov	r5, r1
 801179e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80117a0:	f001 f900 	bl	80129a4 <vPortEnterCritical>
 80117a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80117a8:	b25b      	sxtb	r3, r3
 80117aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117ae:	d00d      	beq.n	80117cc <vQueueWaitForMessageRestricted+0x34>
 80117b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80117b4:	b25b      	sxtb	r3, r3
 80117b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117ba:	d00b      	beq.n	80117d4 <vQueueWaitForMessageRestricted+0x3c>
 80117bc:	f001 f914 	bl	80129e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80117c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80117c2:	b15b      	cbz	r3, 80117dc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80117c4:	4620      	mov	r0, r4
 80117c6:	f7ff faed 	bl	8010da4 <prvUnlockQueue>
	}
 80117ca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80117cc:	2300      	movs	r3, #0
 80117ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80117d2:	e7ed      	b.n	80117b0 <vQueueWaitForMessageRestricted+0x18>
 80117d4:	2300      	movs	r3, #0
 80117d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117da:	e7ef      	b.n	80117bc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80117dc:	4632      	mov	r2, r6
 80117de:	4629      	mov	r1, r5
 80117e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80117e4:	f000 fc8a 	bl	80120fc <vTaskPlaceOnEventListRestricted>
 80117e8:	e7ec      	b.n	80117c4 <vQueueWaitForMessageRestricted+0x2c>
	...

080117ec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117ec:	4b08      	ldr	r3, [pc, #32]	; (8011810 <prvResetNextTaskUnblockTime+0x24>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	b923      	cbnz	r3, 80117fe <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80117f4:	4b07      	ldr	r3, [pc, #28]	; (8011814 <prvResetNextTaskUnblockTime+0x28>)
 80117f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117fa:	601a      	str	r2, [r3, #0]
 80117fc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117fe:	4b04      	ldr	r3, [pc, #16]	; (8011810 <prvResetNextTaskUnblockTime+0x24>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011806:	685a      	ldr	r2, [r3, #4]
 8011808:	4b02      	ldr	r3, [pc, #8]	; (8011814 <prvResetNextTaskUnblockTime+0x28>)
 801180a:	601a      	str	r2, [r3, #0]
	}
}
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop
 8011810:	200027c4 	.word	0x200027c4
 8011814:	20002c68 	.word	0x20002c68

08011818 <prvInitialiseNewTask>:
{
 8011818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801181c:	4680      	mov	r8, r0
 801181e:	460d      	mov	r5, r1
 8011820:	4617      	mov	r7, r2
 8011822:	4699      	mov	r9, r3
 8011824:	9e08      	ldr	r6, [sp, #32]
 8011826:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801182a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801182c:	0092      	lsls	r2, r2, #2
 801182e:	21a5      	movs	r1, #165	; 0xa5
 8011830:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011832:	f002 fd81 	bl	8014338 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011836:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011838:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 801183c:	3a01      	subs	r2, #1
 801183e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011842:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8011846:	2d00      	cmp	r5, #0
 8011848:	d05f      	beq.n	801190a <prvInitialiseNewTask+0xf2>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801184a:	2200      	movs	r2, #0
 801184c:	2a0f      	cmp	r2, #15
 801184e:	d807      	bhi.n	8011860 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011850:	5ca9      	ldrb	r1, [r5, r2]
 8011852:	18a3      	adds	r3, r4, r2
 8011854:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8011858:	5cab      	ldrb	r3, [r5, r2]
 801185a:	b10b      	cbz	r3, 8011860 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801185c:	3201      	adds	r2, #1
 801185e:	e7f5      	b.n	801184c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011860:	2300      	movs	r3, #0
 8011862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011866:	2e37      	cmp	r6, #55	; 0x37
 8011868:	d900      	bls.n	801186c <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801186a:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 801186c:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 801186e:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011870:	2500      	movs	r5, #0
 8011872:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011874:	1d20      	adds	r0, r4, #4
 8011876:	f7ff f9ea 	bl	8010c4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801187a:	f104 0018 	add.w	r0, r4, #24
 801187e:	f7ff f9e6 	bl	8010c4e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011882:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011884:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8011888:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801188a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 801188c:	f8c4 5480 	str.w	r5, [r4, #1152]	; 0x480
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011890:	f884 5484 	strb.w	r5, [r4, #1156]	; 0x484
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011894:	f44f 6285 	mov.w	r2, #1064	; 0x428
 8011898:	4629      	mov	r1, r5
 801189a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801189e:	f002 fd4b 	bl	8014338 <memset>
 80118a2:	f504 7351 	add.w	r3, r4, #836	; 0x344
 80118a6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80118a8:	f504 736b 	add.w	r3, r4, #940	; 0x3ac
 80118ac:	6623      	str	r3, [r4, #96]	; 0x60
 80118ae:	f204 4314 	addw	r3, r4, #1044	; 0x414
 80118b2:	6663      	str	r3, [r4, #100]	; 0x64
 80118b4:	2201      	movs	r2, #1
 80118b6:	2300      	movs	r3, #0
 80118b8:	e9c4 2340 	strd	r2, r3, [r4, #256]	; 0x100
 80118bc:	f243 330e 	movw	r3, #13070	; 0x330e
 80118c0:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80118c4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80118c8:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
 80118cc:	f241 2334 	movw	r3, #4660	; 0x1234
 80118d0:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
 80118d4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80118d8:	f8a4 310e 	strh.w	r3, [r4, #270]	; 0x10e
 80118dc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80118e0:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
 80118e4:	2305      	movs	r3, #5
 80118e6:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
 80118ea:	230b      	movs	r3, #11
 80118ec:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80118f0:	464a      	mov	r2, r9
 80118f2:	4641      	mov	r1, r8
 80118f4:	4638      	mov	r0, r7
 80118f6:	f001 f829 	bl	801294c <pxPortInitialiseStack>
 80118fa:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80118fc:	f1ba 0f00 	cmp.w	sl, #0
 8011900:	d001      	beq.n	8011906 <prvInitialiseNewTask+0xee>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011902:	f8ca 4000 	str.w	r4, [sl]
}
 8011906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801190a:	2300      	movs	r3, #0
 801190c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8011910:	e7a9      	b.n	8011866 <prvInitialiseNewTask+0x4e>
	...

08011914 <prvInitialiseTaskLists>:
{
 8011914:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011916:	2400      	movs	r4, #0
 8011918:	2c37      	cmp	r4, #55	; 0x37
 801191a:	d808      	bhi.n	801192e <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801191c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8011920:	0093      	lsls	r3, r2, #2
 8011922:	480e      	ldr	r0, [pc, #56]	; (801195c <prvInitialiseTaskLists+0x48>)
 8011924:	4418      	add	r0, r3
 8011926:	f7ff f987 	bl	8010c38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801192a:	3401      	adds	r4, #1
 801192c:	e7f4      	b.n	8011918 <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
 801192e:	4d0c      	ldr	r5, [pc, #48]	; (8011960 <prvInitialiseTaskLists+0x4c>)
 8011930:	4628      	mov	r0, r5
 8011932:	f7ff f981 	bl	8010c38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011936:	4c0b      	ldr	r4, [pc, #44]	; (8011964 <prvInitialiseTaskLists+0x50>)
 8011938:	4620      	mov	r0, r4
 801193a:	f7ff f97d 	bl	8010c38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801193e:	480a      	ldr	r0, [pc, #40]	; (8011968 <prvInitialiseTaskLists+0x54>)
 8011940:	f7ff f97a 	bl	8010c38 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8011944:	4809      	ldr	r0, [pc, #36]	; (801196c <prvInitialiseTaskLists+0x58>)
 8011946:	f7ff f977 	bl	8010c38 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 801194a:	4809      	ldr	r0, [pc, #36]	; (8011970 <prvInitialiseTaskLists+0x5c>)
 801194c:	f7ff f974 	bl	8010c38 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8011950:	4b08      	ldr	r3, [pc, #32]	; (8011974 <prvInitialiseTaskLists+0x60>)
 8011952:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011954:	4b08      	ldr	r3, [pc, #32]	; (8011978 <prvInitialiseTaskLists+0x64>)
 8011956:	601c      	str	r4, [r3, #0]
}
 8011958:	bd38      	pop	{r3, r4, r5, pc}
 801195a:	bf00      	nop
 801195c:	200027cc 	.word	0x200027cc
 8011960:	20002c40 	.word	0x20002c40
 8011964:	20002c54 	.word	0x20002c54
 8011968:	20002c74 	.word	0x20002c74
 801196c:	20002ca0 	.word	0x20002ca0
 8011970:	20002c8c 	.word	0x20002c8c
 8011974:	200027c4 	.word	0x200027c4
 8011978:	200027c8 	.word	0x200027c8

0801197c <prvAddNewTaskToReadyList>:
{
 801197c:	b510      	push	{r4, lr}
 801197e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8011980:	f001 f810 	bl	80129a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8011984:	4a21      	ldr	r2, [pc, #132]	; (8011a0c <prvAddNewTaskToReadyList+0x90>)
 8011986:	6813      	ldr	r3, [r2, #0]
 8011988:	3301      	adds	r3, #1
 801198a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801198c:	4b20      	ldr	r3, [pc, #128]	; (8011a10 <prvAddNewTaskToReadyList+0x94>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	b15b      	cbz	r3, 80119aa <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8011992:	4b20      	ldr	r3, [pc, #128]	; (8011a14 <prvAddNewTaskToReadyList+0x98>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	b96b      	cbnz	r3, 80119b4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011998:	4b1d      	ldr	r3, [pc, #116]	; (8011a10 <prvAddNewTaskToReadyList+0x94>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d807      	bhi.n	80119b4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80119a4:	4b1a      	ldr	r3, [pc, #104]	; (8011a10 <prvAddNewTaskToReadyList+0x94>)
 80119a6:	601c      	str	r4, [r3, #0]
 80119a8:	e004      	b.n	80119b4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80119aa:	4b19      	ldr	r3, [pc, #100]	; (8011a10 <prvAddNewTaskToReadyList+0x94>)
 80119ac:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80119ae:	6813      	ldr	r3, [r2, #0]
 80119b0:	2b01      	cmp	r3, #1
 80119b2:	d027      	beq.n	8011a04 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80119b4:	4a18      	ldr	r2, [pc, #96]	; (8011a18 <prvAddNewTaskToReadyList+0x9c>)
 80119b6:	6813      	ldr	r3, [r2, #0]
 80119b8:	3301      	adds	r3, #1
 80119ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80119bc:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80119be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80119c0:	4b16      	ldr	r3, [pc, #88]	; (8011a1c <prvAddNewTaskToReadyList+0xa0>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	4298      	cmp	r0, r3
 80119c6:	d901      	bls.n	80119cc <prvAddNewTaskToReadyList+0x50>
 80119c8:	4b14      	ldr	r3, [pc, #80]	; (8011a1c <prvAddNewTaskToReadyList+0xa0>)
 80119ca:	6018      	str	r0, [r3, #0]
 80119cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80119d0:	1d21      	adds	r1, r4, #4
 80119d2:	4b13      	ldr	r3, [pc, #76]	; (8011a20 <prvAddNewTaskToReadyList+0xa4>)
 80119d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80119d8:	f7ff f93c 	bl	8010c54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80119dc:	f001 f804 	bl	80129e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80119e0:	4b0c      	ldr	r3, [pc, #48]	; (8011a14 <prvAddNewTaskToReadyList+0x98>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	b16b      	cbz	r3, 8011a02 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80119e6:	4b0a      	ldr	r3, [pc, #40]	; (8011a10 <prvAddNewTaskToReadyList+0x94>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d207      	bcs.n	8011a02 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80119f2:	4b0c      	ldr	r3, [pc, #48]	; (8011a24 <prvAddNewTaskToReadyList+0xa8>)
 80119f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119f8:	601a      	str	r2, [r3, #0]
 80119fa:	f3bf 8f4f 	dsb	sy
 80119fe:	f3bf 8f6f 	isb	sy
}
 8011a02:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8011a04:	f7ff ff86 	bl	8011914 <prvInitialiseTaskLists>
 8011a08:	e7d4      	b.n	80119b4 <prvAddNewTaskToReadyList+0x38>
 8011a0a:	bf00      	nop
 8011a0c:	20002c2c 	.word	0x20002c2c
 8011a10:	200027c0 	.word	0x200027c0
 8011a14:	20002c88 	.word	0x20002c88
 8011a18:	20002c38 	.word	0x20002c38
 8011a1c:	20002c3c 	.word	0x20002c3c
 8011a20:	200027cc 	.word	0x200027cc
 8011a24:	e000ed04 	.word	0xe000ed04

08011a28 <prvDeleteTCB>:
	{
 8011a28:	b510      	push	{r4, lr}
 8011a2a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011a2c:	3058      	adds	r0, #88	; 0x58
 8011a2e:	f002 fca5 	bl	801437c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011a32:	f894 3485 	ldrb.w	r3, [r4, #1157]	; 0x485
 8011a36:	b163      	cbz	r3, 8011a52 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d011      	beq.n	8011a60 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a3c:	2b02      	cmp	r3, #2
 8011a3e:	d00e      	beq.n	8011a5e <prvDeleteTCB+0x36>
 8011a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a44:	f383 8811 	msr	BASEPRI, r3
 8011a48:	f3bf 8f6f 	isb	sy
 8011a4c:	f3bf 8f4f 	dsb	sy
 8011a50:	e7fe      	b.n	8011a50 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8011a52:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011a54:	f001 f9da 	bl	8012e0c <vPortFree>
				vPortFree( pxTCB );
 8011a58:	4620      	mov	r0, r4
 8011a5a:	f001 f9d7 	bl	8012e0c <vPortFree>
	}
 8011a5e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8011a60:	4620      	mov	r0, r4
 8011a62:	f001 f9d3 	bl	8012e0c <vPortFree>
 8011a66:	e7fa      	b.n	8011a5e <prvDeleteTCB+0x36>

08011a68 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011a68:	4b0f      	ldr	r3, [pc, #60]	; (8011aa8 <prvCheckTasksWaitingTermination+0x40>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	b1d3      	cbz	r3, 8011aa4 <prvCheckTasksWaitingTermination+0x3c>
{
 8011a6e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8011a70:	f000 ff98 	bl	80129a4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a74:	4b0d      	ldr	r3, [pc, #52]	; (8011aac <prvCheckTasksWaitingTermination+0x44>)
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a7a:	1d20      	adds	r0, r4, #4
 8011a7c:	f7ff f90e 	bl	8010c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011a80:	4a0b      	ldr	r2, [pc, #44]	; (8011ab0 <prvCheckTasksWaitingTermination+0x48>)
 8011a82:	6813      	ldr	r3, [r2, #0]
 8011a84:	3b01      	subs	r3, #1
 8011a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011a88:	4a07      	ldr	r2, [pc, #28]	; (8011aa8 <prvCheckTasksWaitingTermination+0x40>)
 8011a8a:	6813      	ldr	r3, [r2, #0]
 8011a8c:	3b01      	subs	r3, #1
 8011a8e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8011a90:	f000 ffaa 	bl	80129e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff ffc7 	bl	8011a28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011a9a:	4b03      	ldr	r3, [pc, #12]	; (8011aa8 <prvCheckTasksWaitingTermination+0x40>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1e6      	bne.n	8011a70 <prvCheckTasksWaitingTermination+0x8>
}
 8011aa2:	bd10      	pop	{r4, pc}
 8011aa4:	4770      	bx	lr
 8011aa6:	bf00      	nop
 8011aa8:	20002c30 	.word	0x20002c30
 8011aac:	20002ca0 	.word	0x20002ca0
 8011ab0:	20002c2c 	.word	0x20002c2c

08011ab4 <prvIdleTask>:
{
 8011ab4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8011ab6:	f7ff ffd7 	bl	8011a68 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011aba:	4b06      	ldr	r3, [pc, #24]	; (8011ad4 <prvIdleTask+0x20>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d9f9      	bls.n	8011ab6 <prvIdleTask+0x2>
				taskYIELD();
 8011ac2:	4b05      	ldr	r3, [pc, #20]	; (8011ad8 <prvIdleTask+0x24>)
 8011ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ac8:	601a      	str	r2, [r3, #0]
 8011aca:	f3bf 8f4f 	dsb	sy
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	e7f0      	b.n	8011ab6 <prvIdleTask+0x2>
 8011ad4:	200027cc 	.word	0x200027cc
 8011ad8:	e000ed04 	.word	0xe000ed04

08011adc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	4604      	mov	r4, r0
 8011ae0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011ae2:	4b17      	ldr	r3, [pc, #92]	; (8011b40 <prvAddCurrentTaskToDelayedList+0x64>)
 8011ae4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ae6:	4b17      	ldr	r3, [pc, #92]	; (8011b44 <prvAddCurrentTaskToDelayedList+0x68>)
 8011ae8:	6818      	ldr	r0, [r3, #0]
 8011aea:	3004      	adds	r0, #4
 8011aec:	f7ff f8d6 	bl	8010c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011af0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011af4:	d00d      	beq.n	8011b12 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011af6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011af8:	4b12      	ldr	r3, [pc, #72]	; (8011b44 <prvAddCurrentTaskToDelayedList+0x68>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8011afe:	42a6      	cmp	r6, r4
 8011b00:	d910      	bls.n	8011b24 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b02:	4b11      	ldr	r3, [pc, #68]	; (8011b48 <prvAddCurrentTaskToDelayedList+0x6c>)
 8011b04:	6818      	ldr	r0, [r3, #0]
 8011b06:	4b0f      	ldr	r3, [pc, #60]	; (8011b44 <prvAddCurrentTaskToDelayedList+0x68>)
 8011b08:	6819      	ldr	r1, [r3, #0]
 8011b0a:	3104      	adds	r1, #4
 8011b0c:	f7ff f8ad 	bl	8010c6a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011b10:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011b12:	2d00      	cmp	r5, #0
 8011b14:	d0ef      	beq.n	8011af6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b16:	4b0b      	ldr	r3, [pc, #44]	; (8011b44 <prvAddCurrentTaskToDelayedList+0x68>)
 8011b18:	6819      	ldr	r1, [r3, #0]
 8011b1a:	3104      	adds	r1, #4
 8011b1c:	480b      	ldr	r0, [pc, #44]	; (8011b4c <prvAddCurrentTaskToDelayedList+0x70>)
 8011b1e:	f7ff f899 	bl	8010c54 <vListInsertEnd>
 8011b22:	e7f5      	b.n	8011b10 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b24:	4b0a      	ldr	r3, [pc, #40]	; (8011b50 <prvAddCurrentTaskToDelayedList+0x74>)
 8011b26:	6818      	ldr	r0, [r3, #0]
 8011b28:	4b06      	ldr	r3, [pc, #24]	; (8011b44 <prvAddCurrentTaskToDelayedList+0x68>)
 8011b2a:	6819      	ldr	r1, [r3, #0]
 8011b2c:	3104      	adds	r1, #4
 8011b2e:	f7ff f89c 	bl	8010c6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011b32:	4b08      	ldr	r3, [pc, #32]	; (8011b54 <prvAddCurrentTaskToDelayedList+0x78>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	42a3      	cmp	r3, r4
 8011b38:	d9ea      	bls.n	8011b10 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8011b3a:	4b06      	ldr	r3, [pc, #24]	; (8011b54 <prvAddCurrentTaskToDelayedList+0x78>)
 8011b3c:	601c      	str	r4, [r3, #0]
}
 8011b3e:	e7e7      	b.n	8011b10 <prvAddCurrentTaskToDelayedList+0x34>
 8011b40:	20002cb4 	.word	0x20002cb4
 8011b44:	200027c0 	.word	0x200027c0
 8011b48:	200027c8 	.word	0x200027c8
 8011b4c:	20002c8c 	.word	0x20002c8c
 8011b50:	200027c4 	.word	0x200027c4
 8011b54:	20002c68 	.word	0x20002c68

08011b58 <xTaskCreateStatic>:
	{
 8011b58:	b570      	push	{r4, r5, r6, lr}
 8011b5a:	b086      	sub	sp, #24
 8011b5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011b5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8011b60:	b185      	cbz	r5, 8011b84 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011b62:	b1c4      	cbz	r4, 8011b96 <xTaskCreateStatic+0x3e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011b64:	f44f 6691 	mov.w	r6, #1160	; 0x488
 8011b68:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011b6a:	9e04      	ldr	r6, [sp, #16]
 8011b6c:	f5b6 6f91 	cmp.w	r6, #1160	; 0x488
 8011b70:	d01a      	beq.n	8011ba8 <xTaskCreateStatic+0x50>
 8011b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b76:	f383 8811 	msr	BASEPRI, r3
 8011b7a:	f3bf 8f6f 	isb	sy
 8011b7e:	f3bf 8f4f 	dsb	sy
 8011b82:	e7fe      	b.n	8011b82 <xTaskCreateStatic+0x2a>
 8011b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8011b94:	e7fe      	b.n	8011b94 <xTaskCreateStatic+0x3c>
 8011b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8011ba6:	e7fe      	b.n	8011ba6 <xTaskCreateStatic+0x4e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011ba8:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011baa:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011bac:	2502      	movs	r5, #2
 8011bae:	f884 5485 	strb.w	r5, [r4, #1157]	; 0x485
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011bb2:	2500      	movs	r5, #0
 8011bb4:	9503      	str	r5, [sp, #12]
 8011bb6:	9402      	str	r4, [sp, #8]
 8011bb8:	ad05      	add	r5, sp, #20
 8011bba:	9501      	str	r5, [sp, #4]
 8011bbc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011bbe:	9500      	str	r5, [sp, #0]
 8011bc0:	f7ff fe2a 	bl	8011818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f7ff fed9 	bl	801197c <prvAddNewTaskToReadyList>
	}
 8011bca:	9805      	ldr	r0, [sp, #20]
 8011bcc:	b006      	add	sp, #24
 8011bce:	bd70      	pop	{r4, r5, r6, pc}

08011bd0 <xTaskCreate>:
	{
 8011bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bd4:	b085      	sub	sp, #20
 8011bd6:	4607      	mov	r7, r0
 8011bd8:	4688      	mov	r8, r1
 8011bda:	4614      	mov	r4, r2
 8011bdc:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011bde:	0090      	lsls	r0, r2, #2
 8011be0:	f001 f896 	bl	8012d10 <pvPortMalloc>
			if( pxStack != NULL )
 8011be4:	b308      	cbz	r0, 8011c2a <xTaskCreate+0x5a>
 8011be6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011be8:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8011bec:	f001 f890 	bl	8012d10 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	b1b0      	cbz	r0, 8011c22 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8011bf4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8011bf8:	b1e5      	cbz	r5, 8011c34 <xTaskCreate+0x64>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f885 3485 	strb.w	r3, [r5, #1157]	; 0x485
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011c00:	9303      	str	r3, [sp, #12]
 8011c02:	9502      	str	r5, [sp, #8]
 8011c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c06:	9301      	str	r3, [sp, #4]
 8011c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	4633      	mov	r3, r6
 8011c0e:	4622      	mov	r2, r4
 8011c10:	4641      	mov	r1, r8
 8011c12:	4638      	mov	r0, r7
 8011c14:	f7ff fe00 	bl	8011818 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c18:	4628      	mov	r0, r5
 8011c1a:	f7ff feaf 	bl	801197c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011c1e:	2001      	movs	r0, #1
 8011c20:	e005      	b.n	8011c2e <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8011c22:	4648      	mov	r0, r9
 8011c24:	f001 f8f2 	bl	8012e0c <vPortFree>
 8011c28:	e7e6      	b.n	8011bf8 <xTaskCreate+0x28>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8011c2e:	b005      	add	sp, #20
 8011c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8011c38:	e7f9      	b.n	8011c2e <xTaskCreate+0x5e>
	...

08011c3c <vTaskDelete>:
	{
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8011c40:	f000 feb0 	bl	80129a4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011c44:	b324      	cbz	r4, 8011c90 <vTaskDelete+0x54>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c46:	1d25      	adds	r5, r4, #4
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f7ff f827 	bl	8010c9c <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c50:	b11b      	cbz	r3, 8011c5a <vTaskDelete+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c52:	f104 0018 	add.w	r0, r4, #24
 8011c56:	f7ff f821 	bl	8010c9c <uxListRemove>
			uxTaskNumber++;
 8011c5a:	4a1e      	ldr	r2, [pc, #120]	; (8011cd4 <vTaskDelete+0x98>)
 8011c5c:	6813      	ldr	r3, [r2, #0]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8011c62:	4b1d      	ldr	r3, [pc, #116]	; (8011cd8 <vTaskDelete+0x9c>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	42a3      	cmp	r3, r4
 8011c68:	d015      	beq.n	8011c96 <vTaskDelete+0x5a>
				--uxCurrentNumberOfTasks;
 8011c6a:	4a1c      	ldr	r2, [pc, #112]	; (8011cdc <vTaskDelete+0xa0>)
 8011c6c:	6813      	ldr	r3, [r2, #0]
 8011c6e:	3b01      	subs	r3, #1
 8011c70:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8011c72:	4620      	mov	r0, r4
 8011c74:	f7ff fed8 	bl	8011a28 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 8011c78:	f7ff fdb8 	bl	80117ec <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 8011c7c:	f000 feb4 	bl	80129e8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8011c80:	4b17      	ldr	r3, [pc, #92]	; (8011ce0 <vTaskDelete+0xa4>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	b11b      	cbz	r3, 8011c8e <vTaskDelete+0x52>
			if( pxTCB == pxCurrentTCB )
 8011c86:	4b14      	ldr	r3, [pc, #80]	; (8011cd8 <vTaskDelete+0x9c>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	42a3      	cmp	r3, r4
 8011c8c:	d00c      	beq.n	8011ca8 <vTaskDelete+0x6c>
	}
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011c90:	4b11      	ldr	r3, [pc, #68]	; (8011cd8 <vTaskDelete+0x9c>)
 8011c92:	681c      	ldr	r4, [r3, #0]
 8011c94:	e7d7      	b.n	8011c46 <vTaskDelete+0xa>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011c96:	4629      	mov	r1, r5
 8011c98:	4812      	ldr	r0, [pc, #72]	; (8011ce4 <vTaskDelete+0xa8>)
 8011c9a:	f7fe ffdb 	bl	8010c54 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8011c9e:	4a12      	ldr	r2, [pc, #72]	; (8011ce8 <vTaskDelete+0xac>)
 8011ca0:	6813      	ldr	r3, [r2, #0]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8011ca6:	e7e9      	b.n	8011c7c <vTaskDelete+0x40>
				configASSERT( uxSchedulerSuspended == 0 );
 8011ca8:	4b10      	ldr	r3, [pc, #64]	; (8011cec <vTaskDelete+0xb0>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	b143      	cbz	r3, 8011cc0 <vTaskDelete+0x84>
 8011cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb2:	f383 8811 	msr	BASEPRI, r3
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	f3bf 8f4f 	dsb	sy
 8011cbe:	e7fe      	b.n	8011cbe <vTaskDelete+0x82>
				portYIELD_WITHIN_API();
 8011cc0:	4b0b      	ldr	r3, [pc, #44]	; (8011cf0 <vTaskDelete+0xb4>)
 8011cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cc6:	601a      	str	r2, [r3, #0]
 8011cc8:	f3bf 8f4f 	dsb	sy
 8011ccc:	f3bf 8f6f 	isb	sy
	}
 8011cd0:	e7dd      	b.n	8011c8e <vTaskDelete+0x52>
 8011cd2:	bf00      	nop
 8011cd4:	20002c38 	.word	0x20002c38
 8011cd8:	200027c0 	.word	0x200027c0
 8011cdc:	20002c2c 	.word	0x20002c2c
 8011ce0:	20002c88 	.word	0x20002c88
 8011ce4:	20002ca0 	.word	0x20002ca0
 8011ce8:	20002c30 	.word	0x20002c30
 8011cec:	20002c34 	.word	0x20002c34
 8011cf0:	e000ed04 	.word	0xe000ed04

08011cf4 <vTaskStartScheduler>:
{
 8011cf4:	b510      	push	{r4, lr}
 8011cf6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011cf8:	2400      	movs	r4, #0
 8011cfa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011cfc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011cfe:	aa07      	add	r2, sp, #28
 8011d00:	a906      	add	r1, sp, #24
 8011d02:	a805      	add	r0, sp, #20
 8011d04:	f7fe ff80 	bl	8010c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011d08:	9b05      	ldr	r3, [sp, #20]
 8011d0a:	9302      	str	r3, [sp, #8]
 8011d0c:	9b06      	ldr	r3, [sp, #24]
 8011d0e:	9301      	str	r3, [sp, #4]
 8011d10:	9400      	str	r4, [sp, #0]
 8011d12:	4623      	mov	r3, r4
 8011d14:	9a07      	ldr	r2, [sp, #28]
 8011d16:	491a      	ldr	r1, [pc, #104]	; (8011d80 <vTaskStartScheduler+0x8c>)
 8011d18:	481a      	ldr	r0, [pc, #104]	; (8011d84 <vTaskStartScheduler+0x90>)
 8011d1a:	f7ff ff1d 	bl	8011b58 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8011d1e:	b148      	cbz	r0, 8011d34 <vTaskStartScheduler+0x40>
			xReturn = xTimerCreateTimerTask();
 8011d20:	f000 fc18 	bl	8012554 <xTimerCreateTimerTask>
 8011d24:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
 8011d26:	2b01      	cmp	r3, #1
 8011d28:	d006      	beq.n	8011d38 <vTaskStartScheduler+0x44>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d2e:	d01d      	beq.n	8011d6c <vTaskStartScheduler+0x78>
}
 8011d30:	b008      	add	sp, #32
 8011d32:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	e7f6      	b.n	8011d26 <vTaskStartScheduler+0x32>
 8011d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3c:	f383 8811 	msr	BASEPRI, r3
 8011d40:	f3bf 8f6f 	isb	sy
 8011d44:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011d48:	4b0f      	ldr	r3, [pc, #60]	; (8011d88 <vTaskStartScheduler+0x94>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	3358      	adds	r3, #88	; 0x58
 8011d4e:	4a0f      	ldr	r2, [pc, #60]	; (8011d8c <vTaskStartScheduler+0x98>)
 8011d50:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8011d52:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <vTaskStartScheduler+0x9c>)
 8011d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011d5a:	4b0e      	ldr	r3, [pc, #56]	; (8011d94 <vTaskStartScheduler+0xa0>)
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011d60:	4b0d      	ldr	r3, [pc, #52]	; (8011d98 <vTaskStartScheduler+0xa4>)
 8011d62:	2200      	movs	r2, #0
 8011d64:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8011d66:	f000 febf 	bl	8012ae8 <xPortStartScheduler>
 8011d6a:	e7e1      	b.n	8011d30 <vTaskStartScheduler+0x3c>
 8011d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d70:	f383 8811 	msr	BASEPRI, r3
 8011d74:	f3bf 8f6f 	isb	sy
 8011d78:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011d7c:	e7fe      	b.n	8011d7c <vTaskStartScheduler+0x88>
 8011d7e:	bf00      	nop
 8011d80:	0802f4b4 	.word	0x0802f4b4
 8011d84:	08011ab5 	.word	0x08011ab5
 8011d88:	200027c0 	.word	0x200027c0
 8011d8c:	200000b0 	.word	0x200000b0
 8011d90:	20002c68 	.word	0x20002c68
 8011d94:	20002c88 	.word	0x20002c88
 8011d98:	20002cb4 	.word	0x20002cb4

08011d9c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011d9c:	4a02      	ldr	r2, [pc, #8]	; (8011da8 <vTaskSuspendAll+0xc>)
 8011d9e:	6813      	ldr	r3, [r2, #0]
 8011da0:	3301      	adds	r3, #1
 8011da2:	6013      	str	r3, [r2, #0]
}
 8011da4:	4770      	bx	lr
 8011da6:	bf00      	nop
 8011da8:	20002c34 	.word	0x20002c34

08011dac <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011dac:	4b01      	ldr	r3, [pc, #4]	; (8011db4 <xTaskGetTickCount+0x8>)
 8011dae:	6818      	ldr	r0, [r3, #0]
}
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	20002cb4 	.word	0x20002cb4

08011db8 <xTaskGetTickCountFromISR>:
{
 8011db8:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011dba:	f000 ff1d 	bl	8012bf8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8011dbe:	4b01      	ldr	r3, [pc, #4]	; (8011dc4 <xTaskGetTickCountFromISR+0xc>)
 8011dc0:	6818      	ldr	r0, [r3, #0]
}
 8011dc2:	bd08      	pop	{r3, pc}
 8011dc4:	20002cb4 	.word	0x20002cb4

08011dc8 <xTaskIncrementTick>:
{
 8011dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011dca:	4b3b      	ldr	r3, [pc, #236]	; (8011eb8 <xTaskIncrementTick+0xf0>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d16a      	bne.n	8011ea8 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011dd2:	4b3a      	ldr	r3, [pc, #232]	; (8011ebc <xTaskIncrementTick+0xf4>)
 8011dd4:	681d      	ldr	r5, [r3, #0]
 8011dd6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8011dd8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011dda:	b9c5      	cbnz	r5, 8011e0e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8011ddc:	4b38      	ldr	r3, [pc, #224]	; (8011ec0 <xTaskIncrementTick+0xf8>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	b143      	cbz	r3, 8011df6 <xTaskIncrementTick+0x2e>
 8011de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de8:	f383 8811 	msr	BASEPRI, r3
 8011dec:	f3bf 8f6f 	isb	sy
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	e7fe      	b.n	8011df4 <xTaskIncrementTick+0x2c>
 8011df6:	4a32      	ldr	r2, [pc, #200]	; (8011ec0 <xTaskIncrementTick+0xf8>)
 8011df8:	6811      	ldr	r1, [r2, #0]
 8011dfa:	4b32      	ldr	r3, [pc, #200]	; (8011ec4 <xTaskIncrementTick+0xfc>)
 8011dfc:	6818      	ldr	r0, [r3, #0]
 8011dfe:	6010      	str	r0, [r2, #0]
 8011e00:	6019      	str	r1, [r3, #0]
 8011e02:	4a31      	ldr	r2, [pc, #196]	; (8011ec8 <xTaskIncrementTick+0x100>)
 8011e04:	6813      	ldr	r3, [r2, #0]
 8011e06:	3301      	adds	r3, #1
 8011e08:	6013      	str	r3, [r2, #0]
 8011e0a:	f7ff fcef 	bl	80117ec <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011e0e:	4b2f      	ldr	r3, [pc, #188]	; (8011ecc <xTaskIncrementTick+0x104>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	42ab      	cmp	r3, r5
 8011e14:	d911      	bls.n	8011e3a <xTaskIncrementTick+0x72>
BaseType_t xSwitchRequired = pdFALSE;
 8011e16:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011e18:	4b2d      	ldr	r3, [pc, #180]	; (8011ed0 <xTaskIncrementTick+0x108>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011e22:	009a      	lsls	r2, r3, #2
 8011e24:	4b2b      	ldr	r3, [pc, #172]	; (8011ed4 <xTaskIncrementTick+0x10c>)
 8011e26:	589b      	ldr	r3, [r3, r2]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d900      	bls.n	8011e2e <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8011e2c:	2401      	movs	r4, #1
			if( xYieldPending != pdFALSE )
 8011e2e:	4b2a      	ldr	r3, [pc, #168]	; (8011ed8 <xTaskIncrementTick+0x110>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d03d      	beq.n	8011eb2 <xTaskIncrementTick+0xea>
				xSwitchRequired = pdTRUE;
 8011e36:	2401      	movs	r4, #1
	return xSwitchRequired;
 8011e38:	e03b      	b.n	8011eb2 <xTaskIncrementTick+0xea>
BaseType_t xSwitchRequired = pdFALSE;
 8011e3a:	2400      	movs	r4, #0
 8011e3c:	e016      	b.n	8011e6c <xTaskIncrementTick+0xa4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e3e:	4b23      	ldr	r3, [pc, #140]	; (8011ecc <xTaskIncrementTick+0x104>)
 8011e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e44:	601a      	str	r2, [r3, #0]
					break;
 8011e46:	e7e7      	b.n	8011e18 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8011e48:	4a20      	ldr	r2, [pc, #128]	; (8011ecc <xTaskIncrementTick+0x104>)
 8011e4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011e4c:	e7e4      	b.n	8011e18 <xTaskIncrementTick+0x50>
					prvAddTaskToReadyList( pxTCB );
 8011e4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011e52:	009a      	lsls	r2, r3, #2
 8011e54:	4639      	mov	r1, r7
 8011e56:	481f      	ldr	r0, [pc, #124]	; (8011ed4 <xTaskIncrementTick+0x10c>)
 8011e58:	4410      	add	r0, r2
 8011e5a:	f7fe fefb 	bl	8010c54 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011e5e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8011e60:	4b1b      	ldr	r3, [pc, #108]	; (8011ed0 <xTaskIncrementTick+0x108>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d300      	bcc.n	8011e6c <xTaskIncrementTick+0xa4>
							xSwitchRequired = pdTRUE;
 8011e6a:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e6c:	4b14      	ldr	r3, [pc, #80]	; (8011ec0 <xTaskIncrementTick+0xf8>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d0e3      	beq.n	8011e3e <xTaskIncrementTick+0x76>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e76:	4b12      	ldr	r3, [pc, #72]	; (8011ec0 <xTaskIncrementTick+0xf8>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011e7e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8011e80:	429d      	cmp	r5, r3
 8011e82:	d3e1      	bcc.n	8011e48 <xTaskIncrementTick+0x80>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e84:	1d37      	adds	r7, r6, #4
 8011e86:	4638      	mov	r0, r7
 8011e88:	f7fe ff08 	bl	8010c9c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011e8c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8011e8e:	b11b      	cbz	r3, 8011e98 <xTaskIncrementTick+0xd0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e90:	f106 0018 	add.w	r0, r6, #24
 8011e94:	f7fe ff02 	bl	8010c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011e98:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8011e9a:	4a10      	ldr	r2, [pc, #64]	; (8011edc <xTaskIncrementTick+0x114>)
 8011e9c:	6812      	ldr	r2, [r2, #0]
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d9d5      	bls.n	8011e4e <xTaskIncrementTick+0x86>
 8011ea2:	4a0e      	ldr	r2, [pc, #56]	; (8011edc <xTaskIncrementTick+0x114>)
 8011ea4:	6013      	str	r3, [r2, #0]
 8011ea6:	e7d2      	b.n	8011e4e <xTaskIncrementTick+0x86>
		++xPendedTicks;
 8011ea8:	4a0d      	ldr	r2, [pc, #52]	; (8011ee0 <xTaskIncrementTick+0x118>)
 8011eaa:	6813      	ldr	r3, [r2, #0]
 8011eac:	3301      	adds	r3, #1
 8011eae:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8011eb0:	2400      	movs	r4, #0
}
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20002c34 	.word	0x20002c34
 8011ebc:	20002cb4 	.word	0x20002cb4
 8011ec0:	200027c4 	.word	0x200027c4
 8011ec4:	200027c8 	.word	0x200027c8
 8011ec8:	20002c6c 	.word	0x20002c6c
 8011ecc:	20002c68 	.word	0x20002c68
 8011ed0:	200027c0 	.word	0x200027c0
 8011ed4:	200027cc 	.word	0x200027cc
 8011ed8:	20002cb8 	.word	0x20002cb8
 8011edc:	20002c3c 	.word	0x20002c3c
 8011ee0:	20002c70 	.word	0x20002c70

08011ee4 <xTaskResumeAll>:
{
 8011ee4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8011ee6:	4b34      	ldr	r3, [pc, #208]	; (8011fb8 <xTaskResumeAll+0xd4>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	b943      	cbnz	r3, 8011efe <xTaskResumeAll+0x1a>
 8011eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ef0:	f383 8811 	msr	BASEPRI, r3
 8011ef4:	f3bf 8f6f 	isb	sy
 8011ef8:	f3bf 8f4f 	dsb	sy
 8011efc:	e7fe      	b.n	8011efc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8011efe:	f000 fd51 	bl	80129a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011f02:	4b2d      	ldr	r3, [pc, #180]	; (8011fb8 <xTaskResumeAll+0xd4>)
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	3a01      	subs	r2, #1
 8011f08:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d14d      	bne.n	8011fac <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011f10:	4b2a      	ldr	r3, [pc, #168]	; (8011fbc <xTaskResumeAll+0xd8>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	b90b      	cbnz	r3, 8011f1a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8011f16:	2400      	movs	r4, #0
 8011f18:	e049      	b.n	8011fae <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8011f1a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f1c:	4b28      	ldr	r3, [pc, #160]	; (8011fc0 <xTaskResumeAll+0xdc>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	b31b      	cbz	r3, 8011f6a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f22:	4b27      	ldr	r3, [pc, #156]	; (8011fc0 <xTaskResumeAll+0xdc>)
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f28:	f104 0018 	add.w	r0, r4, #24
 8011f2c:	f7fe feb6 	bl	8010c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f30:	1d25      	adds	r5, r4, #4
 8011f32:	4628      	mov	r0, r5
 8011f34:	f7fe feb2 	bl	8010c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011f38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8011f3a:	4b22      	ldr	r3, [pc, #136]	; (8011fc4 <xTaskResumeAll+0xe0>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4298      	cmp	r0, r3
 8011f40:	d901      	bls.n	8011f46 <xTaskResumeAll+0x62>
 8011f42:	4b20      	ldr	r3, [pc, #128]	; (8011fc4 <xTaskResumeAll+0xe0>)
 8011f44:	6018      	str	r0, [r3, #0]
 8011f46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	4b1e      	ldr	r3, [pc, #120]	; (8011fc8 <xTaskResumeAll+0xe4>)
 8011f4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011f52:	f7fe fe7f 	bl	8010c54 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011f58:	4b1c      	ldr	r3, [pc, #112]	; (8011fcc <xTaskResumeAll+0xe8>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d3dc      	bcc.n	8011f1c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8011f62:	4b1b      	ldr	r3, [pc, #108]	; (8011fd0 <xTaskResumeAll+0xec>)
 8011f64:	2201      	movs	r2, #1
 8011f66:	601a      	str	r2, [r3, #0]
 8011f68:	e7d8      	b.n	8011f1c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8011f6a:	b10c      	cbz	r4, 8011f70 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8011f6c:	f7ff fc3e 	bl	80117ec <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011f70:	4b18      	ldr	r3, [pc, #96]	; (8011fd4 <xTaskResumeAll+0xf0>)
 8011f72:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8011f74:	b974      	cbnz	r4, 8011f94 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8011f76:	4b16      	ldr	r3, [pc, #88]	; (8011fd0 <xTaskResumeAll+0xec>)
 8011f78:	681c      	ldr	r4, [r3, #0]
 8011f7a:	b1c4      	cbz	r4, 8011fae <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8011f7c:	4b16      	ldr	r3, [pc, #88]	; (8011fd8 <xTaskResumeAll+0xf4>)
 8011f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f82:	601a      	str	r2, [r3, #0]
 8011f84:	f3bf 8f4f 	dsb	sy
 8011f88:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011f8c:	2401      	movs	r4, #1
 8011f8e:	e00e      	b.n	8011fae <xTaskResumeAll+0xca>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011f90:	3c01      	subs	r4, #1
 8011f92:	d007      	beq.n	8011fa4 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8011f94:	f7ff ff18 	bl	8011dc8 <xTaskIncrementTick>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d0f9      	beq.n	8011f90 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8011f9c:	4b0c      	ldr	r3, [pc, #48]	; (8011fd0 <xTaskResumeAll+0xec>)
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	601a      	str	r2, [r3, #0]
 8011fa2:	e7f5      	b.n	8011f90 <xTaskResumeAll+0xac>
						xPendedTicks = 0;
 8011fa4:	4b0b      	ldr	r3, [pc, #44]	; (8011fd4 <xTaskResumeAll+0xf0>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	e7e4      	b.n	8011f76 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8011fac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011fae:	f000 fd1b 	bl	80129e8 <vPortExitCritical>
}
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	bd38      	pop	{r3, r4, r5, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20002c34 	.word	0x20002c34
 8011fbc:	20002c2c 	.word	0x20002c2c
 8011fc0:	20002c74 	.word	0x20002c74
 8011fc4:	20002c3c 	.word	0x20002c3c
 8011fc8:	200027cc 	.word	0x200027cc
 8011fcc:	200027c0 	.word	0x200027c0
 8011fd0:	20002cb8 	.word	0x20002cb8
 8011fd4:	20002c70 	.word	0x20002c70
 8011fd8:	e000ed04 	.word	0xe000ed04

08011fdc <vTaskDelay>:
	{
 8011fdc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011fde:	b1a8      	cbz	r0, 801200c <vTaskDelay+0x30>
 8011fe0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8011fe2:	4b0f      	ldr	r3, [pc, #60]	; (8012020 <vTaskDelay+0x44>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	b143      	cbz	r3, 8011ffa <vTaskDelay+0x1e>
 8011fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fec:	f383 8811 	msr	BASEPRI, r3
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	f3bf 8f4f 	dsb	sy
 8011ff8:	e7fe      	b.n	8011ff8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8011ffa:	f7ff fecf 	bl	8011d9c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011ffe:	2100      	movs	r1, #0
 8012000:	4620      	mov	r0, r4
 8012002:	f7ff fd6b 	bl	8011adc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8012006:	f7ff ff6d 	bl	8011ee4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801200a:	b938      	cbnz	r0, 801201c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 801200c:	4b05      	ldr	r3, [pc, #20]	; (8012024 <vTaskDelay+0x48>)
 801200e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012012:	601a      	str	r2, [r3, #0]
 8012014:	f3bf 8f4f 	dsb	sy
 8012018:	f3bf 8f6f 	isb	sy
	}
 801201c:	bd10      	pop	{r4, pc}
 801201e:	bf00      	nop
 8012020:	20002c34 	.word	0x20002c34
 8012024:	e000ed04 	.word	0xe000ed04

08012028 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012028:	4b22      	ldr	r3, [pc, #136]	; (80120b4 <vTaskSwitchContext+0x8c>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	b11b      	cbz	r3, 8012036 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801202e:	4b22      	ldr	r3, [pc, #136]	; (80120b8 <vTaskSwitchContext+0x90>)
 8012030:	2201      	movs	r2, #1
 8012032:	601a      	str	r2, [r3, #0]
 8012034:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8012036:	4b20      	ldr	r3, [pc, #128]	; (80120b8 <vTaskSwitchContext+0x90>)
 8012038:	2200      	movs	r2, #0
 801203a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801203c:	4b1f      	ldr	r3, [pc, #124]	; (80120bc <vTaskSwitchContext+0x94>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012044:	008a      	lsls	r2, r1, #2
 8012046:	491e      	ldr	r1, [pc, #120]	; (80120c0 <vTaskSwitchContext+0x98>)
 8012048:	588a      	ldr	r2, [r1, r2]
 801204a:	b95a      	cbnz	r2, 8012064 <vTaskSwitchContext+0x3c>
 801204c:	b10b      	cbz	r3, 8012052 <vTaskSwitchContext+0x2a>
 801204e:	3b01      	subs	r3, #1
 8012050:	e7f6      	b.n	8012040 <vTaskSwitchContext+0x18>
 8012052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	e7fe      	b.n	8012062 <vTaskSwitchContext+0x3a>
{
 8012064:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012066:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 801206a:	0082      	lsls	r2, r0, #2
 801206c:	440a      	add	r2, r1
 801206e:	6850      	ldr	r0, [r2, #4]
 8012070:	6840      	ldr	r0, [r0, #4]
 8012072:	6050      	str	r0, [r2, #4]
 8012074:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8012078:	00a2      	lsls	r2, r4, #2
 801207a:	4614      	mov	r4, r2
 801207c:	3208      	adds	r2, #8
 801207e:	4411      	add	r1, r2
 8012080:	4288      	cmp	r0, r1
 8012082:	d011      	beq.n	80120a8 <vTaskSwitchContext+0x80>
 8012084:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012088:	0091      	lsls	r1, r2, #2
 801208a:	4a0d      	ldr	r2, [pc, #52]	; (80120c0 <vTaskSwitchContext+0x98>)
 801208c:	440a      	add	r2, r1
 801208e:	6852      	ldr	r2, [r2, #4]
 8012090:	68d1      	ldr	r1, [r2, #12]
 8012092:	4a0c      	ldr	r2, [pc, #48]	; (80120c4 <vTaskSwitchContext+0x9c>)
 8012094:	6011      	str	r1, [r2, #0]
 8012096:	4909      	ldr	r1, [pc, #36]	; (80120bc <vTaskSwitchContext+0x94>)
 8012098:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801209a:	6813      	ldr	r3, [r2, #0]
 801209c:	3358      	adds	r3, #88	; 0x58
 801209e:	4a0a      	ldr	r2, [pc, #40]	; (80120c8 <vTaskSwitchContext+0xa0>)
 80120a0:	6013      	str	r3, [r2, #0]
}
 80120a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120a6:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120a8:	6840      	ldr	r0, [r0, #4]
 80120aa:	4a05      	ldr	r2, [pc, #20]	; (80120c0 <vTaskSwitchContext+0x98>)
 80120ac:	4422      	add	r2, r4
 80120ae:	6050      	str	r0, [r2, #4]
 80120b0:	e7e8      	b.n	8012084 <vTaskSwitchContext+0x5c>
 80120b2:	bf00      	nop
 80120b4:	20002c34 	.word	0x20002c34
 80120b8:	20002cb8 	.word	0x20002cb8
 80120bc:	20002c3c 	.word	0x20002c3c
 80120c0:	200027cc 	.word	0x200027cc
 80120c4:	200027c0 	.word	0x200027c0
 80120c8:	200000b0 	.word	0x200000b0

080120cc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80120cc:	b158      	cbz	r0, 80120e6 <vTaskPlaceOnEventList+0x1a>
{
 80120ce:	b510      	push	{r4, lr}
 80120d0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80120d2:	4b09      	ldr	r3, [pc, #36]	; (80120f8 <vTaskPlaceOnEventList+0x2c>)
 80120d4:	6819      	ldr	r1, [r3, #0]
 80120d6:	3118      	adds	r1, #24
 80120d8:	f7fe fdc7 	bl	8010c6a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80120dc:	2101      	movs	r1, #1
 80120de:	4620      	mov	r0, r4
 80120e0:	f7ff fcfc 	bl	8011adc <prvAddCurrentTaskToDelayedList>
}
 80120e4:	bd10      	pop	{r4, pc}
 80120e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ea:	f383 8811 	msr	BASEPRI, r3
 80120ee:	f3bf 8f6f 	isb	sy
 80120f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80120f6:	e7fe      	b.n	80120f6 <vTaskPlaceOnEventList+0x2a>
 80120f8:	200027c0 	.word	0x200027c0

080120fc <vTaskPlaceOnEventListRestricted>:
	{
 80120fc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80120fe:	b170      	cbz	r0, 801211e <vTaskPlaceOnEventListRestricted+0x22>
 8012100:	460c      	mov	r4, r1
 8012102:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012104:	4b0a      	ldr	r3, [pc, #40]	; (8012130 <vTaskPlaceOnEventListRestricted+0x34>)
 8012106:	6819      	ldr	r1, [r3, #0]
 8012108:	3118      	adds	r1, #24
 801210a:	f7fe fda3 	bl	8010c54 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 801210e:	b10d      	cbz	r5, 8012114 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8012110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012114:	4629      	mov	r1, r5
 8012116:	4620      	mov	r0, r4
 8012118:	f7ff fce0 	bl	8011adc <prvAddCurrentTaskToDelayedList>
	}
 801211c:	bd38      	pop	{r3, r4, r5, pc}
 801211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 801212e:	e7fe      	b.n	801212e <vTaskPlaceOnEventListRestricted+0x32>
 8012130:	200027c0 	.word	0x200027c0

08012134 <xTaskRemoveFromEventList>:
{
 8012134:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012136:	68c3      	ldr	r3, [r0, #12]
 8012138:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 801213a:	b324      	cbz	r4, 8012186 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801213c:	f104 0518 	add.w	r5, r4, #24
 8012140:	4628      	mov	r0, r5
 8012142:	f7fe fdab 	bl	8010c9c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012146:	4b18      	ldr	r3, [pc, #96]	; (80121a8 <xTaskRemoveFromEventList+0x74>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	bb2b      	cbnz	r3, 8012198 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801214c:	1d25      	adds	r5, r4, #4
 801214e:	4628      	mov	r0, r5
 8012150:	f7fe fda4 	bl	8010c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012156:	4b15      	ldr	r3, [pc, #84]	; (80121ac <xTaskRemoveFromEventList+0x78>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4298      	cmp	r0, r3
 801215c:	d901      	bls.n	8012162 <xTaskRemoveFromEventList+0x2e>
 801215e:	4b13      	ldr	r3, [pc, #76]	; (80121ac <xTaskRemoveFromEventList+0x78>)
 8012160:	6018      	str	r0, [r3, #0]
 8012162:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012166:	4629      	mov	r1, r5
 8012168:	4b11      	ldr	r3, [pc, #68]	; (80121b0 <xTaskRemoveFromEventList+0x7c>)
 801216a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801216e:	f7fe fd71 	bl	8010c54 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012172:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012174:	4b0f      	ldr	r3, [pc, #60]	; (80121b4 <xTaskRemoveFromEventList+0x80>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217a:	429a      	cmp	r2, r3
 801217c:	d911      	bls.n	80121a2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 801217e:	2001      	movs	r0, #1
 8012180:	4b0d      	ldr	r3, [pc, #52]	; (80121b8 <xTaskRemoveFromEventList+0x84>)
 8012182:	6018      	str	r0, [r3, #0]
 8012184:	e00e      	b.n	80121a4 <xTaskRemoveFromEventList+0x70>
 8012186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801218a:	f383 8811 	msr	BASEPRI, r3
 801218e:	f3bf 8f6f 	isb	sy
 8012192:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8012196:	e7fe      	b.n	8012196 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012198:	4629      	mov	r1, r5
 801219a:	4808      	ldr	r0, [pc, #32]	; (80121bc <xTaskRemoveFromEventList+0x88>)
 801219c:	f7fe fd5a 	bl	8010c54 <vListInsertEnd>
 80121a0:	e7e7      	b.n	8012172 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 80121a2:	2000      	movs	r0, #0
}
 80121a4:	bd38      	pop	{r3, r4, r5, pc}
 80121a6:	bf00      	nop
 80121a8:	20002c34 	.word	0x20002c34
 80121ac:	20002c3c 	.word	0x20002c3c
 80121b0:	200027cc 	.word	0x200027cc
 80121b4:	200027c0 	.word	0x200027c0
 80121b8:	20002cb8 	.word	0x20002cb8
 80121bc:	20002c74 	.word	0x20002c74

080121c0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80121c0:	4b03      	ldr	r3, [pc, #12]	; (80121d0 <vTaskInternalSetTimeOutState+0x10>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80121c6:	4b03      	ldr	r3, [pc, #12]	; (80121d4 <vTaskInternalSetTimeOutState+0x14>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	6043      	str	r3, [r0, #4]
}
 80121cc:	4770      	bx	lr
 80121ce:	bf00      	nop
 80121d0:	20002c6c 	.word	0x20002c6c
 80121d4:	20002cb4 	.word	0x20002cb4

080121d8 <xTaskCheckForTimeOut>:
{
 80121d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80121da:	b1c8      	cbz	r0, 8012210 <xTaskCheckForTimeOut+0x38>
 80121dc:	460c      	mov	r4, r1
 80121de:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80121e0:	b1f9      	cbz	r1, 8012222 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80121e2:	f000 fbdf 	bl	80129a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80121e6:	4b1b      	ldr	r3, [pc, #108]	; (8012254 <xTaskCheckForTimeOut+0x7c>)
 80121e8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80121ea:	686b      	ldr	r3, [r5, #4]
 80121ec:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80121ee:	6822      	ldr	r2, [r4, #0]
 80121f0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80121f4:	d026      	beq.n	8012244 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80121f6:	682f      	ldr	r7, [r5, #0]
 80121f8:	4e17      	ldr	r6, [pc, #92]	; (8012258 <xTaskCheckForTimeOut+0x80>)
 80121fa:	6836      	ldr	r6, [r6, #0]
 80121fc:	42b7      	cmp	r7, r6
 80121fe:	d001      	beq.n	8012204 <xTaskCheckForTimeOut+0x2c>
 8012200:	428b      	cmp	r3, r1
 8012202:	d924      	bls.n	801224e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012204:	4282      	cmp	r2, r0
 8012206:	d815      	bhi.n	8012234 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8012208:	2300      	movs	r3, #0
 801220a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 801220c:	2401      	movs	r4, #1
 801220e:	e01a      	b.n	8012246 <xTaskCheckForTimeOut+0x6e>
 8012210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012214:	f383 8811 	msr	BASEPRI, r3
 8012218:	f3bf 8f6f 	isb	sy
 801221c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8012220:	e7fe      	b.n	8012220 <xTaskCheckForTimeOut+0x48>
 8012222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012226:	f383 8811 	msr	BASEPRI, r3
 801222a:	f3bf 8f6f 	isb	sy
 801222e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8012232:	e7fe      	b.n	8012232 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8012234:	1a5b      	subs	r3, r3, r1
 8012236:	4413      	add	r3, r2
 8012238:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801223a:	4628      	mov	r0, r5
 801223c:	f7ff ffc0 	bl	80121c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012240:	2400      	movs	r4, #0
 8012242:	e000      	b.n	8012246 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8012244:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012246:	f000 fbcf 	bl	80129e8 <vPortExitCritical>
}
 801224a:	4620      	mov	r0, r4
 801224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 801224e:	2401      	movs	r4, #1
 8012250:	e7f9      	b.n	8012246 <xTaskCheckForTimeOut+0x6e>
 8012252:	bf00      	nop
 8012254:	20002cb4 	.word	0x20002cb4
 8012258:	20002c6c 	.word	0x20002c6c

0801225c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801225c:	4b01      	ldr	r3, [pc, #4]	; (8012264 <vTaskMissedYield+0x8>)
 801225e:	2201      	movs	r2, #1
 8012260:	601a      	str	r2, [r3, #0]
}
 8012262:	4770      	bx	lr
 8012264:	20002cb8 	.word	0x20002cb8

08012268 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8012268:	4b01      	ldr	r3, [pc, #4]	; (8012270 <xTaskGetCurrentTaskHandle+0x8>)
 801226a:	6818      	ldr	r0, [r3, #0]
	}
 801226c:	4770      	bx	lr
 801226e:	bf00      	nop
 8012270:	200027c0 	.word	0x200027c0

08012274 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8012274:	4b05      	ldr	r3, [pc, #20]	; (801228c <xTaskGetSchedulerState+0x18>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	b133      	cbz	r3, 8012288 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801227a:	4b05      	ldr	r3, [pc, #20]	; (8012290 <xTaskGetSchedulerState+0x1c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	b10b      	cbz	r3, 8012284 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8012280:	2000      	movs	r0, #0
	}
 8012282:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8012284:	2002      	movs	r0, #2
 8012286:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012288:	2001      	movs	r0, #1
 801228a:	4770      	bx	lr
 801228c:	20002c88 	.word	0x20002c88
 8012290:	20002c34 	.word	0x20002c34

08012294 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8012294:	2800      	cmp	r0, #0
 8012296:	d03e      	beq.n	8012316 <xTaskPriorityInherit+0x82>
	{
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801229c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801229e:	4a20      	ldr	r2, [pc, #128]	; (8012320 <xTaskPriorityInherit+0x8c>)
 80122a0:	6812      	ldr	r2, [r2, #0]
 80122a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80122a4:	4293      	cmp	r3, r2
 80122a6:	d22e      	bcs.n	8012306 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122a8:	6982      	ldr	r2, [r0, #24]
 80122aa:	2a00      	cmp	r2, #0
 80122ac:	db05      	blt.n	80122ba <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ae:	4a1c      	ldr	r2, [pc, #112]	; (8012320 <xTaskPriorityInherit+0x8c>)
 80122b0:	6812      	ldr	r2, [r2, #0]
 80122b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80122b4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80122b8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80122ba:	6961      	ldr	r1, [r4, #20]
 80122bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80122c0:	4a18      	ldr	r2, [pc, #96]	; (8012324 <xTaskPriorityInherit+0x90>)
 80122c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80122c6:	4299      	cmp	r1, r3
 80122c8:	d005      	beq.n	80122d6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122ca:	4b15      	ldr	r3, [pc, #84]	; (8012320 <xTaskPriorityInherit+0x8c>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122d0:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80122d2:	2001      	movs	r0, #1
	}
 80122d4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122d6:	1d25      	adds	r5, r4, #4
 80122d8:	4628      	mov	r0, r5
 80122da:	f7fe fcdf 	bl	8010c9c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122de:	4b10      	ldr	r3, [pc, #64]	; (8012320 <xTaskPriorityInherit+0x8c>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80122e4:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122e6:	4b10      	ldr	r3, [pc, #64]	; (8012328 <xTaskPriorityInherit+0x94>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4298      	cmp	r0, r3
 80122ec:	d901      	bls.n	80122f2 <xTaskPriorityInherit+0x5e>
 80122ee:	4b0e      	ldr	r3, [pc, #56]	; (8012328 <xTaskPriorityInherit+0x94>)
 80122f0:	6018      	str	r0, [r3, #0]
 80122f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80122f6:	4629      	mov	r1, r5
 80122f8:	4b0a      	ldr	r3, [pc, #40]	; (8012324 <xTaskPriorityInherit+0x90>)
 80122fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80122fe:	f7fe fca9 	bl	8010c54 <vListInsertEnd>
				xReturn = pdTRUE;
 8012302:	2001      	movs	r0, #1
 8012304:	e7e6      	b.n	80122d4 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012306:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8012308:	4b05      	ldr	r3, [pc, #20]	; (8012320 <xTaskPriorityInherit+0x8c>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801230e:	429a      	cmp	r2, r3
 8012310:	d303      	bcc.n	801231a <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 8012312:	2000      	movs	r0, #0
 8012314:	e7de      	b.n	80122d4 <xTaskPriorityInherit+0x40>
 8012316:	2000      	movs	r0, #0
	}
 8012318:	4770      	bx	lr
					xReturn = pdTRUE;
 801231a:	2001      	movs	r0, #1
		return xReturn;
 801231c:	e7da      	b.n	80122d4 <xTaskPriorityInherit+0x40>
 801231e:	bf00      	nop
 8012320:	200027c0 	.word	0x200027c0
 8012324:	200027cc 	.word	0x200027cc
 8012328:	20002c3c 	.word	0x20002c3c

0801232c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 801232c:	2800      	cmp	r0, #0
 801232e:	d03b      	beq.n	80123a8 <xTaskPriorityDisinherit+0x7c>
	{
 8012330:	b538      	push	{r3, r4, r5, lr}
 8012332:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8012334:	4b1e      	ldr	r3, [pc, #120]	; (80123b0 <xTaskPriorityDisinherit+0x84>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	4283      	cmp	r3, r0
 801233a:	d008      	beq.n	801234e <xTaskPriorityDisinherit+0x22>
 801233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012340:	f383 8811 	msr	BASEPRI, r3
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	e7fe      	b.n	801234c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 801234e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012350:	b943      	cbnz	r3, 8012364 <xTaskPriorityDisinherit+0x38>
 8012352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012356:	f383 8811 	msr	BASEPRI, r3
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	f3bf 8f4f 	dsb	sy
 8012362:	e7fe      	b.n	8012362 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8012364:	3b01      	subs	r3, #1
 8012366:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012368:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801236a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 801236c:	4291      	cmp	r1, r2
 801236e:	d01d      	beq.n	80123ac <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012370:	b10b      	cbz	r3, 8012376 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8012372:	2000      	movs	r0, #0
	}
 8012374:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012376:	1d05      	adds	r5, r0, #4
 8012378:	4628      	mov	r0, r5
 801237a:	f7fe fc8f 	bl	8010c9c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801237e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012380:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012382:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8012386:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8012388:	4b0a      	ldr	r3, [pc, #40]	; (80123b4 <xTaskPriorityDisinherit+0x88>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4298      	cmp	r0, r3
 801238e:	d901      	bls.n	8012394 <xTaskPriorityDisinherit+0x68>
 8012390:	4b08      	ldr	r3, [pc, #32]	; (80123b4 <xTaskPriorityDisinherit+0x88>)
 8012392:	6018      	str	r0, [r3, #0]
 8012394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012398:	4629      	mov	r1, r5
 801239a:	4b07      	ldr	r3, [pc, #28]	; (80123b8 <xTaskPriorityDisinherit+0x8c>)
 801239c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80123a0:	f7fe fc58 	bl	8010c54 <vListInsertEnd>
					xReturn = pdTRUE;
 80123a4:	2001      	movs	r0, #1
 80123a6:	e7e5      	b.n	8012374 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80123a8:	2000      	movs	r0, #0
	}
 80123aa:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80123ac:	2000      	movs	r0, #0
 80123ae:	e7e1      	b.n	8012374 <xTaskPriorityDisinherit+0x48>
 80123b0:	200027c0 	.word	0x200027c0
 80123b4:	20002c3c 	.word	0x20002c3c
 80123b8:	200027cc 	.word	0x200027cc

080123bc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80123bc:	2800      	cmp	r0, #0
 80123be:	d047      	beq.n	8012450 <vTaskPriorityDisinheritAfterTimeout+0x94>
	{
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	460a      	mov	r2, r1
 80123c4:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80123c6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80123c8:	b941      	cbnz	r1, 80123dc <vTaskPriorityDisinheritAfterTimeout+0x20>
 80123ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ce:	f383 8811 	msr	BASEPRI, r3
 80123d2:	f3bf 8f6f 	isb	sy
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	e7fe      	b.n	80123da <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80123de:	4293      	cmp	r3, r2
 80123e0:	d200      	bcs.n	80123e4 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123e2:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d001      	beq.n	80123ee <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123ea:	2901      	cmp	r1, #1
 80123ec:	d000      	beq.n	80123f0 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 80123ee:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80123f0:	4918      	ldr	r1, [pc, #96]	; (8012454 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80123f2:	6809      	ldr	r1, [r1, #0]
 80123f4:	42a1      	cmp	r1, r4
 80123f6:	d022      	beq.n	801243e <vTaskPriorityDisinheritAfterTimeout+0x82>
					pxTCB->uxPriority = uxPriorityToUse;
 80123f8:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123fa:	69a1      	ldr	r1, [r4, #24]
 80123fc:	2900      	cmp	r1, #0
 80123fe:	db02      	blt.n	8012406 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012400:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012404:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012406:	6961      	ldr	r1, [r4, #20]
 8012408:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801240c:	4b12      	ldr	r3, [pc, #72]	; (8012458 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 801240e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012412:	4291      	cmp	r1, r2
 8012414:	d1eb      	bne.n	80123ee <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012416:	1d25      	adds	r5, r4, #4
 8012418:	4628      	mov	r0, r5
 801241a:	f7fe fc3f 	bl	8010c9c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 801241e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8012420:	4b0e      	ldr	r3, [pc, #56]	; (801245c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4298      	cmp	r0, r3
 8012426:	d901      	bls.n	801242c <vTaskPriorityDisinheritAfterTimeout+0x70>
 8012428:	4b0c      	ldr	r3, [pc, #48]	; (801245c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 801242a:	6018      	str	r0, [r3, #0]
 801242c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012430:	4629      	mov	r1, r5
 8012432:	4b09      	ldr	r3, [pc, #36]	; (8012458 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8012434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012438:	f7fe fc0c 	bl	8010c54 <vListInsertEnd>
	}
 801243c:	e7d7      	b.n	80123ee <vTaskPriorityDisinheritAfterTimeout+0x32>
 801243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012442:	f383 8811 	msr	BASEPRI, r3
 8012446:	f3bf 8f6f 	isb	sy
 801244a:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 801244e:	e7fe      	b.n	801244e <vTaskPriorityDisinheritAfterTimeout+0x92>
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	200027c0 	.word	0x200027c0
 8012458:	200027cc 	.word	0x200027cc
 801245c:	20002c3c 	.word	0x20002c3c

08012460 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8012460:	4b05      	ldr	r3, [pc, #20]	; (8012478 <pvTaskIncrementMutexHeldCount+0x18>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	b123      	cbz	r3, 8012470 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8012466:	4b04      	ldr	r3, [pc, #16]	; (8012478 <pvTaskIncrementMutexHeldCount+0x18>)
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801246c:	3301      	adds	r3, #1
 801246e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8012470:	4b01      	ldr	r3, [pc, #4]	; (8012478 <pvTaskIncrementMutexHeldCount+0x18>)
 8012472:	6818      	ldr	r0, [r3, #0]
	}
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	200027c0 	.word	0x200027c0

0801247c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801247c:	4b06      	ldr	r3, [pc, #24]	; (8012498 <prvGetNextExpireTime+0x1c>)
 801247e:	681a      	ldr	r2, [r3, #0]
 8012480:	6813      	ldr	r3, [r2, #0]
 8012482:	b92b      	cbnz	r3, 8012490 <prvGetNextExpireTime+0x14>
 8012484:	2301      	movs	r3, #1
 8012486:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012488:	b923      	cbnz	r3, 8012494 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801248a:	68d3      	ldr	r3, [r2, #12]
 801248c:	6818      	ldr	r0, [r3, #0]
 801248e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012490:	2300      	movs	r3, #0
 8012492:	e7f8      	b.n	8012486 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012494:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8012496:	4770      	bx	lr
 8012498:	20002cbc 	.word	0x20002cbc

0801249c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801249c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801249e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124a0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80124a2:	4291      	cmp	r1, r2
 80124a4:	d80c      	bhi.n	80124c0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124a6:	1ad2      	subs	r2, r2, r3
 80124a8:	6983      	ldr	r3, [r0, #24]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d301      	bcc.n	80124b2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80124ae:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80124b0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80124b2:	1d01      	adds	r1, r0, #4
 80124b4:	4b09      	ldr	r3, [pc, #36]	; (80124dc <prvInsertTimerInActiveList+0x40>)
 80124b6:	6818      	ldr	r0, [r3, #0]
 80124b8:	f7fe fbd7 	bl	8010c6a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80124bc:	2000      	movs	r0, #0
 80124be:	e7f7      	b.n	80124b0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d201      	bcs.n	80124c8 <prvInsertTimerInActiveList+0x2c>
 80124c4:	4299      	cmp	r1, r3
 80124c6:	d206      	bcs.n	80124d6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124c8:	1d01      	adds	r1, r0, #4
 80124ca:	4b05      	ldr	r3, [pc, #20]	; (80124e0 <prvInsertTimerInActiveList+0x44>)
 80124cc:	6818      	ldr	r0, [r3, #0]
 80124ce:	f7fe fbcc 	bl	8010c6a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80124d2:	2000      	movs	r0, #0
 80124d4:	e7ec      	b.n	80124b0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80124d6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80124d8:	e7ea      	b.n	80124b0 <prvInsertTimerInActiveList+0x14>
 80124da:	bf00      	nop
 80124dc:	20002cc0 	.word	0x20002cc0
 80124e0:	20002cbc 	.word	0x20002cbc

080124e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80124e4:	b530      	push	{r4, r5, lr}
 80124e6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80124e8:	f000 fa5c 	bl	80129a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80124ec:	4b11      	ldr	r3, [pc, #68]	; (8012534 <prvCheckForValidListAndQueue+0x50>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	b11b      	cbz	r3, 80124fa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124f2:	f000 fa79 	bl	80129e8 <vPortExitCritical>
}
 80124f6:	b003      	add	sp, #12
 80124f8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80124fa:	4d0f      	ldr	r5, [pc, #60]	; (8012538 <prvCheckForValidListAndQueue+0x54>)
 80124fc:	4628      	mov	r0, r5
 80124fe:	f7fe fb9b 	bl	8010c38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012502:	4c0e      	ldr	r4, [pc, #56]	; (801253c <prvCheckForValidListAndQueue+0x58>)
 8012504:	4620      	mov	r0, r4
 8012506:	f7fe fb97 	bl	8010c38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801250a:	4b0d      	ldr	r3, [pc, #52]	; (8012540 <prvCheckForValidListAndQueue+0x5c>)
 801250c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801250e:	4b0d      	ldr	r3, [pc, #52]	; (8012544 <prvCheckForValidListAndQueue+0x60>)
 8012510:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012512:	2300      	movs	r3, #0
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	4b0c      	ldr	r3, [pc, #48]	; (8012548 <prvCheckForValidListAndQueue+0x64>)
 8012518:	4a0c      	ldr	r2, [pc, #48]	; (801254c <prvCheckForValidListAndQueue+0x68>)
 801251a:	2110      	movs	r1, #16
 801251c:	200a      	movs	r0, #10
 801251e:	f7fe fccc 	bl	8010eba <xQueueGenericCreateStatic>
 8012522:	4b04      	ldr	r3, [pc, #16]	; (8012534 <prvCheckForValidListAndQueue+0x50>)
 8012524:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8012526:	2800      	cmp	r0, #0
 8012528:	d0e3      	beq.n	80124f2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801252a:	4909      	ldr	r1, [pc, #36]	; (8012550 <prvCheckForValidListAndQueue+0x6c>)
 801252c:	f7ff f8f4 	bl	8011718 <vQueueAddToRegistry>
 8012530:	e7df      	b.n	80124f2 <prvCheckForValidListAndQueue+0xe>
 8012532:	bf00      	nop
 8012534:	20002de0 	.word	0x20002de0
 8012538:	20002d64 	.word	0x20002d64
 801253c:	20002d78 	.word	0x20002d78
 8012540:	20002cbc 	.word	0x20002cbc
 8012544:	20002cc0 	.word	0x20002cc0
 8012548:	20002d90 	.word	0x20002d90
 801254c:	20002cc4 	.word	0x20002cc4
 8012550:	0802f4bc 	.word	0x0802f4bc

08012554 <xTimerCreateTimerTask>:
{
 8012554:	b510      	push	{r4, lr}
 8012556:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8012558:	f7ff ffc4 	bl	80124e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801255c:	4b12      	ldr	r3, [pc, #72]	; (80125a8 <xTimerCreateTimerTask+0x54>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	b1cb      	cbz	r3, 8012596 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012562:	2400      	movs	r4, #0
 8012564:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012566:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012568:	aa07      	add	r2, sp, #28
 801256a:	a906      	add	r1, sp, #24
 801256c:	a805      	add	r0, sp, #20
 801256e:	f7fe fb57 	bl	8010c20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012572:	9b05      	ldr	r3, [sp, #20]
 8012574:	9302      	str	r3, [sp, #8]
 8012576:	9b06      	ldr	r3, [sp, #24]
 8012578:	9301      	str	r3, [sp, #4]
 801257a:	2302      	movs	r3, #2
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	4623      	mov	r3, r4
 8012580:	9a07      	ldr	r2, [sp, #28]
 8012582:	490a      	ldr	r1, [pc, #40]	; (80125ac <xTimerCreateTimerTask+0x58>)
 8012584:	480a      	ldr	r0, [pc, #40]	; (80125b0 <xTimerCreateTimerTask+0x5c>)
 8012586:	f7ff fae7 	bl	8011b58 <xTaskCreateStatic>
 801258a:	4a0a      	ldr	r2, [pc, #40]	; (80125b4 <xTimerCreateTimerTask+0x60>)
 801258c:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 801258e:	b110      	cbz	r0, 8012596 <xTimerCreateTimerTask+0x42>
}
 8012590:	2001      	movs	r0, #1
 8012592:	b008      	add	sp, #32
 8012594:	bd10      	pop	{r4, pc}
 8012596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259a:	f383 8811 	msr	BASEPRI, r3
 801259e:	f3bf 8f6f 	isb	sy
 80125a2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80125a6:	e7fe      	b.n	80125a6 <xTimerCreateTimerTask+0x52>
 80125a8:	20002de0 	.word	0x20002de0
 80125ac:	0802f4c4 	.word	0x0802f4c4
 80125b0:	080128b9 	.word	0x080128b9
 80125b4:	20002de4 	.word	0x20002de4

080125b8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80125b8:	b1c0      	cbz	r0, 80125ec <xTimerGenericCommand+0x34>
{
 80125ba:	b510      	push	{r4, lr}
 80125bc:	b084      	sub	sp, #16
 80125be:	4614      	mov	r4, r2
 80125c0:	461a      	mov	r2, r3
 80125c2:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80125c4:	4816      	ldr	r0, [pc, #88]	; (8012620 <xTimerGenericCommand+0x68>)
 80125c6:	6800      	ldr	r0, [r0, #0]
 80125c8:	b338      	cbz	r0, 801261a <xTimerGenericCommand+0x62>
		xMessage.xMessageID = xCommandID;
 80125ca:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80125cc:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80125ce:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80125d0:	2905      	cmp	r1, #5
 80125d2:	dc1c      	bgt.n	801260e <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80125d4:	f7ff fe4e 	bl	8012274 <xTaskGetSchedulerState>
 80125d8:	2802      	cmp	r0, #2
 80125da:	d010      	beq.n	80125fe <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80125dc:	2300      	movs	r3, #0
 80125de:	461a      	mov	r2, r3
 80125e0:	4669      	mov	r1, sp
 80125e2:	480f      	ldr	r0, [pc, #60]	; (8012620 <xTimerGenericCommand+0x68>)
 80125e4:	6800      	ldr	r0, [r0, #0]
 80125e6:	f7fe fcd7 	bl	8010f98 <xQueueGenericSend>
 80125ea:	e014      	b.n	8012616 <xTimerGenericCommand+0x5e>
 80125ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f0:	f383 8811 	msr	BASEPRI, r3
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80125fc:	e7fe      	b.n	80125fc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80125fe:	2300      	movs	r3, #0
 8012600:	9a06      	ldr	r2, [sp, #24]
 8012602:	4669      	mov	r1, sp
 8012604:	4806      	ldr	r0, [pc, #24]	; (8012620 <xTimerGenericCommand+0x68>)
 8012606:	6800      	ldr	r0, [r0, #0]
 8012608:	f7fe fcc6 	bl	8010f98 <xQueueGenericSend>
 801260c:	e003      	b.n	8012616 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801260e:	2300      	movs	r3, #0
 8012610:	4669      	mov	r1, sp
 8012612:	f7fe fdc7 	bl	80111a4 <xQueueGenericSendFromISR>
}
 8012616:	b004      	add	sp, #16
 8012618:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
 801261a:	2000      	movs	r0, #0
	return xReturn;
 801261c:	e7fb      	b.n	8012616 <xTimerGenericCommand+0x5e>
 801261e:	bf00      	nop
 8012620:	20002de0 	.word	0x20002de0

08012624 <prvSwitchTimerLists>:
{
 8012624:	b570      	push	{r4, r5, r6, lr}
 8012626:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012628:	4b1b      	ldr	r3, [pc, #108]	; (8012698 <prvSwitchTimerLists+0x74>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	b362      	cbz	r2, 801268a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012630:	68db      	ldr	r3, [r3, #12]
 8012632:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012634:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012636:	1d25      	adds	r5, r4, #4
 8012638:	4628      	mov	r0, r5
 801263a:	f7fe fb2f 	bl	8010c9c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801263e:	6a23      	ldr	r3, [r4, #32]
 8012640:	4620      	mov	r0, r4
 8012642:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012644:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012648:	f013 0f04 	tst.w	r3, #4
 801264c:	d0ec      	beq.n	8012628 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801264e:	69a3      	ldr	r3, [r4, #24]
 8012650:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8012652:	429e      	cmp	r6, r3
 8012654:	d207      	bcs.n	8012666 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012656:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012658:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801265a:	4629      	mov	r1, r5
 801265c:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <prvSwitchTimerLists+0x74>)
 801265e:	6818      	ldr	r0, [r3, #0]
 8012660:	f7fe fb03 	bl	8010c6a <vListInsert>
 8012664:	e7e0      	b.n	8012628 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012666:	2100      	movs	r1, #0
 8012668:	9100      	str	r1, [sp, #0]
 801266a:	460b      	mov	r3, r1
 801266c:	4632      	mov	r2, r6
 801266e:	4620      	mov	r0, r4
 8012670:	f7ff ffa2 	bl	80125b8 <xTimerGenericCommand>
				configASSERT( xResult );
 8012674:	2800      	cmp	r0, #0
 8012676:	d1d7      	bne.n	8012628 <prvSwitchTimerLists+0x4>
 8012678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267c:	f383 8811 	msr	BASEPRI, r3
 8012680:	f3bf 8f6f 	isb	sy
 8012684:	f3bf 8f4f 	dsb	sy
 8012688:	e7fe      	b.n	8012688 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801268a:	4a04      	ldr	r2, [pc, #16]	; (801269c <prvSwitchTimerLists+0x78>)
 801268c:	6810      	ldr	r0, [r2, #0]
 801268e:	4902      	ldr	r1, [pc, #8]	; (8012698 <prvSwitchTimerLists+0x74>)
 8012690:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8012692:	6013      	str	r3, [r2, #0]
}
 8012694:	b002      	add	sp, #8
 8012696:	bd70      	pop	{r4, r5, r6, pc}
 8012698:	20002cbc 	.word	0x20002cbc
 801269c:	20002cc0 	.word	0x20002cc0

080126a0 <prvSampleTimeNow>:
{
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80126a4:	f7ff fb82 	bl	8011dac <xTaskGetTickCount>
 80126a8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80126aa:	4b07      	ldr	r3, [pc, #28]	; (80126c8 <prvSampleTimeNow+0x28>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	4283      	cmp	r3, r0
 80126b0:	d805      	bhi.n	80126be <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80126b2:	2300      	movs	r3, #0
 80126b4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80126b6:	4b04      	ldr	r3, [pc, #16]	; (80126c8 <prvSampleTimeNow+0x28>)
 80126b8:	601c      	str	r4, [r3, #0]
}
 80126ba:	4620      	mov	r0, r4
 80126bc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80126be:	f7ff ffb1 	bl	8012624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80126c2:	2301      	movs	r3, #1
 80126c4:	602b      	str	r3, [r5, #0]
 80126c6:	e7f6      	b.n	80126b6 <prvSampleTimeNow+0x16>
 80126c8:	20002d8c 	.word	0x20002d8c

080126cc <prvProcessExpiredTimer>:
{
 80126cc:	b570      	push	{r4, r5, r6, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	4605      	mov	r5, r0
 80126d2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126d4:	4b17      	ldr	r3, [pc, #92]	; (8012734 <prvProcessExpiredTimer+0x68>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126dc:	1d20      	adds	r0, r4, #4
 80126de:	f7fe fadd 	bl	8010c9c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80126e6:	f013 0f04 	tst.w	r3, #4
 80126ea:	d108      	bne.n	80126fe <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80126ec:	f023 0301 	bic.w	r3, r3, #1
 80126f0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126f4:	6a23      	ldr	r3, [r4, #32]
 80126f6:	4620      	mov	r0, r4
 80126f8:	4798      	blx	r3
}
 80126fa:	b002      	add	sp, #8
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80126fe:	69a1      	ldr	r1, [r4, #24]
 8012700:	462b      	mov	r3, r5
 8012702:	4632      	mov	r2, r6
 8012704:	4429      	add	r1, r5
 8012706:	4620      	mov	r0, r4
 8012708:	f7ff fec8 	bl	801249c <prvInsertTimerInActiveList>
 801270c:	2800      	cmp	r0, #0
 801270e:	d0f1      	beq.n	80126f4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012710:	2100      	movs	r1, #0
 8012712:	9100      	str	r1, [sp, #0]
 8012714:	460b      	mov	r3, r1
 8012716:	462a      	mov	r2, r5
 8012718:	4620      	mov	r0, r4
 801271a:	f7ff ff4d 	bl	80125b8 <xTimerGenericCommand>
			configASSERT( xResult );
 801271e:	2800      	cmp	r0, #0
 8012720:	d1e8      	bne.n	80126f4 <prvProcessExpiredTimer+0x28>
 8012722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012726:	f383 8811 	msr	BASEPRI, r3
 801272a:	f3bf 8f6f 	isb	sy
 801272e:	f3bf 8f4f 	dsb	sy
 8012732:	e7fe      	b.n	8012732 <prvProcessExpiredTimer+0x66>
 8012734:	20002cbc 	.word	0x20002cbc

08012738 <prvProcessTimerOrBlockTask>:
{
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	4606      	mov	r6, r0
 801273e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8012740:	f7ff fb2c 	bl	8011d9c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012744:	a801      	add	r0, sp, #4
 8012746:	f7ff ffab 	bl	80126a0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801274a:	9b01      	ldr	r3, [sp, #4]
 801274c:	bb23      	cbnz	r3, 8012798 <prvProcessTimerOrBlockTask+0x60>
 801274e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012750:	b90c      	cbnz	r4, 8012756 <prvProcessTimerOrBlockTask+0x1e>
 8012752:	42b0      	cmp	r0, r6
 8012754:	d217      	bcs.n	8012786 <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 8012756:	b124      	cbz	r4, 8012762 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012758:	4a11      	ldr	r2, [pc, #68]	; (80127a0 <prvProcessTimerOrBlockTask+0x68>)
 801275a:	6812      	ldr	r2, [r2, #0]
 801275c:	6812      	ldr	r2, [r2, #0]
 801275e:	b9ca      	cbnz	r2, 8012794 <prvProcessTimerOrBlockTask+0x5c>
 8012760:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012762:	4622      	mov	r2, r4
 8012764:	1b71      	subs	r1, r6, r5
 8012766:	4b0f      	ldr	r3, [pc, #60]	; (80127a4 <prvProcessTimerOrBlockTask+0x6c>)
 8012768:	6818      	ldr	r0, [r3, #0]
 801276a:	f7ff f815 	bl	8011798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801276e:	f7ff fbb9 	bl	8011ee4 <xTaskResumeAll>
 8012772:	b998      	cbnz	r0, 801279c <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 8012774:	4b0c      	ldr	r3, [pc, #48]	; (80127a8 <prvProcessTimerOrBlockTask+0x70>)
 8012776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	f3bf 8f6f 	isb	sy
 8012784:	e00a      	b.n	801279c <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 8012786:	f7ff fbad 	bl	8011ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801278a:	4629      	mov	r1, r5
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ff9d 	bl	80126cc <prvProcessExpiredTimer>
 8012792:	e003      	b.n	801279c <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012794:	461c      	mov	r4, r3
 8012796:	e7e4      	b.n	8012762 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8012798:	f7ff fba4 	bl	8011ee4 <xTaskResumeAll>
}
 801279c:	b002      	add	sp, #8
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	20002cc0 	.word	0x20002cc0
 80127a4:	20002de0 	.word	0x20002de0
 80127a8:	e000ed04 	.word	0xe000ed04

080127ac <prvProcessReceivedCommands>:
{
 80127ac:	b510      	push	{r4, lr}
 80127ae:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127b0:	e006      	b.n	80127c0 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80127b2:	9907      	ldr	r1, [sp, #28]
 80127b4:	9806      	ldr	r0, [sp, #24]
 80127b6:	9b05      	ldr	r3, [sp, #20]
 80127b8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80127ba:	9b04      	ldr	r3, [sp, #16]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	da0b      	bge.n	80127d8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127c0:	2200      	movs	r2, #0
 80127c2:	a904      	add	r1, sp, #16
 80127c4:	4b3b      	ldr	r3, [pc, #236]	; (80128b4 <prvProcessReceivedCommands+0x108>)
 80127c6:	6818      	ldr	r0, [r3, #0]
 80127c8:	f7fe fdae 	bl	8011328 <xQueueReceive>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d06f      	beq.n	80128b0 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80127d0:	9b04      	ldr	r3, [sp, #16]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	daf1      	bge.n	80127ba <prvProcessReceivedCommands+0xe>
 80127d6:	e7ec      	b.n	80127b2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80127d8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80127da:	6963      	ldr	r3, [r4, #20]
 80127dc:	b113      	cbz	r3, 80127e4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127de:	1d20      	adds	r0, r4, #4
 80127e0:	f7fe fa5c 	bl	8010c9c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80127e4:	a803      	add	r0, sp, #12
 80127e6:	f7ff ff5b 	bl	80126a0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80127ea:	9b04      	ldr	r3, [sp, #16]
 80127ec:	2b09      	cmp	r3, #9
 80127ee:	d8e7      	bhi.n	80127c0 <prvProcessReceivedCommands+0x14>
 80127f0:	e8df f003 	tbb	[pc, r3]
 80127f4:	30050505 	.word	0x30050505
 80127f8:	05055037 	.word	0x05055037
 80127fc:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80127fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012802:	f043 0301 	orr.w	r3, r3, #1
 8012806:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801280a:	9b05      	ldr	r3, [sp, #20]
 801280c:	69a1      	ldr	r1, [r4, #24]
 801280e:	4602      	mov	r2, r0
 8012810:	4419      	add	r1, r3
 8012812:	4620      	mov	r0, r4
 8012814:	f7ff fe42 	bl	801249c <prvInsertTimerInActiveList>
 8012818:	2800      	cmp	r0, #0
 801281a:	d0d1      	beq.n	80127c0 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801281c:	6a23      	ldr	r3, [r4, #32]
 801281e:	4620      	mov	r0, r4
 8012820:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012822:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012826:	f013 0f04 	tst.w	r3, #4
 801282a:	d0c9      	beq.n	80127c0 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801282c:	69a2      	ldr	r2, [r4, #24]
 801282e:	2100      	movs	r1, #0
 8012830:	9100      	str	r1, [sp, #0]
 8012832:	460b      	mov	r3, r1
 8012834:	9805      	ldr	r0, [sp, #20]
 8012836:	4402      	add	r2, r0
 8012838:	4620      	mov	r0, r4
 801283a:	f7ff febd 	bl	80125b8 <xTimerGenericCommand>
							configASSERT( xResult );
 801283e:	2800      	cmp	r0, #0
 8012840:	d1be      	bne.n	80127c0 <prvProcessReceivedCommands+0x14>
 8012842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012846:	f383 8811 	msr	BASEPRI, r3
 801284a:	f3bf 8f6f 	isb	sy
 801284e:	f3bf 8f4f 	dsb	sy
 8012852:	e7fe      	b.n	8012852 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012854:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012858:	f023 0301 	bic.w	r3, r3, #1
 801285c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8012860:	e7ae      	b.n	80127c0 <prvProcessReceivedCommands+0x14>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012862:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012866:	f043 0301 	orr.w	r3, r3, #1
 801286a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801286e:	9905      	ldr	r1, [sp, #20]
 8012870:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012872:	b131      	cbz	r1, 8012882 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012874:	4603      	mov	r3, r0
 8012876:	4602      	mov	r2, r0
 8012878:	4401      	add	r1, r0
 801287a:	4620      	mov	r0, r4
 801287c:	f7ff fe0e 	bl	801249c <prvInsertTimerInActiveList>
					break;
 8012880:	e79e      	b.n	80127c0 <prvProcessReceivedCommands+0x14>
 8012882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012886:	f383 8811 	msr	BASEPRI, r3
 801288a:	f3bf 8f6f 	isb	sy
 801288e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012892:	e7fe      	b.n	8012892 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012894:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012898:	f013 0f02 	tst.w	r3, #2
 801289c:	d004      	beq.n	80128a8 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801289e:	f023 0301 	bic.w	r3, r3, #1
 80128a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80128a6:	e78b      	b.n	80127c0 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
 80128a8:	4620      	mov	r0, r4
 80128aa:	f000 faaf 	bl	8012e0c <vPortFree>
 80128ae:	e787      	b.n	80127c0 <prvProcessReceivedCommands+0x14>
}
 80128b0:	b008      	add	sp, #32
 80128b2:	bd10      	pop	{r4, pc}
 80128b4:	20002de0 	.word	0x20002de0

080128b8 <prvTimerTask>:
{
 80128b8:	b500      	push	{lr}
 80128ba:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80128bc:	a801      	add	r0, sp, #4
 80128be:	f7ff fddd 	bl	801247c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80128c2:	9901      	ldr	r1, [sp, #4]
 80128c4:	f7ff ff38 	bl	8012738 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80128c8:	f7ff ff70 	bl	80127ac <prvProcessReceivedCommands>
	for( ;; )
 80128cc:	e7f6      	b.n	80128bc <prvTimerTask+0x4>
	...

080128d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80128d0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80128d2:	2300      	movs	r3, #0
 80128d4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80128d6:	4b0d      	ldr	r3, [pc, #52]	; (801290c <prvTaskExitError+0x3c>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128de:	d008      	beq.n	80128f2 <prvTaskExitError+0x22>
 80128e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	e7fe      	b.n	80128f0 <prvTaskExitError+0x20>
 80128f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f6:	f383 8811 	msr	BASEPRI, r3
 80128fa:	f3bf 8f6f 	isb	sy
 80128fe:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012902:	9b01      	ldr	r3, [sp, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d0fc      	beq.n	8012902 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012908:	b002      	add	sp, #8
 801290a:	4770      	bx	lr
 801290c:	200000ac 	.word	0x200000ac

08012910 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012910:	4808      	ldr	r0, [pc, #32]	; (8012934 <prvPortStartFirstTask+0x24>)
 8012912:	6800      	ldr	r0, [r0, #0]
 8012914:	6800      	ldr	r0, [r0, #0]
 8012916:	f380 8808 	msr	MSP, r0
 801291a:	f04f 0000 	mov.w	r0, #0
 801291e:	f380 8814 	msr	CONTROL, r0
 8012922:	b662      	cpsie	i
 8012924:	b661      	cpsie	f
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	df00      	svc	0
 8012930:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012932:	0000      	.short	0x0000
 8012934:	e000ed08 	.word	0xe000ed08

08012938 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012938:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012948 <vPortEnableVFP+0x10>
 801293c:	6801      	ldr	r1, [r0, #0]
 801293e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012942:	6001      	str	r1, [r0, #0]
 8012944:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012946:	0000      	.short	0x0000
 8012948:	e000ed88 	.word	0xe000ed88

0801294c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801294c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012950:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012954:	f021 0101 	bic.w	r1, r1, #1
 8012958:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801295c:	4b05      	ldr	r3, [pc, #20]	; (8012974 <pxPortInitialiseStack+0x28>)
 801295e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012962:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012966:	f06f 0302 	mvn.w	r3, #2
 801296a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 801296e:	3844      	subs	r0, #68	; 0x44
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop
 8012974:	080128d1 	.word	0x080128d1
	...

08012980 <SVC_Handler>:
	__asm volatile (
 8012980:	4b07      	ldr	r3, [pc, #28]	; (80129a0 <pxCurrentTCBConst2>)
 8012982:	6819      	ldr	r1, [r3, #0]
 8012984:	6808      	ldr	r0, [r1, #0]
 8012986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298a:	f380 8809 	msr	PSP, r0
 801298e:	f3bf 8f6f 	isb	sy
 8012992:	f04f 0000 	mov.w	r0, #0
 8012996:	f380 8811 	msr	BASEPRI, r0
 801299a:	4770      	bx	lr
 801299c:	f3af 8000 	nop.w

080129a0 <pxCurrentTCBConst2>:
 80129a0:	200027c0 	.word	0x200027c0

080129a4 <vPortEnterCritical>:
 80129a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a8:	f383 8811 	msr	BASEPRI, r3
 80129ac:	f3bf 8f6f 	isb	sy
 80129b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80129b4:	4a0a      	ldr	r2, [pc, #40]	; (80129e0 <vPortEnterCritical+0x3c>)
 80129b6:	6813      	ldr	r3, [r2, #0]
 80129b8:	3301      	adds	r3, #1
 80129ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d000      	beq.n	80129c2 <vPortEnterCritical+0x1e>
}
 80129c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129c2:	4b08      	ldr	r3, [pc, #32]	; (80129e4 <vPortEnterCritical+0x40>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80129ca:	d0f9      	beq.n	80129c0 <vPortEnterCritical+0x1c>
 80129cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d0:	f383 8811 	msr	BASEPRI, r3
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	e7fe      	b.n	80129dc <vPortEnterCritical+0x38>
 80129de:	bf00      	nop
 80129e0:	200000ac 	.word	0x200000ac
 80129e4:	e000ed04 	.word	0xe000ed04

080129e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80129e8:	4b09      	ldr	r3, [pc, #36]	; (8012a10 <vPortExitCritical+0x28>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	b943      	cbnz	r3, 8012a00 <vPortExitCritical+0x18>
 80129ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f2:	f383 8811 	msr	BASEPRI, r3
 80129f6:	f3bf 8f6f 	isb	sy
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	e7fe      	b.n	80129fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8012a00:	3b01      	subs	r3, #1
 8012a02:	4a03      	ldr	r2, [pc, #12]	; (8012a10 <vPortExitCritical+0x28>)
 8012a04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a06:	b90b      	cbnz	r3, 8012a0c <vPortExitCritical+0x24>
	__asm volatile
 8012a08:	f383 8811 	msr	BASEPRI, r3
}
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	200000ac 	.word	0x200000ac
	...

08012a20 <PendSV_Handler>:
	__asm volatile
 8012a20:	f3ef 8009 	mrs	r0, PSP
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	4b15      	ldr	r3, [pc, #84]	; (8012a80 <pxCurrentTCBConst>)
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	f01e 0f10 	tst.w	lr, #16
 8012a30:	bf08      	it	eq
 8012a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3a:	6010      	str	r0, [r2, #0]
 8012a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a44:	f380 8811 	msr	BASEPRI, r0
 8012a48:	f3bf 8f4f 	dsb	sy
 8012a4c:	f3bf 8f6f 	isb	sy
 8012a50:	f7ff faea 	bl	8012028 <vTaskSwitchContext>
 8012a54:	f04f 0000 	mov.w	r0, #0
 8012a58:	f380 8811 	msr	BASEPRI, r0
 8012a5c:	bc09      	pop	{r0, r3}
 8012a5e:	6819      	ldr	r1, [r3, #0]
 8012a60:	6808      	ldr	r0, [r1, #0]
 8012a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a66:	f01e 0f10 	tst.w	lr, #16
 8012a6a:	bf08      	it	eq
 8012a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012a70:	f380 8809 	msr	PSP, r0
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	4770      	bx	lr
 8012a7a:	bf00      	nop
 8012a7c:	f3af 8000 	nop.w

08012a80 <pxCurrentTCBConst>:
 8012a80:	200027c0 	.word	0x200027c0

08012a84 <xPortSysTickHandler>:
{
 8012a84:	b508      	push	{r3, lr}
	__asm volatile
 8012a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8012a96:	f7ff f997 	bl	8011dc8 <xTaskIncrementTick>
 8012a9a:	b118      	cbz	r0, 8012aa4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a9c:	4b03      	ldr	r3, [pc, #12]	; (8012aac <xPortSysTickHandler+0x28>)
 8012a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aa2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	f383 8811 	msr	BASEPRI, r3
}
 8012aaa:	bd08      	pop	{r3, pc}
 8012aac:	e000ed04 	.word	0xe000ed04

08012ab0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ab0:	4a08      	ldr	r2, [pc, #32]	; (8012ad4 <vPortSetupTimerInterrupt+0x24>)
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012ab6:	4908      	ldr	r1, [pc, #32]	; (8012ad8 <vPortSetupTimerInterrupt+0x28>)
 8012ab8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012aba:	4b08      	ldr	r3, [pc, #32]	; (8012adc <vPortSetupTimerInterrupt+0x2c>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	4908      	ldr	r1, [pc, #32]	; (8012ae0 <vPortSetupTimerInterrupt+0x30>)
 8012ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8012ac4:	099b      	lsrs	r3, r3, #6
 8012ac6:	3b01      	subs	r3, #1
 8012ac8:	4906      	ldr	r1, [pc, #24]	; (8012ae4 <vPortSetupTimerInterrupt+0x34>)
 8012aca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012acc:	2307      	movs	r3, #7
 8012ace:	6013      	str	r3, [r2, #0]
}
 8012ad0:	4770      	bx	lr
 8012ad2:	bf00      	nop
 8012ad4:	e000e010 	.word	0xe000e010
 8012ad8:	e000e018 	.word	0xe000e018
 8012adc:	2000009c 	.word	0x2000009c
 8012ae0:	10624dd3 	.word	0x10624dd3
 8012ae4:	e000e014 	.word	0xe000e014

08012ae8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012ae8:	4b3a      	ldr	r3, [pc, #232]	; (8012bd4 <xPortStartScheduler+0xec>)
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	4b3a      	ldr	r3, [pc, #232]	; (8012bd8 <xPortStartScheduler+0xf0>)
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d029      	beq.n	8012b46 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012af2:	4b38      	ldr	r3, [pc, #224]	; (8012bd4 <xPortStartScheduler+0xec>)
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	4b39      	ldr	r3, [pc, #228]	; (8012bdc <xPortStartScheduler+0xf4>)
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d02d      	beq.n	8012b58 <xPortStartScheduler+0x70>
{
 8012afc:	b510      	push	{r4, lr}
 8012afe:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b00:	4b37      	ldr	r3, [pc, #220]	; (8012be0 <xPortStartScheduler+0xf8>)
 8012b02:	781a      	ldrb	r2, [r3, #0]
 8012b04:	b2d2      	uxtb	r2, r2
 8012b06:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b08:	22ff      	movs	r2, #255	; 0xff
 8012b0a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012b18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b1c:	4a31      	ldr	r2, [pc, #196]	; (8012be4 <xPortStartScheduler+0xfc>)
 8012b1e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b20:	4b31      	ldr	r3, [pc, #196]	; (8012be8 <xPortStartScheduler+0x100>)
 8012b22:	2207      	movs	r2, #7
 8012b24:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b26:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012b2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012b2e:	d01c      	beq.n	8012b6a <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8012b30:	4a2d      	ldr	r2, [pc, #180]	; (8012be8 <xPortStartScheduler+0x100>)
 8012b32:	6813      	ldr	r3, [r2, #0]
 8012b34:	3b01      	subs	r3, #1
 8012b36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012b3c:	005b      	lsls	r3, r3, #1
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	f88d 3003 	strb.w	r3, [sp, #3]
 8012b44:	e7ef      	b.n	8012b26 <xPortStartScheduler+0x3e>
	__asm volatile
 8012b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4a:	f383 8811 	msr	BASEPRI, r3
 8012b4e:	f3bf 8f6f 	isb	sy
 8012b52:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012b56:	e7fe      	b.n	8012b56 <xPortStartScheduler+0x6e>
 8012b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b5c:	f383 8811 	msr	BASEPRI, r3
 8012b60:	f3bf 8f6f 	isb	sy
 8012b64:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012b68:	e7fe      	b.n	8012b68 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012b6a:	4b1f      	ldr	r3, [pc, #124]	; (8012be8 <xPortStartScheduler+0x100>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	2b03      	cmp	r3, #3
 8012b70:	d008      	beq.n	8012b84 <xPortStartScheduler+0x9c>
 8012b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b76:	f383 8811 	msr	BASEPRI, r3
 8012b7a:	f3bf 8f6f 	isb	sy
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	e7fe      	b.n	8012b82 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012b84:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b8a:	4a17      	ldr	r2, [pc, #92]	; (8012be8 <xPortStartScheduler+0x100>)
 8012b8c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b8e:	9b01      	ldr	r3, [sp, #4]
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	4a13      	ldr	r2, [pc, #76]	; (8012be0 <xPortStartScheduler+0xf8>)
 8012b94:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b96:	4b15      	ldr	r3, [pc, #84]	; (8012bec <xPortStartScheduler+0x104>)
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8012b9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8012ba6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8012ba8:	f7ff ff82 	bl	8012ab0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8012bac:	2400      	movs	r4, #0
 8012bae:	4b10      	ldr	r3, [pc, #64]	; (8012bf0 <xPortStartScheduler+0x108>)
 8012bb0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8012bb2:	f7ff fec1 	bl	8012938 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012bb6:	4a0f      	ldr	r2, [pc, #60]	; (8012bf4 <xPortStartScheduler+0x10c>)
 8012bb8:	6813      	ldr	r3, [r2, #0]
 8012bba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012bbe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8012bc0:	f7ff fea6 	bl	8012910 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8012bc4:	f7ff fa30 	bl	8012028 <vTaskSwitchContext>
	prvTaskExitError();
 8012bc8:	f7ff fe82 	bl	80128d0 <prvTaskExitError>
}
 8012bcc:	4620      	mov	r0, r4
 8012bce:	b002      	add	sp, #8
 8012bd0:	bd10      	pop	{r4, pc}
 8012bd2:	bf00      	nop
 8012bd4:	e000ed00 	.word	0xe000ed00
 8012bd8:	410fc271 	.word	0x410fc271
 8012bdc:	410fc270 	.word	0x410fc270
 8012be0:	e000e400 	.word	0xe000e400
 8012be4:	20002de8 	.word	0x20002de8
 8012be8:	20002dec 	.word	0x20002dec
 8012bec:	e000ed20 	.word	0xe000ed20
 8012bf0:	200000ac 	.word	0x200000ac
 8012bf4:	e000ef34 	.word	0xe000ef34

08012bf8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012bf8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012bfc:	2b0f      	cmp	r3, #15
 8012bfe:	d90f      	bls.n	8012c20 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012c00:	4a10      	ldr	r2, [pc, #64]	; (8012c44 <vPortValidateInterruptPriority+0x4c>)
 8012c02:	5c9b      	ldrb	r3, [r3, r2]
 8012c04:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012c06:	4a10      	ldr	r2, [pc, #64]	; (8012c48 <vPortValidateInterruptPriority+0x50>)
 8012c08:	7812      	ldrb	r2, [r2, #0]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d908      	bls.n	8012c20 <vPortValidateInterruptPriority+0x28>
 8012c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c12:	f383 8811 	msr	BASEPRI, r3
 8012c16:	f3bf 8f6f 	isb	sy
 8012c1a:	f3bf 8f4f 	dsb	sy
 8012c1e:	e7fe      	b.n	8012c1e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012c20:	4b0a      	ldr	r3, [pc, #40]	; (8012c4c <vPortValidateInterruptPriority+0x54>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012c28:	4a09      	ldr	r2, [pc, #36]	; (8012c50 <vPortValidateInterruptPriority+0x58>)
 8012c2a:	6812      	ldr	r2, [r2, #0]
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d908      	bls.n	8012c42 <vPortValidateInterruptPriority+0x4a>
 8012c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c34:	f383 8811 	msr	BASEPRI, r3
 8012c38:	f3bf 8f6f 	isb	sy
 8012c3c:	f3bf 8f4f 	dsb	sy
 8012c40:	e7fe      	b.n	8012c40 <vPortValidateInterruptPriority+0x48>
	}
 8012c42:	4770      	bx	lr
 8012c44:	e000e3f0 	.word	0xe000e3f0
 8012c48:	20002de8 	.word	0x20002de8
 8012c4c:	e000ed0c 	.word	0xe000ed0c
 8012c50:	20002dec 	.word	0x20002dec

08012c54 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012c54:	4a12      	ldr	r2, [pc, #72]	; (8012ca0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012c56:	f012 0f07 	tst.w	r2, #7
 8012c5a:	d01e      	beq.n	8012c9a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012c5c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c5e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012c62:	f5c1 437c 	rsb	r3, r1, #64512	; 0xfc00
 8012c66:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c68:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012c6a:	480e      	ldr	r0, [pc, #56]	; (8012ca4 <prvHeapInit+0x50>)
 8012c6c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012c6e:	2100      	movs	r1, #0
 8012c70:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012c72:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8012c74:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c76:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8012c7a:	480b      	ldr	r0, [pc, #44]	; (8012ca8 <prvHeapInit+0x54>)
 8012c7c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8012c7e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012c80:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012c82:	1a99      	subs	r1, r3, r2
 8012c84:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012c86:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c88:	4b08      	ldr	r3, [pc, #32]	; (8012cac <prvHeapInit+0x58>)
 8012c8a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c8c:	4b08      	ldr	r3, [pc, #32]	; (8012cb0 <prvHeapInit+0x5c>)
 8012c8e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012c90:	4b08      	ldr	r3, [pc, #32]	; (8012cb4 <prvHeapInit+0x60>)
 8012c92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012c96:	601a      	str	r2, [r3, #0]
}
 8012c98:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012c9a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8012c9e:	e7e4      	b.n	8012c6a <prvHeapInit+0x16>
 8012ca0:	20002df4 	.word	0x20002df4
 8012ca4:	20012a08 	.word	0x20012a08
 8012ca8:	20002df0 	.word	0x20002df0
 8012cac:	200129fc 	.word	0x200129fc
 8012cb0:	200129f8 	.word	0x200129f8
 8012cb4:	200129f4 	.word	0x200129f4

08012cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012cb8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012cba:	4b13      	ldr	r3, [pc, #76]	; (8012d08 <prvInsertBlockIntoFreeList+0x50>)
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4283      	cmp	r3, r0
 8012cc2:	d3fb      	bcc.n	8012cbc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012cc4:	6851      	ldr	r1, [r2, #4]
 8012cc6:	1854      	adds	r4, r2, r1
 8012cc8:	4284      	cmp	r4, r0
 8012cca:	d00a      	beq.n	8012ce2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012ccc:	6841      	ldr	r1, [r0, #4]
 8012cce:	1844      	adds	r4, r0, r1
 8012cd0:	42a3      	cmp	r3, r4
 8012cd2:	d00b      	beq.n	8012cec <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012cd4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012cd6:	4290      	cmp	r0, r2
 8012cd8:	d000      	beq.n	8012cdc <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012cda:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ce0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ce2:	6840      	ldr	r0, [r0, #4]
 8012ce4:	4401      	add	r1, r0
 8012ce6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8012ce8:	4610      	mov	r0, r2
 8012cea:	e7ef      	b.n	8012ccc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012cec:	4c07      	ldr	r4, [pc, #28]	; (8012d0c <prvInsertBlockIntoFreeList+0x54>)
 8012cee:	6824      	ldr	r4, [r4, #0]
 8012cf0:	42a3      	cmp	r3, r4
 8012cf2:	d006      	beq.n	8012d02 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	4419      	add	r1, r3
 8012cf8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012cfa:	6813      	ldr	r3, [r2, #0]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	6003      	str	r3, [r0, #0]
 8012d00:	e7e9      	b.n	8012cd6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012d02:	6004      	str	r4, [r0, #0]
 8012d04:	e7e7      	b.n	8012cd6 <prvInsertBlockIntoFreeList+0x1e>
 8012d06:	bf00      	nop
 8012d08:	20012a08 	.word	0x20012a08
 8012d0c:	20002df0 	.word	0x20002df0

08012d10 <pvPortMalloc>:
{
 8012d10:	b570      	push	{r4, r5, r6, lr}
 8012d12:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8012d14:	f7ff f842 	bl	8011d9c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8012d18:	4b36      	ldr	r3, [pc, #216]	; (8012df4 <pvPortMalloc+0xe4>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	b1a3      	cbz	r3, 8012d48 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012d1e:	4b36      	ldr	r3, [pc, #216]	; (8012df8 <pvPortMalloc+0xe8>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	421c      	tst	r4, r3
 8012d24:	d14e      	bne.n	8012dc4 <pvPortMalloc+0xb4>
			if( xWantedSize > 0 )
 8012d26:	b134      	cbz	r4, 8012d36 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8012d28:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012d2a:	f014 0f07 	tst.w	r4, #7
 8012d2e:	d002      	beq.n	8012d36 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012d30:	f024 0407 	bic.w	r4, r4, #7
 8012d34:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012d36:	2c00      	cmp	r4, #0
 8012d38:	d046      	beq.n	8012dc8 <pvPortMalloc+0xb8>
 8012d3a:	4b30      	ldr	r3, [pc, #192]	; (8012dfc <pvPortMalloc+0xec>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	42a3      	cmp	r3, r4
 8012d40:	d351      	bcc.n	8012de6 <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 8012d42:	4b2f      	ldr	r3, [pc, #188]	; (8012e00 <pvPortMalloc+0xf0>)
 8012d44:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d46:	e004      	b.n	8012d52 <pvPortMalloc+0x42>
			prvHeapInit();
 8012d48:	f7ff ff84 	bl	8012c54 <prvHeapInit>
 8012d4c:	e7e7      	b.n	8012d1e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8012d4e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8012d50:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d52:	686a      	ldr	r2, [r5, #4]
 8012d54:	42a2      	cmp	r2, r4
 8012d56:	d202      	bcs.n	8012d5e <pvPortMalloc+0x4e>
 8012d58:	682a      	ldr	r2, [r5, #0]
 8012d5a:	2a00      	cmp	r2, #0
 8012d5c:	d1f7      	bne.n	8012d4e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8012d5e:	4a25      	ldr	r2, [pc, #148]	; (8012df4 <pvPortMalloc+0xe4>)
 8012d60:	6812      	ldr	r2, [r2, #0]
 8012d62:	42aa      	cmp	r2, r5
 8012d64:	d041      	beq.n	8012dea <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d66:	681e      	ldr	r6, [r3, #0]
 8012d68:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012d6a:	682a      	ldr	r2, [r5, #0]
 8012d6c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012d6e:	686b      	ldr	r3, [r5, #4]
 8012d70:	1b1b      	subs	r3, r3, r4
 8012d72:	2b10      	cmp	r3, #16
 8012d74:	d910      	bls.n	8012d98 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012d76:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d78:	f010 0f07 	tst.w	r0, #7
 8012d7c:	d008      	beq.n	8012d90 <pvPortMalloc+0x80>
 8012d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d82:	f383 8811 	msr	BASEPRI, r3
 8012d86:	f3bf 8f6f 	isb	sy
 8012d8a:	f3bf 8f4f 	dsb	sy
 8012d8e:	e7fe      	b.n	8012d8e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012d90:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012d92:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012d94:	f7ff ff90 	bl	8012cb8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012d98:	686a      	ldr	r2, [r5, #4]
 8012d9a:	4918      	ldr	r1, [pc, #96]	; (8012dfc <pvPortMalloc+0xec>)
 8012d9c:	680b      	ldr	r3, [r1, #0]
 8012d9e:	1a9b      	subs	r3, r3, r2
 8012da0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012da2:	4918      	ldr	r1, [pc, #96]	; (8012e04 <pvPortMalloc+0xf4>)
 8012da4:	6809      	ldr	r1, [r1, #0]
 8012da6:	428b      	cmp	r3, r1
 8012da8:	d201      	bcs.n	8012dae <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012daa:	4916      	ldr	r1, [pc, #88]	; (8012e04 <pvPortMalloc+0xf4>)
 8012dac:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012dae:	4b12      	ldr	r3, [pc, #72]	; (8012df8 <pvPortMalloc+0xe8>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	4313      	orrs	r3, r2
 8012db4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012db6:	2300      	movs	r3, #0
 8012db8:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8012dba:	4a13      	ldr	r2, [pc, #76]	; (8012e08 <pvPortMalloc+0xf8>)
 8012dbc:	6813      	ldr	r3, [r2, #0]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	6013      	str	r3, [r2, #0]
 8012dc2:	e002      	b.n	8012dca <pvPortMalloc+0xba>
void *pvReturn = NULL;
 8012dc4:	2600      	movs	r6, #0
 8012dc6:	e000      	b.n	8012dca <pvPortMalloc+0xba>
 8012dc8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8012dca:	f7ff f88b 	bl	8011ee4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012dce:	f016 0f07 	tst.w	r6, #7
 8012dd2:	d00c      	beq.n	8012dee <pvPortMalloc+0xde>
 8012dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd8:	f383 8811 	msr	BASEPRI, r3
 8012ddc:	f3bf 8f6f 	isb	sy
 8012de0:	f3bf 8f4f 	dsb	sy
 8012de4:	e7fe      	b.n	8012de4 <pvPortMalloc+0xd4>
void *pvReturn = NULL;
 8012de6:	2600      	movs	r6, #0
 8012de8:	e7ef      	b.n	8012dca <pvPortMalloc+0xba>
 8012dea:	2600      	movs	r6, #0
 8012dec:	e7ed      	b.n	8012dca <pvPortMalloc+0xba>
}
 8012dee:	4630      	mov	r0, r6
 8012df0:	bd70      	pop	{r4, r5, r6, pc}
 8012df2:	bf00      	nop
 8012df4:	20002df0 	.word	0x20002df0
 8012df8:	200129f4 	.word	0x200129f4
 8012dfc:	200129f8 	.word	0x200129f8
 8012e00:	20012a08 	.word	0x20012a08
 8012e04:	200129fc 	.word	0x200129fc
 8012e08:	20012a00 	.word	0x20012a00

08012e0c <vPortFree>:
	if( pv != NULL )
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d034      	beq.n	8012e7a <vPortFree+0x6e>
{
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8012e14:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e18:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012e1c:	4a17      	ldr	r2, [pc, #92]	; (8012e7c <vPortFree+0x70>)
 8012e1e:	6812      	ldr	r2, [r2, #0]
 8012e20:	4213      	tst	r3, r2
 8012e22:	d108      	bne.n	8012e36 <vPortFree+0x2a>
 8012e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	e7fe      	b.n	8012e34 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012e36:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8012e3a:	b141      	cbz	r1, 8012e4e <vPortFree+0x42>
 8012e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e40:	f383 8811 	msr	BASEPRI, r3
 8012e44:	f3bf 8f6f 	isb	sy
 8012e48:	f3bf 8f4f 	dsb	sy
 8012e4c:	e7fe      	b.n	8012e4c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012e4e:	ea23 0302 	bic.w	r3, r3, r2
 8012e52:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8012e56:	f7fe ffa1 	bl	8011d9c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012e5a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8012e5e:	4a08      	ldr	r2, [pc, #32]	; (8012e80 <vPortFree+0x74>)
 8012e60:	6813      	ldr	r3, [r2, #0]
 8012e62:	440b      	add	r3, r1
 8012e64:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012e66:	4628      	mov	r0, r5
 8012e68:	f7ff ff26 	bl	8012cb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012e6c:	4a05      	ldr	r2, [pc, #20]	; (8012e84 <vPortFree+0x78>)
 8012e6e:	6813      	ldr	r3, [r2, #0]
 8012e70:	3301      	adds	r3, #1
 8012e72:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8012e74:	f7ff f836 	bl	8011ee4 <xTaskResumeAll>
}
 8012e78:	bd38      	pop	{r3, r4, r5, pc}
 8012e7a:	4770      	bx	lr
 8012e7c:	200129f4 	.word	0x200129f4
 8012e80:	200129f8 	.word	0x200129f8
 8012e84:	20012a04 	.word	0x20012a04

08012e88 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012e88:	b508      	push	{r3, lr}
  SystemClock_Config();
 8012e8a:	f7f4 fa2b 	bl	80072e4 <SystemClock_Config>
}
 8012e8e:	bd08      	pop	{r3, pc}

08012e90 <HAL_PCD_SetupStageCallback>:
{
 8012e90:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012e92:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8012e96:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012e9a:	f7fd f830 	bl	800fefe <USBD_LL_SetupStage>
}
 8012e9e:	bd08      	pop	{r3, pc}

08012ea0 <HAL_PCD_DataOutStageCallback>:
{
 8012ea0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012ea2:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8012ea6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012eaa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012eae:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012eb2:	f7fd f850 	bl	800ff56 <USBD_LL_DataOutStage>
}
 8012eb6:	bd08      	pop	{r3, pc}

08012eb8 <HAL_PCD_DataInStageCallback>:
{
 8012eb8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012eba:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8012ebe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012ec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012ec4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012ec8:	f7fd f881 	bl	800ffce <USBD_LL_DataInStage>
}
 8012ecc:	bd08      	pop	{r3, pc}

08012ece <HAL_PCD_SOFCallback>:
{
 8012ece:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012ed0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012ed4:	f7fd f921 	bl	801011a <USBD_LL_SOF>
}
 8012ed8:	bd08      	pop	{r3, pc}

08012eda <HAL_PCD_ResetCallback>:
{
 8012eda:	b510      	push	{r4, lr}
 8012edc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012ede:	68c3      	ldr	r3, [r0, #12]
 8012ee0:	2b02      	cmp	r3, #2
 8012ee2:	d109      	bne.n	8012ef8 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8012eea:	f7fd f8fc 	bl	80100e6 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012eee:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8012ef2:	f7fd f8cb 	bl	801008c <USBD_LL_Reset>
}
 8012ef6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8012ef8:	f7f4 f9f2 	bl	80072e0 <Error_Handler>
 8012efc:	e7f2      	b.n	8012ee4 <HAL_PCD_ResetCallback+0xa>
	...

08012f00 <HAL_PCD_SuspendCallback>:
{
 8012f00:	b510      	push	{r4, lr}
 8012f02:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012f04:	6802      	ldr	r2, [r0, #0]
 8012f06:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8012f0a:	f043 0301 	orr.w	r3, r3, #1
 8012f0e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012f12:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012f16:	f7fd f8e9 	bl	80100ec <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8012f1a:	6a23      	ldr	r3, [r4, #32]
 8012f1c:	b123      	cbz	r3, 8012f28 <HAL_PCD_SuspendCallback+0x28>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012f1e:	4a03      	ldr	r2, [pc, #12]	; (8012f2c <HAL_PCD_SuspendCallback+0x2c>)
 8012f20:	6913      	ldr	r3, [r2, #16]
 8012f22:	f043 0306 	orr.w	r3, r3, #6
 8012f26:	6113      	str	r3, [r2, #16]
}
 8012f28:	bd10      	pop	{r4, pc}
 8012f2a:	bf00      	nop
 8012f2c:	e000ed00 	.word	0xe000ed00

08012f30 <HAL_PCD_ResumeCallback>:
{
 8012f30:	b510      	push	{r4, lr}
 8012f32:	4604      	mov	r4, r0
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012f34:	6802      	ldr	r2, [r0, #0]
 8012f36:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8012f3a:	f023 0301 	bic.w	r3, r3, #1
 8012f3e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  if (hpcd->Init.low_power_enable)
 8012f42:	6a03      	ldr	r3, [r0, #32]
 8012f44:	b923      	cbnz	r3, 8012f50 <HAL_PCD_ResumeCallback+0x20>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012f46:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8012f4a:	f7fd f8d9 	bl	8010100 <USBD_LL_Resume>
}
 8012f4e:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012f50:	4a03      	ldr	r2, [pc, #12]	; (8012f60 <HAL_PCD_ResumeCallback+0x30>)
 8012f52:	6913      	ldr	r3, [r2, #16]
 8012f54:	f023 0306 	bic.w	r3, r3, #6
 8012f58:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012f5a:	f7ff ff95 	bl	8012e88 <SystemClockConfig_Resume>
 8012f5e:	e7f2      	b.n	8012f46 <HAL_PCD_ResumeCallback+0x16>
 8012f60:	e000ed00 	.word	0xe000ed00

08012f64 <HAL_PCD_ISOOUTIncompleteCallback>:
{
 8012f64:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012f66:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012f6a:	f7fd f8fe 	bl	801016a <USBD_LL_IsoOUTIncomplete>
}
 8012f6e:	bd08      	pop	{r3, pc}

08012f70 <HAL_PCD_ISOINIncompleteCallback>:
{
 8012f70:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012f72:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012f76:	f7fd f8e4 	bl	8010142 <USBD_LL_IsoINIncomplete>
}
 8012f7a:	bd08      	pop	{r3, pc}

08012f7c <HAL_PCD_ConnectCallback>:
{
 8012f7c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012f7e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012f82:	f7fd f906 	bl	8010192 <USBD_LL_DevConnected>
}
 8012f86:	bd08      	pop	{r3, pc}

08012f88 <HAL_PCD_DisconnectCallback>:
{
 8012f88:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012f8a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8012f8e:	f7fd f902 	bl	8010196 <USBD_LL_DevDisconnected>
}
 8012f92:	bd08      	pop	{r3, pc}

08012f94 <USBD_LL_OpenEP>:
{
 8012f94:	b510      	push	{r4, lr}
 8012f96:	4614      	mov	r4, r2
 8012f98:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012f9a:	4623      	mov	r3, r4
 8012f9c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012fa0:	f7f6 ffb1 	bl	8009f06 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8012fa4:	2803      	cmp	r0, #3
 8012fa6:	d805      	bhi.n	8012fb4 <USBD_LL_OpenEP+0x20>
 8012fa8:	e8df f000 	tbb	[pc, r0]
 8012fac:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8012fb0:	2001      	movs	r0, #1
}
 8012fb2:	bd10      	pop	{r4, pc}
      usb_status = USBD_FAIL;
 8012fb4:	2003      	movs	r0, #3
 8012fb6:	e7fc      	b.n	8012fb2 <USBD_LL_OpenEP+0x1e>

08012fb8 <USBD_LL_StallEP>:
{
 8012fb8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012fba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012fbe:	f7f7 f828 	bl	800a012 <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8012fc2:	2803      	cmp	r0, #3
 8012fc4:	d805      	bhi.n	8012fd2 <USBD_LL_StallEP+0x1a>
 8012fc6:	e8df f000 	tbb	[pc, r0]
 8012fca:	0403      	.short	0x0403
 8012fcc:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8012fce:	2001      	movs	r0, #1
}
 8012fd0:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8012fd2:	2003      	movs	r0, #3
 8012fd4:	e7fc      	b.n	8012fd0 <USBD_LL_StallEP+0x18>

08012fd6 <USBD_LL_ClearStallEP>:
{
 8012fd6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012fd8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8012fdc:	f7f7 f85c 	bl	800a098 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 8012fe0:	2803      	cmp	r0, #3
 8012fe2:	d805      	bhi.n	8012ff0 <USBD_LL_ClearStallEP+0x1a>
 8012fe4:	e8df f000 	tbb	[pc, r0]
 8012fe8:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8012fec:	2001      	movs	r0, #1
}
 8012fee:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8012ff0:	2003      	movs	r0, #3
 8012ff2:	e7fc      	b.n	8012fee <USBD_LL_ClearStallEP+0x18>

08012ff4 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012ff4:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8012ff8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012ffc:	d108      	bne.n	8013010 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012ffe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8013002:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013006:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801300a:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 801300e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013010:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8013014:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013018:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801301c:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8013020:	4770      	bx	lr

08013022 <USBD_LL_SetUSBAddress>:
{
 8013022:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013024:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013028:	f7f6 ff59 	bl	8009ede <HAL_PCD_SetAddress>
  switch (hal_status) {
 801302c:	2803      	cmp	r0, #3
 801302e:	d805      	bhi.n	801303c <USBD_LL_SetUSBAddress+0x1a>
 8013030:	e8df f000 	tbb	[pc, r0]
 8013034:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8013038:	2001      	movs	r0, #1
}
 801303a:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 801303c:	2003      	movs	r0, #3
 801303e:	e7fc      	b.n	801303a <USBD_LL_SetUSBAddress+0x18>

08013040 <USBD_LL_Transmit>:
{
 8013040:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013042:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013046:	f7f6 ffc4 	bl	8009fd2 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 801304a:	2803      	cmp	r0, #3
 801304c:	d805      	bhi.n	801305a <USBD_LL_Transmit+0x1a>
 801304e:	e8df f000 	tbb	[pc, r0]
 8013052:	0403      	.short	0x0403
 8013054:	0302      	.short	0x0302
      usb_status = USBD_BUSY;
 8013056:	2001      	movs	r0, #1
}
 8013058:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 801305a:	2003      	movs	r0, #3
 801305c:	e7fc      	b.n	8013058 <USBD_LL_Transmit+0x18>

0801305e <USBD_LL_PrepareReceive>:
{
 801305e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013060:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8013064:	f7f6 ff92 	bl	8009f8c <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8013068:	2803      	cmp	r0, #3
 801306a:	d805      	bhi.n	8013078 <USBD_LL_PrepareReceive+0x1a>
 801306c:	e8df f000 	tbb	[pc, r0]
 8013070:	03020403 	.word	0x03020403
      usb_status = USBD_BUSY;
 8013074:	2001      	movs	r0, #1
}
 8013076:	bd08      	pop	{r3, pc}
      usb_status = USBD_FAIL;
 8013078:	2003      	movs	r0, #3
 801307a:	e7fc      	b.n	8013076 <USBD_LL_PrepareReceive+0x18>

0801307c <HAL_PCDEx_LPM_Callback>:
{
 801307c:	b510      	push	{r4, lr}
 801307e:	4604      	mov	r4, r0
  switch (msg)
 8013080:	b111      	cbz	r1, 8013088 <HAL_PCDEx_LPM_Callback+0xc>
 8013082:	2901      	cmp	r1, #1
 8013084:	d016      	beq.n	80130b4 <HAL_PCDEx_LPM_Callback+0x38>
}
 8013086:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8013088:	6a03      	ldr	r3, [r0, #32]
 801308a:	b95b      	cbnz	r3, 80130a4 <HAL_PCDEx_LPM_Callback+0x28>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801308c:	6822      	ldr	r2, [r4, #0]
 801308e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8013092:	f023 0301 	bic.w	r3, r3, #1
 8013096:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 801309a:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 801309e:	f7fd f82f 	bl	8010100 <USBD_LL_Resume>
    break;
 80130a2:	e7f0      	b.n	8013086 <HAL_PCDEx_LPM_Callback+0xa>
      SystemClockConfig_Resume();
 80130a4:	f7ff fef0 	bl	8012e88 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130a8:	4a0c      	ldr	r2, [pc, #48]	; (80130dc <HAL_PCDEx_LPM_Callback+0x60>)
 80130aa:	6913      	ldr	r3, [r2, #16]
 80130ac:	f023 0306 	bic.w	r3, r3, #6
 80130b0:	6113      	str	r3, [r2, #16]
 80130b2:	e7eb      	b.n	801308c <HAL_PCDEx_LPM_Callback+0x10>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80130b4:	6802      	ldr	r2, [r0, #0]
 80130b6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80130ba:	f043 0301 	orr.w	r3, r3, #1
 80130be:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80130c2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80130c6:	f7fd f811 	bl	80100ec <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80130ca:	6a23      	ldr	r3, [r4, #32]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d0da      	beq.n	8013086 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130d0:	4a02      	ldr	r2, [pc, #8]	; (80130dc <HAL_PCDEx_LPM_Callback+0x60>)
 80130d2:	6913      	ldr	r3, [r2, #16]
 80130d4:	f043 0306 	orr.w	r3, r3, #6
 80130d8:	6113      	str	r3, [r2, #16]
}
 80130da:	e7d4      	b.n	8013086 <HAL_PCDEx_LPM_Callback+0xa>
 80130dc:	e000ed00 	.word	0xe000ed00

080130e0 <MemAlloc>:
   /* in bytes of the fragment to be allocated.  The function tries to  */
   /* avoid fragmentation by obtaining memory requests larger than      */
   /* LARGE_SIZE from the end of the buffer, while small fragments are  */
   /* taken from the start of the buffer.                               */
static void *MemAlloc(void *Heap, unsigned long Size)
{
 80130e0:	b470      	push	{r4, r5, r6}
   /* Convert the requested memory allocation in bytes to alignment     */
   /* size, rounding up, and add the block info header size to it.      */
   Size = BLOCK_INFO_SIZE((Size + (ALIGNMENT_SIZE - 1)) / ALIGNMENT_SIZE);

   /* Verify that the parameters are valid.                             */
   if((HeapInfo) && (HeapInfo->Initialized) && (Size >= MINIMUM_MEMORY_SIZE) && (Size <= MAXIMUM_MEMORY_SIZE))
 80130e2:	4604      	mov	r4, r0
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d069      	beq.n	80131bc <MemAlloc+0xdc>
 80130e8:	1ccb      	adds	r3, r1, #3
 80130ea:	089b      	lsrs	r3, r3, #2
 80130ec:	3301      	adds	r3, #1
 80130ee:	7802      	ldrb	r2, [r0, #0]
 80130f0:	2a00      	cmp	r2, #0
 80130f2:	d062      	beq.n	80131ba <MemAlloc+0xda>
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d963      	bls.n	80131c0 <MemAlloc+0xe0>
 80130f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80130fc:	d262      	bcs.n	80131c4 <MemAlloc+0xe4>
   {
      /* Start at the beginning of the heap for small segments and the  */
      /* end for large segments.                                        */
      if(Size < LARGE_SIZE)
 80130fe:	2b3f      	cmp	r3, #63	; 0x3f
 8013100:	d801      	bhi.n	8013106 <MemAlloc+0x26>
         BlockInfo = HeapInfo->HeapHead;
 8013102:	3010      	adds	r0, #16
 8013104:	e008      	b.n	8013118 <MemAlloc+0x38>
      else
         BlockInfo = (BlockInfo_t *)(((Alignment_t *)(HeapInfo->HeapTail)) - HeapInfo->HeapHead->PrevSize);
 8013106:	68c0      	ldr	r0, [r0, #12]
 8013108:	8a22      	ldrh	r2, [r4, #16]
 801310a:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 801310e:	e003      	b.n	8013118 <MemAlloc+0x38>
            /* forward.  This will hopefully help to reduce             */
            /* fragmentataion problems.                                 */
            if(Size >= LARGE_SIZE)
               BlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) - (BlockInfo->PrevSize));
            else
               BlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) + (BlockInfo->Size & SEGMENT_SIZE_BITMASK));
 8013110:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013114:	eb00 0082 	add.w	r0, r0, r2, lsl #2
      while(((Size < LARGE_SIZE) || (BlockInfo != HeapInfo->HeapHead)) && (BlockInfo != HeapInfo->HeapTail))
 8013118:	2b3f      	cmp	r3, #63	; 0x3f
 801311a:	d903      	bls.n	8013124 <MemAlloc+0x44>
 801311c:	f104 0210 	add.w	r2, r4, #16
 8013120:	4282      	cmp	r2, r0
 8013122:	d00f      	beq.n	8013144 <MemAlloc+0x64>
 8013124:	68e2      	ldr	r2, [r4, #12]
 8013126:	4282      	cmp	r2, r0
 8013128:	d00c      	beq.n	8013144 <MemAlloc+0x64>
         if((BlockInfo->Size & SEGMENT_ALLOCATED_BITMASK) || (BlockInfo->Size < Size))
 801312a:	8842      	ldrh	r2, [r0, #2]
 801312c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013130:	2900      	cmp	r1, #0
 8013132:	db01      	blt.n	8013138 <MemAlloc+0x58>
 8013134:	429a      	cmp	r2, r3
 8013136:	d205      	bcs.n	8013144 <MemAlloc+0x64>
            if(Size >= LARGE_SIZE)
 8013138:	2b3f      	cmp	r3, #63	; 0x3f
 801313a:	d9e9      	bls.n	8013110 <MemAlloc+0x30>
               BlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) - (BlockInfo->PrevSize));
 801313c:	8802      	ldrh	r2, [r0, #0]
 801313e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8013142:	e7e9      	b.n	8013118 <MemAlloc+0x38>
         }
      }

      /* Check to see if we found a segment large enough for the        */
      /* request.                                                       */
      if((BlockInfo != HeapInfo->HeapTail) && (BlockInfo->Size >= Size) && (!(BlockInfo->Size & SEGMENT_ALLOCATED_BITMASK)))
 8013144:	68e2      	ldr	r2, [r4, #12]
 8013146:	4282      	cmp	r2, r0
 8013148:	d03e      	beq.n	80131c8 <MemAlloc+0xe8>
 801314a:	8842      	ldrh	r2, [r0, #2]
 801314c:	429a      	cmp	r2, r3
 801314e:	d33d      	bcc.n	80131cc <MemAlloc+0xec>
 8013150:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8013154:	d13c      	bne.n	80131d0 <MemAlloc+0xf0>
      {
         /* Check to see if we need to split this into two entries.     */
         /* * NOTE * If there is not enough room to make another entry  */
         /*          then we will not adjust the size of this entry to  */
         /*          match the amount requested.                        */
         if((RemainingSize = BlockInfo->Size - Size) >= MINIMUM_MEMORY_SIZE)
 8013156:	b29d      	uxth	r5, r3
 8013158:	1b51      	subs	r1, r2, r5
 801315a:	b289      	uxth	r1, r1
 801315c:	2901      	cmp	r1, #1
 801315e:	d925      	bls.n	80131ac <MemAlloc+0xcc>
         {
            /* If this is a large segment allocation, then split the    */
            /* segment so that the free segment is at the beginning.    */
            if(Size >= LARGE_SIZE)
 8013160:	2b3f      	cmp	r3, #63	; 0x3f
 8013162:	d917      	bls.n	8013194 <MemAlloc+0xb4>
            {
               /* Re-size the current block for the remaining space.    */
               BlockInfo->Size = RemainingSize;
 8013164:	8041      	strh	r1, [r0, #2]

               /* Initialize the new block, setting it to allocated.    */
               BlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) + RemainingSize);
 8013166:	eb00 0081 	add.w	r0, r0, r1, lsl #2
               BlockInfo->PrevSize = RemainingSize;
 801316a:	8001      	strh	r1, [r0, #0]
               BlockInfo->Size     = Size | SEGMENT_ALLOCATED_BITMASK;
 801316c:	f445 4200 	orr.w	r2, r5, #32768	; 0x8000
 8013170:	8042      	strh	r2, [r0, #2]

               /* Set the TmpBlock pointer to the current block and the */
               /* RemainingSize to its size for setting the previous    */
               /* size of the next block.                               */
               TempBlockInfo = BlockInfo;
 8013172:	4606      	mov	r6, r0
            }

            /* Calculate the pointer to the next segment, checking for a*/
            /* wrap condition, and update the next segment's PrevSize   */
            /* field.                                                   */
            if((TempBlockInfo = (BlockInfo_t *)(((Alignment_t *)TempBlockInfo) + RemainingSize)) != HeapInfo->HeapTail)
 8013174:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 8013178:	68e1      	ldr	r1, [r4, #12]
 801317a:	4291      	cmp	r1, r2
 801317c:	d014      	beq.n	80131a8 <MemAlloc+0xc8>
               TempBlockInfo->PrevSize = RemainingSize;
 801317e:	f826 5025 	strh.w	r5, [r6, r5, lsl #2]
            Size             = BlockInfo->Size;
            BlockInfo->Size |= SEGMENT_ALLOCATED_BITMASK;
         }

         /* Get the address of the start of the allocated memory.       */
         ret_val = (void *)(BlockInfo->Data);
 8013182:	3004      	adds	r0, #4

         /* Adjust the memory statistics.                               */
         HeapInfo->CurrentHeapUsed += Size;
 8013184:	6862      	ldr	r2, [r4, #4]
 8013186:	4413      	add	r3, r2
 8013188:	6063      	str	r3, [r4, #4]
         if(HeapInfo->MaximumHeapUsed < HeapInfo->CurrentHeapUsed)
 801318a:	68a2      	ldr	r2, [r4, #8]
 801318c:	4293      	cmp	r3, r2
 801318e:	d915      	bls.n	80131bc <MemAlloc+0xdc>
            HeapInfo->MaximumHeapUsed = HeapInfo->CurrentHeapUsed;
 8013190:	60a3      	str	r3, [r4, #8]
 8013192:	e013      	b.n	80131bc <MemAlloc+0xdc>
               BlockInfo->Size = Size | SEGMENT_ALLOCATED_BITMASK;
 8013194:	f445 4200 	orr.w	r2, r5, #32768	; 0x8000
 8013198:	8042      	strh	r2, [r0, #2]
               TempBlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) + Size);
 801319a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
               TempBlockInfo->PrevSize = Size;
 801319e:	f820 5023 	strh.w	r5, [r0, r3, lsl #2]
               TempBlockInfo->Size     = RemainingSize;
 80131a2:	8071      	strh	r1, [r6, #2]
         if((RemainingSize = BlockInfo->Size - Size) >= MINIMUM_MEMORY_SIZE)
 80131a4:	460d      	mov	r5, r1
 80131a6:	e7e5      	b.n	8013174 <MemAlloc+0x94>
               HeapInfo->HeapHead->PrevSize = RemainingSize;
 80131a8:	8225      	strh	r5, [r4, #16]
 80131aa:	e7ea      	b.n	8013182 <MemAlloc+0xa2>
            BlockInfo->Size |= SEGMENT_ALLOCATED_BITMASK;
 80131ac:	ea6f 4342 	mvn.w	r3, r2, lsl #17
 80131b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80131b4:	8043      	strh	r3, [r0, #2]
            Size             = BlockInfo->Size;
 80131b6:	4613      	mov	r3, r2
 80131b8:	e7e3      	b.n	8013182 <MemAlloc+0xa2>
         /* No suitable memory block found.                             */
         ret_val = NULL;
      }
   }
   else
      ret_val = NULL;
 80131ba:	2000      	movs	r0, #0

   return(ret_val);
}
 80131bc:	bc70      	pop	{r4, r5, r6}
 80131be:	4770      	bx	lr
      ret_val = NULL;
 80131c0:	2000      	movs	r0, #0
 80131c2:	e7fb      	b.n	80131bc <MemAlloc+0xdc>
 80131c4:	2000      	movs	r0, #0
 80131c6:	e7f9      	b.n	80131bc <MemAlloc+0xdc>
         ret_val = NULL;
 80131c8:	2000      	movs	r0, #0
 80131ca:	e7f7      	b.n	80131bc <MemAlloc+0xdc>
 80131cc:	2000      	movs	r0, #0
 80131ce:	e7f5      	b.n	80131bc <MemAlloc+0xdc>
 80131d0:	2000      	movs	r0, #0
   return(ret_val);
 80131d2:	e7f3      	b.n	80131bc <MemAlloc+0xdc>

080131d4 <MemFree>:
   BlockInfo_t *TempBlockInfo;

   HeapInfo = (HeapInfo_t *)Heap;

   /* Verify that the parameter passed in appears valid.                */
   if((HeapInfo) && (HeapInfo->Initialized) && (MemoryPtr) && (MemoryPtr >= (void *)(HeapInfo->HeapHead->Data)) && (MemoryPtr < (void *)(HeapInfo->HeapTail)))
 80131d4:	2800      	cmp	r0, #0
 80131d6:	d047      	beq.n	8013268 <MemFree+0x94>
 80131d8:	4603      	mov	r3, r0
 80131da:	7802      	ldrb	r2, [r0, #0]
 80131dc:	2a00      	cmp	r2, #0
 80131de:	d043      	beq.n	8013268 <MemFree+0x94>
 80131e0:	2900      	cmp	r1, #0
 80131e2:	d041      	beq.n	8013268 <MemFree+0x94>
 80131e4:	f100 0214 	add.w	r2, r0, #20
 80131e8:	428a      	cmp	r2, r1
 80131ea:	d83d      	bhi.n	8013268 <MemFree+0x94>
 80131ec:	68c2      	ldr	r2, [r0, #12]
 80131ee:	428a      	cmp	r2, r1
 80131f0:	d93a      	bls.n	8013268 <MemFree+0x94>
{
 80131f2:	b430      	push	{r4, r5}
   {
      /* Get a pointer to the Block Info.                               */
      BlockInfo = (BlockInfo_t *)(((Alignment_t *)MemoryPtr) - BLOCK_INFO_SIZE(0));
 80131f4:	1f0a      	subs	r2, r1, #4

      /* Verify that this segment is allocated.                         */
      if(BlockInfo->Size & SEGMENT_ALLOCATED_BITMASK)
 80131f6:	f831 0c02 	ldrh.w	r0, [r1, #-2]
 80131fa:	f931 4c02 	ldrsh.w	r4, [r1, #-2]
 80131fe:	2c00      	cmp	r4, #0
 8013200:	db01      	blt.n	8013206 <MemFree+0x32>
            HeapInfo->HeapHead->PrevSize = BlockInfo->Size;
         }

      }
   }
}
 8013202:	bc30      	pop	{r4, r5}
 8013204:	4770      	bx	lr
         BlockInfo->Size &= ~SEGMENT_ALLOCATED_BITMASK;
 8013206:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801320a:	f821 0c02 	strh.w	r0, [r1, #-2]
         HeapInfo->CurrentHeapUsed -= BlockInfo->Size;
 801320e:	685c      	ldr	r4, [r3, #4]
 8013210:	1a20      	subs	r0, r4, r0
 8013212:	6058      	str	r0, [r3, #4]
         if(BlockInfo != HeapInfo->HeapHead)
 8013214:	f103 0010 	add.w	r0, r3, #16
 8013218:	4290      	cmp	r0, r2
 801321a:	d00d      	beq.n	8013238 <MemFree+0x64>
            TempBlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) - BlockInfo->PrevSize);
 801321c:	f831 0c04 	ldrh.w	r0, [r1, #-4]
 8013220:	eba2 0080 	sub.w	r0, r2, r0, lsl #2
            if(!(TempBlockInfo->Size & SEGMENT_ALLOCATED_BITMASK))
 8013224:	8844      	ldrh	r4, [r0, #2]
 8013226:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 801322a:	2d00      	cmp	r5, #0
 801322c:	db04      	blt.n	8013238 <MemFree+0x64>
               TempBlockInfo->Size += BlockInfo->Size;
 801322e:	f831 2c02 	ldrh.w	r2, [r1, #-2]
 8013232:	4414      	add	r4, r2
 8013234:	8044      	strh	r4, [r0, #2]
               BlockInfo = TempBlockInfo;
 8013236:	4602      	mov	r2, r0
         if((TempBlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) + BlockInfo->Size)) < HeapInfo->HeapTail)
 8013238:	8850      	ldrh	r0, [r2, #2]
 801323a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
 801323e:	68dc      	ldr	r4, [r3, #12]
 8013240:	428c      	cmp	r4, r1
 8013242:	d906      	bls.n	8013252 <MemFree+0x7e>
            if(!(TempBlockInfo->Size & SEGMENT_ALLOCATED_BITMASK))
 8013244:	884c      	ldrh	r4, [r1, #2]
 8013246:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801324a:	2900      	cmp	r1, #0
 801324c:	db01      	blt.n	8013252 <MemFree+0x7e>
               BlockInfo->Size += TempBlockInfo->Size;
 801324e:	4420      	add	r0, r4
 8013250:	8050      	strh	r0, [r2, #2]
         if((TempBlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) + BlockInfo->Size)) != HeapInfo->HeapTail)
 8013252:	8851      	ldrh	r1, [r2, #2]
 8013254:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8013258:	68dc      	ldr	r4, [r3, #12]
 801325a:	4284      	cmp	r4, r0
 801325c:	d002      	beq.n	8013264 <MemFree+0x90>
            TempBlockInfo->PrevSize = BlockInfo->Size;
 801325e:	f822 1021 	strh.w	r1, [r2, r1, lsl #2]
 8013262:	e7ce      	b.n	8013202 <MemFree+0x2e>
            HeapInfo->HeapHead->PrevSize = BlockInfo->Size;
 8013264:	8219      	strh	r1, [r3, #16]
}
 8013266:	e7cc      	b.n	8013202 <MemFree+0x2e>
 8013268:	4770      	bx	lr

0801326a <BTPS_Delay>:
   /* The following function is responsible for delaying the current    */
   /* task for the specified duration (specified in Milliseconds).      */
   /* * NOTE * Very small timeouts might be smaller in granularity than */
   /*          the system can support !!!!                              */
void BTPSAPI BTPS_Delay(unsigned long MilliSeconds)
{
 801326a:	b508      	push	{r3, lr}
   /* Simply wrap the OS supplied TaskDelay function.                   */
   if(MilliSeconds == BTPS_INFINITE_WAIT)
 801326c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013270:	d104      	bne.n	801327c <BTPS_Delay+0x12>
   {
      while(TRUE)
         vTaskDelay(portMAX_DELAY);
 8013272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013276:	f7fe feb1 	bl	8011fdc <vTaskDelay>
      while(TRUE)
 801327a:	e7fa      	b.n	8013272 <BTPS_Delay+0x8>
   }
   else
      vTaskDelay(MILLISECONDS_TO_TICKS(MilliSeconds));
 801327c:	f7fe feae 	bl	8011fdc <vTaskDelay>
}
 8013280:	bd08      	pop	{r3, pc}

08013282 <BTPS_CreateMutex>:
   /* if the Mutex was successfully created, or a NULL Mutex Handle if  */
   /* the Mutex was NOT created.  If a Mutex is successfully created, it*/
   /* can only be destroyed by calling the BTPS_CloseMutex() function   */
   /* (and passing the returned Mutex Handle).                          */
Mutex_t BTPSAPI BTPS_CreateMutex(Boolean_t CreateOwned)
{
 8013282:	b538      	push	{r3, r4, r5, lr}
 8013284:	4604      	mov	r4, r0
   Mutex_t ret_val;

   /* Simply create a Recursive Mutex.                                  */
   if((ret_val = (Mutex_t)xSemaphoreCreateRecursiveMutex()) != NULL)
 8013286:	2004      	movs	r0, #4
 8013288:	f7fd ff52 	bl	8011130 <xQueueCreateMutex>
 801328c:	4605      	mov	r5, r0
 801328e:	b100      	cbz	r0, 8013292 <BTPS_CreateMutex+0x10>
   {
      /* Check to see if we need to own the Mutex.                      */
      if(CreateOwned)
 8013290:	b90c      	cbnz	r4, 8013296 <BTPS_CreateMutex+0x14>

   if(!ret_val)
      DBG_MSG(DBG_ZONE_BTPSKRNL,("Failed to create Mutex\r\n"));

   return(ret_val);
}
 8013292:	4628      	mov	r0, r5
 8013294:	bd38      	pop	{r3, r4, r5, pc}
         if(xSemaphoreTakeRecursive((xSemaphoreHandle)ret_val, (portTickType)1) != pdTRUE)
 8013296:	2101      	movs	r1, #1
 8013298:	f7fe f9c6 	bl	8011628 <xQueueTakeMutexRecursive>
 801329c:	2801      	cmp	r0, #1
 801329e:	d0f8      	beq.n	8013292 <BTPS_CreateMutex+0x10>
            vQueueDelete((xQueueHandle)ret_val);
 80132a0:	4628      	mov	r0, r5
 80132a2:	f7fe fa63 	bl	801176c <vQueueDelete>
            ret_val = NULL;
 80132a6:	2500      	movs	r5, #0
   return(ret_val);
 80132a8:	e7f3      	b.n	8013292 <BTPS_CreateMutex+0x10>

080132aa <BTPS_WaitMutex>:
   /* call the BTPS_ReleaseMutex() function.                            */
   /* * NOTE * There must exist a corresponding BTPS_ReleaseMutex()     */
   /*          function call for EVERY successful BTPS_WaitMutex()      */
   /*          function call or a deadlock will occur in the system !!! */
Boolean_t BTPSAPI BTPS_WaitMutex(Mutex_t Mutex, unsigned long Timeout)
{
 80132aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   Boolean_t     ret_val = FALSE;
   unsigned long DecrementWait;

   /* Before proceeding any further we need to make sure that the       */
   /* parameters that were passed to us appear semi-valid.              */
   if(Mutex)
 80132ac:	b1b0      	cbz	r0, 80132dc <BTPS_WaitMutex+0x32>
 80132ae:	460c      	mov	r4, r1
 80132b0:	4607      	mov	r7, r0
         Timeout = (unsigned long)MILLISECONDS_TO_TICKS(Timeout);

         if(Timeout > portMAX_DELAY)
            DecrementWait = portMAX_DELAY;
         else
            DecrementWait = Timeout;
 80132b2:	460d      	mov	r5, r1
   if(Mutex)
 80132b4:	2600      	movs	r6, #0
 80132b6:	e000      	b.n	80132ba <BTPS_WaitMutex+0x10>
      {
         /* Attempt to get the semaphore for the timeout duration.      */
         if(xSemaphoreTakeRecursive(((xSemaphoreHandle)Mutex), DecrementWait) == pdPASS)
         {
            /* Mutex acquired successfully.                             */
            ret_val = TRUE;
 80132b8:	2601      	movs	r6, #1
      while((Timeout) && (!ret_val))
 80132ba:	b184      	cbz	r4, 80132de <BTPS_WaitMutex+0x34>
 80132bc:	b97e      	cbnz	r6, 80132de <BTPS_WaitMutex+0x34>
         if(xSemaphoreTakeRecursive(((xSemaphoreHandle)Mutex), DecrementWait) == pdPASS)
 80132be:	4629      	mov	r1, r5
 80132c0:	4638      	mov	r0, r7
 80132c2:	f7fe f9b1 	bl	8011628 <xQueueTakeMutexRecursive>
 80132c6:	2801      	cmp	r0, #1
 80132c8:	d0f6      	beq.n	80132b8 <BTPS_WaitMutex+0xe>
         }
         else
         {
            /* Decrement the timeout.                                   */
            if(Timeout != BTPS_INFINITE_WAIT)
 80132ca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80132ce:	d0f4      	beq.n	80132ba <BTPS_WaitMutex+0x10>
            {
               if(Timeout >= DecrementWait)
 80132d0:	42ac      	cmp	r4, r5
 80132d2:	d301      	bcc.n	80132d8 <BTPS_WaitMutex+0x2e>
                  Timeout -= DecrementWait;
 80132d4:	1b64      	subs	r4, r4, r5
 80132d6:	e7f0      	b.n	80132ba <BTPS_WaitMutex+0x10>
               else
                  DecrementWait = Timeout;
 80132d8:	4625      	mov	r5, r4
 80132da:	e7ee      	b.n	80132ba <BTPS_WaitMutex+0x10>
   Boolean_t     ret_val = FALSE;
 80132dc:	2600      	movs	r6, #0
      }
   }

   /* Return the result to the caller.                                  */
   return(ret_val);
}
 80132de:	4630      	mov	r0, r6
 80132e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132e2 <BTPS_ReleaseMutex>:
   /*          function call or a deadlock will occur in the system !!! */
void BTPSAPI BTPS_ReleaseMutex(Mutex_t Mutex)
{
   /* Before proceeding any further we need to make sure that the       */
   /* parameters that were passed to us appear semi-valid.              */
   if(Mutex)
 80132e2:	b118      	cbz	r0, 80132ec <BTPS_ReleaseMutex+0xa>
{
 80132e4:	b508      	push	{r3, lr}
   {
      /* Simply give back the Semaphore.                                */
      xSemaphoreGiveRecursive((xSemaphoreHandle)Mutex);
 80132e6:	f7fd ff3d 	bl	8011164 <xQueueGiveMutexRecursive>
   }
}
 80132ea:	bd08      	pop	{r3, pc}
 80132ec:	4770      	bx	lr

080132ee <BTPS_CloseMutex>:
   /* functions to fail with an error.                                  */
void BTPSAPI BTPS_CloseMutex(Mutex_t Mutex)
{
   /* Before proceeding any further we need to make sure that the       */
   /* parameters that were passed to us appear semi-valid.              */
   if(Mutex)
 80132ee:	b118      	cbz	r0, 80132f8 <BTPS_CloseMutex+0xa>
{
 80132f0:	b508      	push	{r3, lr}
   {
      /* Note that there is no explicit mechanism to delete a           */
      /* semaphore/Mutex, thus we will free the Queue memory that is    */
      /* at a low level to implement semaphore/Mutex in FreeRTOS.       */
      vQueueDelete((xQueueHandle)Mutex);
 80132f2:	f7fe fa3b 	bl	801176c <vQueueDelete>
   }
}
 80132f6:	bd08      	pop	{r3, pc}
 80132f8:	4770      	bx	lr

080132fa <BTPS_WaitEvent>:
   /* Timeout.  It should be noted that Signals have a special property */
   /* in that multiple Threads can be waiting for the Event to become   */
   /* Signalled and ALL calls to BTPS_WaitEvent() will return TRUE      */
   /* whenever the state of the Event becomes Signalled.                */
Boolean_t BTPSAPI BTPS_WaitEvent(Event_t Event, unsigned long Timeout)
{
 80132fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   Boolean_t     ret_val;
   unsigned long DecrementWait;

   /* Before proceeding any further we need to make sure that the       */
   /* parameters that were passed to us appear semi-valid.              */
   if(Event)
 80132fc:	b358      	cbz	r0, 8013356 <BTPS_WaitEvent+0x5c>
 80132fe:	460c      	mov	r4, r1
 8013300:	4607      	mov	r7, r0
   {
      /* Lock the scheduler.                                            */
      vTaskSuspendAll();
 8013302:	f7fe fd4b 	bl	8011d9c <vTaskSuspendAll>

      /* Check to see if the current state indicates that we are        */
      /* currently reset.                                               */
      if(!((EventHeader_t *)Event)->IsSet)
 8013306:	783d      	ldrb	r5, [r7, #0]
 8013308:	bb0d      	cbnz	r5, 801334e <BTPS_WaitEvent+0x54>
      {
         /* The event is in the reset state.  Increment the count.      */
         ((EventHeader_t *)Event)->Count++;
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	3301      	adds	r3, #1
 801330e:	60bb      	str	r3, [r7, #8]

         /* Resume the Scheduler.                                       */
         xTaskResumeAll();
 8013310:	f7fe fde8 	bl	8011ee4 <xTaskResumeAll>
 8013314:	4626      	mov	r6, r4
 8013316:	e002      	b.n	801331e <BTPS_WaitEvent+0x24>
         {
            /* Attempt to get the semaphore for the timeout duration.   */
            if(xSemaphoreTake((((EventHeader_t *)Event)->SemaphoreHandle), DecrementWait) == pdPASS)
            {
               /* Semaphore acquired successfully.                      */
               ret_val = TRUE;
 8013318:	2501      	movs	r5, #1
                     Timeout -= DecrementWait;
                  else
                     DecrementWait = Timeout;
               }
            }
         } while((Timeout) && (!ret_val));
 801331a:	b17c      	cbz	r4, 801333c <BTPS_WaitEvent+0x42>
 801331c:	b975      	cbnz	r5, 801333c <BTPS_WaitEvent+0x42>
            if(xSemaphoreTake((((EventHeader_t *)Event)->SemaphoreHandle), DecrementWait) == pdPASS)
 801331e:	4631      	mov	r1, r6
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f7fe f8af 	bl	8011484 <xQueueSemaphoreTake>
 8013326:	2801      	cmp	r0, #1
 8013328:	d0f6      	beq.n	8013318 <BTPS_WaitEvent+0x1e>
               if(Timeout != BTPS_INFINITE_WAIT)
 801332a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801332e:	d0f4      	beq.n	801331a <BTPS_WaitEvent+0x20>
                  if(Timeout >= DecrementWait)
 8013330:	42b4      	cmp	r4, r6
 8013332:	d301      	bcc.n	8013338 <BTPS_WaitEvent+0x3e>
                     Timeout -= DecrementWait;
 8013334:	1ba4      	subs	r4, r4, r6
 8013336:	e7f0      	b.n	801331a <BTPS_WaitEvent+0x20>
                     DecrementWait = Timeout;
 8013338:	4626      	mov	r6, r4
 801333a:	e7ee      	b.n	801331a <BTPS_WaitEvent+0x20>

         if(!ret_val)
 801333c:	b965      	cbnz	r5, 8013358 <BTPS_WaitEvent+0x5e>
         {
            /* A timeout or an error occurred, Lock the scheduler so we  */
            /* can modify the count variable.                           */
            vTaskSuspendAll();
 801333e:	f7fe fd2d 	bl	8011d9c <vTaskSuspendAll>

            /* Decrement the count.                                     */
            ((EventHeader_t *)Event)->Count--;
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	3b01      	subs	r3, #1
 8013346:	60bb      	str	r3, [r7, #8]

            /* Resume the Scheduler.                                    */
            xTaskResumeAll();
 8013348:	f7fe fdcc 	bl	8011ee4 <xTaskResumeAll>
 801334c:	e004      	b.n	8013358 <BTPS_WaitEvent+0x5e>
         }
      }
      else
      {
         /* Resume the Scheduler.                                       */
         xTaskResumeAll();
 801334e:	f7fe fdc9 	bl	8011ee4 <xTaskResumeAll>

         /* The event is in the set state, set the return value to true.*/
         ret_val = TRUE;
 8013352:	2501      	movs	r5, #1
 8013354:	e000      	b.n	8013358 <BTPS_WaitEvent+0x5e>
      }
   }
   else
      ret_val = FALSE;
 8013356:	2500      	movs	r5, #0

   return(ret_val);
}
 8013358:	4628      	mov	r0, r5
 801335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801335c <BTPS_ResetEvent>:
   /* set to the Non-Signalled State.                                   */
void BTPSAPI BTPS_ResetEvent(Event_t Event)
{
   /* Before proceeding any further we need to make sure that the       */
   /* parameter that was passed to us appears to be semi-valid.         */
   if(Event)
 801335c:	b1a0      	cbz	r0, 8013388 <BTPS_ResetEvent+0x2c>
{
 801335e:	b510      	push	{r4, lr}
 8013360:	4604      	mov	r4, r0
   {
      /* Lock the scheduler.                                            */
      vTaskSuspendAll();
 8013362:	f7fe fd1b 	bl	8011d9c <vTaskSuspendAll>

      /* We have successfully acquired the mutex, now check to see if the*/
      /* event is currently signaled.                                   */
      if(((EventHeader_t *)Event)->IsSet)
 8013366:	7823      	ldrb	r3, [r4, #0]
 8013368:	b15b      	cbz	r3, 8013382 <BTPS_ResetEvent+0x26>
      {
         /* The event is currently set, change the flag and update the  */
         /* count.                                                      */
         ((EventHeader_t *)Event)->IsSet = FALSE;
 801336a:	2300      	movs	r3, #0
 801336c:	7023      	strb	r3, [r4, #0]
         ((EventHeader_t *)Event)->Count++;
 801336e:	68a3      	ldr	r3, [r4, #8]
 8013370:	3301      	adds	r3, #1
 8013372:	60a3      	str	r3, [r4, #8]

         /* Resume the Scheduler.                                       */
         xTaskResumeAll();
 8013374:	f7fe fdb6 	bl	8011ee4 <xTaskResumeAll>

         /* Reset the event semaphore.                                  */
         xSemaphoreTake(((EventHeader_t *)Event)->SemaphoreHandle, (portTickType)1);
 8013378:	2101      	movs	r1, #1
 801337a:	6860      	ldr	r0, [r4, #4]
 801337c:	f7fe f882 	bl	8011484 <xQueueSemaphoreTake>
      {
         /* Resume the Scheduler.                                       */
         xTaskResumeAll();
      }
   }
}
 8013380:	bd10      	pop	{r4, pc}
         xTaskResumeAll();
 8013382:	f7fe fdaf 	bl	8011ee4 <xTaskResumeAll>
}
 8013386:	e7fb      	b.n	8013380 <BTPS_ResetEvent+0x24>
 8013388:	4770      	bx	lr

0801338a <BTPS_SetEvent>:
   /* Event to set to the Signalled State.                              */
void BTPSAPI BTPS_SetEvent(Event_t Event)
{
   /* Before proceeding any further we need to make sure that the       */
   /* parameter that was passed to us appears to be semi-valid.         */
   if(Event)
 801338a:	b1b0      	cbz	r0, 80133ba <BTPS_SetEvent+0x30>
{
 801338c:	b510      	push	{r4, lr}
 801338e:	4604      	mov	r4, r0
   {
      /* Lock the scheduler.                                            */
      vTaskSuspendAll();
 8013390:	f7fe fd04 	bl	8011d9c <vTaskSuspendAll>

      /* We have successfully acquired the mutex, now check to see if   */
      /* the event is currently signaled.                               */
      if(!((EventHeader_t *)Event)->IsSet)
 8013394:	7823      	ldrb	r3, [r4, #0]
 8013396:	b96b      	cbnz	r3, 80133b4 <BTPS_SetEvent+0x2a>
      {
         ((EventHeader_t *)Event)->IsSet = TRUE;
 8013398:	2301      	movs	r3, #1
 801339a:	7023      	strb	r3, [r4, #0]

         /* The event is not currently set, change the flag and post the*/
         /* semaphore count times.                                      */
         while(((EventHeader_t *)Event)->Count)
 801339c:	e007      	b.n	80133ae <BTPS_SetEvent+0x24>
         {
            ((EventHeader_t *)Event)->Count--;
 801339e:	3b01      	subs	r3, #1
 80133a0:	60a3      	str	r3, [r4, #8]
            xSemaphoreGive(((EventHeader_t *)Event)->SemaphoreHandle);
 80133a2:	2300      	movs	r3, #0
 80133a4:	461a      	mov	r2, r3
 80133a6:	4619      	mov	r1, r3
 80133a8:	6860      	ldr	r0, [r4, #4]
 80133aa:	f7fd fdf5 	bl	8010f98 <xQueueGenericSend>
         while(((EventHeader_t *)Event)->Count)
 80133ae:	68a3      	ldr	r3, [r4, #8]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d1f4      	bne.n	801339e <BTPS_SetEvent+0x14>
         }
     }

      /* Resume the Scheduler.                                          */
      xTaskResumeAll();
 80133b4:	f7fe fd96 	bl	8011ee4 <xTaskResumeAll>
   }
}
 80133b8:	bd10      	pop	{r4, pc}
 80133ba:	4770      	bx	lr

080133bc <BTPS_AllocateMemory>:
   /* size).  This function accepts as input the size (in Bytes) of the */
   /* Block of Memory to be allocated.  This function returns a NON-NULL*/
   /* pointer to this Memory Buffer if the Memory was successfully      */
   /* allocated, or a NULL value if the memory could not be allocated.  */
void *BTPSAPI BTPS_AllocateMemory(unsigned long MemorySize)
{
 80133bc:	b510      	push	{r4, lr}
 80133be:	4604      	mov	r4, r0
   void *ret_val;

   if(BTPS_WaitMutex(KernelMutex, BTPS_INFINITE_WAIT))
 80133c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80133c4:	4b08      	ldr	r3, [pc, #32]	; (80133e8 <BTPS_AllocateMemory+0x2c>)
 80133c6:	6818      	ldr	r0, [r3, #0]
 80133c8:	f7ff ff6f 	bl	80132aa <BTPS_WaitMutex>
 80133cc:	b150      	cbz	r0, 80133e4 <BTPS_AllocateMemory+0x28>
   {
      ret_val = MemAlloc(MemoryBuffer, MemorySize);
 80133ce:	4621      	mov	r1, r4
 80133d0:	4806      	ldr	r0, [pc, #24]	; (80133ec <BTPS_AllocateMemory+0x30>)
 80133d2:	f7ff fe85 	bl	80130e0 <MemAlloc>
 80133d6:	4604      	mov	r4, r0

      BTPS_ReleaseMutex(KernelMutex);
 80133d8:	4b03      	ldr	r3, [pc, #12]	; (80133e8 <BTPS_AllocateMemory+0x2c>)
 80133da:	6818      	ldr	r0, [r3, #0]
 80133dc:	f7ff ff81 	bl	80132e2 <BTPS_ReleaseMutex>
   if(!ret_val)
      DBG_MSG(DBG_ZONE_BTPSKRNL, ("Malloc Failed: %d.\r\n", MemorySize));

   /* Finally return the result to the caller.                          */
   return(ret_val);
}
 80133e0:	4620      	mov	r0, r4
 80133e2:	bd10      	pop	{r4, pc}
      ret_val = NULL;
 80133e4:	2400      	movs	r4, #0
   return(ret_val);
 80133e6:	e7fb      	b.n	80133e0 <BTPS_AllocateMemory+0x24>
 80133e8:	20012a18 	.word	0x20012a18
 80133ec:	20012a1c 	.word	0x20012a1c

080133f0 <BTPS_FreeMemory>:
   /* BTPS_AllocateMemory() function.  This function accepts a NON-NULL */
   /* Memory Pointer which was returned from the BTPS_AllocateMemory()  */
   /* function.  After this function completes the caller CANNOT use ANY*/
   /* of the Memory pointed to by the Memory Pointer.                   */
void BTPSAPI BTPS_FreeMemory(void *MemoryPointer)
{
 80133f0:	b510      	push	{r4, lr}
 80133f2:	4604      	mov	r4, r0
   if(BTPS_WaitMutex(KernelMutex, BTPS_INFINITE_WAIT))
 80133f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80133f8:	4b07      	ldr	r3, [pc, #28]	; (8013418 <BTPS_FreeMemory+0x28>)
 80133fa:	6818      	ldr	r0, [r3, #0]
 80133fc:	f7ff ff55 	bl	80132aa <BTPS_WaitMutex>
 8013400:	b900      	cbnz	r0, 8013404 <BTPS_FreeMemory+0x14>
   {
      MemFree(MemoryBuffer, MemoryPointer);

      BTPS_ReleaseMutex(KernelMutex);
   }
}
 8013402:	bd10      	pop	{r4, pc}
      MemFree(MemoryBuffer, MemoryPointer);
 8013404:	4621      	mov	r1, r4
 8013406:	4805      	ldr	r0, [pc, #20]	; (801341c <BTPS_FreeMemory+0x2c>)
 8013408:	f7ff fee4 	bl	80131d4 <MemFree>
      BTPS_ReleaseMutex(KernelMutex);
 801340c:	4b02      	ldr	r3, [pc, #8]	; (8013418 <BTPS_FreeMemory+0x28>)
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	f7ff ff67 	bl	80132e2 <BTPS_ReleaseMutex>
}
 8013414:	e7f5      	b.n	8013402 <BTPS_FreeMemory+0x12>
 8013416:	bf00      	nop
 8013418:	20012a18 	.word	0x20012a18
 801341c:	20012a1c 	.word	0x20012a1c

08013420 <BTPS_CreateEvent>:
{
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	4604      	mov	r4, r0
   if((EventHeader = (EventHeader_t *)BTPS_AllocateMemory(sizeof(EventHeader_t))) != NULL)
 8013424:	200c      	movs	r0, #12
 8013426:	f7ff ffc9 	bl	80133bc <BTPS_AllocateMemory>
 801342a:	4605      	mov	r5, r0
 801342c:	b300      	cbz	r0, 8013470 <BTPS_CreateEvent+0x50>
      vSemaphoreCreateBinary(EventHeader->SemaphoreHandle);
 801342e:	2203      	movs	r2, #3
 8013430:	2100      	movs	r1, #0
 8013432:	2001      	movs	r0, #1
 8013434:	f7fd fd8b 	bl	8010f4e <xQueueGenericCreate>
 8013438:	6068      	str	r0, [r5, #4]
 801343a:	b120      	cbz	r0, 8013446 <BTPS_CreateEvent+0x26>
 801343c:	2300      	movs	r3, #0
 801343e:	461a      	mov	r2, r3
 8013440:	4619      	mov	r1, r3
 8013442:	f7fd fda9 	bl	8010f98 <xQueueGenericSend>
      if(EventHeader->SemaphoreHandle)
 8013446:	686e      	ldr	r6, [r5, #4]
 8013448:	b19e      	cbz	r6, 8013472 <BTPS_CreateEvent+0x52>
         if(!CreateSignalled)
 801344a:	b13c      	cbz	r4, 801345c <BTPS_CreateEvent+0x3c>
            ret_val = EventHeader;
 801344c:	462e      	mov	r6, r5
         EventHeader->IsSet = CreateSignalled;
 801344e:	702c      	strb	r4, [r5, #0]
         EventHeader->Count = (CreateSignalled)?0:1;
 8013450:	fab4 f484 	clz	r4, r4
 8013454:	0964      	lsrs	r4, r4, #5
 8013456:	60ac      	str	r4, [r5, #8]
   if(!ret_val)
 8013458:	b996      	cbnz	r6, 8013480 <BTPS_CreateEvent+0x60>
 801345a:	e00a      	b.n	8013472 <BTPS_CreateEvent+0x52>
            if(xSemaphoreTake(EventHeader->SemaphoreHandle, (portTickType)1) == pdTRUE)
 801345c:	2101      	movs	r1, #1
 801345e:	4630      	mov	r0, r6
 8013460:	f7fe f810 	bl	8011484 <xQueueSemaphoreTake>
 8013464:	2801      	cmp	r0, #1
 8013466:	d001      	beq.n	801346c <BTPS_CreateEvent+0x4c>
   Event_t        ret_val     = NULL;
 8013468:	2600      	movs	r6, #0
 801346a:	e7f0      	b.n	801344e <BTPS_CreateEvent+0x2e>
               ret_val = EventHeader;
 801346c:	462e      	mov	r6, r5
 801346e:	e7ee      	b.n	801344e <BTPS_CreateEvent+0x2e>
   Event_t        ret_val     = NULL;
 8013470:	4606      	mov	r6, r0
      if(EventHeader)
 8013472:	b12d      	cbz	r5, 8013480 <BTPS_CreateEvent+0x60>
         vQueueDelete((xQueueHandle)(EventHeader->SemaphoreHandle));
 8013474:	6868      	ldr	r0, [r5, #4]
 8013476:	f7fe f979 	bl	801176c <vQueueDelete>
         BTPS_FreeMemory(EventHeader);
 801347a:	4628      	mov	r0, r5
 801347c:	f7ff ffb8 	bl	80133f0 <BTPS_FreeMemory>
}
 8013480:	4630      	mov	r0, r6
 8013482:	bd70      	pop	{r4, r5, r6, pc}

08013484 <BTPS_CloseEvent>:
{
 8013484:	b510      	push	{r4, lr}
 8013486:	4604      	mov	r4, r0
   BTPS_SetEvent(Event);
 8013488:	f7ff ff7f 	bl	801338a <BTPS_SetEvent>
   vQueueDelete((xQueueHandle)(((EventHeader_t *)Event)->SemaphoreHandle));
 801348c:	6860      	ldr	r0, [r4, #4]
 801348e:	f7fe f96d 	bl	801176c <vQueueDelete>
   BTPS_FreeMemory(Event);
 8013492:	4620      	mov	r0, r4
 8013494:	f7ff ffac 	bl	80133f0 <BTPS_FreeMemory>
}
 8013498:	bd10      	pop	{r4, pc}

0801349a <ThreadWrapper>:
   if(UserData)
 801349a:	b158      	cbz	r0, 80134b4 <ThreadWrapper+0x1a>
{
 801349c:	b510      	push	{r4, lr}
 801349e:	4604      	mov	r4, r0
      ((*(((ThreadWrapperInfo_t *)UserData)->ThreadFunction))(((ThreadWrapperInfo_t *)UserData)->ThreadParameter));
 80134a0:	6883      	ldr	r3, [r0, #8]
 80134a2:	68c0      	ldr	r0, [r0, #12]
 80134a4:	4798      	blx	r3
      BTPS_FreeMemory(UserData);
 80134a6:	4620      	mov	r0, r4
 80134a8:	f7ff ffa2 	bl	80133f0 <BTPS_FreeMemory>
      vTaskDelete(NULL);
 80134ac:	2000      	movs	r0, #0
 80134ae:	f7fe fbc5 	bl	8011c3c <vTaskDelete>
}
 80134b2:	bd10      	pop	{r4, pc}
 80134b4:	4770      	bx	lr

080134b6 <BTPS_MemCopy>:
   /* Buffers must contain AT LEAST as many bytes as specified by the   */
   /* Size parameter.                                                   */
   /* * NOTE * This function does not allow the overlapping of the      */
   /*          Source and Destination Buffers !!!!                      */
void BTPSAPI BTPS_MemCopy(void *Destination, BTPSCONST void *Source, unsigned long Size)
{
 80134b6:	b508      	push	{r3, lr}
   /* Simply wrap the C Run-Time memcpy() function.                     */
   memcpy(Destination, Source, Size);
 80134b8:	f000 ff16 	bl	80142e8 <memcpy>
}
 80134bc:	bd08      	pop	{r3, pc}

080134be <BTPS_MemInitialize>:
   /* filled with the specified value (second parameter).  The final    */
   /* parameter to this function specifies the number of bytes that are */
   /* to be filled in the Data Buffer.  The Destination Buffer must     */
   /* point to a Buffer that is AT LEAST the size of the Size parameter.*/
void BTPSAPI BTPS_MemInitialize(void *Destination, unsigned char Value, unsigned long Size)
{
 80134be:	b508      	push	{r3, lr}
   /* Simply wrap the C Run-Time memset() function.                     */
   memset(Destination, Value, Size);
 80134c0:	f000 ff3a 	bl	8014338 <memset>
}
 80134c4:	bd08      	pop	{r3, pc}

080134c6 <GetHeapStatistics>:
   if((HeapInfo) && (HeapInfo->Initialized) && (MemoryStatistics))
 80134c6:	2800      	cmp	r0, #0
 80134c8:	d035      	beq.n	8013536 <GetHeapStatistics+0x70>
{
 80134ca:	b570      	push	{r4, r5, r6, lr}
 80134cc:	460c      	mov	r4, r1
 80134ce:	4616      	mov	r6, r2
 80134d0:	4605      	mov	r5, r0
   if((HeapInfo) && (HeapInfo->Initialized) && (MemoryStatistics))
 80134d2:	7803      	ldrb	r3, [r0, #0]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d031      	beq.n	801353c <GetHeapStatistics+0x76>
 80134d8:	2900      	cmp	r1, #0
 80134da:	d032      	beq.n	8013542 <GetHeapStatistics+0x7c>
      BTPS_MemInitialize(MemoryStatistics, 0, sizeof(BTPS_MemoryStatistics_t));
 80134dc:	2214      	movs	r2, #20
 80134de:	2100      	movs	r1, #0
 80134e0:	4620      	mov	r0, r4
 80134e2:	f7ff ffec 	bl	80134be <BTPS_MemInitialize>
      MemoryStatistics->HeapSize        = (unsigned int)(((unsigned char *)(HeapInfo->HeapTail)) - ((unsigned char *)(HeapInfo->HeapHead)));
 80134e6:	68ea      	ldr	r2, [r5, #12]
 80134e8:	f105 0310 	add.w	r3, r5, #16
 80134ec:	1ad2      	subs	r2, r2, r3
 80134ee:	6022      	str	r2, [r4, #0]
      MemoryStatistics->CurrentHeapUsed = HeapInfo->CurrentHeapUsed * ALIGNMENT_SIZE;
 80134f0:	686a      	ldr	r2, [r5, #4]
 80134f2:	0092      	lsls	r2, r2, #2
 80134f4:	6062      	str	r2, [r4, #4]
      MemoryStatistics->MaximumHeapUsed = HeapInfo->MaximumHeapUsed * ALIGNMENT_SIZE;
 80134f6:	68aa      	ldr	r2, [r5, #8]
 80134f8:	0092      	lsls	r2, r2, #2
 80134fa:	60a2      	str	r2, [r4, #8]
      if(AdvancedStatitics)
 80134fc:	b936      	cbnz	r6, 801350c <GetHeapStatistics+0x46>
      ret_val = 0;
 80134fe:	2000      	movs	r0, #0
 8013500:	e018      	b.n	8013534 <GetHeapStatistics+0x6e>
            BlockInfo = (BlockInfo_t *)(((Alignment_t *)BlockInfo) + (BlockInfo->Size & SEGMENT_SIZE_BITMASK));
 8013502:	885a      	ldrh	r2, [r3, #2]
 8013504:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8013508:	eb03 0382 	add.w	r3, r3, r2, lsl #2
         while(BlockInfo < HeapInfo->HeapTail)
 801350c:	68ea      	ldr	r2, [r5, #12]
 801350e:	429a      	cmp	r2, r3
 8013510:	d90c      	bls.n	801352c <GetHeapStatistics+0x66>
            if(!(BlockInfo->Size & SEGMENT_ALLOCATED_BITMASK))
 8013512:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013516:	2a00      	cmp	r2, #0
 8013518:	dbf3      	blt.n	8013502 <GetHeapStatistics+0x3c>
               MemoryStatistics->FreeFragmentCount ++;
 801351a:	68e2      	ldr	r2, [r4, #12]
 801351c:	3201      	adds	r2, #1
 801351e:	60e2      	str	r2, [r4, #12]
               if(MemoryStatistics->LargestFreeFragment < BlockInfo->Size)
 8013520:	6921      	ldr	r1, [r4, #16]
 8013522:	885a      	ldrh	r2, [r3, #2]
 8013524:	4291      	cmp	r1, r2
 8013526:	d2ec      	bcs.n	8013502 <GetHeapStatistics+0x3c>
                  MemoryStatistics->LargestFreeFragment = BlockInfo->Size;
 8013528:	6122      	str	r2, [r4, #16]
 801352a:	e7ea      	b.n	8013502 <GetHeapStatistics+0x3c>
         MemoryStatistics->LargestFreeFragment *= ALIGNMENT_SIZE;
 801352c:	6923      	ldr	r3, [r4, #16]
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	6123      	str	r3, [r4, #16]
      ret_val = 0;
 8013532:	2000      	movs	r0, #0
}
 8013534:	bd70      	pop	{r4, r5, r6, pc}
      ret_val = -1;
 8013536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 801353a:	4770      	bx	lr
      ret_val = -1;
 801353c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013540:	e7f8      	b.n	8013534 <GetHeapStatistics+0x6e>
 8013542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   return(ret_val);
 8013546:	e7f5      	b.n	8013534 <GetHeapStatistics+0x6e>

08013548 <BTPS_QueryMemoryUsage>:
{
 8013548:	b508      	push	{r3, lr}
 801354a:	460a      	mov	r2, r1
   return(GetHeapStatistics(MemoryBuffer, MemoryStatistics, AdvancedStatitics));
 801354c:	4601      	mov	r1, r0
 801354e:	4802      	ldr	r0, [pc, #8]	; (8013558 <BTPS_QueryMemoryUsage+0x10>)
 8013550:	f7ff ffb9 	bl	80134c6 <GetHeapStatistics>
}
 8013554:	bd08      	pop	{r3, pc}
 8013556:	bf00      	nop
 8013558:	20012a1c 	.word	0x20012a1c

0801355c <HeapInit>:
   if((HeapInfo) && (!(HeapInfo->Initialized)) && (Size > HEAP_INFO_SIZE(MINIMUM_MEMORY_SIZE)))
 801355c:	b1f0      	cbz	r0, 801359c <HeapInit+0x40>
{
 801355e:	b570      	push	{r4, r5, r6, lr}
 8013560:	4605      	mov	r5, r0
   if((HeapInfo) && (!(HeapInfo->Initialized)) && (Size > HEAP_INFO_SIZE(MINIMUM_MEMORY_SIZE)))
 8013562:	7803      	ldrb	r3, [r0, #0]
 8013564:	b94b      	cbnz	r3, 801357a <HeapInit+0x1e>
 8013566:	2912      	cmp	r1, #18
 8013568:	d907      	bls.n	801357a <HeapInit+0x1e>
      Size = (Size - HEAP_INFO_SIZE(0)) / ALIGNMENT_SIZE;
 801356a:	f1a1 0410 	sub.w	r4, r1, #16
 801356e:	08a6      	lsrs	r6, r4, #2
      if((Size >= MINIMUM_MEMORY_SIZE) && (Size <= MAXIMUM_MEMORY_SIZE))
 8013570:	1eb2      	subs	r2, r6, #2
 8013572:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 8013576:	429a      	cmp	r2, r3
 8013578:	d900      	bls.n	801357c <HeapInit+0x20>
}
 801357a:	bd70      	pop	{r4, r5, r6, pc}
         BTPS_MemInitialize(HeapInfo, 0, sizeof(HeapInfo_t));
 801357c:	2218      	movs	r2, #24
 801357e:	2100      	movs	r1, #0
 8013580:	f7ff ff9d 	bl	80134be <BTPS_MemInitialize>
         HeapInfo->HeapHead->PrevSize = Size;
 8013584:	b2b6      	uxth	r6, r6
 8013586:	822e      	strh	r6, [r5, #16]
         HeapInfo->HeapHead->Size     = Size;
 8013588:	826e      	strh	r6, [r5, #18]
         HeapInfo->HeapTail           = (BlockInfo_t *)(((Alignment_t *)HeapInfo->HeapHead) + Size);
 801358a:	f105 0310 	add.w	r3, r5, #16
 801358e:	f024 0103 	bic.w	r1, r4, #3
 8013592:	4419      	add	r1, r3
 8013594:	60e9      	str	r1, [r5, #12]
         HeapInfo->Initialized        = TRUE;
 8013596:	2301      	movs	r3, #1
 8013598:	702b      	strb	r3, [r5, #0]
}
 801359a:	e7ee      	b.n	801357a <HeapInit+0x1e>
 801359c:	4770      	bx	lr

0801359e <BTPS_MemCompare>:
   /* Size (in bytes)) are equal (each and every byte up to Size bytes).*/
   /* This function returns a negative number if Source1 is less than   */
   /* Source2, zero if Source1 equals Source2, and a positive value if  */
   /* Source1 is greater than Source2.                                  */
int BTPSAPI BTPS_MemCompare(BTPSCONST void *Source1, BTPSCONST void *Source2, unsigned long Size)
{
 801359e:	b508      	push	{r3, lr}
   /* Simply wrap the C Run-Time memcmp() function.                     */
   return(memcmp(Source1, Source2, Size));
 80135a0:	f000 fe94 	bl	80142cc <memcmp>
}
 80135a4:	bd08      	pop	{r3, pc}

080135a6 <BTPS_StringLength>:
   /* Terminated ASCII (character) String.  This function accepts as    */
   /* input a pointer to a NULL Terminated ASCII String and returns the */
   /* number of characters present in the string (NOT including the     */
   /* terminating NULL character).                                      */
unsigned int BTPSAPI BTPS_StringLength(BTPSCONST char *Source)
{
 80135a6:	b508      	push	{r3, lr}
   /* Simply wrap the C Run-Time strlen() function.                     */
   return(strlen(Source));
 80135a8:	f7ec fe2a 	bl	8000200 <strlen>
}
 80135ac:	bd08      	pop	{r3, pc}

080135ae <BTPS_SprintF>:
   /* The following function is provided to allow a mechanism for a C   */
   /* Run-Time Library sprintf() function implementation.  This function*/
   /* accepts as its imput the output buffer, a format string and a     */
   /* variable number of arguments determined by the format string.     */
int BTPSAPI BTPS_SprintF(char *Buffer, BTPSCONST char *Format, ...)
{
 80135ae:	b40e      	push	{r1, r2, r3}
 80135b0:	b500      	push	{lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	aa03      	add	r2, sp, #12
 80135b6:	f852 1b04 	ldr.w	r1, [r2], #4
   int     ret_val;
   va_list args;

   va_start(args, Format);
 80135ba:	9201      	str	r2, [sp, #4]
   ret_val = vsprintf(Buffer, Format, args);
 80135bc:	f000 ff90 	bl	80144e0 <vsprintf>
   va_end(args);

   return(ret_val);
}
 80135c0:	b002      	add	sp, #8
 80135c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c6:	b003      	add	sp, #12
 80135c8:	4770      	bx	lr
	...

080135cc <BTPS_CreateThread>:
   /* * NOTE * There does NOT exist a function to Kill a Thread that is */
   /*          present in the system.  Because of this, other means     */
   /*          needs to be devised in order to signal the Thread that it*/
   /*          is to terminate.                                         */
ThreadHandle_t BTPSAPI BTPS_CreateThread(Thread_t ThreadFunction, unsigned int StackSize, void *ThreadParameter)
{
 80135cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ce:	b083      	sub	sp, #12

   /* Wrap the OS Thread Creation function.                             */
   /* * NOTE * Because the OS Thread function and the BTPS Thread       */
   /*          function are not necessarily the same, we will wrap the  */
   /*          BTPS Thread within the real OS thread.                   */
   if(ThreadFunction)
 80135d0:	b358      	cbz	r0, 801362a <BTPS_CreateThread+0x5e>
 80135d2:	460d      	mov	r5, r1
 80135d4:	4616      	mov	r6, r2
 80135d6:	4607      	mov	r7, r0
   {
      /* Make sure that we allocate at least the minimal stack size     */
      if(StackSize < (configMINIMAL_STACK_SIZE * sizeof(portSTACK_TYPE)))
 80135d8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80135dc:	d201      	bcs.n	80135e2 <BTPS_CreateThread+0x16>
         StackSize = configMINIMAL_STACK_SIZE * sizeof(portSTACK_TYPE);
 80135de:	f44f 7500 	mov.w	r5, #512	; 0x200

      /* First we need to allocate memory for a ThreadWrapperInfo_t     */
      /* structure to hold the data we are going to pass to the thread. */
      if((ThreadWrapperInfo = (ThreadWrapperInfo_t *)BTPS_AllocateMemory(sizeof(ThreadWrapperInfo_t))) != NULL)
 80135e2:	2010      	movs	r0, #16
 80135e4:	f7ff feea 	bl	80133bc <BTPS_AllocateMemory>
 80135e8:	4604      	mov	r4, r0
 80135ea:	b1b0      	cbz	r0, 801361a <BTPS_CreateThread+0x4e>
      {
         /* Memory allocated, populate the structure with the correct   */
         /* information.                                                */
         BTPS_SprintF(ThreadWrapperInfo->Name, "BT%d", ThreadCount++);
 80135ec:	4b10      	ldr	r3, [pc, #64]	; (8013630 <BTPS_CreateThread+0x64>)
 80135ee:	781a      	ldrb	r2, [r3, #0]
 80135f0:	1c51      	adds	r1, r2, #1
 80135f2:	7019      	strb	r1, [r3, #0]
 80135f4:	490f      	ldr	r1, [pc, #60]	; (8013634 <BTPS_CreateThread+0x68>)
 80135f6:	f7ff ffda 	bl	80135ae <BTPS_SprintF>

         ThreadWrapperInfo->ThreadFunction  = ThreadFunction;
 80135fa:	60a7      	str	r7, [r4, #8]
         ThreadWrapperInfo->ThreadParameter = ThreadParameter;
 80135fc:	60e6      	str	r6, [r4, #12]

         /* Next attempt to create a thread using the default priority. */
         Result = xTaskCreate(ThreadWrapper, (signed char const *)ThreadWrapperInfo->Name, StackSize / sizeof(portSTACK_TYPE), ThreadWrapperInfo, DEFAULT_THREAD_PRIORITY, &ThreadWrapperInfo->Thread);
 80135fe:	1d23      	adds	r3, r4, #4
 8013600:	9301      	str	r3, [sp, #4]
 8013602:	2303      	movs	r3, #3
 8013604:	9300      	str	r3, [sp, #0]
 8013606:	4623      	mov	r3, r4
 8013608:	f3c5 028f 	ubfx	r2, r5, #2, #16
 801360c:	4621      	mov	r1, r4
 801360e:	480a      	ldr	r0, [pc, #40]	; (8013638 <BTPS_CreateThread+0x6c>)
 8013610:	f7fe fade 	bl	8011bd0 <xTaskCreate>
         if(Result != pdPASS)
 8013614:	2801      	cmp	r0, #1
 8013616:	d103      	bne.n	8013620 <BTPS_CreateThread+0x54>
            BTPS_FreeMemory(ThreadWrapperInfo);
            ret_val = NULL;
         }
         else
         {
            ret_val = ThreadWrapperInfo->Thread;
 8013618:	6864      	ldr	r4, [r4, #4]
   else
      ret_val = NULL;

   /* Return the result to the caller.                                  */
   return(ret_val);
}
 801361a:	4620      	mov	r0, r4
 801361c:	b003      	add	sp, #12
 801361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            BTPS_FreeMemory(ThreadWrapperInfo);
 8013620:	4620      	mov	r0, r4
 8013622:	f7ff fee5 	bl	80133f0 <BTPS_FreeMemory>
            ret_val = NULL;
 8013626:	2400      	movs	r4, #0
 8013628:	e7f7      	b.n	801361a <BTPS_CreateThread+0x4e>
      ret_val = NULL;
 801362a:	2400      	movs	r4, #0
   return(ret_val);
 801362c:	e7f5      	b.n	801361a <BTPS_CreateThread+0x4e>
 801362e:	bf00      	nop
 8013630:	20017a20 	.word	0x20017a20
 8013634:	0802f4cc 	.word	0x0802f4cc
 8013638:	0801349b 	.word	0x0801349b

0801363c <BTPS_CurrentThreadHandle>:
   /* The following function is provided to allow a mechanism to        */
   /* retrieve the handle of the thread which is currently executing.   */
   /* This function require no input parameters and will return a valid */
   /* ThreadHandle upon success.                                        */
ThreadHandle_t BTPSAPI BTPS_CurrentThreadHandle(void)
{
 801363c:	b508      	push	{r3, lr}
   /* Simply return the Current Thread Handle that is executing.        */
   return(xTaskGetCurrentTaskHandle());
 801363e:	f7fe fe13 	bl	8012268 <xTaskGetCurrentTaskHandle>
}
 8013642:	bd08      	pop	{r3, pc}

08013644 <BTPS_CreateMailbox>:
   /* Maximum Number of Slots that will be present in the Mailbox and   */
   /* the Size of each of the Slots.  This function returns a NON-NULL  */
   /* Mailbox Handle if the Mailbox is successfully created, or a NULL  */
   /* Mailbox Handle if the Mailbox was unable to be created.           */
Mailbox_t BTPSAPI BTPS_CreateMailbox(unsigned int NumberSlots, unsigned int SlotSize)
{
 8013644:	b570      	push	{r4, r5, r6, lr}
   xQueueHandle     Queue;
   MailboxHeader_t *MailboxHeader;

   /* Before proceeding any further we need to make sure that the       */
   /* parameters that were passed to us appear semi-valid.              */
   if((NumberSlots) && (SlotSize))
 8013646:	b1b0      	cbz	r0, 8013676 <BTPS_CreateMailbox+0x32>
 8013648:	460c      	mov	r4, r1
 801364a:	4606      	mov	r6, r0
 801364c:	b1a9      	cbz	r1, 801367a <BTPS_CreateMailbox+0x36>
   {
      /* Parameters appear semi-valid, so now let's allocate enough     */
      /* Memory to hold the Mailbox Header.                             */
      if((MailboxHeader = (MailboxHeader_t *)BTPS_AllocateMemory(sizeof(MailboxHeader_t))) != NULL)
 801364e:	2008      	movs	r0, #8
 8013650:	f7ff feb4 	bl	80133bc <BTPS_AllocateMemory>
 8013654:	4605      	mov	r5, r0
 8013656:	b188      	cbz	r0, 801367c <BTPS_CreateMailbox+0x38>
      {
         /* If the xQueueCreate returns Non-ZERO then it was            */
         /* successfully.                                               */
         if((Queue = xQueueCreate(NumberSlots,SlotSize)) != NULL)
 8013658:	2200      	movs	r2, #0
 801365a:	4621      	mov	r1, r4
 801365c:	4630      	mov	r0, r6
 801365e:	f7fd fc76 	bl	8010f4e <xQueueGenericCreate>
 8013662:	4606      	mov	r6, r0
 8013664:	b110      	cbz	r0, 801366c <BTPS_CreateMailbox+0x28>
         {
            MailboxHeader->SlotSize    = SlotSize;
 8013666:	606c      	str	r4, [r5, #4]
            MailboxHeader->QueueHandle = Queue;
 8013668:	6028      	str	r0, [r5, #0]
            ret_val                    = (Mailbox_t)MailboxHeader;
 801366a:	e007      	b.n	801367c <BTPS_CreateMailbox+0x38>
         }
         else
         {
            BTPS_FreeMemory(MailboxHeader);
 801366c:	4628      	mov	r0, r5
 801366e:	f7ff febf 	bl	80133f0 <BTPS_FreeMemory>

            ret_val = NULL;
 8013672:	4635      	mov	r5, r6
 8013674:	e002      	b.n	801367c <BTPS_CreateMailbox+0x38>
      }
      else
         ret_val = NULL;
   }
   else
      ret_val = NULL;
 8013676:	2500      	movs	r5, #0
 8013678:	e000      	b.n	801367c <BTPS_CreateMailbox+0x38>
 801367a:	2500      	movs	r5, #0

   /* Return the result to the caller.                                  */
   return(ret_val);
}
 801367c:	4628      	mov	r0, r5
 801367e:	bd70      	pop	{r4, r5, r6, pc}

08013680 <BTPS_AddMailbox>:
   xQueueHandle  QueueHandle;
   Boolean_t     ret_val;

   /* Before proceeding any further make sure that the Mailbox Handle   */
   /* and the MailboxData pointer that was specified appears semi-valid.*/
   if((Mailbox) && (MailboxData))
 8013680:	b190      	cbz	r0, 80136a8 <BTPS_AddMailbox+0x28>
{
 8013682:	b538      	push	{r3, r4, r5, lr}
 8013684:	460c      	mov	r4, r1
 8013686:	4605      	mov	r5, r0
   if((Mailbox) && (MailboxData))
 8013688:	b181      	cbz	r1, 80136ac <BTPS_AddMailbox+0x2c>
   {
      vTaskSuspendAll();
 801368a:	f7fe fb87 	bl	8011d9c <vTaskSuspendAll>
      QueueHandle = ((MailboxHeader_t *)Mailbox)->QueueHandle;
 801368e:	682d      	ldr	r5, [r5, #0]
      xTaskResumeAll();
 8013690:	f7fe fc28 	bl	8011ee4 <xTaskResumeAll>

      /* Loop until we read the data out of the queue.                  */
      ret_val     = FALSE;
      while(!ret_val)
      {
         if(xQueueSend(QueueHandle,MailboxData,portMAX_DELAY) == pdTRUE)
 8013694:	2300      	movs	r3, #0
 8013696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801369a:	4621      	mov	r1, r4
 801369c:	4628      	mov	r0, r5
 801369e:	f7fd fc7b 	bl	8010f98 <xQueueGenericSend>
 80136a2:	2801      	cmp	r0, #1
 80136a4:	d1f6      	bne.n	8013694 <BTPS_AddMailbox+0x14>
   else
      ret_val = FALSE;

   /* Return the result to the caller.                                  */
   return(ret_val);
}
 80136a6:	bd38      	pop	{r3, r4, r5, pc}
      ret_val = FALSE;
 80136a8:	2000      	movs	r0, #0
}
 80136aa:	4770      	bx	lr
      ret_val = FALSE;
 80136ac:	2000      	movs	r0, #0
 80136ae:	e7fa      	b.n	80136a6 <BTPS_AddMailbox+0x26>

080136b0 <BTPS_WaitMailbox>:
   xQueueHandle QueueHandle;
   Boolean_t    ret_val;

   /* Before proceeding any further make sure that the Mailbox Handle   */
   /* and the MailboxData pointer that was specified appears semi-valid.*/
   if((Mailbox) && (MailboxData))
 80136b0:	b188      	cbz	r0, 80136d6 <BTPS_WaitMailbox+0x26>
{
 80136b2:	b538      	push	{r3, r4, r5, lr}
 80136b4:	460c      	mov	r4, r1
 80136b6:	4605      	mov	r5, r0
   if((Mailbox) && (MailboxData))
 80136b8:	b179      	cbz	r1, 80136da <BTPS_WaitMailbox+0x2a>
   {
      vTaskSuspendAll();
 80136ba:	f7fe fb6f 	bl	8011d9c <vTaskSuspendAll>
      QueueHandle = ((MailboxHeader_t *)Mailbox)->QueueHandle;
 80136be:	682d      	ldr	r5, [r5, #0]
      xTaskResumeAll();
 80136c0:	f7fe fc10 	bl	8011ee4 <xTaskResumeAll>

      /* Loop until we read the data out of the queue.                  */
      ret_val     = FALSE;
      while(!ret_val)
      {
         if(xQueueReceive(QueueHandle,MailboxData,portMAX_DELAY) == pdTRUE)
 80136c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136c8:	4621      	mov	r1, r4
 80136ca:	4628      	mov	r0, r5
 80136cc:	f7fd fe2c 	bl	8011328 <xQueueReceive>
 80136d0:	2801      	cmp	r0, #1
 80136d2:	d1f7      	bne.n	80136c4 <BTPS_WaitMailbox+0x14>
   else
      ret_val = FALSE;

   /* Return the result to the caller.                                  */
   return(ret_val);
}
 80136d4:	bd38      	pop	{r3, r4, r5, pc}
      ret_val = FALSE;
 80136d6:	2000      	movs	r0, #0
}
 80136d8:	4770      	bx	lr
      ret_val = FALSE;
 80136da:	2000      	movs	r0, #0
 80136dc:	e7fa      	b.n	80136d4 <BTPS_WaitMailbox+0x24>

080136de <BTPS_DeleteMailbox>:
   void        *Buffer;
   int          Result;

   /* Before proceeding any further make sure that the Mailbox Handle   */
   /* that was specified appears semi-valid.                            */
   if(Mailbox)
 80136de:	b310      	cbz	r0, 8013726 <BTPS_DeleteMailbox+0x48>
{
 80136e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e2:	460d      	mov	r5, r1
 80136e4:	4607      	mov	r7, r0
   {
      vTaskSuspendAll();
 80136e6:	f7fe fb59 	bl	8011d9c <vTaskSuspendAll>
      SlotSize    = ((MailboxHeader_t *)Mailbox)->SlotSize;
 80136ea:	687c      	ldr	r4, [r7, #4]
      QueueHandle = ((MailboxHeader_t *)Mailbox)->QueueHandle;
 80136ec:	683e      	ldr	r6, [r7, #0]
      xTaskResumeAll();
 80136ee:	f7fe fbf9 	bl	8011ee4 <xTaskResumeAll>

      /* Check to see if a Mailbox Delete Item Callback was specified.  */
      if(MailboxDeleteCallback)
 80136f2:	b18d      	cbz	r5, 8013718 <BTPS_DeleteMailbox+0x3a>
      {
         /* Allocate a buffer to hold the data in the queue slots.      */
         if((Buffer = BTPS_AllocateMemory(SlotSize)) != NULL)
 80136f4:	4620      	mov	r0, r4
 80136f6:	f7ff fe61 	bl	80133bc <BTPS_AllocateMemory>
 80136fa:	4604      	mov	r4, r0
 80136fc:	b910      	cbnz	r0, 8013704 <BTPS_DeleteMailbox+0x26>
 80136fe:	e00b      	b.n	8013718 <BTPS_DeleteMailbox+0x3a>
               /* Callback otherwise we can exit the loop.              */
               if(Result == pdTRUE)
               {
                  __BTPSTRY
                  {
                     (*MailboxDeleteCallback)(Buffer);
 8013700:	4620      	mov	r0, r4
 8013702:	47a8      	blx	r5
               Result = xQueueReceive(QueueHandle,Buffer,0);
 8013704:	2200      	movs	r2, #0
 8013706:	4621      	mov	r1, r4
 8013708:	4630      	mov	r0, r6
 801370a:	f7fd fe0d 	bl	8011328 <xQueueReceive>
               if(Result == pdTRUE)
 801370e:	2801      	cmp	r0, #1
 8013710:	d0f6      	beq.n	8013700 <BTPS_DeleteMailbox+0x22>
               }
               else
                  Done = TRUE;
            }

            BTPS_FreeMemory(Buffer);
 8013712:	4620      	mov	r0, r4
 8013714:	f7ff fe6c 	bl	80133f0 <BTPS_FreeMemory>
         }
      }

      /* All finished cleaning up the Mailbox, simply free all          */
      /* memory that was allocated for the Mailbox.                     */
      vQueueDelete(QueueHandle);
 8013718:	4630      	mov	r0, r6
 801371a:	f7fe f827 	bl	801176c <vQueueDelete>
      BTPS_FreeMemory(Mailbox);
 801371e:	4638      	mov	r0, r7
 8013720:	f7ff fe66 	bl	80133f0 <BTPS_FreeMemory>
   }
}
 8013724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013726:	4770      	bx	lr

08013728 <BTPS_Init>:
   /* be reset to their default values.  This function sets all static  */
   /* parameters to their default values.                               */
   /* * NOTE * The implementation is free to pass whatever information  */
   /*          required in this parameter.                              */
void BTPSAPI BTPS_Init(void *UserParam)
{
 8013728:	b510      	push	{r4, lr}
   /* Input parameter represents the Debug Message Output Callback      */
   /* function.                                                         */
   if(UserParam)
 801372a:	b180      	cbz	r0, 801374e <BTPS_Init+0x26>
 801372c:	4604      	mov	r4, r0
   {
      if(((BTPS_Initialization_t *)UserParam)->MessageOutputCallback)
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	b183      	cbz	r3, 8013754 <BTPS_Init+0x2c>
      {
         if((IOMutex = BTPS_CreateMutex(FALSE)) != NULL)
 8013732:	2000      	movs	r0, #0
 8013734:	f7ff fda5 	bl	8013282 <BTPS_CreateMutex>
 8013738:	4b0f      	ldr	r3, [pc, #60]	; (8013778 <BTPS_Init+0x50>)
 801373a:	6018      	str	r0, [r3, #0]
 801373c:	b118      	cbz	r0, 8013746 <BTPS_Init+0x1e>
            MessageOutputCallback = ((BTPS_Initialization_t *)UserParam)->MessageOutputCallback;
 801373e:	6822      	ldr	r2, [r4, #0]
 8013740:	4b0e      	ldr	r3, [pc, #56]	; (801377c <BTPS_Init+0x54>)
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	e006      	b.n	8013754 <BTPS_Init+0x2c>
         else
            MessageOutputCallback = NULL;
 8013746:	4b0d      	ldr	r3, [pc, #52]	; (801377c <BTPS_Init+0x54>)
 8013748:	2200      	movs	r2, #0
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	e002      	b.n	8013754 <BTPS_Init+0x2c>
      }
   }
   else
      MessageOutputCallback = NULL;
 801374e:	4b0b      	ldr	r3, [pc, #44]	; (801377c <BTPS_Init+0x54>)
 8013750:	2200      	movs	r2, #0
 8013752:	601a      	str	r2, [r3, #0]

   /* Initailize the Heap.                                              */
   HeapInit(MemoryBuffer, sizeof(MemoryBuffer));
 8013754:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8013758:	4809      	ldr	r0, [pc, #36]	; (8013780 <BTPS_Init+0x58>)
 801375a:	f7ff feff 	bl	801355c <HeapInit>

   KernelMutex = BTPS_CreateMutex(FALSE);
 801375e:	2000      	movs	r0, #0
 8013760:	f7ff fd8f 	bl	8013282 <BTPS_CreateMutex>
 8013764:	4b07      	ldr	r3, [pc, #28]	; (8013784 <BTPS_Init+0x5c>)
 8013766:	6018      	str	r0, [r3, #0]

   /* Initialize the static variables for this module.                  */
   DebugZoneMask              = DEBUG_ZONES;
 8013768:	4b07      	ldr	r3, [pc, #28]	; (8013788 <BTPS_Init+0x60>)
 801376a:	2201      	movs	r2, #1
 801376c:	601a      	str	r2, [r3, #0]
   ThreadCount                = 0;
 801376e:	4b07      	ldr	r3, [pc, #28]	; (801378c <BTPS_Init+0x64>)
 8013770:	2200      	movs	r2, #0
 8013772:	701a      	strb	r2, [r3, #0]
}
 8013774:	bd10      	pop	{r4, pc}
 8013776:	bf00      	nop
 8013778:	20012a14 	.word	0x20012a14
 801377c:	20017a1c 	.word	0x20017a1c
 8013780:	20012a1c 	.word	0x20012a1c
 8013784:	20012a18 	.word	0x20012a18
 8013788:	20012a10 	.word	0x20012a10
 801378c:	20017a20 	.word	0x20017a20

08013790 <BTPS_DeInit>:

   /* The following function is used to cleanup the Platform module.    */
void BTPSAPI BTPS_DeInit(void)
{
   if(IOMutex)
 8013790:	4b06      	ldr	r3, [pc, #24]	; (80137ac <BTPS_DeInit+0x1c>)
 8013792:	6818      	ldr	r0, [r3, #0]
 8013794:	b140      	cbz	r0, 80137a8 <BTPS_DeInit+0x18>
{
 8013796:	b510      	push	{r4, lr}
   {
      MessageOutputCallback = NULL;
 8013798:	2400      	movs	r4, #0
 801379a:	4b05      	ldr	r3, [pc, #20]	; (80137b0 <BTPS_DeInit+0x20>)
 801379c:	601c      	str	r4, [r3, #0]

      BTPS_CloseMutex(IOMutex);
 801379e:	f7ff fda6 	bl	80132ee <BTPS_CloseMutex>
      IOMutex = NULL;
 80137a2:	4b02      	ldr	r3, [pc, #8]	; (80137ac <BTPS_DeInit+0x1c>)
 80137a4:	601c      	str	r4, [r3, #0]
   }
}
 80137a6:	bd10      	pop	{r4, pc}
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop
 80137ac:	20012a14 	.word	0x20012a14
 80137b0:	20017a1c 	.word	0x20017a1c

080137b4 <BTPS_OutputMessage>:

   /* Write out the specified NULL terminated Debugging String to the   */
   /* Debug output.                                                     */
void BTPSAPI BTPS_OutputMessage(BTPSCONST char *DebugString, ...)
{
 80137b4:	b40f      	push	{r0, r1, r2, r3}
 80137b6:	b500      	push	{lr}
 80137b8:	b0c3      	sub	sp, #268	; 0x10c
   va_list args;
   int     Length;
   char    MsgBuffer[256];

   if(MessageOutputCallback)
 80137ba:	4b0f      	ldr	r3, [pc, #60]	; (80137f8 <BTPS_OutputMessage+0x44>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	b133      	cbz	r3, 80137ce <BTPS_OutputMessage+0x1a>
   {
      /* Grab the I/O Mutex and send the Message.                       */
      if(BTPS_WaitMutex(IOMutex, BTPS_INFINITE_WAIT))
 80137c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80137c4:	4b0d      	ldr	r3, [pc, #52]	; (80137fc <BTPS_OutputMessage+0x48>)
 80137c6:	6818      	ldr	r0, [r3, #0]
 80137c8:	f7ff fd6f 	bl	80132aa <BTPS_WaitMutex>
 80137cc:	b920      	cbnz	r0, 80137d8 <BTPS_OutputMessage+0x24>
         MessageOutputCallback(Length, MsgBuffer);

         BTPS_ReleaseMutex(IOMutex);
      }
   }
}
 80137ce:	b043      	add	sp, #268	; 0x10c
 80137d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80137d4:	b004      	add	sp, #16
 80137d6:	4770      	bx	lr
         va_start(args, DebugString);
 80137d8:	ab45      	add	r3, sp, #276	; 0x114
 80137da:	9341      	str	r3, [sp, #260]	; 0x104
         Length = vsnprintf(MsgBuffer, (sizeof(MsgBuffer) - 1), DebugString, args);
 80137dc:	9a44      	ldr	r2, [sp, #272]	; 0x110
 80137de:	21ff      	movs	r1, #255	; 0xff
 80137e0:	a801      	add	r0, sp, #4
 80137e2:	f000 fe59 	bl	8014498 <vsnprintf>
         MessageOutputCallback(Length, MsgBuffer);
 80137e6:	4b04      	ldr	r3, [pc, #16]	; (80137f8 <BTPS_OutputMessage+0x44>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	a901      	add	r1, sp, #4
 80137ec:	4798      	blx	r3
         BTPS_ReleaseMutex(IOMutex);
 80137ee:	4b03      	ldr	r3, [pc, #12]	; (80137fc <BTPS_OutputMessage+0x48>)
 80137f0:	6818      	ldr	r0, [r3, #0]
 80137f2:	f7ff fd76 	bl	80132e2 <BTPS_ReleaseMutex>
}
 80137f6:	e7ea      	b.n	80137ce <BTPS_OutputMessage+0x1a>
 80137f8:	20017a1c 	.word	0x20017a1c
 80137fc:	20012a14 	.word	0x20012a14

08013800 <DownloadPatch>:
   /* The following function is provided to allow a mechanism to        */
   /* download the specified Patch Data to the CC25xx device.  This     */
   /* function does not disable the co-processor.  This function returns*/
   /* TRUE if successful or FALSE if there was an error.                */
static Boolean_t DownloadPatch(unsigned int BluetoothStackID, unsigned int PatchLength, BTPSCONST unsigned char *PatchPointer)
{
 8013800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013802:	b0a9      	sub	sp, #164	; 0xa4
   unsigned short OCF;
   Boolean_t      ret_val;
   unsigned char  Buffer[128];

   /* First, make sure the input parameters appear to be semi-valid.    */
   if((BluetoothStackID) && (PatchPointer))
 8013804:	2800      	cmp	r0, #0
 8013806:	d035      	beq.n	8013874 <DownloadPatch+0x74>
 8013808:	460d      	mov	r5, r1
 801380a:	4614      	mov	r4, r2
 801380c:	4607      	mov	r7, r0
 801380e:	b10a      	cbz	r2, 8013814 <DownloadPatch+0x14>
   {
      ret_val = TRUE;
 8013810:	2601      	movs	r6, #1
 8013812:	e006      	b.n	8013822 <DownloadPatch+0x22>
         else
            ret_val = FALSE;
      }
   }
   else
      ret_val = FALSE;
 8013814:	2600      	movs	r6, #0
 8013816:	e02e      	b.n	8013876 <DownloadPatch+0x76>
               PatchLength -= (PatchPointer[3] + 4);
 8013818:	78e3      	ldrb	r3, [r4, #3]
 801381a:	1aed      	subs	r5, r5, r3
 801381c:	3d04      	subs	r5, #4
               PatchPointer += (PatchPointer[3] + 4);
 801381e:	3304      	adds	r3, #4
 8013820:	441c      	add	r4, r3
      while((PatchLength) && (ret_val))
 8013822:	b345      	cbz	r5, 8013876 <DownloadPatch+0x76>
 8013824:	b33e      	cbz	r6, 8013876 <DownloadPatch+0x76>
         if(PatchPointer[0] == 0x01)
 8013826:	7823      	ldrb	r3, [r4, #0]
 8013828:	2b01      	cmp	r3, #1
 801382a:	d121      	bne.n	8013870 <DownloadPatch+0x70>
            OGF     = PatchPointer[2] >> 2;
 801382c:	78a1      	ldrb	r1, [r4, #2]
            OCF     = (READ_UNALIGNED_WORD_LITTLE_ENDIAN(&PatchPointer[1]) & 0x3FF);
 801382e:	7862      	ldrb	r2, [r4, #1]
 8013830:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
            Length  = sizeof(Buffer);
 8013834:	2380      	movs	r3, #128	; 0x80
 8013836:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
            Result = HCI_Send_Raw_Command(BluetoothStackID, OGF, OCF, PatchPointer[3], (unsigned char*)&PatchPointer[4], &Status, &Length, Buffer, TRUE);
 801383a:	1d23      	adds	r3, r4, #4
 801383c:	2001      	movs	r0, #1
 801383e:	9004      	str	r0, [sp, #16]
 8013840:	a807      	add	r0, sp, #28
 8013842:	9003      	str	r0, [sp, #12]
 8013844:	f10d 009e 	add.w	r0, sp, #158	; 0x9e
 8013848:	9002      	str	r0, [sp, #8]
 801384a:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 801384e:	9001      	str	r0, [sp, #4]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	78e3      	ldrb	r3, [r4, #3]
 8013854:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013858:	0889      	lsrs	r1, r1, #2
 801385a:	4638      	mov	r0, r7
 801385c:	f00c fa10 	bl	801fc80 <HCI_Send_Raw_Command>
            if((!Result) || (!Status))
 8013860:	2800      	cmp	r0, #0
 8013862:	d0d9      	beq.n	8013818 <DownloadPatch+0x18>
 8013864:	f89d 309f 	ldrb.w	r3, [sp, #159]	; 0x9f
 8013868:	2b00      	cmp	r3, #0
 801386a:	d0d5      	beq.n	8013818 <DownloadPatch+0x18>
               ret_val = FALSE;
 801386c:	2600      	movs	r6, #0
 801386e:	e7d8      	b.n	8013822 <DownloadPatch+0x22>
            ret_val = FALSE;
 8013870:	2600      	movs	r6, #0
 8013872:	e7d6      	b.n	8013822 <DownloadPatch+0x22>
      ret_val = FALSE;
 8013874:	2600      	movs	r6, #0

   return(ret_val);
}
 8013876:	4630      	mov	r0, r6
 8013878:	b029      	add	sp, #164	; 0xa4
 801387a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801387c <HCI_VS_InitializeBeforeHCIOpen>:
   /*          at the time this function is called.                     */
Boolean_t BTPSAPI HCI_VS_InitializeBeforeHCIOpen(HCI_DriverInformation_t *HCI_DriverInformation)
{
   /* Flag that we have not issued the first Vendor Specific Commands   */
   /* before the first reset.                                           */
   VendorCommandsIssued = FALSE;
 801387c:	4b06      	ldr	r3, [pc, #24]	; (8013898 <HCI_VS_InitializeBeforeHCIOpen+0x1c>)
 801387e:	2200      	movs	r2, #0
 8013880:	701a      	strb	r2, [r3, #0]

   /* Store the driver information for later use.                       */
   SpecifiedBaudRate = HCI_DriverInformation->DriverInformation.COMMDriverInformation.BaudRate;
 8013882:	68c2      	ldr	r2, [r0, #12]
 8013884:	4b05      	ldr	r3, [pc, #20]	; (801389c <HCI_VS_InitializeBeforeHCIOpen+0x20>)
 8013886:	601a      	str	r2, [r3, #0]
   SpecifiedProtocol = HCI_DriverInformation->DriverInformation.COMMDriverInformation.Protocol;
 8013888:	7c02      	ldrb	r2, [r0, #16]
 801388a:	4b05      	ldr	r3, [pc, #20]	; (80138a0 <HCI_VS_InitializeBeforeHCIOpen+0x24>)
 801388c:	701a      	strb	r2, [r3, #0]

   /* Make sure that the driver is initially configured to the default  */
   /* baud rate of the controller.                                      */
   HCI_DriverInformation->DriverInformation.COMMDriverInformation.BaudRate = VENDOR_DEFAULT_BAUDRATE;
 801388e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8013892:	60c3      	str	r3, [r0, #12]

   return(TRUE);
}
 8013894:	2001      	movs	r0, #1
 8013896:	4770      	bx	lr
 8013898:	20017a29 	.word	0x20017a29
 801389c:	20017a24 	.word	0x20017a24
 80138a0:	20017a28 	.word	0x20017a28

080138a4 <HCI_VS_InitializeAfterHCIOpen>:
   /*          has occurred is with the HCI Driver (hence the HCI       */
   /*          Driver ID that is passed to this function).              */
Boolean_t BTPSAPI HCI_VS_InitializeAfterHCIOpen(unsigned int HCIDriverID)
{
   return(TRUE);
}
 80138a4:	2001      	movs	r0, #1
 80138a6:	4770      	bx	lr

080138a8 <HCI_VS_InitializeBeforeHCIReset>:
   /*          (hence the HCI Driver ID and the Bluetooth Stack ID      */
   /*          passed to this function).                                */
Boolean_t BTPSAPI HCI_VS_InitializeBeforeHCIReset(unsigned int HCIDriverID, unsigned int BluetoothStackID)
{
   return(TRUE);
}
 80138a8:	2001      	movs	r0, #1
 80138aa:	4770      	bx	lr

080138ac <HCI_VS_InitializeAfterHCIReset>:
   /*          layer functions can be called, however no other stack    */
   /*          layer functions are able to be called at this time (hence*/
   /*          the HCI Driver ID and the Bluetooth Stack ID passed to   */
   /*          this function).                                          */
Boolean_t BTPSAPI HCI_VS_InitializeAfterHCIReset(unsigned int HCIDriverID, unsigned int BluetoothStackID)
{
 80138ac:	b570      	push	{r4, r5, r6, lr}
 80138ae:	b086      	sub	sp, #24
   Boolean_t                        ret_val;
   HCI_Driver_Reconfigure_Data_t    DriverReconfigureData;
   HCI_COMMReconfigureInformation_t COMMReconfigureInformation;

   /* Verify that the parameters that were passed in appear valid.      */
   if((!VendorCommandsIssued) && (HCIDriverID) && (BluetoothStackID))
 80138b0:	4b2d      	ldr	r3, [pc, #180]	; (8013968 <HCI_VS_InitializeAfterHCIReset+0xbc>)
 80138b2:	781c      	ldrb	r4, [r3, #0]
 80138b4:	2c00      	cmp	r4, #0
 80138b6:	d153      	bne.n	8013960 <HCI_VS_InitializeAfterHCIReset+0xb4>
 80138b8:	460d      	mov	r5, r1
 80138ba:	2800      	cmp	r0, #0
 80138bc:	d051      	beq.n	8013962 <HCI_VS_InitializeAfterHCIReset+0xb6>
 80138be:	2900      	cmp	r1, #0
 80138c0:	d04f      	beq.n	8013962 <HCI_VS_InitializeAfterHCIReset+0xb6>
   {
      DBG_MSG(DBG_ZONE_VENDOR, ("HCI_VS_InitializeAfterHCIReset\r\n"));

      if(SpecifiedBaudRate != VENDOR_DEFAULT_BAUDRATE)
 80138c2:	4b2a      	ldr	r3, [pc, #168]	; (801396c <HCI_VS_InitializeAfterHCIReset+0xc0>)
 80138c4:	6819      	ldr	r1, [r3, #0]
 80138c6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
 80138ca:	d023      	beq.n	8013914 <HCI_VS_InitializeAfterHCIReset+0x68>
      {
         /* First, change the baseband's baudrate to what was specified */
         /* in the initialization structure.                            */
         if(!VS_Update_UART_Baud_Rate(BluetoothStackID, SpecifiedBaudRate))
 80138cc:	4628      	mov	r0, r5
 80138ce:	f000 f92c 	bl	8013b2a <VS_Update_UART_Baud_Rate>
 80138d2:	b9d0      	cbnz	r0, 801390a <HCI_VS_InitializeAfterHCIReset+0x5e>
         {
            /* If the 3-wire protocol is being used, add a short delay  */
            /* so that the ack message can go out first.                */
            if((SpecifiedProtocol == cp3Wire) || (SpecifiedProtocol == cp3Wire_RTS_CTS))
 80138d4:	4b26      	ldr	r3, [pc, #152]	; (8013970 <HCI_VS_InitializeAfterHCIReset+0xc4>)
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	3b08      	subs	r3, #8
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d910      	bls.n	8013902 <HCI_VS_InitializeAfterHCIReset+0x56>
               BTPS_Delay(10);

            /* Now change the baudrate of the driver.                   */
            DriverReconfigureData.ReconfigureCommand    = HCI_COMM_DRIVER_RECONFIGURE_DATA_COMMAND_CHANGE_COMM_PARAMETERS;
 80138e0:	4b24      	ldr	r3, [pc, #144]	; (8013974 <HCI_VS_InitializeAfterHCIReset+0xc8>)
 80138e2:	9304      	str	r3, [sp, #16]
            DriverReconfigureData.ReconfigureData       = &COMMReconfigureInformation;
 80138e4:	f8cd d014 	str.w	sp, [sp, #20]
            COMMReconfigureInformation.ReconfigureFlags = HCI_COMM_RECONFIGURE_INFORMATION_RECONFIGURE_FLAGS_CHANGE_BAUDRATE;
 80138e8:	2302      	movs	r3, #2
 80138ea:	9300      	str	r3, [sp, #0]
            COMMReconfigureInformation.BaudRate         = SpecifiedBaudRate;
 80138ec:	4b1f      	ldr	r3, [pc, #124]	; (801396c <HCI_VS_InitializeAfterHCIReset+0xc0>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	9302      	str	r3, [sp, #8]

            if(!HCI_Reconfigure_Driver(BluetoothStackID, FALSE, &(DriverReconfigureData)))
 80138f2:	aa04      	add	r2, sp, #16
 80138f4:	2100      	movs	r1, #0
 80138f6:	4628      	mov	r0, r5
 80138f8:	f00c f920 	bl	801fb3c <HCI_Reconfigure_Driver>
 80138fc:	b9e0      	cbnz	r0, 8013938 <HCI_VS_InitializeAfterHCIReset+0x8c>
               ret_val = TRUE;
 80138fe:	2601      	movs	r6, #1
 8013900:	e004      	b.n	801390c <HCI_VS_InitializeAfterHCIReset+0x60>
               BTPS_Delay(10);
 8013902:	200a      	movs	r0, #10
 8013904:	f7ff fcb1 	bl	801326a <BTPS_Delay>
 8013908:	e7ea      	b.n	80138e0 <HCI_VS_InitializeAfterHCIReset+0x34>
            else
               ret_val = FALSE;
         }
         else
            ret_val = FALSE;
 801390a:	4626      	mov	r6, r4

         BTPS_Delay(100);
 801390c:	2064      	movs	r0, #100	; 0x64
 801390e:	f7ff fcac 	bl	801326a <BTPS_Delay>
      }
      else
         ret_val = TRUE;

     if(ret_val)
 8013912:	b16e      	cbz	r6, 8013930 <HCI_VS_InitializeAfterHCIReset+0x84>
      {
         /* Next download the patch.                                    */
         ret_val = DownloadPatch(BluetoothStackID, sizeof(BasePatch), BasePatch);
 8013914:	4a18      	ldr	r2, [pc, #96]	; (8013978 <HCI_VS_InitializeAfterHCIReset+0xcc>)
 8013916:	f641 014d 	movw	r1, #6221	; 0x184d
 801391a:	4628      	mov	r0, r5
 801391c:	f7ff ff70 	bl	8013800 <DownloadPatch>

         if((ret_val) && ((SpecifiedProtocol == cpHCILL) || (SpecifiedProtocol == cpHCILL_RTS_CTS)))
 8013920:	4606      	mov	r6, r0
 8013922:	b128      	cbz	r0, 8013930 <HCI_VS_InitializeAfterHCIReset+0x84>
 8013924:	4b12      	ldr	r3, [pc, #72]	; (8013970 <HCI_VS_InitializeAfterHCIReset+0xc4>)
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	3b06      	subs	r3, #6
 801392a:	b2db      	uxtb	r3, r3
 801392c:	2b01      	cmp	r3, #1
 801392e:	d905      	bls.n	801393c <HCI_VS_InitializeAfterHCIReset+0x90>
            else
               ret_val = FALSE;
         }
      }

      VendorCommandsIssued = ret_val;
 8013930:	4b0d      	ldr	r3, [pc, #52]	; (8013968 <HCI_VS_InitializeAfterHCIReset+0xbc>)
 8013932:	701e      	strb	r6, [r3, #0]
 8013934:	4634      	mov	r4, r6
 8013936:	e014      	b.n	8013962 <HCI_VS_InitializeAfterHCIReset+0xb6>
               ret_val = FALSE;
 8013938:	4626      	mov	r6, r4
 801393a:	e7e7      	b.n	801390c <HCI_VS_InitializeAfterHCIReset+0x60>
            if(!VS_Update_HCILL_Parameters(BluetoothStackID, 80, 400, 150))
 801393c:	2396      	movs	r3, #150	; 0x96
 801393e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013942:	2150      	movs	r1, #80	; 0x50
 8013944:	4628      	mov	r0, r5
 8013946:	f000 f937 	bl	8013bb8 <VS_Update_HCILL_Parameters>
 801394a:	b108      	cbz	r0, 8013950 <HCI_VS_InitializeAfterHCIReset+0xa4>
               ret_val = FALSE;
 801394c:	4626      	mov	r6, r4
 801394e:	e7ef      	b.n	8013930 <HCI_VS_InitializeAfterHCIReset+0x84>
               if(VS_Enable_Sleep_Mode(BluetoothStackID, TRUE))
 8013950:	2101      	movs	r1, #1
 8013952:	4628      	mov	r0, r5
 8013954:	f000 f974 	bl	8013c40 <VS_Enable_Sleep_Mode>
 8013958:	2800      	cmp	r0, #0
 801395a:	d0e9      	beq.n	8013930 <HCI_VS_InitializeAfterHCIReset+0x84>
                  ret_val = FALSE;
 801395c:	4626      	mov	r6, r4
 801395e:	e7e7      	b.n	8013930 <HCI_VS_InitializeAfterHCIReset+0x84>
   }
   else
      ret_val = FALSE;
 8013960:	2400      	movs	r4, #0

   /* Print Success/Failure status.                                     */
   DBG_MSG(DBG_ZONE_VENDOR, ("HCI_VS_InitializeAfterHCIReset %s\r\n", (ret_val) ? "Success" : "Failure"));

   return(ret_val);
}
 8013962:	4620      	mov	r0, r4
 8013964:	b006      	add	sp, #24
 8013966:	bd70      	pop	{r4, r5, r6, pc}
 8013968:	20017a29 	.word	0x20017a29
 801396c:	20017a24 	.word	0x20017a24
 8013970:	20017a28 	.word	0x20017a28
 8013974:	00010004 	.word	0x00010004
 8013978:	08037a08 	.word	0x08037a08

0801397c <HCI_VS_InitializeBeforeHCIClose>:
   /*          layer functions can be called, however no other stack    */
   /*          layer functions are able to be called at this time (hence*/
   /*          the HCI Driver ID and the Bluetooth Stack ID passed to   */
   /*          this function).                                          */
Boolean_t BTPSAPI HCI_VS_InitializeBeforeHCIClose(unsigned int HCIDriverID, unsigned int BluetoothStackID)
{
 801397c:	b510      	push	{r4, lr}
 801397e:	460c      	mov	r4, r1
   Boolean_t ret_val;

   if((SpecifiedProtocol == cpHCILL) || (SpecifiedProtocol == cpHCILL_RTS_CTS))
 8013980:	4b0f      	ldr	r3, [pc, #60]	; (80139c0 <HCI_VS_InitializeBeforeHCIClose+0x44>)
 8013982:	781b      	ldrb	r3, [r3, #0]
 8013984:	3b06      	subs	r3, #6
 8013986:	b2db      	uxtb	r3, r3
 8013988:	2b01      	cmp	r3, #1
 801398a:	d909      	bls.n	80139a0 <HCI_VS_InitializeBeforeHCIClose+0x24>
   else
      ret_val = TRUE;

   if(ret_val)
   {
      if(SpecifiedBaudRate != VENDOR_DEFAULT_BAUDRATE)
 801398c:	4b0d      	ldr	r3, [pc, #52]	; (80139c4 <HCI_VS_InitializeBeforeHCIClose+0x48>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8013994:	d10c      	bne.n	80139b0 <HCI_VS_InitializeBeforeHCIClose+0x34>
 8013996:	2001      	movs	r0, #1
         ret_val = VS_Update_UART_Baud_Rate(BluetoothStackID, VENDOR_DEFAULT_BAUDRATE);
      }
   }

   /* Flag that we need to re-download the Patch.                       */
   VendorCommandsIssued = FALSE;
 8013998:	4b0b      	ldr	r3, [pc, #44]	; (80139c8 <HCI_VS_InitializeBeforeHCIClose+0x4c>)
 801399a:	2200      	movs	r2, #0
 801399c:	701a      	strb	r2, [r3, #0]

   return(ret_val);
}
 801399e:	bd10      	pop	{r4, pc}
      if(!VS_Enable_Sleep_Mode(BluetoothStackID, FALSE))
 80139a0:	2100      	movs	r1, #0
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 f94c 	bl	8013c40 <VS_Enable_Sleep_Mode>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d0ef      	beq.n	801398c <HCI_VS_InitializeBeforeHCIClose+0x10>
         ret_val = FALSE;
 80139ac:	2000      	movs	r0, #0
 80139ae:	e7f3      	b.n	8013998 <HCI_VS_InitializeBeforeHCIClose+0x1c>
         ret_val = VS_Update_UART_Baud_Rate(BluetoothStackID, VENDOR_DEFAULT_BAUDRATE);
 80139b0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80139b4:	4620      	mov	r0, r4
 80139b6:	f000 f8b8 	bl	8013b2a <VS_Update_UART_Baud_Rate>
 80139ba:	b2c0      	uxtb	r0, r0
 80139bc:	e7ec      	b.n	8013998 <HCI_VS_InitializeBeforeHCIClose+0x1c>
 80139be:	bf00      	nop
 80139c0:	20017a28 	.word	0x20017a28
 80139c4:	20017a24 	.word	0x20017a24
 80139c8:	20017a29 	.word	0x20017a29

080139cc <HCI_VS_InitializeAfterHCIClose>:
   /*          entire stack has been closed down at the time this       */
   /*          function is called.                                      */
Boolean_t BTPSAPI HCI_VS_InitializeAfterHCIClose(void)
{
   return(TRUE);
}
 80139cc:	2001      	movs	r0, #1
 80139ce:	4770      	bx	lr

080139d0 <HCI_VS_EnableFeature>:
   int            Result;
   Boolean_t      ret_val = FALSE;
   unsigned long  FeatureMask;

   /* First, make sure that we have a semi-valid Bluetooth Stack ID.    */
   if(BluetoothStackID)
 80139d0:	2800      	cmp	r0, #0
 80139d2:	d04b      	beq.n	8013a6c <HCI_VS_EnableFeature+0x9c>
{
 80139d4:	b530      	push	{r4, r5, lr}
 80139d6:	b083      	sub	sp, #12
 80139d8:	460c      	mov	r4, r1
 80139da:	4605      	mov	r5, r0
   {
      /* Next, make sure there is a feature to enable.                  */
      if(Feature)
 80139dc:	b911      	cbnz	r1, 80139e4 <HCI_VS_EnableFeature+0x14>
         }
         else
            ret_val = FALSE;
      }
      else
         ret_val = FALSE;
 80139de:	2000      	movs	r0, #0
   }
   else
      ret_val = FALSE;

   return(ret_val);
}
 80139e0:	b003      	add	sp, #12
 80139e2:	bd30      	pop	{r4, r5, pc}
         if(!BSC_QueryActiveFeatures(BluetoothStackID, &FeatureMask))
 80139e4:	a901      	add	r1, sp, #4
 80139e6:	f005 fb5d 	bl	80190a4 <BSC_QueryActiveFeatures>
 80139ea:	2800      	cmp	r0, #0
 80139ec:	d140      	bne.n	8013a70 <HCI_VS_EnableFeature+0xa0>
            if((FeatureMask) && (FeatureMask != Feature))
 80139ee:	9b01      	ldr	r3, [sp, #4]
 80139f0:	b11b      	cbz	r3, 80139fa <HCI_VS_EnableFeature+0x2a>
 80139f2:	42a3      	cmp	r3, r4
 80139f4:	d001      	beq.n	80139fa <HCI_VS_EnableFeature+0x2a>
               ret_val = FALSE;
 80139f6:	2000      	movs	r0, #0
 80139f8:	e7f2      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
               if(FeatureMask & Feature) {
 80139fa:	4223      	tst	r3, r4
 80139fc:	d13a      	bne.n	8013a74 <HCI_VS_EnableFeature+0xa4>
                  switch(Feature)
 80139fe:	1e61      	subs	r1, r4, #1
 8013a00:	290f      	cmp	r1, #15
 8013a02:	d839      	bhi.n	8013a78 <HCI_VS_EnableFeature+0xa8>
 8013a04:	e8df f001 	tbb	[pc, r1]
 8013a08:	0e383808 	.word	0x0e383808
 8013a0c:	0e383838 	.word	0x0e383838
 8013a10:	38383838 	.word	0x38383838
 8013a14:	20383838 	.word	0x20383838
                        ret_val = DownloadPatch(BluetoothStackID, LowEnergyPatchLength, LowEnergyPatch);
 8013a18:	4a18      	ldr	r2, [pc, #96]	; (8013a7c <HCI_VS_EnableFeature+0xac>)
 8013a1a:	21fe      	movs	r1, #254	; 0xfe
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	f7ff feef 	bl	8013800 <DownloadPatch>
                        break; 
 8013a22:	e7dd      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
                        ret_val = DownloadPatch(BluetoothStackID, AvprPatchLength, AvprPatch);
 8013a24:	4a16      	ldr	r2, [pc, #88]	; (8013a80 <HCI_VS_EnableFeature+0xb0>)
 8013a26:	f248 5134 	movw	r1, #34100	; 0x8534
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f7ff fee8 	bl	8013800 <DownloadPatch>
						if(FALSE == ret_val) break;
 8013a30:	2800      	cmp	r0, #0
 8013a32:	d0d5      	beq.n	80139e0 <HCI_VS_EnableFeature+0x10>
                        Result = VS_AVPR_Enable(BluetoothStackID, TRUE, FALSE, AVRP_A3DP_SOURCE_ROLE);
 8013a34:	2300      	movs	r3, #0
 8013a36:	461a      	mov	r2, r3
 8013a38:	2101      	movs	r1, #1
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f000 f96a 	bl	8013d14 <VS_AVPR_Enable>
                        ret_val = Result ? FALSE : TRUE;
 8013a40:	fab0 f080 	clz	r0, r0
 8013a44:	0940      	lsrs	r0, r0, #5
                        break;
 8013a46:	e7cb      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
					 	ret_val = DownloadPatch(BluetoothStackID, AvprPatchLength, AvprPatch);
 8013a48:	4a0d      	ldr	r2, [pc, #52]	; (8013a80 <HCI_VS_EnableFeature+0xb0>)
 8013a4a:	f248 5134 	movw	r1, #34100	; 0x8534
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f7ff fed6 	bl	8013800 <DownloadPatch>
                        if(FALSE == ret_val) break;
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d0c3      	beq.n	80139e0 <HCI_VS_EnableFeature+0x10>
                        Result = VS_AVPR_Enable(BluetoothStackID, TRUE, FALSE, AVRP_A3DP_SINK_ROLE);
 8013a58:	2301      	movs	r3, #1
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f000 f958 	bl	8013d14 <VS_AVPR_Enable>
                        ret_val = Result ? FALSE : TRUE;
 8013a64:	fab0 f080 	clz	r0, r0
 8013a68:	0940      	lsrs	r0, r0, #5
                        break;
 8013a6a:	e7b9      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
      ret_val = FALSE;
 8013a6c:	2000      	movs	r0, #0
}
 8013a6e:	4770      	bx	lr
            ret_val = FALSE;
 8013a70:	2000      	movs	r0, #0
 8013a72:	e7b5      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
                  ret_val = TRUE;
 8013a74:	2001      	movs	r0, #1
 8013a76:	e7b3      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
               if(FeatureMask & Feature) {
 8013a78:	2000      	movs	r0, #0
 8013a7a:	e7b1      	b.n	80139e0 <HCI_VS_EnableFeature+0x10>
 8013a7c:	08039258 	.word	0x08039258
 8013a80:	0802f4d4 	.word	0x0802f4d4

08013a84 <HCI_VS_DisableFeature>:
   int            Result;
   Boolean_t      ret_val;
   unsigned long  FeatureMask;  

   /* First, make sure that we have a semi-valid Bluetooth Stack ID.    */
   if(BluetoothStackID)
 8013a84:	b368      	cbz	r0, 8013ae2 <HCI_VS_DisableFeature+0x5e>
{
 8013a86:	b530      	push	{r4, r5, lr}
 8013a88:	b083      	sub	sp, #12
 8013a8a:	460c      	mov	r4, r1
 8013a8c:	4605      	mov	r5, r0
   {
      /* Next, make sure there is a feature to disable.                 */
      if(Feature)
 8013a8e:	b911      	cbnz	r1, 8013a96 <HCI_VS_DisableFeature+0x12>
         }
         else
            ret_val = FALSE;
      }
      else
         ret_val = FALSE;
 8013a90:	2000      	movs	r0, #0
   }
   else
      ret_val = FALSE;

   return(ret_val);
}
 8013a92:	b003      	add	sp, #12
 8013a94:	bd30      	pop	{r4, r5, pc}
         if(!BSC_QueryActiveFeatures(BluetoothStackID, &FeatureMask))
 8013a96:	a901      	add	r1, sp, #4
 8013a98:	f005 fb04 	bl	80190a4 <BSC_QueryActiveFeatures>
 8013a9c:	bb18      	cbnz	r0, 8013ae6 <HCI_VS_DisableFeature+0x62>
            if((FeatureMask) && (FeatureMask != Feature))
 8013a9e:	9b01      	ldr	r3, [sp, #4]
 8013aa0:	b11b      	cbz	r3, 8013aaa <HCI_VS_DisableFeature+0x26>
 8013aa2:	42a3      	cmp	r3, r4
 8013aa4:	d001      	beq.n	8013aaa <HCI_VS_DisableFeature+0x26>
               ret_val = FALSE;
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	e7f3      	b.n	8013a92 <HCI_VS_DisableFeature+0xe>
               if(FeatureMask & Feature)
 8013aaa:	4223      	tst	r3, r4
 8013aac:	d01d      	beq.n	8013aea <HCI_VS_DisableFeature+0x66>
                  switch(Feature)
 8013aae:	1e61      	subs	r1, r4, #1
 8013ab0:	290f      	cmp	r1, #15
 8013ab2:	d81c      	bhi.n	8013aee <HCI_VS_DisableFeature+0x6a>
 8013ab4:	e8df f001 	tbb	[pc, r1]
 8013ab8:	0b1b1b08 	.word	0x0b1b1b08
 8013abc:	0b1b1b1b 	.word	0x0b1b1b1b
 8013ac0:	1b1b1b1b 	.word	0x1b1b1b1b
 8013ac4:	0b1b1b1b 	.word	0x0b1b1b1b
						Result = VS_DisableBLE(BluetoothStackID);
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f000 f8f9 	bl	8013cc0 <VS_DisableBLE>
                        Result = VS_AVPR_Enable(BluetoothStackID, FALSE, FALSE, AVRP_A3DP_SOURCE_ROLE);
 8013ace:	2300      	movs	r3, #0
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	f000 f91d 	bl	8013d14 <VS_AVPR_Enable>
                        ret_val = Result ? FALSE : TRUE;
 8013ada:	fab0 f080 	clz	r0, r0
 8013ade:	0940      	lsrs	r0, r0, #5
                        break;
 8013ae0:	e7d7      	b.n	8013a92 <HCI_VS_DisableFeature+0xe>
      ret_val = FALSE;
 8013ae2:	2000      	movs	r0, #0
}
 8013ae4:	4770      	bx	lr
            ret_val = FALSE;
 8013ae6:	2000      	movs	r0, #0
 8013ae8:	e7d3      	b.n	8013a92 <HCI_VS_DisableFeature+0xe>
                  ret_val = FALSE;
 8013aea:	2000      	movs	r0, #0
 8013aec:	e7d1      	b.n	8013a92 <HCI_VS_DisableFeature+0xe>
               if(FeatureMask & Feature)
 8013aee:	2000      	movs	r0, #0
 8013af0:	e7cf      	b.n	8013a92 <HCI_VS_DisableFeature+0xe>

08013af2 <MapSendRawResults>:
static int MapSendRawResults(int Result, Byte_t Status, Byte_t LengthResult, Byte_t *ReturnData)
{
   int ret_val;

   /* Check to see if the API returned an error.                        */
   if((!Result) && (!Status) && (LengthResult >= 1))
 8013af2:	b968      	cbnz	r0, 8013b10 <MapSendRawResults+0x1e>
{
 8013af4:	b410      	push	{r4}
 8013af6:	4604      	mov	r4, r0
   if((!Result) && (!Status) && (LengthResult >= 1))
 8013af8:	b969      	cbnz	r1, 8013b16 <MapSendRawResults+0x24>
 8013afa:	b17a      	cbz	r2, 8013b1c <MapSendRawResults+0x2a>
   {
      /* Check to see if the chip returned an error.                    */
      if(ReturnData[0] == HCI_ERROR_CODE_NO_ERROR)
 8013afc:	7818      	ldrb	r0, [r3, #0]
 8013afe:	b180      	cbz	r0, 8013b22 <MapSendRawResults+0x30>
         ret_val = 0;
      else
         ret_val = BTPS_ERROR_CODE_HCI_STATUS_BASE - ReturnData[0];
 8013b00:	f1c0 407f 	rsb	r0, r0, #4278190080	; 0xff000000
 8013b04:	f500 007f 	add.w	r0, r0, #16711680	; 0xff0000
 8013b08:	f500 407e 	add.w	r0, r0, #65024	; 0xfe00
 8013b0c:	300c      	adds	r0, #12
 8013b0e:	e009      	b.n	8013b24 <MapSendRawResults+0x32>
   }
   else
      ret_val = BTPS_ERROR_DEVICE_HCI_ERROR;
 8013b10:	f06f 0038 	mvn.w	r0, #56	; 0x38

   return(ret_val);
}
 8013b14:	4770      	bx	lr
      ret_val = BTPS_ERROR_DEVICE_HCI_ERROR;
 8013b16:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8013b1a:	e003      	b.n	8013b24 <MapSendRawResults+0x32>
 8013b1c:	f06f 0038 	mvn.w	r0, #56	; 0x38
 8013b20:	e000      	b.n	8013b24 <MapSendRawResults+0x32>
         ret_val = 0;
 8013b22:	4620      	mov	r0, r4
}
 8013b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b28:	4770      	bx	lr

08013b2a <VS_Update_UART_Baud_Rate>:
   /* the HCI Driver of the change (so the driver can communicate with  */
   /* the Bluetooth device at the new baud rate).  This function returns*/
   /* zero if successful or a negative return error code if there was   */
   /* an error.                                                         */
int BTPSAPI VS_Update_UART_Baud_Rate(unsigned int BluetoothStackID, DWord_t BaudRate)
{
 8013b2a:	b510      	push	{r4, lr}
 8013b2c:	b08e      	sub	sp, #56	; 0x38
 8013b2e:	9107      	str	r1, [sp, #28]
      HCI_Driver_Reconfigure_Data_t DriverReconfigureData;
   } Data;

   /* Before continuing, make sure the input parameters appear to be    */
   /* semi-valid.                                                       */
   if((BluetoothStackID) && (BaudRate))
 8013b30:	2800      	cmp	r0, #0
 8013b32:	d03a      	beq.n	8013baa <VS_Update_UART_Baud_Rate+0x80>
 8013b34:	4604      	mov	r4, r0
 8013b36:	2900      	cmp	r1, #0
 8013b38:	d03a      	beq.n	8013bb0 <VS_Update_UART_Baud_Rate+0x86>
   {
      /* Write the Baud Rate.                                           */
      ASSIGN_HOST_DWORD_TO_LITTLE_ENDIAN_UNALIGNED_DWORD(&_BaudRate, BaudRate);
 8013b3a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8013b3e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013b42:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8013b46:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8013b4a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 8013b4e:	0e0b      	lsrs	r3, r1, #24
 8013b50:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33

      /* Next, write the command to the device.                         */
      Length  = sizeof(Data.Buffer);
 8013b54:	2310      	movs	r3, #16
 8013b56:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
      OGF     = VS_COMMAND_OGF(VS_UPDATE_UART_HCI_BAUDRATE_COMMAND_OPCODE);
      OCF     = VS_COMMAND_OCF(VS_UPDATE_UART_HCI_BAUDRATE_COMMAND_OPCODE);

      ret_val = HCI_Send_Raw_Command(BluetoothStackID, OGF, OCF, sizeof(NonAlignedDWord_t), (Byte_t *)&_BaudRate, &Status, &Length, Data.Buffer, TRUE);
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	9304      	str	r3, [sp, #16]
 8013b5e:	ab08      	add	r3, sp, #32
 8013b60:	9303      	str	r3, [sp, #12]
 8013b62:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8013b66:	9302      	str	r3, [sp, #8]
 8013b68:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8013b6c:	9301      	str	r3, [sp, #4]
 8013b6e:	ab0c      	add	r3, sp, #48	; 0x30
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	2304      	movs	r3, #4
 8013b74:	f240 3236 	movw	r2, #822	; 0x336
 8013b78:	213f      	movs	r1, #63	; 0x3f
 8013b7a:	f00c f881 	bl	801fc80 <HCI_Send_Raw_Command>
      if((!ret_val) && (!Status))
 8013b7e:	b910      	cbnz	r0, 8013b86 <VS_Update_UART_Baud_Rate+0x5c>
 8013b80:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8013b84:	b10b      	cbz	r3, 8013b8a <VS_Update_UART_Baud_Rate+0x60>
   else
      ret_val = BTPS_ERROR_INVALID_PARAMETER;

   /* Return the result the caller.                                     */
   return(ret_val);
}
 8013b86:	b00e      	add	sp, #56	; 0x38
 8013b88:	bd10      	pop	{r4, pc}
         BTPS_MemInitialize(&(Data.DriverReconfigureData), 0, sizeof(HCI_Driver_Reconfigure_Data_t));
 8013b8a:	2208      	movs	r2, #8
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	a808      	add	r0, sp, #32
 8013b90:	f7ff fc95 	bl	80134be <BTPS_MemInitialize>
         Data.DriverReconfigureData.ReconfigureCommand = HCI_COMM_DRIVER_RECONFIGURE_DATA_COMMAND_CHANGE_PARAMETERS;
 8013b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013b98:	9308      	str	r3, [sp, #32]
         Data.DriverReconfigureData.ReconfigureData    = (unsigned long *)&BaudRate;
 8013b9a:	ab07      	add	r3, sp, #28
 8013b9c:	9309      	str	r3, [sp, #36]	; 0x24
         ret_val = HCI_Reconfigure_Driver(BluetoothStackID, FALSE, &(Data.DriverReconfigureData));
 8013b9e:	aa08      	add	r2, sp, #32
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	f00b ffca 	bl	801fb3c <HCI_Reconfigure_Driver>
 8013ba8:	e7ed      	b.n	8013b86 <VS_Update_UART_Baud_Rate+0x5c>
      ret_val = BTPS_ERROR_INVALID_PARAMETER;
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bae:	e7ea      	b.n	8013b86 <VS_Update_UART_Baud_Rate+0x5c>
 8013bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   return(ret_val);
 8013bb4:	e7e7      	b.n	8013b86 <VS_Update_UART_Baud_Rate+0x5c>
	...

08013bb8 <VS_Update_HCILL_Parameters>:
   Byte_t OGF;
   Word_t OCF;

   /* Before continuing, make sure the input parameters appear to be    */
   /* semi-valid.                                                       */
   if(BluetoothStackID)
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d03c      	beq.n	8013c36 <VS_Update_HCILL_Parameters+0x7e>
{
 8013bbc:	b530      	push	{r4, r5, lr}
 8013bbe:	b08d      	sub	sp, #52	; 0x34
 8013bc0:	4604      	mov	r4, r0
   {
      /* Format the command to send.                                    */
      ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(CommandBuffer[0]), CONVERT_TO_TWO_BASEBAND_SLOTS(InactivityTimeout));
 8013bc2:	00c9      	lsls	r1, r1, #3
 8013bc4:	3105      	adds	r1, #5
 8013bc6:	481d      	ldr	r0, [pc, #116]	; (8013c3c <VS_Update_HCILL_Parameters+0x84>)
 8013bc8:	fb80 5101 	smull	r5, r1, r0, r1
 8013bcc:	f3c1 0587 	ubfx	r5, r1, #2, #8
 8013bd0:	f88d 501c 	strb.w	r5, [sp, #28]
 8013bd4:	f3c1 2187 	ubfx	r1, r1, #10, #8
 8013bd8:	f88d 101d 	strb.w	r1, [sp, #29]
      ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(CommandBuffer[NON_ALIGNED_WORD_SIZE]), CONVERT_TO_TWO_BASEBAND_SLOTS(RetransmitTimeout));
 8013bdc:	00d2      	lsls	r2, r2, #3
 8013bde:	3205      	adds	r2, #5
 8013be0:	fb80 1202 	smull	r1, r2, r0, r2
 8013be4:	f3c2 0187 	ubfx	r1, r2, #2, #8
 8013be8:	f88d 101e 	strb.w	r1, [sp, #30]
 8013bec:	f3c2 2287 	ubfx	r2, r2, #10, #8
 8013bf0:	f88d 201f 	strb.w	r2, [sp, #31]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[NON_ALIGNED_WORD_SIZE*2]), CTSPulseWidth);
 8013bf4:	f88d 3020 	strb.w	r3, [sp, #32]

      /* Send the command to update the HCILL Parameters.               */
      Length  = sizeof(ReturnBuffer);
 8013bf8:	2308      	movs	r3, #8
 8013bfa:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      OGF     = VS_COMMAND_OGF(VS_HCILL_PARAMETERS_COMMAND_OPCODE);
      OCF     = VS_COMMAND_OCF(VS_HCILL_PARAMETERS_COMMAND_OPCODE);

      ret_val = HCI_Send_Raw_Command(BluetoothStackID, OGF, OCF, HCILL_PARAMETERS_COMMAND_SIZE, (Byte_t *)(CommandBuffer), &Status, &Length, ReturnBuffer, TRUE);
 8013bfe:	2301      	movs	r3, #1
 8013c00:	9304      	str	r3, [sp, #16]
 8013c02:	ad09      	add	r5, sp, #36	; 0x24
 8013c04:	9503      	str	r5, [sp, #12]
 8013c06:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8013c0a:	9302      	str	r3, [sp, #8]
 8013c0c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	ab07      	add	r3, sp, #28
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	2305      	movs	r3, #5
 8013c18:	f240 122b 	movw	r2, #299	; 0x12b
 8013c1c:	213f      	movs	r1, #63	; 0x3f
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f00c f82e 	bl	801fc80 <HCI_Send_Raw_Command>

      /* Map the return results into an error code.                     */
      ret_val = MapSendRawResults(ret_val, Status, Length, ReturnBuffer);
 8013c24:	462b      	mov	r3, r5
 8013c26:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8013c2a:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
 8013c2e:	f7ff ff60 	bl	8013af2 <MapSendRawResults>
   else
      ret_val = BTPS_ERROR_INVALID_PARAMETER;

   /* Return the result the caller.                                     */
   return(ret_val);
}
 8013c32:	b00d      	add	sp, #52	; 0x34
 8013c34:	bd30      	pop	{r4, r5, pc}
      ret_val = BTPS_ERROR_INVALID_PARAMETER;
 8013c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8013c3a:	4770      	bx	lr
 8013c3c:	66666667 	.word	0x66666667

08013c40 <VS_Enable_Sleep_Mode>:
   Byte_t OGF;
   Word_t OCF;

   /* Before continuing, make sure the input parameters appear to be    */
   /* semi-valid.                                                       */
   if(BluetoothStackID)
 8013c40:	2800      	cmp	r0, #0
 8013c42:	d039      	beq.n	8013cb8 <VS_Enable_Sleep_Mode+0x78>
{
 8013c44:	b530      	push	{r4, r5, lr}
 8013c46:	b08d      	sub	sp, #52	; 0x34
 8013c48:	4605      	mov	r5, r0
   {
      /* Format the command to send.                                    */
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[0]), 1);
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	f88d 3018 	strb.w	r3, [sp, #24]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[1]), ((Enable == TRUE)?1:0));
 8013c50:	4299      	cmp	r1, r3
 8013c52:	d000      	beq.n	8013c56 <VS_Enable_Sleep_Mode+0x16>
 8013c54:	2100      	movs	r1, #0
 8013c56:	f88d 1019 	strb.w	r1, [sp, #25]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[2]), 0);
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f88d 201a 	strb.w	r2, [sp, #26]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[3]), 0xFF);
 8013c60:	23ff      	movs	r3, #255	; 0xff
 8013c62:	f88d 301b 	strb.w	r3, [sp, #27]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[4]), 0xFF);
 8013c66:	f88d 301c 	strb.w	r3, [sp, #28]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[5]), 0xFF);
 8013c6a:	f88d 301d 	strb.w	r3, [sp, #29]
      ASSIGN_HOST_BYTE_TO_LITTLE_ENDIAN_UNALIGNED_BYTE(&(CommandBuffer[6]), 0xFF);
 8013c6e:	f88d 301e 	strb.w	r3, [sp, #30]
      ASSIGN_HOST_WORD_TO_LITTLE_ENDIAN_UNALIGNED_WORD(&(CommandBuffer[7]), 0x0000);
 8013c72:	f88d 201f 	strb.w	r2, [sp, #31]
 8013c76:	f88d 2020 	strb.w	r2, [sp, #32]

      /* Send the command to set the sleep mode configuration.          */
      Length  = sizeof(ReturnBuffer);
 8013c7a:	2308      	movs	r3, #8
 8013c7c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
      OGF     = VS_COMMAND_OGF(VS_SLEEP_MODE_CONFIGURATIONS_COMMAND_OPCODE);
      OCF     = VS_COMMAND_OCF(VS_SLEEP_MODE_CONFIGURATIONS_COMMAND_OPCODE);

      ret_val = HCI_Send_Raw_Command(BluetoothStackID, OGF, OCF, SLEEP_MODE_CONFIGURATIONS_COMMAND_SIZE, (Byte_t *)(CommandBuffer), &Status, &Length, ReturnBuffer, TRUE);
 8013c80:	2301      	movs	r3, #1
 8013c82:	9304      	str	r3, [sp, #16]
 8013c84:	ac09      	add	r4, sp, #36	; 0x24
 8013c86:	9403      	str	r4, [sp, #12]
 8013c88:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8013c8c:	9302      	str	r3, [sp, #8]
 8013c8e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8013c92:	9301      	str	r3, [sp, #4]
 8013c94:	ab06      	add	r3, sp, #24
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	2309      	movs	r3, #9
 8013c9a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8013c9e:	213f      	movs	r1, #63	; 0x3f
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	f00b ffed 	bl	801fc80 <HCI_Send_Raw_Command>

      /* Map the return results into an error code.                     */
      ret_val = MapSendRawResults(ret_val, Status, Length, ReturnBuffer);
 8013ca6:	4623      	mov	r3, r4
 8013ca8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8013cac:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
 8013cb0:	f7ff ff1f 	bl	8013af2 <MapSendRawResults>
   else
      ret_val = BTPS_ERROR_INVALID_PARAMETER;

   /* Return the result the caller.                                     */
   return(ret_val);
}
 8013cb4:	b00d      	add	sp, #52	; 0x34
 8013cb6:	bd30      	pop	{r4, r5, pc}
      ret_val = BTPS_ERROR_INVALID_PARAMETER;
 8013cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8013cbc:	4770      	bx	lr
	...

08013cc0 <VS_DisableBLE>:
   /* 0x01, 0x5B, 0xFD, 0x02, 0x00, 0x00  								*/
int BTPSAPI VS_DisableBLE(unsigned int BluetoothStackID)
{
   int	Result;
   /* Verify that the BluetoothStackID passed in appear valid.      */
   if(BluetoothStackID)
 8013cc0:	b310      	cbz	r0, 8013d08 <VS_DisableBLE+0x48>
{
 8013cc2:	b510      	push	{r4, lr}
 8013cc4:	b090      	sub	sp, #64	; 0x40
	  
   	  OCF       = (Word_t)TEXAS_INSTRUMENTS_VENDOR_SPECIFIC_OCF_BLE_ENABLE;
      Length    = sizeof(TEXAS_INSTRUMENTS_VENDOR_SPECIFIC_BLE_DISABLE_DATA) - 1;
   	  Data 		= (Byte_t *)TEXAS_INSTRUMENTS_VENDOR_SPECIFIC_BLE_DISABLE_DATA;
     
      ReturnLength = sizeof(Buffer);
 8013cc6:	2320      	movs	r3, #32
 8013cc8:	f88d 301f 	strb.w	r3, [sp, #31]
      Result       = HCI_Send_Raw_Command(BluetoothStackID, HCI_COMMAND_CODE_VENDOR_SPECIFIC_DEBUG_OGF,
 8013ccc:	2300      	movs	r3, #0
 8013cce:	9304      	str	r3, [sp, #16]
 8013cd0:	ab08      	add	r3, sp, #32
 8013cd2:	9303      	str	r3, [sp, #12]
 8013cd4:	f10d 031f 	add.w	r3, sp, #31
 8013cd8:	9302      	str	r3, [sp, #8]
 8013cda:	f10d 031e 	add.w	r3, sp, #30
 8013cde:	9301      	str	r3, [sp, #4]
 8013ce0:	4b0b      	ldr	r3, [pc, #44]	; (8013d10 <VS_DisableBLE+0x50>)
 8013ce2:	9300      	str	r3, [sp, #0]
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	f240 125b 	movw	r2, #347	; 0x15b
 8013cea:	213f      	movs	r1, #63	; 0x3f
 8013cec:	f00b ffc8 	bl	801fc80 <HCI_Send_Raw_Command>
	  					OCF, Length, (Byte_t *)Data, &Status, &ReturnLength, Buffer, 0);

      /* If the function was not successful, then we  */
      /* need to flag an error.                       */
      if((Result < 0) || (Status != 0))
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	db05      	blt.n	8013d00 <VS_DisableBLE+0x40>
 8013cf4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013cf8:	b123      	cbz	r3, 8013d04 <VS_DisableBLE+0x44>
      	Result = BTPS_ERROR_VS_HCI_ERROR;
 8013cfa:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8013cfe:	e001      	b.n	8013d04 <VS_DisableBLE+0x44>
 8013d00:	f06f 0064 	mvn.w	r0, #100	; 0x64
   else
      Result = BTPS_ERROR_INVALID_PARAMETER;

   /* Return the result the caller.                                     */
   return(Result);
}
 8013d04:	b010      	add	sp, #64	; 0x40
 8013d06:	bd10      	pop	{r4, pc}
      Result = BTPS_ERROR_INVALID_PARAMETER;
 8013d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	0802add8 	.word	0x0802add8

08013d14 <VS_AVPR_Enable>:
   Byte_t Length;
   Byte_t Status;
   Byte_t ReturnBuffer[1];

   /* Verify that the parameters that were passed in appear valid.      */
   if(BluetoothStackID)
 8013d14:	b390      	cbz	r0, 8013d7c <VS_AVPR_Enable+0x68>
{
 8013d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d18:	b08b      	sub	sp, #44	; 0x2c
 8013d1a:	460d      	mov	r5, r1
 8013d1c:	4614      	mov	r4, r2
 8013d1e:	461e      	mov	r6, r3
 8013d20:	4607      	mov	r7, r0
   {
      /* Initialize the command buffer.                                 */
      BTPS_MemInitialize(CommandBuffer, 0, sizeof(CommandBuffer));
 8013d22:	2205      	movs	r2, #5
 8013d24:	2100      	movs	r1, #0
 8013d26:	a808      	add	r0, sp, #32
 8013d28:	f7ff fbc9 	bl	80134be <BTPS_MemInitialize>

      /* Determine whether we should enable or disable AVPR.            */
      CommandBuffer[0] = (Byte_t)((AVPREnable)?1:0);
 8013d2c:	b105      	cbz	r5, 8013d30 <VS_AVPR_Enable+0x1c>
 8013d2e:	2501      	movs	r5, #1
 8013d30:	f88d 5020 	strb.w	r5, [sp, #32]
      CommandBuffer[1] = A3DPRole;
 8013d34:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
      CommandBuffer[2] = (Byte_t)((LoadCode)?1:0);
 8013d38:	b104      	cbz	r4, 8013d3c <VS_AVPR_Enable+0x28>
 8013d3a:	2401      	movs	r4, #1
 8013d3c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22

      CommandLength    = sizeof(CommandBuffer);
      Length           = sizeof(ReturnBuffer);
 8013d40:	2301      	movs	r3, #1
 8013d42:	f88d 301f 	strb.w	r3, [sp, #31]
      OGF              = VS_COMMAND_OGF(VS_AVPR_ENABLE_COMMAND_OPCODE);
      OCF              = VS_COMMAND_OCF(VS_AVPR_ENABLE_COMMAND_OPCODE);

      ret_val          = HCI_Send_Raw_Command(BluetoothStackID, OGF, OCF, CommandLength, CommandBuffer, &Status, &Length, ReturnBuffer, TRUE);
 8013d46:	9304      	str	r3, [sp, #16]
 8013d48:	ac07      	add	r4, sp, #28
 8013d4a:	9403      	str	r4, [sp, #12]
 8013d4c:	f10d 031f 	add.w	r3, sp, #31
 8013d50:	9302      	str	r3, [sp, #8]
 8013d52:	f10d 031e 	add.w	r3, sp, #30
 8013d56:	9301      	str	r3, [sp, #4]
 8013d58:	ab08      	add	r3, sp, #32
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	2305      	movs	r3, #5
 8013d5e:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8013d62:	213f      	movs	r1, #63	; 0x3f
 8013d64:	4638      	mov	r0, r7
 8013d66:	f00b ff8b 	bl	801fc80 <HCI_Send_Raw_Command>

      /* Map the Send Raw return results.                               */
      ret_val = MapSendRawResults(ret_val, Status, Length, ReturnBuffer);
 8013d6a:	4623      	mov	r3, r4
 8013d6c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013d70:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8013d74:	f7ff febd 	bl	8013af2 <MapSendRawResults>
   else
      ret_val = BTPS_ERROR_INVALID_PARAMETER;

   /* Return the result the caller.                                     */
   return(ret_val);
}
 8013d78:	b00b      	add	sp, #44	; 0x2c
 8013d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret_val = BTPS_ERROR_INVALID_PARAMETER;
 8013d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8013d80:	4770      	bx	lr

08013d82 <__aeabi_memcpy>:
 8013d82:	f000 bab1 	b.w	80142e8 <memcpy>
	...

08013d88 <calloc>:
 8013d88:	4b02      	ldr	r3, [pc, #8]	; (8013d94 <calloc+0xc>)
 8013d8a:	460a      	mov	r2, r1
 8013d8c:	4601      	mov	r1, r0
 8013d8e:	6818      	ldr	r0, [r3, #0]
 8013d90:	f000 b802 	b.w	8013d98 <_calloc_r>
 8013d94:	200000b0 	.word	0x200000b0

08013d98 <_calloc_r>:
 8013d98:	b510      	push	{r4, lr}
 8013d9a:	4351      	muls	r1, r2
 8013d9c:	f000 f854 	bl	8013e48 <_malloc_r>
 8013da0:	4604      	mov	r4, r0
 8013da2:	b198      	cbz	r0, 8013dcc <_calloc_r+0x34>
 8013da4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013da8:	f022 0203 	bic.w	r2, r2, #3
 8013dac:	3a04      	subs	r2, #4
 8013dae:	2a24      	cmp	r2, #36	; 0x24
 8013db0:	d81b      	bhi.n	8013dea <_calloc_r+0x52>
 8013db2:	2a13      	cmp	r2, #19
 8013db4:	d917      	bls.n	8013de6 <_calloc_r+0x4e>
 8013db6:	2100      	movs	r1, #0
 8013db8:	2a1b      	cmp	r2, #27
 8013dba:	e9c0 1100 	strd	r1, r1, [r0]
 8013dbe:	d807      	bhi.n	8013dd0 <_calloc_r+0x38>
 8013dc0:	f100 0308 	add.w	r3, r0, #8
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	e9c3 2200 	strd	r2, r2, [r3]
 8013dca:	609a      	str	r2, [r3, #8]
 8013dcc:	4620      	mov	r0, r4
 8013dce:	bd10      	pop	{r4, pc}
 8013dd0:	2a24      	cmp	r2, #36	; 0x24
 8013dd2:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8013dd6:	bf11      	iteee	ne
 8013dd8:	f100 0310 	addne.w	r3, r0, #16
 8013ddc:	6101      	streq	r1, [r0, #16]
 8013dde:	f100 0318 	addeq.w	r3, r0, #24
 8013de2:	6141      	streq	r1, [r0, #20]
 8013de4:	e7ee      	b.n	8013dc4 <_calloc_r+0x2c>
 8013de6:	4603      	mov	r3, r0
 8013de8:	e7ec      	b.n	8013dc4 <_calloc_r+0x2c>
 8013dea:	2100      	movs	r1, #0
 8013dec:	f000 faa4 	bl	8014338 <memset>
 8013df0:	e7ec      	b.n	8013dcc <_calloc_r+0x34>
	...

08013df4 <__errno>:
 8013df4:	4b01      	ldr	r3, [pc, #4]	; (8013dfc <__errno+0x8>)
 8013df6:	6818      	ldr	r0, [r3, #0]
 8013df8:	4770      	bx	lr
 8013dfa:	bf00      	nop
 8013dfc:	200000b0 	.word	0x200000b0

08013e00 <__libc_init_array>:
 8013e00:	b570      	push	{r4, r5, r6, lr}
 8013e02:	4d0d      	ldr	r5, [pc, #52]	; (8013e38 <__libc_init_array+0x38>)
 8013e04:	4c0d      	ldr	r4, [pc, #52]	; (8013e3c <__libc_init_array+0x3c>)
 8013e06:	1b64      	subs	r4, r4, r5
 8013e08:	10a4      	asrs	r4, r4, #2
 8013e0a:	2600      	movs	r6, #0
 8013e0c:	42a6      	cmp	r6, r4
 8013e0e:	d109      	bne.n	8013e24 <__libc_init_array+0x24>
 8013e10:	4d0b      	ldr	r5, [pc, #44]	; (8013e40 <__libc_init_array+0x40>)
 8013e12:	4c0c      	ldr	r4, [pc, #48]	; (8013e44 <__libc_init_array+0x44>)
 8013e14:	f004 fd86 	bl	8018924 <_init>
 8013e18:	1b64      	subs	r4, r4, r5
 8013e1a:	10a4      	asrs	r4, r4, #2
 8013e1c:	2600      	movs	r6, #0
 8013e1e:	42a6      	cmp	r6, r4
 8013e20:	d105      	bne.n	8013e2e <__libc_init_array+0x2e>
 8013e22:	bd70      	pop	{r4, r5, r6, pc}
 8013e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e28:	4798      	blx	r3
 8013e2a:	3601      	adds	r6, #1
 8013e2c:	e7ee      	b.n	8013e0c <__libc_init_array+0xc>
 8013e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e32:	4798      	blx	r3
 8013e34:	3601      	adds	r6, #1
 8013e36:	e7f2      	b.n	8013e1e <__libc_init_array+0x1e>
 8013e38:	08039834 	.word	0x08039834
 8013e3c:	08039834 	.word	0x08039834
 8013e40:	08039834 	.word	0x08039834
 8013e44:	0803983c 	.word	0x0803983c

08013e48 <_malloc_r>:
 8013e48:	f101 030b 	add.w	r3, r1, #11
 8013e4c:	2b16      	cmp	r3, #22
 8013e4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e52:	4605      	mov	r5, r0
 8013e54:	d906      	bls.n	8013e64 <_malloc_r+0x1c>
 8013e56:	f033 0707 	bics.w	r7, r3, #7
 8013e5a:	d504      	bpl.n	8013e66 <_malloc_r+0x1e>
 8013e5c:	230c      	movs	r3, #12
 8013e5e:	602b      	str	r3, [r5, #0]
 8013e60:	2400      	movs	r4, #0
 8013e62:	e1ae      	b.n	80141c2 <_malloc_r+0x37a>
 8013e64:	2710      	movs	r7, #16
 8013e66:	42b9      	cmp	r1, r7
 8013e68:	d8f8      	bhi.n	8013e5c <_malloc_r+0x14>
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	f000 fa6c 	bl	8014348 <__malloc_lock>
 8013e70:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8013e74:	4ec3      	ldr	r6, [pc, #780]	; (8014184 <_malloc_r+0x33c>)
 8013e76:	d238      	bcs.n	8013eea <_malloc_r+0xa2>
 8013e78:	f107 0208 	add.w	r2, r7, #8
 8013e7c:	4432      	add	r2, r6
 8013e7e:	f1a2 0108 	sub.w	r1, r2, #8
 8013e82:	6854      	ldr	r4, [r2, #4]
 8013e84:	428c      	cmp	r4, r1
 8013e86:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8013e8a:	d102      	bne.n	8013e92 <_malloc_r+0x4a>
 8013e8c:	68d4      	ldr	r4, [r2, #12]
 8013e8e:	42a2      	cmp	r2, r4
 8013e90:	d010      	beq.n	8013eb4 <_malloc_r+0x6c>
 8013e92:	6863      	ldr	r3, [r4, #4]
 8013e94:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8013e98:	f023 0303 	bic.w	r3, r3, #3
 8013e9c:	60ca      	str	r2, [r1, #12]
 8013e9e:	4423      	add	r3, r4
 8013ea0:	6091      	str	r1, [r2, #8]
 8013ea2:	685a      	ldr	r2, [r3, #4]
 8013ea4:	f042 0201 	orr.w	r2, r2, #1
 8013ea8:	605a      	str	r2, [r3, #4]
 8013eaa:	4628      	mov	r0, r5
 8013eac:	f000 fa52 	bl	8014354 <__malloc_unlock>
 8013eb0:	3408      	adds	r4, #8
 8013eb2:	e186      	b.n	80141c2 <_malloc_r+0x37a>
 8013eb4:	3302      	adds	r3, #2
 8013eb6:	4ab4      	ldr	r2, [pc, #720]	; (8014188 <_malloc_r+0x340>)
 8013eb8:	6934      	ldr	r4, [r6, #16]
 8013eba:	4294      	cmp	r4, r2
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	d077      	beq.n	8013fb0 <_malloc_r+0x168>
 8013ec0:	6860      	ldr	r0, [r4, #4]
 8013ec2:	f020 0c03 	bic.w	ip, r0, #3
 8013ec6:	ebac 0007 	sub.w	r0, ip, r7
 8013eca:	280f      	cmp	r0, #15
 8013ecc:	dd48      	ble.n	8013f60 <_malloc_r+0x118>
 8013ece:	19e1      	adds	r1, r4, r7
 8013ed0:	f040 0301 	orr.w	r3, r0, #1
 8013ed4:	f047 0701 	orr.w	r7, r7, #1
 8013ed8:	6067      	str	r7, [r4, #4]
 8013eda:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8013ede:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8013ee2:	604b      	str	r3, [r1, #4]
 8013ee4:	f844 000c 	str.w	r0, [r4, ip]
 8013ee8:	e7df      	b.n	8013eaa <_malloc_r+0x62>
 8013eea:	0a7b      	lsrs	r3, r7, #9
 8013eec:	d02a      	beq.n	8013f44 <_malloc_r+0xfc>
 8013eee:	2b04      	cmp	r3, #4
 8013ef0:	d812      	bhi.n	8013f18 <_malloc_r+0xd0>
 8013ef2:	09bb      	lsrs	r3, r7, #6
 8013ef4:	3338      	adds	r3, #56	; 0x38
 8013ef6:	1c5a      	adds	r2, r3, #1
 8013ef8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8013efc:	f1a2 0c08 	sub.w	ip, r2, #8
 8013f00:	6854      	ldr	r4, [r2, #4]
 8013f02:	4564      	cmp	r4, ip
 8013f04:	d006      	beq.n	8013f14 <_malloc_r+0xcc>
 8013f06:	6862      	ldr	r2, [r4, #4]
 8013f08:	f022 0203 	bic.w	r2, r2, #3
 8013f0c:	1bd0      	subs	r0, r2, r7
 8013f0e:	280f      	cmp	r0, #15
 8013f10:	dd1c      	ble.n	8013f4c <_malloc_r+0x104>
 8013f12:	3b01      	subs	r3, #1
 8013f14:	3301      	adds	r3, #1
 8013f16:	e7ce      	b.n	8013eb6 <_malloc_r+0x6e>
 8013f18:	2b14      	cmp	r3, #20
 8013f1a:	d801      	bhi.n	8013f20 <_malloc_r+0xd8>
 8013f1c:	335b      	adds	r3, #91	; 0x5b
 8013f1e:	e7ea      	b.n	8013ef6 <_malloc_r+0xae>
 8013f20:	2b54      	cmp	r3, #84	; 0x54
 8013f22:	d802      	bhi.n	8013f2a <_malloc_r+0xe2>
 8013f24:	0b3b      	lsrs	r3, r7, #12
 8013f26:	336e      	adds	r3, #110	; 0x6e
 8013f28:	e7e5      	b.n	8013ef6 <_malloc_r+0xae>
 8013f2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8013f2e:	d802      	bhi.n	8013f36 <_malloc_r+0xee>
 8013f30:	0bfb      	lsrs	r3, r7, #15
 8013f32:	3377      	adds	r3, #119	; 0x77
 8013f34:	e7df      	b.n	8013ef6 <_malloc_r+0xae>
 8013f36:	f240 5254 	movw	r2, #1364	; 0x554
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d804      	bhi.n	8013f48 <_malloc_r+0x100>
 8013f3e:	0cbb      	lsrs	r3, r7, #18
 8013f40:	337c      	adds	r3, #124	; 0x7c
 8013f42:	e7d8      	b.n	8013ef6 <_malloc_r+0xae>
 8013f44:	233f      	movs	r3, #63	; 0x3f
 8013f46:	e7d6      	b.n	8013ef6 <_malloc_r+0xae>
 8013f48:	237e      	movs	r3, #126	; 0x7e
 8013f4a:	e7d4      	b.n	8013ef6 <_malloc_r+0xae>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	68e1      	ldr	r1, [r4, #12]
 8013f50:	db04      	blt.n	8013f5c <_malloc_r+0x114>
 8013f52:	68a3      	ldr	r3, [r4, #8]
 8013f54:	60d9      	str	r1, [r3, #12]
 8013f56:	608b      	str	r3, [r1, #8]
 8013f58:	18a3      	adds	r3, r4, r2
 8013f5a:	e7a2      	b.n	8013ea2 <_malloc_r+0x5a>
 8013f5c:	460c      	mov	r4, r1
 8013f5e:	e7d0      	b.n	8013f02 <_malloc_r+0xba>
 8013f60:	2800      	cmp	r0, #0
 8013f62:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8013f66:	db07      	blt.n	8013f78 <_malloc_r+0x130>
 8013f68:	44a4      	add	ip, r4
 8013f6a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8013f6e:	f043 0301 	orr.w	r3, r3, #1
 8013f72:	f8cc 3004 	str.w	r3, [ip, #4]
 8013f76:	e798      	b.n	8013eaa <_malloc_r+0x62>
 8013f78:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8013f7c:	6870      	ldr	r0, [r6, #4]
 8013f7e:	f080 809e 	bcs.w	80140be <_malloc_r+0x276>
 8013f82:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8013f86:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8013f8a:	f04f 0c01 	mov.w	ip, #1
 8013f8e:	3201      	adds	r2, #1
 8013f90:	fa0c fc0e 	lsl.w	ip, ip, lr
 8013f94:	ea4c 0000 	orr.w	r0, ip, r0
 8013f98:	6070      	str	r0, [r6, #4]
 8013f9a:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8013f9e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8013fa2:	3808      	subs	r0, #8
 8013fa4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8013fa8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8013fac:	f8cc 400c 	str.w	r4, [ip, #12]
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	109a      	asrs	r2, r3, #2
 8013fb4:	fa00 f202 	lsl.w	r2, r0, r2
 8013fb8:	6870      	ldr	r0, [r6, #4]
 8013fba:	4290      	cmp	r0, r2
 8013fbc:	d326      	bcc.n	801400c <_malloc_r+0x1c4>
 8013fbe:	4210      	tst	r0, r2
 8013fc0:	d106      	bne.n	8013fd0 <_malloc_r+0x188>
 8013fc2:	f023 0303 	bic.w	r3, r3, #3
 8013fc6:	0052      	lsls	r2, r2, #1
 8013fc8:	4210      	tst	r0, r2
 8013fca:	f103 0304 	add.w	r3, r3, #4
 8013fce:	d0fa      	beq.n	8013fc6 <_malloc_r+0x17e>
 8013fd0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8013fd4:	46c1      	mov	r9, r8
 8013fd6:	469e      	mov	lr, r3
 8013fd8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8013fdc:	454c      	cmp	r4, r9
 8013fde:	f040 80b3 	bne.w	8014148 <_malloc_r+0x300>
 8013fe2:	f10e 0e01 	add.w	lr, lr, #1
 8013fe6:	f01e 0f03 	tst.w	lr, #3
 8013fea:	f109 0908 	add.w	r9, r9, #8
 8013fee:	d1f3      	bne.n	8013fd8 <_malloc_r+0x190>
 8013ff0:	0798      	lsls	r0, r3, #30
 8013ff2:	f040 80ec 	bne.w	80141ce <_malloc_r+0x386>
 8013ff6:	6873      	ldr	r3, [r6, #4]
 8013ff8:	ea23 0302 	bic.w	r3, r3, r2
 8013ffc:	6073      	str	r3, [r6, #4]
 8013ffe:	6870      	ldr	r0, [r6, #4]
 8014000:	0052      	lsls	r2, r2, #1
 8014002:	4290      	cmp	r0, r2
 8014004:	d302      	bcc.n	801400c <_malloc_r+0x1c4>
 8014006:	2a00      	cmp	r2, #0
 8014008:	f040 80ee 	bne.w	80141e8 <_malloc_r+0x3a0>
 801400c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8014010:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014014:	f021 0903 	bic.w	r9, r1, #3
 8014018:	45b9      	cmp	r9, r7
 801401a:	d304      	bcc.n	8014026 <_malloc_r+0x1de>
 801401c:	eba9 0207 	sub.w	r2, r9, r7
 8014020:	2a0f      	cmp	r2, #15
 8014022:	f300 8149 	bgt.w	80142b8 <_malloc_r+0x470>
 8014026:	4a59      	ldr	r2, [pc, #356]	; (801418c <_malloc_r+0x344>)
 8014028:	6811      	ldr	r1, [r2, #0]
 801402a:	3110      	adds	r1, #16
 801402c:	eb0b 0309 	add.w	r3, fp, r9
 8014030:	4439      	add	r1, r7
 8014032:	2008      	movs	r0, #8
 8014034:	9301      	str	r3, [sp, #4]
 8014036:	9100      	str	r1, [sp, #0]
 8014038:	f000 f9f4 	bl	8014424 <sysconf>
 801403c:	4a54      	ldr	r2, [pc, #336]	; (8014190 <_malloc_r+0x348>)
 801403e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8014042:	4680      	mov	r8, r0
 8014044:	6810      	ldr	r0, [r2, #0]
 8014046:	3001      	adds	r0, #1
 8014048:	bf1f      	itttt	ne
 801404a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 801404e:	4441      	addne	r1, r8
 8014050:	f1c8 0000 	rsbne	r0, r8, #0
 8014054:	4001      	andne	r1, r0
 8014056:	4628      	mov	r0, r5
 8014058:	e9cd 1300 	strd	r1, r3, [sp]
 801405c:	f000 f9d2 	bl	8014404 <_sbrk_r>
 8014060:	1c42      	adds	r2, r0, #1
 8014062:	4604      	mov	r4, r0
 8014064:	f000 80fc 	beq.w	8014260 <_malloc_r+0x418>
 8014068:	9b01      	ldr	r3, [sp, #4]
 801406a:	9900      	ldr	r1, [sp, #0]
 801406c:	4a48      	ldr	r2, [pc, #288]	; (8014190 <_malloc_r+0x348>)
 801406e:	4283      	cmp	r3, r0
 8014070:	d902      	bls.n	8014078 <_malloc_r+0x230>
 8014072:	45b3      	cmp	fp, r6
 8014074:	f040 80f4 	bne.w	8014260 <_malloc_r+0x418>
 8014078:	f8df a120 	ldr.w	sl, [pc, #288]	; 801419c <_malloc_r+0x354>
 801407c:	f8da 0000 	ldr.w	r0, [sl]
 8014080:	42a3      	cmp	r3, r4
 8014082:	eb00 0e01 	add.w	lr, r0, r1
 8014086:	f8ca e000 	str.w	lr, [sl]
 801408a:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 801408e:	f040 80ad 	bne.w	80141ec <_malloc_r+0x3a4>
 8014092:	ea13 0f0c 	tst.w	r3, ip
 8014096:	f040 80a9 	bne.w	80141ec <_malloc_r+0x3a4>
 801409a:	68b3      	ldr	r3, [r6, #8]
 801409c:	4449      	add	r1, r9
 801409e:	f041 0101 	orr.w	r1, r1, #1
 80140a2:	6059      	str	r1, [r3, #4]
 80140a4:	4a3b      	ldr	r2, [pc, #236]	; (8014194 <_malloc_r+0x34c>)
 80140a6:	f8da 3000 	ldr.w	r3, [sl]
 80140aa:	6811      	ldr	r1, [r2, #0]
 80140ac:	428b      	cmp	r3, r1
 80140ae:	bf88      	it	hi
 80140b0:	6013      	strhi	r3, [r2, #0]
 80140b2:	4a39      	ldr	r2, [pc, #228]	; (8014198 <_malloc_r+0x350>)
 80140b4:	6811      	ldr	r1, [r2, #0]
 80140b6:	428b      	cmp	r3, r1
 80140b8:	bf88      	it	hi
 80140ba:	6013      	strhi	r3, [r2, #0]
 80140bc:	e0d0      	b.n	8014260 <_malloc_r+0x418>
 80140be:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80140c2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80140c6:	d218      	bcs.n	80140fa <_malloc_r+0x2b2>
 80140c8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80140cc:	3238      	adds	r2, #56	; 0x38
 80140ce:	f102 0e01 	add.w	lr, r2, #1
 80140d2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80140d6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80140da:	45f0      	cmp	r8, lr
 80140dc:	d12b      	bne.n	8014136 <_malloc_r+0x2ee>
 80140de:	1092      	asrs	r2, r2, #2
 80140e0:	f04f 0c01 	mov.w	ip, #1
 80140e4:	fa0c f202 	lsl.w	r2, ip, r2
 80140e8:	4310      	orrs	r0, r2
 80140ea:	6070      	str	r0, [r6, #4]
 80140ec:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80140f0:	f8c8 4008 	str.w	r4, [r8, #8]
 80140f4:	f8ce 400c 	str.w	r4, [lr, #12]
 80140f8:	e75a      	b.n	8013fb0 <_malloc_r+0x168>
 80140fa:	2a14      	cmp	r2, #20
 80140fc:	d801      	bhi.n	8014102 <_malloc_r+0x2ba>
 80140fe:	325b      	adds	r2, #91	; 0x5b
 8014100:	e7e5      	b.n	80140ce <_malloc_r+0x286>
 8014102:	2a54      	cmp	r2, #84	; 0x54
 8014104:	d803      	bhi.n	801410e <_malloc_r+0x2c6>
 8014106:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801410a:	326e      	adds	r2, #110	; 0x6e
 801410c:	e7df      	b.n	80140ce <_malloc_r+0x286>
 801410e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014112:	d803      	bhi.n	801411c <_malloc_r+0x2d4>
 8014114:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8014118:	3277      	adds	r2, #119	; 0x77
 801411a:	e7d8      	b.n	80140ce <_malloc_r+0x286>
 801411c:	f240 5e54 	movw	lr, #1364	; 0x554
 8014120:	4572      	cmp	r2, lr
 8014122:	bf9a      	itte	ls
 8014124:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8014128:	327c      	addls	r2, #124	; 0x7c
 801412a:	227e      	movhi	r2, #126	; 0x7e
 801412c:	e7cf      	b.n	80140ce <_malloc_r+0x286>
 801412e:	f8de e008 	ldr.w	lr, [lr, #8]
 8014132:	45f0      	cmp	r8, lr
 8014134:	d005      	beq.n	8014142 <_malloc_r+0x2fa>
 8014136:	f8de 2004 	ldr.w	r2, [lr, #4]
 801413a:	f022 0203 	bic.w	r2, r2, #3
 801413e:	4562      	cmp	r2, ip
 8014140:	d8f5      	bhi.n	801412e <_malloc_r+0x2e6>
 8014142:	f8de 800c 	ldr.w	r8, [lr, #12]
 8014146:	e7d1      	b.n	80140ec <_malloc_r+0x2a4>
 8014148:	6860      	ldr	r0, [r4, #4]
 801414a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801414e:	f020 0003 	bic.w	r0, r0, #3
 8014152:	eba0 0a07 	sub.w	sl, r0, r7
 8014156:	f1ba 0f0f 	cmp.w	sl, #15
 801415a:	dd21      	ble.n	80141a0 <_malloc_r+0x358>
 801415c:	68a3      	ldr	r3, [r4, #8]
 801415e:	19e2      	adds	r2, r4, r7
 8014160:	f047 0701 	orr.w	r7, r7, #1
 8014164:	6067      	str	r7, [r4, #4]
 8014166:	f8c3 c00c 	str.w	ip, [r3, #12]
 801416a:	f8cc 3008 	str.w	r3, [ip, #8]
 801416e:	f04a 0301 	orr.w	r3, sl, #1
 8014172:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8014176:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801417a:	6053      	str	r3, [r2, #4]
 801417c:	f844 a000 	str.w	sl, [r4, r0]
 8014180:	e693      	b.n	8013eaa <_malloc_r+0x62>
 8014182:	bf00      	nop
 8014184:	200004e0 	.word	0x200004e0
 8014188:	200004e8 	.word	0x200004e8
 801418c:	20017a5c 	.word	0x20017a5c
 8014190:	200008e8 	.word	0x200008e8
 8014194:	20017a54 	.word	0x20017a54
 8014198:	20017a58 	.word	0x20017a58
 801419c:	20017a2c 	.word	0x20017a2c
 80141a0:	f1ba 0f00 	cmp.w	sl, #0
 80141a4:	db11      	blt.n	80141ca <_malloc_r+0x382>
 80141a6:	4420      	add	r0, r4
 80141a8:	6843      	ldr	r3, [r0, #4]
 80141aa:	f043 0301 	orr.w	r3, r3, #1
 80141ae:	6043      	str	r3, [r0, #4]
 80141b0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80141b4:	4628      	mov	r0, r5
 80141b6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80141ba:	f8cc 3008 	str.w	r3, [ip, #8]
 80141be:	f000 f8c9 	bl	8014354 <__malloc_unlock>
 80141c2:	4620      	mov	r0, r4
 80141c4:	b003      	add	sp, #12
 80141c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ca:	4664      	mov	r4, ip
 80141cc:	e706      	b.n	8013fdc <_malloc_r+0x194>
 80141ce:	f858 0908 	ldr.w	r0, [r8], #-8
 80141d2:	4540      	cmp	r0, r8
 80141d4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80141d8:	f43f af0a 	beq.w	8013ff0 <_malloc_r+0x1a8>
 80141dc:	e70f      	b.n	8013ffe <_malloc_r+0x1b6>
 80141de:	3304      	adds	r3, #4
 80141e0:	0052      	lsls	r2, r2, #1
 80141e2:	4210      	tst	r0, r2
 80141e4:	d0fb      	beq.n	80141de <_malloc_r+0x396>
 80141e6:	e6f3      	b.n	8013fd0 <_malloc_r+0x188>
 80141e8:	4673      	mov	r3, lr
 80141ea:	e7fa      	b.n	80141e2 <_malloc_r+0x39a>
 80141ec:	6810      	ldr	r0, [r2, #0]
 80141ee:	3001      	adds	r0, #1
 80141f0:	bf1b      	ittet	ne
 80141f2:	1ae3      	subne	r3, r4, r3
 80141f4:	4473      	addne	r3, lr
 80141f6:	6014      	streq	r4, [r2, #0]
 80141f8:	f8ca 3000 	strne.w	r3, [sl]
 80141fc:	f014 0307 	ands.w	r3, r4, #7
 8014200:	bf1a      	itte	ne
 8014202:	f1c3 0008 	rsbne	r0, r3, #8
 8014206:	1824      	addne	r4, r4, r0
 8014208:	4618      	moveq	r0, r3
 801420a:	1862      	adds	r2, r4, r1
 801420c:	ea02 010c 	and.w	r1, r2, ip
 8014210:	4480      	add	r8, r0
 8014212:	eba8 0801 	sub.w	r8, r8, r1
 8014216:	ea08 080c 	and.w	r8, r8, ip
 801421a:	4641      	mov	r1, r8
 801421c:	4628      	mov	r0, r5
 801421e:	9301      	str	r3, [sp, #4]
 8014220:	9200      	str	r2, [sp, #0]
 8014222:	f000 f8ef 	bl	8014404 <_sbrk_r>
 8014226:	1c43      	adds	r3, r0, #1
 8014228:	e9dd 2300 	ldrd	r2, r3, [sp]
 801422c:	d105      	bne.n	801423a <_malloc_r+0x3f2>
 801422e:	b32b      	cbz	r3, 801427c <_malloc_r+0x434>
 8014230:	f1a3 0008 	sub.w	r0, r3, #8
 8014234:	4410      	add	r0, r2
 8014236:	f04f 0800 	mov.w	r8, #0
 801423a:	f8da 2000 	ldr.w	r2, [sl]
 801423e:	60b4      	str	r4, [r6, #8]
 8014240:	1b00      	subs	r0, r0, r4
 8014242:	4440      	add	r0, r8
 8014244:	4442      	add	r2, r8
 8014246:	f040 0001 	orr.w	r0, r0, #1
 801424a:	45b3      	cmp	fp, r6
 801424c:	f8ca 2000 	str.w	r2, [sl]
 8014250:	6060      	str	r0, [r4, #4]
 8014252:	f43f af27 	beq.w	80140a4 <_malloc_r+0x25c>
 8014256:	f1b9 0f0f 	cmp.w	r9, #15
 801425a:	d812      	bhi.n	8014282 <_malloc_r+0x43a>
 801425c:	2301      	movs	r3, #1
 801425e:	6063      	str	r3, [r4, #4]
 8014260:	68b3      	ldr	r3, [r6, #8]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	f023 0303 	bic.w	r3, r3, #3
 8014268:	42bb      	cmp	r3, r7
 801426a:	eba3 0207 	sub.w	r2, r3, r7
 801426e:	d301      	bcc.n	8014274 <_malloc_r+0x42c>
 8014270:	2a0f      	cmp	r2, #15
 8014272:	dc21      	bgt.n	80142b8 <_malloc_r+0x470>
 8014274:	4628      	mov	r0, r5
 8014276:	f000 f86d 	bl	8014354 <__malloc_unlock>
 801427a:	e5f1      	b.n	8013e60 <_malloc_r+0x18>
 801427c:	4610      	mov	r0, r2
 801427e:	4698      	mov	r8, r3
 8014280:	e7db      	b.n	801423a <_malloc_r+0x3f2>
 8014282:	f8db 3004 	ldr.w	r3, [fp, #4]
 8014286:	f1a9 090c 	sub.w	r9, r9, #12
 801428a:	f029 0907 	bic.w	r9, r9, #7
 801428e:	f003 0301 	and.w	r3, r3, #1
 8014292:	ea43 0309 	orr.w	r3, r3, r9
 8014296:	f8cb 3004 	str.w	r3, [fp, #4]
 801429a:	2205      	movs	r2, #5
 801429c:	eb0b 0309 	add.w	r3, fp, r9
 80142a0:	f1b9 0f0f 	cmp.w	r9, #15
 80142a4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80142a8:	f67f aefc 	bls.w	80140a4 <_malloc_r+0x25c>
 80142ac:	f10b 0108 	add.w	r1, fp, #8
 80142b0:	4628      	mov	r0, r5
 80142b2:	f000 f997 	bl	80145e4 <_free_r>
 80142b6:	e6f5      	b.n	80140a4 <_malloc_r+0x25c>
 80142b8:	68b4      	ldr	r4, [r6, #8]
 80142ba:	f047 0301 	orr.w	r3, r7, #1
 80142be:	4427      	add	r7, r4
 80142c0:	f042 0201 	orr.w	r2, r2, #1
 80142c4:	6063      	str	r3, [r4, #4]
 80142c6:	60b7      	str	r7, [r6, #8]
 80142c8:	607a      	str	r2, [r7, #4]
 80142ca:	e5ee      	b.n	8013eaa <_malloc_r+0x62>

080142cc <memcmp>:
 80142cc:	b530      	push	{r4, r5, lr}
 80142ce:	3901      	subs	r1, #1
 80142d0:	2400      	movs	r4, #0
 80142d2:	42a2      	cmp	r2, r4
 80142d4:	d101      	bne.n	80142da <memcmp+0xe>
 80142d6:	2000      	movs	r0, #0
 80142d8:	e005      	b.n	80142e6 <memcmp+0x1a>
 80142da:	5d03      	ldrb	r3, [r0, r4]
 80142dc:	3401      	adds	r4, #1
 80142de:	5d0d      	ldrb	r5, [r1, r4]
 80142e0:	42ab      	cmp	r3, r5
 80142e2:	d0f6      	beq.n	80142d2 <memcmp+0x6>
 80142e4:	1b58      	subs	r0, r3, r5
 80142e6:	bd30      	pop	{r4, r5, pc}

080142e8 <memcpy>:
 80142e8:	440a      	add	r2, r1
 80142ea:	4291      	cmp	r1, r2
 80142ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80142f0:	d100      	bne.n	80142f4 <memcpy+0xc>
 80142f2:	4770      	bx	lr
 80142f4:	b510      	push	{r4, lr}
 80142f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142fe:	4291      	cmp	r1, r2
 8014300:	d1f9      	bne.n	80142f6 <memcpy+0xe>
 8014302:	bd10      	pop	{r4, pc}

08014304 <memmove>:
 8014304:	4288      	cmp	r0, r1
 8014306:	b510      	push	{r4, lr}
 8014308:	eb01 0402 	add.w	r4, r1, r2
 801430c:	d902      	bls.n	8014314 <memmove+0x10>
 801430e:	4284      	cmp	r4, r0
 8014310:	4623      	mov	r3, r4
 8014312:	d807      	bhi.n	8014324 <memmove+0x20>
 8014314:	1e43      	subs	r3, r0, #1
 8014316:	42a1      	cmp	r1, r4
 8014318:	d008      	beq.n	801432c <memmove+0x28>
 801431a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801431e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014322:	e7f8      	b.n	8014316 <memmove+0x12>
 8014324:	4402      	add	r2, r0
 8014326:	4601      	mov	r1, r0
 8014328:	428a      	cmp	r2, r1
 801432a:	d100      	bne.n	801432e <memmove+0x2a>
 801432c:	bd10      	pop	{r4, pc}
 801432e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014336:	e7f7      	b.n	8014328 <memmove+0x24>

08014338 <memset>:
 8014338:	4402      	add	r2, r0
 801433a:	4603      	mov	r3, r0
 801433c:	4293      	cmp	r3, r2
 801433e:	d100      	bne.n	8014342 <memset+0xa>
 8014340:	4770      	bx	lr
 8014342:	f803 1b01 	strb.w	r1, [r3], #1
 8014346:	e7f9      	b.n	801433c <memset+0x4>

08014348 <__malloc_lock>:
 8014348:	4801      	ldr	r0, [pc, #4]	; (8014350 <__malloc_lock+0x8>)
 801434a:	f000 ba0d 	b.w	8014768 <__retarget_lock_acquire_recursive>
 801434e:	bf00      	nop
 8014350:	20018e54 	.word	0x20018e54

08014354 <__malloc_unlock>:
 8014354:	4801      	ldr	r0, [pc, #4]	; (801435c <__malloc_unlock+0x8>)
 8014356:	f000 ba08 	b.w	801476a <__retarget_lock_release_recursive>
 801435a:	bf00      	nop
 801435c:	20018e54 	.word	0x20018e54

08014360 <cleanup_glue>:
 8014360:	b538      	push	{r3, r4, r5, lr}
 8014362:	460c      	mov	r4, r1
 8014364:	6809      	ldr	r1, [r1, #0]
 8014366:	4605      	mov	r5, r0
 8014368:	b109      	cbz	r1, 801436e <cleanup_glue+0xe>
 801436a:	f7ff fff9 	bl	8014360 <cleanup_glue>
 801436e:	4621      	mov	r1, r4
 8014370:	4628      	mov	r0, r5
 8014372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014376:	f000 b935 	b.w	80145e4 <_free_r>
	...

0801437c <_reclaim_reent>:
 801437c:	4b20      	ldr	r3, [pc, #128]	; (8014400 <_reclaim_reent+0x84>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4283      	cmp	r3, r0
 8014382:	b570      	push	{r4, r5, r6, lr}
 8014384:	4604      	mov	r4, r0
 8014386:	d039      	beq.n	80143fc <_reclaim_reent+0x80>
 8014388:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801438a:	bb33      	cbnz	r3, 80143da <_reclaim_reent+0x5e>
 801438c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801438e:	b111      	cbz	r1, 8014396 <_reclaim_reent+0x1a>
 8014390:	4620      	mov	r0, r4
 8014392:	f000 f927 	bl	80145e4 <_free_r>
 8014396:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
 801439a:	bb05      	cbnz	r5, 80143de <_reclaim_reent+0x62>
 801439c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801439e:	bb49      	cbnz	r1, 80143f4 <_reclaim_reent+0x78>
 80143a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80143a2:	b35b      	cbz	r3, 80143fc <_reclaim_reent+0x80>
 80143a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80143a6:	4620      	mov	r0, r4
 80143a8:	4798      	blx	r3
 80143aa:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 80143ae:	b329      	cbz	r1, 80143fc <_reclaim_reent+0x80>
 80143b0:	4620      	mov	r0, r4
 80143b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143b6:	f7ff bfd3 	b.w	8014360 <cleanup_glue>
 80143ba:	5949      	ldr	r1, [r1, r5]
 80143bc:	b939      	cbnz	r1, 80143ce <_reclaim_reent+0x52>
 80143be:	3504      	adds	r5, #4
 80143c0:	2d80      	cmp	r5, #128	; 0x80
 80143c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80143c4:	d1f9      	bne.n	80143ba <_reclaim_reent+0x3e>
 80143c6:	4620      	mov	r0, r4
 80143c8:	f000 f90c 	bl	80145e4 <_free_r>
 80143cc:	e7de      	b.n	801438c <_reclaim_reent+0x10>
 80143ce:	680e      	ldr	r6, [r1, #0]
 80143d0:	4620      	mov	r0, r4
 80143d2:	f000 f907 	bl	80145e4 <_free_r>
 80143d6:	4631      	mov	r1, r6
 80143d8:	e7f0      	b.n	80143bc <_reclaim_reent+0x40>
 80143da:	2500      	movs	r5, #0
 80143dc:	e7f0      	b.n	80143c0 <_reclaim_reent+0x44>
 80143de:	f504 76a6 	add.w	r6, r4, #332	; 0x14c
 80143e2:	42b5      	cmp	r5, r6
 80143e4:	d0da      	beq.n	801439c <_reclaim_reent+0x20>
 80143e6:	4629      	mov	r1, r5
 80143e8:	682d      	ldr	r5, [r5, #0]
 80143ea:	4620      	mov	r0, r4
 80143ec:	f000 f8fa 	bl	80145e4 <_free_r>
 80143f0:	42ae      	cmp	r6, r5
 80143f2:	e7f7      	b.n	80143e4 <_reclaim_reent+0x68>
 80143f4:	4620      	mov	r0, r4
 80143f6:	f000 f8f5 	bl	80145e4 <_free_r>
 80143fa:	e7d1      	b.n	80143a0 <_reclaim_reent+0x24>
 80143fc:	bd70      	pop	{r4, r5, r6, pc}
 80143fe:	bf00      	nop
 8014400:	200000b0 	.word	0x200000b0

08014404 <_sbrk_r>:
 8014404:	b538      	push	{r3, r4, r5, lr}
 8014406:	4d06      	ldr	r5, [pc, #24]	; (8014420 <_sbrk_r+0x1c>)
 8014408:	2300      	movs	r3, #0
 801440a:	4604      	mov	r4, r0
 801440c:	4608      	mov	r0, r1
 801440e:	602b      	str	r3, [r5, #0]
 8014410:	f7f3 fdd2 	bl	8007fb8 <_sbrk>
 8014414:	1c43      	adds	r3, r0, #1
 8014416:	d102      	bne.n	801441e <_sbrk_r+0x1a>
 8014418:	682b      	ldr	r3, [r5, #0]
 801441a:	b103      	cbz	r3, 801441e <_sbrk_r+0x1a>
 801441c:	6023      	str	r3, [r4, #0]
 801441e:	bd38      	pop	{r3, r4, r5, pc}
 8014420:	20018e4c 	.word	0x20018e4c

08014424 <sysconf>:
 8014424:	2808      	cmp	r0, #8
 8014426:	b508      	push	{r3, lr}
 8014428:	d006      	beq.n	8014438 <sysconf+0x14>
 801442a:	f7ff fce3 	bl	8013df4 <__errno>
 801442e:	2316      	movs	r3, #22
 8014430:	6003      	str	r3, [r0, #0]
 8014432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014436:	bd08      	pop	{r3, pc}
 8014438:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801443c:	e7fb      	b.n	8014436 <sysconf+0x12>

0801443e <_vsnprintf_r>:
 801443e:	b530      	push	{r4, r5, lr}
 8014440:	1e14      	subs	r4, r2, #0
 8014442:	4605      	mov	r5, r0
 8014444:	b09b      	sub	sp, #108	; 0x6c
 8014446:	4618      	mov	r0, r3
 8014448:	da05      	bge.n	8014456 <_vsnprintf_r+0x18>
 801444a:	238b      	movs	r3, #139	; 0x8b
 801444c:	602b      	str	r3, [r5, #0]
 801444e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014452:	b01b      	add	sp, #108	; 0x6c
 8014454:	bd30      	pop	{r4, r5, pc}
 8014456:	f44f 7302 	mov.w	r3, #520	; 0x208
 801445a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801445e:	bf14      	ite	ne
 8014460:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014464:	4623      	moveq	r3, r4
 8014466:	9302      	str	r3, [sp, #8]
 8014468:	9305      	str	r3, [sp, #20]
 801446a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801446e:	9100      	str	r1, [sp, #0]
 8014470:	9104      	str	r1, [sp, #16]
 8014472:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014476:	4602      	mov	r2, r0
 8014478:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801447a:	4669      	mov	r1, sp
 801447c:	4628      	mov	r0, r5
 801447e:	f000 f977 	bl	8014770 <_svfprintf_r>
 8014482:	1c43      	adds	r3, r0, #1
 8014484:	bfbc      	itt	lt
 8014486:	238b      	movlt	r3, #139	; 0x8b
 8014488:	602b      	strlt	r3, [r5, #0]
 801448a:	2c00      	cmp	r4, #0
 801448c:	d0e1      	beq.n	8014452 <_vsnprintf_r+0x14>
 801448e:	9b00      	ldr	r3, [sp, #0]
 8014490:	2200      	movs	r2, #0
 8014492:	701a      	strb	r2, [r3, #0]
 8014494:	e7dd      	b.n	8014452 <_vsnprintf_r+0x14>
	...

08014498 <vsnprintf>:
 8014498:	b507      	push	{r0, r1, r2, lr}
 801449a:	9300      	str	r3, [sp, #0]
 801449c:	4613      	mov	r3, r2
 801449e:	460a      	mov	r2, r1
 80144a0:	4601      	mov	r1, r0
 80144a2:	4803      	ldr	r0, [pc, #12]	; (80144b0 <vsnprintf+0x18>)
 80144a4:	6800      	ldr	r0, [r0, #0]
 80144a6:	f7ff ffca 	bl	801443e <_vsnprintf_r>
 80144aa:	b003      	add	sp, #12
 80144ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80144b0:	200000b0 	.word	0x200000b0

080144b4 <_vsprintf_r>:
 80144b4:	b500      	push	{lr}
 80144b6:	b09b      	sub	sp, #108	; 0x6c
 80144b8:	9100      	str	r1, [sp, #0]
 80144ba:	9104      	str	r1, [sp, #16]
 80144bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80144c0:	9105      	str	r1, [sp, #20]
 80144c2:	9102      	str	r1, [sp, #8]
 80144c4:	4905      	ldr	r1, [pc, #20]	; (80144dc <_vsprintf_r+0x28>)
 80144c6:	9103      	str	r1, [sp, #12]
 80144c8:	4669      	mov	r1, sp
 80144ca:	f000 f951 	bl	8014770 <_svfprintf_r>
 80144ce:	9b00      	ldr	r3, [sp, #0]
 80144d0:	2200      	movs	r2, #0
 80144d2:	701a      	strb	r2, [r3, #0]
 80144d4:	b01b      	add	sp, #108	; 0x6c
 80144d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80144da:	bf00      	nop
 80144dc:	ffff0208 	.word	0xffff0208

080144e0 <vsprintf>:
 80144e0:	4613      	mov	r3, r2
 80144e2:	460a      	mov	r2, r1
 80144e4:	4601      	mov	r1, r0
 80144e6:	4802      	ldr	r0, [pc, #8]	; (80144f0 <vsprintf+0x10>)
 80144e8:	6800      	ldr	r0, [r0, #0]
 80144ea:	f7ff bfe3 	b.w	80144b4 <_vsprintf_r>
 80144ee:	bf00      	nop
 80144f0:	200000b0 	.word	0x200000b0

080144f4 <register_fini>:
 80144f4:	4b02      	ldr	r3, [pc, #8]	; (8014500 <register_fini+0xc>)
 80144f6:	b113      	cbz	r3, 80144fe <register_fini+0xa>
 80144f8:	4802      	ldr	r0, [pc, #8]	; (8014504 <register_fini+0x10>)
 80144fa:	f000 b805 	b.w	8014508 <atexit>
 80144fe:	4770      	bx	lr
 8014500:	00000000 	.word	0x00000000
 8014504:	08014515 	.word	0x08014515

08014508 <atexit>:
 8014508:	2300      	movs	r3, #0
 801450a:	4601      	mov	r1, r0
 801450c:	461a      	mov	r2, r3
 801450e:	4618      	mov	r0, r3
 8014510:	f001 bb0e 	b.w	8015b30 <__register_exitproc>

08014514 <__libc_fini_array>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	4d07      	ldr	r5, [pc, #28]	; (8014534 <__libc_fini_array+0x20>)
 8014518:	4c07      	ldr	r4, [pc, #28]	; (8014538 <__libc_fini_array+0x24>)
 801451a:	1b64      	subs	r4, r4, r5
 801451c:	10a4      	asrs	r4, r4, #2
 801451e:	b91c      	cbnz	r4, 8014528 <__libc_fini_array+0x14>
 8014520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014524:	f004 ba04 	b.w	8018930 <_fini>
 8014528:	3c01      	subs	r4, #1
 801452a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801452e:	4798      	blx	r3
 8014530:	e7f5      	b.n	801451e <__libc_fini_array+0xa>
 8014532:	bf00      	nop
 8014534:	0803983c 	.word	0x0803983c
 8014538:	08039840 	.word	0x08039840

0801453c <_malloc_trim_r>:
 801453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014540:	4606      	mov	r6, r0
 8014542:	2008      	movs	r0, #8
 8014544:	460c      	mov	r4, r1
 8014546:	f7ff ff6d 	bl	8014424 <sysconf>
 801454a:	4f23      	ldr	r7, [pc, #140]	; (80145d8 <_malloc_trim_r+0x9c>)
 801454c:	4680      	mov	r8, r0
 801454e:	4630      	mov	r0, r6
 8014550:	f7ff fefa 	bl	8014348 <__malloc_lock>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	685d      	ldr	r5, [r3, #4]
 8014558:	f025 0503 	bic.w	r5, r5, #3
 801455c:	1b2c      	subs	r4, r5, r4
 801455e:	3c11      	subs	r4, #17
 8014560:	4444      	add	r4, r8
 8014562:	fbb4 f4f8 	udiv	r4, r4, r8
 8014566:	3c01      	subs	r4, #1
 8014568:	fb08 f404 	mul.w	r4, r8, r4
 801456c:	45a0      	cmp	r8, r4
 801456e:	dd05      	ble.n	801457c <_malloc_trim_r+0x40>
 8014570:	4630      	mov	r0, r6
 8014572:	f7ff feef 	bl	8014354 <__malloc_unlock>
 8014576:	2000      	movs	r0, #0
 8014578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801457c:	2100      	movs	r1, #0
 801457e:	4630      	mov	r0, r6
 8014580:	f7ff ff40 	bl	8014404 <_sbrk_r>
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	442b      	add	r3, r5
 8014588:	4298      	cmp	r0, r3
 801458a:	d1f1      	bne.n	8014570 <_malloc_trim_r+0x34>
 801458c:	4261      	negs	r1, r4
 801458e:	4630      	mov	r0, r6
 8014590:	f7ff ff38 	bl	8014404 <_sbrk_r>
 8014594:	3001      	adds	r0, #1
 8014596:	d110      	bne.n	80145ba <_malloc_trim_r+0x7e>
 8014598:	2100      	movs	r1, #0
 801459a:	4630      	mov	r0, r6
 801459c:	f7ff ff32 	bl	8014404 <_sbrk_r>
 80145a0:	68ba      	ldr	r2, [r7, #8]
 80145a2:	1a83      	subs	r3, r0, r2
 80145a4:	2b0f      	cmp	r3, #15
 80145a6:	dde3      	ble.n	8014570 <_malloc_trim_r+0x34>
 80145a8:	490c      	ldr	r1, [pc, #48]	; (80145dc <_malloc_trim_r+0xa0>)
 80145aa:	6809      	ldr	r1, [r1, #0]
 80145ac:	1a40      	subs	r0, r0, r1
 80145ae:	490c      	ldr	r1, [pc, #48]	; (80145e0 <_malloc_trim_r+0xa4>)
 80145b0:	f043 0301 	orr.w	r3, r3, #1
 80145b4:	6008      	str	r0, [r1, #0]
 80145b6:	6053      	str	r3, [r2, #4]
 80145b8:	e7da      	b.n	8014570 <_malloc_trim_r+0x34>
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	4a08      	ldr	r2, [pc, #32]	; (80145e0 <_malloc_trim_r+0xa4>)
 80145be:	1b2d      	subs	r5, r5, r4
 80145c0:	f045 0501 	orr.w	r5, r5, #1
 80145c4:	605d      	str	r5, [r3, #4]
 80145c6:	6813      	ldr	r3, [r2, #0]
 80145c8:	4630      	mov	r0, r6
 80145ca:	1b1c      	subs	r4, r3, r4
 80145cc:	6014      	str	r4, [r2, #0]
 80145ce:	f7ff fec1 	bl	8014354 <__malloc_unlock>
 80145d2:	2001      	movs	r0, #1
 80145d4:	e7d0      	b.n	8014578 <_malloc_trim_r+0x3c>
 80145d6:	bf00      	nop
 80145d8:	200004e0 	.word	0x200004e0
 80145dc:	200008e8 	.word	0x200008e8
 80145e0:	20017a2c 	.word	0x20017a2c

080145e4 <_free_r>:
 80145e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145e6:	4605      	mov	r5, r0
 80145e8:	460f      	mov	r7, r1
 80145ea:	2900      	cmp	r1, #0
 80145ec:	f000 80b1 	beq.w	8014752 <_free_r+0x16e>
 80145f0:	f7ff feaa 	bl	8014348 <__malloc_lock>
 80145f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80145f8:	4856      	ldr	r0, [pc, #344]	; (8014754 <_free_r+0x170>)
 80145fa:	f022 0401 	bic.w	r4, r2, #1
 80145fe:	f1a7 0308 	sub.w	r3, r7, #8
 8014602:	eb03 0c04 	add.w	ip, r3, r4
 8014606:	6881      	ldr	r1, [r0, #8]
 8014608:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801460c:	4561      	cmp	r1, ip
 801460e:	f026 0603 	bic.w	r6, r6, #3
 8014612:	f002 0201 	and.w	r2, r2, #1
 8014616:	d11b      	bne.n	8014650 <_free_r+0x6c>
 8014618:	4434      	add	r4, r6
 801461a:	b93a      	cbnz	r2, 801462c <_free_r+0x48>
 801461c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8014620:	1a9b      	subs	r3, r3, r2
 8014622:	4414      	add	r4, r2
 8014624:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8014628:	60ca      	str	r2, [r1, #12]
 801462a:	6091      	str	r1, [r2, #8]
 801462c:	f044 0201 	orr.w	r2, r4, #1
 8014630:	605a      	str	r2, [r3, #4]
 8014632:	6083      	str	r3, [r0, #8]
 8014634:	4b48      	ldr	r3, [pc, #288]	; (8014758 <_free_r+0x174>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	42a3      	cmp	r3, r4
 801463a:	d804      	bhi.n	8014646 <_free_r+0x62>
 801463c:	4b47      	ldr	r3, [pc, #284]	; (801475c <_free_r+0x178>)
 801463e:	4628      	mov	r0, r5
 8014640:	6819      	ldr	r1, [r3, #0]
 8014642:	f7ff ff7b 	bl	801453c <_malloc_trim_r>
 8014646:	4628      	mov	r0, r5
 8014648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801464c:	f7ff be82 	b.w	8014354 <__malloc_unlock>
 8014650:	f8cc 6004 	str.w	r6, [ip, #4]
 8014654:	2a00      	cmp	r2, #0
 8014656:	d138      	bne.n	80146ca <_free_r+0xe6>
 8014658:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801465c:	1a5b      	subs	r3, r3, r1
 801465e:	440c      	add	r4, r1
 8014660:	6899      	ldr	r1, [r3, #8]
 8014662:	f100 0708 	add.w	r7, r0, #8
 8014666:	42b9      	cmp	r1, r7
 8014668:	d031      	beq.n	80146ce <_free_r+0xea>
 801466a:	68df      	ldr	r7, [r3, #12]
 801466c:	60cf      	str	r7, [r1, #12]
 801466e:	60b9      	str	r1, [r7, #8]
 8014670:	eb0c 0106 	add.w	r1, ip, r6
 8014674:	6849      	ldr	r1, [r1, #4]
 8014676:	07c9      	lsls	r1, r1, #31
 8014678:	d40b      	bmi.n	8014692 <_free_r+0xae>
 801467a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801467e:	4434      	add	r4, r6
 8014680:	bb3a      	cbnz	r2, 80146d2 <_free_r+0xee>
 8014682:	4e37      	ldr	r6, [pc, #220]	; (8014760 <_free_r+0x17c>)
 8014684:	42b1      	cmp	r1, r6
 8014686:	d124      	bne.n	80146d2 <_free_r+0xee>
 8014688:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801468c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8014690:	2201      	movs	r2, #1
 8014692:	f044 0101 	orr.w	r1, r4, #1
 8014696:	6059      	str	r1, [r3, #4]
 8014698:	511c      	str	r4, [r3, r4]
 801469a:	2a00      	cmp	r2, #0
 801469c:	d1d3      	bne.n	8014646 <_free_r+0x62>
 801469e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80146a2:	d21b      	bcs.n	80146dc <_free_r+0xf8>
 80146a4:	0961      	lsrs	r1, r4, #5
 80146a6:	08e2      	lsrs	r2, r4, #3
 80146a8:	2401      	movs	r4, #1
 80146aa:	408c      	lsls	r4, r1
 80146ac:	6841      	ldr	r1, [r0, #4]
 80146ae:	3201      	adds	r2, #1
 80146b0:	430c      	orrs	r4, r1
 80146b2:	6044      	str	r4, [r0, #4]
 80146b4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 80146b8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 80146bc:	3908      	subs	r1, #8
 80146be:	e9c3 4102 	strd	r4, r1, [r3, #8]
 80146c2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 80146c6:	60e3      	str	r3, [r4, #12]
 80146c8:	e7bd      	b.n	8014646 <_free_r+0x62>
 80146ca:	2200      	movs	r2, #0
 80146cc:	e7d0      	b.n	8014670 <_free_r+0x8c>
 80146ce:	2201      	movs	r2, #1
 80146d0:	e7ce      	b.n	8014670 <_free_r+0x8c>
 80146d2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80146d6:	60ce      	str	r6, [r1, #12]
 80146d8:	60b1      	str	r1, [r6, #8]
 80146da:	e7da      	b.n	8014692 <_free_r+0xae>
 80146dc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80146e0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80146e4:	d214      	bcs.n	8014710 <_free_r+0x12c>
 80146e6:	09a2      	lsrs	r2, r4, #6
 80146e8:	3238      	adds	r2, #56	; 0x38
 80146ea:	1c51      	adds	r1, r2, #1
 80146ec:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80146f0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80146f4:	428e      	cmp	r6, r1
 80146f6:	d125      	bne.n	8014744 <_free_r+0x160>
 80146f8:	2401      	movs	r4, #1
 80146fa:	1092      	asrs	r2, r2, #2
 80146fc:	fa04 f202 	lsl.w	r2, r4, r2
 8014700:	6844      	ldr	r4, [r0, #4]
 8014702:	4322      	orrs	r2, r4
 8014704:	6042      	str	r2, [r0, #4]
 8014706:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801470a:	60b3      	str	r3, [r6, #8]
 801470c:	60cb      	str	r3, [r1, #12]
 801470e:	e79a      	b.n	8014646 <_free_r+0x62>
 8014710:	2a14      	cmp	r2, #20
 8014712:	d801      	bhi.n	8014718 <_free_r+0x134>
 8014714:	325b      	adds	r2, #91	; 0x5b
 8014716:	e7e8      	b.n	80146ea <_free_r+0x106>
 8014718:	2a54      	cmp	r2, #84	; 0x54
 801471a:	d802      	bhi.n	8014722 <_free_r+0x13e>
 801471c:	0b22      	lsrs	r2, r4, #12
 801471e:	326e      	adds	r2, #110	; 0x6e
 8014720:	e7e3      	b.n	80146ea <_free_r+0x106>
 8014722:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8014726:	d802      	bhi.n	801472e <_free_r+0x14a>
 8014728:	0be2      	lsrs	r2, r4, #15
 801472a:	3277      	adds	r2, #119	; 0x77
 801472c:	e7dd      	b.n	80146ea <_free_r+0x106>
 801472e:	f240 5154 	movw	r1, #1364	; 0x554
 8014732:	428a      	cmp	r2, r1
 8014734:	bf9a      	itte	ls
 8014736:	0ca2      	lsrls	r2, r4, #18
 8014738:	327c      	addls	r2, #124	; 0x7c
 801473a:	227e      	movhi	r2, #126	; 0x7e
 801473c:	e7d5      	b.n	80146ea <_free_r+0x106>
 801473e:	6889      	ldr	r1, [r1, #8]
 8014740:	428e      	cmp	r6, r1
 8014742:	d004      	beq.n	801474e <_free_r+0x16a>
 8014744:	684a      	ldr	r2, [r1, #4]
 8014746:	f022 0203 	bic.w	r2, r2, #3
 801474a:	42a2      	cmp	r2, r4
 801474c:	d8f7      	bhi.n	801473e <_free_r+0x15a>
 801474e:	68ce      	ldr	r6, [r1, #12]
 8014750:	e7d9      	b.n	8014706 <_free_r+0x122>
 8014752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014754:	200004e0 	.word	0x200004e0
 8014758:	200008ec 	.word	0x200008ec
 801475c:	20017a5c 	.word	0x20017a5c
 8014760:	200004e8 	.word	0x200004e8

08014764 <__retarget_lock_init_recursive>:
 8014764:	4770      	bx	lr

08014766 <__retarget_lock_close_recursive>:
 8014766:	4770      	bx	lr

08014768 <__retarget_lock_acquire_recursive>:
 8014768:	4770      	bx	lr

0801476a <__retarget_lock_release_recursive>:
 801476a:	4770      	bx	lr
 801476c:	0000      	movs	r0, r0
	...

08014770 <_svfprintf_r>:
 8014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014774:	ed2d 8b04 	vpush	{d8-d9}
 8014778:	b0cf      	sub	sp, #316	; 0x13c
 801477a:	4689      	mov	r9, r1
 801477c:	4693      	mov	fp, r2
 801477e:	461e      	mov	r6, r3
 8014780:	4682      	mov	sl, r0
 8014782:	f002 f875 	bl	8016870 <_localeconv_r>
 8014786:	6803      	ldr	r3, [r0, #0]
 8014788:	9313      	str	r3, [sp, #76]	; 0x4c
 801478a:	4618      	mov	r0, r3
 801478c:	f7eb fd38 	bl	8000200 <strlen>
 8014790:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014794:	900e      	str	r0, [sp, #56]	; 0x38
 8014796:	0618      	lsls	r0, r3, #24
 8014798:	d51a      	bpl.n	80147d0 <_svfprintf_r+0x60>
 801479a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801479e:	b9bb      	cbnz	r3, 80147d0 <_svfprintf_r+0x60>
 80147a0:	2140      	movs	r1, #64	; 0x40
 80147a2:	4650      	mov	r0, sl
 80147a4:	f7ff fb50 	bl	8013e48 <_malloc_r>
 80147a8:	f8c9 0000 	str.w	r0, [r9]
 80147ac:	f8c9 0010 	str.w	r0, [r9, #16]
 80147b0:	b958      	cbnz	r0, 80147ca <_svfprintf_r+0x5a>
 80147b2:	230c      	movs	r3, #12
 80147b4:	f8ca 3000 	str.w	r3, [sl]
 80147b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80147be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80147c0:	b04f      	add	sp, #316	; 0x13c
 80147c2:	ecbd 8b04 	vpop	{d8-d9}
 80147c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ca:	2340      	movs	r3, #64	; 0x40
 80147cc:	f8c9 3014 	str.w	r3, [r9, #20]
 80147d0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8014a20 <_svfprintf_r+0x2b0>
 80147d4:	2500      	movs	r5, #0
 80147d6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80147da:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80147de:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80147e2:	ac25      	add	r4, sp, #148	; 0x94
 80147e4:	9422      	str	r4, [sp, #136]	; 0x88
 80147e6:	9505      	str	r5, [sp, #20]
 80147e8:	950a      	str	r5, [sp, #40]	; 0x28
 80147ea:	9512      	str	r5, [sp, #72]	; 0x48
 80147ec:	9514      	str	r5, [sp, #80]	; 0x50
 80147ee:	950f      	str	r5, [sp, #60]	; 0x3c
 80147f0:	465b      	mov	r3, fp
 80147f2:	461d      	mov	r5, r3
 80147f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147f8:	b10a      	cbz	r2, 80147fe <_svfprintf_r+0x8e>
 80147fa:	2a25      	cmp	r2, #37	; 0x25
 80147fc:	d1f9      	bne.n	80147f2 <_svfprintf_r+0x82>
 80147fe:	ebb5 070b 	subs.w	r7, r5, fp
 8014802:	d00d      	beq.n	8014820 <_svfprintf_r+0xb0>
 8014804:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014806:	443b      	add	r3, r7
 8014808:	9324      	str	r3, [sp, #144]	; 0x90
 801480a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801480c:	3301      	adds	r3, #1
 801480e:	2b07      	cmp	r3, #7
 8014810:	e9c4 b700 	strd	fp, r7, [r4]
 8014814:	9323      	str	r3, [sp, #140]	; 0x8c
 8014816:	dc79      	bgt.n	801490c <_svfprintf_r+0x19c>
 8014818:	3408      	adds	r4, #8
 801481a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801481c:	443b      	add	r3, r7
 801481e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014820:	782b      	ldrb	r3, [r5, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	f001 8140 	beq.w	8015aa8 <_svfprintf_r+0x1338>
 8014828:	2300      	movs	r3, #0
 801482a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801482e:	3501      	adds	r5, #1
 8014830:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014834:	9204      	str	r2, [sp, #16]
 8014836:	9310      	str	r3, [sp, #64]	; 0x40
 8014838:	4698      	mov	r8, r3
 801483a:	270a      	movs	r7, #10
 801483c:	212b      	movs	r1, #43	; 0x2b
 801483e:	462a      	mov	r2, r5
 8014840:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014844:	9307      	str	r3, [sp, #28]
 8014846:	920b      	str	r2, [sp, #44]	; 0x2c
 8014848:	9b07      	ldr	r3, [sp, #28]
 801484a:	3b20      	subs	r3, #32
 801484c:	2b5a      	cmp	r3, #90	; 0x5a
 801484e:	f200 85b4 	bhi.w	80153ba <_svfprintf_r+0xc4a>
 8014852:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014856:	007e      	.short	0x007e
 8014858:	05b205b2 	.word	0x05b205b2
 801485c:	05b20086 	.word	0x05b20086
 8014860:	05b205b2 	.word	0x05b205b2
 8014864:	05b20065 	.word	0x05b20065
 8014868:	008905b2 	.word	0x008905b2
 801486c:	05b20093 	.word	0x05b20093
 8014870:	00960090 	.word	0x00960090
 8014874:	00b305b2 	.word	0x00b305b2
 8014878:	00b600b6 	.word	0x00b600b6
 801487c:	00b600b6 	.word	0x00b600b6
 8014880:	00b600b6 	.word	0x00b600b6
 8014884:	00b600b6 	.word	0x00b600b6
 8014888:	05b200b6 	.word	0x05b200b6
 801488c:	05b205b2 	.word	0x05b205b2
 8014890:	05b205b2 	.word	0x05b205b2
 8014894:	05b205b2 	.word	0x05b205b2
 8014898:	05b20127 	.word	0x05b20127
 801489c:	00fc00e9 	.word	0x00fc00e9
 80148a0:	01270127 	.word	0x01270127
 80148a4:	05b20127 	.word	0x05b20127
 80148a8:	05b205b2 	.word	0x05b205b2
 80148ac:	00c605b2 	.word	0x00c605b2
 80148b0:	05b205b2 	.word	0x05b205b2
 80148b4:	05b20492 	.word	0x05b20492
 80148b8:	05b205b2 	.word	0x05b205b2
 80148bc:	05b204d9 	.word	0x05b204d9
 80148c0:	05b204fa 	.word	0x05b204fa
 80148c4:	051905b2 	.word	0x051905b2
 80148c8:	05b205b2 	.word	0x05b205b2
 80148cc:	05b205b2 	.word	0x05b205b2
 80148d0:	05b205b2 	.word	0x05b205b2
 80148d4:	05b205b2 	.word	0x05b205b2
 80148d8:	05b20127 	.word	0x05b20127
 80148dc:	00fe00e9 	.word	0x00fe00e9
 80148e0:	01270127 	.word	0x01270127
 80148e4:	00c90127 	.word	0x00c90127
 80148e8:	00dd00fe 	.word	0x00dd00fe
 80148ec:	00d605b2 	.word	0x00d605b2
 80148f0:	046f05b2 	.word	0x046f05b2
 80148f4:	04c80494 	.word	0x04c80494
 80148f8:	05b200dd 	.word	0x05b200dd
 80148fc:	007c04d9 	.word	0x007c04d9
 8014900:	05b204fc 	.word	0x05b204fc
 8014904:	053605b2 	.word	0x053605b2
 8014908:	007c05b2 	.word	0x007c05b2
 801490c:	aa22      	add	r2, sp, #136	; 0x88
 801490e:	4649      	mov	r1, r9
 8014910:	4650      	mov	r0, sl
 8014912:	f002 fb2c 	bl	8016f6e <__ssprint_r>
 8014916:	2800      	cmp	r0, #0
 8014918:	f040 8132 	bne.w	8014b80 <_svfprintf_r+0x410>
 801491c:	ac25      	add	r4, sp, #148	; 0x94
 801491e:	e77c      	b.n	801481a <_svfprintf_r+0xaa>
 8014920:	4650      	mov	r0, sl
 8014922:	f001 ffa5 	bl	8016870 <_localeconv_r>
 8014926:	6843      	ldr	r3, [r0, #4]
 8014928:	9314      	str	r3, [sp, #80]	; 0x50
 801492a:	4618      	mov	r0, r3
 801492c:	f7eb fc68 	bl	8000200 <strlen>
 8014930:	9012      	str	r0, [sp, #72]	; 0x48
 8014932:	4650      	mov	r0, sl
 8014934:	f001 ff9c 	bl	8016870 <_localeconv_r>
 8014938:	6883      	ldr	r3, [r0, #8]
 801493a:	930a      	str	r3, [sp, #40]	; 0x28
 801493c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801493e:	212b      	movs	r1, #43	; 0x2b
 8014940:	b12b      	cbz	r3, 801494e <_svfprintf_r+0x1de>
 8014942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014944:	b11b      	cbz	r3, 801494e <_svfprintf_r+0x1de>
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	b10b      	cbz	r3, 801494e <_svfprintf_r+0x1de>
 801494a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 801494e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014950:	e775      	b.n	801483e <_svfprintf_r+0xce>
 8014952:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8014956:	2b00      	cmp	r3, #0
 8014958:	d1f9      	bne.n	801494e <_svfprintf_r+0x1de>
 801495a:	2320      	movs	r3, #32
 801495c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014960:	e7f5      	b.n	801494e <_svfprintf_r+0x1de>
 8014962:	f048 0801 	orr.w	r8, r8, #1
 8014966:	e7f2      	b.n	801494e <_svfprintf_r+0x1de>
 8014968:	f856 3b04 	ldr.w	r3, [r6], #4
 801496c:	9310      	str	r3, [sp, #64]	; 0x40
 801496e:	2b00      	cmp	r3, #0
 8014970:	daed      	bge.n	801494e <_svfprintf_r+0x1de>
 8014972:	425b      	negs	r3, r3
 8014974:	9310      	str	r3, [sp, #64]	; 0x40
 8014976:	f048 0804 	orr.w	r8, r8, #4
 801497a:	e7e8      	b.n	801494e <_svfprintf_r+0x1de>
 801497c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8014980:	e7e5      	b.n	801494e <_svfprintf_r+0x1de>
 8014982:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014984:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014988:	9307      	str	r3, [sp, #28]
 801498a:	2b2a      	cmp	r3, #42	; 0x2a
 801498c:	d113      	bne.n	80149b6 <_svfprintf_r+0x246>
 801498e:	f856 0b04 	ldr.w	r0, [r6], #4
 8014992:	920b      	str	r2, [sp, #44]	; 0x2c
 8014994:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8014998:	9304      	str	r3, [sp, #16]
 801499a:	e7d8      	b.n	801494e <_svfprintf_r+0x1de>
 801499c:	9804      	ldr	r0, [sp, #16]
 801499e:	fb07 3300 	mla	r3, r7, r0, r3
 80149a2:	9304      	str	r3, [sp, #16]
 80149a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80149a8:	9307      	str	r3, [sp, #28]
 80149aa:	9b07      	ldr	r3, [sp, #28]
 80149ac:	3b30      	subs	r3, #48	; 0x30
 80149ae:	2b09      	cmp	r3, #9
 80149b0:	d9f4      	bls.n	801499c <_svfprintf_r+0x22c>
 80149b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80149b4:	e748      	b.n	8014848 <_svfprintf_r+0xd8>
 80149b6:	2300      	movs	r3, #0
 80149b8:	9304      	str	r3, [sp, #16]
 80149ba:	e7f6      	b.n	80149aa <_svfprintf_r+0x23a>
 80149bc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80149c0:	e7c5      	b.n	801494e <_svfprintf_r+0x1de>
 80149c2:	2300      	movs	r3, #0
 80149c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80149c6:	9310      	str	r3, [sp, #64]	; 0x40
 80149c8:	9b07      	ldr	r3, [sp, #28]
 80149ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80149cc:	3b30      	subs	r3, #48	; 0x30
 80149ce:	fb07 3300 	mla	r3, r7, r0, r3
 80149d2:	9310      	str	r3, [sp, #64]	; 0x40
 80149d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80149d8:	9307      	str	r3, [sp, #28]
 80149da:	3b30      	subs	r3, #48	; 0x30
 80149dc:	2b09      	cmp	r3, #9
 80149de:	d9f3      	bls.n	80149c8 <_svfprintf_r+0x258>
 80149e0:	e7e7      	b.n	80149b2 <_svfprintf_r+0x242>
 80149e2:	f048 0808 	orr.w	r8, r8, #8
 80149e6:	e7b2      	b.n	801494e <_svfprintf_r+0x1de>
 80149e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	2b68      	cmp	r3, #104	; 0x68
 80149ee:	bf01      	itttt	eq
 80149f0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80149f2:	3301      	addeq	r3, #1
 80149f4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80149f6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80149fa:	bf18      	it	ne
 80149fc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8014a00:	e7a5      	b.n	801494e <_svfprintf_r+0x1de>
 8014a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	2b6c      	cmp	r3, #108	; 0x6c
 8014a08:	d105      	bne.n	8014a16 <_svfprintf_r+0x2a6>
 8014a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a0c:	3301      	adds	r3, #1
 8014a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a10:	f048 0820 	orr.w	r8, r8, #32
 8014a14:	e79b      	b.n	801494e <_svfprintf_r+0x1de>
 8014a16:	f048 0810 	orr.w	r8, r8, #16
 8014a1a:	e798      	b.n	801494e <_svfprintf_r+0x1de>
 8014a1c:	f3af 8000 	nop.w
	...
 8014a28:	4632      	mov	r2, r6
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	f852 3b04 	ldr.w	r3, [r2], #4
 8014a30:	9206      	str	r2, [sp, #24]
 8014a32:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8014a36:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8014a3a:	2301      	movs	r3, #1
 8014a3c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8014a40:	9003      	str	r0, [sp, #12]
 8014a42:	9304      	str	r3, [sp, #16]
 8014a44:	4606      	mov	r6, r0
 8014a46:	4605      	mov	r5, r0
 8014a48:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8014a4c:	e1b8      	b.n	8014dc0 <_svfprintf_r+0x650>
 8014a4e:	f048 0810 	orr.w	r8, r8, #16
 8014a52:	f018 0f20 	tst.w	r8, #32
 8014a56:	d012      	beq.n	8014a7e <_svfprintf_r+0x30e>
 8014a58:	3607      	adds	r6, #7
 8014a5a:	f026 0307 	bic.w	r3, r6, #7
 8014a5e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8014a62:	9306      	str	r3, [sp, #24]
 8014a64:	2e00      	cmp	r6, #0
 8014a66:	f177 0300 	sbcs.w	r3, r7, #0
 8014a6a:	da06      	bge.n	8014a7a <_svfprintf_r+0x30a>
 8014a6c:	4276      	negs	r6, r6
 8014a6e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8014a72:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8014a76:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e38e      	b.n	801519c <_svfprintf_r+0xa2c>
 8014a7e:	1d33      	adds	r3, r6, #4
 8014a80:	f018 0f10 	tst.w	r8, #16
 8014a84:	9306      	str	r3, [sp, #24]
 8014a86:	d002      	beq.n	8014a8e <_svfprintf_r+0x31e>
 8014a88:	6836      	ldr	r6, [r6, #0]
 8014a8a:	17f7      	asrs	r7, r6, #31
 8014a8c:	e7ea      	b.n	8014a64 <_svfprintf_r+0x2f4>
 8014a8e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8014a92:	6836      	ldr	r6, [r6, #0]
 8014a94:	d001      	beq.n	8014a9a <_svfprintf_r+0x32a>
 8014a96:	b236      	sxth	r6, r6
 8014a98:	e7f7      	b.n	8014a8a <_svfprintf_r+0x31a>
 8014a9a:	f418 7f00 	tst.w	r8, #512	; 0x200
 8014a9e:	bf18      	it	ne
 8014aa0:	b276      	sxtbne	r6, r6
 8014aa2:	e7f2      	b.n	8014a8a <_svfprintf_r+0x31a>
 8014aa4:	3607      	adds	r6, #7
 8014aa6:	f026 0307 	bic.w	r3, r6, #7
 8014aaa:	ecb3 7b02 	vldmia	r3!, {d7}
 8014aae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014ab2:	9306      	str	r3, [sp, #24]
 8014ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ab6:	ee09 3a10 	vmov	s18, r3
 8014aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ac0:	ee09 3a90 	vmov	s19, r3
 8014ac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ac8:	4b3a      	ldr	r3, [pc, #232]	; (8014bb4 <_svfprintf_r+0x444>)
 8014aca:	ec51 0b19 	vmov	r0, r1, d9
 8014ace:	f7ec f845 	bl	8000b5c <__aeabi_dcmpun>
 8014ad2:	bb10      	cbnz	r0, 8014b1a <_svfprintf_r+0x3aa>
 8014ad4:	4b37      	ldr	r3, [pc, #220]	; (8014bb4 <_svfprintf_r+0x444>)
 8014ad6:	ec51 0b19 	vmov	r0, r1, d9
 8014ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ade:	f7ec f81f 	bl	8000b20 <__aeabi_dcmple>
 8014ae2:	b9d0      	cbnz	r0, 8014b1a <_svfprintf_r+0x3aa>
 8014ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ae8:	2200      	movs	r2, #0
 8014aea:	2300      	movs	r3, #0
 8014aec:	f7ec f80e 	bl	8000b0c <__aeabi_dcmplt>
 8014af0:	b110      	cbz	r0, 8014af8 <_svfprintf_r+0x388>
 8014af2:	232d      	movs	r3, #45	; 0x2d
 8014af4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014af8:	4a2f      	ldr	r2, [pc, #188]	; (8014bb8 <_svfprintf_r+0x448>)
 8014afa:	4830      	ldr	r0, [pc, #192]	; (8014bbc <_svfprintf_r+0x44c>)
 8014afc:	9b07      	ldr	r3, [sp, #28]
 8014afe:	2100      	movs	r1, #0
 8014b00:	2b47      	cmp	r3, #71	; 0x47
 8014b02:	bfd4      	ite	le
 8014b04:	4693      	movle	fp, r2
 8014b06:	4683      	movgt	fp, r0
 8014b08:	2303      	movs	r3, #3
 8014b0a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8014b0e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8014b12:	2600      	movs	r6, #0
 8014b14:	4633      	mov	r3, r6
 8014b16:	f001 b802 	b.w	8015b1e <_svfprintf_r+0x13ae>
 8014b1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014b1e:	4610      	mov	r0, r2
 8014b20:	4619      	mov	r1, r3
 8014b22:	f7ec f81b 	bl	8000b5c <__aeabi_dcmpun>
 8014b26:	b140      	cbz	r0, 8014b3a <_svfprintf_r+0x3ca>
 8014b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b2a:	4a25      	ldr	r2, [pc, #148]	; (8014bc0 <_svfprintf_r+0x450>)
 8014b2c:	4825      	ldr	r0, [pc, #148]	; (8014bc4 <_svfprintf_r+0x454>)
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	bfbc      	itt	lt
 8014b32:	232d      	movlt	r3, #45	; 0x2d
 8014b34:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8014b38:	e7e0      	b.n	8014afc <_svfprintf_r+0x38c>
 8014b3a:	9b07      	ldr	r3, [sp, #28]
 8014b3c:	f023 0320 	bic.w	r3, r3, #32
 8014b40:	2b41      	cmp	r3, #65	; 0x41
 8014b42:	9308      	str	r3, [sp, #32]
 8014b44:	d125      	bne.n	8014b92 <_svfprintf_r+0x422>
 8014b46:	2330      	movs	r3, #48	; 0x30
 8014b48:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8014b4c:	9b07      	ldr	r3, [sp, #28]
 8014b4e:	2b61      	cmp	r3, #97	; 0x61
 8014b50:	bf0c      	ite	eq
 8014b52:	2378      	moveq	r3, #120	; 0x78
 8014b54:	2358      	movne	r3, #88	; 0x58
 8014b56:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	2b63      	cmp	r3, #99	; 0x63
 8014b5e:	f048 0802 	orr.w	r8, r8, #2
 8014b62:	dd31      	ble.n	8014bc8 <_svfprintf_r+0x458>
 8014b64:	1c59      	adds	r1, r3, #1
 8014b66:	4650      	mov	r0, sl
 8014b68:	f7ff f96e 	bl	8013e48 <_malloc_r>
 8014b6c:	4683      	mov	fp, r0
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	f040 81fe 	bne.w	8014f70 <_svfprintf_r+0x800>
 8014b74:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b7c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8014b80:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8014b84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b8a:	bf18      	it	ne
 8014b8c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8014b90:	e614      	b.n	80147bc <_svfprintf_r+0x4c>
 8014b92:	9b04      	ldr	r3, [sp, #16]
 8014b94:	3301      	adds	r3, #1
 8014b96:	f000 81ed 	beq.w	8014f74 <_svfprintf_r+0x804>
 8014b9a:	9b08      	ldr	r3, [sp, #32]
 8014b9c:	2b47      	cmp	r3, #71	; 0x47
 8014b9e:	f040 81ec 	bne.w	8014f7a <_svfprintf_r+0x80a>
 8014ba2:	9b04      	ldr	r3, [sp, #16]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	f040 81e8 	bne.w	8014f7a <_svfprintf_r+0x80a>
 8014baa:	9303      	str	r3, [sp, #12]
 8014bac:	2301      	movs	r3, #1
 8014bae:	9304      	str	r3, [sp, #16]
 8014bb0:	e00d      	b.n	8014bce <_svfprintf_r+0x45e>
 8014bb2:	bf00      	nop
 8014bb4:	7fefffff 	.word	0x7fefffff
 8014bb8:	0803935c 	.word	0x0803935c
 8014bbc:	08039360 	.word	0x08039360
 8014bc0:	08039364 	.word	0x08039364
 8014bc4:	08039368 	.word	0x08039368
 8014bc8:	9003      	str	r0, [sp, #12]
 8014bca:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 8014bce:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8014bd2:	9311      	str	r3, [sp, #68]	; 0x44
 8014bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f280 81d1 	bge.w	8014f7e <_svfprintf_r+0x80e>
 8014bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bde:	ee08 3a10 	vmov	s16, r3
 8014be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014be4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014be8:	ee08 3a90 	vmov	s17, r3
 8014bec:	232d      	movs	r3, #45	; 0x2d
 8014bee:	9318      	str	r3, [sp, #96]	; 0x60
 8014bf0:	9b08      	ldr	r3, [sp, #32]
 8014bf2:	2b41      	cmp	r3, #65	; 0x41
 8014bf4:	f040 81e1 	bne.w	8014fba <_svfprintf_r+0x84a>
 8014bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8014bfc:	eef0 0a68 	vmov.f32	s1, s17
 8014c00:	a81c      	add	r0, sp, #112	; 0x70
 8014c02:	f002 f969 	bl	8016ed8 <frexp>
 8014c06:	2200      	movs	r2, #0
 8014c08:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014c0c:	ec51 0b10 	vmov	r0, r1, d0
 8014c10:	f7eb fd0a 	bl	8000628 <__aeabi_dmul>
 8014c14:	2200      	movs	r2, #0
 8014c16:	2300      	movs	r3, #0
 8014c18:	4606      	mov	r6, r0
 8014c1a:	460f      	mov	r7, r1
 8014c1c:	f7eb ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 8014c20:	b108      	cbz	r0, 8014c26 <_svfprintf_r+0x4b6>
 8014c22:	2301      	movs	r3, #1
 8014c24:	931c      	str	r3, [sp, #112]	; 0x70
 8014c26:	4bb4      	ldr	r3, [pc, #720]	; (8014ef8 <_svfprintf_r+0x788>)
 8014c28:	4ab4      	ldr	r2, [pc, #720]	; (8014efc <_svfprintf_r+0x78c>)
 8014c2a:	9907      	ldr	r1, [sp, #28]
 8014c2c:	2961      	cmp	r1, #97	; 0x61
 8014c2e:	bf18      	it	ne
 8014c30:	461a      	movne	r2, r3
 8014c32:	9b04      	ldr	r3, [sp, #16]
 8014c34:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c36:	3b01      	subs	r3, #1
 8014c38:	9305      	str	r3, [sp, #20]
 8014c3a:	465d      	mov	r5, fp
 8014c3c:	4bb0      	ldr	r3, [pc, #704]	; (8014f00 <_svfprintf_r+0x790>)
 8014c3e:	2200      	movs	r2, #0
 8014c40:	4630      	mov	r0, r6
 8014c42:	4639      	mov	r1, r7
 8014c44:	f7eb fcf0 	bl	8000628 <__aeabi_dmul>
 8014c48:	460f      	mov	r7, r1
 8014c4a:	4606      	mov	r6, r0
 8014c4c:	f7eb ff9c 	bl	8000b88 <__aeabi_d2iz>
 8014c50:	9019      	str	r0, [sp, #100]	; 0x64
 8014c52:	f7eb fc7f 	bl	8000554 <__aeabi_i2d>
 8014c56:	4602      	mov	r2, r0
 8014c58:	460b      	mov	r3, r1
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	4639      	mov	r1, r7
 8014c5e:	f7eb fb2b 	bl	80002b8 <__aeabi_dsub>
 8014c62:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014c66:	5c9b      	ldrb	r3, [r3, r2]
 8014c68:	f805 3b01 	strb.w	r3, [r5], #1
 8014c6c:	9b05      	ldr	r3, [sp, #20]
 8014c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014c70:	1c5a      	adds	r2, r3, #1
 8014c72:	4606      	mov	r6, r0
 8014c74:	460f      	mov	r7, r1
 8014c76:	d007      	beq.n	8014c88 <_svfprintf_r+0x518>
 8014c78:	3b01      	subs	r3, #1
 8014c7a:	9305      	str	r3, [sp, #20]
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	2300      	movs	r3, #0
 8014c80:	f7eb ff3a 	bl	8000af8 <__aeabi_dcmpeq>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	d0d9      	beq.n	8014c3c <_svfprintf_r+0x4cc>
 8014c88:	4b9e      	ldr	r3, [pc, #632]	; (8014f04 <_svfprintf_r+0x794>)
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	4639      	mov	r1, r7
 8014c90:	f7eb ff5a 	bl	8000b48 <__aeabi_dcmpgt>
 8014c94:	b960      	cbnz	r0, 8014cb0 <_svfprintf_r+0x540>
 8014c96:	4b9b      	ldr	r3, [pc, #620]	; (8014f04 <_svfprintf_r+0x794>)
 8014c98:	2200      	movs	r2, #0
 8014c9a:	4630      	mov	r0, r6
 8014c9c:	4639      	mov	r1, r7
 8014c9e:	f7eb ff2b 	bl	8000af8 <__aeabi_dcmpeq>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	f000 8184 	beq.w	8014fb0 <_svfprintf_r+0x840>
 8014ca8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014caa:	07df      	lsls	r7, r3, #31
 8014cac:	f140 8180 	bpl.w	8014fb0 <_svfprintf_r+0x840>
 8014cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cb2:	9520      	str	r5, [sp, #128]	; 0x80
 8014cb4:	7bd9      	ldrb	r1, [r3, #15]
 8014cb6:	2030      	movs	r0, #48	; 0x30
 8014cb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014cba:	1e53      	subs	r3, r2, #1
 8014cbc:	9320      	str	r3, [sp, #128]	; 0x80
 8014cbe:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8014cc2:	428b      	cmp	r3, r1
 8014cc4:	f000 8163 	beq.w	8014f8e <_svfprintf_r+0x81e>
 8014cc8:	2b39      	cmp	r3, #57	; 0x39
 8014cca:	bf0b      	itete	eq
 8014ccc:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8014cce:	3301      	addne	r3, #1
 8014cd0:	7a9b      	ldrbeq	r3, [r3, #10]
 8014cd2:	b2db      	uxtbne	r3, r3
 8014cd4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014cd8:	eba5 030b 	sub.w	r3, r5, fp
 8014cdc:	9305      	str	r3, [sp, #20]
 8014cde:	9b08      	ldr	r3, [sp, #32]
 8014ce0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8014ce2:	2b47      	cmp	r3, #71	; 0x47
 8014ce4:	f040 81b1 	bne.w	801504a <_svfprintf_r+0x8da>
 8014ce8:	1cee      	adds	r6, r5, #3
 8014cea:	db03      	blt.n	8014cf4 <_svfprintf_r+0x584>
 8014cec:	9b04      	ldr	r3, [sp, #16]
 8014cee:	42ab      	cmp	r3, r5
 8014cf0:	f280 81d6 	bge.w	80150a0 <_svfprintf_r+0x930>
 8014cf4:	9b07      	ldr	r3, [sp, #28]
 8014cf6:	3b02      	subs	r3, #2
 8014cf8:	9307      	str	r3, [sp, #28]
 8014cfa:	9907      	ldr	r1, [sp, #28]
 8014cfc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8014d00:	f021 0120 	bic.w	r1, r1, #32
 8014d04:	2941      	cmp	r1, #65	; 0x41
 8014d06:	bf08      	it	eq
 8014d08:	320f      	addeq	r2, #15
 8014d0a:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8014d0e:	bf06      	itte	eq
 8014d10:	b2d2      	uxtbeq	r2, r2
 8014d12:	2101      	moveq	r1, #1
 8014d14:	2100      	movne	r1, #0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	931c      	str	r3, [sp, #112]	; 0x70
 8014d1a:	bfb8      	it	lt
 8014d1c:	f1c5 0301 	rsblt	r3, r5, #1
 8014d20:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8014d24:	bfb4      	ite	lt
 8014d26:	222d      	movlt	r2, #45	; 0x2d
 8014d28:	222b      	movge	r2, #43	; 0x2b
 8014d2a:	2b09      	cmp	r3, #9
 8014d2c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8014d30:	f340 81a4 	ble.w	801507c <_svfprintf_r+0x90c>
 8014d34:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8014d38:	260a      	movs	r6, #10
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	fb93 f5f6 	sdiv	r5, r3, r6
 8014d40:	fb06 3015 	mls	r0, r6, r5, r3
 8014d44:	3030      	adds	r0, #48	; 0x30
 8014d46:	f801 0c01 	strb.w	r0, [r1, #-1]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	2863      	cmp	r0, #99	; 0x63
 8014d4e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014d52:	462b      	mov	r3, r5
 8014d54:	dcf1      	bgt.n	8014d3a <_svfprintf_r+0x5ca>
 8014d56:	3330      	adds	r3, #48	; 0x30
 8014d58:	1e88      	subs	r0, r1, #2
 8014d5a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014d5e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8014d62:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8014d66:	4603      	mov	r3, r0
 8014d68:	42ab      	cmp	r3, r5
 8014d6a:	f0c0 8182 	bcc.w	8015072 <_svfprintf_r+0x902>
 8014d6e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8014d72:	1a52      	subs	r2, r2, r1
 8014d74:	42a8      	cmp	r0, r5
 8014d76:	bf88      	it	hi
 8014d78:	2200      	movhi	r2, #0
 8014d7a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8014d7e:	441a      	add	r2, r3
 8014d80:	ab1e      	add	r3, sp, #120	; 0x78
 8014d82:	1ad3      	subs	r3, r2, r3
 8014d84:	9a05      	ldr	r2, [sp, #20]
 8014d86:	9315      	str	r3, [sp, #84]	; 0x54
 8014d88:	2a01      	cmp	r2, #1
 8014d8a:	4413      	add	r3, r2
 8014d8c:	9304      	str	r3, [sp, #16]
 8014d8e:	dc02      	bgt.n	8014d96 <_svfprintf_r+0x626>
 8014d90:	f018 0f01 	tst.w	r8, #1
 8014d94:	d003      	beq.n	8014d9e <_svfprintf_r+0x62e>
 8014d96:	9b04      	ldr	r3, [sp, #16]
 8014d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d9a:	4413      	add	r3, r2
 8014d9c:	9304      	str	r3, [sp, #16]
 8014d9e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8014da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014da6:	9311      	str	r3, [sp, #68]	; 0x44
 8014da8:	2300      	movs	r3, #0
 8014daa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014dae:	461d      	mov	r5, r3
 8014db0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014db2:	b113      	cbz	r3, 8014dba <_svfprintf_r+0x64a>
 8014db4:	232d      	movs	r3, #45	; 0x2d
 8014db6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8014dba:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8014dbe:	2600      	movs	r6, #0
 8014dc0:	9b04      	ldr	r3, [sp, #16]
 8014dc2:	42b3      	cmp	r3, r6
 8014dc4:	bfb8      	it	lt
 8014dc6:	4633      	movlt	r3, r6
 8014dc8:	9311      	str	r3, [sp, #68]	; 0x44
 8014dca:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8014dce:	b113      	cbz	r3, 8014dd6 <_svfprintf_r+0x666>
 8014dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014dd2:	3301      	adds	r3, #1
 8014dd4:	9311      	str	r3, [sp, #68]	; 0x44
 8014dd6:	f018 0302 	ands.w	r3, r8, #2
 8014dda:	9317      	str	r3, [sp, #92]	; 0x5c
 8014ddc:	bf1e      	ittt	ne
 8014dde:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8014de0:	3302      	addne	r3, #2
 8014de2:	9311      	strne	r3, [sp, #68]	; 0x44
 8014de4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8014de8:	9318      	str	r3, [sp, #96]	; 0x60
 8014dea:	d11f      	bne.n	8014e2c <_svfprintf_r+0x6bc>
 8014dec:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8014df0:	1a9f      	subs	r7, r3, r2
 8014df2:	2f00      	cmp	r7, #0
 8014df4:	dd1a      	ble.n	8014e2c <_svfprintf_r+0x6bc>
 8014df6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014dfa:	4843      	ldr	r0, [pc, #268]	; (8014f08 <_svfprintf_r+0x798>)
 8014dfc:	6020      	str	r0, [r4, #0]
 8014dfe:	2f10      	cmp	r7, #16
 8014e00:	f103 0301 	add.w	r3, r3, #1
 8014e04:	f104 0108 	add.w	r1, r4, #8
 8014e08:	f300 82e6 	bgt.w	80153d8 <_svfprintf_r+0xc68>
 8014e0c:	6067      	str	r7, [r4, #4]
 8014e0e:	2b07      	cmp	r3, #7
 8014e10:	4417      	add	r7, r2
 8014e12:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8014e16:	f340 82f2 	ble.w	80153fe <_svfprintf_r+0xc8e>
 8014e1a:	aa22      	add	r2, sp, #136	; 0x88
 8014e1c:	4649      	mov	r1, r9
 8014e1e:	4650      	mov	r0, sl
 8014e20:	f002 f8a5 	bl	8016f6e <__ssprint_r>
 8014e24:	2800      	cmp	r0, #0
 8014e26:	f040 861d 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8014e2a:	ac25      	add	r4, sp, #148	; 0x94
 8014e2c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8014e30:	b173      	cbz	r3, 8014e50 <_svfprintf_r+0x6e0>
 8014e32:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8014e36:	6023      	str	r3, [r4, #0]
 8014e38:	2301      	movs	r3, #1
 8014e3a:	6063      	str	r3, [r4, #4]
 8014e3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014e3e:	3301      	adds	r3, #1
 8014e40:	9324      	str	r3, [sp, #144]	; 0x90
 8014e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e44:	3301      	adds	r3, #1
 8014e46:	2b07      	cmp	r3, #7
 8014e48:	9323      	str	r3, [sp, #140]	; 0x8c
 8014e4a:	f300 82da 	bgt.w	8015402 <_svfprintf_r+0xc92>
 8014e4e:	3408      	adds	r4, #8
 8014e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e52:	b16b      	cbz	r3, 8014e70 <_svfprintf_r+0x700>
 8014e54:	ab1b      	add	r3, sp, #108	; 0x6c
 8014e56:	6023      	str	r3, [r4, #0]
 8014e58:	2302      	movs	r3, #2
 8014e5a:	6063      	str	r3, [r4, #4]
 8014e5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014e5e:	3302      	adds	r3, #2
 8014e60:	9324      	str	r3, [sp, #144]	; 0x90
 8014e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014e64:	3301      	adds	r3, #1
 8014e66:	2b07      	cmp	r3, #7
 8014e68:	9323      	str	r3, [sp, #140]	; 0x8c
 8014e6a:	f300 82d4 	bgt.w	8015416 <_svfprintf_r+0xca6>
 8014e6e:	3408      	adds	r4, #8
 8014e70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014e72:	2b80      	cmp	r3, #128	; 0x80
 8014e74:	d11f      	bne.n	8014eb6 <_svfprintf_r+0x746>
 8014e76:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8014e7a:	1a9f      	subs	r7, r3, r2
 8014e7c:	2f00      	cmp	r7, #0
 8014e7e:	dd1a      	ble.n	8014eb6 <_svfprintf_r+0x746>
 8014e80:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014e84:	4821      	ldr	r0, [pc, #132]	; (8014f0c <_svfprintf_r+0x79c>)
 8014e86:	6020      	str	r0, [r4, #0]
 8014e88:	2f10      	cmp	r7, #16
 8014e8a:	f103 0301 	add.w	r3, r3, #1
 8014e8e:	f104 0108 	add.w	r1, r4, #8
 8014e92:	f300 82ca 	bgt.w	801542a <_svfprintf_r+0xcba>
 8014e96:	6067      	str	r7, [r4, #4]
 8014e98:	2b07      	cmp	r3, #7
 8014e9a:	4417      	add	r7, r2
 8014e9c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8014ea0:	f340 82d6 	ble.w	8015450 <_svfprintf_r+0xce0>
 8014ea4:	aa22      	add	r2, sp, #136	; 0x88
 8014ea6:	4649      	mov	r1, r9
 8014ea8:	4650      	mov	r0, sl
 8014eaa:	f002 f860 	bl	8016f6e <__ssprint_r>
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	f040 85d8 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8014eb4:	ac25      	add	r4, sp, #148	; 0x94
 8014eb6:	9b04      	ldr	r3, [sp, #16]
 8014eb8:	1af6      	subs	r6, r6, r3
 8014eba:	2e00      	cmp	r6, #0
 8014ebc:	dd28      	ble.n	8014f10 <_svfprintf_r+0x7a0>
 8014ebe:	4f13      	ldr	r7, [pc, #76]	; (8014f0c <_svfprintf_r+0x79c>)
 8014ec0:	6027      	str	r7, [r4, #0]
 8014ec2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8014ec6:	2e10      	cmp	r6, #16
 8014ec8:	f103 0301 	add.w	r3, r3, #1
 8014ecc:	f104 0108 	add.w	r1, r4, #8
 8014ed0:	f300 82c0 	bgt.w	8015454 <_svfprintf_r+0xce4>
 8014ed4:	6066      	str	r6, [r4, #4]
 8014ed6:	2b07      	cmp	r3, #7
 8014ed8:	4416      	add	r6, r2
 8014eda:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8014ede:	f340 82cc 	ble.w	801547a <_svfprintf_r+0xd0a>
 8014ee2:	aa22      	add	r2, sp, #136	; 0x88
 8014ee4:	4649      	mov	r1, r9
 8014ee6:	4650      	mov	r0, sl
 8014ee8:	f002 f841 	bl	8016f6e <__ssprint_r>
 8014eec:	2800      	cmp	r0, #0
 8014eee:	f040 85b9 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8014ef2:	ac25      	add	r4, sp, #148	; 0x94
 8014ef4:	e00c      	b.n	8014f10 <_svfprintf_r+0x7a0>
 8014ef6:	bf00      	nop
 8014ef8:	0803937d 	.word	0x0803937d
 8014efc:	0803936c 	.word	0x0803936c
 8014f00:	40300000 	.word	0x40300000
 8014f04:	3fe00000 	.word	0x3fe00000
 8014f08:	08039390 	.word	0x08039390
 8014f0c:	080393a0 	.word	0x080393a0
 8014f10:	f418 7f80 	tst.w	r8, #256	; 0x100
 8014f14:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014f16:	f040 82b7 	bne.w	8015488 <_svfprintf_r+0xd18>
 8014f1a:	9b04      	ldr	r3, [sp, #16]
 8014f1c:	f8c4 b000 	str.w	fp, [r4]
 8014f20:	441e      	add	r6, r3
 8014f22:	6063      	str	r3, [r4, #4]
 8014f24:	9624      	str	r6, [sp, #144]	; 0x90
 8014f26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f28:	3301      	adds	r3, #1
 8014f2a:	2b07      	cmp	r3, #7
 8014f2c:	9323      	str	r3, [sp, #140]	; 0x8c
 8014f2e:	f300 82f0 	bgt.w	8015512 <_svfprintf_r+0xda2>
 8014f32:	3408      	adds	r4, #8
 8014f34:	f018 0f04 	tst.w	r8, #4
 8014f38:	f040 8576 	bne.w	8015a28 <_svfprintf_r+0x12b8>
 8014f3c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8014f40:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014f42:	428a      	cmp	r2, r1
 8014f44:	bfac      	ite	ge
 8014f46:	189b      	addge	r3, r3, r2
 8014f48:	185b      	addlt	r3, r3, r1
 8014f4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014f4e:	b13b      	cbz	r3, 8014f60 <_svfprintf_r+0x7f0>
 8014f50:	aa22      	add	r2, sp, #136	; 0x88
 8014f52:	4649      	mov	r1, r9
 8014f54:	4650      	mov	r0, sl
 8014f56:	f002 f80a 	bl	8016f6e <__ssprint_r>
 8014f5a:	2800      	cmp	r0, #0
 8014f5c:	f040 8582 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8014f60:	2300      	movs	r3, #0
 8014f62:	9323      	str	r3, [sp, #140]	; 0x8c
 8014f64:	9b03      	ldr	r3, [sp, #12]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	f040 8598 	bne.w	8015a9c <_svfprintf_r+0x132c>
 8014f6c:	ac25      	add	r4, sp, #148	; 0x94
 8014f6e:	e0ed      	b.n	801514c <_svfprintf_r+0x9dc>
 8014f70:	9003      	str	r0, [sp, #12]
 8014f72:	e62c      	b.n	8014bce <_svfprintf_r+0x45e>
 8014f74:	9003      	str	r0, [sp, #12]
 8014f76:	2306      	movs	r3, #6
 8014f78:	e619      	b.n	8014bae <_svfprintf_r+0x43e>
 8014f7a:	9003      	str	r0, [sp, #12]
 8014f7c:	e627      	b.n	8014bce <_svfprintf_r+0x45e>
 8014f7e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8014f82:	2300      	movs	r3, #0
 8014f84:	eeb0 8a47 	vmov.f32	s16, s14
 8014f88:	eef0 8a67 	vmov.f32	s17, s15
 8014f8c:	e62f      	b.n	8014bee <_svfprintf_r+0x47e>
 8014f8e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8014f92:	e691      	b.n	8014cb8 <_svfprintf_r+0x548>
 8014f94:	f803 0b01 	strb.w	r0, [r3], #1
 8014f98:	1aca      	subs	r2, r1, r3
 8014f9a:	2a00      	cmp	r2, #0
 8014f9c:	dafa      	bge.n	8014f94 <_svfprintf_r+0x824>
 8014f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fa2:	3201      	adds	r2, #1
 8014fa4:	f103 0301 	add.w	r3, r3, #1
 8014fa8:	bfb8      	it	lt
 8014faa:	2300      	movlt	r3, #0
 8014fac:	441d      	add	r5, r3
 8014fae:	e693      	b.n	8014cd8 <_svfprintf_r+0x568>
 8014fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fb2:	462b      	mov	r3, r5
 8014fb4:	18a9      	adds	r1, r5, r2
 8014fb6:	2030      	movs	r0, #48	; 0x30
 8014fb8:	e7ee      	b.n	8014f98 <_svfprintf_r+0x828>
 8014fba:	9b08      	ldr	r3, [sp, #32]
 8014fbc:	2b46      	cmp	r3, #70	; 0x46
 8014fbe:	d005      	beq.n	8014fcc <_svfprintf_r+0x85c>
 8014fc0:	2b45      	cmp	r3, #69	; 0x45
 8014fc2:	d11b      	bne.n	8014ffc <_svfprintf_r+0x88c>
 8014fc4:	9b04      	ldr	r3, [sp, #16]
 8014fc6:	1c5d      	adds	r5, r3, #1
 8014fc8:	2102      	movs	r1, #2
 8014fca:	e001      	b.n	8014fd0 <_svfprintf_r+0x860>
 8014fcc:	9d04      	ldr	r5, [sp, #16]
 8014fce:	2103      	movs	r1, #3
 8014fd0:	ab20      	add	r3, sp, #128	; 0x80
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	ab1d      	add	r3, sp, #116	; 0x74
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	462a      	mov	r2, r5
 8014fda:	ab1c      	add	r3, sp, #112	; 0x70
 8014fdc:	4650      	mov	r0, sl
 8014fde:	eeb0 0a48 	vmov.f32	s0, s16
 8014fe2:	eef0 0a68 	vmov.f32	s1, s17
 8014fe6:	f000 fe6f 	bl	8015cc8 <_dtoa_r>
 8014fea:	9b08      	ldr	r3, [sp, #32]
 8014fec:	2b47      	cmp	r3, #71	; 0x47
 8014fee:	4683      	mov	fp, r0
 8014ff0:	d106      	bne.n	8015000 <_svfprintf_r+0x890>
 8014ff2:	f018 0f01 	tst.w	r8, #1
 8014ff6:	d103      	bne.n	8015000 <_svfprintf_r+0x890>
 8014ff8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8014ffa:	e66d      	b.n	8014cd8 <_svfprintf_r+0x568>
 8014ffc:	9d04      	ldr	r5, [sp, #16]
 8014ffe:	e7e3      	b.n	8014fc8 <_svfprintf_r+0x858>
 8015000:	9b08      	ldr	r3, [sp, #32]
 8015002:	2b46      	cmp	r3, #70	; 0x46
 8015004:	eb0b 0605 	add.w	r6, fp, r5
 8015008:	d10f      	bne.n	801502a <_svfprintf_r+0x8ba>
 801500a:	f89b 3000 	ldrb.w	r3, [fp]
 801500e:	2b30      	cmp	r3, #48	; 0x30
 8015010:	d109      	bne.n	8015026 <_svfprintf_r+0x8b6>
 8015012:	ec51 0b18 	vmov	r0, r1, d8
 8015016:	2200      	movs	r2, #0
 8015018:	2300      	movs	r3, #0
 801501a:	f7eb fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 801501e:	b910      	cbnz	r0, 8015026 <_svfprintf_r+0x8b6>
 8015020:	f1c5 0501 	rsb	r5, r5, #1
 8015024:	951c      	str	r5, [sp, #112]	; 0x70
 8015026:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015028:	441e      	add	r6, r3
 801502a:	ec51 0b18 	vmov	r0, r1, d8
 801502e:	2200      	movs	r2, #0
 8015030:	2300      	movs	r3, #0
 8015032:	f7eb fd61 	bl	8000af8 <__aeabi_dcmpeq>
 8015036:	b100      	cbz	r0, 801503a <_svfprintf_r+0x8ca>
 8015038:	9620      	str	r6, [sp, #128]	; 0x80
 801503a:	2230      	movs	r2, #48	; 0x30
 801503c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801503e:	429e      	cmp	r6, r3
 8015040:	d9da      	bls.n	8014ff8 <_svfprintf_r+0x888>
 8015042:	1c59      	adds	r1, r3, #1
 8015044:	9120      	str	r1, [sp, #128]	; 0x80
 8015046:	701a      	strb	r2, [r3, #0]
 8015048:	e7f8      	b.n	801503c <_svfprintf_r+0x8cc>
 801504a:	9b08      	ldr	r3, [sp, #32]
 801504c:	2b46      	cmp	r3, #70	; 0x46
 801504e:	f47f ae54 	bne.w	8014cfa <_svfprintf_r+0x58a>
 8015052:	9a04      	ldr	r2, [sp, #16]
 8015054:	f008 0301 	and.w	r3, r8, #1
 8015058:	2d00      	cmp	r5, #0
 801505a:	ea43 0302 	orr.w	r3, r3, r2
 801505e:	dd1a      	ble.n	8015096 <_svfprintf_r+0x926>
 8015060:	2b00      	cmp	r3, #0
 8015062:	d034      	beq.n	80150ce <_svfprintf_r+0x95e>
 8015064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015066:	18eb      	adds	r3, r5, r3
 8015068:	441a      	add	r2, r3
 801506a:	9204      	str	r2, [sp, #16]
 801506c:	2366      	movs	r3, #102	; 0x66
 801506e:	9307      	str	r3, [sp, #28]
 8015070:	e033      	b.n	80150da <_svfprintf_r+0x96a>
 8015072:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015076:	f802 6b01 	strb.w	r6, [r2], #1
 801507a:	e675      	b.n	8014d68 <_svfprintf_r+0x5f8>
 801507c:	b941      	cbnz	r1, 8015090 <_svfprintf_r+0x920>
 801507e:	2230      	movs	r2, #48	; 0x30
 8015080:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8015084:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8015088:	3330      	adds	r3, #48	; 0x30
 801508a:	f802 3b01 	strb.w	r3, [r2], #1
 801508e:	e677      	b.n	8014d80 <_svfprintf_r+0x610>
 8015090:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8015094:	e7f8      	b.n	8015088 <_svfprintf_r+0x918>
 8015096:	b1e3      	cbz	r3, 80150d2 <_svfprintf_r+0x962>
 8015098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801509a:	9a04      	ldr	r2, [sp, #16]
 801509c:	3301      	adds	r3, #1
 801509e:	e7e3      	b.n	8015068 <_svfprintf_r+0x8f8>
 80150a0:	9b05      	ldr	r3, [sp, #20]
 80150a2:	429d      	cmp	r5, r3
 80150a4:	db07      	blt.n	80150b6 <_svfprintf_r+0x946>
 80150a6:	f018 0f01 	tst.w	r8, #1
 80150aa:	d02d      	beq.n	8015108 <_svfprintf_r+0x998>
 80150ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150ae:	18eb      	adds	r3, r5, r3
 80150b0:	9304      	str	r3, [sp, #16]
 80150b2:	2367      	movs	r3, #103	; 0x67
 80150b4:	e7db      	b.n	801506e <_svfprintf_r+0x8fe>
 80150b6:	9b05      	ldr	r3, [sp, #20]
 80150b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150ba:	2d00      	cmp	r5, #0
 80150bc:	4413      	add	r3, r2
 80150be:	9304      	str	r3, [sp, #16]
 80150c0:	dcf7      	bgt.n	80150b2 <_svfprintf_r+0x942>
 80150c2:	9a04      	ldr	r2, [sp, #16]
 80150c4:	f1c5 0301 	rsb	r3, r5, #1
 80150c8:	441a      	add	r2, r3
 80150ca:	4613      	mov	r3, r2
 80150cc:	e7f0      	b.n	80150b0 <_svfprintf_r+0x940>
 80150ce:	9504      	str	r5, [sp, #16]
 80150d0:	e7cc      	b.n	801506c <_svfprintf_r+0x8fc>
 80150d2:	2366      	movs	r3, #102	; 0x66
 80150d4:	9307      	str	r3, [sp, #28]
 80150d6:	2301      	movs	r3, #1
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80150de:	9309      	str	r3, [sp, #36]	; 0x24
 80150e0:	d025      	beq.n	801512e <_svfprintf_r+0x9be>
 80150e2:	2300      	movs	r3, #0
 80150e4:	2d00      	cmp	r5, #0
 80150e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80150ea:	f77f ae61 	ble.w	8014db0 <_svfprintf_r+0x640>
 80150ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	2bff      	cmp	r3, #255	; 0xff
 80150f4:	d10a      	bne.n	801510c <_svfprintf_r+0x99c>
 80150f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80150fa:	9904      	ldr	r1, [sp, #16]
 80150fc:	4413      	add	r3, r2
 80150fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015100:	fb02 1303 	mla	r3, r2, r3, r1
 8015104:	9304      	str	r3, [sp, #16]
 8015106:	e653      	b.n	8014db0 <_svfprintf_r+0x640>
 8015108:	9504      	str	r5, [sp, #16]
 801510a:	e7d2      	b.n	80150b2 <_svfprintf_r+0x942>
 801510c:	42ab      	cmp	r3, r5
 801510e:	daf2      	bge.n	80150f6 <_svfprintf_r+0x986>
 8015110:	1aed      	subs	r5, r5, r3
 8015112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015114:	785b      	ldrb	r3, [r3, #1]
 8015116:	b133      	cbz	r3, 8015126 <_svfprintf_r+0x9b6>
 8015118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801511a:	3301      	adds	r3, #1
 801511c:	9309      	str	r3, [sp, #36]	; 0x24
 801511e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015120:	3301      	adds	r3, #1
 8015122:	930a      	str	r3, [sp, #40]	; 0x28
 8015124:	e7e3      	b.n	80150ee <_svfprintf_r+0x97e>
 8015126:	9b08      	ldr	r3, [sp, #32]
 8015128:	3301      	adds	r3, #1
 801512a:	9308      	str	r3, [sp, #32]
 801512c:	e7df      	b.n	80150ee <_svfprintf_r+0x97e>
 801512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015130:	9308      	str	r3, [sp, #32]
 8015132:	e63d      	b.n	8014db0 <_svfprintf_r+0x640>
 8015134:	4632      	mov	r2, r6
 8015136:	f018 0f20 	tst.w	r8, #32
 801513a:	f852 3b04 	ldr.w	r3, [r2], #4
 801513e:	9206      	str	r2, [sp, #24]
 8015140:	d009      	beq.n	8015156 <_svfprintf_r+0x9e6>
 8015142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015144:	4610      	mov	r0, r2
 8015146:	17d1      	asrs	r1, r2, #31
 8015148:	e9c3 0100 	strd	r0, r1, [r3]
 801514c:	9e06      	ldr	r6, [sp, #24]
 801514e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8015152:	f7ff bb4d 	b.w	80147f0 <_svfprintf_r+0x80>
 8015156:	f018 0f10 	tst.w	r8, #16
 801515a:	d002      	beq.n	8015162 <_svfprintf_r+0x9f2>
 801515c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801515e:	601a      	str	r2, [r3, #0]
 8015160:	e7f4      	b.n	801514c <_svfprintf_r+0x9dc>
 8015162:	f018 0f40 	tst.w	r8, #64	; 0x40
 8015166:	d002      	beq.n	801516e <_svfprintf_r+0x9fe>
 8015168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801516a:	801a      	strh	r2, [r3, #0]
 801516c:	e7ee      	b.n	801514c <_svfprintf_r+0x9dc>
 801516e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8015172:	d0f3      	beq.n	801515c <_svfprintf_r+0x9ec>
 8015174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015176:	701a      	strb	r2, [r3, #0]
 8015178:	e7e8      	b.n	801514c <_svfprintf_r+0x9dc>
 801517a:	f048 0810 	orr.w	r8, r8, #16
 801517e:	f018 0f20 	tst.w	r8, #32
 8015182:	d01e      	beq.n	80151c2 <_svfprintf_r+0xa52>
 8015184:	3607      	adds	r6, #7
 8015186:	f026 0307 	bic.w	r3, r6, #7
 801518a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801518e:	9306      	str	r3, [sp, #24]
 8015190:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8015194:	2300      	movs	r3, #0
 8015196:	2200      	movs	r2, #0
 8015198:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 801519c:	9a04      	ldr	r2, [sp, #16]
 801519e:	3201      	adds	r2, #1
 80151a0:	f000 848d 	beq.w	8015abe <_svfprintf_r+0x134e>
 80151a4:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80151a8:	9203      	str	r2, [sp, #12]
 80151aa:	ea56 0207 	orrs.w	r2, r6, r7
 80151ae:	f040 848c 	bne.w	8015aca <_svfprintf_r+0x135a>
 80151b2:	9a04      	ldr	r2, [sp, #16]
 80151b4:	2a00      	cmp	r2, #0
 80151b6:	f000 80f5 	beq.w	80153a4 <_svfprintf_r+0xc34>
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	f040 8488 	bne.w	8015ad0 <_svfprintf_r+0x1360>
 80151c0:	e097      	b.n	80152f2 <_svfprintf_r+0xb82>
 80151c2:	1d33      	adds	r3, r6, #4
 80151c4:	f018 0f10 	tst.w	r8, #16
 80151c8:	9306      	str	r3, [sp, #24]
 80151ca:	d001      	beq.n	80151d0 <_svfprintf_r+0xa60>
 80151cc:	6836      	ldr	r6, [r6, #0]
 80151ce:	e003      	b.n	80151d8 <_svfprintf_r+0xa68>
 80151d0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80151d4:	d002      	beq.n	80151dc <_svfprintf_r+0xa6c>
 80151d6:	8836      	ldrh	r6, [r6, #0]
 80151d8:	2700      	movs	r7, #0
 80151da:	e7d9      	b.n	8015190 <_svfprintf_r+0xa20>
 80151dc:	f418 7f00 	tst.w	r8, #512	; 0x200
 80151e0:	d0f4      	beq.n	80151cc <_svfprintf_r+0xa5c>
 80151e2:	7836      	ldrb	r6, [r6, #0]
 80151e4:	e7f8      	b.n	80151d8 <_svfprintf_r+0xa68>
 80151e6:	4633      	mov	r3, r6
 80151e8:	2278      	movs	r2, #120	; 0x78
 80151ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80151ee:	9306      	str	r3, [sp, #24]
 80151f0:	f647 0330 	movw	r3, #30768	; 0x7830
 80151f4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 80151f8:	4ba1      	ldr	r3, [pc, #644]	; (8015480 <_svfprintf_r+0xd10>)
 80151fa:	9316      	str	r3, [sp, #88]	; 0x58
 80151fc:	2700      	movs	r7, #0
 80151fe:	f048 0802 	orr.w	r8, r8, #2
 8015202:	2302      	movs	r3, #2
 8015204:	9207      	str	r2, [sp, #28]
 8015206:	e7c6      	b.n	8015196 <_svfprintf_r+0xa26>
 8015208:	4633      	mov	r3, r6
 801520a:	2500      	movs	r5, #0
 801520c:	f853 bb04 	ldr.w	fp, [r3], #4
 8015210:	9306      	str	r3, [sp, #24]
 8015212:	9b04      	ldr	r3, [sp, #16]
 8015214:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8015218:	1c59      	adds	r1, r3, #1
 801521a:	d010      	beq.n	801523e <_svfprintf_r+0xace>
 801521c:	461a      	mov	r2, r3
 801521e:	4629      	mov	r1, r5
 8015220:	4658      	mov	r0, fp
 8015222:	f7ea fff5 	bl	8000210 <memchr>
 8015226:	9003      	str	r0, [sp, #12]
 8015228:	2800      	cmp	r0, #0
 801522a:	f000 80d2 	beq.w	80153d2 <_svfprintf_r+0xc62>
 801522e:	eba0 030b 	sub.w	r3, r0, fp
 8015232:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8015236:	e9cd 5508 	strd	r5, r5, [sp, #32]
 801523a:	462e      	mov	r6, r5
 801523c:	e5c0      	b.n	8014dc0 <_svfprintf_r+0x650>
 801523e:	4658      	mov	r0, fp
 8015240:	f7ea ffde 	bl	8000200 <strlen>
 8015244:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8015248:	e463      	b.n	8014b12 <_svfprintf_r+0x3a2>
 801524a:	f048 0810 	orr.w	r8, r8, #16
 801524e:	f018 0f20 	tst.w	r8, #32
 8015252:	d007      	beq.n	8015264 <_svfprintf_r+0xaf4>
 8015254:	3607      	adds	r6, #7
 8015256:	f026 0307 	bic.w	r3, r6, #7
 801525a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801525e:	9306      	str	r3, [sp, #24]
 8015260:	2301      	movs	r3, #1
 8015262:	e798      	b.n	8015196 <_svfprintf_r+0xa26>
 8015264:	1d33      	adds	r3, r6, #4
 8015266:	f018 0f10 	tst.w	r8, #16
 801526a:	9306      	str	r3, [sp, #24]
 801526c:	d001      	beq.n	8015272 <_svfprintf_r+0xb02>
 801526e:	6836      	ldr	r6, [r6, #0]
 8015270:	e003      	b.n	801527a <_svfprintf_r+0xb0a>
 8015272:	f018 0f40 	tst.w	r8, #64	; 0x40
 8015276:	d002      	beq.n	801527e <_svfprintf_r+0xb0e>
 8015278:	8836      	ldrh	r6, [r6, #0]
 801527a:	2700      	movs	r7, #0
 801527c:	e7f0      	b.n	8015260 <_svfprintf_r+0xaf0>
 801527e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8015282:	d0f4      	beq.n	801526e <_svfprintf_r+0xafe>
 8015284:	7836      	ldrb	r6, [r6, #0]
 8015286:	e7f8      	b.n	801527a <_svfprintf_r+0xb0a>
 8015288:	4b7e      	ldr	r3, [pc, #504]	; (8015484 <_svfprintf_r+0xd14>)
 801528a:	9316      	str	r3, [sp, #88]	; 0x58
 801528c:	f018 0f20 	tst.w	r8, #32
 8015290:	d019      	beq.n	80152c6 <_svfprintf_r+0xb56>
 8015292:	3607      	adds	r6, #7
 8015294:	f026 0307 	bic.w	r3, r6, #7
 8015298:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 801529c:	9306      	str	r3, [sp, #24]
 801529e:	f018 0f01 	tst.w	r8, #1
 80152a2:	d00a      	beq.n	80152ba <_svfprintf_r+0xb4a>
 80152a4:	ea56 0307 	orrs.w	r3, r6, r7
 80152a8:	d007      	beq.n	80152ba <_svfprintf_r+0xb4a>
 80152aa:	2330      	movs	r3, #48	; 0x30
 80152ac:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80152b0:	9b07      	ldr	r3, [sp, #28]
 80152b2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80152b6:	f048 0802 	orr.w	r8, r8, #2
 80152ba:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80152be:	2302      	movs	r3, #2
 80152c0:	e769      	b.n	8015196 <_svfprintf_r+0xa26>
 80152c2:	4b6f      	ldr	r3, [pc, #444]	; (8015480 <_svfprintf_r+0xd10>)
 80152c4:	e7e1      	b.n	801528a <_svfprintf_r+0xb1a>
 80152c6:	1d33      	adds	r3, r6, #4
 80152c8:	f018 0f10 	tst.w	r8, #16
 80152cc:	9306      	str	r3, [sp, #24]
 80152ce:	d001      	beq.n	80152d4 <_svfprintf_r+0xb64>
 80152d0:	6836      	ldr	r6, [r6, #0]
 80152d2:	e003      	b.n	80152dc <_svfprintf_r+0xb6c>
 80152d4:	f018 0f40 	tst.w	r8, #64	; 0x40
 80152d8:	d002      	beq.n	80152e0 <_svfprintf_r+0xb70>
 80152da:	8836      	ldrh	r6, [r6, #0]
 80152dc:	2700      	movs	r7, #0
 80152de:	e7de      	b.n	801529e <_svfprintf_r+0xb2e>
 80152e0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80152e4:	d0f4      	beq.n	80152d0 <_svfprintf_r+0xb60>
 80152e6:	7836      	ldrb	r6, [r6, #0]
 80152e8:	e7f8      	b.n	80152dc <_svfprintf_r+0xb6c>
 80152ea:	2f00      	cmp	r7, #0
 80152ec:	bf08      	it	eq
 80152ee:	2e0a      	cmpeq	r6, #10
 80152f0:	d206      	bcs.n	8015300 <_svfprintf_r+0xb90>
 80152f2:	3630      	adds	r6, #48	; 0x30
 80152f4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80152f8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 80152fc:	f000 bc06 	b.w	8015b0c <_svfprintf_r+0x139c>
 8015300:	2300      	movs	r3, #0
 8015302:	9305      	str	r3, [sp, #20]
 8015304:	9b03      	ldr	r3, [sp, #12]
 8015306:	ad4e      	add	r5, sp, #312	; 0x138
 8015308:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 801530c:	220a      	movs	r2, #10
 801530e:	2300      	movs	r3, #0
 8015310:	4630      	mov	r0, r6
 8015312:	4639      	mov	r1, r7
 8015314:	f7eb fc60 	bl	8000bd8 <__aeabi_uldivmod>
 8015318:	9b05      	ldr	r3, [sp, #20]
 801531a:	3230      	adds	r2, #48	; 0x30
 801531c:	3301      	adds	r3, #1
 801531e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8015322:	f805 2c01 	strb.w	r2, [r5, #-1]
 8015326:	9305      	str	r3, [sp, #20]
 8015328:	f1b8 0f00 	cmp.w	r8, #0
 801532c:	d019      	beq.n	8015362 <_svfprintf_r+0xbf2>
 801532e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015330:	9a05      	ldr	r2, [sp, #20]
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	429a      	cmp	r2, r3
 8015336:	d114      	bne.n	8015362 <_svfprintf_r+0xbf2>
 8015338:	2aff      	cmp	r2, #255	; 0xff
 801533a:	d012      	beq.n	8015362 <_svfprintf_r+0xbf2>
 801533c:	2f00      	cmp	r7, #0
 801533e:	bf08      	it	eq
 8015340:	2e0a      	cmpeq	r6, #10
 8015342:	d30e      	bcc.n	8015362 <_svfprintf_r+0xbf2>
 8015344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015346:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015348:	ebab 0b03 	sub.w	fp, fp, r3
 801534c:	461a      	mov	r2, r3
 801534e:	4658      	mov	r0, fp
 8015350:	f001 fdfa 	bl	8016f48 <strncpy>
 8015354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015356:	785d      	ldrb	r5, [r3, #1]
 8015358:	b195      	cbz	r5, 8015380 <_svfprintf_r+0xc10>
 801535a:	3301      	adds	r3, #1
 801535c:	930a      	str	r3, [sp, #40]	; 0x28
 801535e:	2300      	movs	r3, #0
 8015360:	9305      	str	r3, [sp, #20]
 8015362:	220a      	movs	r2, #10
 8015364:	2300      	movs	r3, #0
 8015366:	4630      	mov	r0, r6
 8015368:	4639      	mov	r1, r7
 801536a:	f7eb fc35 	bl	8000bd8 <__aeabi_uldivmod>
 801536e:	2f00      	cmp	r7, #0
 8015370:	bf08      	it	eq
 8015372:	2e0a      	cmpeq	r6, #10
 8015374:	f0c0 83ca 	bcc.w	8015b0c <_svfprintf_r+0x139c>
 8015378:	4606      	mov	r6, r0
 801537a:	460f      	mov	r7, r1
 801537c:	465d      	mov	r5, fp
 801537e:	e7c5      	b.n	801530c <_svfprintf_r+0xb9c>
 8015380:	9505      	str	r5, [sp, #20]
 8015382:	e7ee      	b.n	8015362 <_svfprintf_r+0xbf2>
 8015384:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015386:	f006 030f 	and.w	r3, r6, #15
 801538a:	5cd3      	ldrb	r3, [r2, r3]
 801538c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8015390:	0933      	lsrs	r3, r6, #4
 8015392:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8015396:	093a      	lsrs	r2, r7, #4
 8015398:	461e      	mov	r6, r3
 801539a:	4617      	mov	r7, r2
 801539c:	ea56 0307 	orrs.w	r3, r6, r7
 80153a0:	d1f0      	bne.n	8015384 <_svfprintf_r+0xc14>
 80153a2:	e3b3      	b.n	8015b0c <_svfprintf_r+0x139c>
 80153a4:	b933      	cbnz	r3, 80153b4 <_svfprintf_r+0xc44>
 80153a6:	f018 0f01 	tst.w	r8, #1
 80153aa:	d003      	beq.n	80153b4 <_svfprintf_r+0xc44>
 80153ac:	2330      	movs	r3, #48	; 0x30
 80153ae:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80153b2:	e7a1      	b.n	80152f8 <_svfprintf_r+0xb88>
 80153b4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80153b8:	e3a8      	b.n	8015b0c <_svfprintf_r+0x139c>
 80153ba:	9b07      	ldr	r3, [sp, #28]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	f000 8373 	beq.w	8015aa8 <_svfprintf_r+0x1338>
 80153c2:	2000      	movs	r0, #0
 80153c4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80153c8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 80153cc:	9606      	str	r6, [sp, #24]
 80153ce:	f7ff bb34 	b.w	8014a3a <_svfprintf_r+0x2ca>
 80153d2:	9e03      	ldr	r6, [sp, #12]
 80153d4:	f7ff bb9e 	b.w	8014b14 <_svfprintf_r+0x3a4>
 80153d8:	2010      	movs	r0, #16
 80153da:	4402      	add	r2, r0
 80153dc:	2b07      	cmp	r3, #7
 80153de:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80153e2:	6060      	str	r0, [r4, #4]
 80153e4:	dd08      	ble.n	80153f8 <_svfprintf_r+0xc88>
 80153e6:	aa22      	add	r2, sp, #136	; 0x88
 80153e8:	4649      	mov	r1, r9
 80153ea:	4650      	mov	r0, sl
 80153ec:	f001 fdbf 	bl	8016f6e <__ssprint_r>
 80153f0:	2800      	cmp	r0, #0
 80153f2:	f040 8337 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80153f6:	a925      	add	r1, sp, #148	; 0x94
 80153f8:	3f10      	subs	r7, #16
 80153fa:	460c      	mov	r4, r1
 80153fc:	e4fb      	b.n	8014df6 <_svfprintf_r+0x686>
 80153fe:	460c      	mov	r4, r1
 8015400:	e514      	b.n	8014e2c <_svfprintf_r+0x6bc>
 8015402:	aa22      	add	r2, sp, #136	; 0x88
 8015404:	4649      	mov	r1, r9
 8015406:	4650      	mov	r0, sl
 8015408:	f001 fdb1 	bl	8016f6e <__ssprint_r>
 801540c:	2800      	cmp	r0, #0
 801540e:	f040 8329 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015412:	ac25      	add	r4, sp, #148	; 0x94
 8015414:	e51c      	b.n	8014e50 <_svfprintf_r+0x6e0>
 8015416:	aa22      	add	r2, sp, #136	; 0x88
 8015418:	4649      	mov	r1, r9
 801541a:	4650      	mov	r0, sl
 801541c:	f001 fda7 	bl	8016f6e <__ssprint_r>
 8015420:	2800      	cmp	r0, #0
 8015422:	f040 831f 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015426:	ac25      	add	r4, sp, #148	; 0x94
 8015428:	e522      	b.n	8014e70 <_svfprintf_r+0x700>
 801542a:	2010      	movs	r0, #16
 801542c:	4402      	add	r2, r0
 801542e:	2b07      	cmp	r3, #7
 8015430:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015434:	6060      	str	r0, [r4, #4]
 8015436:	dd08      	ble.n	801544a <_svfprintf_r+0xcda>
 8015438:	aa22      	add	r2, sp, #136	; 0x88
 801543a:	4649      	mov	r1, r9
 801543c:	4650      	mov	r0, sl
 801543e:	f001 fd96 	bl	8016f6e <__ssprint_r>
 8015442:	2800      	cmp	r0, #0
 8015444:	f040 830e 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015448:	a925      	add	r1, sp, #148	; 0x94
 801544a:	3f10      	subs	r7, #16
 801544c:	460c      	mov	r4, r1
 801544e:	e517      	b.n	8014e80 <_svfprintf_r+0x710>
 8015450:	460c      	mov	r4, r1
 8015452:	e530      	b.n	8014eb6 <_svfprintf_r+0x746>
 8015454:	2010      	movs	r0, #16
 8015456:	4402      	add	r2, r0
 8015458:	2b07      	cmp	r3, #7
 801545a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 801545e:	6060      	str	r0, [r4, #4]
 8015460:	dd08      	ble.n	8015474 <_svfprintf_r+0xd04>
 8015462:	aa22      	add	r2, sp, #136	; 0x88
 8015464:	4649      	mov	r1, r9
 8015466:	4650      	mov	r0, sl
 8015468:	f001 fd81 	bl	8016f6e <__ssprint_r>
 801546c:	2800      	cmp	r0, #0
 801546e:	f040 82f9 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015472:	a925      	add	r1, sp, #148	; 0x94
 8015474:	3e10      	subs	r6, #16
 8015476:	460c      	mov	r4, r1
 8015478:	e522      	b.n	8014ec0 <_svfprintf_r+0x750>
 801547a:	460c      	mov	r4, r1
 801547c:	e548      	b.n	8014f10 <_svfprintf_r+0x7a0>
 801547e:	bf00      	nop
 8015480:	0803936c 	.word	0x0803936c
 8015484:	0803937d 	.word	0x0803937d
 8015488:	9b07      	ldr	r3, [sp, #28]
 801548a:	2b65      	cmp	r3, #101	; 0x65
 801548c:	f340 8232 	ble.w	80158f4 <_svfprintf_r+0x1184>
 8015490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015494:	2200      	movs	r2, #0
 8015496:	2300      	movs	r3, #0
 8015498:	f7eb fb2e 	bl	8000af8 <__aeabi_dcmpeq>
 801549c:	2800      	cmp	r0, #0
 801549e:	d068      	beq.n	8015572 <_svfprintf_r+0xe02>
 80154a0:	4b6d      	ldr	r3, [pc, #436]	; (8015658 <_svfprintf_r+0xee8>)
 80154a2:	6023      	str	r3, [r4, #0]
 80154a4:	2301      	movs	r3, #1
 80154a6:	441e      	add	r6, r3
 80154a8:	6063      	str	r3, [r4, #4]
 80154aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80154ac:	9624      	str	r6, [sp, #144]	; 0x90
 80154ae:	3301      	adds	r3, #1
 80154b0:	2b07      	cmp	r3, #7
 80154b2:	9323      	str	r3, [sp, #140]	; 0x8c
 80154b4:	dc37      	bgt.n	8015526 <_svfprintf_r+0xdb6>
 80154b6:	3408      	adds	r4, #8
 80154b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80154ba:	9a05      	ldr	r2, [sp, #20]
 80154bc:	4293      	cmp	r3, r2
 80154be:	db03      	blt.n	80154c8 <_svfprintf_r+0xd58>
 80154c0:	f018 0f01 	tst.w	r8, #1
 80154c4:	f43f ad36 	beq.w	8014f34 <_svfprintf_r+0x7c4>
 80154c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154ca:	6023      	str	r3, [r4, #0]
 80154cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154d0:	6063      	str	r3, [r4, #4]
 80154d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80154d4:	4413      	add	r3, r2
 80154d6:	9324      	str	r3, [sp, #144]	; 0x90
 80154d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80154da:	3301      	adds	r3, #1
 80154dc:	2b07      	cmp	r3, #7
 80154de:	9323      	str	r3, [sp, #140]	; 0x8c
 80154e0:	dc2b      	bgt.n	801553a <_svfprintf_r+0xdca>
 80154e2:	3408      	adds	r4, #8
 80154e4:	9b05      	ldr	r3, [sp, #20]
 80154e6:	1e5d      	subs	r5, r3, #1
 80154e8:	2d00      	cmp	r5, #0
 80154ea:	f77f ad23 	ble.w	8014f34 <_svfprintf_r+0x7c4>
 80154ee:	4e5b      	ldr	r6, [pc, #364]	; (801565c <_svfprintf_r+0xeec>)
 80154f0:	2710      	movs	r7, #16
 80154f2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80154f6:	2d10      	cmp	r5, #16
 80154f8:	f103 0301 	add.w	r3, r3, #1
 80154fc:	f104 0108 	add.w	r1, r4, #8
 8015500:	6026      	str	r6, [r4, #0]
 8015502:	dc24      	bgt.n	801554e <_svfprintf_r+0xdde>
 8015504:	6065      	str	r5, [r4, #4]
 8015506:	2b07      	cmp	r3, #7
 8015508:	4415      	add	r5, r2
 801550a:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 801550e:	f340 8288 	ble.w	8015a22 <_svfprintf_r+0x12b2>
 8015512:	aa22      	add	r2, sp, #136	; 0x88
 8015514:	4649      	mov	r1, r9
 8015516:	4650      	mov	r0, sl
 8015518:	f001 fd29 	bl	8016f6e <__ssprint_r>
 801551c:	2800      	cmp	r0, #0
 801551e:	f040 82a1 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015522:	ac25      	add	r4, sp, #148	; 0x94
 8015524:	e506      	b.n	8014f34 <_svfprintf_r+0x7c4>
 8015526:	aa22      	add	r2, sp, #136	; 0x88
 8015528:	4649      	mov	r1, r9
 801552a:	4650      	mov	r0, sl
 801552c:	f001 fd1f 	bl	8016f6e <__ssprint_r>
 8015530:	2800      	cmp	r0, #0
 8015532:	f040 8297 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015536:	ac25      	add	r4, sp, #148	; 0x94
 8015538:	e7be      	b.n	80154b8 <_svfprintf_r+0xd48>
 801553a:	aa22      	add	r2, sp, #136	; 0x88
 801553c:	4649      	mov	r1, r9
 801553e:	4650      	mov	r0, sl
 8015540:	f001 fd15 	bl	8016f6e <__ssprint_r>
 8015544:	2800      	cmp	r0, #0
 8015546:	f040 828d 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801554a:	ac25      	add	r4, sp, #148	; 0x94
 801554c:	e7ca      	b.n	80154e4 <_svfprintf_r+0xd74>
 801554e:	3210      	adds	r2, #16
 8015550:	2b07      	cmp	r3, #7
 8015552:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015556:	6067      	str	r7, [r4, #4]
 8015558:	dd08      	ble.n	801556c <_svfprintf_r+0xdfc>
 801555a:	aa22      	add	r2, sp, #136	; 0x88
 801555c:	4649      	mov	r1, r9
 801555e:	4650      	mov	r0, sl
 8015560:	f001 fd05 	bl	8016f6e <__ssprint_r>
 8015564:	2800      	cmp	r0, #0
 8015566:	f040 827d 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801556a:	a925      	add	r1, sp, #148	; 0x94
 801556c:	3d10      	subs	r5, #16
 801556e:	460c      	mov	r4, r1
 8015570:	e7bf      	b.n	80154f2 <_svfprintf_r+0xd82>
 8015572:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015574:	2b00      	cmp	r3, #0
 8015576:	dc73      	bgt.n	8015660 <_svfprintf_r+0xef0>
 8015578:	4b37      	ldr	r3, [pc, #220]	; (8015658 <_svfprintf_r+0xee8>)
 801557a:	6023      	str	r3, [r4, #0]
 801557c:	2301      	movs	r3, #1
 801557e:	441e      	add	r6, r3
 8015580:	6063      	str	r3, [r4, #4]
 8015582:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015584:	9624      	str	r6, [sp, #144]	; 0x90
 8015586:	3301      	adds	r3, #1
 8015588:	2b07      	cmp	r3, #7
 801558a:	9323      	str	r3, [sp, #140]	; 0x8c
 801558c:	dc3d      	bgt.n	801560a <_svfprintf_r+0xe9a>
 801558e:	3408      	adds	r4, #8
 8015590:	9905      	ldr	r1, [sp, #20]
 8015592:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015594:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015596:	430a      	orrs	r2, r1
 8015598:	f008 0101 	and.w	r1, r8, #1
 801559c:	430a      	orrs	r2, r1
 801559e:	f43f acc9 	beq.w	8014f34 <_svfprintf_r+0x7c4>
 80155a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155a4:	6022      	str	r2, [r4, #0]
 80155a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155a8:	6062      	str	r2, [r4, #4]
 80155aa:	4413      	add	r3, r2
 80155ac:	9324      	str	r3, [sp, #144]	; 0x90
 80155ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80155b0:	3301      	adds	r3, #1
 80155b2:	2b07      	cmp	r3, #7
 80155b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80155b6:	dc32      	bgt.n	801561e <_svfprintf_r+0xeae>
 80155b8:	3408      	adds	r4, #8
 80155ba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80155bc:	2d00      	cmp	r5, #0
 80155be:	da1b      	bge.n	80155f8 <_svfprintf_r+0xe88>
 80155c0:	4e26      	ldr	r6, [pc, #152]	; (801565c <_svfprintf_r+0xeec>)
 80155c2:	426d      	negs	r5, r5
 80155c4:	4623      	mov	r3, r4
 80155c6:	2710      	movs	r7, #16
 80155c8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80155cc:	2d10      	cmp	r5, #16
 80155ce:	f102 0201 	add.w	r2, r2, #1
 80155d2:	f104 0408 	add.w	r4, r4, #8
 80155d6:	601e      	str	r6, [r3, #0]
 80155d8:	dc2b      	bgt.n	8015632 <_svfprintf_r+0xec2>
 80155da:	605d      	str	r5, [r3, #4]
 80155dc:	2a07      	cmp	r2, #7
 80155de:	440d      	add	r5, r1
 80155e0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80155e4:	dd08      	ble.n	80155f8 <_svfprintf_r+0xe88>
 80155e6:	aa22      	add	r2, sp, #136	; 0x88
 80155e8:	4649      	mov	r1, r9
 80155ea:	4650      	mov	r0, sl
 80155ec:	f001 fcbf 	bl	8016f6e <__ssprint_r>
 80155f0:	2800      	cmp	r0, #0
 80155f2:	f040 8237 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80155f6:	ac25      	add	r4, sp, #148	; 0x94
 80155f8:	9b05      	ldr	r3, [sp, #20]
 80155fa:	9a05      	ldr	r2, [sp, #20]
 80155fc:	6063      	str	r3, [r4, #4]
 80155fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015600:	f8c4 b000 	str.w	fp, [r4]
 8015604:	4413      	add	r3, r2
 8015606:	9324      	str	r3, [sp, #144]	; 0x90
 8015608:	e48d      	b.n	8014f26 <_svfprintf_r+0x7b6>
 801560a:	aa22      	add	r2, sp, #136	; 0x88
 801560c:	4649      	mov	r1, r9
 801560e:	4650      	mov	r0, sl
 8015610:	f001 fcad 	bl	8016f6e <__ssprint_r>
 8015614:	2800      	cmp	r0, #0
 8015616:	f040 8225 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801561a:	ac25      	add	r4, sp, #148	; 0x94
 801561c:	e7b8      	b.n	8015590 <_svfprintf_r+0xe20>
 801561e:	aa22      	add	r2, sp, #136	; 0x88
 8015620:	4649      	mov	r1, r9
 8015622:	4650      	mov	r0, sl
 8015624:	f001 fca3 	bl	8016f6e <__ssprint_r>
 8015628:	2800      	cmp	r0, #0
 801562a:	f040 821b 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801562e:	ac25      	add	r4, sp, #148	; 0x94
 8015630:	e7c3      	b.n	80155ba <_svfprintf_r+0xe4a>
 8015632:	3110      	adds	r1, #16
 8015634:	2a07      	cmp	r2, #7
 8015636:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 801563a:	605f      	str	r7, [r3, #4]
 801563c:	dd08      	ble.n	8015650 <_svfprintf_r+0xee0>
 801563e:	aa22      	add	r2, sp, #136	; 0x88
 8015640:	4649      	mov	r1, r9
 8015642:	4650      	mov	r0, sl
 8015644:	f001 fc93 	bl	8016f6e <__ssprint_r>
 8015648:	2800      	cmp	r0, #0
 801564a:	f040 820b 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801564e:	ac25      	add	r4, sp, #148	; 0x94
 8015650:	3d10      	subs	r5, #16
 8015652:	4623      	mov	r3, r4
 8015654:	e7b8      	b.n	80155c8 <_svfprintf_r+0xe58>
 8015656:	bf00      	nop
 8015658:	0803938e 	.word	0x0803938e
 801565c:	080393a0 	.word	0x080393a0
 8015660:	9b05      	ldr	r3, [sp, #20]
 8015662:	42ab      	cmp	r3, r5
 8015664:	bfa8      	it	ge
 8015666:	462b      	movge	r3, r5
 8015668:	2b00      	cmp	r3, #0
 801566a:	461f      	mov	r7, r3
 801566c:	dd0a      	ble.n	8015684 <_svfprintf_r+0xf14>
 801566e:	441e      	add	r6, r3
 8015670:	e9c4 b300 	strd	fp, r3, [r4]
 8015674:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015676:	9624      	str	r6, [sp, #144]	; 0x90
 8015678:	3301      	adds	r3, #1
 801567a:	2b07      	cmp	r3, #7
 801567c:	9323      	str	r3, [sp, #140]	; 0x8c
 801567e:	f300 8086 	bgt.w	801578e <_svfprintf_r+0x101e>
 8015682:	3408      	adds	r4, #8
 8015684:	2f00      	cmp	r7, #0
 8015686:	bfac      	ite	ge
 8015688:	1bee      	subge	r6, r5, r7
 801568a:	462e      	movlt	r6, r5
 801568c:	2e00      	cmp	r6, #0
 801568e:	dd19      	ble.n	80156c4 <_svfprintf_r+0xf54>
 8015690:	4f97      	ldr	r7, [pc, #604]	; (80158f0 <_svfprintf_r+0x1180>)
 8015692:	6027      	str	r7, [r4, #0]
 8015694:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015698:	2e10      	cmp	r6, #16
 801569a:	f103 0301 	add.w	r3, r3, #1
 801569e:	f104 0108 	add.w	r1, r4, #8
 80156a2:	dc7e      	bgt.n	80157a2 <_svfprintf_r+0x1032>
 80156a4:	6066      	str	r6, [r4, #4]
 80156a6:	2b07      	cmp	r3, #7
 80156a8:	4416      	add	r6, r2
 80156aa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80156ae:	f340 808b 	ble.w	80157c8 <_svfprintf_r+0x1058>
 80156b2:	aa22      	add	r2, sp, #136	; 0x88
 80156b4:	4649      	mov	r1, r9
 80156b6:	4650      	mov	r0, sl
 80156b8:	f001 fc59 	bl	8016f6e <__ssprint_r>
 80156bc:	2800      	cmp	r0, #0
 80156be:	f040 81d1 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80156c2:	ac25      	add	r4, sp, #148	; 0x94
 80156c4:	f418 6f80 	tst.w	r8, #1024	; 0x400
 80156c8:	445d      	add	r5, fp
 80156ca:	d00b      	beq.n	80156e4 <_svfprintf_r+0xf74>
 80156cc:	4e88      	ldr	r6, [pc, #544]	; (80158f0 <_svfprintf_r+0x1180>)
 80156ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d17b      	bne.n	80157cc <_svfprintf_r+0x105c>
 80156d4:	9b08      	ldr	r3, [sp, #32]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d17b      	bne.n	80157d2 <_svfprintf_r+0x1062>
 80156da:	9b05      	ldr	r3, [sp, #20]
 80156dc:	445b      	add	r3, fp
 80156de:	429d      	cmp	r5, r3
 80156e0:	bf28      	it	cs
 80156e2:	461d      	movcs	r5, r3
 80156e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80156e6:	9a05      	ldr	r2, [sp, #20]
 80156e8:	4293      	cmp	r3, r2
 80156ea:	db02      	blt.n	80156f2 <_svfprintf_r+0xf82>
 80156ec:	f018 0f01 	tst.w	r8, #1
 80156f0:	d00e      	beq.n	8015710 <_svfprintf_r+0xfa0>
 80156f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80156f4:	6023      	str	r3, [r4, #0]
 80156f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80156f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156fa:	6063      	str	r3, [r4, #4]
 80156fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80156fe:	4413      	add	r3, r2
 8015700:	9324      	str	r3, [sp, #144]	; 0x90
 8015702:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015704:	3301      	adds	r3, #1
 8015706:	2b07      	cmp	r3, #7
 8015708:	9323      	str	r3, [sp, #140]	; 0x8c
 801570a:	f300 80dd 	bgt.w	80158c8 <_svfprintf_r+0x1158>
 801570e:	3408      	adds	r4, #8
 8015710:	9b05      	ldr	r3, [sp, #20]
 8015712:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8015714:	eb0b 0203 	add.w	r2, fp, r3
 8015718:	1b9e      	subs	r6, r3, r6
 801571a:	1b52      	subs	r2, r2, r5
 801571c:	4296      	cmp	r6, r2
 801571e:	bfa8      	it	ge
 8015720:	4616      	movge	r6, r2
 8015722:	2e00      	cmp	r6, #0
 8015724:	dd0b      	ble.n	801573e <_svfprintf_r+0xfce>
 8015726:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015728:	4433      	add	r3, r6
 801572a:	9324      	str	r3, [sp, #144]	; 0x90
 801572c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801572e:	3301      	adds	r3, #1
 8015730:	2b07      	cmp	r3, #7
 8015732:	e9c4 5600 	strd	r5, r6, [r4]
 8015736:	9323      	str	r3, [sp, #140]	; 0x8c
 8015738:	f300 80d0 	bgt.w	80158dc <_svfprintf_r+0x116c>
 801573c:	3408      	adds	r4, #8
 801573e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8015740:	9b05      	ldr	r3, [sp, #20]
 8015742:	2e00      	cmp	r6, #0
 8015744:	eba3 0505 	sub.w	r5, r3, r5
 8015748:	bfa8      	it	ge
 801574a:	1bad      	subge	r5, r5, r6
 801574c:	2d00      	cmp	r5, #0
 801574e:	f77f abf1 	ble.w	8014f34 <_svfprintf_r+0x7c4>
 8015752:	4e67      	ldr	r6, [pc, #412]	; (80158f0 <_svfprintf_r+0x1180>)
 8015754:	2710      	movs	r7, #16
 8015756:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 801575a:	2d10      	cmp	r5, #16
 801575c:	f103 0301 	add.w	r3, r3, #1
 8015760:	f104 0108 	add.w	r1, r4, #8
 8015764:	6026      	str	r6, [r4, #0]
 8015766:	f77f aecd 	ble.w	8015504 <_svfprintf_r+0xd94>
 801576a:	3210      	adds	r2, #16
 801576c:	2b07      	cmp	r3, #7
 801576e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015772:	6067      	str	r7, [r4, #4]
 8015774:	dd08      	ble.n	8015788 <_svfprintf_r+0x1018>
 8015776:	aa22      	add	r2, sp, #136	; 0x88
 8015778:	4649      	mov	r1, r9
 801577a:	4650      	mov	r0, sl
 801577c:	f001 fbf7 	bl	8016f6e <__ssprint_r>
 8015780:	2800      	cmp	r0, #0
 8015782:	f040 816f 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015786:	a925      	add	r1, sp, #148	; 0x94
 8015788:	3d10      	subs	r5, #16
 801578a:	460c      	mov	r4, r1
 801578c:	e7e3      	b.n	8015756 <_svfprintf_r+0xfe6>
 801578e:	aa22      	add	r2, sp, #136	; 0x88
 8015790:	4649      	mov	r1, r9
 8015792:	4650      	mov	r0, sl
 8015794:	f001 fbeb 	bl	8016f6e <__ssprint_r>
 8015798:	2800      	cmp	r0, #0
 801579a:	f040 8163 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801579e:	ac25      	add	r4, sp, #148	; 0x94
 80157a0:	e770      	b.n	8015684 <_svfprintf_r+0xf14>
 80157a2:	2010      	movs	r0, #16
 80157a4:	4402      	add	r2, r0
 80157a6:	2b07      	cmp	r3, #7
 80157a8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80157ac:	6060      	str	r0, [r4, #4]
 80157ae:	dd08      	ble.n	80157c2 <_svfprintf_r+0x1052>
 80157b0:	aa22      	add	r2, sp, #136	; 0x88
 80157b2:	4649      	mov	r1, r9
 80157b4:	4650      	mov	r0, sl
 80157b6:	f001 fbda 	bl	8016f6e <__ssprint_r>
 80157ba:	2800      	cmp	r0, #0
 80157bc:	f040 8152 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80157c0:	a925      	add	r1, sp, #148	; 0x94
 80157c2:	3e10      	subs	r6, #16
 80157c4:	460c      	mov	r4, r1
 80157c6:	e764      	b.n	8015692 <_svfprintf_r+0xf22>
 80157c8:	460c      	mov	r4, r1
 80157ca:	e77b      	b.n	80156c4 <_svfprintf_r+0xf54>
 80157cc:	9b08      	ldr	r3, [sp, #32]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d04a      	beq.n	8015868 <_svfprintf_r+0x10f8>
 80157d2:	9b08      	ldr	r3, [sp, #32]
 80157d4:	3b01      	subs	r3, #1
 80157d6:	9308      	str	r3, [sp, #32]
 80157d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157da:	6023      	str	r3, [r4, #0]
 80157dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157e0:	6063      	str	r3, [r4, #4]
 80157e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80157e4:	4413      	add	r3, r2
 80157e6:	9324      	str	r3, [sp, #144]	; 0x90
 80157e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80157ea:	3301      	adds	r3, #1
 80157ec:	2b07      	cmp	r3, #7
 80157ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80157f0:	dc41      	bgt.n	8015876 <_svfprintf_r+0x1106>
 80157f2:	3408      	adds	r4, #8
 80157f4:	9b05      	ldr	r3, [sp, #20]
 80157f6:	445b      	add	r3, fp
 80157f8:	1b5a      	subs	r2, r3, r5
 80157fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	4293      	cmp	r3, r2
 8015800:	bfa8      	it	ge
 8015802:	4613      	movge	r3, r2
 8015804:	2b00      	cmp	r3, #0
 8015806:	461f      	mov	r7, r3
 8015808:	dd0a      	ble.n	8015820 <_svfprintf_r+0x10b0>
 801580a:	e9c4 5300 	strd	r5, r3, [r4]
 801580e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015810:	443b      	add	r3, r7
 8015812:	9324      	str	r3, [sp, #144]	; 0x90
 8015814:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015816:	3301      	adds	r3, #1
 8015818:	2b07      	cmp	r3, #7
 801581a:	9323      	str	r3, [sp, #140]	; 0x8c
 801581c:	dc35      	bgt.n	801588a <_svfprintf_r+0x111a>
 801581e:	3408      	adds	r4, #8
 8015820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	2f00      	cmp	r7, #0
 8015826:	bfac      	ite	ge
 8015828:	1bdf      	subge	r7, r3, r7
 801582a:	461f      	movlt	r7, r3
 801582c:	2f00      	cmp	r7, #0
 801582e:	dd17      	ble.n	8015860 <_svfprintf_r+0x10f0>
 8015830:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8015834:	2f10      	cmp	r7, #16
 8015836:	f102 0201 	add.w	r2, r2, #1
 801583a:	f104 0108 	add.w	r1, r4, #8
 801583e:	6026      	str	r6, [r4, #0]
 8015840:	dc2d      	bgt.n	801589e <_svfprintf_r+0x112e>
 8015842:	443b      	add	r3, r7
 8015844:	2a07      	cmp	r2, #7
 8015846:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801584a:	6067      	str	r7, [r4, #4]
 801584c:	dd3a      	ble.n	80158c4 <_svfprintf_r+0x1154>
 801584e:	aa22      	add	r2, sp, #136	; 0x88
 8015850:	4649      	mov	r1, r9
 8015852:	4650      	mov	r0, sl
 8015854:	f001 fb8b 	bl	8016f6e <__ssprint_r>
 8015858:	2800      	cmp	r0, #0
 801585a:	f040 8103 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801585e:	ac25      	add	r4, sp, #148	; 0x94
 8015860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	441d      	add	r5, r3
 8015866:	e732      	b.n	80156ce <_svfprintf_r+0xf5e>
 8015868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801586a:	3b01      	subs	r3, #1
 801586c:	930a      	str	r3, [sp, #40]	; 0x28
 801586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015870:	3b01      	subs	r3, #1
 8015872:	9309      	str	r3, [sp, #36]	; 0x24
 8015874:	e7b0      	b.n	80157d8 <_svfprintf_r+0x1068>
 8015876:	aa22      	add	r2, sp, #136	; 0x88
 8015878:	4649      	mov	r1, r9
 801587a:	4650      	mov	r0, sl
 801587c:	f001 fb77 	bl	8016f6e <__ssprint_r>
 8015880:	2800      	cmp	r0, #0
 8015882:	f040 80ef 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 8015886:	ac25      	add	r4, sp, #148	; 0x94
 8015888:	e7b4      	b.n	80157f4 <_svfprintf_r+0x1084>
 801588a:	aa22      	add	r2, sp, #136	; 0x88
 801588c:	4649      	mov	r1, r9
 801588e:	4650      	mov	r0, sl
 8015890:	f001 fb6d 	bl	8016f6e <__ssprint_r>
 8015894:	2800      	cmp	r0, #0
 8015896:	f040 80e5 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801589a:	ac25      	add	r4, sp, #148	; 0x94
 801589c:	e7c0      	b.n	8015820 <_svfprintf_r+0x10b0>
 801589e:	2010      	movs	r0, #16
 80158a0:	4403      	add	r3, r0
 80158a2:	2a07      	cmp	r2, #7
 80158a4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80158a8:	6060      	str	r0, [r4, #4]
 80158aa:	dd08      	ble.n	80158be <_svfprintf_r+0x114e>
 80158ac:	aa22      	add	r2, sp, #136	; 0x88
 80158ae:	4649      	mov	r1, r9
 80158b0:	4650      	mov	r0, sl
 80158b2:	f001 fb5c 	bl	8016f6e <__ssprint_r>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	f040 80d4 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80158bc:	a925      	add	r1, sp, #148	; 0x94
 80158be:	3f10      	subs	r7, #16
 80158c0:	460c      	mov	r4, r1
 80158c2:	e7b5      	b.n	8015830 <_svfprintf_r+0x10c0>
 80158c4:	460c      	mov	r4, r1
 80158c6:	e7cb      	b.n	8015860 <_svfprintf_r+0x10f0>
 80158c8:	aa22      	add	r2, sp, #136	; 0x88
 80158ca:	4649      	mov	r1, r9
 80158cc:	4650      	mov	r0, sl
 80158ce:	f001 fb4e 	bl	8016f6e <__ssprint_r>
 80158d2:	2800      	cmp	r0, #0
 80158d4:	f040 80c6 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80158d8:	ac25      	add	r4, sp, #148	; 0x94
 80158da:	e719      	b.n	8015710 <_svfprintf_r+0xfa0>
 80158dc:	aa22      	add	r2, sp, #136	; 0x88
 80158de:	4649      	mov	r1, r9
 80158e0:	4650      	mov	r0, sl
 80158e2:	f001 fb44 	bl	8016f6e <__ssprint_r>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	f040 80bc 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 80158ec:	ac25      	add	r4, sp, #148	; 0x94
 80158ee:	e726      	b.n	801573e <_svfprintf_r+0xfce>
 80158f0:	080393a0 	.word	0x080393a0
 80158f4:	9a05      	ldr	r2, [sp, #20]
 80158f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80158f8:	2a01      	cmp	r2, #1
 80158fa:	f106 0601 	add.w	r6, r6, #1
 80158fe:	f103 0301 	add.w	r3, r3, #1
 8015902:	f104 0508 	add.w	r5, r4, #8
 8015906:	dc02      	bgt.n	801590e <_svfprintf_r+0x119e>
 8015908:	f018 0f01 	tst.w	r8, #1
 801590c:	d07e      	beq.n	8015a0c <_svfprintf_r+0x129c>
 801590e:	2201      	movs	r2, #1
 8015910:	2b07      	cmp	r3, #7
 8015912:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8015916:	f8c4 b000 	str.w	fp, [r4]
 801591a:	6062      	str	r2, [r4, #4]
 801591c:	dd08      	ble.n	8015930 <_svfprintf_r+0x11c0>
 801591e:	aa22      	add	r2, sp, #136	; 0x88
 8015920:	4649      	mov	r1, r9
 8015922:	4650      	mov	r0, sl
 8015924:	f001 fb23 	bl	8016f6e <__ssprint_r>
 8015928:	2800      	cmp	r0, #0
 801592a:	f040 809b 	bne.w	8015a64 <_svfprintf_r+0x12f4>
 801592e:	ad25      	add	r5, sp, #148	; 0x94
 8015930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015932:	602b      	str	r3, [r5, #0]
 8015934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015936:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015938:	606b      	str	r3, [r5, #4]
 801593a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801593c:	4413      	add	r3, r2
 801593e:	9324      	str	r3, [sp, #144]	; 0x90
 8015940:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015942:	3301      	adds	r3, #1
 8015944:	2b07      	cmp	r3, #7
 8015946:	9323      	str	r3, [sp, #140]	; 0x8c
 8015948:	dc32      	bgt.n	80159b0 <_svfprintf_r+0x1240>
 801594a:	3508      	adds	r5, #8
 801594c:	9b05      	ldr	r3, [sp, #20]
 801594e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015952:	1e5c      	subs	r4, r3, #1
 8015954:	2200      	movs	r2, #0
 8015956:	2300      	movs	r3, #0
 8015958:	f7eb f8ce 	bl	8000af8 <__aeabi_dcmpeq>
 801595c:	2800      	cmp	r0, #0
 801595e:	d130      	bne.n	80159c2 <_svfprintf_r+0x1252>
 8015960:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8015962:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015964:	9a05      	ldr	r2, [sp, #20]
 8015966:	3101      	adds	r1, #1
 8015968:	3b01      	subs	r3, #1
 801596a:	f10b 0001 	add.w	r0, fp, #1
 801596e:	4413      	add	r3, r2
 8015970:	2907      	cmp	r1, #7
 8015972:	e9c5 0400 	strd	r0, r4, [r5]
 8015976:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 801597a:	dd50      	ble.n	8015a1e <_svfprintf_r+0x12ae>
 801597c:	aa22      	add	r2, sp, #136	; 0x88
 801597e:	4649      	mov	r1, r9
 8015980:	4650      	mov	r0, sl
 8015982:	f001 faf4 	bl	8016f6e <__ssprint_r>
 8015986:	2800      	cmp	r0, #0
 8015988:	d16c      	bne.n	8015a64 <_svfprintf_r+0x12f4>
 801598a:	ad25      	add	r5, sp, #148	; 0x94
 801598c:	ab1e      	add	r3, sp, #120	; 0x78
 801598e:	602b      	str	r3, [r5, #0]
 8015990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015992:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015994:	606b      	str	r3, [r5, #4]
 8015996:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015998:	4413      	add	r3, r2
 801599a:	9324      	str	r3, [sp, #144]	; 0x90
 801599c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801599e:	3301      	adds	r3, #1
 80159a0:	2b07      	cmp	r3, #7
 80159a2:	9323      	str	r3, [sp, #140]	; 0x8c
 80159a4:	f73f adb5 	bgt.w	8015512 <_svfprintf_r+0xda2>
 80159a8:	f105 0408 	add.w	r4, r5, #8
 80159ac:	f7ff bac2 	b.w	8014f34 <_svfprintf_r+0x7c4>
 80159b0:	aa22      	add	r2, sp, #136	; 0x88
 80159b2:	4649      	mov	r1, r9
 80159b4:	4650      	mov	r0, sl
 80159b6:	f001 fada 	bl	8016f6e <__ssprint_r>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	d152      	bne.n	8015a64 <_svfprintf_r+0x12f4>
 80159be:	ad25      	add	r5, sp, #148	; 0x94
 80159c0:	e7c4      	b.n	801594c <_svfprintf_r+0x11dc>
 80159c2:	2c00      	cmp	r4, #0
 80159c4:	dde2      	ble.n	801598c <_svfprintf_r+0x121c>
 80159c6:	4e58      	ldr	r6, [pc, #352]	; (8015b28 <_svfprintf_r+0x13b8>)
 80159c8:	2710      	movs	r7, #16
 80159ca:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80159ce:	2c10      	cmp	r4, #16
 80159d0:	f103 0301 	add.w	r3, r3, #1
 80159d4:	f105 0108 	add.w	r1, r5, #8
 80159d8:	602e      	str	r6, [r5, #0]
 80159da:	dc07      	bgt.n	80159ec <_svfprintf_r+0x127c>
 80159dc:	606c      	str	r4, [r5, #4]
 80159de:	2b07      	cmp	r3, #7
 80159e0:	4414      	add	r4, r2
 80159e2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80159e6:	dcc9      	bgt.n	801597c <_svfprintf_r+0x120c>
 80159e8:	460d      	mov	r5, r1
 80159ea:	e7cf      	b.n	801598c <_svfprintf_r+0x121c>
 80159ec:	3210      	adds	r2, #16
 80159ee:	2b07      	cmp	r3, #7
 80159f0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80159f4:	606f      	str	r7, [r5, #4]
 80159f6:	dd06      	ble.n	8015a06 <_svfprintf_r+0x1296>
 80159f8:	aa22      	add	r2, sp, #136	; 0x88
 80159fa:	4649      	mov	r1, r9
 80159fc:	4650      	mov	r0, sl
 80159fe:	f001 fab6 	bl	8016f6e <__ssprint_r>
 8015a02:	bb78      	cbnz	r0, 8015a64 <_svfprintf_r+0x12f4>
 8015a04:	a925      	add	r1, sp, #148	; 0x94
 8015a06:	3c10      	subs	r4, #16
 8015a08:	460d      	mov	r5, r1
 8015a0a:	e7de      	b.n	80159ca <_svfprintf_r+0x125a>
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	2b07      	cmp	r3, #7
 8015a10:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8015a14:	f8c4 b000 	str.w	fp, [r4]
 8015a18:	6062      	str	r2, [r4, #4]
 8015a1a:	ddb7      	ble.n	801598c <_svfprintf_r+0x121c>
 8015a1c:	e7ae      	b.n	801597c <_svfprintf_r+0x120c>
 8015a1e:	3508      	adds	r5, #8
 8015a20:	e7b4      	b.n	801598c <_svfprintf_r+0x121c>
 8015a22:	460c      	mov	r4, r1
 8015a24:	f7ff ba86 	b.w	8014f34 <_svfprintf_r+0x7c4>
 8015a28:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8015a2c:	1a9d      	subs	r5, r3, r2
 8015a2e:	2d00      	cmp	r5, #0
 8015a30:	f77f aa84 	ble.w	8014f3c <_svfprintf_r+0x7cc>
 8015a34:	4e3d      	ldr	r6, [pc, #244]	; (8015b2c <_svfprintf_r+0x13bc>)
 8015a36:	2710      	movs	r7, #16
 8015a38:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8015a3c:	2d10      	cmp	r5, #16
 8015a3e:	f103 0301 	add.w	r3, r3, #1
 8015a42:	6026      	str	r6, [r4, #0]
 8015a44:	dc18      	bgt.n	8015a78 <_svfprintf_r+0x1308>
 8015a46:	6065      	str	r5, [r4, #4]
 8015a48:	2b07      	cmp	r3, #7
 8015a4a:	4415      	add	r5, r2
 8015a4c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8015a50:	f77f aa74 	ble.w	8014f3c <_svfprintf_r+0x7cc>
 8015a54:	aa22      	add	r2, sp, #136	; 0x88
 8015a56:	4649      	mov	r1, r9
 8015a58:	4650      	mov	r0, sl
 8015a5a:	f001 fa88 	bl	8016f6e <__ssprint_r>
 8015a5e:	2800      	cmp	r0, #0
 8015a60:	f43f aa6c 	beq.w	8014f3c <_svfprintf_r+0x7cc>
 8015a64:	9b03      	ldr	r3, [sp, #12]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f43f a88a 	beq.w	8014b80 <_svfprintf_r+0x410>
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	4650      	mov	r0, sl
 8015a70:	f7fe fdb8 	bl	80145e4 <_free_r>
 8015a74:	f7ff b884 	b.w	8014b80 <_svfprintf_r+0x410>
 8015a78:	3210      	adds	r2, #16
 8015a7a:	2b07      	cmp	r3, #7
 8015a7c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8015a80:	6067      	str	r7, [r4, #4]
 8015a82:	dc02      	bgt.n	8015a8a <_svfprintf_r+0x131a>
 8015a84:	3408      	adds	r4, #8
 8015a86:	3d10      	subs	r5, #16
 8015a88:	e7d6      	b.n	8015a38 <_svfprintf_r+0x12c8>
 8015a8a:	aa22      	add	r2, sp, #136	; 0x88
 8015a8c:	4649      	mov	r1, r9
 8015a8e:	4650      	mov	r0, sl
 8015a90:	f001 fa6d 	bl	8016f6e <__ssprint_r>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	d1e5      	bne.n	8015a64 <_svfprintf_r+0x12f4>
 8015a98:	ac25      	add	r4, sp, #148	; 0x94
 8015a9a:	e7f4      	b.n	8015a86 <_svfprintf_r+0x1316>
 8015a9c:	9903      	ldr	r1, [sp, #12]
 8015a9e:	4650      	mov	r0, sl
 8015aa0:	f7fe fda0 	bl	80145e4 <_free_r>
 8015aa4:	f7ff ba62 	b.w	8014f6c <_svfprintf_r+0x7fc>
 8015aa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f43f a868 	beq.w	8014b80 <_svfprintf_r+0x410>
 8015ab0:	aa22      	add	r2, sp, #136	; 0x88
 8015ab2:	4649      	mov	r1, r9
 8015ab4:	4650      	mov	r0, sl
 8015ab6:	f001 fa5a 	bl	8016f6e <__ssprint_r>
 8015aba:	f7ff b861 	b.w	8014b80 <_svfprintf_r+0x410>
 8015abe:	ea56 0207 	orrs.w	r2, r6, r7
 8015ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ac6:	f43f ab78 	beq.w	80151ba <_svfprintf_r+0xa4a>
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	f43f ac0d 	beq.w	80152ea <_svfprintf_r+0xb7a>
 8015ad0:	2b02      	cmp	r3, #2
 8015ad2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8015ad6:	f43f ac55 	beq.w	8015384 <_svfprintf_r+0xc14>
 8015ada:	08f2      	lsrs	r2, r6, #3
 8015adc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8015ae0:	08f8      	lsrs	r0, r7, #3
 8015ae2:	f006 0307 	and.w	r3, r6, #7
 8015ae6:	4607      	mov	r7, r0
 8015ae8:	4616      	mov	r6, r2
 8015aea:	3330      	adds	r3, #48	; 0x30
 8015aec:	ea56 0207 	orrs.w	r2, r6, r7
 8015af0:	4659      	mov	r1, fp
 8015af2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8015af6:	d1f0      	bne.n	8015ada <_svfprintf_r+0x136a>
 8015af8:	9a03      	ldr	r2, [sp, #12]
 8015afa:	07d2      	lsls	r2, r2, #31
 8015afc:	d506      	bpl.n	8015b0c <_svfprintf_r+0x139c>
 8015afe:	2b30      	cmp	r3, #48	; 0x30
 8015b00:	d004      	beq.n	8015b0c <_svfprintf_r+0x139c>
 8015b02:	2330      	movs	r3, #48	; 0x30
 8015b04:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8015b08:	f1a1 0b02 	sub.w	fp, r1, #2
 8015b0c:	ab4e      	add	r3, sp, #312	; 0x138
 8015b0e:	eba3 030b 	sub.w	r3, r3, fp
 8015b12:	9e04      	ldr	r6, [sp, #16]
 8015b14:	9304      	str	r3, [sp, #16]
 8015b16:	2300      	movs	r3, #0
 8015b18:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8015b1c:	9303      	str	r3, [sp, #12]
 8015b1e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015b22:	461d      	mov	r5, r3
 8015b24:	f7ff b94c 	b.w	8014dc0 <_svfprintf_r+0x650>
 8015b28:	080393a0 	.word	0x080393a0
 8015b2c:	08039390 	.word	0x08039390

08015b30 <__register_exitproc>:
 8015b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b34:	4d1c      	ldr	r5, [pc, #112]	; (8015ba8 <__register_exitproc+0x78>)
 8015b36:	4606      	mov	r6, r0
 8015b38:	6828      	ldr	r0, [r5, #0]
 8015b3a:	4698      	mov	r8, r3
 8015b3c:	460f      	mov	r7, r1
 8015b3e:	4691      	mov	r9, r2
 8015b40:	f7fe fe12 	bl	8014768 <__retarget_lock_acquire_recursive>
 8015b44:	4b19      	ldr	r3, [pc, #100]	; (8015bac <__register_exitproc+0x7c>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	b91c      	cbnz	r4, 8015b58 <__register_exitproc+0x28>
 8015b50:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8015b54:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8015b58:	6865      	ldr	r5, [r4, #4]
 8015b5a:	6800      	ldr	r0, [r0, #0]
 8015b5c:	2d1f      	cmp	r5, #31
 8015b5e:	dd05      	ble.n	8015b6c <__register_exitproc+0x3c>
 8015b60:	f7fe fe03 	bl	801476a <__retarget_lock_release_recursive>
 8015b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b6c:	b19e      	cbz	r6, 8015b96 <__register_exitproc+0x66>
 8015b6e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8015b72:	2201      	movs	r2, #1
 8015b74:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8015b78:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8015b7c:	40aa      	lsls	r2, r5
 8015b7e:	4313      	orrs	r3, r2
 8015b80:	2e02      	cmp	r6, #2
 8015b82:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8015b86:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8015b8a:	bf02      	ittt	eq
 8015b8c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8015b90:	431a      	orreq	r2, r3
 8015b92:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8015b96:	1c6b      	adds	r3, r5, #1
 8015b98:	3502      	adds	r5, #2
 8015b9a:	6063      	str	r3, [r4, #4]
 8015b9c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8015ba0:	f7fe fde3 	bl	801476a <__retarget_lock_release_recursive>
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	e7df      	b.n	8015b68 <__register_exitproc+0x38>
 8015ba8:	200008f0 	.word	0x200008f0
 8015bac:	08039358 	.word	0x08039358

08015bb0 <quorem>:
 8015bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bb4:	6903      	ldr	r3, [r0, #16]
 8015bb6:	690c      	ldr	r4, [r1, #16]
 8015bb8:	42a3      	cmp	r3, r4
 8015bba:	4607      	mov	r7, r0
 8015bbc:	f2c0 8081 	blt.w	8015cc2 <quorem+0x112>
 8015bc0:	3c01      	subs	r4, #1
 8015bc2:	f101 0814 	add.w	r8, r1, #20
 8015bc6:	f100 0514 	add.w	r5, r0, #20
 8015bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015bce:	9301      	str	r3, [sp, #4]
 8015bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015bd8:	3301      	adds	r3, #1
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8015be8:	d331      	bcc.n	8015c4e <quorem+0x9e>
 8015bea:	f04f 0e00 	mov.w	lr, #0
 8015bee:	4640      	mov	r0, r8
 8015bf0:	46ac      	mov	ip, r5
 8015bf2:	46f2      	mov	sl, lr
 8015bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8015bf8:	b293      	uxth	r3, r2
 8015bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8015bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	ebaa 0303 	sub.w	r3, sl, r3
 8015c08:	0c12      	lsrs	r2, r2, #16
 8015c0a:	f8dc a000 	ldr.w	sl, [ip]
 8015c0e:	fb06 e202 	mla	r2, r6, r2, lr
 8015c12:	fa13 f38a 	uxtah	r3, r3, sl
 8015c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015c1a:	fa1f fa82 	uxth.w	sl, r2
 8015c1e:	f8dc 2000 	ldr.w	r2, [ip]
 8015c22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c30:	4581      	cmp	r9, r0
 8015c32:	f84c 3b04 	str.w	r3, [ip], #4
 8015c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015c3a:	d2db      	bcs.n	8015bf4 <quorem+0x44>
 8015c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8015c40:	b92b      	cbnz	r3, 8015c4e <quorem+0x9e>
 8015c42:	9b01      	ldr	r3, [sp, #4]
 8015c44:	3b04      	subs	r3, #4
 8015c46:	429d      	cmp	r5, r3
 8015c48:	461a      	mov	r2, r3
 8015c4a:	d32e      	bcc.n	8015caa <quorem+0xfa>
 8015c4c:	613c      	str	r4, [r7, #16]
 8015c4e:	4638      	mov	r0, r7
 8015c50:	f001 f842 	bl	8016cd8 <__mcmp>
 8015c54:	2800      	cmp	r0, #0
 8015c56:	db24      	blt.n	8015ca2 <quorem+0xf2>
 8015c58:	3601      	adds	r6, #1
 8015c5a:	4628      	mov	r0, r5
 8015c5c:	f04f 0c00 	mov.w	ip, #0
 8015c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8015c64:	f8d0 e000 	ldr.w	lr, [r0]
 8015c68:	b293      	uxth	r3, r2
 8015c6a:	ebac 0303 	sub.w	r3, ip, r3
 8015c6e:	0c12      	lsrs	r2, r2, #16
 8015c70:	fa13 f38e 	uxtah	r3, r3, lr
 8015c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015c7c:	b29b      	uxth	r3, r3
 8015c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c82:	45c1      	cmp	r9, r8
 8015c84:	f840 3b04 	str.w	r3, [r0], #4
 8015c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015c8c:	d2e8      	bcs.n	8015c60 <quorem+0xb0>
 8015c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015c96:	b922      	cbnz	r2, 8015ca2 <quorem+0xf2>
 8015c98:	3b04      	subs	r3, #4
 8015c9a:	429d      	cmp	r5, r3
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	d30a      	bcc.n	8015cb6 <quorem+0x106>
 8015ca0:	613c      	str	r4, [r7, #16]
 8015ca2:	4630      	mov	r0, r6
 8015ca4:	b003      	add	sp, #12
 8015ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015caa:	6812      	ldr	r2, [r2, #0]
 8015cac:	3b04      	subs	r3, #4
 8015cae:	2a00      	cmp	r2, #0
 8015cb0:	d1cc      	bne.n	8015c4c <quorem+0x9c>
 8015cb2:	3c01      	subs	r4, #1
 8015cb4:	e7c7      	b.n	8015c46 <quorem+0x96>
 8015cb6:	6812      	ldr	r2, [r2, #0]
 8015cb8:	3b04      	subs	r3, #4
 8015cba:	2a00      	cmp	r2, #0
 8015cbc:	d1f0      	bne.n	8015ca0 <quorem+0xf0>
 8015cbe:	3c01      	subs	r4, #1
 8015cc0:	e7eb      	b.n	8015c9a <quorem+0xea>
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	e7ee      	b.n	8015ca4 <quorem+0xf4>
	...

08015cc8 <_dtoa_r>:
 8015cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ccc:	ed2d 8b02 	vpush	{d8}
 8015cd0:	b095      	sub	sp, #84	; 0x54
 8015cd2:	ec57 6b10 	vmov	r6, r7, d0
 8015cd6:	9105      	str	r1, [sp, #20]
 8015cd8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8015cda:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8015cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8015cde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015ce2:	4604      	mov	r4, r0
 8015ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ce6:	b141      	cbz	r1, 8015cfa <_dtoa_r+0x32>
 8015ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015cea:	604a      	str	r2, [r1, #4]
 8015cec:	2301      	movs	r3, #1
 8015cee:	4093      	lsls	r3, r2
 8015cf0:	608b      	str	r3, [r1, #8]
 8015cf2:	f000 fde6 	bl	80168c2 <_Bfree>
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	6423      	str	r3, [r4, #64]	; 0x40
 8015cfa:	1e3b      	subs	r3, r7, #0
 8015cfc:	bfb9      	ittee	lt
 8015cfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015d02:	9303      	strlt	r3, [sp, #12]
 8015d04:	2300      	movge	r3, #0
 8015d06:	602b      	strge	r3, [r5, #0]
 8015d08:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015d0c:	4ba2      	ldr	r3, [pc, #648]	; (8015f98 <_dtoa_r+0x2d0>)
 8015d0e:	bfbc      	itt	lt
 8015d10:	2201      	movlt	r2, #1
 8015d12:	602a      	strlt	r2, [r5, #0]
 8015d14:	ea33 0309 	bics.w	r3, r3, r9
 8015d18:	d11b      	bne.n	8015d52 <_dtoa_r+0x8a>
 8015d1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d1c:	f242 730f 	movw	r3, #9999	; 0x270f
 8015d20:	6013      	str	r3, [r2, #0]
 8015d22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015d26:	4333      	orrs	r3, r6
 8015d28:	f000 8578 	beq.w	801681c <_dtoa_r+0xb54>
 8015d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d2e:	b90b      	cbnz	r3, 8015d34 <_dtoa_r+0x6c>
 8015d30:	4b9a      	ldr	r3, [pc, #616]	; (8015f9c <_dtoa_r+0x2d4>)
 8015d32:	e024      	b.n	8015d7e <_dtoa_r+0xb6>
 8015d34:	4b99      	ldr	r3, [pc, #612]	; (8015f9c <_dtoa_r+0x2d4>)
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	3303      	adds	r3, #3
 8015d3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d3c:	6013      	str	r3, [r2, #0]
 8015d3e:	9800      	ldr	r0, [sp, #0]
 8015d40:	b015      	add	sp, #84	; 0x54
 8015d42:	ecbd 8b02 	vpop	{d8}
 8015d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d4a:	4b95      	ldr	r3, [pc, #596]	; (8015fa0 <_dtoa_r+0x2d8>)
 8015d4c:	9300      	str	r3, [sp, #0]
 8015d4e:	3308      	adds	r3, #8
 8015d50:	e7f3      	b.n	8015d3a <_dtoa_r+0x72>
 8015d52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d56:	2200      	movs	r2, #0
 8015d58:	ec51 0b17 	vmov	r0, r1, d7
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015d62:	f7ea fec9 	bl	8000af8 <__aeabi_dcmpeq>
 8015d66:	4680      	mov	r8, r0
 8015d68:	b158      	cbz	r0, 8015d82 <_dtoa_r+0xba>
 8015d6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	6013      	str	r3, [r2, #0]
 8015d70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	f000 854f 	beq.w	8016816 <_dtoa_r+0xb4e>
 8015d78:	488a      	ldr	r0, [pc, #552]	; (8015fa4 <_dtoa_r+0x2dc>)
 8015d7a:	6018      	str	r0, [r3, #0]
 8015d7c:	1e43      	subs	r3, r0, #1
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	e7dd      	b.n	8015d3e <_dtoa_r+0x76>
 8015d82:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015d86:	aa12      	add	r2, sp, #72	; 0x48
 8015d88:	a913      	add	r1, sp, #76	; 0x4c
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	f001 f848 	bl	8016e20 <__d2b>
 8015d90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015d94:	4683      	mov	fp, r0
 8015d96:	2d00      	cmp	r5, #0
 8015d98:	d07c      	beq.n	8015e94 <_dtoa_r+0x1cc>
 8015d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d9c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015da4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015da8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015dac:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015db0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015db4:	4b7c      	ldr	r3, [pc, #496]	; (8015fa8 <_dtoa_r+0x2e0>)
 8015db6:	2200      	movs	r2, #0
 8015db8:	4630      	mov	r0, r6
 8015dba:	4639      	mov	r1, r7
 8015dbc:	f7ea fa7c 	bl	80002b8 <__aeabi_dsub>
 8015dc0:	a36f      	add	r3, pc, #444	; (adr r3, 8015f80 <_dtoa_r+0x2b8>)
 8015dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dc6:	f7ea fc2f 	bl	8000628 <__aeabi_dmul>
 8015dca:	a36f      	add	r3, pc, #444	; (adr r3, 8015f88 <_dtoa_r+0x2c0>)
 8015dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd0:	f7ea fa74 	bl	80002bc <__adddf3>
 8015dd4:	4606      	mov	r6, r0
 8015dd6:	4628      	mov	r0, r5
 8015dd8:	460f      	mov	r7, r1
 8015dda:	f7ea fbbb 	bl	8000554 <__aeabi_i2d>
 8015dde:	a36c      	add	r3, pc, #432	; (adr r3, 8015f90 <_dtoa_r+0x2c8>)
 8015de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de4:	f7ea fc20 	bl	8000628 <__aeabi_dmul>
 8015de8:	4602      	mov	r2, r0
 8015dea:	460b      	mov	r3, r1
 8015dec:	4630      	mov	r0, r6
 8015dee:	4639      	mov	r1, r7
 8015df0:	f7ea fa64 	bl	80002bc <__adddf3>
 8015df4:	4606      	mov	r6, r0
 8015df6:	460f      	mov	r7, r1
 8015df8:	f7ea fec6 	bl	8000b88 <__aeabi_d2iz>
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	4682      	mov	sl, r0
 8015e00:	2300      	movs	r3, #0
 8015e02:	4630      	mov	r0, r6
 8015e04:	4639      	mov	r1, r7
 8015e06:	f7ea fe81 	bl	8000b0c <__aeabi_dcmplt>
 8015e0a:	b148      	cbz	r0, 8015e20 <_dtoa_r+0x158>
 8015e0c:	4650      	mov	r0, sl
 8015e0e:	f7ea fba1 	bl	8000554 <__aeabi_i2d>
 8015e12:	4632      	mov	r2, r6
 8015e14:	463b      	mov	r3, r7
 8015e16:	f7ea fe6f 	bl	8000af8 <__aeabi_dcmpeq>
 8015e1a:	b908      	cbnz	r0, 8015e20 <_dtoa_r+0x158>
 8015e1c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015e20:	f1ba 0f16 	cmp.w	sl, #22
 8015e24:	d854      	bhi.n	8015ed0 <_dtoa_r+0x208>
 8015e26:	4b61      	ldr	r3, [pc, #388]	; (8015fac <_dtoa_r+0x2e4>)
 8015e28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015e34:	f7ea fe6a 	bl	8000b0c <__aeabi_dcmplt>
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	d04b      	beq.n	8015ed4 <_dtoa_r+0x20c>
 8015e3c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015e40:	2300      	movs	r3, #0
 8015e42:	930e      	str	r3, [sp, #56]	; 0x38
 8015e44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e46:	1b5d      	subs	r5, r3, r5
 8015e48:	1e6b      	subs	r3, r5, #1
 8015e4a:	9304      	str	r3, [sp, #16]
 8015e4c:	bf43      	ittte	mi
 8015e4e:	2300      	movmi	r3, #0
 8015e50:	f1c5 0801 	rsbmi	r8, r5, #1
 8015e54:	9304      	strmi	r3, [sp, #16]
 8015e56:	f04f 0800 	movpl.w	r8, #0
 8015e5a:	f1ba 0f00 	cmp.w	sl, #0
 8015e5e:	db3b      	blt.n	8015ed8 <_dtoa_r+0x210>
 8015e60:	9b04      	ldr	r3, [sp, #16]
 8015e62:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015e66:	4453      	add	r3, sl
 8015e68:	9304      	str	r3, [sp, #16]
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	9306      	str	r3, [sp, #24]
 8015e6e:	9b05      	ldr	r3, [sp, #20]
 8015e70:	2b09      	cmp	r3, #9
 8015e72:	d86a      	bhi.n	8015f4a <_dtoa_r+0x282>
 8015e74:	2b05      	cmp	r3, #5
 8015e76:	bfc4      	itt	gt
 8015e78:	3b04      	subgt	r3, #4
 8015e7a:	9305      	strgt	r3, [sp, #20]
 8015e7c:	9b05      	ldr	r3, [sp, #20]
 8015e7e:	f1a3 0302 	sub.w	r3, r3, #2
 8015e82:	bfcc      	ite	gt
 8015e84:	2500      	movgt	r5, #0
 8015e86:	2501      	movle	r5, #1
 8015e88:	2b03      	cmp	r3, #3
 8015e8a:	d86a      	bhi.n	8015f62 <_dtoa_r+0x29a>
 8015e8c:	e8df f003 	tbb	[pc, r3]
 8015e90:	5b4d4f2c 	.word	0x5b4d4f2c
 8015e94:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015e98:	441d      	add	r5, r3
 8015e9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015e9e:	2b20      	cmp	r3, #32
 8015ea0:	bfc1      	itttt	gt
 8015ea2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015ea6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015eaa:	fa09 f303 	lslgt.w	r3, r9, r3
 8015eae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015eb2:	bfda      	itte	le
 8015eb4:	f1c3 0320 	rsble	r3, r3, #32
 8015eb8:	fa06 f003 	lslle.w	r0, r6, r3
 8015ebc:	4318      	orrgt	r0, r3
 8015ebe:	f7ea fb39 	bl	8000534 <__aeabi_ui2d>
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	4606      	mov	r6, r0
 8015ec6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015eca:	3d01      	subs	r5, #1
 8015ecc:	9310      	str	r3, [sp, #64]	; 0x40
 8015ece:	e771      	b.n	8015db4 <_dtoa_r+0xec>
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	e7b6      	b.n	8015e42 <_dtoa_r+0x17a>
 8015ed4:	900e      	str	r0, [sp, #56]	; 0x38
 8015ed6:	e7b5      	b.n	8015e44 <_dtoa_r+0x17c>
 8015ed8:	f1ca 0300 	rsb	r3, sl, #0
 8015edc:	9306      	str	r3, [sp, #24]
 8015ede:	2300      	movs	r3, #0
 8015ee0:	eba8 080a 	sub.w	r8, r8, sl
 8015ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8015ee6:	e7c2      	b.n	8015e6e <_dtoa_r+0x1a6>
 8015ee8:	2300      	movs	r3, #0
 8015eea:	9308      	str	r3, [sp, #32]
 8015eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	dc3a      	bgt.n	8015f68 <_dtoa_r+0x2a0>
 8015ef2:	f04f 0901 	mov.w	r9, #1
 8015ef6:	f8cd 9004 	str.w	r9, [sp, #4]
 8015efa:	464b      	mov	r3, r9
 8015efc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015f00:	2200      	movs	r2, #0
 8015f02:	6462      	str	r2, [r4, #68]	; 0x44
 8015f04:	2204      	movs	r2, #4
 8015f06:	f102 0014 	add.w	r0, r2, #20
 8015f0a:	4298      	cmp	r0, r3
 8015f0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8015f0e:	d931      	bls.n	8015f74 <_dtoa_r+0x2ac>
 8015f10:	4620      	mov	r0, r4
 8015f12:	f000 fcb1 	bl	8016878 <_Balloc>
 8015f16:	9000      	str	r0, [sp, #0]
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	d14d      	bne.n	8015fb8 <_dtoa_r+0x2f0>
 8015f1c:	4b24      	ldr	r3, [pc, #144]	; (8015fb0 <_dtoa_r+0x2e8>)
 8015f1e:	4602      	mov	r2, r0
 8015f20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015f24:	4823      	ldr	r0, [pc, #140]	; (8015fb4 <_dtoa_r+0x2ec>)
 8015f26:	f001 f89d 	bl	8017064 <__assert_func>
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	e7dd      	b.n	8015eea <_dtoa_r+0x222>
 8015f2e:	2300      	movs	r3, #0
 8015f30:	9308      	str	r3, [sp, #32]
 8015f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f34:	eb0a 0903 	add.w	r9, sl, r3
 8015f38:	f109 0301 	add.w	r3, r9, #1
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	9301      	str	r3, [sp, #4]
 8015f40:	bfb8      	it	lt
 8015f42:	2301      	movlt	r3, #1
 8015f44:	e7dc      	b.n	8015f00 <_dtoa_r+0x238>
 8015f46:	2301      	movs	r3, #1
 8015f48:	e7f2      	b.n	8015f30 <_dtoa_r+0x268>
 8015f4a:	2501      	movs	r5, #1
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	9305      	str	r3, [sp, #20]
 8015f50:	9508      	str	r5, [sp, #32]
 8015f52:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8015f56:	2200      	movs	r2, #0
 8015f58:	f8cd 9004 	str.w	r9, [sp, #4]
 8015f5c:	2312      	movs	r3, #18
 8015f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8015f60:	e7ce      	b.n	8015f00 <_dtoa_r+0x238>
 8015f62:	2301      	movs	r3, #1
 8015f64:	9308      	str	r3, [sp, #32]
 8015f66:	e7f4      	b.n	8015f52 <_dtoa_r+0x28a>
 8015f68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015f6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8015f70:	464b      	mov	r3, r9
 8015f72:	e7c5      	b.n	8015f00 <_dtoa_r+0x238>
 8015f74:	3101      	adds	r1, #1
 8015f76:	6461      	str	r1, [r4, #68]	; 0x44
 8015f78:	0052      	lsls	r2, r2, #1
 8015f7a:	e7c4      	b.n	8015f06 <_dtoa_r+0x23e>
 8015f7c:	f3af 8000 	nop.w
 8015f80:	636f4361 	.word	0x636f4361
 8015f84:	3fd287a7 	.word	0x3fd287a7
 8015f88:	8b60c8b3 	.word	0x8b60c8b3
 8015f8c:	3fc68a28 	.word	0x3fc68a28
 8015f90:	509f79fb 	.word	0x509f79fb
 8015f94:	3fd34413 	.word	0x3fd34413
 8015f98:	7ff00000 	.word	0x7ff00000
 8015f9c:	080393b0 	.word	0x080393b0
 8015fa0:	080393b4 	.word	0x080393b4
 8015fa4:	0803938f 	.word	0x0803938f
 8015fa8:	3ff80000 	.word	0x3ff80000
 8015fac:	080394b8 	.word	0x080394b8
 8015fb0:	080393bd 	.word	0x080393bd
 8015fb4:	080393ce 	.word	0x080393ce
 8015fb8:	9b00      	ldr	r3, [sp, #0]
 8015fba:	6423      	str	r3, [r4, #64]	; 0x40
 8015fbc:	9b01      	ldr	r3, [sp, #4]
 8015fbe:	2b0e      	cmp	r3, #14
 8015fc0:	f200 80ad 	bhi.w	801611e <_dtoa_r+0x456>
 8015fc4:	2d00      	cmp	r5, #0
 8015fc6:	f000 80aa 	beq.w	801611e <_dtoa_r+0x456>
 8015fca:	f1ba 0f00 	cmp.w	sl, #0
 8015fce:	dd36      	ble.n	801603e <_dtoa_r+0x376>
 8015fd0:	4ac2      	ldr	r2, [pc, #776]	; (80162dc <_dtoa_r+0x614>)
 8015fd2:	f00a 030f 	and.w	r3, sl, #15
 8015fd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015fda:	ed93 7b00 	vldr	d7, [r3]
 8015fde:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015fe2:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015fe6:	eeb0 8a47 	vmov.f32	s16, s14
 8015fea:	eef0 8a67 	vmov.f32	s17, s15
 8015fee:	d016      	beq.n	801601e <_dtoa_r+0x356>
 8015ff0:	4bbb      	ldr	r3, [pc, #748]	; (80162e0 <_dtoa_r+0x618>)
 8015ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015ff6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015ffa:	f7ea fc3f 	bl	800087c <__aeabi_ddiv>
 8015ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016002:	f007 070f 	and.w	r7, r7, #15
 8016006:	2503      	movs	r5, #3
 8016008:	4eb5      	ldr	r6, [pc, #724]	; (80162e0 <_dtoa_r+0x618>)
 801600a:	b957      	cbnz	r7, 8016022 <_dtoa_r+0x35a>
 801600c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016010:	ec53 2b18 	vmov	r2, r3, d8
 8016014:	f7ea fc32 	bl	800087c <__aeabi_ddiv>
 8016018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801601c:	e029      	b.n	8016072 <_dtoa_r+0x3aa>
 801601e:	2502      	movs	r5, #2
 8016020:	e7f2      	b.n	8016008 <_dtoa_r+0x340>
 8016022:	07f9      	lsls	r1, r7, #31
 8016024:	d508      	bpl.n	8016038 <_dtoa_r+0x370>
 8016026:	ec51 0b18 	vmov	r0, r1, d8
 801602a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801602e:	f7ea fafb 	bl	8000628 <__aeabi_dmul>
 8016032:	ec41 0b18 	vmov	d8, r0, r1
 8016036:	3501      	adds	r5, #1
 8016038:	107f      	asrs	r7, r7, #1
 801603a:	3608      	adds	r6, #8
 801603c:	e7e5      	b.n	801600a <_dtoa_r+0x342>
 801603e:	f000 80a6 	beq.w	801618e <_dtoa_r+0x4c6>
 8016042:	f1ca 0600 	rsb	r6, sl, #0
 8016046:	4ba5      	ldr	r3, [pc, #660]	; (80162dc <_dtoa_r+0x614>)
 8016048:	4fa5      	ldr	r7, [pc, #660]	; (80162e0 <_dtoa_r+0x618>)
 801604a:	f006 020f 	and.w	r2, r6, #15
 801604e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801605a:	f7ea fae5 	bl	8000628 <__aeabi_dmul>
 801605e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016062:	1136      	asrs	r6, r6, #4
 8016064:	2300      	movs	r3, #0
 8016066:	2502      	movs	r5, #2
 8016068:	2e00      	cmp	r6, #0
 801606a:	f040 8085 	bne.w	8016178 <_dtoa_r+0x4b0>
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1d2      	bne.n	8016018 <_dtoa_r+0x350>
 8016072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016074:	2b00      	cmp	r3, #0
 8016076:	f000 808c 	beq.w	8016192 <_dtoa_r+0x4ca>
 801607a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801607e:	4b99      	ldr	r3, [pc, #612]	; (80162e4 <_dtoa_r+0x61c>)
 8016080:	2200      	movs	r2, #0
 8016082:	4630      	mov	r0, r6
 8016084:	4639      	mov	r1, r7
 8016086:	f7ea fd41 	bl	8000b0c <__aeabi_dcmplt>
 801608a:	2800      	cmp	r0, #0
 801608c:	f000 8081 	beq.w	8016192 <_dtoa_r+0x4ca>
 8016090:	9b01      	ldr	r3, [sp, #4]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d07d      	beq.n	8016192 <_dtoa_r+0x4ca>
 8016096:	f1b9 0f00 	cmp.w	r9, #0
 801609a:	dd3c      	ble.n	8016116 <_dtoa_r+0x44e>
 801609c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80160a0:	9307      	str	r3, [sp, #28]
 80160a2:	2200      	movs	r2, #0
 80160a4:	4b90      	ldr	r3, [pc, #576]	; (80162e8 <_dtoa_r+0x620>)
 80160a6:	4630      	mov	r0, r6
 80160a8:	4639      	mov	r1, r7
 80160aa:	f7ea fabd 	bl	8000628 <__aeabi_dmul>
 80160ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160b2:	3501      	adds	r5, #1
 80160b4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80160b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80160bc:	4628      	mov	r0, r5
 80160be:	f7ea fa49 	bl	8000554 <__aeabi_i2d>
 80160c2:	4632      	mov	r2, r6
 80160c4:	463b      	mov	r3, r7
 80160c6:	f7ea faaf 	bl	8000628 <__aeabi_dmul>
 80160ca:	4b88      	ldr	r3, [pc, #544]	; (80162ec <_dtoa_r+0x624>)
 80160cc:	2200      	movs	r2, #0
 80160ce:	f7ea f8f5 	bl	80002bc <__adddf3>
 80160d2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80160d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160da:	9303      	str	r3, [sp, #12]
 80160dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d15c      	bne.n	801619c <_dtoa_r+0x4d4>
 80160e2:	4b83      	ldr	r3, [pc, #524]	; (80162f0 <_dtoa_r+0x628>)
 80160e4:	2200      	movs	r2, #0
 80160e6:	4630      	mov	r0, r6
 80160e8:	4639      	mov	r1, r7
 80160ea:	f7ea f8e5 	bl	80002b8 <__aeabi_dsub>
 80160ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80160f2:	4606      	mov	r6, r0
 80160f4:	460f      	mov	r7, r1
 80160f6:	f7ea fd27 	bl	8000b48 <__aeabi_dcmpgt>
 80160fa:	2800      	cmp	r0, #0
 80160fc:	f040 8295 	bne.w	801662a <_dtoa_r+0x962>
 8016100:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016104:	4630      	mov	r0, r6
 8016106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801610a:	4639      	mov	r1, r7
 801610c:	f7ea fcfe 	bl	8000b0c <__aeabi_dcmplt>
 8016110:	2800      	cmp	r0, #0
 8016112:	f040 8287 	bne.w	8016624 <_dtoa_r+0x95c>
 8016116:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801611a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801611e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016120:	2b00      	cmp	r3, #0
 8016122:	f2c0 8157 	blt.w	80163d4 <_dtoa_r+0x70c>
 8016126:	f1ba 0f0e 	cmp.w	sl, #14
 801612a:	f300 8153 	bgt.w	80163d4 <_dtoa_r+0x70c>
 801612e:	4b6b      	ldr	r3, [pc, #428]	; (80162dc <_dtoa_r+0x614>)
 8016130:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801613a:	2b00      	cmp	r3, #0
 801613c:	f280 80e2 	bge.w	8016304 <_dtoa_r+0x63c>
 8016140:	9b01      	ldr	r3, [sp, #4]
 8016142:	2b00      	cmp	r3, #0
 8016144:	f300 80de 	bgt.w	8016304 <_dtoa_r+0x63c>
 8016148:	f040 826c 	bne.w	8016624 <_dtoa_r+0x95c>
 801614c:	4b68      	ldr	r3, [pc, #416]	; (80162f0 <_dtoa_r+0x628>)
 801614e:	2200      	movs	r2, #0
 8016150:	4640      	mov	r0, r8
 8016152:	4649      	mov	r1, r9
 8016154:	f7ea fa68 	bl	8000628 <__aeabi_dmul>
 8016158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801615c:	f7ea fcea 	bl	8000b34 <__aeabi_dcmpge>
 8016160:	9e01      	ldr	r6, [sp, #4]
 8016162:	4637      	mov	r7, r6
 8016164:	2800      	cmp	r0, #0
 8016166:	f040 8242 	bne.w	80165ee <_dtoa_r+0x926>
 801616a:	9d00      	ldr	r5, [sp, #0]
 801616c:	2331      	movs	r3, #49	; 0x31
 801616e:	f805 3b01 	strb.w	r3, [r5], #1
 8016172:	f10a 0a01 	add.w	sl, sl, #1
 8016176:	e23e      	b.n	80165f6 <_dtoa_r+0x92e>
 8016178:	07f2      	lsls	r2, r6, #31
 801617a:	d505      	bpl.n	8016188 <_dtoa_r+0x4c0>
 801617c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016180:	f7ea fa52 	bl	8000628 <__aeabi_dmul>
 8016184:	3501      	adds	r5, #1
 8016186:	2301      	movs	r3, #1
 8016188:	1076      	asrs	r6, r6, #1
 801618a:	3708      	adds	r7, #8
 801618c:	e76c      	b.n	8016068 <_dtoa_r+0x3a0>
 801618e:	2502      	movs	r5, #2
 8016190:	e76f      	b.n	8016072 <_dtoa_r+0x3aa>
 8016192:	9b01      	ldr	r3, [sp, #4]
 8016194:	f8cd a01c 	str.w	sl, [sp, #28]
 8016198:	930c      	str	r3, [sp, #48]	; 0x30
 801619a:	e78d      	b.n	80160b8 <_dtoa_r+0x3f0>
 801619c:	9900      	ldr	r1, [sp, #0]
 801619e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80161a2:	4b4e      	ldr	r3, [pc, #312]	; (80162dc <_dtoa_r+0x614>)
 80161a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80161a8:	4401      	add	r1, r0
 80161aa:	9102      	str	r1, [sp, #8]
 80161ac:	9908      	ldr	r1, [sp, #32]
 80161ae:	eeb0 8a47 	vmov.f32	s16, s14
 80161b2:	eef0 8a67 	vmov.f32	s17, s15
 80161b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80161ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80161be:	2900      	cmp	r1, #0
 80161c0:	d045      	beq.n	801624e <_dtoa_r+0x586>
 80161c2:	494c      	ldr	r1, [pc, #304]	; (80162f4 <_dtoa_r+0x62c>)
 80161c4:	2000      	movs	r0, #0
 80161c6:	f7ea fb59 	bl	800087c <__aeabi_ddiv>
 80161ca:	ec53 2b18 	vmov	r2, r3, d8
 80161ce:	f7ea f873 	bl	80002b8 <__aeabi_dsub>
 80161d2:	9d00      	ldr	r5, [sp, #0]
 80161d4:	ec41 0b18 	vmov	d8, r0, r1
 80161d8:	4639      	mov	r1, r7
 80161da:	4630      	mov	r0, r6
 80161dc:	f7ea fcd4 	bl	8000b88 <__aeabi_d2iz>
 80161e0:	900c      	str	r0, [sp, #48]	; 0x30
 80161e2:	f7ea f9b7 	bl	8000554 <__aeabi_i2d>
 80161e6:	4602      	mov	r2, r0
 80161e8:	460b      	mov	r3, r1
 80161ea:	4630      	mov	r0, r6
 80161ec:	4639      	mov	r1, r7
 80161ee:	f7ea f863 	bl	80002b8 <__aeabi_dsub>
 80161f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161f4:	3330      	adds	r3, #48	; 0x30
 80161f6:	f805 3b01 	strb.w	r3, [r5], #1
 80161fa:	ec53 2b18 	vmov	r2, r3, d8
 80161fe:	4606      	mov	r6, r0
 8016200:	460f      	mov	r7, r1
 8016202:	f7ea fc83 	bl	8000b0c <__aeabi_dcmplt>
 8016206:	2800      	cmp	r0, #0
 8016208:	d165      	bne.n	80162d6 <_dtoa_r+0x60e>
 801620a:	4632      	mov	r2, r6
 801620c:	463b      	mov	r3, r7
 801620e:	4935      	ldr	r1, [pc, #212]	; (80162e4 <_dtoa_r+0x61c>)
 8016210:	2000      	movs	r0, #0
 8016212:	f7ea f851 	bl	80002b8 <__aeabi_dsub>
 8016216:	ec53 2b18 	vmov	r2, r3, d8
 801621a:	f7ea fc77 	bl	8000b0c <__aeabi_dcmplt>
 801621e:	2800      	cmp	r0, #0
 8016220:	f040 80b8 	bne.w	8016394 <_dtoa_r+0x6cc>
 8016224:	9b02      	ldr	r3, [sp, #8]
 8016226:	429d      	cmp	r5, r3
 8016228:	f43f af75 	beq.w	8016116 <_dtoa_r+0x44e>
 801622c:	4b2e      	ldr	r3, [pc, #184]	; (80162e8 <_dtoa_r+0x620>)
 801622e:	ec51 0b18 	vmov	r0, r1, d8
 8016232:	2200      	movs	r2, #0
 8016234:	f7ea f9f8 	bl	8000628 <__aeabi_dmul>
 8016238:	4b2b      	ldr	r3, [pc, #172]	; (80162e8 <_dtoa_r+0x620>)
 801623a:	ec41 0b18 	vmov	d8, r0, r1
 801623e:	2200      	movs	r2, #0
 8016240:	4630      	mov	r0, r6
 8016242:	4639      	mov	r1, r7
 8016244:	f7ea f9f0 	bl	8000628 <__aeabi_dmul>
 8016248:	4606      	mov	r6, r0
 801624a:	460f      	mov	r7, r1
 801624c:	e7c4      	b.n	80161d8 <_dtoa_r+0x510>
 801624e:	ec51 0b17 	vmov	r0, r1, d7
 8016252:	f7ea f9e9 	bl	8000628 <__aeabi_dmul>
 8016256:	9b02      	ldr	r3, [sp, #8]
 8016258:	9d00      	ldr	r5, [sp, #0]
 801625a:	930c      	str	r3, [sp, #48]	; 0x30
 801625c:	ec41 0b18 	vmov	d8, r0, r1
 8016260:	4639      	mov	r1, r7
 8016262:	4630      	mov	r0, r6
 8016264:	f7ea fc90 	bl	8000b88 <__aeabi_d2iz>
 8016268:	9011      	str	r0, [sp, #68]	; 0x44
 801626a:	f7ea f973 	bl	8000554 <__aeabi_i2d>
 801626e:	4602      	mov	r2, r0
 8016270:	460b      	mov	r3, r1
 8016272:	4630      	mov	r0, r6
 8016274:	4639      	mov	r1, r7
 8016276:	f7ea f81f 	bl	80002b8 <__aeabi_dsub>
 801627a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801627c:	3330      	adds	r3, #48	; 0x30
 801627e:	f805 3b01 	strb.w	r3, [r5], #1
 8016282:	9b02      	ldr	r3, [sp, #8]
 8016284:	429d      	cmp	r5, r3
 8016286:	4606      	mov	r6, r0
 8016288:	460f      	mov	r7, r1
 801628a:	f04f 0200 	mov.w	r2, #0
 801628e:	d133      	bne.n	80162f8 <_dtoa_r+0x630>
 8016290:	4b18      	ldr	r3, [pc, #96]	; (80162f4 <_dtoa_r+0x62c>)
 8016292:	ec51 0b18 	vmov	r0, r1, d8
 8016296:	f7ea f811 	bl	80002bc <__adddf3>
 801629a:	4602      	mov	r2, r0
 801629c:	460b      	mov	r3, r1
 801629e:	4630      	mov	r0, r6
 80162a0:	4639      	mov	r1, r7
 80162a2:	f7ea fc51 	bl	8000b48 <__aeabi_dcmpgt>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	d174      	bne.n	8016394 <_dtoa_r+0x6cc>
 80162aa:	ec53 2b18 	vmov	r2, r3, d8
 80162ae:	4911      	ldr	r1, [pc, #68]	; (80162f4 <_dtoa_r+0x62c>)
 80162b0:	2000      	movs	r0, #0
 80162b2:	f7ea f801 	bl	80002b8 <__aeabi_dsub>
 80162b6:	4602      	mov	r2, r0
 80162b8:	460b      	mov	r3, r1
 80162ba:	4630      	mov	r0, r6
 80162bc:	4639      	mov	r1, r7
 80162be:	f7ea fc25 	bl	8000b0c <__aeabi_dcmplt>
 80162c2:	2800      	cmp	r0, #0
 80162c4:	f43f af27 	beq.w	8016116 <_dtoa_r+0x44e>
 80162c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80162ca:	1e6b      	subs	r3, r5, #1
 80162cc:	930c      	str	r3, [sp, #48]	; 0x30
 80162ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80162d2:	2b30      	cmp	r3, #48	; 0x30
 80162d4:	d0f8      	beq.n	80162c8 <_dtoa_r+0x600>
 80162d6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80162da:	e049      	b.n	8016370 <_dtoa_r+0x6a8>
 80162dc:	080394b8 	.word	0x080394b8
 80162e0:	08039490 	.word	0x08039490
 80162e4:	3ff00000 	.word	0x3ff00000
 80162e8:	40240000 	.word	0x40240000
 80162ec:	401c0000 	.word	0x401c0000
 80162f0:	40140000 	.word	0x40140000
 80162f4:	3fe00000 	.word	0x3fe00000
 80162f8:	4baf      	ldr	r3, [pc, #700]	; (80165b8 <_dtoa_r+0x8f0>)
 80162fa:	f7ea f995 	bl	8000628 <__aeabi_dmul>
 80162fe:	4606      	mov	r6, r0
 8016300:	460f      	mov	r7, r1
 8016302:	e7ad      	b.n	8016260 <_dtoa_r+0x598>
 8016304:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016308:	9d00      	ldr	r5, [sp, #0]
 801630a:	4642      	mov	r2, r8
 801630c:	464b      	mov	r3, r9
 801630e:	4630      	mov	r0, r6
 8016310:	4639      	mov	r1, r7
 8016312:	f7ea fab3 	bl	800087c <__aeabi_ddiv>
 8016316:	f7ea fc37 	bl	8000b88 <__aeabi_d2iz>
 801631a:	9002      	str	r0, [sp, #8]
 801631c:	f7ea f91a 	bl	8000554 <__aeabi_i2d>
 8016320:	4642      	mov	r2, r8
 8016322:	464b      	mov	r3, r9
 8016324:	f7ea f980 	bl	8000628 <__aeabi_dmul>
 8016328:	4602      	mov	r2, r0
 801632a:	460b      	mov	r3, r1
 801632c:	4630      	mov	r0, r6
 801632e:	4639      	mov	r1, r7
 8016330:	f7e9 ffc2 	bl	80002b8 <__aeabi_dsub>
 8016334:	9e02      	ldr	r6, [sp, #8]
 8016336:	9f01      	ldr	r7, [sp, #4]
 8016338:	3630      	adds	r6, #48	; 0x30
 801633a:	f805 6b01 	strb.w	r6, [r5], #1
 801633e:	9e00      	ldr	r6, [sp, #0]
 8016340:	1bae      	subs	r6, r5, r6
 8016342:	42b7      	cmp	r7, r6
 8016344:	4602      	mov	r2, r0
 8016346:	460b      	mov	r3, r1
 8016348:	d137      	bne.n	80163ba <_dtoa_r+0x6f2>
 801634a:	f7e9 ffb7 	bl	80002bc <__adddf3>
 801634e:	4642      	mov	r2, r8
 8016350:	464b      	mov	r3, r9
 8016352:	4606      	mov	r6, r0
 8016354:	460f      	mov	r7, r1
 8016356:	f7ea fbf7 	bl	8000b48 <__aeabi_dcmpgt>
 801635a:	b9c8      	cbnz	r0, 8016390 <_dtoa_r+0x6c8>
 801635c:	4642      	mov	r2, r8
 801635e:	464b      	mov	r3, r9
 8016360:	4630      	mov	r0, r6
 8016362:	4639      	mov	r1, r7
 8016364:	f7ea fbc8 	bl	8000af8 <__aeabi_dcmpeq>
 8016368:	b110      	cbz	r0, 8016370 <_dtoa_r+0x6a8>
 801636a:	9b02      	ldr	r3, [sp, #8]
 801636c:	07d9      	lsls	r1, r3, #31
 801636e:	d40f      	bmi.n	8016390 <_dtoa_r+0x6c8>
 8016370:	4620      	mov	r0, r4
 8016372:	4659      	mov	r1, fp
 8016374:	f000 faa5 	bl	80168c2 <_Bfree>
 8016378:	2300      	movs	r3, #0
 801637a:	702b      	strb	r3, [r5, #0]
 801637c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801637e:	f10a 0001 	add.w	r0, sl, #1
 8016382:	6018      	str	r0, [r3, #0]
 8016384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016386:	2b00      	cmp	r3, #0
 8016388:	f43f acd9 	beq.w	8015d3e <_dtoa_r+0x76>
 801638c:	601d      	str	r5, [r3, #0]
 801638e:	e4d6      	b.n	8015d3e <_dtoa_r+0x76>
 8016390:	f8cd a01c 	str.w	sl, [sp, #28]
 8016394:	462b      	mov	r3, r5
 8016396:	461d      	mov	r5, r3
 8016398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801639c:	2a39      	cmp	r2, #57	; 0x39
 801639e:	d108      	bne.n	80163b2 <_dtoa_r+0x6ea>
 80163a0:	9a00      	ldr	r2, [sp, #0]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d1f7      	bne.n	8016396 <_dtoa_r+0x6ce>
 80163a6:	9a07      	ldr	r2, [sp, #28]
 80163a8:	9900      	ldr	r1, [sp, #0]
 80163aa:	3201      	adds	r2, #1
 80163ac:	9207      	str	r2, [sp, #28]
 80163ae:	2230      	movs	r2, #48	; 0x30
 80163b0:	700a      	strb	r2, [r1, #0]
 80163b2:	781a      	ldrb	r2, [r3, #0]
 80163b4:	3201      	adds	r2, #1
 80163b6:	701a      	strb	r2, [r3, #0]
 80163b8:	e78d      	b.n	80162d6 <_dtoa_r+0x60e>
 80163ba:	4b7f      	ldr	r3, [pc, #508]	; (80165b8 <_dtoa_r+0x8f0>)
 80163bc:	2200      	movs	r2, #0
 80163be:	f7ea f933 	bl	8000628 <__aeabi_dmul>
 80163c2:	2200      	movs	r2, #0
 80163c4:	2300      	movs	r3, #0
 80163c6:	4606      	mov	r6, r0
 80163c8:	460f      	mov	r7, r1
 80163ca:	f7ea fb95 	bl	8000af8 <__aeabi_dcmpeq>
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d09b      	beq.n	801630a <_dtoa_r+0x642>
 80163d2:	e7cd      	b.n	8016370 <_dtoa_r+0x6a8>
 80163d4:	9a08      	ldr	r2, [sp, #32]
 80163d6:	2a00      	cmp	r2, #0
 80163d8:	f000 80c4 	beq.w	8016564 <_dtoa_r+0x89c>
 80163dc:	9a05      	ldr	r2, [sp, #20]
 80163de:	2a01      	cmp	r2, #1
 80163e0:	f300 80a8 	bgt.w	8016534 <_dtoa_r+0x86c>
 80163e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80163e6:	2a00      	cmp	r2, #0
 80163e8:	f000 80a0 	beq.w	801652c <_dtoa_r+0x864>
 80163ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80163f0:	9e06      	ldr	r6, [sp, #24]
 80163f2:	4645      	mov	r5, r8
 80163f4:	9a04      	ldr	r2, [sp, #16]
 80163f6:	2101      	movs	r1, #1
 80163f8:	441a      	add	r2, r3
 80163fa:	4620      	mov	r0, r4
 80163fc:	4498      	add	r8, r3
 80163fe:	9204      	str	r2, [sp, #16]
 8016400:	f000 fb02 	bl	8016a08 <__i2b>
 8016404:	4607      	mov	r7, r0
 8016406:	2d00      	cmp	r5, #0
 8016408:	dd0b      	ble.n	8016422 <_dtoa_r+0x75a>
 801640a:	9b04      	ldr	r3, [sp, #16]
 801640c:	2b00      	cmp	r3, #0
 801640e:	dd08      	ble.n	8016422 <_dtoa_r+0x75a>
 8016410:	42ab      	cmp	r3, r5
 8016412:	9a04      	ldr	r2, [sp, #16]
 8016414:	bfa8      	it	ge
 8016416:	462b      	movge	r3, r5
 8016418:	eba8 0803 	sub.w	r8, r8, r3
 801641c:	1aed      	subs	r5, r5, r3
 801641e:	1ad3      	subs	r3, r2, r3
 8016420:	9304      	str	r3, [sp, #16]
 8016422:	9b06      	ldr	r3, [sp, #24]
 8016424:	b1fb      	cbz	r3, 8016466 <_dtoa_r+0x79e>
 8016426:	9b08      	ldr	r3, [sp, #32]
 8016428:	2b00      	cmp	r3, #0
 801642a:	f000 809f 	beq.w	801656c <_dtoa_r+0x8a4>
 801642e:	2e00      	cmp	r6, #0
 8016430:	dd11      	ble.n	8016456 <_dtoa_r+0x78e>
 8016432:	4639      	mov	r1, r7
 8016434:	4632      	mov	r2, r6
 8016436:	4620      	mov	r0, r4
 8016438:	f000 fba2 	bl	8016b80 <__pow5mult>
 801643c:	465a      	mov	r2, fp
 801643e:	4601      	mov	r1, r0
 8016440:	4607      	mov	r7, r0
 8016442:	4620      	mov	r0, r4
 8016444:	f000 faf6 	bl	8016a34 <__multiply>
 8016448:	4659      	mov	r1, fp
 801644a:	9007      	str	r0, [sp, #28]
 801644c:	4620      	mov	r0, r4
 801644e:	f000 fa38 	bl	80168c2 <_Bfree>
 8016452:	9b07      	ldr	r3, [sp, #28]
 8016454:	469b      	mov	fp, r3
 8016456:	9b06      	ldr	r3, [sp, #24]
 8016458:	1b9a      	subs	r2, r3, r6
 801645a:	d004      	beq.n	8016466 <_dtoa_r+0x79e>
 801645c:	4659      	mov	r1, fp
 801645e:	4620      	mov	r0, r4
 8016460:	f000 fb8e 	bl	8016b80 <__pow5mult>
 8016464:	4683      	mov	fp, r0
 8016466:	2101      	movs	r1, #1
 8016468:	4620      	mov	r0, r4
 801646a:	f000 facd 	bl	8016a08 <__i2b>
 801646e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016470:	2b00      	cmp	r3, #0
 8016472:	4606      	mov	r6, r0
 8016474:	dd7c      	ble.n	8016570 <_dtoa_r+0x8a8>
 8016476:	461a      	mov	r2, r3
 8016478:	4601      	mov	r1, r0
 801647a:	4620      	mov	r0, r4
 801647c:	f000 fb80 	bl	8016b80 <__pow5mult>
 8016480:	9b05      	ldr	r3, [sp, #20]
 8016482:	2b01      	cmp	r3, #1
 8016484:	4606      	mov	r6, r0
 8016486:	dd76      	ble.n	8016576 <_dtoa_r+0x8ae>
 8016488:	2300      	movs	r3, #0
 801648a:	9306      	str	r3, [sp, #24]
 801648c:	6933      	ldr	r3, [r6, #16]
 801648e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016492:	6918      	ldr	r0, [r3, #16]
 8016494:	f000 fa68 	bl	8016968 <__hi0bits>
 8016498:	f1c0 0020 	rsb	r0, r0, #32
 801649c:	9b04      	ldr	r3, [sp, #16]
 801649e:	4418      	add	r0, r3
 80164a0:	f010 001f 	ands.w	r0, r0, #31
 80164a4:	f000 8086 	beq.w	80165b4 <_dtoa_r+0x8ec>
 80164a8:	f1c0 0320 	rsb	r3, r0, #32
 80164ac:	2b04      	cmp	r3, #4
 80164ae:	dd7f      	ble.n	80165b0 <_dtoa_r+0x8e8>
 80164b0:	f1c0 001c 	rsb	r0, r0, #28
 80164b4:	9b04      	ldr	r3, [sp, #16]
 80164b6:	4403      	add	r3, r0
 80164b8:	4480      	add	r8, r0
 80164ba:	4405      	add	r5, r0
 80164bc:	9304      	str	r3, [sp, #16]
 80164be:	f1b8 0f00 	cmp.w	r8, #0
 80164c2:	dd05      	ble.n	80164d0 <_dtoa_r+0x808>
 80164c4:	4659      	mov	r1, fp
 80164c6:	4642      	mov	r2, r8
 80164c8:	4620      	mov	r0, r4
 80164ca:	f000 fb99 	bl	8016c00 <__lshift>
 80164ce:	4683      	mov	fp, r0
 80164d0:	9b04      	ldr	r3, [sp, #16]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	dd05      	ble.n	80164e2 <_dtoa_r+0x81a>
 80164d6:	4631      	mov	r1, r6
 80164d8:	461a      	mov	r2, r3
 80164da:	4620      	mov	r0, r4
 80164dc:	f000 fb90 	bl	8016c00 <__lshift>
 80164e0:	4606      	mov	r6, r0
 80164e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d069      	beq.n	80165bc <_dtoa_r+0x8f4>
 80164e8:	4631      	mov	r1, r6
 80164ea:	4658      	mov	r0, fp
 80164ec:	f000 fbf4 	bl	8016cd8 <__mcmp>
 80164f0:	2800      	cmp	r0, #0
 80164f2:	da63      	bge.n	80165bc <_dtoa_r+0x8f4>
 80164f4:	2300      	movs	r3, #0
 80164f6:	4659      	mov	r1, fp
 80164f8:	220a      	movs	r2, #10
 80164fa:	4620      	mov	r0, r4
 80164fc:	f000 f9ea 	bl	80168d4 <__multadd>
 8016500:	9b08      	ldr	r3, [sp, #32]
 8016502:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016506:	4683      	mov	fp, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	f000 818e 	beq.w	801682a <_dtoa_r+0xb62>
 801650e:	4639      	mov	r1, r7
 8016510:	2300      	movs	r3, #0
 8016512:	220a      	movs	r2, #10
 8016514:	4620      	mov	r0, r4
 8016516:	f000 f9dd 	bl	80168d4 <__multadd>
 801651a:	f1b9 0f00 	cmp.w	r9, #0
 801651e:	4607      	mov	r7, r0
 8016520:	f300 808e 	bgt.w	8016640 <_dtoa_r+0x978>
 8016524:	9b05      	ldr	r3, [sp, #20]
 8016526:	2b02      	cmp	r3, #2
 8016528:	dc50      	bgt.n	80165cc <_dtoa_r+0x904>
 801652a:	e089      	b.n	8016640 <_dtoa_r+0x978>
 801652c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801652e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016532:	e75d      	b.n	80163f0 <_dtoa_r+0x728>
 8016534:	9b01      	ldr	r3, [sp, #4]
 8016536:	1e5e      	subs	r6, r3, #1
 8016538:	9b06      	ldr	r3, [sp, #24]
 801653a:	42b3      	cmp	r3, r6
 801653c:	bfbf      	itttt	lt
 801653e:	9b06      	ldrlt	r3, [sp, #24]
 8016540:	9606      	strlt	r6, [sp, #24]
 8016542:	1af2      	sublt	r2, r6, r3
 8016544:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016546:	bfb6      	itet	lt
 8016548:	189b      	addlt	r3, r3, r2
 801654a:	1b9e      	subge	r6, r3, r6
 801654c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801654e:	9b01      	ldr	r3, [sp, #4]
 8016550:	bfb8      	it	lt
 8016552:	2600      	movlt	r6, #0
 8016554:	2b00      	cmp	r3, #0
 8016556:	bfb5      	itete	lt
 8016558:	eba8 0503 	sublt.w	r5, r8, r3
 801655c:	9b01      	ldrge	r3, [sp, #4]
 801655e:	2300      	movlt	r3, #0
 8016560:	4645      	movge	r5, r8
 8016562:	e747      	b.n	80163f4 <_dtoa_r+0x72c>
 8016564:	9e06      	ldr	r6, [sp, #24]
 8016566:	9f08      	ldr	r7, [sp, #32]
 8016568:	4645      	mov	r5, r8
 801656a:	e74c      	b.n	8016406 <_dtoa_r+0x73e>
 801656c:	9a06      	ldr	r2, [sp, #24]
 801656e:	e775      	b.n	801645c <_dtoa_r+0x794>
 8016570:	9b05      	ldr	r3, [sp, #20]
 8016572:	2b01      	cmp	r3, #1
 8016574:	dc18      	bgt.n	80165a8 <_dtoa_r+0x8e0>
 8016576:	9b02      	ldr	r3, [sp, #8]
 8016578:	b9b3      	cbnz	r3, 80165a8 <_dtoa_r+0x8e0>
 801657a:	9b03      	ldr	r3, [sp, #12]
 801657c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016580:	b9a3      	cbnz	r3, 80165ac <_dtoa_r+0x8e4>
 8016582:	9b03      	ldr	r3, [sp, #12]
 8016584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016588:	0d1b      	lsrs	r3, r3, #20
 801658a:	051b      	lsls	r3, r3, #20
 801658c:	b12b      	cbz	r3, 801659a <_dtoa_r+0x8d2>
 801658e:	9b04      	ldr	r3, [sp, #16]
 8016590:	3301      	adds	r3, #1
 8016592:	9304      	str	r3, [sp, #16]
 8016594:	f108 0801 	add.w	r8, r8, #1
 8016598:	2301      	movs	r3, #1
 801659a:	9306      	str	r3, [sp, #24]
 801659c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801659e:	2b00      	cmp	r3, #0
 80165a0:	f47f af74 	bne.w	801648c <_dtoa_r+0x7c4>
 80165a4:	2001      	movs	r0, #1
 80165a6:	e779      	b.n	801649c <_dtoa_r+0x7d4>
 80165a8:	2300      	movs	r3, #0
 80165aa:	e7f6      	b.n	801659a <_dtoa_r+0x8d2>
 80165ac:	9b02      	ldr	r3, [sp, #8]
 80165ae:	e7f4      	b.n	801659a <_dtoa_r+0x8d2>
 80165b0:	d085      	beq.n	80164be <_dtoa_r+0x7f6>
 80165b2:	4618      	mov	r0, r3
 80165b4:	301c      	adds	r0, #28
 80165b6:	e77d      	b.n	80164b4 <_dtoa_r+0x7ec>
 80165b8:	40240000 	.word	0x40240000
 80165bc:	9b01      	ldr	r3, [sp, #4]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	dc38      	bgt.n	8016634 <_dtoa_r+0x96c>
 80165c2:	9b05      	ldr	r3, [sp, #20]
 80165c4:	2b02      	cmp	r3, #2
 80165c6:	dd35      	ble.n	8016634 <_dtoa_r+0x96c>
 80165c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80165cc:	f1b9 0f00 	cmp.w	r9, #0
 80165d0:	d10d      	bne.n	80165ee <_dtoa_r+0x926>
 80165d2:	4631      	mov	r1, r6
 80165d4:	464b      	mov	r3, r9
 80165d6:	2205      	movs	r2, #5
 80165d8:	4620      	mov	r0, r4
 80165da:	f000 f97b 	bl	80168d4 <__multadd>
 80165de:	4601      	mov	r1, r0
 80165e0:	4606      	mov	r6, r0
 80165e2:	4658      	mov	r0, fp
 80165e4:	f000 fb78 	bl	8016cd8 <__mcmp>
 80165e8:	2800      	cmp	r0, #0
 80165ea:	f73f adbe 	bgt.w	801616a <_dtoa_r+0x4a2>
 80165ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165f0:	9d00      	ldr	r5, [sp, #0]
 80165f2:	ea6f 0a03 	mvn.w	sl, r3
 80165f6:	f04f 0800 	mov.w	r8, #0
 80165fa:	4631      	mov	r1, r6
 80165fc:	4620      	mov	r0, r4
 80165fe:	f000 f960 	bl	80168c2 <_Bfree>
 8016602:	2f00      	cmp	r7, #0
 8016604:	f43f aeb4 	beq.w	8016370 <_dtoa_r+0x6a8>
 8016608:	f1b8 0f00 	cmp.w	r8, #0
 801660c:	d005      	beq.n	801661a <_dtoa_r+0x952>
 801660e:	45b8      	cmp	r8, r7
 8016610:	d003      	beq.n	801661a <_dtoa_r+0x952>
 8016612:	4641      	mov	r1, r8
 8016614:	4620      	mov	r0, r4
 8016616:	f000 f954 	bl	80168c2 <_Bfree>
 801661a:	4639      	mov	r1, r7
 801661c:	4620      	mov	r0, r4
 801661e:	f000 f950 	bl	80168c2 <_Bfree>
 8016622:	e6a5      	b.n	8016370 <_dtoa_r+0x6a8>
 8016624:	2600      	movs	r6, #0
 8016626:	4637      	mov	r7, r6
 8016628:	e7e1      	b.n	80165ee <_dtoa_r+0x926>
 801662a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801662c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016630:	4637      	mov	r7, r6
 8016632:	e59a      	b.n	801616a <_dtoa_r+0x4a2>
 8016634:	9b08      	ldr	r3, [sp, #32]
 8016636:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801663a:	2b00      	cmp	r3, #0
 801663c:	f000 80fc 	beq.w	8016838 <_dtoa_r+0xb70>
 8016640:	2d00      	cmp	r5, #0
 8016642:	dd05      	ble.n	8016650 <_dtoa_r+0x988>
 8016644:	4639      	mov	r1, r7
 8016646:	462a      	mov	r2, r5
 8016648:	4620      	mov	r0, r4
 801664a:	f000 fad9 	bl	8016c00 <__lshift>
 801664e:	4607      	mov	r7, r0
 8016650:	9b06      	ldr	r3, [sp, #24]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d05b      	beq.n	801670e <_dtoa_r+0xa46>
 8016656:	6879      	ldr	r1, [r7, #4]
 8016658:	4620      	mov	r0, r4
 801665a:	f000 f90d 	bl	8016878 <_Balloc>
 801665e:	4605      	mov	r5, r0
 8016660:	b920      	cbnz	r0, 801666c <_dtoa_r+0x9a4>
 8016662:	4b80      	ldr	r3, [pc, #512]	; (8016864 <_dtoa_r+0xb9c>)
 8016664:	4602      	mov	r2, r0
 8016666:	f240 21ea 	movw	r1, #746	; 0x2ea
 801666a:	e45b      	b.n	8015f24 <_dtoa_r+0x25c>
 801666c:	693a      	ldr	r2, [r7, #16]
 801666e:	3202      	adds	r2, #2
 8016670:	0092      	lsls	r2, r2, #2
 8016672:	f107 010c 	add.w	r1, r7, #12
 8016676:	300c      	adds	r0, #12
 8016678:	f7fd fe36 	bl	80142e8 <memcpy>
 801667c:	2201      	movs	r2, #1
 801667e:	4629      	mov	r1, r5
 8016680:	4620      	mov	r0, r4
 8016682:	f000 fabd 	bl	8016c00 <__lshift>
 8016686:	9b00      	ldr	r3, [sp, #0]
 8016688:	3301      	adds	r3, #1
 801668a:	9301      	str	r3, [sp, #4]
 801668c:	9b00      	ldr	r3, [sp, #0]
 801668e:	444b      	add	r3, r9
 8016690:	9307      	str	r3, [sp, #28]
 8016692:	9b02      	ldr	r3, [sp, #8]
 8016694:	f003 0301 	and.w	r3, r3, #1
 8016698:	46b8      	mov	r8, r7
 801669a:	9306      	str	r3, [sp, #24]
 801669c:	4607      	mov	r7, r0
 801669e:	9b01      	ldr	r3, [sp, #4]
 80166a0:	4631      	mov	r1, r6
 80166a2:	3b01      	subs	r3, #1
 80166a4:	4658      	mov	r0, fp
 80166a6:	9302      	str	r3, [sp, #8]
 80166a8:	f7ff fa82 	bl	8015bb0 <quorem>
 80166ac:	4603      	mov	r3, r0
 80166ae:	3330      	adds	r3, #48	; 0x30
 80166b0:	9004      	str	r0, [sp, #16]
 80166b2:	4641      	mov	r1, r8
 80166b4:	4658      	mov	r0, fp
 80166b6:	9308      	str	r3, [sp, #32]
 80166b8:	f000 fb0e 	bl	8016cd8 <__mcmp>
 80166bc:	463a      	mov	r2, r7
 80166be:	4681      	mov	r9, r0
 80166c0:	4631      	mov	r1, r6
 80166c2:	4620      	mov	r0, r4
 80166c4:	f000 fb24 	bl	8016d10 <__mdiff>
 80166c8:	68c2      	ldr	r2, [r0, #12]
 80166ca:	9b08      	ldr	r3, [sp, #32]
 80166cc:	4605      	mov	r5, r0
 80166ce:	bb02      	cbnz	r2, 8016712 <_dtoa_r+0xa4a>
 80166d0:	4601      	mov	r1, r0
 80166d2:	4658      	mov	r0, fp
 80166d4:	f000 fb00 	bl	8016cd8 <__mcmp>
 80166d8:	9b08      	ldr	r3, [sp, #32]
 80166da:	4602      	mov	r2, r0
 80166dc:	4629      	mov	r1, r5
 80166de:	4620      	mov	r0, r4
 80166e0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80166e4:	f000 f8ed 	bl	80168c2 <_Bfree>
 80166e8:	9b05      	ldr	r3, [sp, #20]
 80166ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166ec:	9d01      	ldr	r5, [sp, #4]
 80166ee:	ea43 0102 	orr.w	r1, r3, r2
 80166f2:	9b06      	ldr	r3, [sp, #24]
 80166f4:	430b      	orrs	r3, r1
 80166f6:	9b08      	ldr	r3, [sp, #32]
 80166f8:	d10d      	bne.n	8016716 <_dtoa_r+0xa4e>
 80166fa:	2b39      	cmp	r3, #57	; 0x39
 80166fc:	d029      	beq.n	8016752 <_dtoa_r+0xa8a>
 80166fe:	f1b9 0f00 	cmp.w	r9, #0
 8016702:	dd01      	ble.n	8016708 <_dtoa_r+0xa40>
 8016704:	9b04      	ldr	r3, [sp, #16]
 8016706:	3331      	adds	r3, #49	; 0x31
 8016708:	9a02      	ldr	r2, [sp, #8]
 801670a:	7013      	strb	r3, [r2, #0]
 801670c:	e775      	b.n	80165fa <_dtoa_r+0x932>
 801670e:	4638      	mov	r0, r7
 8016710:	e7b9      	b.n	8016686 <_dtoa_r+0x9be>
 8016712:	2201      	movs	r2, #1
 8016714:	e7e2      	b.n	80166dc <_dtoa_r+0xa14>
 8016716:	f1b9 0f00 	cmp.w	r9, #0
 801671a:	db06      	blt.n	801672a <_dtoa_r+0xa62>
 801671c:	9905      	ldr	r1, [sp, #20]
 801671e:	ea41 0909 	orr.w	r9, r1, r9
 8016722:	9906      	ldr	r1, [sp, #24]
 8016724:	ea59 0101 	orrs.w	r1, r9, r1
 8016728:	d120      	bne.n	801676c <_dtoa_r+0xaa4>
 801672a:	2a00      	cmp	r2, #0
 801672c:	ddec      	ble.n	8016708 <_dtoa_r+0xa40>
 801672e:	4659      	mov	r1, fp
 8016730:	2201      	movs	r2, #1
 8016732:	4620      	mov	r0, r4
 8016734:	9301      	str	r3, [sp, #4]
 8016736:	f000 fa63 	bl	8016c00 <__lshift>
 801673a:	4631      	mov	r1, r6
 801673c:	4683      	mov	fp, r0
 801673e:	f000 facb 	bl	8016cd8 <__mcmp>
 8016742:	2800      	cmp	r0, #0
 8016744:	9b01      	ldr	r3, [sp, #4]
 8016746:	dc02      	bgt.n	801674e <_dtoa_r+0xa86>
 8016748:	d1de      	bne.n	8016708 <_dtoa_r+0xa40>
 801674a:	07da      	lsls	r2, r3, #31
 801674c:	d5dc      	bpl.n	8016708 <_dtoa_r+0xa40>
 801674e:	2b39      	cmp	r3, #57	; 0x39
 8016750:	d1d8      	bne.n	8016704 <_dtoa_r+0xa3c>
 8016752:	9a02      	ldr	r2, [sp, #8]
 8016754:	2339      	movs	r3, #57	; 0x39
 8016756:	7013      	strb	r3, [r2, #0]
 8016758:	462b      	mov	r3, r5
 801675a:	461d      	mov	r5, r3
 801675c:	3b01      	subs	r3, #1
 801675e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016762:	2a39      	cmp	r2, #57	; 0x39
 8016764:	d050      	beq.n	8016808 <_dtoa_r+0xb40>
 8016766:	3201      	adds	r2, #1
 8016768:	701a      	strb	r2, [r3, #0]
 801676a:	e746      	b.n	80165fa <_dtoa_r+0x932>
 801676c:	2a00      	cmp	r2, #0
 801676e:	dd03      	ble.n	8016778 <_dtoa_r+0xab0>
 8016770:	2b39      	cmp	r3, #57	; 0x39
 8016772:	d0ee      	beq.n	8016752 <_dtoa_r+0xa8a>
 8016774:	3301      	adds	r3, #1
 8016776:	e7c7      	b.n	8016708 <_dtoa_r+0xa40>
 8016778:	9a01      	ldr	r2, [sp, #4]
 801677a:	9907      	ldr	r1, [sp, #28]
 801677c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016780:	428a      	cmp	r2, r1
 8016782:	d02a      	beq.n	80167da <_dtoa_r+0xb12>
 8016784:	4659      	mov	r1, fp
 8016786:	2300      	movs	r3, #0
 8016788:	220a      	movs	r2, #10
 801678a:	4620      	mov	r0, r4
 801678c:	f000 f8a2 	bl	80168d4 <__multadd>
 8016790:	45b8      	cmp	r8, r7
 8016792:	4683      	mov	fp, r0
 8016794:	f04f 0300 	mov.w	r3, #0
 8016798:	f04f 020a 	mov.w	r2, #10
 801679c:	4641      	mov	r1, r8
 801679e:	4620      	mov	r0, r4
 80167a0:	d107      	bne.n	80167b2 <_dtoa_r+0xaea>
 80167a2:	f000 f897 	bl	80168d4 <__multadd>
 80167a6:	4680      	mov	r8, r0
 80167a8:	4607      	mov	r7, r0
 80167aa:	9b01      	ldr	r3, [sp, #4]
 80167ac:	3301      	adds	r3, #1
 80167ae:	9301      	str	r3, [sp, #4]
 80167b0:	e775      	b.n	801669e <_dtoa_r+0x9d6>
 80167b2:	f000 f88f 	bl	80168d4 <__multadd>
 80167b6:	4639      	mov	r1, r7
 80167b8:	4680      	mov	r8, r0
 80167ba:	2300      	movs	r3, #0
 80167bc:	220a      	movs	r2, #10
 80167be:	4620      	mov	r0, r4
 80167c0:	f000 f888 	bl	80168d4 <__multadd>
 80167c4:	4607      	mov	r7, r0
 80167c6:	e7f0      	b.n	80167aa <_dtoa_r+0xae2>
 80167c8:	f1b9 0f00 	cmp.w	r9, #0
 80167cc:	9a00      	ldr	r2, [sp, #0]
 80167ce:	bfcc      	ite	gt
 80167d0:	464d      	movgt	r5, r9
 80167d2:	2501      	movle	r5, #1
 80167d4:	4415      	add	r5, r2
 80167d6:	f04f 0800 	mov.w	r8, #0
 80167da:	4659      	mov	r1, fp
 80167dc:	2201      	movs	r2, #1
 80167de:	4620      	mov	r0, r4
 80167e0:	9301      	str	r3, [sp, #4]
 80167e2:	f000 fa0d 	bl	8016c00 <__lshift>
 80167e6:	4631      	mov	r1, r6
 80167e8:	4683      	mov	fp, r0
 80167ea:	f000 fa75 	bl	8016cd8 <__mcmp>
 80167ee:	2800      	cmp	r0, #0
 80167f0:	dcb2      	bgt.n	8016758 <_dtoa_r+0xa90>
 80167f2:	d102      	bne.n	80167fa <_dtoa_r+0xb32>
 80167f4:	9b01      	ldr	r3, [sp, #4]
 80167f6:	07db      	lsls	r3, r3, #31
 80167f8:	d4ae      	bmi.n	8016758 <_dtoa_r+0xa90>
 80167fa:	462b      	mov	r3, r5
 80167fc:	461d      	mov	r5, r3
 80167fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016802:	2a30      	cmp	r2, #48	; 0x30
 8016804:	d0fa      	beq.n	80167fc <_dtoa_r+0xb34>
 8016806:	e6f8      	b.n	80165fa <_dtoa_r+0x932>
 8016808:	9a00      	ldr	r2, [sp, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	d1a5      	bne.n	801675a <_dtoa_r+0xa92>
 801680e:	f10a 0a01 	add.w	sl, sl, #1
 8016812:	2331      	movs	r3, #49	; 0x31
 8016814:	e779      	b.n	801670a <_dtoa_r+0xa42>
 8016816:	4b14      	ldr	r3, [pc, #80]	; (8016868 <_dtoa_r+0xba0>)
 8016818:	f7ff bab1 	b.w	8015d7e <_dtoa_r+0xb6>
 801681c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801681e:	2b00      	cmp	r3, #0
 8016820:	f47f aa93 	bne.w	8015d4a <_dtoa_r+0x82>
 8016824:	4b11      	ldr	r3, [pc, #68]	; (801686c <_dtoa_r+0xba4>)
 8016826:	f7ff baaa 	b.w	8015d7e <_dtoa_r+0xb6>
 801682a:	f1b9 0f00 	cmp.w	r9, #0
 801682e:	dc03      	bgt.n	8016838 <_dtoa_r+0xb70>
 8016830:	9b05      	ldr	r3, [sp, #20]
 8016832:	2b02      	cmp	r3, #2
 8016834:	f73f aeca 	bgt.w	80165cc <_dtoa_r+0x904>
 8016838:	9d00      	ldr	r5, [sp, #0]
 801683a:	4631      	mov	r1, r6
 801683c:	4658      	mov	r0, fp
 801683e:	f7ff f9b7 	bl	8015bb0 <quorem>
 8016842:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016846:	f805 3b01 	strb.w	r3, [r5], #1
 801684a:	9a00      	ldr	r2, [sp, #0]
 801684c:	1aaa      	subs	r2, r5, r2
 801684e:	4591      	cmp	r9, r2
 8016850:	ddba      	ble.n	80167c8 <_dtoa_r+0xb00>
 8016852:	4659      	mov	r1, fp
 8016854:	2300      	movs	r3, #0
 8016856:	220a      	movs	r2, #10
 8016858:	4620      	mov	r0, r4
 801685a:	f000 f83b 	bl	80168d4 <__multadd>
 801685e:	4683      	mov	fp, r0
 8016860:	e7eb      	b.n	801683a <_dtoa_r+0xb72>
 8016862:	bf00      	nop
 8016864:	080393bd 	.word	0x080393bd
 8016868:	0803938e 	.word	0x0803938e
 801686c:	080393b4 	.word	0x080393b4

08016870 <_localeconv_r>:
 8016870:	4800      	ldr	r0, [pc, #0]	; (8016874 <_localeconv_r+0x4>)
 8016872:	4770      	bx	lr
 8016874:	200009e4 	.word	0x200009e4

08016878 <_Balloc>:
 8016878:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801687a:	b570      	push	{r4, r5, r6, lr}
 801687c:	4605      	mov	r5, r0
 801687e:	460c      	mov	r4, r1
 8016880:	b17b      	cbz	r3, 80168a2 <_Balloc+0x2a>
 8016882:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016884:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016888:	b9a0      	cbnz	r0, 80168b4 <_Balloc+0x3c>
 801688a:	2101      	movs	r1, #1
 801688c:	fa01 f604 	lsl.w	r6, r1, r4
 8016890:	1d72      	adds	r2, r6, #5
 8016892:	0092      	lsls	r2, r2, #2
 8016894:	4628      	mov	r0, r5
 8016896:	f7fd fa7f 	bl	8013d98 <_calloc_r>
 801689a:	b148      	cbz	r0, 80168b0 <_Balloc+0x38>
 801689c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80168a0:	e00b      	b.n	80168ba <_Balloc+0x42>
 80168a2:	2221      	movs	r2, #33	; 0x21
 80168a4:	2104      	movs	r1, #4
 80168a6:	f7fd fa77 	bl	8013d98 <_calloc_r>
 80168aa:	64e8      	str	r0, [r5, #76]	; 0x4c
 80168ac:	2800      	cmp	r0, #0
 80168ae:	d1e8      	bne.n	8016882 <_Balloc+0xa>
 80168b0:	2000      	movs	r0, #0
 80168b2:	bd70      	pop	{r4, r5, r6, pc}
 80168b4:	6802      	ldr	r2, [r0, #0]
 80168b6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80168ba:	2300      	movs	r3, #0
 80168bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80168c0:	e7f7      	b.n	80168b2 <_Balloc+0x3a>

080168c2 <_Bfree>:
 80168c2:	b131      	cbz	r1, 80168d2 <_Bfree+0x10>
 80168c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80168c6:	684a      	ldr	r2, [r1, #4]
 80168c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80168cc:	6008      	str	r0, [r1, #0]
 80168ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80168d2:	4770      	bx	lr

080168d4 <__multadd>:
 80168d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168d8:	690e      	ldr	r6, [r1, #16]
 80168da:	4607      	mov	r7, r0
 80168dc:	4698      	mov	r8, r3
 80168de:	460c      	mov	r4, r1
 80168e0:	f101 0014 	add.w	r0, r1, #20
 80168e4:	2300      	movs	r3, #0
 80168e6:	6805      	ldr	r5, [r0, #0]
 80168e8:	b2a9      	uxth	r1, r5
 80168ea:	fb02 8101 	mla	r1, r2, r1, r8
 80168ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80168f2:	0c2d      	lsrs	r5, r5, #16
 80168f4:	fb02 c505 	mla	r5, r2, r5, ip
 80168f8:	b289      	uxth	r1, r1
 80168fa:	3301      	adds	r3, #1
 80168fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016900:	429e      	cmp	r6, r3
 8016902:	f840 1b04 	str.w	r1, [r0], #4
 8016906:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801690a:	dcec      	bgt.n	80168e6 <__multadd+0x12>
 801690c:	f1b8 0f00 	cmp.w	r8, #0
 8016910:	d022      	beq.n	8016958 <__multadd+0x84>
 8016912:	68a3      	ldr	r3, [r4, #8]
 8016914:	42b3      	cmp	r3, r6
 8016916:	dc19      	bgt.n	801694c <__multadd+0x78>
 8016918:	6861      	ldr	r1, [r4, #4]
 801691a:	4638      	mov	r0, r7
 801691c:	3101      	adds	r1, #1
 801691e:	f7ff ffab 	bl	8016878 <_Balloc>
 8016922:	4605      	mov	r5, r0
 8016924:	b928      	cbnz	r0, 8016932 <__multadd+0x5e>
 8016926:	4602      	mov	r2, r0
 8016928:	4b0d      	ldr	r3, [pc, #52]	; (8016960 <__multadd+0x8c>)
 801692a:	480e      	ldr	r0, [pc, #56]	; (8016964 <__multadd+0x90>)
 801692c:	21b5      	movs	r1, #181	; 0xb5
 801692e:	f000 fb99 	bl	8017064 <__assert_func>
 8016932:	6922      	ldr	r2, [r4, #16]
 8016934:	3202      	adds	r2, #2
 8016936:	f104 010c 	add.w	r1, r4, #12
 801693a:	0092      	lsls	r2, r2, #2
 801693c:	300c      	adds	r0, #12
 801693e:	f7fd fcd3 	bl	80142e8 <memcpy>
 8016942:	4621      	mov	r1, r4
 8016944:	4638      	mov	r0, r7
 8016946:	f7ff ffbc 	bl	80168c2 <_Bfree>
 801694a:	462c      	mov	r4, r5
 801694c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016950:	3601      	adds	r6, #1
 8016952:	f8c3 8014 	str.w	r8, [r3, #20]
 8016956:	6126      	str	r6, [r4, #16]
 8016958:	4620      	mov	r0, r4
 801695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695e:	bf00      	nop
 8016960:	080393bd 	.word	0x080393bd
 8016964:	0803942d 	.word	0x0803942d

08016968 <__hi0bits>:
 8016968:	0c03      	lsrs	r3, r0, #16
 801696a:	041b      	lsls	r3, r3, #16
 801696c:	b9d3      	cbnz	r3, 80169a4 <__hi0bits+0x3c>
 801696e:	0400      	lsls	r0, r0, #16
 8016970:	2310      	movs	r3, #16
 8016972:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016976:	bf04      	itt	eq
 8016978:	0200      	lsleq	r0, r0, #8
 801697a:	3308      	addeq	r3, #8
 801697c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016980:	bf04      	itt	eq
 8016982:	0100      	lsleq	r0, r0, #4
 8016984:	3304      	addeq	r3, #4
 8016986:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801698a:	bf04      	itt	eq
 801698c:	0080      	lsleq	r0, r0, #2
 801698e:	3302      	addeq	r3, #2
 8016990:	2800      	cmp	r0, #0
 8016992:	db05      	blt.n	80169a0 <__hi0bits+0x38>
 8016994:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016998:	f103 0301 	add.w	r3, r3, #1
 801699c:	bf08      	it	eq
 801699e:	2320      	moveq	r3, #32
 80169a0:	4618      	mov	r0, r3
 80169a2:	4770      	bx	lr
 80169a4:	2300      	movs	r3, #0
 80169a6:	e7e4      	b.n	8016972 <__hi0bits+0xa>

080169a8 <__lo0bits>:
 80169a8:	6803      	ldr	r3, [r0, #0]
 80169aa:	f013 0207 	ands.w	r2, r3, #7
 80169ae:	4601      	mov	r1, r0
 80169b0:	d00b      	beq.n	80169ca <__lo0bits+0x22>
 80169b2:	07da      	lsls	r2, r3, #31
 80169b4:	d424      	bmi.n	8016a00 <__lo0bits+0x58>
 80169b6:	0798      	lsls	r0, r3, #30
 80169b8:	bf49      	itett	mi
 80169ba:	085b      	lsrmi	r3, r3, #1
 80169bc:	089b      	lsrpl	r3, r3, #2
 80169be:	2001      	movmi	r0, #1
 80169c0:	600b      	strmi	r3, [r1, #0]
 80169c2:	bf5c      	itt	pl
 80169c4:	600b      	strpl	r3, [r1, #0]
 80169c6:	2002      	movpl	r0, #2
 80169c8:	4770      	bx	lr
 80169ca:	b298      	uxth	r0, r3
 80169cc:	b9b0      	cbnz	r0, 80169fc <__lo0bits+0x54>
 80169ce:	0c1b      	lsrs	r3, r3, #16
 80169d0:	2010      	movs	r0, #16
 80169d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80169d6:	bf04      	itt	eq
 80169d8:	0a1b      	lsreq	r3, r3, #8
 80169da:	3008      	addeq	r0, #8
 80169dc:	071a      	lsls	r2, r3, #28
 80169de:	bf04      	itt	eq
 80169e0:	091b      	lsreq	r3, r3, #4
 80169e2:	3004      	addeq	r0, #4
 80169e4:	079a      	lsls	r2, r3, #30
 80169e6:	bf04      	itt	eq
 80169e8:	089b      	lsreq	r3, r3, #2
 80169ea:	3002      	addeq	r0, #2
 80169ec:	07da      	lsls	r2, r3, #31
 80169ee:	d403      	bmi.n	80169f8 <__lo0bits+0x50>
 80169f0:	085b      	lsrs	r3, r3, #1
 80169f2:	f100 0001 	add.w	r0, r0, #1
 80169f6:	d005      	beq.n	8016a04 <__lo0bits+0x5c>
 80169f8:	600b      	str	r3, [r1, #0]
 80169fa:	4770      	bx	lr
 80169fc:	4610      	mov	r0, r2
 80169fe:	e7e8      	b.n	80169d2 <__lo0bits+0x2a>
 8016a00:	2000      	movs	r0, #0
 8016a02:	4770      	bx	lr
 8016a04:	2020      	movs	r0, #32
 8016a06:	4770      	bx	lr

08016a08 <__i2b>:
 8016a08:	b510      	push	{r4, lr}
 8016a0a:	460c      	mov	r4, r1
 8016a0c:	2101      	movs	r1, #1
 8016a0e:	f7ff ff33 	bl	8016878 <_Balloc>
 8016a12:	4602      	mov	r2, r0
 8016a14:	b928      	cbnz	r0, 8016a22 <__i2b+0x1a>
 8016a16:	4b05      	ldr	r3, [pc, #20]	; (8016a2c <__i2b+0x24>)
 8016a18:	4805      	ldr	r0, [pc, #20]	; (8016a30 <__i2b+0x28>)
 8016a1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016a1e:	f000 fb21 	bl	8017064 <__assert_func>
 8016a22:	2301      	movs	r3, #1
 8016a24:	6144      	str	r4, [r0, #20]
 8016a26:	6103      	str	r3, [r0, #16]
 8016a28:	bd10      	pop	{r4, pc}
 8016a2a:	bf00      	nop
 8016a2c:	080393bd 	.word	0x080393bd
 8016a30:	0803942d 	.word	0x0803942d

08016a34 <__multiply>:
 8016a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a38:	4614      	mov	r4, r2
 8016a3a:	690a      	ldr	r2, [r1, #16]
 8016a3c:	6923      	ldr	r3, [r4, #16]
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	bfb8      	it	lt
 8016a42:	460b      	movlt	r3, r1
 8016a44:	460d      	mov	r5, r1
 8016a46:	bfbc      	itt	lt
 8016a48:	4625      	movlt	r5, r4
 8016a4a:	461c      	movlt	r4, r3
 8016a4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016a50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016a54:	68ab      	ldr	r3, [r5, #8]
 8016a56:	6869      	ldr	r1, [r5, #4]
 8016a58:	eb0a 0709 	add.w	r7, sl, r9
 8016a5c:	42bb      	cmp	r3, r7
 8016a5e:	b085      	sub	sp, #20
 8016a60:	bfb8      	it	lt
 8016a62:	3101      	addlt	r1, #1
 8016a64:	f7ff ff08 	bl	8016878 <_Balloc>
 8016a68:	b930      	cbnz	r0, 8016a78 <__multiply+0x44>
 8016a6a:	4602      	mov	r2, r0
 8016a6c:	4b42      	ldr	r3, [pc, #264]	; (8016b78 <__multiply+0x144>)
 8016a6e:	4843      	ldr	r0, [pc, #268]	; (8016b7c <__multiply+0x148>)
 8016a70:	f240 115d 	movw	r1, #349	; 0x15d
 8016a74:	f000 faf6 	bl	8017064 <__assert_func>
 8016a78:	f100 0614 	add.w	r6, r0, #20
 8016a7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016a80:	4633      	mov	r3, r6
 8016a82:	2200      	movs	r2, #0
 8016a84:	4543      	cmp	r3, r8
 8016a86:	d31e      	bcc.n	8016ac6 <__multiply+0x92>
 8016a88:	f105 0c14 	add.w	ip, r5, #20
 8016a8c:	f104 0314 	add.w	r3, r4, #20
 8016a90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016a94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016a98:	9202      	str	r2, [sp, #8]
 8016a9a:	ebac 0205 	sub.w	r2, ip, r5
 8016a9e:	3a15      	subs	r2, #21
 8016aa0:	f022 0203 	bic.w	r2, r2, #3
 8016aa4:	3204      	adds	r2, #4
 8016aa6:	f105 0115 	add.w	r1, r5, #21
 8016aaa:	458c      	cmp	ip, r1
 8016aac:	bf38      	it	cc
 8016aae:	2204      	movcc	r2, #4
 8016ab0:	9201      	str	r2, [sp, #4]
 8016ab2:	9a02      	ldr	r2, [sp, #8]
 8016ab4:	9303      	str	r3, [sp, #12]
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d808      	bhi.n	8016acc <__multiply+0x98>
 8016aba:	2f00      	cmp	r7, #0
 8016abc:	dc55      	bgt.n	8016b6a <__multiply+0x136>
 8016abe:	6107      	str	r7, [r0, #16]
 8016ac0:	b005      	add	sp, #20
 8016ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac6:	f843 2b04 	str.w	r2, [r3], #4
 8016aca:	e7db      	b.n	8016a84 <__multiply+0x50>
 8016acc:	f8b3 a000 	ldrh.w	sl, [r3]
 8016ad0:	f1ba 0f00 	cmp.w	sl, #0
 8016ad4:	d020      	beq.n	8016b18 <__multiply+0xe4>
 8016ad6:	f105 0e14 	add.w	lr, r5, #20
 8016ada:	46b1      	mov	r9, r6
 8016adc:	2200      	movs	r2, #0
 8016ade:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016ae2:	f8d9 b000 	ldr.w	fp, [r9]
 8016ae6:	b2a1      	uxth	r1, r4
 8016ae8:	fa1f fb8b 	uxth.w	fp, fp
 8016aec:	fb0a b101 	mla	r1, sl, r1, fp
 8016af0:	4411      	add	r1, r2
 8016af2:	f8d9 2000 	ldr.w	r2, [r9]
 8016af6:	0c24      	lsrs	r4, r4, #16
 8016af8:	0c12      	lsrs	r2, r2, #16
 8016afa:	fb0a 2404 	mla	r4, sl, r4, r2
 8016afe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8016b02:	b289      	uxth	r1, r1
 8016b04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016b08:	45f4      	cmp	ip, lr
 8016b0a:	f849 1b04 	str.w	r1, [r9], #4
 8016b0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8016b12:	d8e4      	bhi.n	8016ade <__multiply+0xaa>
 8016b14:	9901      	ldr	r1, [sp, #4]
 8016b16:	5072      	str	r2, [r6, r1]
 8016b18:	9a03      	ldr	r2, [sp, #12]
 8016b1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016b1e:	3304      	adds	r3, #4
 8016b20:	f1b9 0f00 	cmp.w	r9, #0
 8016b24:	d01f      	beq.n	8016b66 <__multiply+0x132>
 8016b26:	6834      	ldr	r4, [r6, #0]
 8016b28:	f105 0114 	add.w	r1, r5, #20
 8016b2c:	46b6      	mov	lr, r6
 8016b2e:	f04f 0a00 	mov.w	sl, #0
 8016b32:	880a      	ldrh	r2, [r1, #0]
 8016b34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016b38:	fb09 b202 	mla	r2, r9, r2, fp
 8016b3c:	4492      	add	sl, r2
 8016b3e:	b2a4      	uxth	r4, r4
 8016b40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016b44:	f84e 4b04 	str.w	r4, [lr], #4
 8016b48:	f851 4b04 	ldr.w	r4, [r1], #4
 8016b4c:	f8be 2000 	ldrh.w	r2, [lr]
 8016b50:	0c24      	lsrs	r4, r4, #16
 8016b52:	fb09 2404 	mla	r4, r9, r4, r2
 8016b56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016b5a:	458c      	cmp	ip, r1
 8016b5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016b60:	d8e7      	bhi.n	8016b32 <__multiply+0xfe>
 8016b62:	9a01      	ldr	r2, [sp, #4]
 8016b64:	50b4      	str	r4, [r6, r2]
 8016b66:	3604      	adds	r6, #4
 8016b68:	e7a3      	b.n	8016ab2 <__multiply+0x7e>
 8016b6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1a5      	bne.n	8016abe <__multiply+0x8a>
 8016b72:	3f01      	subs	r7, #1
 8016b74:	e7a1      	b.n	8016aba <__multiply+0x86>
 8016b76:	bf00      	nop
 8016b78:	080393bd 	.word	0x080393bd
 8016b7c:	0803942d 	.word	0x0803942d

08016b80 <__pow5mult>:
 8016b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b84:	4615      	mov	r5, r2
 8016b86:	f012 0203 	ands.w	r2, r2, #3
 8016b8a:	4606      	mov	r6, r0
 8016b8c:	460f      	mov	r7, r1
 8016b8e:	d007      	beq.n	8016ba0 <__pow5mult+0x20>
 8016b90:	4c1a      	ldr	r4, [pc, #104]	; (8016bfc <__pow5mult+0x7c>)
 8016b92:	3a01      	subs	r2, #1
 8016b94:	2300      	movs	r3, #0
 8016b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b9a:	f7ff fe9b 	bl	80168d4 <__multadd>
 8016b9e:	4607      	mov	r7, r0
 8016ba0:	10ad      	asrs	r5, r5, #2
 8016ba2:	d027      	beq.n	8016bf4 <__pow5mult+0x74>
 8016ba4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8016ba6:	b944      	cbnz	r4, 8016bba <__pow5mult+0x3a>
 8016ba8:	f240 2171 	movw	r1, #625	; 0x271
 8016bac:	4630      	mov	r0, r6
 8016bae:	f7ff ff2b 	bl	8016a08 <__i2b>
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	64b0      	str	r0, [r6, #72]	; 0x48
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	6003      	str	r3, [r0, #0]
 8016bba:	f04f 0900 	mov.w	r9, #0
 8016bbe:	07eb      	lsls	r3, r5, #31
 8016bc0:	d50a      	bpl.n	8016bd8 <__pow5mult+0x58>
 8016bc2:	4639      	mov	r1, r7
 8016bc4:	4622      	mov	r2, r4
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	f7ff ff34 	bl	8016a34 <__multiply>
 8016bcc:	4639      	mov	r1, r7
 8016bce:	4680      	mov	r8, r0
 8016bd0:	4630      	mov	r0, r6
 8016bd2:	f7ff fe76 	bl	80168c2 <_Bfree>
 8016bd6:	4647      	mov	r7, r8
 8016bd8:	106d      	asrs	r5, r5, #1
 8016bda:	d00b      	beq.n	8016bf4 <__pow5mult+0x74>
 8016bdc:	6820      	ldr	r0, [r4, #0]
 8016bde:	b938      	cbnz	r0, 8016bf0 <__pow5mult+0x70>
 8016be0:	4622      	mov	r2, r4
 8016be2:	4621      	mov	r1, r4
 8016be4:	4630      	mov	r0, r6
 8016be6:	f7ff ff25 	bl	8016a34 <__multiply>
 8016bea:	6020      	str	r0, [r4, #0]
 8016bec:	f8c0 9000 	str.w	r9, [r0]
 8016bf0:	4604      	mov	r4, r0
 8016bf2:	e7e4      	b.n	8016bbe <__pow5mult+0x3e>
 8016bf4:	4638      	mov	r0, r7
 8016bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bfa:	bf00      	nop
 8016bfc:	08039580 	.word	0x08039580

08016c00 <__lshift>:
 8016c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c04:	460c      	mov	r4, r1
 8016c06:	6849      	ldr	r1, [r1, #4]
 8016c08:	6923      	ldr	r3, [r4, #16]
 8016c0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016c0e:	68a3      	ldr	r3, [r4, #8]
 8016c10:	4607      	mov	r7, r0
 8016c12:	4691      	mov	r9, r2
 8016c14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016c18:	f108 0601 	add.w	r6, r8, #1
 8016c1c:	42b3      	cmp	r3, r6
 8016c1e:	db0b      	blt.n	8016c38 <__lshift+0x38>
 8016c20:	4638      	mov	r0, r7
 8016c22:	f7ff fe29 	bl	8016878 <_Balloc>
 8016c26:	4605      	mov	r5, r0
 8016c28:	b948      	cbnz	r0, 8016c3e <__lshift+0x3e>
 8016c2a:	4602      	mov	r2, r0
 8016c2c:	4b28      	ldr	r3, [pc, #160]	; (8016cd0 <__lshift+0xd0>)
 8016c2e:	4829      	ldr	r0, [pc, #164]	; (8016cd4 <__lshift+0xd4>)
 8016c30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016c34:	f000 fa16 	bl	8017064 <__assert_func>
 8016c38:	3101      	adds	r1, #1
 8016c3a:	005b      	lsls	r3, r3, #1
 8016c3c:	e7ee      	b.n	8016c1c <__lshift+0x1c>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	f100 0114 	add.w	r1, r0, #20
 8016c44:	f100 0210 	add.w	r2, r0, #16
 8016c48:	4618      	mov	r0, r3
 8016c4a:	4553      	cmp	r3, sl
 8016c4c:	db33      	blt.n	8016cb6 <__lshift+0xb6>
 8016c4e:	6920      	ldr	r0, [r4, #16]
 8016c50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016c54:	f104 0314 	add.w	r3, r4, #20
 8016c58:	f019 091f 	ands.w	r9, r9, #31
 8016c5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016c60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016c64:	d02b      	beq.n	8016cbe <__lshift+0xbe>
 8016c66:	f1c9 0e20 	rsb	lr, r9, #32
 8016c6a:	468a      	mov	sl, r1
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	6818      	ldr	r0, [r3, #0]
 8016c70:	fa00 f009 	lsl.w	r0, r0, r9
 8016c74:	4302      	orrs	r2, r0
 8016c76:	f84a 2b04 	str.w	r2, [sl], #4
 8016c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c7e:	459c      	cmp	ip, r3
 8016c80:	fa22 f20e 	lsr.w	r2, r2, lr
 8016c84:	d8f3      	bhi.n	8016c6e <__lshift+0x6e>
 8016c86:	ebac 0304 	sub.w	r3, ip, r4
 8016c8a:	3b15      	subs	r3, #21
 8016c8c:	f023 0303 	bic.w	r3, r3, #3
 8016c90:	3304      	adds	r3, #4
 8016c92:	f104 0015 	add.w	r0, r4, #21
 8016c96:	4584      	cmp	ip, r0
 8016c98:	bf38      	it	cc
 8016c9a:	2304      	movcc	r3, #4
 8016c9c:	50ca      	str	r2, [r1, r3]
 8016c9e:	b10a      	cbz	r2, 8016ca4 <__lshift+0xa4>
 8016ca0:	f108 0602 	add.w	r6, r8, #2
 8016ca4:	3e01      	subs	r6, #1
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	612e      	str	r6, [r5, #16]
 8016caa:	4621      	mov	r1, r4
 8016cac:	f7ff fe09 	bl	80168c2 <_Bfree>
 8016cb0:	4628      	mov	r0, r5
 8016cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8016cba:	3301      	adds	r3, #1
 8016cbc:	e7c5      	b.n	8016c4a <__lshift+0x4a>
 8016cbe:	3904      	subs	r1, #4
 8016cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8016cc8:	459c      	cmp	ip, r3
 8016cca:	d8f9      	bhi.n	8016cc0 <__lshift+0xc0>
 8016ccc:	e7ea      	b.n	8016ca4 <__lshift+0xa4>
 8016cce:	bf00      	nop
 8016cd0:	080393bd 	.word	0x080393bd
 8016cd4:	0803942d 	.word	0x0803942d

08016cd8 <__mcmp>:
 8016cd8:	b530      	push	{r4, r5, lr}
 8016cda:	6902      	ldr	r2, [r0, #16]
 8016cdc:	690c      	ldr	r4, [r1, #16]
 8016cde:	1b12      	subs	r2, r2, r4
 8016ce0:	d10e      	bne.n	8016d00 <__mcmp+0x28>
 8016ce2:	f100 0314 	add.w	r3, r0, #20
 8016ce6:	3114      	adds	r1, #20
 8016ce8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016cec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016cf0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016cf4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016cf8:	42a5      	cmp	r5, r4
 8016cfa:	d003      	beq.n	8016d04 <__mcmp+0x2c>
 8016cfc:	d305      	bcc.n	8016d0a <__mcmp+0x32>
 8016cfe:	2201      	movs	r2, #1
 8016d00:	4610      	mov	r0, r2
 8016d02:	bd30      	pop	{r4, r5, pc}
 8016d04:	4283      	cmp	r3, r0
 8016d06:	d3f3      	bcc.n	8016cf0 <__mcmp+0x18>
 8016d08:	e7fa      	b.n	8016d00 <__mcmp+0x28>
 8016d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d0e:	e7f7      	b.n	8016d00 <__mcmp+0x28>

08016d10 <__mdiff>:
 8016d10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d14:	460c      	mov	r4, r1
 8016d16:	4606      	mov	r6, r0
 8016d18:	4611      	mov	r1, r2
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	4617      	mov	r7, r2
 8016d1e:	f7ff ffdb 	bl	8016cd8 <__mcmp>
 8016d22:	1e05      	subs	r5, r0, #0
 8016d24:	d110      	bne.n	8016d48 <__mdiff+0x38>
 8016d26:	4629      	mov	r1, r5
 8016d28:	4630      	mov	r0, r6
 8016d2a:	f7ff fda5 	bl	8016878 <_Balloc>
 8016d2e:	b930      	cbnz	r0, 8016d3e <__mdiff+0x2e>
 8016d30:	4b39      	ldr	r3, [pc, #228]	; (8016e18 <__mdiff+0x108>)
 8016d32:	4602      	mov	r2, r0
 8016d34:	f240 2132 	movw	r1, #562	; 0x232
 8016d38:	4838      	ldr	r0, [pc, #224]	; (8016e1c <__mdiff+0x10c>)
 8016d3a:	f000 f993 	bl	8017064 <__assert_func>
 8016d3e:	2301      	movs	r3, #1
 8016d40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d48:	bfa4      	itt	ge
 8016d4a:	463b      	movge	r3, r7
 8016d4c:	4627      	movge	r7, r4
 8016d4e:	4630      	mov	r0, r6
 8016d50:	6879      	ldr	r1, [r7, #4]
 8016d52:	bfa6      	itte	ge
 8016d54:	461c      	movge	r4, r3
 8016d56:	2500      	movge	r5, #0
 8016d58:	2501      	movlt	r5, #1
 8016d5a:	f7ff fd8d 	bl	8016878 <_Balloc>
 8016d5e:	b920      	cbnz	r0, 8016d6a <__mdiff+0x5a>
 8016d60:	4b2d      	ldr	r3, [pc, #180]	; (8016e18 <__mdiff+0x108>)
 8016d62:	4602      	mov	r2, r0
 8016d64:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016d68:	e7e6      	b.n	8016d38 <__mdiff+0x28>
 8016d6a:	693e      	ldr	r6, [r7, #16]
 8016d6c:	60c5      	str	r5, [r0, #12]
 8016d6e:	6925      	ldr	r5, [r4, #16]
 8016d70:	f107 0114 	add.w	r1, r7, #20
 8016d74:	f104 0914 	add.w	r9, r4, #20
 8016d78:	f100 0e14 	add.w	lr, r0, #20
 8016d7c:	f107 0210 	add.w	r2, r7, #16
 8016d80:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016d84:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016d88:	46f2      	mov	sl, lr
 8016d8a:	2700      	movs	r7, #0
 8016d8c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016d90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016d94:	fa1f f883 	uxth.w	r8, r3
 8016d98:	fa17 f78b 	uxtah	r7, r7, fp
 8016d9c:	0c1b      	lsrs	r3, r3, #16
 8016d9e:	eba7 0808 	sub.w	r8, r7, r8
 8016da2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016da6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016daa:	fa1f f888 	uxth.w	r8, r8
 8016dae:	141f      	asrs	r7, r3, #16
 8016db0:	454d      	cmp	r5, r9
 8016db2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016db6:	f84a 3b04 	str.w	r3, [sl], #4
 8016dba:	d8e7      	bhi.n	8016d8c <__mdiff+0x7c>
 8016dbc:	1b2b      	subs	r3, r5, r4
 8016dbe:	3b15      	subs	r3, #21
 8016dc0:	f023 0303 	bic.w	r3, r3, #3
 8016dc4:	3304      	adds	r3, #4
 8016dc6:	3415      	adds	r4, #21
 8016dc8:	42a5      	cmp	r5, r4
 8016dca:	bf38      	it	cc
 8016dcc:	2304      	movcc	r3, #4
 8016dce:	4419      	add	r1, r3
 8016dd0:	4473      	add	r3, lr
 8016dd2:	469e      	mov	lr, r3
 8016dd4:	460d      	mov	r5, r1
 8016dd6:	4565      	cmp	r5, ip
 8016dd8:	d30e      	bcc.n	8016df8 <__mdiff+0xe8>
 8016dda:	f10c 0203 	add.w	r2, ip, #3
 8016dde:	1a52      	subs	r2, r2, r1
 8016de0:	f022 0203 	bic.w	r2, r2, #3
 8016de4:	3903      	subs	r1, #3
 8016de6:	458c      	cmp	ip, r1
 8016de8:	bf38      	it	cc
 8016dea:	2200      	movcc	r2, #0
 8016dec:	441a      	add	r2, r3
 8016dee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016df2:	b17b      	cbz	r3, 8016e14 <__mdiff+0x104>
 8016df4:	6106      	str	r6, [r0, #16]
 8016df6:	e7a5      	b.n	8016d44 <__mdiff+0x34>
 8016df8:	f855 8b04 	ldr.w	r8, [r5], #4
 8016dfc:	fa17 f488 	uxtah	r4, r7, r8
 8016e00:	1422      	asrs	r2, r4, #16
 8016e02:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016e06:	b2a4      	uxth	r4, r4
 8016e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016e0c:	f84e 4b04 	str.w	r4, [lr], #4
 8016e10:	1417      	asrs	r7, r2, #16
 8016e12:	e7e0      	b.n	8016dd6 <__mdiff+0xc6>
 8016e14:	3e01      	subs	r6, #1
 8016e16:	e7ea      	b.n	8016dee <__mdiff+0xde>
 8016e18:	080393bd 	.word	0x080393bd
 8016e1c:	0803942d 	.word	0x0803942d

08016e20 <__d2b>:
 8016e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e24:	4689      	mov	r9, r1
 8016e26:	2101      	movs	r1, #1
 8016e28:	ec57 6b10 	vmov	r6, r7, d0
 8016e2c:	4690      	mov	r8, r2
 8016e2e:	f7ff fd23 	bl	8016878 <_Balloc>
 8016e32:	4604      	mov	r4, r0
 8016e34:	b930      	cbnz	r0, 8016e44 <__d2b+0x24>
 8016e36:	4602      	mov	r2, r0
 8016e38:	4b25      	ldr	r3, [pc, #148]	; (8016ed0 <__d2b+0xb0>)
 8016e3a:	4826      	ldr	r0, [pc, #152]	; (8016ed4 <__d2b+0xb4>)
 8016e3c:	f240 310a 	movw	r1, #778	; 0x30a
 8016e40:	f000 f910 	bl	8017064 <__assert_func>
 8016e44:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016e48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e4c:	bb35      	cbnz	r5, 8016e9c <__d2b+0x7c>
 8016e4e:	2e00      	cmp	r6, #0
 8016e50:	9301      	str	r3, [sp, #4]
 8016e52:	d028      	beq.n	8016ea6 <__d2b+0x86>
 8016e54:	4668      	mov	r0, sp
 8016e56:	9600      	str	r6, [sp, #0]
 8016e58:	f7ff fda6 	bl	80169a8 <__lo0bits>
 8016e5c:	9900      	ldr	r1, [sp, #0]
 8016e5e:	b300      	cbz	r0, 8016ea2 <__d2b+0x82>
 8016e60:	9a01      	ldr	r2, [sp, #4]
 8016e62:	f1c0 0320 	rsb	r3, r0, #32
 8016e66:	fa02 f303 	lsl.w	r3, r2, r3
 8016e6a:	430b      	orrs	r3, r1
 8016e6c:	40c2      	lsrs	r2, r0
 8016e6e:	6163      	str	r3, [r4, #20]
 8016e70:	9201      	str	r2, [sp, #4]
 8016e72:	9b01      	ldr	r3, [sp, #4]
 8016e74:	61a3      	str	r3, [r4, #24]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	bf14      	ite	ne
 8016e7a:	2202      	movne	r2, #2
 8016e7c:	2201      	moveq	r2, #1
 8016e7e:	6122      	str	r2, [r4, #16]
 8016e80:	b1d5      	cbz	r5, 8016eb8 <__d2b+0x98>
 8016e82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016e86:	4405      	add	r5, r0
 8016e88:	f8c9 5000 	str.w	r5, [r9]
 8016e8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e90:	f8c8 0000 	str.w	r0, [r8]
 8016e94:	4620      	mov	r0, r4
 8016e96:	b003      	add	sp, #12
 8016e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ea0:	e7d5      	b.n	8016e4e <__d2b+0x2e>
 8016ea2:	6161      	str	r1, [r4, #20]
 8016ea4:	e7e5      	b.n	8016e72 <__d2b+0x52>
 8016ea6:	a801      	add	r0, sp, #4
 8016ea8:	f7ff fd7e 	bl	80169a8 <__lo0bits>
 8016eac:	9b01      	ldr	r3, [sp, #4]
 8016eae:	6163      	str	r3, [r4, #20]
 8016eb0:	2201      	movs	r2, #1
 8016eb2:	6122      	str	r2, [r4, #16]
 8016eb4:	3020      	adds	r0, #32
 8016eb6:	e7e3      	b.n	8016e80 <__d2b+0x60>
 8016eb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ebc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016ec0:	f8c9 0000 	str.w	r0, [r9]
 8016ec4:	6918      	ldr	r0, [r3, #16]
 8016ec6:	f7ff fd4f 	bl	8016968 <__hi0bits>
 8016eca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016ece:	e7df      	b.n	8016e90 <__d2b+0x70>
 8016ed0:	080393bd 	.word	0x080393bd
 8016ed4:	0803942d 	.word	0x0803942d

08016ed8 <frexp>:
 8016ed8:	b570      	push	{r4, r5, r6, lr}
 8016eda:	2100      	movs	r1, #0
 8016edc:	ec55 4b10 	vmov	r4, r5, d0
 8016ee0:	6001      	str	r1, [r0, #0]
 8016ee2:	4916      	ldr	r1, [pc, #88]	; (8016f3c <frexp+0x64>)
 8016ee4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8016ee8:	428a      	cmp	r2, r1
 8016eea:	4606      	mov	r6, r0
 8016eec:	462b      	mov	r3, r5
 8016eee:	dc22      	bgt.n	8016f36 <frexp+0x5e>
 8016ef0:	ee10 1a10 	vmov	r1, s0
 8016ef4:	4311      	orrs	r1, r2
 8016ef6:	d01e      	beq.n	8016f36 <frexp+0x5e>
 8016ef8:	4911      	ldr	r1, [pc, #68]	; (8016f40 <frexp+0x68>)
 8016efa:	4029      	ands	r1, r5
 8016efc:	b969      	cbnz	r1, 8016f1a <frexp+0x42>
 8016efe:	4b11      	ldr	r3, [pc, #68]	; (8016f44 <frexp+0x6c>)
 8016f00:	2200      	movs	r2, #0
 8016f02:	ee10 0a10 	vmov	r0, s0
 8016f06:	4629      	mov	r1, r5
 8016f08:	f7e9 fb8e 	bl	8000628 <__aeabi_dmul>
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016f12:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8016f16:	4604      	mov	r4, r0
 8016f18:	6031      	str	r1, [r6, #0]
 8016f1a:	6831      	ldr	r1, [r6, #0]
 8016f1c:	1512      	asrs	r2, r2, #20
 8016f1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f22:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8016f26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016f2a:	440a      	add	r2, r1
 8016f2c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8016f30:	6032      	str	r2, [r6, #0]
 8016f32:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8016f36:	ec45 4b10 	vmov	d0, r4, r5
 8016f3a:	bd70      	pop	{r4, r5, r6, pc}
 8016f3c:	7fefffff 	.word	0x7fefffff
 8016f40:	7ff00000 	.word	0x7ff00000
 8016f44:	43500000 	.word	0x43500000

08016f48 <strncpy>:
 8016f48:	b510      	push	{r4, lr}
 8016f4a:	3901      	subs	r1, #1
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	b132      	cbz	r2, 8016f5e <strncpy+0x16>
 8016f50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f54:	f803 4b01 	strb.w	r4, [r3], #1
 8016f58:	3a01      	subs	r2, #1
 8016f5a:	2c00      	cmp	r4, #0
 8016f5c:	d1f7      	bne.n	8016f4e <strncpy+0x6>
 8016f5e:	441a      	add	r2, r3
 8016f60:	2100      	movs	r1, #0
 8016f62:	4293      	cmp	r3, r2
 8016f64:	d100      	bne.n	8016f68 <strncpy+0x20>
 8016f66:	bd10      	pop	{r4, pc}
 8016f68:	f803 1b01 	strb.w	r1, [r3], #1
 8016f6c:	e7f9      	b.n	8016f62 <strncpy+0x1a>

08016f6e <__ssprint_r>:
 8016f6e:	6893      	ldr	r3, [r2, #8]
 8016f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f74:	4680      	mov	r8, r0
 8016f76:	460c      	mov	r4, r1
 8016f78:	4617      	mov	r7, r2
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d061      	beq.n	8017042 <__ssprint_r+0xd4>
 8016f7e:	2300      	movs	r3, #0
 8016f80:	f8d2 a000 	ldr.w	sl, [r2]
 8016f84:	9301      	str	r3, [sp, #4]
 8016f86:	469b      	mov	fp, r3
 8016f88:	f1bb 0f00 	cmp.w	fp, #0
 8016f8c:	d02b      	beq.n	8016fe6 <__ssprint_r+0x78>
 8016f8e:	68a6      	ldr	r6, [r4, #8]
 8016f90:	45b3      	cmp	fp, r6
 8016f92:	d342      	bcc.n	801701a <__ssprint_r+0xac>
 8016f94:	89a2      	ldrh	r2, [r4, #12]
 8016f96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f9a:	d03e      	beq.n	801701a <__ssprint_r+0xac>
 8016f9c:	6825      	ldr	r5, [r4, #0]
 8016f9e:	6921      	ldr	r1, [r4, #16]
 8016fa0:	eba5 0901 	sub.w	r9, r5, r1
 8016fa4:	6965      	ldr	r5, [r4, #20]
 8016fa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016faa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fae:	f109 0001 	add.w	r0, r9, #1
 8016fb2:	106d      	asrs	r5, r5, #1
 8016fb4:	4458      	add	r0, fp
 8016fb6:	4285      	cmp	r5, r0
 8016fb8:	bf38      	it	cc
 8016fba:	4605      	movcc	r5, r0
 8016fbc:	0553      	lsls	r3, r2, #21
 8016fbe:	d545      	bpl.n	801704c <__ssprint_r+0xde>
 8016fc0:	4629      	mov	r1, r5
 8016fc2:	4640      	mov	r0, r8
 8016fc4:	f7fc ff40 	bl	8013e48 <_malloc_r>
 8016fc8:	4606      	mov	r6, r0
 8016fca:	b9a0      	cbnz	r0, 8016ff6 <__ssprint_r+0x88>
 8016fcc:	230c      	movs	r3, #12
 8016fce:	f8c8 3000 	str.w	r3, [r8]
 8016fd2:	89a3      	ldrh	r3, [r4, #12]
 8016fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fd8:	81a3      	strh	r3, [r4, #12]
 8016fda:	2300      	movs	r3, #0
 8016fdc:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8016fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fe4:	e02f      	b.n	8017046 <__ssprint_r+0xd8>
 8016fe6:	f8da 3000 	ldr.w	r3, [sl]
 8016fea:	f8da b004 	ldr.w	fp, [sl, #4]
 8016fee:	9301      	str	r3, [sp, #4]
 8016ff0:	f10a 0a08 	add.w	sl, sl, #8
 8016ff4:	e7c8      	b.n	8016f88 <__ssprint_r+0x1a>
 8016ff6:	464a      	mov	r2, r9
 8016ff8:	6921      	ldr	r1, [r4, #16]
 8016ffa:	f7fd f975 	bl	80142e8 <memcpy>
 8016ffe:	89a2      	ldrh	r2, [r4, #12]
 8017000:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8017004:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017008:	81a2      	strh	r2, [r4, #12]
 801700a:	6126      	str	r6, [r4, #16]
 801700c:	6165      	str	r5, [r4, #20]
 801700e:	444e      	add	r6, r9
 8017010:	eba5 0509 	sub.w	r5, r5, r9
 8017014:	6026      	str	r6, [r4, #0]
 8017016:	60a5      	str	r5, [r4, #8]
 8017018:	465e      	mov	r6, fp
 801701a:	455e      	cmp	r6, fp
 801701c:	bf28      	it	cs
 801701e:	465e      	movcs	r6, fp
 8017020:	4632      	mov	r2, r6
 8017022:	9901      	ldr	r1, [sp, #4]
 8017024:	6820      	ldr	r0, [r4, #0]
 8017026:	f7fd f96d 	bl	8014304 <memmove>
 801702a:	68a2      	ldr	r2, [r4, #8]
 801702c:	1b92      	subs	r2, r2, r6
 801702e:	60a2      	str	r2, [r4, #8]
 8017030:	6822      	ldr	r2, [r4, #0]
 8017032:	4432      	add	r2, r6
 8017034:	6022      	str	r2, [r4, #0]
 8017036:	68ba      	ldr	r2, [r7, #8]
 8017038:	eba2 030b 	sub.w	r3, r2, fp
 801703c:	60bb      	str	r3, [r7, #8]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d1d1      	bne.n	8016fe6 <__ssprint_r+0x78>
 8017042:	2000      	movs	r0, #0
 8017044:	6078      	str	r0, [r7, #4]
 8017046:	b003      	add	sp, #12
 8017048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801704c:	462a      	mov	r2, r5
 801704e:	4640      	mov	r0, r8
 8017050:	f000 f850 	bl	80170f4 <_realloc_r>
 8017054:	4606      	mov	r6, r0
 8017056:	2800      	cmp	r0, #0
 8017058:	d1d7      	bne.n	801700a <__ssprint_r+0x9c>
 801705a:	6921      	ldr	r1, [r4, #16]
 801705c:	4640      	mov	r0, r8
 801705e:	f7fd fac1 	bl	80145e4 <_free_r>
 8017062:	e7b3      	b.n	8016fcc <__ssprint_r+0x5e>

08017064 <__assert_func>:
 8017064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017066:	4614      	mov	r4, r2
 8017068:	461a      	mov	r2, r3
 801706a:	4b09      	ldr	r3, [pc, #36]	; (8017090 <__assert_func+0x2c>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	4605      	mov	r5, r0
 8017070:	68d8      	ldr	r0, [r3, #12]
 8017072:	b14c      	cbz	r4, 8017088 <__assert_func+0x24>
 8017074:	4b07      	ldr	r3, [pc, #28]	; (8017094 <__assert_func+0x30>)
 8017076:	9100      	str	r1, [sp, #0]
 8017078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801707c:	4906      	ldr	r1, [pc, #24]	; (8017098 <__assert_func+0x34>)
 801707e:	462b      	mov	r3, r5
 8017080:	f000 f80e 	bl	80170a0 <fiprintf>
 8017084:	f000 ff3c 	bl	8017f00 <abort>
 8017088:	4b04      	ldr	r3, [pc, #16]	; (801709c <__assert_func+0x38>)
 801708a:	461c      	mov	r4, r3
 801708c:	e7f3      	b.n	8017076 <__assert_func+0x12>
 801708e:	bf00      	nop
 8017090:	200000b0 	.word	0x200000b0
 8017094:	0803958c 	.word	0x0803958c
 8017098:	08039599 	.word	0x08039599
 801709c:	080395c7 	.word	0x080395c7

080170a0 <fiprintf>:
 80170a0:	b40e      	push	{r1, r2, r3}
 80170a2:	b503      	push	{r0, r1, lr}
 80170a4:	4601      	mov	r1, r0
 80170a6:	ab03      	add	r3, sp, #12
 80170a8:	4805      	ldr	r0, [pc, #20]	; (80170c0 <fiprintf+0x20>)
 80170aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80170ae:	6800      	ldr	r0, [r0, #0]
 80170b0:	9301      	str	r3, [sp, #4]
 80170b2:	f000 f9f7 	bl	80174a4 <_vfiprintf_r>
 80170b6:	b002      	add	sp, #8
 80170b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80170bc:	b003      	add	sp, #12
 80170be:	4770      	bx	lr
 80170c0:	200000b0 	.word	0x200000b0

080170c4 <__locale_mb_cur_max>:
 80170c4:	4b01      	ldr	r3, [pc, #4]	; (80170cc <__locale_mb_cur_max+0x8>)
 80170c6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80170ca:	4770      	bx	lr
 80170cc:	200008f4 	.word	0x200008f4

080170d0 <__ascii_mbtowc>:
 80170d0:	b082      	sub	sp, #8
 80170d2:	b901      	cbnz	r1, 80170d6 <__ascii_mbtowc+0x6>
 80170d4:	a901      	add	r1, sp, #4
 80170d6:	b142      	cbz	r2, 80170ea <__ascii_mbtowc+0x1a>
 80170d8:	b14b      	cbz	r3, 80170ee <__ascii_mbtowc+0x1e>
 80170da:	7813      	ldrb	r3, [r2, #0]
 80170dc:	600b      	str	r3, [r1, #0]
 80170de:	7812      	ldrb	r2, [r2, #0]
 80170e0:	1e10      	subs	r0, r2, #0
 80170e2:	bf18      	it	ne
 80170e4:	2001      	movne	r0, #1
 80170e6:	b002      	add	sp, #8
 80170e8:	4770      	bx	lr
 80170ea:	4610      	mov	r0, r2
 80170ec:	e7fb      	b.n	80170e6 <__ascii_mbtowc+0x16>
 80170ee:	f06f 0001 	mvn.w	r0, #1
 80170f2:	e7f8      	b.n	80170e6 <__ascii_mbtowc+0x16>

080170f4 <_realloc_r>:
 80170f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f8:	4681      	mov	r9, r0
 80170fa:	460c      	mov	r4, r1
 80170fc:	b929      	cbnz	r1, 801710a <_realloc_r+0x16>
 80170fe:	4611      	mov	r1, r2
 8017100:	b003      	add	sp, #12
 8017102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017106:	f7fc be9f 	b.w	8013e48 <_malloc_r>
 801710a:	9201      	str	r2, [sp, #4]
 801710c:	f7fd f91c 	bl	8014348 <__malloc_lock>
 8017110:	9a01      	ldr	r2, [sp, #4]
 8017112:	f102 080b 	add.w	r8, r2, #11
 8017116:	f1b8 0f16 	cmp.w	r8, #22
 801711a:	d90b      	bls.n	8017134 <_realloc_r+0x40>
 801711c:	f038 0807 	bics.w	r8, r8, #7
 8017120:	d50a      	bpl.n	8017138 <_realloc_r+0x44>
 8017122:	230c      	movs	r3, #12
 8017124:	f8c9 3000 	str.w	r3, [r9]
 8017128:	f04f 0b00 	mov.w	fp, #0
 801712c:	4658      	mov	r0, fp
 801712e:	b003      	add	sp, #12
 8017130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017134:	f04f 0810 	mov.w	r8, #16
 8017138:	4590      	cmp	r8, r2
 801713a:	d3f2      	bcc.n	8017122 <_realloc_r+0x2e>
 801713c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8017140:	f025 0603 	bic.w	r6, r5, #3
 8017144:	45b0      	cmp	r8, r6
 8017146:	f1a4 0a08 	sub.w	sl, r4, #8
 801714a:	f340 8170 	ble.w	801742e <_realloc_r+0x33a>
 801714e:	48a9      	ldr	r0, [pc, #676]	; (80173f4 <_realloc_r+0x300>)
 8017150:	9001      	str	r0, [sp, #4]
 8017152:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8017156:	eb0a 0306 	add.w	r3, sl, r6
 801715a:	459c      	cmp	ip, r3
 801715c:	6859      	ldr	r1, [r3, #4]
 801715e:	d005      	beq.n	801716c <_realloc_r+0x78>
 8017160:	f021 0001 	bic.w	r0, r1, #1
 8017164:	4418      	add	r0, r3
 8017166:	6840      	ldr	r0, [r0, #4]
 8017168:	07c7      	lsls	r7, r0, #31
 801716a:	d427      	bmi.n	80171bc <_realloc_r+0xc8>
 801716c:	f021 0103 	bic.w	r1, r1, #3
 8017170:	459c      	cmp	ip, r3
 8017172:	eb06 0701 	add.w	r7, r6, r1
 8017176:	d119      	bne.n	80171ac <_realloc_r+0xb8>
 8017178:	f108 0010 	add.w	r0, r8, #16
 801717c:	42b8      	cmp	r0, r7
 801717e:	dc1f      	bgt.n	80171c0 <_realloc_r+0xcc>
 8017180:	eb0a 0308 	add.w	r3, sl, r8
 8017184:	9a01      	ldr	r2, [sp, #4]
 8017186:	eba7 0708 	sub.w	r7, r7, r8
 801718a:	f047 0701 	orr.w	r7, r7, #1
 801718e:	6093      	str	r3, [r2, #8]
 8017190:	605f      	str	r7, [r3, #4]
 8017192:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017196:	f003 0301 	and.w	r3, r3, #1
 801719a:	ea43 0308 	orr.w	r3, r3, r8
 801719e:	f844 3c04 	str.w	r3, [r4, #-4]
 80171a2:	4648      	mov	r0, r9
 80171a4:	f7fd f8d6 	bl	8014354 <__malloc_unlock>
 80171a8:	46a3      	mov	fp, r4
 80171aa:	e7bf      	b.n	801712c <_realloc_r+0x38>
 80171ac:	45b8      	cmp	r8, r7
 80171ae:	dc07      	bgt.n	80171c0 <_realloc_r+0xcc>
 80171b0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80171b4:	60da      	str	r2, [r3, #12]
 80171b6:	6093      	str	r3, [r2, #8]
 80171b8:	4655      	mov	r5, sl
 80171ba:	e07f      	b.n	80172bc <_realloc_r+0x1c8>
 80171bc:	2100      	movs	r1, #0
 80171be:	460b      	mov	r3, r1
 80171c0:	07e8      	lsls	r0, r5, #31
 80171c2:	f100 80e5 	bmi.w	8017390 <_realloc_r+0x29c>
 80171c6:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80171ca:	ebaa 0505 	sub.w	r5, sl, r5
 80171ce:	6868      	ldr	r0, [r5, #4]
 80171d0:	f020 0003 	bic.w	r0, r0, #3
 80171d4:	eb00 0b06 	add.w	fp, r0, r6
 80171d8:	2b00      	cmp	r3, #0
 80171da:	f000 80a5 	beq.w	8017328 <_realloc_r+0x234>
 80171de:	459c      	cmp	ip, r3
 80171e0:	eb01 070b 	add.w	r7, r1, fp
 80171e4:	d14a      	bne.n	801727c <_realloc_r+0x188>
 80171e6:	f108 0310 	add.w	r3, r8, #16
 80171ea:	42bb      	cmp	r3, r7
 80171ec:	f300 809c 	bgt.w	8017328 <_realloc_r+0x234>
 80171f0:	46ab      	mov	fp, r5
 80171f2:	68eb      	ldr	r3, [r5, #12]
 80171f4:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80171f8:	60d3      	str	r3, [r2, #12]
 80171fa:	609a      	str	r2, [r3, #8]
 80171fc:	1f32      	subs	r2, r6, #4
 80171fe:	2a24      	cmp	r2, #36	; 0x24
 8017200:	d837      	bhi.n	8017272 <_realloc_r+0x17e>
 8017202:	2a13      	cmp	r2, #19
 8017204:	d933      	bls.n	801726e <_realloc_r+0x17a>
 8017206:	6823      	ldr	r3, [r4, #0]
 8017208:	60ab      	str	r3, [r5, #8]
 801720a:	6863      	ldr	r3, [r4, #4]
 801720c:	60eb      	str	r3, [r5, #12]
 801720e:	2a1b      	cmp	r2, #27
 8017210:	d81b      	bhi.n	801724a <_realloc_r+0x156>
 8017212:	3408      	adds	r4, #8
 8017214:	f105 0310 	add.w	r3, r5, #16
 8017218:	6822      	ldr	r2, [r4, #0]
 801721a:	601a      	str	r2, [r3, #0]
 801721c:	6862      	ldr	r2, [r4, #4]
 801721e:	605a      	str	r2, [r3, #4]
 8017220:	68a2      	ldr	r2, [r4, #8]
 8017222:	609a      	str	r2, [r3, #8]
 8017224:	eb05 0308 	add.w	r3, r5, r8
 8017228:	9a01      	ldr	r2, [sp, #4]
 801722a:	eba7 0708 	sub.w	r7, r7, r8
 801722e:	f047 0701 	orr.w	r7, r7, #1
 8017232:	6093      	str	r3, [r2, #8]
 8017234:	605f      	str	r7, [r3, #4]
 8017236:	686b      	ldr	r3, [r5, #4]
 8017238:	f003 0301 	and.w	r3, r3, #1
 801723c:	ea43 0308 	orr.w	r3, r3, r8
 8017240:	606b      	str	r3, [r5, #4]
 8017242:	4648      	mov	r0, r9
 8017244:	f7fd f886 	bl	8014354 <__malloc_unlock>
 8017248:	e770      	b.n	801712c <_realloc_r+0x38>
 801724a:	68a3      	ldr	r3, [r4, #8]
 801724c:	612b      	str	r3, [r5, #16]
 801724e:	68e3      	ldr	r3, [r4, #12]
 8017250:	616b      	str	r3, [r5, #20]
 8017252:	2a24      	cmp	r2, #36	; 0x24
 8017254:	bf01      	itttt	eq
 8017256:	6923      	ldreq	r3, [r4, #16]
 8017258:	61ab      	streq	r3, [r5, #24]
 801725a:	6962      	ldreq	r2, [r4, #20]
 801725c:	61ea      	streq	r2, [r5, #28]
 801725e:	bf19      	ittee	ne
 8017260:	3410      	addne	r4, #16
 8017262:	f105 0318 	addne.w	r3, r5, #24
 8017266:	f105 0320 	addeq.w	r3, r5, #32
 801726a:	3418      	addeq	r4, #24
 801726c:	e7d4      	b.n	8017218 <_realloc_r+0x124>
 801726e:	465b      	mov	r3, fp
 8017270:	e7d2      	b.n	8017218 <_realloc_r+0x124>
 8017272:	4621      	mov	r1, r4
 8017274:	4658      	mov	r0, fp
 8017276:	f7fd f845 	bl	8014304 <memmove>
 801727a:	e7d3      	b.n	8017224 <_realloc_r+0x130>
 801727c:	45b8      	cmp	r8, r7
 801727e:	dc53      	bgt.n	8017328 <_realloc_r+0x234>
 8017280:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017284:	4628      	mov	r0, r5
 8017286:	60da      	str	r2, [r3, #12]
 8017288:	6093      	str	r3, [r2, #8]
 801728a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801728e:	68eb      	ldr	r3, [r5, #12]
 8017290:	60d3      	str	r3, [r2, #12]
 8017292:	609a      	str	r2, [r3, #8]
 8017294:	1f32      	subs	r2, r6, #4
 8017296:	2a24      	cmp	r2, #36	; 0x24
 8017298:	d842      	bhi.n	8017320 <_realloc_r+0x22c>
 801729a:	2a13      	cmp	r2, #19
 801729c:	d908      	bls.n	80172b0 <_realloc_r+0x1bc>
 801729e:	6823      	ldr	r3, [r4, #0]
 80172a0:	60ab      	str	r3, [r5, #8]
 80172a2:	6863      	ldr	r3, [r4, #4]
 80172a4:	60eb      	str	r3, [r5, #12]
 80172a6:	2a1b      	cmp	r2, #27
 80172a8:	d828      	bhi.n	80172fc <_realloc_r+0x208>
 80172aa:	3408      	adds	r4, #8
 80172ac:	f105 0010 	add.w	r0, r5, #16
 80172b0:	6823      	ldr	r3, [r4, #0]
 80172b2:	6003      	str	r3, [r0, #0]
 80172b4:	6863      	ldr	r3, [r4, #4]
 80172b6:	6043      	str	r3, [r0, #4]
 80172b8:	68a3      	ldr	r3, [r4, #8]
 80172ba:	6083      	str	r3, [r0, #8]
 80172bc:	686a      	ldr	r2, [r5, #4]
 80172be:	eba7 0008 	sub.w	r0, r7, r8
 80172c2:	280f      	cmp	r0, #15
 80172c4:	f002 0201 	and.w	r2, r2, #1
 80172c8:	eb05 0307 	add.w	r3, r5, r7
 80172cc:	f240 80b1 	bls.w	8017432 <_realloc_r+0x33e>
 80172d0:	eb05 0108 	add.w	r1, r5, r8
 80172d4:	ea48 0202 	orr.w	r2, r8, r2
 80172d8:	f040 0001 	orr.w	r0, r0, #1
 80172dc:	606a      	str	r2, [r5, #4]
 80172de:	6048      	str	r0, [r1, #4]
 80172e0:	685a      	ldr	r2, [r3, #4]
 80172e2:	f042 0201 	orr.w	r2, r2, #1
 80172e6:	605a      	str	r2, [r3, #4]
 80172e8:	3108      	adds	r1, #8
 80172ea:	4648      	mov	r0, r9
 80172ec:	f7fd f97a 	bl	80145e4 <_free_r>
 80172f0:	4648      	mov	r0, r9
 80172f2:	f7fd f82f 	bl	8014354 <__malloc_unlock>
 80172f6:	f105 0b08 	add.w	fp, r5, #8
 80172fa:	e717      	b.n	801712c <_realloc_r+0x38>
 80172fc:	68a3      	ldr	r3, [r4, #8]
 80172fe:	612b      	str	r3, [r5, #16]
 8017300:	68e3      	ldr	r3, [r4, #12]
 8017302:	616b      	str	r3, [r5, #20]
 8017304:	2a24      	cmp	r2, #36	; 0x24
 8017306:	bf01      	itttt	eq
 8017308:	6923      	ldreq	r3, [r4, #16]
 801730a:	61ab      	streq	r3, [r5, #24]
 801730c:	6963      	ldreq	r3, [r4, #20]
 801730e:	61eb      	streq	r3, [r5, #28]
 8017310:	bf19      	ittee	ne
 8017312:	3410      	addne	r4, #16
 8017314:	f105 0018 	addne.w	r0, r5, #24
 8017318:	f105 0020 	addeq.w	r0, r5, #32
 801731c:	3418      	addeq	r4, #24
 801731e:	e7c7      	b.n	80172b0 <_realloc_r+0x1bc>
 8017320:	4621      	mov	r1, r4
 8017322:	f7fc ffef 	bl	8014304 <memmove>
 8017326:	e7c9      	b.n	80172bc <_realloc_r+0x1c8>
 8017328:	45d8      	cmp	r8, fp
 801732a:	dc31      	bgt.n	8017390 <_realloc_r+0x29c>
 801732c:	4628      	mov	r0, r5
 801732e:	68eb      	ldr	r3, [r5, #12]
 8017330:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8017334:	60d3      	str	r3, [r2, #12]
 8017336:	609a      	str	r2, [r3, #8]
 8017338:	1f32      	subs	r2, r6, #4
 801733a:	2a24      	cmp	r2, #36	; 0x24
 801733c:	d824      	bhi.n	8017388 <_realloc_r+0x294>
 801733e:	2a13      	cmp	r2, #19
 8017340:	d908      	bls.n	8017354 <_realloc_r+0x260>
 8017342:	6823      	ldr	r3, [r4, #0]
 8017344:	60ab      	str	r3, [r5, #8]
 8017346:	6863      	ldr	r3, [r4, #4]
 8017348:	60eb      	str	r3, [r5, #12]
 801734a:	2a1b      	cmp	r2, #27
 801734c:	d80a      	bhi.n	8017364 <_realloc_r+0x270>
 801734e:	3408      	adds	r4, #8
 8017350:	f105 0010 	add.w	r0, r5, #16
 8017354:	6823      	ldr	r3, [r4, #0]
 8017356:	6003      	str	r3, [r0, #0]
 8017358:	6863      	ldr	r3, [r4, #4]
 801735a:	6043      	str	r3, [r0, #4]
 801735c:	68a3      	ldr	r3, [r4, #8]
 801735e:	6083      	str	r3, [r0, #8]
 8017360:	465f      	mov	r7, fp
 8017362:	e7ab      	b.n	80172bc <_realloc_r+0x1c8>
 8017364:	68a3      	ldr	r3, [r4, #8]
 8017366:	612b      	str	r3, [r5, #16]
 8017368:	68e3      	ldr	r3, [r4, #12]
 801736a:	616b      	str	r3, [r5, #20]
 801736c:	2a24      	cmp	r2, #36	; 0x24
 801736e:	bf01      	itttt	eq
 8017370:	6923      	ldreq	r3, [r4, #16]
 8017372:	61ab      	streq	r3, [r5, #24]
 8017374:	6963      	ldreq	r3, [r4, #20]
 8017376:	61eb      	streq	r3, [r5, #28]
 8017378:	bf19      	ittee	ne
 801737a:	3410      	addne	r4, #16
 801737c:	f105 0018 	addne.w	r0, r5, #24
 8017380:	f105 0020 	addeq.w	r0, r5, #32
 8017384:	3418      	addeq	r4, #24
 8017386:	e7e5      	b.n	8017354 <_realloc_r+0x260>
 8017388:	4621      	mov	r1, r4
 801738a:	f7fc ffbb 	bl	8014304 <memmove>
 801738e:	e7e7      	b.n	8017360 <_realloc_r+0x26c>
 8017390:	4611      	mov	r1, r2
 8017392:	4648      	mov	r0, r9
 8017394:	f7fc fd58 	bl	8013e48 <_malloc_r>
 8017398:	4683      	mov	fp, r0
 801739a:	2800      	cmp	r0, #0
 801739c:	f43f af51 	beq.w	8017242 <_realloc_r+0x14e>
 80173a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80173a4:	f023 0301 	bic.w	r3, r3, #1
 80173a8:	4453      	add	r3, sl
 80173aa:	f1a0 0208 	sub.w	r2, r0, #8
 80173ae:	4293      	cmp	r3, r2
 80173b0:	d105      	bne.n	80173be <_realloc_r+0x2ca>
 80173b2:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80173b6:	f027 0703 	bic.w	r7, r7, #3
 80173ba:	4437      	add	r7, r6
 80173bc:	e6fc      	b.n	80171b8 <_realloc_r+0xc4>
 80173be:	1f32      	subs	r2, r6, #4
 80173c0:	2a24      	cmp	r2, #36	; 0x24
 80173c2:	d830      	bhi.n	8017426 <_realloc_r+0x332>
 80173c4:	2a13      	cmp	r2, #19
 80173c6:	d92b      	bls.n	8017420 <_realloc_r+0x32c>
 80173c8:	6823      	ldr	r3, [r4, #0]
 80173ca:	6003      	str	r3, [r0, #0]
 80173cc:	6863      	ldr	r3, [r4, #4]
 80173ce:	6043      	str	r3, [r0, #4]
 80173d0:	2a1b      	cmp	r2, #27
 80173d2:	d811      	bhi.n	80173f8 <_realloc_r+0x304>
 80173d4:	f104 0208 	add.w	r2, r4, #8
 80173d8:	f100 0308 	add.w	r3, r0, #8
 80173dc:	6811      	ldr	r1, [r2, #0]
 80173de:	6019      	str	r1, [r3, #0]
 80173e0:	6851      	ldr	r1, [r2, #4]
 80173e2:	6059      	str	r1, [r3, #4]
 80173e4:	6892      	ldr	r2, [r2, #8]
 80173e6:	609a      	str	r2, [r3, #8]
 80173e8:	4621      	mov	r1, r4
 80173ea:	4648      	mov	r0, r9
 80173ec:	f7fd f8fa 	bl	80145e4 <_free_r>
 80173f0:	e727      	b.n	8017242 <_realloc_r+0x14e>
 80173f2:	bf00      	nop
 80173f4:	200004e0 	.word	0x200004e0
 80173f8:	68a3      	ldr	r3, [r4, #8]
 80173fa:	6083      	str	r3, [r0, #8]
 80173fc:	68e3      	ldr	r3, [r4, #12]
 80173fe:	60c3      	str	r3, [r0, #12]
 8017400:	2a24      	cmp	r2, #36	; 0x24
 8017402:	bf01      	itttt	eq
 8017404:	6923      	ldreq	r3, [r4, #16]
 8017406:	6103      	streq	r3, [r0, #16]
 8017408:	6961      	ldreq	r1, [r4, #20]
 801740a:	6141      	streq	r1, [r0, #20]
 801740c:	bf19      	ittee	ne
 801740e:	f104 0210 	addne.w	r2, r4, #16
 8017412:	f100 0310 	addne.w	r3, r0, #16
 8017416:	f104 0218 	addeq.w	r2, r4, #24
 801741a:	f100 0318 	addeq.w	r3, r0, #24
 801741e:	e7dd      	b.n	80173dc <_realloc_r+0x2e8>
 8017420:	4603      	mov	r3, r0
 8017422:	4622      	mov	r2, r4
 8017424:	e7da      	b.n	80173dc <_realloc_r+0x2e8>
 8017426:	4621      	mov	r1, r4
 8017428:	f7fc ff6c 	bl	8014304 <memmove>
 801742c:	e7dc      	b.n	80173e8 <_realloc_r+0x2f4>
 801742e:	4637      	mov	r7, r6
 8017430:	e6c2      	b.n	80171b8 <_realloc_r+0xc4>
 8017432:	4317      	orrs	r7, r2
 8017434:	606f      	str	r7, [r5, #4]
 8017436:	685a      	ldr	r2, [r3, #4]
 8017438:	f042 0201 	orr.w	r2, r2, #1
 801743c:	605a      	str	r2, [r3, #4]
 801743e:	e757      	b.n	80172f0 <_realloc_r+0x1fc>

08017440 <__sprint_r>:
 8017440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017444:	6893      	ldr	r3, [r2, #8]
 8017446:	4680      	mov	r8, r0
 8017448:	460f      	mov	r7, r1
 801744a:	4614      	mov	r4, r2
 801744c:	b91b      	cbnz	r3, 8017456 <__sprint_r+0x16>
 801744e:	6053      	str	r3, [r2, #4]
 8017450:	4618      	mov	r0, r3
 8017452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017456:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8017458:	049d      	lsls	r5, r3, #18
 801745a:	d520      	bpl.n	801749e <__sprint_r+0x5e>
 801745c:	6815      	ldr	r5, [r2, #0]
 801745e:	3508      	adds	r5, #8
 8017460:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8017464:	f04f 0900 	mov.w	r9, #0
 8017468:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801746c:	45ca      	cmp	sl, r9
 801746e:	dc0b      	bgt.n	8017488 <__sprint_r+0x48>
 8017470:	68a3      	ldr	r3, [r4, #8]
 8017472:	f026 0003 	bic.w	r0, r6, #3
 8017476:	1a18      	subs	r0, r3, r0
 8017478:	60a0      	str	r0, [r4, #8]
 801747a:	3508      	adds	r5, #8
 801747c:	2800      	cmp	r0, #0
 801747e:	d1ef      	bne.n	8017460 <__sprint_r+0x20>
 8017480:	2300      	movs	r3, #0
 8017482:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017486:	e7e4      	b.n	8017452 <__sprint_r+0x12>
 8017488:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801748c:	463a      	mov	r2, r7
 801748e:	4640      	mov	r0, r8
 8017490:	f000 fea1 	bl	80181d6 <_fputwc_r>
 8017494:	1c43      	adds	r3, r0, #1
 8017496:	d0f3      	beq.n	8017480 <__sprint_r+0x40>
 8017498:	f109 0901 	add.w	r9, r9, #1
 801749c:	e7e6      	b.n	801746c <__sprint_r+0x2c>
 801749e:	f000 fec5 	bl	801822c <__sfvwrite_r>
 80174a2:	e7ed      	b.n	8017480 <__sprint_r+0x40>

080174a4 <_vfiprintf_r>:
 80174a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a8:	ed2d 8b02 	vpush	{d8}
 80174ac:	b0b9      	sub	sp, #228	; 0xe4
 80174ae:	460f      	mov	r7, r1
 80174b0:	9201      	str	r2, [sp, #4]
 80174b2:	461d      	mov	r5, r3
 80174b4:	461c      	mov	r4, r3
 80174b6:	4681      	mov	r9, r0
 80174b8:	b118      	cbz	r0, 80174c2 <_vfiprintf_r+0x1e>
 80174ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80174bc:	b90b      	cbnz	r3, 80174c2 <_vfiprintf_r+0x1e>
 80174be:	f000 fe21 	bl	8018104 <__sinit>
 80174c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80174c4:	07d8      	lsls	r0, r3, #31
 80174c6:	d405      	bmi.n	80174d4 <_vfiprintf_r+0x30>
 80174c8:	89bb      	ldrh	r3, [r7, #12]
 80174ca:	0599      	lsls	r1, r3, #22
 80174cc:	d402      	bmi.n	80174d4 <_vfiprintf_r+0x30>
 80174ce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80174d0:	f7fd f94a 	bl	8014768 <__retarget_lock_acquire_recursive>
 80174d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80174d8:	049a      	lsls	r2, r3, #18
 80174da:	d406      	bmi.n	80174ea <_vfiprintf_r+0x46>
 80174dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80174e0:	81bb      	strh	r3, [r7, #12]
 80174e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80174e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80174e8:	667b      	str	r3, [r7, #100]	; 0x64
 80174ea:	89bb      	ldrh	r3, [r7, #12]
 80174ec:	071e      	lsls	r6, r3, #28
 80174ee:	d501      	bpl.n	80174f4 <_vfiprintf_r+0x50>
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	b9bb      	cbnz	r3, 8017524 <_vfiprintf_r+0x80>
 80174f4:	4639      	mov	r1, r7
 80174f6:	4648      	mov	r0, r9
 80174f8:	f000 fcaa 	bl	8017e50 <__swsetup_r>
 80174fc:	b190      	cbz	r0, 8017524 <_vfiprintf_r+0x80>
 80174fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017500:	07d8      	lsls	r0, r3, #31
 8017502:	d508      	bpl.n	8017516 <_vfiprintf_r+0x72>
 8017504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017508:	9302      	str	r3, [sp, #8]
 801750a:	9802      	ldr	r0, [sp, #8]
 801750c:	b039      	add	sp, #228	; 0xe4
 801750e:	ecbd 8b02 	vpop	{d8}
 8017512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017516:	89bb      	ldrh	r3, [r7, #12]
 8017518:	0599      	lsls	r1, r3, #22
 801751a:	d4f3      	bmi.n	8017504 <_vfiprintf_r+0x60>
 801751c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801751e:	f7fd f924 	bl	801476a <__retarget_lock_release_recursive>
 8017522:	e7ef      	b.n	8017504 <_vfiprintf_r+0x60>
 8017524:	89bb      	ldrh	r3, [r7, #12]
 8017526:	f003 021a 	and.w	r2, r3, #26
 801752a:	2a0a      	cmp	r2, #10
 801752c:	d113      	bne.n	8017556 <_vfiprintf_r+0xb2>
 801752e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8017532:	2a00      	cmp	r2, #0
 8017534:	db0f      	blt.n	8017556 <_vfiprintf_r+0xb2>
 8017536:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017538:	07d2      	lsls	r2, r2, #31
 801753a:	d404      	bmi.n	8017546 <_vfiprintf_r+0xa2>
 801753c:	059e      	lsls	r6, r3, #22
 801753e:	d402      	bmi.n	8017546 <_vfiprintf_r+0xa2>
 8017540:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017542:	f7fd f912 	bl	801476a <__retarget_lock_release_recursive>
 8017546:	9a01      	ldr	r2, [sp, #4]
 8017548:	462b      	mov	r3, r5
 801754a:	4639      	mov	r1, r7
 801754c:	4648      	mov	r0, r9
 801754e:	f000 fc31 	bl	8017db4 <__sbprintf>
 8017552:	9002      	str	r0, [sp, #8]
 8017554:	e7d9      	b.n	801750a <_vfiprintf_r+0x66>
 8017556:	2300      	movs	r3, #0
 8017558:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801755c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017560:	ae0f      	add	r6, sp, #60	; 0x3c
 8017562:	ee08 3a10 	vmov	s16, r3
 8017566:	960c      	str	r6, [sp, #48]	; 0x30
 8017568:	9307      	str	r3, [sp, #28]
 801756a:	9302      	str	r3, [sp, #8]
 801756c:	9b01      	ldr	r3, [sp, #4]
 801756e:	461d      	mov	r5, r3
 8017570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017574:	b10a      	cbz	r2, 801757a <_vfiprintf_r+0xd6>
 8017576:	2a25      	cmp	r2, #37	; 0x25
 8017578:	d1f9      	bne.n	801756e <_vfiprintf_r+0xca>
 801757a:	9b01      	ldr	r3, [sp, #4]
 801757c:	ebb5 0803 	subs.w	r8, r5, r3
 8017580:	d00d      	beq.n	801759e <_vfiprintf_r+0xfa>
 8017582:	e9c6 3800 	strd	r3, r8, [r6]
 8017586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017588:	4443      	add	r3, r8
 801758a:	930e      	str	r3, [sp, #56]	; 0x38
 801758c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801758e:	3301      	adds	r3, #1
 8017590:	2b07      	cmp	r3, #7
 8017592:	930d      	str	r3, [sp, #52]	; 0x34
 8017594:	dc75      	bgt.n	8017682 <_vfiprintf_r+0x1de>
 8017596:	3608      	adds	r6, #8
 8017598:	9b02      	ldr	r3, [sp, #8]
 801759a:	4443      	add	r3, r8
 801759c:	9302      	str	r3, [sp, #8]
 801759e:	782b      	ldrb	r3, [r5, #0]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	f000 83c8 	beq.w	8017d36 <_vfiprintf_r+0x892>
 80175a6:	2300      	movs	r3, #0
 80175a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80175ac:	1c6a      	adds	r2, r5, #1
 80175ae:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80175b2:	9100      	str	r1, [sp, #0]
 80175b4:	9303      	str	r3, [sp, #12]
 80175b6:	469a      	mov	sl, r3
 80175b8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80175bc:	9201      	str	r2, [sp, #4]
 80175be:	f1a3 0220 	sub.w	r2, r3, #32
 80175c2:	2a5a      	cmp	r2, #90	; 0x5a
 80175c4:	f200 8310 	bhi.w	8017be8 <_vfiprintf_r+0x744>
 80175c8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80175cc:	030e0099 	.word	0x030e0099
 80175d0:	00a1030e 	.word	0x00a1030e
 80175d4:	030e030e 	.word	0x030e030e
 80175d8:	0080030e 	.word	0x0080030e
 80175dc:	030e030e 	.word	0x030e030e
 80175e0:	00ae00a4 	.word	0x00ae00a4
 80175e4:	00ab030e 	.word	0x00ab030e
 80175e8:	030e00b0 	.word	0x030e00b0
 80175ec:	00ce00cb 	.word	0x00ce00cb
 80175f0:	00ce00ce 	.word	0x00ce00ce
 80175f4:	00ce00ce 	.word	0x00ce00ce
 80175f8:	00ce00ce 	.word	0x00ce00ce
 80175fc:	00ce00ce 	.word	0x00ce00ce
 8017600:	030e030e 	.word	0x030e030e
 8017604:	030e030e 	.word	0x030e030e
 8017608:	030e030e 	.word	0x030e030e
 801760c:	030e030e 	.word	0x030e030e
 8017610:	00f8030e 	.word	0x00f8030e
 8017614:	030e0106 	.word	0x030e0106
 8017618:	030e030e 	.word	0x030e030e
 801761c:	030e030e 	.word	0x030e030e
 8017620:	030e030e 	.word	0x030e030e
 8017624:	030e030e 	.word	0x030e030e
 8017628:	014d030e 	.word	0x014d030e
 801762c:	030e030e 	.word	0x030e030e
 8017630:	0192030e 	.word	0x0192030e
 8017634:	0270030e 	.word	0x0270030e
 8017638:	030e030e 	.word	0x030e030e
 801763c:	030e028e 	.word	0x030e028e
 8017640:	030e030e 	.word	0x030e030e
 8017644:	030e030e 	.word	0x030e030e
 8017648:	030e030e 	.word	0x030e030e
 801764c:	030e030e 	.word	0x030e030e
 8017650:	00f8030e 	.word	0x00f8030e
 8017654:	030e0108 	.word	0x030e0108
 8017658:	030e030e 	.word	0x030e030e
 801765c:	010800de 	.word	0x010800de
 8017660:	030e00f2 	.word	0x030e00f2
 8017664:	030e00eb 	.word	0x030e00eb
 8017668:	014f0130 	.word	0x014f0130
 801766c:	00f20182 	.word	0x00f20182
 8017670:	0192030e 	.word	0x0192030e
 8017674:	02720097 	.word	0x02720097
 8017678:	030e030e 	.word	0x030e030e
 801767c:	030e0065 	.word	0x030e0065
 8017680:	0097      	.short	0x0097
 8017682:	aa0c      	add	r2, sp, #48	; 0x30
 8017684:	4639      	mov	r1, r7
 8017686:	4648      	mov	r0, r9
 8017688:	f7ff feda 	bl	8017440 <__sprint_r>
 801768c:	2800      	cmp	r0, #0
 801768e:	f040 8331 	bne.w	8017cf4 <_vfiprintf_r+0x850>
 8017692:	ae0f      	add	r6, sp, #60	; 0x3c
 8017694:	e780      	b.n	8017598 <_vfiprintf_r+0xf4>
 8017696:	4a95      	ldr	r2, [pc, #596]	; (80178ec <_vfiprintf_r+0x448>)
 8017698:	9205      	str	r2, [sp, #20]
 801769a:	f01a 0f20 	tst.w	sl, #32
 801769e:	f000 8225 	beq.w	8017aec <_vfiprintf_r+0x648>
 80176a2:	3407      	adds	r4, #7
 80176a4:	f024 0b07 	bic.w	fp, r4, #7
 80176a8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80176ac:	f01a 0f01 	tst.w	sl, #1
 80176b0:	d009      	beq.n	80176c6 <_vfiprintf_r+0x222>
 80176b2:	ea54 0205 	orrs.w	r2, r4, r5
 80176b6:	bf1f      	itttt	ne
 80176b8:	2230      	movne	r2, #48	; 0x30
 80176ba:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 80176be:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 80176c2:	f04a 0a02 	orrne.w	sl, sl, #2
 80176c6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80176ca:	e10d      	b.n	80178e8 <_vfiprintf_r+0x444>
 80176cc:	4648      	mov	r0, r9
 80176ce:	f7ff f8cf 	bl	8016870 <_localeconv_r>
 80176d2:	6843      	ldr	r3, [r0, #4]
 80176d4:	4618      	mov	r0, r3
 80176d6:	ee08 3a10 	vmov	s16, r3
 80176da:	f7e8 fd91 	bl	8000200 <strlen>
 80176de:	9007      	str	r0, [sp, #28]
 80176e0:	4648      	mov	r0, r9
 80176e2:	f7ff f8c5 	bl	8016870 <_localeconv_r>
 80176e6:	6883      	ldr	r3, [r0, #8]
 80176e8:	9306      	str	r3, [sp, #24]
 80176ea:	9b07      	ldr	r3, [sp, #28]
 80176ec:	b12b      	cbz	r3, 80176fa <_vfiprintf_r+0x256>
 80176ee:	9b06      	ldr	r3, [sp, #24]
 80176f0:	b11b      	cbz	r3, 80176fa <_vfiprintf_r+0x256>
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	b10b      	cbz	r3, 80176fa <_vfiprintf_r+0x256>
 80176f6:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80176fa:	9a01      	ldr	r2, [sp, #4]
 80176fc:	e75c      	b.n	80175b8 <_vfiprintf_r+0x114>
 80176fe:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017702:	2b00      	cmp	r3, #0
 8017704:	d1f9      	bne.n	80176fa <_vfiprintf_r+0x256>
 8017706:	2320      	movs	r3, #32
 8017708:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 801770c:	e7f5      	b.n	80176fa <_vfiprintf_r+0x256>
 801770e:	f04a 0a01 	orr.w	sl, sl, #1
 8017712:	e7f2      	b.n	80176fa <_vfiprintf_r+0x256>
 8017714:	f854 3b04 	ldr.w	r3, [r4], #4
 8017718:	9303      	str	r3, [sp, #12]
 801771a:	2b00      	cmp	r3, #0
 801771c:	daed      	bge.n	80176fa <_vfiprintf_r+0x256>
 801771e:	425b      	negs	r3, r3
 8017720:	9303      	str	r3, [sp, #12]
 8017722:	f04a 0a04 	orr.w	sl, sl, #4
 8017726:	e7e8      	b.n	80176fa <_vfiprintf_r+0x256>
 8017728:	232b      	movs	r3, #43	; 0x2b
 801772a:	e7ed      	b.n	8017708 <_vfiprintf_r+0x264>
 801772c:	9a01      	ldr	r2, [sp, #4]
 801772e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017732:	2b2a      	cmp	r3, #42	; 0x2a
 8017734:	d112      	bne.n	801775c <_vfiprintf_r+0x2b8>
 8017736:	f854 0b04 	ldr.w	r0, [r4], #4
 801773a:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 801773e:	e9cd 3200 	strd	r3, r2, [sp]
 8017742:	e7da      	b.n	80176fa <_vfiprintf_r+0x256>
 8017744:	9b00      	ldr	r3, [sp, #0]
 8017746:	200a      	movs	r0, #10
 8017748:	fb00 1303 	mla	r3, r0, r3, r1
 801774c:	9300      	str	r3, [sp, #0]
 801774e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8017752:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017756:	2909      	cmp	r1, #9
 8017758:	d9f4      	bls.n	8017744 <_vfiprintf_r+0x2a0>
 801775a:	e72f      	b.n	80175bc <_vfiprintf_r+0x118>
 801775c:	2100      	movs	r1, #0
 801775e:	9100      	str	r1, [sp, #0]
 8017760:	e7f7      	b.n	8017752 <_vfiprintf_r+0x2ae>
 8017762:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8017766:	e7c8      	b.n	80176fa <_vfiprintf_r+0x256>
 8017768:	2100      	movs	r1, #0
 801776a:	9a01      	ldr	r2, [sp, #4]
 801776c:	9103      	str	r1, [sp, #12]
 801776e:	9903      	ldr	r1, [sp, #12]
 8017770:	3b30      	subs	r3, #48	; 0x30
 8017772:	200a      	movs	r0, #10
 8017774:	fb00 3301 	mla	r3, r0, r1, r3
 8017778:	9303      	str	r3, [sp, #12]
 801777a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801777e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017782:	2909      	cmp	r1, #9
 8017784:	d9f3      	bls.n	801776e <_vfiprintf_r+0x2ca>
 8017786:	e719      	b.n	80175bc <_vfiprintf_r+0x118>
 8017788:	9b01      	ldr	r3, [sp, #4]
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	2b68      	cmp	r3, #104	; 0x68
 801778e:	bf01      	itttt	eq
 8017790:	9b01      	ldreq	r3, [sp, #4]
 8017792:	3301      	addeq	r3, #1
 8017794:	9301      	streq	r3, [sp, #4]
 8017796:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 801779a:	bf18      	it	ne
 801779c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80177a0:	e7ab      	b.n	80176fa <_vfiprintf_r+0x256>
 80177a2:	9b01      	ldr	r3, [sp, #4]
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	2b6c      	cmp	r3, #108	; 0x6c
 80177a8:	d105      	bne.n	80177b6 <_vfiprintf_r+0x312>
 80177aa:	9b01      	ldr	r3, [sp, #4]
 80177ac:	3301      	adds	r3, #1
 80177ae:	9301      	str	r3, [sp, #4]
 80177b0:	f04a 0a20 	orr.w	sl, sl, #32
 80177b4:	e7a1      	b.n	80176fa <_vfiprintf_r+0x256>
 80177b6:	f04a 0a10 	orr.w	sl, sl, #16
 80177ba:	e79e      	b.n	80176fa <_vfiprintf_r+0x256>
 80177bc:	46a3      	mov	fp, r4
 80177be:	2100      	movs	r1, #0
 80177c0:	f85b 3b04 	ldr.w	r3, [fp], #4
 80177c4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80177c8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80177cc:	2301      	movs	r3, #1
 80177ce:	9300      	str	r3, [sp, #0]
 80177d0:	460d      	mov	r5, r1
 80177d2:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 80177d6:	e0a0      	b.n	801791a <_vfiprintf_r+0x476>
 80177d8:	f04a 0a10 	orr.w	sl, sl, #16
 80177dc:	f01a 0f20 	tst.w	sl, #32
 80177e0:	d011      	beq.n	8017806 <_vfiprintf_r+0x362>
 80177e2:	3407      	adds	r4, #7
 80177e4:	f024 0b07 	bic.w	fp, r4, #7
 80177e8:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 80177ec:	2c00      	cmp	r4, #0
 80177ee:	f175 0300 	sbcs.w	r3, r5, #0
 80177f2:	da06      	bge.n	8017802 <_vfiprintf_r+0x35e>
 80177f4:	4264      	negs	r4, r4
 80177f6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80177fa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80177fe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8017802:	2301      	movs	r3, #1
 8017804:	e03f      	b.n	8017886 <_vfiprintf_r+0x3e2>
 8017806:	f01a 0f10 	tst.w	sl, #16
 801780a:	f104 0b04 	add.w	fp, r4, #4
 801780e:	d002      	beq.n	8017816 <_vfiprintf_r+0x372>
 8017810:	6824      	ldr	r4, [r4, #0]
 8017812:	17e5      	asrs	r5, r4, #31
 8017814:	e7ea      	b.n	80177ec <_vfiprintf_r+0x348>
 8017816:	f01a 0f40 	tst.w	sl, #64	; 0x40
 801781a:	6824      	ldr	r4, [r4, #0]
 801781c:	d001      	beq.n	8017822 <_vfiprintf_r+0x37e>
 801781e:	b224      	sxth	r4, r4
 8017820:	e7f7      	b.n	8017812 <_vfiprintf_r+0x36e>
 8017822:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017826:	bf18      	it	ne
 8017828:	b264      	sxtbne	r4, r4
 801782a:	e7f2      	b.n	8017812 <_vfiprintf_r+0x36e>
 801782c:	f01a 0f20 	tst.w	sl, #32
 8017830:	f854 3b04 	ldr.w	r3, [r4], #4
 8017834:	d005      	beq.n	8017842 <_vfiprintf_r+0x39e>
 8017836:	9a02      	ldr	r2, [sp, #8]
 8017838:	4610      	mov	r0, r2
 801783a:	17d1      	asrs	r1, r2, #31
 801783c:	e9c3 0100 	strd	r0, r1, [r3]
 8017840:	e694      	b.n	801756c <_vfiprintf_r+0xc8>
 8017842:	f01a 0f10 	tst.w	sl, #16
 8017846:	d002      	beq.n	801784e <_vfiprintf_r+0x3aa>
 8017848:	9a02      	ldr	r2, [sp, #8]
 801784a:	601a      	str	r2, [r3, #0]
 801784c:	e68e      	b.n	801756c <_vfiprintf_r+0xc8>
 801784e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017852:	d002      	beq.n	801785a <_vfiprintf_r+0x3b6>
 8017854:	9a02      	ldr	r2, [sp, #8]
 8017856:	801a      	strh	r2, [r3, #0]
 8017858:	e688      	b.n	801756c <_vfiprintf_r+0xc8>
 801785a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 801785e:	d0f3      	beq.n	8017848 <_vfiprintf_r+0x3a4>
 8017860:	9a02      	ldr	r2, [sp, #8]
 8017862:	701a      	strb	r2, [r3, #0]
 8017864:	e682      	b.n	801756c <_vfiprintf_r+0xc8>
 8017866:	f04a 0a10 	orr.w	sl, sl, #16
 801786a:	f01a 0f20 	tst.w	sl, #32
 801786e:	d01d      	beq.n	80178ac <_vfiprintf_r+0x408>
 8017870:	3407      	adds	r4, #7
 8017872:	f024 0b07 	bic.w	fp, r4, #7
 8017876:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 801787a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 801787e:	2300      	movs	r3, #0
 8017880:	2200      	movs	r2, #0
 8017882:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8017886:	9a00      	ldr	r2, [sp, #0]
 8017888:	3201      	adds	r2, #1
 801788a:	f000 8261 	beq.w	8017d50 <_vfiprintf_r+0x8ac>
 801788e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8017892:	9204      	str	r2, [sp, #16]
 8017894:	ea54 0205 	orrs.w	r2, r4, r5
 8017898:	f040 8260 	bne.w	8017d5c <_vfiprintf_r+0x8b8>
 801789c:	9a00      	ldr	r2, [sp, #0]
 801789e:	2a00      	cmp	r2, #0
 80178a0:	f000 8197 	beq.w	8017bd2 <_vfiprintf_r+0x72e>
 80178a4:	2b01      	cmp	r3, #1
 80178a6:	f040 825c 	bne.w	8017d62 <_vfiprintf_r+0x8be>
 80178aa:	e135      	b.n	8017b18 <_vfiprintf_r+0x674>
 80178ac:	f01a 0f10 	tst.w	sl, #16
 80178b0:	f104 0b04 	add.w	fp, r4, #4
 80178b4:	d001      	beq.n	80178ba <_vfiprintf_r+0x416>
 80178b6:	6824      	ldr	r4, [r4, #0]
 80178b8:	e003      	b.n	80178c2 <_vfiprintf_r+0x41e>
 80178ba:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80178be:	d002      	beq.n	80178c6 <_vfiprintf_r+0x422>
 80178c0:	8824      	ldrh	r4, [r4, #0]
 80178c2:	2500      	movs	r5, #0
 80178c4:	e7d9      	b.n	801787a <_vfiprintf_r+0x3d6>
 80178c6:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80178ca:	d0f4      	beq.n	80178b6 <_vfiprintf_r+0x412>
 80178cc:	7824      	ldrb	r4, [r4, #0]
 80178ce:	e7f8      	b.n	80178c2 <_vfiprintf_r+0x41e>
 80178d0:	46a3      	mov	fp, r4
 80178d2:	f647 0330 	movw	r3, #30768	; 0x7830
 80178d6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80178da:	f85b 4b04 	ldr.w	r4, [fp], #4
 80178de:	4b03      	ldr	r3, [pc, #12]	; (80178ec <_vfiprintf_r+0x448>)
 80178e0:	9305      	str	r3, [sp, #20]
 80178e2:	2500      	movs	r5, #0
 80178e4:	f04a 0a02 	orr.w	sl, sl, #2
 80178e8:	2302      	movs	r3, #2
 80178ea:	e7c9      	b.n	8017880 <_vfiprintf_r+0x3dc>
 80178ec:	0803936c 	.word	0x0803936c
 80178f0:	9b00      	ldr	r3, [sp, #0]
 80178f2:	46a3      	mov	fp, r4
 80178f4:	2500      	movs	r5, #0
 80178f6:	1c5c      	adds	r4, r3, #1
 80178f8:	f85b 8b04 	ldr.w	r8, [fp], #4
 80178fc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017900:	f000 80cf 	beq.w	8017aa2 <_vfiprintf_r+0x5fe>
 8017904:	461a      	mov	r2, r3
 8017906:	4629      	mov	r1, r5
 8017908:	4640      	mov	r0, r8
 801790a:	f7e8 fc81 	bl	8000210 <memchr>
 801790e:	2800      	cmp	r0, #0
 8017910:	f000 8174 	beq.w	8017bfc <_vfiprintf_r+0x758>
 8017914:	eba0 0308 	sub.w	r3, r0, r8
 8017918:	9300      	str	r3, [sp, #0]
 801791a:	9b00      	ldr	r3, [sp, #0]
 801791c:	42ab      	cmp	r3, r5
 801791e:	bfb8      	it	lt
 8017920:	462b      	movlt	r3, r5
 8017922:	9304      	str	r3, [sp, #16]
 8017924:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8017928:	b113      	cbz	r3, 8017930 <_vfiprintf_r+0x48c>
 801792a:	9b04      	ldr	r3, [sp, #16]
 801792c:	3301      	adds	r3, #1
 801792e:	9304      	str	r3, [sp, #16]
 8017930:	f01a 0302 	ands.w	r3, sl, #2
 8017934:	9308      	str	r3, [sp, #32]
 8017936:	bf1e      	ittt	ne
 8017938:	9b04      	ldrne	r3, [sp, #16]
 801793a:	3302      	addne	r3, #2
 801793c:	9304      	strne	r3, [sp, #16]
 801793e:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8017942:	9309      	str	r3, [sp, #36]	; 0x24
 8017944:	d11f      	bne.n	8017986 <_vfiprintf_r+0x4e2>
 8017946:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801794a:	1a9c      	subs	r4, r3, r2
 801794c:	2c00      	cmp	r4, #0
 801794e:	dd1a      	ble.n	8017986 <_vfiprintf_r+0x4e2>
 8017950:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017954:	48b9      	ldr	r0, [pc, #740]	; (8017c3c <_vfiprintf_r+0x798>)
 8017956:	6030      	str	r0, [r6, #0]
 8017958:	2c10      	cmp	r4, #16
 801795a:	f103 0301 	add.w	r3, r3, #1
 801795e:	f106 0108 	add.w	r1, r6, #8
 8017962:	f300 814d 	bgt.w	8017c00 <_vfiprintf_r+0x75c>
 8017966:	6074      	str	r4, [r6, #4]
 8017968:	2b07      	cmp	r3, #7
 801796a:	4414      	add	r4, r2
 801796c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017970:	f340 8158 	ble.w	8017c24 <_vfiprintf_r+0x780>
 8017974:	aa0c      	add	r2, sp, #48	; 0x30
 8017976:	4639      	mov	r1, r7
 8017978:	4648      	mov	r0, r9
 801797a:	f7ff fd61 	bl	8017440 <__sprint_r>
 801797e:	2800      	cmp	r0, #0
 8017980:	f040 81b8 	bne.w	8017cf4 <_vfiprintf_r+0x850>
 8017984:	ae0f      	add	r6, sp, #60	; 0x3c
 8017986:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 801798a:	b173      	cbz	r3, 80179aa <_vfiprintf_r+0x506>
 801798c:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8017990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017992:	6032      	str	r2, [r6, #0]
 8017994:	2201      	movs	r2, #1
 8017996:	6072      	str	r2, [r6, #4]
 8017998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801799a:	3301      	adds	r3, #1
 801799c:	3201      	adds	r2, #1
 801799e:	2b07      	cmp	r3, #7
 80179a0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80179a4:	f300 8140 	bgt.w	8017c28 <_vfiprintf_r+0x784>
 80179a8:	3608      	adds	r6, #8
 80179aa:	9b08      	ldr	r3, [sp, #32]
 80179ac:	b16b      	cbz	r3, 80179ca <_vfiprintf_r+0x526>
 80179ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80179b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179b2:	6032      	str	r2, [r6, #0]
 80179b4:	2202      	movs	r2, #2
 80179b6:	6072      	str	r2, [r6, #4]
 80179b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179ba:	3301      	adds	r3, #1
 80179bc:	3202      	adds	r2, #2
 80179be:	2b07      	cmp	r3, #7
 80179c0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 80179c4:	f300 8140 	bgt.w	8017c48 <_vfiprintf_r+0x7a4>
 80179c8:	3608      	adds	r6, #8
 80179ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179cc:	2b80      	cmp	r3, #128	; 0x80
 80179ce:	d11f      	bne.n	8017a10 <_vfiprintf_r+0x56c>
 80179d0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80179d4:	1a9c      	subs	r4, r3, r2
 80179d6:	2c00      	cmp	r4, #0
 80179d8:	dd1a      	ble.n	8017a10 <_vfiprintf_r+0x56c>
 80179da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80179de:	4898      	ldr	r0, [pc, #608]	; (8017c40 <_vfiprintf_r+0x79c>)
 80179e0:	6030      	str	r0, [r6, #0]
 80179e2:	2c10      	cmp	r4, #16
 80179e4:	f103 0301 	add.w	r3, r3, #1
 80179e8:	f106 0108 	add.w	r1, r6, #8
 80179ec:	f300 8135 	bgt.w	8017c5a <_vfiprintf_r+0x7b6>
 80179f0:	6074      	str	r4, [r6, #4]
 80179f2:	2b07      	cmp	r3, #7
 80179f4:	4414      	add	r4, r2
 80179f6:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 80179fa:	f340 8140 	ble.w	8017c7e <_vfiprintf_r+0x7da>
 80179fe:	aa0c      	add	r2, sp, #48	; 0x30
 8017a00:	4639      	mov	r1, r7
 8017a02:	4648      	mov	r0, r9
 8017a04:	f7ff fd1c 	bl	8017440 <__sprint_r>
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	f040 8173 	bne.w	8017cf4 <_vfiprintf_r+0x850>
 8017a0e:	ae0f      	add	r6, sp, #60	; 0x3c
 8017a10:	9b00      	ldr	r3, [sp, #0]
 8017a12:	1aec      	subs	r4, r5, r3
 8017a14:	2c00      	cmp	r4, #0
 8017a16:	dd1a      	ble.n	8017a4e <_vfiprintf_r+0x5aa>
 8017a18:	4d89      	ldr	r5, [pc, #548]	; (8017c40 <_vfiprintf_r+0x79c>)
 8017a1a:	6035      	str	r5, [r6, #0]
 8017a1c:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8017a20:	2c10      	cmp	r4, #16
 8017a22:	f103 0301 	add.w	r3, r3, #1
 8017a26:	f106 0208 	add.w	r2, r6, #8
 8017a2a:	f300 812a 	bgt.w	8017c82 <_vfiprintf_r+0x7de>
 8017a2e:	6074      	str	r4, [r6, #4]
 8017a30:	2b07      	cmp	r3, #7
 8017a32:	440c      	add	r4, r1
 8017a34:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8017a38:	f340 8134 	ble.w	8017ca4 <_vfiprintf_r+0x800>
 8017a3c:	aa0c      	add	r2, sp, #48	; 0x30
 8017a3e:	4639      	mov	r1, r7
 8017a40:	4648      	mov	r0, r9
 8017a42:	f7ff fcfd 	bl	8017440 <__sprint_r>
 8017a46:	2800      	cmp	r0, #0
 8017a48:	f040 8154 	bne.w	8017cf4 <_vfiprintf_r+0x850>
 8017a4c:	ae0f      	add	r6, sp, #60	; 0x3c
 8017a4e:	9b00      	ldr	r3, [sp, #0]
 8017a50:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017a52:	6073      	str	r3, [r6, #4]
 8017a54:	4418      	add	r0, r3
 8017a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a58:	f8c6 8000 	str.w	r8, [r6]
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	2b07      	cmp	r3, #7
 8017a60:	900e      	str	r0, [sp, #56]	; 0x38
 8017a62:	930d      	str	r3, [sp, #52]	; 0x34
 8017a64:	f300 8120 	bgt.w	8017ca8 <_vfiprintf_r+0x804>
 8017a68:	f106 0308 	add.w	r3, r6, #8
 8017a6c:	f01a 0f04 	tst.w	sl, #4
 8017a70:	f040 8122 	bne.w	8017cb8 <_vfiprintf_r+0x814>
 8017a74:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8017a78:	9904      	ldr	r1, [sp, #16]
 8017a7a:	428a      	cmp	r2, r1
 8017a7c:	bfac      	ite	ge
 8017a7e:	189b      	addge	r3, r3, r2
 8017a80:	185b      	addlt	r3, r3, r1
 8017a82:	9302      	str	r3, [sp, #8]
 8017a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a86:	b13b      	cbz	r3, 8017a98 <_vfiprintf_r+0x5f4>
 8017a88:	aa0c      	add	r2, sp, #48	; 0x30
 8017a8a:	4639      	mov	r1, r7
 8017a8c:	4648      	mov	r0, r9
 8017a8e:	f7ff fcd7 	bl	8017440 <__sprint_r>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	f040 812e 	bne.w	8017cf4 <_vfiprintf_r+0x850>
 8017a98:	2300      	movs	r3, #0
 8017a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8017a9c:	465c      	mov	r4, fp
 8017a9e:	ae0f      	add	r6, sp, #60	; 0x3c
 8017aa0:	e564      	b.n	801756c <_vfiprintf_r+0xc8>
 8017aa2:	4640      	mov	r0, r8
 8017aa4:	f7e8 fbac 	bl	8000200 <strlen>
 8017aa8:	9000      	str	r0, [sp, #0]
 8017aaa:	e736      	b.n	801791a <_vfiprintf_r+0x476>
 8017aac:	f04a 0a10 	orr.w	sl, sl, #16
 8017ab0:	f01a 0f20 	tst.w	sl, #32
 8017ab4:	d006      	beq.n	8017ac4 <_vfiprintf_r+0x620>
 8017ab6:	3407      	adds	r4, #7
 8017ab8:	f024 0b07 	bic.w	fp, r4, #7
 8017abc:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	e6dd      	b.n	8017880 <_vfiprintf_r+0x3dc>
 8017ac4:	f01a 0f10 	tst.w	sl, #16
 8017ac8:	f104 0b04 	add.w	fp, r4, #4
 8017acc:	d001      	beq.n	8017ad2 <_vfiprintf_r+0x62e>
 8017ace:	6824      	ldr	r4, [r4, #0]
 8017ad0:	e003      	b.n	8017ada <_vfiprintf_r+0x636>
 8017ad2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017ad6:	d002      	beq.n	8017ade <_vfiprintf_r+0x63a>
 8017ad8:	8824      	ldrh	r4, [r4, #0]
 8017ada:	2500      	movs	r5, #0
 8017adc:	e7f0      	b.n	8017ac0 <_vfiprintf_r+0x61c>
 8017ade:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017ae2:	d0f4      	beq.n	8017ace <_vfiprintf_r+0x62a>
 8017ae4:	7824      	ldrb	r4, [r4, #0]
 8017ae6:	e7f8      	b.n	8017ada <_vfiprintf_r+0x636>
 8017ae8:	4a56      	ldr	r2, [pc, #344]	; (8017c44 <_vfiprintf_r+0x7a0>)
 8017aea:	e5d5      	b.n	8017698 <_vfiprintf_r+0x1f4>
 8017aec:	f01a 0f10 	tst.w	sl, #16
 8017af0:	f104 0b04 	add.w	fp, r4, #4
 8017af4:	d001      	beq.n	8017afa <_vfiprintf_r+0x656>
 8017af6:	6824      	ldr	r4, [r4, #0]
 8017af8:	e003      	b.n	8017b02 <_vfiprintf_r+0x65e>
 8017afa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017afe:	d002      	beq.n	8017b06 <_vfiprintf_r+0x662>
 8017b00:	8824      	ldrh	r4, [r4, #0]
 8017b02:	2500      	movs	r5, #0
 8017b04:	e5d2      	b.n	80176ac <_vfiprintf_r+0x208>
 8017b06:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8017b0a:	d0f4      	beq.n	8017af6 <_vfiprintf_r+0x652>
 8017b0c:	7824      	ldrb	r4, [r4, #0]
 8017b0e:	e7f8      	b.n	8017b02 <_vfiprintf_r+0x65e>
 8017b10:	2d00      	cmp	r5, #0
 8017b12:	bf08      	it	eq
 8017b14:	2c0a      	cmpeq	r4, #10
 8017b16:	d205      	bcs.n	8017b24 <_vfiprintf_r+0x680>
 8017b18:	3430      	adds	r4, #48	; 0x30
 8017b1a:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8017b1e:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8017b22:	e13c      	b.n	8017d9e <_vfiprintf_r+0x8fa>
 8017b24:	ab38      	add	r3, sp, #224	; 0xe0
 8017b26:	9308      	str	r3, [sp, #32]
 8017b28:	9b04      	ldr	r3, [sp, #16]
 8017b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017b2e:	f04f 0a00 	mov.w	sl, #0
 8017b32:	9309      	str	r3, [sp, #36]	; 0x24
 8017b34:	9b08      	ldr	r3, [sp, #32]
 8017b36:	220a      	movs	r2, #10
 8017b38:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	2300      	movs	r3, #0
 8017b40:	4629      	mov	r1, r5
 8017b42:	f7e9 f849 	bl	8000bd8 <__aeabi_uldivmod>
 8017b46:	9b08      	ldr	r3, [sp, #32]
 8017b48:	3230      	adds	r2, #48	; 0x30
 8017b4a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8017b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b50:	f10a 0a01 	add.w	sl, sl, #1
 8017b54:	b1db      	cbz	r3, 8017b8e <_vfiprintf_r+0x6ea>
 8017b56:	9b06      	ldr	r3, [sp, #24]
 8017b58:	781b      	ldrb	r3, [r3, #0]
 8017b5a:	4553      	cmp	r3, sl
 8017b5c:	d117      	bne.n	8017b8e <_vfiprintf_r+0x6ea>
 8017b5e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017b62:	d014      	beq.n	8017b8e <_vfiprintf_r+0x6ea>
 8017b64:	2d00      	cmp	r5, #0
 8017b66:	bf08      	it	eq
 8017b68:	2c0a      	cmpeq	r4, #10
 8017b6a:	d310      	bcc.n	8017b8e <_vfiprintf_r+0x6ea>
 8017b6c:	9b07      	ldr	r3, [sp, #28]
 8017b6e:	eba8 0803 	sub.w	r8, r8, r3
 8017b72:	461a      	mov	r2, r3
 8017b74:	ee18 1a10 	vmov	r1, s16
 8017b78:	4640      	mov	r0, r8
 8017b7a:	f7ff f9e5 	bl	8016f48 <strncpy>
 8017b7e:	9b06      	ldr	r3, [sp, #24]
 8017b80:	785b      	ldrb	r3, [r3, #1]
 8017b82:	b1a3      	cbz	r3, 8017bae <_vfiprintf_r+0x70a>
 8017b84:	9b06      	ldr	r3, [sp, #24]
 8017b86:	3301      	adds	r3, #1
 8017b88:	9306      	str	r3, [sp, #24]
 8017b8a:	f04f 0a00 	mov.w	sl, #0
 8017b8e:	220a      	movs	r2, #10
 8017b90:	2300      	movs	r3, #0
 8017b92:	4620      	mov	r0, r4
 8017b94:	4629      	mov	r1, r5
 8017b96:	f7e9 f81f 	bl	8000bd8 <__aeabi_uldivmod>
 8017b9a:	2d00      	cmp	r5, #0
 8017b9c:	bf08      	it	eq
 8017b9e:	2c0a      	cmpeq	r4, #10
 8017ba0:	f0c0 80fd 	bcc.w	8017d9e <_vfiprintf_r+0x8fa>
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	460d      	mov	r5, r1
 8017ba8:	f8cd 8020 	str.w	r8, [sp, #32]
 8017bac:	e7c2      	b.n	8017b34 <_vfiprintf_r+0x690>
 8017bae:	469a      	mov	sl, r3
 8017bb0:	e7ed      	b.n	8017b8e <_vfiprintf_r+0x6ea>
 8017bb2:	9a05      	ldr	r2, [sp, #20]
 8017bb4:	f004 030f 	and.w	r3, r4, #15
 8017bb8:	5cd3      	ldrb	r3, [r2, r3]
 8017bba:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8017bbe:	0923      	lsrs	r3, r4, #4
 8017bc0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8017bc4:	092a      	lsrs	r2, r5, #4
 8017bc6:	461c      	mov	r4, r3
 8017bc8:	4615      	mov	r5, r2
 8017bca:	ea54 0305 	orrs.w	r3, r4, r5
 8017bce:	d1f0      	bne.n	8017bb2 <_vfiprintf_r+0x70e>
 8017bd0:	e0e5      	b.n	8017d9e <_vfiprintf_r+0x8fa>
 8017bd2:	b933      	cbnz	r3, 8017be2 <_vfiprintf_r+0x73e>
 8017bd4:	f01a 0f01 	tst.w	sl, #1
 8017bd8:	d003      	beq.n	8017be2 <_vfiprintf_r+0x73e>
 8017bda:	2330      	movs	r3, #48	; 0x30
 8017bdc:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8017be0:	e79d      	b.n	8017b1e <_vfiprintf_r+0x67a>
 8017be2:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8017be6:	e0da      	b.n	8017d9e <_vfiprintf_r+0x8fa>
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	f000 80a4 	beq.w	8017d36 <_vfiprintf_r+0x892>
 8017bee:	2100      	movs	r1, #0
 8017bf0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8017bf4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017bf8:	46a3      	mov	fp, r4
 8017bfa:	e5e7      	b.n	80177cc <_vfiprintf_r+0x328>
 8017bfc:	4605      	mov	r5, r0
 8017bfe:	e68c      	b.n	801791a <_vfiprintf_r+0x476>
 8017c00:	2010      	movs	r0, #16
 8017c02:	4402      	add	r2, r0
 8017c04:	2b07      	cmp	r3, #7
 8017c06:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8017c0a:	6070      	str	r0, [r6, #4]
 8017c0c:	dd07      	ble.n	8017c1e <_vfiprintf_r+0x77a>
 8017c0e:	aa0c      	add	r2, sp, #48	; 0x30
 8017c10:	4639      	mov	r1, r7
 8017c12:	4648      	mov	r0, r9
 8017c14:	f7ff fc14 	bl	8017440 <__sprint_r>
 8017c18:	2800      	cmp	r0, #0
 8017c1a:	d16b      	bne.n	8017cf4 <_vfiprintf_r+0x850>
 8017c1c:	a90f      	add	r1, sp, #60	; 0x3c
 8017c1e:	3c10      	subs	r4, #16
 8017c20:	460e      	mov	r6, r1
 8017c22:	e695      	b.n	8017950 <_vfiprintf_r+0x4ac>
 8017c24:	460e      	mov	r6, r1
 8017c26:	e6ae      	b.n	8017986 <_vfiprintf_r+0x4e2>
 8017c28:	aa0c      	add	r2, sp, #48	; 0x30
 8017c2a:	4639      	mov	r1, r7
 8017c2c:	4648      	mov	r0, r9
 8017c2e:	f7ff fc07 	bl	8017440 <__sprint_r>
 8017c32:	2800      	cmp	r0, #0
 8017c34:	d15e      	bne.n	8017cf4 <_vfiprintf_r+0x850>
 8017c36:	ae0f      	add	r6, sp, #60	; 0x3c
 8017c38:	e6b7      	b.n	80179aa <_vfiprintf_r+0x506>
 8017c3a:	bf00      	nop
 8017c3c:	080395d2 	.word	0x080395d2
 8017c40:	080395e2 	.word	0x080395e2
 8017c44:	0803937d 	.word	0x0803937d
 8017c48:	aa0c      	add	r2, sp, #48	; 0x30
 8017c4a:	4639      	mov	r1, r7
 8017c4c:	4648      	mov	r0, r9
 8017c4e:	f7ff fbf7 	bl	8017440 <__sprint_r>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	d14e      	bne.n	8017cf4 <_vfiprintf_r+0x850>
 8017c56:	ae0f      	add	r6, sp, #60	; 0x3c
 8017c58:	e6b7      	b.n	80179ca <_vfiprintf_r+0x526>
 8017c5a:	2010      	movs	r0, #16
 8017c5c:	4402      	add	r2, r0
 8017c5e:	2b07      	cmp	r3, #7
 8017c60:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8017c64:	6070      	str	r0, [r6, #4]
 8017c66:	dd07      	ble.n	8017c78 <_vfiprintf_r+0x7d4>
 8017c68:	aa0c      	add	r2, sp, #48	; 0x30
 8017c6a:	4639      	mov	r1, r7
 8017c6c:	4648      	mov	r0, r9
 8017c6e:	f7ff fbe7 	bl	8017440 <__sprint_r>
 8017c72:	2800      	cmp	r0, #0
 8017c74:	d13e      	bne.n	8017cf4 <_vfiprintf_r+0x850>
 8017c76:	a90f      	add	r1, sp, #60	; 0x3c
 8017c78:	3c10      	subs	r4, #16
 8017c7a:	460e      	mov	r6, r1
 8017c7c:	e6ad      	b.n	80179da <_vfiprintf_r+0x536>
 8017c7e:	460e      	mov	r6, r1
 8017c80:	e6c6      	b.n	8017a10 <_vfiprintf_r+0x56c>
 8017c82:	2010      	movs	r0, #16
 8017c84:	4401      	add	r1, r0
 8017c86:	2b07      	cmp	r3, #7
 8017c88:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8017c8c:	6070      	str	r0, [r6, #4]
 8017c8e:	dd06      	ble.n	8017c9e <_vfiprintf_r+0x7fa>
 8017c90:	aa0c      	add	r2, sp, #48	; 0x30
 8017c92:	4639      	mov	r1, r7
 8017c94:	4648      	mov	r0, r9
 8017c96:	f7ff fbd3 	bl	8017440 <__sprint_r>
 8017c9a:	bb58      	cbnz	r0, 8017cf4 <_vfiprintf_r+0x850>
 8017c9c:	aa0f      	add	r2, sp, #60	; 0x3c
 8017c9e:	3c10      	subs	r4, #16
 8017ca0:	4616      	mov	r6, r2
 8017ca2:	e6ba      	b.n	8017a1a <_vfiprintf_r+0x576>
 8017ca4:	4616      	mov	r6, r2
 8017ca6:	e6d2      	b.n	8017a4e <_vfiprintf_r+0x5aa>
 8017ca8:	aa0c      	add	r2, sp, #48	; 0x30
 8017caa:	4639      	mov	r1, r7
 8017cac:	4648      	mov	r0, r9
 8017cae:	f7ff fbc7 	bl	8017440 <__sprint_r>
 8017cb2:	b9f8      	cbnz	r0, 8017cf4 <_vfiprintf_r+0x850>
 8017cb4:	ab0f      	add	r3, sp, #60	; 0x3c
 8017cb6:	e6d9      	b.n	8017a6c <_vfiprintf_r+0x5c8>
 8017cb8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8017cbc:	1a54      	subs	r4, r2, r1
 8017cbe:	2c00      	cmp	r4, #0
 8017cc0:	f77f aed8 	ble.w	8017a74 <_vfiprintf_r+0x5d0>
 8017cc4:	4d3a      	ldr	r5, [pc, #232]	; (8017db0 <_vfiprintf_r+0x90c>)
 8017cc6:	2610      	movs	r6, #16
 8017cc8:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8017ccc:	2c10      	cmp	r4, #16
 8017cce:	f102 0201 	add.w	r2, r2, #1
 8017cd2:	601d      	str	r5, [r3, #0]
 8017cd4:	dc1d      	bgt.n	8017d12 <_vfiprintf_r+0x86e>
 8017cd6:	605c      	str	r4, [r3, #4]
 8017cd8:	2a07      	cmp	r2, #7
 8017cda:	440c      	add	r4, r1
 8017cdc:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8017ce0:	f77f aec8 	ble.w	8017a74 <_vfiprintf_r+0x5d0>
 8017ce4:	aa0c      	add	r2, sp, #48	; 0x30
 8017ce6:	4639      	mov	r1, r7
 8017ce8:	4648      	mov	r0, r9
 8017cea:	f7ff fba9 	bl	8017440 <__sprint_r>
 8017cee:	2800      	cmp	r0, #0
 8017cf0:	f43f aec0 	beq.w	8017a74 <_vfiprintf_r+0x5d0>
 8017cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017cf6:	07d9      	lsls	r1, r3, #31
 8017cf8:	d405      	bmi.n	8017d06 <_vfiprintf_r+0x862>
 8017cfa:	89bb      	ldrh	r3, [r7, #12]
 8017cfc:	059a      	lsls	r2, r3, #22
 8017cfe:	d402      	bmi.n	8017d06 <_vfiprintf_r+0x862>
 8017d00:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017d02:	f7fc fd32 	bl	801476a <__retarget_lock_release_recursive>
 8017d06:	89bb      	ldrh	r3, [r7, #12]
 8017d08:	065b      	lsls	r3, r3, #25
 8017d0a:	f57f abfe 	bpl.w	801750a <_vfiprintf_r+0x66>
 8017d0e:	f7ff bbf9 	b.w	8017504 <_vfiprintf_r+0x60>
 8017d12:	3110      	adds	r1, #16
 8017d14:	2a07      	cmp	r2, #7
 8017d16:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8017d1a:	605e      	str	r6, [r3, #4]
 8017d1c:	dc02      	bgt.n	8017d24 <_vfiprintf_r+0x880>
 8017d1e:	3308      	adds	r3, #8
 8017d20:	3c10      	subs	r4, #16
 8017d22:	e7d1      	b.n	8017cc8 <_vfiprintf_r+0x824>
 8017d24:	aa0c      	add	r2, sp, #48	; 0x30
 8017d26:	4639      	mov	r1, r7
 8017d28:	4648      	mov	r0, r9
 8017d2a:	f7ff fb89 	bl	8017440 <__sprint_r>
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	d1e0      	bne.n	8017cf4 <_vfiprintf_r+0x850>
 8017d32:	ab0f      	add	r3, sp, #60	; 0x3c
 8017d34:	e7f4      	b.n	8017d20 <_vfiprintf_r+0x87c>
 8017d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d38:	b913      	cbnz	r3, 8017d40 <_vfiprintf_r+0x89c>
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8017d3e:	e7d9      	b.n	8017cf4 <_vfiprintf_r+0x850>
 8017d40:	aa0c      	add	r2, sp, #48	; 0x30
 8017d42:	4639      	mov	r1, r7
 8017d44:	4648      	mov	r0, r9
 8017d46:	f7ff fb7b 	bl	8017440 <__sprint_r>
 8017d4a:	2800      	cmp	r0, #0
 8017d4c:	d0f5      	beq.n	8017d3a <_vfiprintf_r+0x896>
 8017d4e:	e7d1      	b.n	8017cf4 <_vfiprintf_r+0x850>
 8017d50:	ea54 0205 	orrs.w	r2, r4, r5
 8017d54:	f8cd a010 	str.w	sl, [sp, #16]
 8017d58:	f43f ada4 	beq.w	80178a4 <_vfiprintf_r+0x400>
 8017d5c:	2b01      	cmp	r3, #1
 8017d5e:	f43f aed7 	beq.w	8017b10 <_vfiprintf_r+0x66c>
 8017d62:	2b02      	cmp	r3, #2
 8017d64:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8017d68:	f43f af23 	beq.w	8017bb2 <_vfiprintf_r+0x70e>
 8017d6c:	08e2      	lsrs	r2, r4, #3
 8017d6e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8017d72:	08e8      	lsrs	r0, r5, #3
 8017d74:	f004 0307 	and.w	r3, r4, #7
 8017d78:	4605      	mov	r5, r0
 8017d7a:	4614      	mov	r4, r2
 8017d7c:	3330      	adds	r3, #48	; 0x30
 8017d7e:	ea54 0205 	orrs.w	r2, r4, r5
 8017d82:	4641      	mov	r1, r8
 8017d84:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8017d88:	d1f0      	bne.n	8017d6c <_vfiprintf_r+0x8c8>
 8017d8a:	9a04      	ldr	r2, [sp, #16]
 8017d8c:	07d0      	lsls	r0, r2, #31
 8017d8e:	d506      	bpl.n	8017d9e <_vfiprintf_r+0x8fa>
 8017d90:	2b30      	cmp	r3, #48	; 0x30
 8017d92:	d004      	beq.n	8017d9e <_vfiprintf_r+0x8fa>
 8017d94:	2330      	movs	r3, #48	; 0x30
 8017d96:	f808 3c01 	strb.w	r3, [r8, #-1]
 8017d9a:	f1a1 0802 	sub.w	r8, r1, #2
 8017d9e:	ab38      	add	r3, sp, #224	; 0xe0
 8017da0:	eba3 0308 	sub.w	r3, r3, r8
 8017da4:	9d00      	ldr	r5, [sp, #0]
 8017da6:	f8dd a010 	ldr.w	sl, [sp, #16]
 8017daa:	9300      	str	r3, [sp, #0]
 8017dac:	e5b5      	b.n	801791a <_vfiprintf_r+0x476>
 8017dae:	bf00      	nop
 8017db0:	080395d2 	.word	0x080395d2

08017db4 <__sbprintf>:
 8017db4:	b570      	push	{r4, r5, r6, lr}
 8017db6:	460c      	mov	r4, r1
 8017db8:	8989      	ldrh	r1, [r1, #12]
 8017dba:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8017dbe:	f021 0102 	bic.w	r1, r1, #2
 8017dc2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017dc6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8017dc8:	911b      	str	r1, [sp, #108]	; 0x6c
 8017dca:	89e1      	ldrh	r1, [r4, #14]
 8017dcc:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017dd0:	69e1      	ldr	r1, [r4, #28]
 8017dd2:	9109      	str	r1, [sp, #36]	; 0x24
 8017dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017dd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8017dd8:	a91c      	add	r1, sp, #112	; 0x70
 8017dda:	9102      	str	r1, [sp, #8]
 8017ddc:	9106      	str	r1, [sp, #24]
 8017dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017de2:	4606      	mov	r6, r0
 8017de4:	9104      	str	r1, [sp, #16]
 8017de6:	9107      	str	r1, [sp, #28]
 8017de8:	a818      	add	r0, sp, #96	; 0x60
 8017dea:	2100      	movs	r1, #0
 8017dec:	e9cd 3200 	strd	r3, r2, [sp]
 8017df0:	9108      	str	r1, [sp, #32]
 8017df2:	f7fc fcb7 	bl	8014764 <__retarget_lock_init_recursive>
 8017df6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017dfa:	a902      	add	r1, sp, #8
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	f7ff fb51 	bl	80174a4 <_vfiprintf_r>
 8017e02:	1e05      	subs	r5, r0, #0
 8017e04:	db07      	blt.n	8017e16 <__sbprintf+0x62>
 8017e06:	a902      	add	r1, sp, #8
 8017e08:	4630      	mov	r0, r6
 8017e0a:	f000 f90f 	bl	801802c <_fflush_r>
 8017e0e:	2800      	cmp	r0, #0
 8017e10:	bf18      	it	ne
 8017e12:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8017e16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8017e1a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017e1c:	065b      	lsls	r3, r3, #25
 8017e1e:	bf42      	ittt	mi
 8017e20:	89a3      	ldrhmi	r3, [r4, #12]
 8017e22:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8017e26:	81a3      	strhmi	r3, [r4, #12]
 8017e28:	f7fc fc9d 	bl	8014766 <__retarget_lock_close_recursive>
 8017e2c:	4628      	mov	r0, r5
 8017e2e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8017e32:	bd70      	pop	{r4, r5, r6, pc}

08017e34 <__ascii_wctomb>:
 8017e34:	b149      	cbz	r1, 8017e4a <__ascii_wctomb+0x16>
 8017e36:	2aff      	cmp	r2, #255	; 0xff
 8017e38:	bf85      	ittet	hi
 8017e3a:	238a      	movhi	r3, #138	; 0x8a
 8017e3c:	6003      	strhi	r3, [r0, #0]
 8017e3e:	700a      	strbls	r2, [r1, #0]
 8017e40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017e44:	bf98      	it	ls
 8017e46:	2001      	movls	r0, #1
 8017e48:	4770      	bx	lr
 8017e4a:	4608      	mov	r0, r1
 8017e4c:	4770      	bx	lr
	...

08017e50 <__swsetup_r>:
 8017e50:	b538      	push	{r3, r4, r5, lr}
 8017e52:	4b2a      	ldr	r3, [pc, #168]	; (8017efc <__swsetup_r+0xac>)
 8017e54:	4605      	mov	r5, r0
 8017e56:	6818      	ldr	r0, [r3, #0]
 8017e58:	460c      	mov	r4, r1
 8017e5a:	b118      	cbz	r0, 8017e64 <__swsetup_r+0x14>
 8017e5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017e5e:	b90b      	cbnz	r3, 8017e64 <__swsetup_r+0x14>
 8017e60:	f000 f950 	bl	8018104 <__sinit>
 8017e64:	89a3      	ldrh	r3, [r4, #12]
 8017e66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e6a:	0718      	lsls	r0, r3, #28
 8017e6c:	d422      	bmi.n	8017eb4 <__swsetup_r+0x64>
 8017e6e:	06d9      	lsls	r1, r3, #27
 8017e70:	d407      	bmi.n	8017e82 <__swsetup_r+0x32>
 8017e72:	2309      	movs	r3, #9
 8017e74:	602b      	str	r3, [r5, #0]
 8017e76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017e7a:	81a3      	strh	r3, [r4, #12]
 8017e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e80:	e034      	b.n	8017eec <__swsetup_r+0x9c>
 8017e82:	0758      	lsls	r0, r3, #29
 8017e84:	d512      	bpl.n	8017eac <__swsetup_r+0x5c>
 8017e86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017e88:	b141      	cbz	r1, 8017e9c <__swsetup_r+0x4c>
 8017e8a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8017e8e:	4299      	cmp	r1, r3
 8017e90:	d002      	beq.n	8017e98 <__swsetup_r+0x48>
 8017e92:	4628      	mov	r0, r5
 8017e94:	f7fc fba6 	bl	80145e4 <_free_r>
 8017e98:	2300      	movs	r3, #0
 8017e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8017e9c:	89a3      	ldrh	r3, [r4, #12]
 8017e9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017ea2:	81a3      	strh	r3, [r4, #12]
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	6063      	str	r3, [r4, #4]
 8017ea8:	6923      	ldr	r3, [r4, #16]
 8017eaa:	6023      	str	r3, [r4, #0]
 8017eac:	89a3      	ldrh	r3, [r4, #12]
 8017eae:	f043 0308 	orr.w	r3, r3, #8
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	6923      	ldr	r3, [r4, #16]
 8017eb6:	b94b      	cbnz	r3, 8017ecc <__swsetup_r+0x7c>
 8017eb8:	89a3      	ldrh	r3, [r4, #12]
 8017eba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017ec2:	d003      	beq.n	8017ecc <__swsetup_r+0x7c>
 8017ec4:	4621      	mov	r1, r4
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	f000 fb44 	bl	8018554 <__smakebuf_r>
 8017ecc:	89a0      	ldrh	r0, [r4, #12]
 8017ece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ed2:	f010 0301 	ands.w	r3, r0, #1
 8017ed6:	d00a      	beq.n	8017eee <__swsetup_r+0x9e>
 8017ed8:	2300      	movs	r3, #0
 8017eda:	60a3      	str	r3, [r4, #8]
 8017edc:	6963      	ldr	r3, [r4, #20]
 8017ede:	425b      	negs	r3, r3
 8017ee0:	61a3      	str	r3, [r4, #24]
 8017ee2:	6923      	ldr	r3, [r4, #16]
 8017ee4:	b943      	cbnz	r3, 8017ef8 <__swsetup_r+0xa8>
 8017ee6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017eea:	d1c4      	bne.n	8017e76 <__swsetup_r+0x26>
 8017eec:	bd38      	pop	{r3, r4, r5, pc}
 8017eee:	0781      	lsls	r1, r0, #30
 8017ef0:	bf58      	it	pl
 8017ef2:	6963      	ldrpl	r3, [r4, #20]
 8017ef4:	60a3      	str	r3, [r4, #8]
 8017ef6:	e7f4      	b.n	8017ee2 <__swsetup_r+0x92>
 8017ef8:	2000      	movs	r0, #0
 8017efa:	e7f7      	b.n	8017eec <__swsetup_r+0x9c>
 8017efc:	200000b0 	.word	0x200000b0

08017f00 <abort>:
 8017f00:	b508      	push	{r3, lr}
 8017f02:	2006      	movs	r0, #6
 8017f04:	f000 fb90 	bl	8018628 <raise>
 8017f08:	2001      	movs	r0, #1
 8017f0a:	f7f0 f825 	bl	8007f58 <_exit>
	...

08017f10 <__sflush_r>:
 8017f10:	898b      	ldrh	r3, [r1, #12]
 8017f12:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1a:	4605      	mov	r5, r0
 8017f1c:	0718      	lsls	r0, r3, #28
 8017f1e:	460c      	mov	r4, r1
 8017f20:	d45f      	bmi.n	8017fe2 <__sflush_r+0xd2>
 8017f22:	684b      	ldr	r3, [r1, #4]
 8017f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	818a      	strh	r2, [r1, #12]
 8017f2c:	dc05      	bgt.n	8017f3a <__sflush_r+0x2a>
 8017f2e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	dc02      	bgt.n	8017f3a <__sflush_r+0x2a>
 8017f34:	2000      	movs	r0, #0
 8017f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f3c:	2e00      	cmp	r6, #0
 8017f3e:	d0f9      	beq.n	8017f34 <__sflush_r+0x24>
 8017f40:	2300      	movs	r3, #0
 8017f42:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017f46:	682f      	ldr	r7, [r5, #0]
 8017f48:	602b      	str	r3, [r5, #0]
 8017f4a:	d036      	beq.n	8017fba <__sflush_r+0xaa>
 8017f4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017f4e:	89a3      	ldrh	r3, [r4, #12]
 8017f50:	075a      	lsls	r2, r3, #29
 8017f52:	d505      	bpl.n	8017f60 <__sflush_r+0x50>
 8017f54:	6863      	ldr	r3, [r4, #4]
 8017f56:	1ac0      	subs	r0, r0, r3
 8017f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017f5a:	b10b      	cbz	r3, 8017f60 <__sflush_r+0x50>
 8017f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017f5e:	1ac0      	subs	r0, r0, r3
 8017f60:	2300      	movs	r3, #0
 8017f62:	4602      	mov	r2, r0
 8017f64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f66:	69e1      	ldr	r1, [r4, #28]
 8017f68:	4628      	mov	r0, r5
 8017f6a:	47b0      	blx	r6
 8017f6c:	1c43      	adds	r3, r0, #1
 8017f6e:	89a3      	ldrh	r3, [r4, #12]
 8017f70:	d106      	bne.n	8017f80 <__sflush_r+0x70>
 8017f72:	6829      	ldr	r1, [r5, #0]
 8017f74:	291d      	cmp	r1, #29
 8017f76:	d830      	bhi.n	8017fda <__sflush_r+0xca>
 8017f78:	4a2b      	ldr	r2, [pc, #172]	; (8018028 <__sflush_r+0x118>)
 8017f7a:	40ca      	lsrs	r2, r1
 8017f7c:	07d6      	lsls	r6, r2, #31
 8017f7e:	d52c      	bpl.n	8017fda <__sflush_r+0xca>
 8017f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017f84:	b21b      	sxth	r3, r3
 8017f86:	2200      	movs	r2, #0
 8017f88:	6062      	str	r2, [r4, #4]
 8017f8a:	04d9      	lsls	r1, r3, #19
 8017f8c:	6922      	ldr	r2, [r4, #16]
 8017f8e:	81a3      	strh	r3, [r4, #12]
 8017f90:	6022      	str	r2, [r4, #0]
 8017f92:	d504      	bpl.n	8017f9e <__sflush_r+0x8e>
 8017f94:	1c42      	adds	r2, r0, #1
 8017f96:	d101      	bne.n	8017f9c <__sflush_r+0x8c>
 8017f98:	682b      	ldr	r3, [r5, #0]
 8017f9a:	b903      	cbnz	r3, 8017f9e <__sflush_r+0x8e>
 8017f9c:	6520      	str	r0, [r4, #80]	; 0x50
 8017f9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017fa0:	602f      	str	r7, [r5, #0]
 8017fa2:	2900      	cmp	r1, #0
 8017fa4:	d0c6      	beq.n	8017f34 <__sflush_r+0x24>
 8017fa6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8017faa:	4299      	cmp	r1, r3
 8017fac:	d002      	beq.n	8017fb4 <__sflush_r+0xa4>
 8017fae:	4628      	mov	r0, r5
 8017fb0:	f7fc fb18 	bl	80145e4 <_free_r>
 8017fb4:	2000      	movs	r0, #0
 8017fb6:	6320      	str	r0, [r4, #48]	; 0x30
 8017fb8:	e7bd      	b.n	8017f36 <__sflush_r+0x26>
 8017fba:	69e1      	ldr	r1, [r4, #28]
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	47b0      	blx	r6
 8017fc2:	1c41      	adds	r1, r0, #1
 8017fc4:	d1c3      	bne.n	8017f4e <__sflush_r+0x3e>
 8017fc6:	682b      	ldr	r3, [r5, #0]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d0c0      	beq.n	8017f4e <__sflush_r+0x3e>
 8017fcc:	2b1d      	cmp	r3, #29
 8017fce:	d001      	beq.n	8017fd4 <__sflush_r+0xc4>
 8017fd0:	2b16      	cmp	r3, #22
 8017fd2:	d101      	bne.n	8017fd8 <__sflush_r+0xc8>
 8017fd4:	602f      	str	r7, [r5, #0]
 8017fd6:	e7ad      	b.n	8017f34 <__sflush_r+0x24>
 8017fd8:	89a3      	ldrh	r3, [r4, #12]
 8017fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fde:	81a3      	strh	r3, [r4, #12]
 8017fe0:	e7a9      	b.n	8017f36 <__sflush_r+0x26>
 8017fe2:	690f      	ldr	r7, [r1, #16]
 8017fe4:	2f00      	cmp	r7, #0
 8017fe6:	d0a5      	beq.n	8017f34 <__sflush_r+0x24>
 8017fe8:	079b      	lsls	r3, r3, #30
 8017fea:	680e      	ldr	r6, [r1, #0]
 8017fec:	bf08      	it	eq
 8017fee:	694b      	ldreq	r3, [r1, #20]
 8017ff0:	600f      	str	r7, [r1, #0]
 8017ff2:	bf18      	it	ne
 8017ff4:	2300      	movne	r3, #0
 8017ff6:	eba6 0807 	sub.w	r8, r6, r7
 8017ffa:	608b      	str	r3, [r1, #8]
 8017ffc:	f1b8 0f00 	cmp.w	r8, #0
 8018000:	dd98      	ble.n	8017f34 <__sflush_r+0x24>
 8018002:	69e1      	ldr	r1, [r4, #28]
 8018004:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018006:	4643      	mov	r3, r8
 8018008:	463a      	mov	r2, r7
 801800a:	4628      	mov	r0, r5
 801800c:	47b0      	blx	r6
 801800e:	2800      	cmp	r0, #0
 8018010:	dc06      	bgt.n	8018020 <__sflush_r+0x110>
 8018012:	89a3      	ldrh	r3, [r4, #12]
 8018014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018018:	81a3      	strh	r3, [r4, #12]
 801801a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801801e:	e78a      	b.n	8017f36 <__sflush_r+0x26>
 8018020:	4407      	add	r7, r0
 8018022:	eba8 0800 	sub.w	r8, r8, r0
 8018026:	e7e9      	b.n	8017ffc <__sflush_r+0xec>
 8018028:	20400001 	.word	0x20400001

0801802c <_fflush_r>:
 801802c:	b538      	push	{r3, r4, r5, lr}
 801802e:	460c      	mov	r4, r1
 8018030:	4605      	mov	r5, r0
 8018032:	b118      	cbz	r0, 801803c <_fflush_r+0x10>
 8018034:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018036:	b90b      	cbnz	r3, 801803c <_fflush_r+0x10>
 8018038:	f000 f864 	bl	8018104 <__sinit>
 801803c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018040:	b1bb      	cbz	r3, 8018072 <_fflush_r+0x46>
 8018042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018044:	07d0      	lsls	r0, r2, #31
 8018046:	d404      	bmi.n	8018052 <_fflush_r+0x26>
 8018048:	0599      	lsls	r1, r3, #22
 801804a:	d402      	bmi.n	8018052 <_fflush_r+0x26>
 801804c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801804e:	f7fc fb8b 	bl	8014768 <__retarget_lock_acquire_recursive>
 8018052:	4628      	mov	r0, r5
 8018054:	4621      	mov	r1, r4
 8018056:	f7ff ff5b 	bl	8017f10 <__sflush_r>
 801805a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801805c:	07da      	lsls	r2, r3, #31
 801805e:	4605      	mov	r5, r0
 8018060:	d405      	bmi.n	801806e <_fflush_r+0x42>
 8018062:	89a3      	ldrh	r3, [r4, #12]
 8018064:	059b      	lsls	r3, r3, #22
 8018066:	d402      	bmi.n	801806e <_fflush_r+0x42>
 8018068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801806a:	f7fc fb7e 	bl	801476a <__retarget_lock_release_recursive>
 801806e:	4628      	mov	r0, r5
 8018070:	bd38      	pop	{r3, r4, r5, pc}
 8018072:	461d      	mov	r5, r3
 8018074:	e7fb      	b.n	801806e <_fflush_r+0x42>
	...

08018078 <std>:
 8018078:	2300      	movs	r3, #0
 801807a:	b510      	push	{r4, lr}
 801807c:	4604      	mov	r4, r0
 801807e:	e9c0 3300 	strd	r3, r3, [r0]
 8018082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018086:	6083      	str	r3, [r0, #8]
 8018088:	8181      	strh	r1, [r0, #12]
 801808a:	6643      	str	r3, [r0, #100]	; 0x64
 801808c:	81c2      	strh	r2, [r0, #14]
 801808e:	6183      	str	r3, [r0, #24]
 8018090:	4619      	mov	r1, r3
 8018092:	2208      	movs	r2, #8
 8018094:	305c      	adds	r0, #92	; 0x5c
 8018096:	f7fc f94f 	bl	8014338 <memset>
 801809a:	4b07      	ldr	r3, [pc, #28]	; (80180b8 <std+0x40>)
 801809c:	6223      	str	r3, [r4, #32]
 801809e:	4b07      	ldr	r3, [pc, #28]	; (80180bc <std+0x44>)
 80180a0:	6263      	str	r3, [r4, #36]	; 0x24
 80180a2:	4b07      	ldr	r3, [pc, #28]	; (80180c0 <std+0x48>)
 80180a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80180a6:	4b07      	ldr	r3, [pc, #28]	; (80180c4 <std+0x4c>)
 80180a8:	61e4      	str	r4, [r4, #28]
 80180aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80180ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80180b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180b4:	f7fc bb56 	b.w	8014764 <__retarget_lock_init_recursive>
 80180b8:	08018661 	.word	0x08018661
 80180bc:	08018683 	.word	0x08018683
 80180c0:	080186bb 	.word	0x080186bb
 80180c4:	080186df 	.word	0x080186df

080180c8 <_cleanup_r>:
 80180c8:	4901      	ldr	r1, [pc, #4]	; (80180d0 <_cleanup_r+0x8>)
 80180ca:	f000 b9f9 	b.w	80184c0 <_fwalk_reent>
 80180ce:	bf00      	nop
 80180d0:	080187e9 	.word	0x080187e9

080180d4 <__sfp_lock_acquire>:
 80180d4:	4801      	ldr	r0, [pc, #4]	; (80180dc <__sfp_lock_acquire+0x8>)
 80180d6:	f7fc bb47 	b.w	8014768 <__retarget_lock_acquire_recursive>
 80180da:	bf00      	nop
 80180dc:	20018e58 	.word	0x20018e58

080180e0 <__sfp_lock_release>:
 80180e0:	4801      	ldr	r0, [pc, #4]	; (80180e8 <__sfp_lock_release+0x8>)
 80180e2:	f7fc bb42 	b.w	801476a <__retarget_lock_release_recursive>
 80180e6:	bf00      	nop
 80180e8:	20018e58 	.word	0x20018e58

080180ec <__sinit_lock_acquire>:
 80180ec:	4801      	ldr	r0, [pc, #4]	; (80180f4 <__sinit_lock_acquire+0x8>)
 80180ee:	f7fc bb3b 	b.w	8014768 <__retarget_lock_acquire_recursive>
 80180f2:	bf00      	nop
 80180f4:	20018e53 	.word	0x20018e53

080180f8 <__sinit_lock_release>:
 80180f8:	4801      	ldr	r0, [pc, #4]	; (8018100 <__sinit_lock_release+0x8>)
 80180fa:	f7fc bb36 	b.w	801476a <__retarget_lock_release_recursive>
 80180fe:	bf00      	nop
 8018100:	20018e53 	.word	0x20018e53

08018104 <__sinit>:
 8018104:	b510      	push	{r4, lr}
 8018106:	4604      	mov	r4, r0
 8018108:	f7ff fff0 	bl	80180ec <__sinit_lock_acquire>
 801810c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801810e:	b11a      	cbz	r2, 8018118 <__sinit+0x14>
 8018110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018114:	f7ff bff0 	b.w	80180f8 <__sinit_lock_release>
 8018118:	4b0d      	ldr	r3, [pc, #52]	; (8018150 <__sinit+0x4c>)
 801811a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801811c:	2303      	movs	r3, #3
 801811e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8018122:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8018126:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 801812a:	6860      	ldr	r0, [r4, #4]
 801812c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8018130:	2104      	movs	r1, #4
 8018132:	f7ff ffa1 	bl	8018078 <std>
 8018136:	68a0      	ldr	r0, [r4, #8]
 8018138:	2201      	movs	r2, #1
 801813a:	2109      	movs	r1, #9
 801813c:	f7ff ff9c 	bl	8018078 <std>
 8018140:	68e0      	ldr	r0, [r4, #12]
 8018142:	2202      	movs	r2, #2
 8018144:	2112      	movs	r1, #18
 8018146:	f7ff ff97 	bl	8018078 <std>
 801814a:	2301      	movs	r3, #1
 801814c:	63a3      	str	r3, [r4, #56]	; 0x38
 801814e:	e7df      	b.n	8018110 <__sinit+0xc>
 8018150:	080180c9 	.word	0x080180c9

08018154 <__fputwc>:
 8018154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018158:	4680      	mov	r8, r0
 801815a:	460e      	mov	r6, r1
 801815c:	4615      	mov	r5, r2
 801815e:	f7fe ffb1 	bl	80170c4 <__locale_mb_cur_max>
 8018162:	2801      	cmp	r0, #1
 8018164:	d11c      	bne.n	80181a0 <__fputwc+0x4c>
 8018166:	1e73      	subs	r3, r6, #1
 8018168:	2bfe      	cmp	r3, #254	; 0xfe
 801816a:	d819      	bhi.n	80181a0 <__fputwc+0x4c>
 801816c:	f88d 6004 	strb.w	r6, [sp, #4]
 8018170:	4604      	mov	r4, r0
 8018172:	2700      	movs	r7, #0
 8018174:	f10d 0904 	add.w	r9, sp, #4
 8018178:	42a7      	cmp	r7, r4
 801817a:	d020      	beq.n	80181be <__fputwc+0x6a>
 801817c:	68ab      	ldr	r3, [r5, #8]
 801817e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8018182:	3b01      	subs	r3, #1
 8018184:	2b00      	cmp	r3, #0
 8018186:	60ab      	str	r3, [r5, #8]
 8018188:	da04      	bge.n	8018194 <__fputwc+0x40>
 801818a:	69aa      	ldr	r2, [r5, #24]
 801818c:	4293      	cmp	r3, r2
 801818e:	db1a      	blt.n	80181c6 <__fputwc+0x72>
 8018190:	290a      	cmp	r1, #10
 8018192:	d018      	beq.n	80181c6 <__fputwc+0x72>
 8018194:	682b      	ldr	r3, [r5, #0]
 8018196:	1c5a      	adds	r2, r3, #1
 8018198:	602a      	str	r2, [r5, #0]
 801819a:	7019      	strb	r1, [r3, #0]
 801819c:	3701      	adds	r7, #1
 801819e:	e7eb      	b.n	8018178 <__fputwc+0x24>
 80181a0:	4632      	mov	r2, r6
 80181a2:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80181a6:	a901      	add	r1, sp, #4
 80181a8:	4640      	mov	r0, r8
 80181aa:	f000 fae5 	bl	8018778 <_wcrtomb_r>
 80181ae:	1c42      	adds	r2, r0, #1
 80181b0:	4604      	mov	r4, r0
 80181b2:	d1de      	bne.n	8018172 <__fputwc+0x1e>
 80181b4:	89ab      	ldrh	r3, [r5, #12]
 80181b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181ba:	81ab      	strh	r3, [r5, #12]
 80181bc:	4606      	mov	r6, r0
 80181be:	4630      	mov	r0, r6
 80181c0:	b003      	add	sp, #12
 80181c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181c6:	462a      	mov	r2, r5
 80181c8:	4640      	mov	r0, r8
 80181ca:	f000 fa8c 	bl	80186e6 <__swbuf_r>
 80181ce:	1c43      	adds	r3, r0, #1
 80181d0:	d1e4      	bne.n	801819c <__fputwc+0x48>
 80181d2:	4606      	mov	r6, r0
 80181d4:	e7f3      	b.n	80181be <__fputwc+0x6a>

080181d6 <_fputwc_r>:
 80181d6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80181d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80181da:	4614      	mov	r4, r2
 80181dc:	07da      	lsls	r2, r3, #31
 80181de:	4605      	mov	r5, r0
 80181e0:	d407      	bmi.n	80181f2 <_fputwc_r+0x1c>
 80181e2:	89a3      	ldrh	r3, [r4, #12]
 80181e4:	059b      	lsls	r3, r3, #22
 80181e6:	d404      	bmi.n	80181f2 <_fputwc_r+0x1c>
 80181e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80181ea:	9101      	str	r1, [sp, #4]
 80181ec:	f7fc fabc 	bl	8014768 <__retarget_lock_acquire_recursive>
 80181f0:	9901      	ldr	r1, [sp, #4]
 80181f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181f6:	0498      	lsls	r0, r3, #18
 80181f8:	d406      	bmi.n	8018208 <_fputwc_r+0x32>
 80181fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80181fe:	81a3      	strh	r3, [r4, #12]
 8018200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018206:	6663      	str	r3, [r4, #100]	; 0x64
 8018208:	4622      	mov	r2, r4
 801820a:	4628      	mov	r0, r5
 801820c:	f7ff ffa2 	bl	8018154 <__fputwc>
 8018210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018212:	07da      	lsls	r2, r3, #31
 8018214:	4605      	mov	r5, r0
 8018216:	d405      	bmi.n	8018224 <_fputwc_r+0x4e>
 8018218:	89a3      	ldrh	r3, [r4, #12]
 801821a:	059b      	lsls	r3, r3, #22
 801821c:	d402      	bmi.n	8018224 <_fputwc_r+0x4e>
 801821e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018220:	f7fc faa3 	bl	801476a <__retarget_lock_release_recursive>
 8018224:	4628      	mov	r0, r5
 8018226:	b003      	add	sp, #12
 8018228:	bd30      	pop	{r4, r5, pc}
	...

0801822c <__sfvwrite_r>:
 801822c:	6893      	ldr	r3, [r2, #8]
 801822e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018232:	4606      	mov	r6, r0
 8018234:	460c      	mov	r4, r1
 8018236:	4690      	mov	r8, r2
 8018238:	b91b      	cbnz	r3, 8018242 <__sfvwrite_r+0x16>
 801823a:	2000      	movs	r0, #0
 801823c:	b003      	add	sp, #12
 801823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018242:	898b      	ldrh	r3, [r1, #12]
 8018244:	0718      	lsls	r0, r3, #28
 8018246:	d550      	bpl.n	80182ea <__sfvwrite_r+0xbe>
 8018248:	690b      	ldr	r3, [r1, #16]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d04d      	beq.n	80182ea <__sfvwrite_r+0xbe>
 801824e:	89a3      	ldrh	r3, [r4, #12]
 8018250:	f8d8 7000 	ldr.w	r7, [r8]
 8018254:	f013 0902 	ands.w	r9, r3, #2
 8018258:	d16c      	bne.n	8018334 <__sfvwrite_r+0x108>
 801825a:	f013 0301 	ands.w	r3, r3, #1
 801825e:	f000 809c 	beq.w	801839a <__sfvwrite_r+0x16e>
 8018262:	4648      	mov	r0, r9
 8018264:	46ca      	mov	sl, r9
 8018266:	46cb      	mov	fp, r9
 8018268:	f1bb 0f00 	cmp.w	fp, #0
 801826c:	f000 8103 	beq.w	8018476 <__sfvwrite_r+0x24a>
 8018270:	b950      	cbnz	r0, 8018288 <__sfvwrite_r+0x5c>
 8018272:	465a      	mov	r2, fp
 8018274:	210a      	movs	r1, #10
 8018276:	4650      	mov	r0, sl
 8018278:	f7e7 ffca 	bl	8000210 <memchr>
 801827c:	2800      	cmp	r0, #0
 801827e:	f000 80ff 	beq.w	8018480 <__sfvwrite_r+0x254>
 8018282:	3001      	adds	r0, #1
 8018284:	eba0 090a 	sub.w	r9, r0, sl
 8018288:	6820      	ldr	r0, [r4, #0]
 801828a:	6921      	ldr	r1, [r4, #16]
 801828c:	6963      	ldr	r3, [r4, #20]
 801828e:	45d9      	cmp	r9, fp
 8018290:	464a      	mov	r2, r9
 8018292:	bf28      	it	cs
 8018294:	465a      	movcs	r2, fp
 8018296:	4288      	cmp	r0, r1
 8018298:	f240 80f5 	bls.w	8018486 <__sfvwrite_r+0x25a>
 801829c:	68a5      	ldr	r5, [r4, #8]
 801829e:	441d      	add	r5, r3
 80182a0:	42aa      	cmp	r2, r5
 80182a2:	f340 80f0 	ble.w	8018486 <__sfvwrite_r+0x25a>
 80182a6:	4651      	mov	r1, sl
 80182a8:	462a      	mov	r2, r5
 80182aa:	f7fc f82b 	bl	8014304 <memmove>
 80182ae:	6823      	ldr	r3, [r4, #0]
 80182b0:	442b      	add	r3, r5
 80182b2:	6023      	str	r3, [r4, #0]
 80182b4:	4621      	mov	r1, r4
 80182b6:	4630      	mov	r0, r6
 80182b8:	f7ff feb8 	bl	801802c <_fflush_r>
 80182bc:	2800      	cmp	r0, #0
 80182be:	d167      	bne.n	8018390 <__sfvwrite_r+0x164>
 80182c0:	ebb9 0905 	subs.w	r9, r9, r5
 80182c4:	f040 80f7 	bne.w	80184b6 <__sfvwrite_r+0x28a>
 80182c8:	4621      	mov	r1, r4
 80182ca:	4630      	mov	r0, r6
 80182cc:	f7ff feae 	bl	801802c <_fflush_r>
 80182d0:	2800      	cmp	r0, #0
 80182d2:	d15d      	bne.n	8018390 <__sfvwrite_r+0x164>
 80182d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80182d8:	44aa      	add	sl, r5
 80182da:	ebab 0b05 	sub.w	fp, fp, r5
 80182de:	1b55      	subs	r5, r2, r5
 80182e0:	f8c8 5008 	str.w	r5, [r8, #8]
 80182e4:	2d00      	cmp	r5, #0
 80182e6:	d1bf      	bne.n	8018268 <__sfvwrite_r+0x3c>
 80182e8:	e7a7      	b.n	801823a <__sfvwrite_r+0xe>
 80182ea:	4621      	mov	r1, r4
 80182ec:	4630      	mov	r0, r6
 80182ee:	f7ff fdaf 	bl	8017e50 <__swsetup_r>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	d0ab      	beq.n	801824e <__sfvwrite_r+0x22>
 80182f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182fa:	e79f      	b.n	801823c <__sfvwrite_r+0x10>
 80182fc:	e9d7 b900 	ldrd	fp, r9, [r7]
 8018300:	3708      	adds	r7, #8
 8018302:	f1b9 0f00 	cmp.w	r9, #0
 8018306:	d0f9      	beq.n	80182fc <__sfvwrite_r+0xd0>
 8018308:	45d1      	cmp	r9, sl
 801830a:	464b      	mov	r3, r9
 801830c:	69e1      	ldr	r1, [r4, #28]
 801830e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018310:	bf28      	it	cs
 8018312:	4653      	movcs	r3, sl
 8018314:	465a      	mov	r2, fp
 8018316:	4630      	mov	r0, r6
 8018318:	47a8      	blx	r5
 801831a:	2800      	cmp	r0, #0
 801831c:	dd38      	ble.n	8018390 <__sfvwrite_r+0x164>
 801831e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018322:	4483      	add	fp, r0
 8018324:	eba9 0900 	sub.w	r9, r9, r0
 8018328:	1a18      	subs	r0, r3, r0
 801832a:	f8c8 0008 	str.w	r0, [r8, #8]
 801832e:	2800      	cmp	r0, #0
 8018330:	d1e7      	bne.n	8018302 <__sfvwrite_r+0xd6>
 8018332:	e782      	b.n	801823a <__sfvwrite_r+0xe>
 8018334:	f04f 0b00 	mov.w	fp, #0
 8018338:	f8df a180 	ldr.w	sl, [pc, #384]	; 80184bc <__sfvwrite_r+0x290>
 801833c:	46d9      	mov	r9, fp
 801833e:	e7e0      	b.n	8018302 <__sfvwrite_r+0xd6>
 8018340:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8018344:	3708      	adds	r7, #8
 8018346:	f1ba 0f00 	cmp.w	sl, #0
 801834a:	d0f9      	beq.n	8018340 <__sfvwrite_r+0x114>
 801834c:	89a3      	ldrh	r3, [r4, #12]
 801834e:	68a2      	ldr	r2, [r4, #8]
 8018350:	6820      	ldr	r0, [r4, #0]
 8018352:	0599      	lsls	r1, r3, #22
 8018354:	d563      	bpl.n	801841e <__sfvwrite_r+0x1f2>
 8018356:	4552      	cmp	r2, sl
 8018358:	d836      	bhi.n	80183c8 <__sfvwrite_r+0x19c>
 801835a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 801835e:	d033      	beq.n	80183c8 <__sfvwrite_r+0x19c>
 8018360:	6921      	ldr	r1, [r4, #16]
 8018362:	6965      	ldr	r5, [r4, #20]
 8018364:	eba0 0b01 	sub.w	fp, r0, r1
 8018368:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801836c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018370:	f10b 0201 	add.w	r2, fp, #1
 8018374:	106d      	asrs	r5, r5, #1
 8018376:	4452      	add	r2, sl
 8018378:	4295      	cmp	r5, r2
 801837a:	bf38      	it	cc
 801837c:	4615      	movcc	r5, r2
 801837e:	055b      	lsls	r3, r3, #21
 8018380:	d53d      	bpl.n	80183fe <__sfvwrite_r+0x1d2>
 8018382:	4629      	mov	r1, r5
 8018384:	4630      	mov	r0, r6
 8018386:	f7fb fd5f 	bl	8013e48 <_malloc_r>
 801838a:	b948      	cbnz	r0, 80183a0 <__sfvwrite_r+0x174>
 801838c:	230c      	movs	r3, #12
 801838e:	6033      	str	r3, [r6, #0]
 8018390:	89a3      	ldrh	r3, [r4, #12]
 8018392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018396:	81a3      	strh	r3, [r4, #12]
 8018398:	e7ad      	b.n	80182f6 <__sfvwrite_r+0xca>
 801839a:	4699      	mov	r9, r3
 801839c:	469a      	mov	sl, r3
 801839e:	e7d2      	b.n	8018346 <__sfvwrite_r+0x11a>
 80183a0:	465a      	mov	r2, fp
 80183a2:	6921      	ldr	r1, [r4, #16]
 80183a4:	9001      	str	r0, [sp, #4]
 80183a6:	f7fb ff9f 	bl	80142e8 <memcpy>
 80183aa:	89a2      	ldrh	r2, [r4, #12]
 80183ac:	9b01      	ldr	r3, [sp, #4]
 80183ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80183b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80183b6:	81a2      	strh	r2, [r4, #12]
 80183b8:	6123      	str	r3, [r4, #16]
 80183ba:	6165      	str	r5, [r4, #20]
 80183bc:	445b      	add	r3, fp
 80183be:	eba5 050b 	sub.w	r5, r5, fp
 80183c2:	6023      	str	r3, [r4, #0]
 80183c4:	4652      	mov	r2, sl
 80183c6:	60a5      	str	r5, [r4, #8]
 80183c8:	4552      	cmp	r2, sl
 80183ca:	bf28      	it	cs
 80183cc:	4652      	movcs	r2, sl
 80183ce:	6820      	ldr	r0, [r4, #0]
 80183d0:	9201      	str	r2, [sp, #4]
 80183d2:	4649      	mov	r1, r9
 80183d4:	f7fb ff96 	bl	8014304 <memmove>
 80183d8:	68a3      	ldr	r3, [r4, #8]
 80183da:	9a01      	ldr	r2, [sp, #4]
 80183dc:	1a9b      	subs	r3, r3, r2
 80183de:	60a3      	str	r3, [r4, #8]
 80183e0:	6823      	ldr	r3, [r4, #0]
 80183e2:	441a      	add	r2, r3
 80183e4:	4655      	mov	r5, sl
 80183e6:	6022      	str	r2, [r4, #0]
 80183e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80183ec:	44a9      	add	r9, r5
 80183ee:	ebaa 0a05 	sub.w	sl, sl, r5
 80183f2:	1b45      	subs	r5, r0, r5
 80183f4:	f8c8 5008 	str.w	r5, [r8, #8]
 80183f8:	2d00      	cmp	r5, #0
 80183fa:	d1a4      	bne.n	8018346 <__sfvwrite_r+0x11a>
 80183fc:	e71d      	b.n	801823a <__sfvwrite_r+0xe>
 80183fe:	462a      	mov	r2, r5
 8018400:	4630      	mov	r0, r6
 8018402:	f7fe fe77 	bl	80170f4 <_realloc_r>
 8018406:	4603      	mov	r3, r0
 8018408:	2800      	cmp	r0, #0
 801840a:	d1d5      	bne.n	80183b8 <__sfvwrite_r+0x18c>
 801840c:	6921      	ldr	r1, [r4, #16]
 801840e:	4630      	mov	r0, r6
 8018410:	f7fc f8e8 	bl	80145e4 <_free_r>
 8018414:	89a3      	ldrh	r3, [r4, #12]
 8018416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801841a:	81a3      	strh	r3, [r4, #12]
 801841c:	e7b6      	b.n	801838c <__sfvwrite_r+0x160>
 801841e:	6923      	ldr	r3, [r4, #16]
 8018420:	4283      	cmp	r3, r0
 8018422:	d302      	bcc.n	801842a <__sfvwrite_r+0x1fe>
 8018424:	6961      	ldr	r1, [r4, #20]
 8018426:	4551      	cmp	r1, sl
 8018428:	d915      	bls.n	8018456 <__sfvwrite_r+0x22a>
 801842a:	4552      	cmp	r2, sl
 801842c:	bf28      	it	cs
 801842e:	4652      	movcs	r2, sl
 8018430:	4649      	mov	r1, r9
 8018432:	4615      	mov	r5, r2
 8018434:	f7fb ff66 	bl	8014304 <memmove>
 8018438:	68a3      	ldr	r3, [r4, #8]
 801843a:	6822      	ldr	r2, [r4, #0]
 801843c:	1b5b      	subs	r3, r3, r5
 801843e:	442a      	add	r2, r5
 8018440:	60a3      	str	r3, [r4, #8]
 8018442:	6022      	str	r2, [r4, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d1cf      	bne.n	80183e8 <__sfvwrite_r+0x1bc>
 8018448:	4621      	mov	r1, r4
 801844a:	4630      	mov	r0, r6
 801844c:	f7ff fdee 	bl	801802c <_fflush_r>
 8018450:	2800      	cmp	r0, #0
 8018452:	d0c9      	beq.n	80183e8 <__sfvwrite_r+0x1bc>
 8018454:	e79c      	b.n	8018390 <__sfvwrite_r+0x164>
 8018456:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801845a:	459a      	cmp	sl, r3
 801845c:	bf38      	it	cc
 801845e:	4653      	movcc	r3, sl
 8018460:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018462:	fb93 f3f1 	sdiv	r3, r3, r1
 8018466:	464a      	mov	r2, r9
 8018468:	434b      	muls	r3, r1
 801846a:	4630      	mov	r0, r6
 801846c:	69e1      	ldr	r1, [r4, #28]
 801846e:	47a8      	blx	r5
 8018470:	1e05      	subs	r5, r0, #0
 8018472:	dcb9      	bgt.n	80183e8 <__sfvwrite_r+0x1bc>
 8018474:	e78c      	b.n	8018390 <__sfvwrite_r+0x164>
 8018476:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801847a:	2000      	movs	r0, #0
 801847c:	3708      	adds	r7, #8
 801847e:	e6f3      	b.n	8018268 <__sfvwrite_r+0x3c>
 8018480:	f10b 0901 	add.w	r9, fp, #1
 8018484:	e700      	b.n	8018288 <__sfvwrite_r+0x5c>
 8018486:	4293      	cmp	r3, r2
 8018488:	dc08      	bgt.n	801849c <__sfvwrite_r+0x270>
 801848a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801848c:	69e1      	ldr	r1, [r4, #28]
 801848e:	4652      	mov	r2, sl
 8018490:	4630      	mov	r0, r6
 8018492:	47a8      	blx	r5
 8018494:	1e05      	subs	r5, r0, #0
 8018496:	f73f af13 	bgt.w	80182c0 <__sfvwrite_r+0x94>
 801849a:	e779      	b.n	8018390 <__sfvwrite_r+0x164>
 801849c:	4651      	mov	r1, sl
 801849e:	9201      	str	r2, [sp, #4]
 80184a0:	f7fb ff30 	bl	8014304 <memmove>
 80184a4:	9a01      	ldr	r2, [sp, #4]
 80184a6:	68a3      	ldr	r3, [r4, #8]
 80184a8:	1a9b      	subs	r3, r3, r2
 80184aa:	60a3      	str	r3, [r4, #8]
 80184ac:	6823      	ldr	r3, [r4, #0]
 80184ae:	4413      	add	r3, r2
 80184b0:	6023      	str	r3, [r4, #0]
 80184b2:	4615      	mov	r5, r2
 80184b4:	e704      	b.n	80182c0 <__sfvwrite_r+0x94>
 80184b6:	2001      	movs	r0, #1
 80184b8:	e70c      	b.n	80182d4 <__sfvwrite_r+0xa8>
 80184ba:	bf00      	nop
 80184bc:	7ffffc00 	.word	0x7ffffc00

080184c0 <_fwalk_reent>:
 80184c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184c4:	4606      	mov	r6, r0
 80184c6:	4688      	mov	r8, r1
 80184c8:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 80184cc:	2700      	movs	r7, #0
 80184ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80184d2:	f1b9 0901 	subs.w	r9, r9, #1
 80184d6:	d505      	bpl.n	80184e4 <_fwalk_reent+0x24>
 80184d8:	6824      	ldr	r4, [r4, #0]
 80184da:	2c00      	cmp	r4, #0
 80184dc:	d1f7      	bne.n	80184ce <_fwalk_reent+0xe>
 80184de:	4638      	mov	r0, r7
 80184e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184e4:	89ab      	ldrh	r3, [r5, #12]
 80184e6:	2b01      	cmp	r3, #1
 80184e8:	d907      	bls.n	80184fa <_fwalk_reent+0x3a>
 80184ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184ee:	3301      	adds	r3, #1
 80184f0:	d003      	beq.n	80184fa <_fwalk_reent+0x3a>
 80184f2:	4629      	mov	r1, r5
 80184f4:	4630      	mov	r0, r6
 80184f6:	47c0      	blx	r8
 80184f8:	4307      	orrs	r7, r0
 80184fa:	3568      	adds	r5, #104	; 0x68
 80184fc:	e7e9      	b.n	80184d2 <_fwalk_reent+0x12>

080184fe <__swhatbuf_r>:
 80184fe:	b570      	push	{r4, r5, r6, lr}
 8018500:	460e      	mov	r6, r1
 8018502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018506:	2900      	cmp	r1, #0
 8018508:	b096      	sub	sp, #88	; 0x58
 801850a:	4614      	mov	r4, r2
 801850c:	461d      	mov	r5, r3
 801850e:	da09      	bge.n	8018524 <__swhatbuf_r+0x26>
 8018510:	89b3      	ldrh	r3, [r6, #12]
 8018512:	2200      	movs	r2, #0
 8018514:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018518:	602a      	str	r2, [r5, #0]
 801851a:	d116      	bne.n	801854a <__swhatbuf_r+0x4c>
 801851c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018520:	6023      	str	r3, [r4, #0]
 8018522:	e015      	b.n	8018550 <__swhatbuf_r+0x52>
 8018524:	466a      	mov	r2, sp
 8018526:	f000 f9b7 	bl	8018898 <_fstat_r>
 801852a:	2800      	cmp	r0, #0
 801852c:	dbf0      	blt.n	8018510 <__swhatbuf_r+0x12>
 801852e:	9a01      	ldr	r2, [sp, #4]
 8018530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018538:	425a      	negs	r2, r3
 801853a:	415a      	adcs	r2, r3
 801853c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018540:	602a      	str	r2, [r5, #0]
 8018542:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8018546:	6023      	str	r3, [r4, #0]
 8018548:	e002      	b.n	8018550 <__swhatbuf_r+0x52>
 801854a:	2340      	movs	r3, #64	; 0x40
 801854c:	6023      	str	r3, [r4, #0]
 801854e:	4610      	mov	r0, r2
 8018550:	b016      	add	sp, #88	; 0x58
 8018552:	bd70      	pop	{r4, r5, r6, pc}

08018554 <__smakebuf_r>:
 8018554:	898b      	ldrh	r3, [r1, #12]
 8018556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018558:	079d      	lsls	r5, r3, #30
 801855a:	4606      	mov	r6, r0
 801855c:	460c      	mov	r4, r1
 801855e:	d507      	bpl.n	8018570 <__smakebuf_r+0x1c>
 8018560:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8018564:	6023      	str	r3, [r4, #0]
 8018566:	6123      	str	r3, [r4, #16]
 8018568:	2301      	movs	r3, #1
 801856a:	6163      	str	r3, [r4, #20]
 801856c:	b002      	add	sp, #8
 801856e:	bd70      	pop	{r4, r5, r6, pc}
 8018570:	ab01      	add	r3, sp, #4
 8018572:	466a      	mov	r2, sp
 8018574:	f7ff ffc3 	bl	80184fe <__swhatbuf_r>
 8018578:	9900      	ldr	r1, [sp, #0]
 801857a:	4605      	mov	r5, r0
 801857c:	4630      	mov	r0, r6
 801857e:	f7fb fc63 	bl	8013e48 <_malloc_r>
 8018582:	b948      	cbnz	r0, 8018598 <__smakebuf_r+0x44>
 8018584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018588:	059a      	lsls	r2, r3, #22
 801858a:	d4ef      	bmi.n	801856c <__smakebuf_r+0x18>
 801858c:	f023 0303 	bic.w	r3, r3, #3
 8018590:	f043 0302 	orr.w	r3, r3, #2
 8018594:	81a3      	strh	r3, [r4, #12]
 8018596:	e7e3      	b.n	8018560 <__smakebuf_r+0xc>
 8018598:	4b0d      	ldr	r3, [pc, #52]	; (80185d0 <__smakebuf_r+0x7c>)
 801859a:	63f3      	str	r3, [r6, #60]	; 0x3c
 801859c:	89a3      	ldrh	r3, [r4, #12]
 801859e:	6020      	str	r0, [r4, #0]
 80185a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185a4:	81a3      	strh	r3, [r4, #12]
 80185a6:	9b00      	ldr	r3, [sp, #0]
 80185a8:	6163      	str	r3, [r4, #20]
 80185aa:	9b01      	ldr	r3, [sp, #4]
 80185ac:	6120      	str	r0, [r4, #16]
 80185ae:	b15b      	cbz	r3, 80185c8 <__smakebuf_r+0x74>
 80185b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185b4:	4630      	mov	r0, r6
 80185b6:	f000 f981 	bl	80188bc <_isatty_r>
 80185ba:	b128      	cbz	r0, 80185c8 <__smakebuf_r+0x74>
 80185bc:	89a3      	ldrh	r3, [r4, #12]
 80185be:	f023 0303 	bic.w	r3, r3, #3
 80185c2:	f043 0301 	orr.w	r3, r3, #1
 80185c6:	81a3      	strh	r3, [r4, #12]
 80185c8:	89a0      	ldrh	r0, [r4, #12]
 80185ca:	4305      	orrs	r5, r0
 80185cc:	81a5      	strh	r5, [r4, #12]
 80185ce:	e7cd      	b.n	801856c <__smakebuf_r+0x18>
 80185d0:	080180c9 	.word	0x080180c9

080185d4 <_raise_r>:
 80185d4:	291f      	cmp	r1, #31
 80185d6:	b538      	push	{r3, r4, r5, lr}
 80185d8:	4604      	mov	r4, r0
 80185da:	460d      	mov	r5, r1
 80185dc:	d904      	bls.n	80185e8 <_raise_r+0x14>
 80185de:	2316      	movs	r3, #22
 80185e0:	6003      	str	r3, [r0, #0]
 80185e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185e6:	bd38      	pop	{r3, r4, r5, pc}
 80185e8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 80185ec:	b112      	cbz	r2, 80185f4 <_raise_r+0x20>
 80185ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80185f2:	b94b      	cbnz	r3, 8018608 <_raise_r+0x34>
 80185f4:	4620      	mov	r0, r4
 80185f6:	f000 f831 	bl	801865c <_getpid_r>
 80185fa:	462a      	mov	r2, r5
 80185fc:	4601      	mov	r1, r0
 80185fe:	4620      	mov	r0, r4
 8018600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018604:	f000 b818 	b.w	8018638 <_kill_r>
 8018608:	2b01      	cmp	r3, #1
 801860a:	d00a      	beq.n	8018622 <_raise_r+0x4e>
 801860c:	1c59      	adds	r1, r3, #1
 801860e:	d103      	bne.n	8018618 <_raise_r+0x44>
 8018610:	2316      	movs	r3, #22
 8018612:	6003      	str	r3, [r0, #0]
 8018614:	2001      	movs	r0, #1
 8018616:	e7e6      	b.n	80185e6 <_raise_r+0x12>
 8018618:	2400      	movs	r4, #0
 801861a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801861e:	4628      	mov	r0, r5
 8018620:	4798      	blx	r3
 8018622:	2000      	movs	r0, #0
 8018624:	e7df      	b.n	80185e6 <_raise_r+0x12>
	...

08018628 <raise>:
 8018628:	4b02      	ldr	r3, [pc, #8]	; (8018634 <raise+0xc>)
 801862a:	4601      	mov	r1, r0
 801862c:	6818      	ldr	r0, [r3, #0]
 801862e:	f7ff bfd1 	b.w	80185d4 <_raise_r>
 8018632:	bf00      	nop
 8018634:	200000b0 	.word	0x200000b0

08018638 <_kill_r>:
 8018638:	b538      	push	{r3, r4, r5, lr}
 801863a:	4d07      	ldr	r5, [pc, #28]	; (8018658 <_kill_r+0x20>)
 801863c:	2300      	movs	r3, #0
 801863e:	4604      	mov	r4, r0
 8018640:	4608      	mov	r0, r1
 8018642:	4611      	mov	r1, r2
 8018644:	602b      	str	r3, [r5, #0]
 8018646:	f7ef fc7f 	bl	8007f48 <_kill>
 801864a:	1c43      	adds	r3, r0, #1
 801864c:	d102      	bne.n	8018654 <_kill_r+0x1c>
 801864e:	682b      	ldr	r3, [r5, #0]
 8018650:	b103      	cbz	r3, 8018654 <_kill_r+0x1c>
 8018652:	6023      	str	r3, [r4, #0]
 8018654:	bd38      	pop	{r3, r4, r5, pc}
 8018656:	bf00      	nop
 8018658:	20018e4c 	.word	0x20018e4c

0801865c <_getpid_r>:
 801865c:	f7ef bc72 	b.w	8007f44 <_getpid>

08018660 <__sread>:
 8018660:	b510      	push	{r4, lr}
 8018662:	460c      	mov	r4, r1
 8018664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018668:	f000 f94a 	bl	8018900 <_read_r>
 801866c:	2800      	cmp	r0, #0
 801866e:	bfab      	itete	ge
 8018670:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8018672:	89a3      	ldrhlt	r3, [r4, #12]
 8018674:	181b      	addge	r3, r3, r0
 8018676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801867a:	bfac      	ite	ge
 801867c:	6523      	strge	r3, [r4, #80]	; 0x50
 801867e:	81a3      	strhlt	r3, [r4, #12]
 8018680:	bd10      	pop	{r4, pc}

08018682 <__swrite>:
 8018682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018686:	461f      	mov	r7, r3
 8018688:	898b      	ldrh	r3, [r1, #12]
 801868a:	05db      	lsls	r3, r3, #23
 801868c:	4605      	mov	r5, r0
 801868e:	460c      	mov	r4, r1
 8018690:	4616      	mov	r6, r2
 8018692:	d505      	bpl.n	80186a0 <__swrite+0x1e>
 8018694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018698:	2302      	movs	r3, #2
 801869a:	2200      	movs	r2, #0
 801869c:	f000 f91e 	bl	80188dc <_lseek_r>
 80186a0:	89a3      	ldrh	r3, [r4, #12]
 80186a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80186a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80186aa:	81a3      	strh	r3, [r4, #12]
 80186ac:	4632      	mov	r2, r6
 80186ae:	463b      	mov	r3, r7
 80186b0:	4628      	mov	r0, r5
 80186b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186b6:	f000 b875 	b.w	80187a4 <_write_r>

080186ba <__sseek>:
 80186ba:	b510      	push	{r4, lr}
 80186bc:	460c      	mov	r4, r1
 80186be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186c2:	f000 f90b 	bl	80188dc <_lseek_r>
 80186c6:	1c43      	adds	r3, r0, #1
 80186c8:	89a3      	ldrh	r3, [r4, #12]
 80186ca:	bf15      	itete	ne
 80186cc:	6520      	strne	r0, [r4, #80]	; 0x50
 80186ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80186d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80186d6:	81a3      	strheq	r3, [r4, #12]
 80186d8:	bf18      	it	ne
 80186da:	81a3      	strhne	r3, [r4, #12]
 80186dc:	bd10      	pop	{r4, pc}

080186de <__sclose>:
 80186de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186e2:	f000 b871 	b.w	80187c8 <_close_r>

080186e6 <__swbuf_r>:
 80186e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186e8:	460e      	mov	r6, r1
 80186ea:	4614      	mov	r4, r2
 80186ec:	4605      	mov	r5, r0
 80186ee:	b118      	cbz	r0, 80186f8 <__swbuf_r+0x12>
 80186f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80186f2:	b90b      	cbnz	r3, 80186f8 <__swbuf_r+0x12>
 80186f4:	f7ff fd06 	bl	8018104 <__sinit>
 80186f8:	69a3      	ldr	r3, [r4, #24]
 80186fa:	60a3      	str	r3, [r4, #8]
 80186fc:	89a3      	ldrh	r3, [r4, #12]
 80186fe:	0719      	lsls	r1, r3, #28
 8018700:	d529      	bpl.n	8018756 <__swbuf_r+0x70>
 8018702:	6923      	ldr	r3, [r4, #16]
 8018704:	b33b      	cbz	r3, 8018756 <__swbuf_r+0x70>
 8018706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801870a:	b2f6      	uxtb	r6, r6
 801870c:	049a      	lsls	r2, r3, #18
 801870e:	4637      	mov	r7, r6
 8018710:	d52a      	bpl.n	8018768 <__swbuf_r+0x82>
 8018712:	6823      	ldr	r3, [r4, #0]
 8018714:	6920      	ldr	r0, [r4, #16]
 8018716:	1a18      	subs	r0, r3, r0
 8018718:	6963      	ldr	r3, [r4, #20]
 801871a:	4283      	cmp	r3, r0
 801871c:	dc04      	bgt.n	8018728 <__swbuf_r+0x42>
 801871e:	4621      	mov	r1, r4
 8018720:	4628      	mov	r0, r5
 8018722:	f7ff fc83 	bl	801802c <_fflush_r>
 8018726:	b9e0      	cbnz	r0, 8018762 <__swbuf_r+0x7c>
 8018728:	68a3      	ldr	r3, [r4, #8]
 801872a:	3b01      	subs	r3, #1
 801872c:	60a3      	str	r3, [r4, #8]
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	1c5a      	adds	r2, r3, #1
 8018732:	6022      	str	r2, [r4, #0]
 8018734:	701e      	strb	r6, [r3, #0]
 8018736:	6962      	ldr	r2, [r4, #20]
 8018738:	1c43      	adds	r3, r0, #1
 801873a:	429a      	cmp	r2, r3
 801873c:	d004      	beq.n	8018748 <__swbuf_r+0x62>
 801873e:	89a3      	ldrh	r3, [r4, #12]
 8018740:	07db      	lsls	r3, r3, #31
 8018742:	d506      	bpl.n	8018752 <__swbuf_r+0x6c>
 8018744:	2e0a      	cmp	r6, #10
 8018746:	d104      	bne.n	8018752 <__swbuf_r+0x6c>
 8018748:	4621      	mov	r1, r4
 801874a:	4628      	mov	r0, r5
 801874c:	f7ff fc6e 	bl	801802c <_fflush_r>
 8018750:	b938      	cbnz	r0, 8018762 <__swbuf_r+0x7c>
 8018752:	4638      	mov	r0, r7
 8018754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018756:	4621      	mov	r1, r4
 8018758:	4628      	mov	r0, r5
 801875a:	f7ff fb79 	bl	8017e50 <__swsetup_r>
 801875e:	2800      	cmp	r0, #0
 8018760:	d0d1      	beq.n	8018706 <__swbuf_r+0x20>
 8018762:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018766:	e7f4      	b.n	8018752 <__swbuf_r+0x6c>
 8018768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801876c:	81a3      	strh	r3, [r4, #12]
 801876e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8018774:	6663      	str	r3, [r4, #100]	; 0x64
 8018776:	e7cc      	b.n	8018712 <__swbuf_r+0x2c>

08018778 <_wcrtomb_r>:
 8018778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801877a:	4c09      	ldr	r4, [pc, #36]	; (80187a0 <_wcrtomb_r+0x28>)
 801877c:	b085      	sub	sp, #20
 801877e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8018782:	4605      	mov	r5, r0
 8018784:	461e      	mov	r6, r3
 8018786:	b909      	cbnz	r1, 801878c <_wcrtomb_r+0x14>
 8018788:	460a      	mov	r2, r1
 801878a:	a901      	add	r1, sp, #4
 801878c:	47b8      	blx	r7
 801878e:	1c43      	adds	r3, r0, #1
 8018790:	bf01      	itttt	eq
 8018792:	2300      	moveq	r3, #0
 8018794:	6033      	streq	r3, [r6, #0]
 8018796:	238a      	moveq	r3, #138	; 0x8a
 8018798:	602b      	streq	r3, [r5, #0]
 801879a:	b005      	add	sp, #20
 801879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801879e:	bf00      	nop
 80187a0:	200008f4 	.word	0x200008f4

080187a4 <_write_r>:
 80187a4:	b538      	push	{r3, r4, r5, lr}
 80187a6:	4d07      	ldr	r5, [pc, #28]	; (80187c4 <_write_r+0x20>)
 80187a8:	4604      	mov	r4, r0
 80187aa:	4608      	mov	r0, r1
 80187ac:	4611      	mov	r1, r2
 80187ae:	2200      	movs	r2, #0
 80187b0:	602a      	str	r2, [r5, #0]
 80187b2:	461a      	mov	r2, r3
 80187b4:	f7ef fbe6 	bl	8007f84 <_write>
 80187b8:	1c43      	adds	r3, r0, #1
 80187ba:	d102      	bne.n	80187c2 <_write_r+0x1e>
 80187bc:	682b      	ldr	r3, [r5, #0]
 80187be:	b103      	cbz	r3, 80187c2 <_write_r+0x1e>
 80187c0:	6023      	str	r3, [r4, #0]
 80187c2:	bd38      	pop	{r3, r4, r5, pc}
 80187c4:	20018e4c 	.word	0x20018e4c

080187c8 <_close_r>:
 80187c8:	b538      	push	{r3, r4, r5, lr}
 80187ca:	4d06      	ldr	r5, [pc, #24]	; (80187e4 <_close_r+0x1c>)
 80187cc:	2300      	movs	r3, #0
 80187ce:	4604      	mov	r4, r0
 80187d0:	4608      	mov	r0, r1
 80187d2:	602b      	str	r3, [r5, #0]
 80187d4:	f7ef fbe4 	bl	8007fa0 <_close>
 80187d8:	1c43      	adds	r3, r0, #1
 80187da:	d102      	bne.n	80187e2 <_close_r+0x1a>
 80187dc:	682b      	ldr	r3, [r5, #0]
 80187de:	b103      	cbz	r3, 80187e2 <_close_r+0x1a>
 80187e0:	6023      	str	r3, [r4, #0]
 80187e2:	bd38      	pop	{r3, r4, r5, pc}
 80187e4:	20018e4c 	.word	0x20018e4c

080187e8 <_fclose_r>:
 80187e8:	b570      	push	{r4, r5, r6, lr}
 80187ea:	4606      	mov	r6, r0
 80187ec:	460c      	mov	r4, r1
 80187ee:	b911      	cbnz	r1, 80187f6 <_fclose_r+0xe>
 80187f0:	2500      	movs	r5, #0
 80187f2:	4628      	mov	r0, r5
 80187f4:	bd70      	pop	{r4, r5, r6, pc}
 80187f6:	b118      	cbz	r0, 8018800 <_fclose_r+0x18>
 80187f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80187fa:	b90b      	cbnz	r3, 8018800 <_fclose_r+0x18>
 80187fc:	f7ff fc82 	bl	8018104 <__sinit>
 8018800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018802:	07d8      	lsls	r0, r3, #31
 8018804:	d405      	bmi.n	8018812 <_fclose_r+0x2a>
 8018806:	89a3      	ldrh	r3, [r4, #12]
 8018808:	0599      	lsls	r1, r3, #22
 801880a:	d402      	bmi.n	8018812 <_fclose_r+0x2a>
 801880c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801880e:	f7fb ffab 	bl	8014768 <__retarget_lock_acquire_recursive>
 8018812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018816:	b93b      	cbnz	r3, 8018828 <_fclose_r+0x40>
 8018818:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801881a:	f015 0501 	ands.w	r5, r5, #1
 801881e:	d1e7      	bne.n	80187f0 <_fclose_r+0x8>
 8018820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018822:	f7fb ffa2 	bl	801476a <__retarget_lock_release_recursive>
 8018826:	e7e4      	b.n	80187f2 <_fclose_r+0xa>
 8018828:	4621      	mov	r1, r4
 801882a:	4630      	mov	r0, r6
 801882c:	f7ff fb70 	bl	8017f10 <__sflush_r>
 8018830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018832:	4605      	mov	r5, r0
 8018834:	b133      	cbz	r3, 8018844 <_fclose_r+0x5c>
 8018836:	69e1      	ldr	r1, [r4, #28]
 8018838:	4630      	mov	r0, r6
 801883a:	4798      	blx	r3
 801883c:	2800      	cmp	r0, #0
 801883e:	bfb8      	it	lt
 8018840:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8018844:	89a3      	ldrh	r3, [r4, #12]
 8018846:	061a      	lsls	r2, r3, #24
 8018848:	d503      	bpl.n	8018852 <_fclose_r+0x6a>
 801884a:	6921      	ldr	r1, [r4, #16]
 801884c:	4630      	mov	r0, r6
 801884e:	f7fb fec9 	bl	80145e4 <_free_r>
 8018852:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018854:	b141      	cbz	r1, 8018868 <_fclose_r+0x80>
 8018856:	f104 0340 	add.w	r3, r4, #64	; 0x40
 801885a:	4299      	cmp	r1, r3
 801885c:	d002      	beq.n	8018864 <_fclose_r+0x7c>
 801885e:	4630      	mov	r0, r6
 8018860:	f7fb fec0 	bl	80145e4 <_free_r>
 8018864:	2300      	movs	r3, #0
 8018866:	6323      	str	r3, [r4, #48]	; 0x30
 8018868:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801886a:	b121      	cbz	r1, 8018876 <_fclose_r+0x8e>
 801886c:	4630      	mov	r0, r6
 801886e:	f7fb feb9 	bl	80145e4 <_free_r>
 8018872:	2300      	movs	r3, #0
 8018874:	6463      	str	r3, [r4, #68]	; 0x44
 8018876:	f7ff fc2d 	bl	80180d4 <__sfp_lock_acquire>
 801887a:	2300      	movs	r3, #0
 801887c:	81a3      	strh	r3, [r4, #12]
 801887e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018880:	07db      	lsls	r3, r3, #31
 8018882:	d402      	bmi.n	801888a <_fclose_r+0xa2>
 8018884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018886:	f7fb ff70 	bl	801476a <__retarget_lock_release_recursive>
 801888a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801888c:	f7fb ff6b 	bl	8014766 <__retarget_lock_close_recursive>
 8018890:	f7ff fc26 	bl	80180e0 <__sfp_lock_release>
 8018894:	e7ad      	b.n	80187f2 <_fclose_r+0xa>
	...

08018898 <_fstat_r>:
 8018898:	b538      	push	{r3, r4, r5, lr}
 801889a:	4d07      	ldr	r5, [pc, #28]	; (80188b8 <_fstat_r+0x20>)
 801889c:	2300      	movs	r3, #0
 801889e:	4604      	mov	r4, r0
 80188a0:	4608      	mov	r0, r1
 80188a2:	4611      	mov	r1, r2
 80188a4:	602b      	str	r3, [r5, #0]
 80188a6:	f7ef fb7e 	bl	8007fa6 <_fstat>
 80188aa:	1c43      	adds	r3, r0, #1
 80188ac:	d102      	bne.n	80188b4 <_fstat_r+0x1c>
 80188ae:	682b      	ldr	r3, [r5, #0]
 80188b0:	b103      	cbz	r3, 80188b4 <_fstat_r+0x1c>
 80188b2:	6023      	str	r3, [r4, #0]
 80188b4:	bd38      	pop	{r3, r4, r5, pc}
 80188b6:	bf00      	nop
 80188b8:	20018e4c 	.word	0x20018e4c

080188bc <_isatty_r>:
 80188bc:	b538      	push	{r3, r4, r5, lr}
 80188be:	4d06      	ldr	r5, [pc, #24]	; (80188d8 <_isatty_r+0x1c>)
 80188c0:	2300      	movs	r3, #0
 80188c2:	4604      	mov	r4, r0
 80188c4:	4608      	mov	r0, r1
 80188c6:	602b      	str	r3, [r5, #0]
 80188c8:	f7ef fb72 	bl	8007fb0 <_isatty>
 80188cc:	1c43      	adds	r3, r0, #1
 80188ce:	d102      	bne.n	80188d6 <_isatty_r+0x1a>
 80188d0:	682b      	ldr	r3, [r5, #0]
 80188d2:	b103      	cbz	r3, 80188d6 <_isatty_r+0x1a>
 80188d4:	6023      	str	r3, [r4, #0]
 80188d6:	bd38      	pop	{r3, r4, r5, pc}
 80188d8:	20018e4c 	.word	0x20018e4c

080188dc <_lseek_r>:
 80188dc:	b538      	push	{r3, r4, r5, lr}
 80188de:	4d07      	ldr	r5, [pc, #28]	; (80188fc <_lseek_r+0x20>)
 80188e0:	4604      	mov	r4, r0
 80188e2:	4608      	mov	r0, r1
 80188e4:	4611      	mov	r1, r2
 80188e6:	2200      	movs	r2, #0
 80188e8:	602a      	str	r2, [r5, #0]
 80188ea:	461a      	mov	r2, r3
 80188ec:	f7ef fb62 	bl	8007fb4 <_lseek>
 80188f0:	1c43      	adds	r3, r0, #1
 80188f2:	d102      	bne.n	80188fa <_lseek_r+0x1e>
 80188f4:	682b      	ldr	r3, [r5, #0]
 80188f6:	b103      	cbz	r3, 80188fa <_lseek_r+0x1e>
 80188f8:	6023      	str	r3, [r4, #0]
 80188fa:	bd38      	pop	{r3, r4, r5, pc}
 80188fc:	20018e4c 	.word	0x20018e4c

08018900 <_read_r>:
 8018900:	b538      	push	{r3, r4, r5, lr}
 8018902:	4d07      	ldr	r5, [pc, #28]	; (8018920 <_read_r+0x20>)
 8018904:	4604      	mov	r4, r0
 8018906:	4608      	mov	r0, r1
 8018908:	4611      	mov	r1, r2
 801890a:	2200      	movs	r2, #0
 801890c:	602a      	str	r2, [r5, #0]
 801890e:	461a      	mov	r2, r3
 8018910:	f7ef fb28 	bl	8007f64 <_read>
 8018914:	1c43      	adds	r3, r0, #1
 8018916:	d102      	bne.n	801891e <_read_r+0x1e>
 8018918:	682b      	ldr	r3, [r5, #0]
 801891a:	b103      	cbz	r3, 801891e <_read_r+0x1e>
 801891c:	6023      	str	r3, [r4, #0]
 801891e:	bd38      	pop	{r3, r4, r5, pc}
 8018920:	20018e4c 	.word	0x20018e4c

08018924 <_init>:
 8018924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018926:	bf00      	nop
 8018928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801892a:	bc08      	pop	{r3}
 801892c:	469e      	mov	lr, r3
 801892e:	4770      	bx	lr

08018930 <_fini>:
 8018930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018932:	bf00      	nop
 8018934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018936:	bc08      	pop	{r3}
 8018938:	469e      	mov	lr, r3
 801893a:	4770      	bx	lr

Disassembly of section i.AcquireBluetoothStackInformation:

0801893c <AcquireBluetoothStackInformation>:
 801893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018940:	4d20      	ldr	r5, [pc, #128]	; (80189c4 <AcquireBluetoothStackInformation+0x88>)
 8018942:	4606      	mov	r6, r0
 8018944:	6868      	ldr	r0, [r5, #4]
 8018946:	b1f0      	cbz	r0, 8018986 <AcquireBluetoothStackInformation+0x4a>
 8018948:	b1ee      	cbz	r6, 8018986 <AcquireBluetoothStackInformation+0x4a>
 801894a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801894e:	4641      	mov	r1, r8
 8018950:	f7fa fcab 	bl	80132aa <BTPS_WaitMutex>
 8018954:	b1b8      	cbz	r0, 8018986 <AcquireBluetoothStackInformation+0x4a>
 8018956:	4631      	mov	r1, r6
 8018958:	f105 0008 	add.w	r0, r5, #8
 801895c:	f000 fe30 	bl	80195c0 <SearchBTStackEntry>
 8018960:	0004      	movs	r4, r0
 8018962:	d005      	beq.n	8018970 <AcquireBluetoothStackInformation+0x34>
 8018964:	6920      	ldr	r0, [r4, #16]
 8018966:	b158      	cbz	r0, 8018980 <AcquireBluetoothStackInformation+0x44>
 8018968:	2100      	movs	r1, #0
 801896a:	f7fa fc9e 	bl	80132aa <BTPS_WaitMutex>
 801896e:	b118      	cbz	r0, 8018978 <AcquireBluetoothStackInformation+0x3c>
 8018970:	6868      	ldr	r0, [r5, #4]
 8018972:	f7fa fcb6 	bl	80132e2 <BTPS_ReleaseMutex>
 8018976:	e007      	b.n	8018988 <AcquireBluetoothStackInformation+0x4c>
 8018978:	7b20      	ldrb	r0, [r4, #12]
 801897a:	b908      	cbnz	r0, 8018980 <AcquireBluetoothStackInformation+0x44>
 801897c:	7d20      	ldrb	r0, [r4, #20]
 801897e:	b130      	cbz	r0, 801898e <AcquireBluetoothStackInformation+0x52>
 8018980:	6868      	ldr	r0, [r5, #4]
 8018982:	f7fa fcae 	bl	80132e2 <BTPS_ReleaseMutex>
 8018986:	2400      	movs	r4, #0
 8018988:	4620      	mov	r0, r4
 801898a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801898e:	69a0      	ldr	r0, [r4, #24]
 8018990:	1c40      	adds	r0, r0, #1
 8018992:	61a0      	str	r0, [r4, #24]
 8018994:	6927      	ldr	r7, [r4, #16]
 8018996:	6868      	ldr	r0, [r5, #4]
 8018998:	f7fa fca3 	bl	80132e2 <BTPS_ReleaseMutex>
 801899c:	4641      	mov	r1, r8
 801899e:	4638      	mov	r0, r7
 80189a0:	f7fa fc83 	bl	80132aa <BTPS_WaitMutex>
 80189a4:	b110      	cbz	r0, 80189ac <AcquireBluetoothStackInformation+0x70>
 80189a6:	7b20      	ldrb	r0, [r4, #12]
 80189a8:	b920      	cbnz	r0, 80189b4 <AcquireBluetoothStackInformation+0x78>
 80189aa:	e001      	b.n	80189b0 <AcquireBluetoothStackInformation+0x74>
 80189ac:	2400      	movs	r4, #0
 80189ae:	e005      	b.n	80189bc <AcquireBluetoothStackInformation+0x80>
 80189b0:	7d20      	ldrb	r0, [r4, #20]
 80189b2:	b118      	cbz	r0, 80189bc <AcquireBluetoothStackInformation+0x80>
 80189b4:	4638      	mov	r0, r7
 80189b6:	f7fa fc94 	bl	80132e2 <BTPS_ReleaseMutex>
 80189ba:	e7f7      	b.n	80189ac <AcquireBluetoothStackInformation+0x70>
 80189bc:	4630      	mov	r0, r6
 80189be:	f000 fd4f 	bl	8019460 <DecreaseBluetoothStackThreadCount>
 80189c2:	e7e1      	b.n	8018988 <AcquireBluetoothStackInformation+0x4c>
 80189c4:	20000000 	.word	0x20000000

Disassembly of section i.AdjustSharedBuffer:

080189c8 <AdjustSharedBuffer>:
 80189c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189cc:	2400      	movs	r4, #0
 80189ce:	461f      	mov	r7, r3
 80189d0:	460e      	mov	r6, r1
 80189d2:	4615      	mov	r5, r2
 80189d4:	4680      	mov	r8, r0
 80189d6:	2904      	cmp	r1, #4
 80189d8:	d823      	bhi.n	8018a22 <AdjustSharedBuffer+0x5a>
 80189da:	b315      	cbz	r5, 8018a22 <AdjustSharedBuffer+0x5a>
 80189dc:	4611      	mov	r1, r2
 80189de:	f000 fe19 	bl	8019614 <VerifySharedBufferPointer>
 80189e2:	b1f0      	cbz	r0, 8018a22 <AdjustSharedBuffer+0x5a>
 80189e4:	4640      	mov	r0, r8
 80189e6:	f7ff ffa9 	bl	801893c <AcquireBluetoothStackInformation>
 80189ea:	0001      	movs	r1, r0
 80189ec:	d019      	beq.n	8018a22 <AdjustSharedBuffer+0x5a>
 80189ee:	4a0e      	ldr	r2, [pc, #56]	; (8018a28 <AdjustSharedBuffer+0x60>)
 80189f0:	4620      	mov	r0, r4
 80189f2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80189f6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80189fa:	42b3      	cmp	r3, r6
 80189fc:	d105      	bne.n	8018a0a <AdjustSharedBuffer+0x42>
 80189fe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8018a02:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8018a06:	6840      	ldr	r0, [r0, #4]
 8018a08:	e002      	b.n	8018a10 <AdjustSharedBuffer+0x48>
 8018a0a:	1c64      	adds	r4, r4, #1
 8018a0c:	2c05      	cmp	r4, #5
 8018a0e:	d3f0      	bcc.n	80189f2 <AdjustSharedBuffer+0x2a>
 8018a10:	4287      	cmp	r7, r0
 8018a12:	d202      	bcs.n	8018a1a <AdjustSharedBuffer+0x52>
 8018a14:	1bc0      	subs	r0, r0, r7
 8018a16:	1944      	adds	r4, r0, r5
 8018a18:	e000      	b.n	8018a1c <AdjustSharedBuffer+0x54>
 8018a1a:	462c      	mov	r4, r5
 8018a1c:	4608      	mov	r0, r1
 8018a1e:	f000 fdc1 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8018a22:	4620      	mov	r0, r4
 8018a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a28:	080396f4 	.word	0x080396f4

Disassembly of section i.BSC_AcquireListLock:

08018a2c <BSC_AcquireListLock>:
 8018a2c:	4804      	ldr	r0, [pc, #16]	; (8018a40 <BSC_AcquireListLock+0x14>)
 8018a2e:	6840      	ldr	r0, [r0, #4]
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d003      	beq.n	8018a3c <BSC_AcquireListLock+0x10>
 8018a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018a38:	f7fa bc37 	b.w	80132aa <BTPS_WaitMutex>
 8018a3c:	4770      	bx	lr
 8018a3e:	0000      	.short	0x0000
 8018a40:	20000000 	.word	0x20000000

Disassembly of section i.BSC_AddGenericListEntry:

08018a44 <BSC_AddGenericListEntry>:
 8018a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a48:	468a      	mov	sl, r1
 8018a4a:	a908      	add	r1, sp, #32
 8018a4c:	461d      	mov	r5, r3
 8018a4e:	e891 02c0 	ldmia.w	r1, {r6, r7, r9}
 8018a52:	4690      	mov	r8, r2
 8018a54:	2400      	movs	r4, #0
 8018a56:	b1f8      	cbz	r0, 8018a98 <BSC_AddGenericListEntry+0x54>
 8018a58:	b1f5      	cbz	r5, 8018a98 <BSC_AddGenericListEntry+0x54>
 8018a5a:	42a8      	cmp	r0, r5
 8018a5c:	d325      	bcc.n	8018aaa <BSC_AddGenericListEntry+0x66>
 8018a5e:	b1df      	cbz	r7, 8018a98 <BSC_AddGenericListEntry+0x54>
 8018a60:	ea5f 0109 	movs.w	r1, r9
 8018a64:	d021      	beq.n	8018aaa <BSC_AddGenericListEntry+0x66>
 8018a66:	f7fa fca9 	bl	80133bc <BTPS_AllocateMemory>
 8018a6a:	0004      	movs	r4, r0
 8018a6c:	d01d      	beq.n	8018aaa <BSC_AddGenericListEntry+0x66>
 8018a6e:	462a      	mov	r2, r5
 8018a70:	4649      	mov	r1, r9
 8018a72:	f7fa fd20 	bl	80134b6 <BTPS_MemCopy>
 8018a76:	2000      	movs	r0, #0
 8018a78:	51a0      	str	r0, [r4, r6]
 8018a7a:	683d      	ldr	r5, [r7, #0]
 8018a7c:	b1a5      	cbz	r5, 8018aa8 <BSC_AddGenericListEntry+0x64>
 8018a7e:	eb04 0708 	add.w	r7, r4, r8
 8018a82:	463a      	mov	r2, r7
 8018a84:	eb05 0108 	add.w	r1, r5, r8
 8018a88:	4650      	mov	r0, sl
 8018a8a:	f000 fcb3 	bl	80193f4 <CompareListEntryKeys>
 8018a8e:	b120      	cbz	r0, 8018a9a <BSC_AddGenericListEntry+0x56>
 8018a90:	4620      	mov	r0, r4
 8018a92:	f7fa fcad 	bl	80133f0 <BTPS_FreeMemory>
 8018a96:	2400      	movs	r4, #0
 8018a98:	e007      	b.n	8018aaa <BSC_AddGenericListEntry+0x66>
 8018a9a:	59a8      	ldr	r0, [r5, r6]
 8018a9c:	b108      	cbz	r0, 8018aa2 <BSC_AddGenericListEntry+0x5e>
 8018a9e:	4605      	mov	r5, r0
 8018aa0:	e7ef      	b.n	8018a82 <BSC_AddGenericListEntry+0x3e>
 8018aa2:	b114      	cbz	r4, 8018aaa <BSC_AddGenericListEntry+0x66>
 8018aa4:	51ac      	str	r4, [r5, r6]
 8018aa6:	e000      	b.n	8018aaa <BSC_AddGenericListEntry+0x66>
 8018aa8:	603c      	str	r4, [r7, #0]
 8018aaa:	4620      	mov	r0, r4
 8018aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.BSC_AddGenericListEntry_Actual:

08018ab0 <BSC_AddGenericListEntry_Actual>:
 8018ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ab4:	4617      	mov	r7, r2
 8018ab6:	9d08      	ldr	r5, [sp, #32]
 8018ab8:	4689      	mov	r9, r1
 8018aba:	4682      	mov	sl, r0
 8018abc:	b173      	cbz	r3, 8018adc <BSC_AddGenericListEntry_Actual+0x2c>
 8018abe:	b16d      	cbz	r5, 8018adc <BSC_AddGenericListEntry_Actual+0x2c>
 8018ac0:	2601      	movs	r6, #1
 8018ac2:	2000      	movs	r0, #0
 8018ac4:	51e8      	str	r0, [r5, r7]
 8018ac6:	681c      	ldr	r4, [r3, #0]
 8018ac8:	b18c      	cbz	r4, 8018aee <BSC_AddGenericListEntry_Actual+0x3e>
 8018aca:	eb05 0809 	add.w	r8, r5, r9
 8018ace:	4642      	mov	r2, r8
 8018ad0:	eb04 0109 	add.w	r1, r4, r9
 8018ad4:	4650      	mov	r0, sl
 8018ad6:	f000 fc8d 	bl	80193f4 <CompareListEntryKeys>
 8018ada:	b108      	cbz	r0, 8018ae0 <BSC_AddGenericListEntry_Actual+0x30>
 8018adc:	2600      	movs	r6, #0
 8018ade:	e007      	b.n	8018af0 <BSC_AddGenericListEntry_Actual+0x40>
 8018ae0:	59e0      	ldr	r0, [r4, r7]
 8018ae2:	b108      	cbz	r0, 8018ae8 <BSC_AddGenericListEntry_Actual+0x38>
 8018ae4:	4604      	mov	r4, r0
 8018ae6:	e7f2      	b.n	8018ace <BSC_AddGenericListEntry_Actual+0x1e>
 8018ae8:	b116      	cbz	r6, 8018af0 <BSC_AddGenericListEntry_Actual+0x40>
 8018aea:	51e5      	str	r5, [r4, r7]
 8018aec:	e000      	b.n	8018af0 <BSC_AddGenericListEntry_Actual+0x40>
 8018aee:	601d      	str	r5, [r3, #0]
 8018af0:	4630      	mov	r0, r6
 8018af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.BSC_AuthenticateDevice:

08018af6 <BSC_AuthenticateDevice>:
 8018af6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018afa:	461d      	mov	r5, r3
 8018afc:	ea5f 0800 	movs.w	r8, r0
 8018b00:	d036      	beq.n	8018b70 <BSC_AuthenticateDevice+0x7a>
 8018b02:	f7ff ff1b 	bl	801893c <AcquireBluetoothStackInformation>
 8018b06:	0006      	movs	r6, r0
 8018b08:	d02f      	beq.n	8018b6a <BSC_AuthenticateDevice+0x74>
 8018b0a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8018b0c:	2700      	movs	r7, #0
 8018b0e:	b1f8      	cbz	r0, 8018b50 <BSC_AuthenticateDevice+0x5a>
 8018b10:	2018      	movs	r0, #24
 8018b12:	f7fa fc53 	bl	80133bc <BTPS_AllocateMemory>
 8018b16:	0004      	movs	r4, r0
 8018b18:	d017      	beq.n	8018b4a <BSC_AuthenticateDevice+0x54>
 8018b1a:	7027      	strb	r7, [r4, #0]
 8018b1c:	200c      	movs	r0, #12
 8018b1e:	6060      	str	r0, [r4, #4]
 8018b20:	f104 000c 	add.w	r0, r4, #12
 8018b24:	60a0      	str	r0, [r4, #8]
 8018b26:	9901      	ldr	r1, [sp, #4]
 8018b28:	60e1      	str	r1, [r4, #12]
 8018b2a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018b2e:	8221      	strh	r1, [r4, #16]
 8018b30:	2003      	movs	r0, #3
 8018b32:	6165      	str	r5, [r4, #20]
 8018b34:	7028      	strb	r0, [r5, #0]
 8018b36:	e9d6 3209 	ldrd	r3, r2, [r6, #36]	; 0x24
 8018b3a:	4621      	mov	r1, r4
 8018b3c:	4640      	mov	r0, r8
 8018b3e:	4798      	blx	r3
 8018b40:	2500      	movs	r5, #0
 8018b42:	4620      	mov	r0, r4
 8018b44:	f7fa fc54 	bl	80133f0 <BTPS_FreeMemory>
 8018b48:	e00b      	b.n	8018b62 <BSC_AuthenticateDevice+0x6c>
 8018b4a:	f06f 0527 	mvn.w	r5, #39	; 0x27
 8018b4e:	e008      	b.n	8018b62 <BSC_AuthenticateDevice+0x6c>
 8018b50:	f896 0020 	ldrb.w	r0, [r6, #32]
 8018b54:	2804      	cmp	r0, #4
 8018b56:	d302      	bcc.n	8018b5e <BSC_AuthenticateDevice+0x68>
 8018b58:	f06f 053c 	mvn.w	r5, #60	; 0x3c
 8018b5c:	e001      	b.n	8018b62 <BSC_AuthenticateDevice+0x6c>
 8018b5e:	702f      	strb	r7, [r5, #0]
 8018b60:	2500      	movs	r5, #0
 8018b62:	4630      	mov	r0, r6
 8018b64:	f000 fd1e 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8018b68:	e004      	b.n	8018b74 <BSC_AuthenticateDevice+0x7e>
 8018b6a:	f06f 0501 	mvn.w	r5, #1
 8018b6e:	e001      	b.n	8018b74 <BSC_AuthenticateDevice+0x7e>
 8018b70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018b74:	b004      	add	sp, #16
 8018b76:	4628      	mov	r0, r5
 8018b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.BSC_DeleteGenericListEntry:

08018b7c <BSC_DeleteGenericListEntry>:
 8018b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b80:	2400      	movs	r4, #0
 8018b82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018b86:	4681      	mov	r9, r0
 8018b88:	461d      	mov	r5, r3
 8018b8a:	4692      	mov	sl, r2
 8018b8c:	460f      	mov	r7, r1
 8018b8e:	4626      	mov	r6, r4
 8018b90:	ea5f 0008 	movs.w	r0, r8
 8018b94:	d020      	beq.n	8018bd8 <BSC_DeleteGenericListEntry+0x5c>
 8018b96:	b1ff      	cbz	r7, 8018bd8 <BSC_DeleteGenericListEntry+0x5c>
 8018b98:	f1b9 0f00 	cmp.w	r9, #0
 8018b9c:	d01c      	beq.n	8018bd8 <BSC_DeleteGenericListEntry+0x5c>
 8018b9e:	f8d8 4000 	ldr.w	r4, [r8]
 8018ba2:	e001      	b.n	8018ba8 <BSC_DeleteGenericListEntry+0x2c>
 8018ba4:	4626      	mov	r6, r4
 8018ba6:	5964      	ldr	r4, [r4, r5]
 8018ba8:	b1b4      	cbz	r4, 8018bd8 <BSC_DeleteGenericListEntry+0x5c>
 8018baa:	f1b9 0f06 	cmp.w	r9, #6
 8018bae:	d00b      	beq.n	8018bc8 <BSC_DeleteGenericListEntry+0x4c>
 8018bb0:	eb04 010a 	add.w	r1, r4, sl
 8018bb4:	463a      	mov	r2, r7
 8018bb6:	4648      	mov	r0, r9
 8018bb8:	f000 fc1c 	bl	80193f4 <CompareListEntryKeys>
 8018bbc:	2800      	cmp	r0, #0
 8018bbe:	d0f1      	beq.n	8018ba4 <BSC_DeleteGenericListEntry+0x28>
 8018bc0:	b12e      	cbz	r6, 8018bce <BSC_DeleteGenericListEntry+0x52>
 8018bc2:	5960      	ldr	r0, [r4, r5]
 8018bc4:	5170      	str	r0, [r6, r5]
 8018bc6:	e005      	b.n	8018bd4 <BSC_DeleteGenericListEntry+0x58>
 8018bc8:	42bc      	cmp	r4, r7
 8018bca:	d1eb      	bne.n	8018ba4 <BSC_DeleteGenericListEntry+0x28>
 8018bcc:	e7f8      	b.n	8018bc0 <BSC_DeleteGenericListEntry+0x44>
 8018bce:	5961      	ldr	r1, [r4, r5]
 8018bd0:	f8c8 1000 	str.w	r1, [r8]
 8018bd4:	2000      	movs	r0, #0
 8018bd6:	5160      	str	r0, [r4, r5]
 8018bd8:	4620      	mov	r0, r4
 8018bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.BSC_DisableFeature:

08018bde <BSC_DisableFeature>:
 8018bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be2:	000e      	movs	r6, r1
 8018be4:	4607      	mov	r7, r0
 8018be6:	d031      	beq.n	8018c4c <BSC_DisableFeature+0x6e>
 8018be8:	f7ff fea8 	bl	801893c <AcquireBluetoothStackInformation>
 8018bec:	0005      	movs	r5, r0
 8018bee:	d02a      	beq.n	8018c46 <BSC_DisableFeature+0x68>
 8018bf0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8018bf2:	4230      	tst	r0, r6
 8018bf4:	d01e      	beq.n	8018c34 <BSC_DisableFeature+0x56>
 8018bf6:	07c0      	lsls	r0, r0, #31
 8018bf8:	d005      	beq.n	8018c06 <BSC_DisableFeature+0x28>
 8018bfa:	2100      	movs	r1, #0
 8018bfc:	4638      	mov	r0, r7
 8018bfe:	f003 fe6c 	bl	801c8da <GAP_LE_Enable>
 8018c02:	0004      	movs	r4, r0
 8018c04:	d109      	bne.n	8018c1a <BSC_DisableFeature+0x3c>
 8018c06:	4631      	mov	r1, r6
 8018c08:	4638      	mov	r0, r7
 8018c0a:	f7fa ff3b 	bl	8013a84 <HCI_VS_DisableFeature>
 8018c0e:	b108      	cbz	r0, 8018c14 <BSC_DisableFeature+0x36>
 8018c10:	2400      	movs	r4, #0
 8018c12:	e001      	b.n	8018c18 <BSC_DisableFeature+0x3a>
 8018c14:	f06f 0439 	mvn.w	r4, #57	; 0x39
 8018c18:	b144      	cbz	r4, 8018c2c <BSC_DisableFeature+0x4e>
 8018c1a:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8018c1e:	07c0      	lsls	r0, r0, #31
 8018c20:	d00b      	beq.n	8018c3a <BSC_DisableFeature+0x5c>
 8018c22:	2101      	movs	r1, #1
 8018c24:	4638      	mov	r0, r7
 8018c26:	f003 fe58 	bl	801c8da <GAP_LE_Enable>
 8018c2a:	e006      	b.n	8018c3a <BSC_DisableFeature+0x5c>
 8018c2c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8018c2e:	43b0      	bics	r0, r6
 8018c30:	6368      	str	r0, [r5, #52]	; 0x34
 8018c32:	e002      	b.n	8018c3a <BSC_DisableFeature+0x5c>
 8018c34:	b128      	cbz	r0, 8018c42 <BSC_DisableFeature+0x64>
 8018c36:	f06f 0466 	mvn.w	r4, #102	; 0x66
 8018c3a:	4628      	mov	r0, r5
 8018c3c:	f000 fcb2 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8018c40:	e006      	b.n	8018c50 <BSC_DisableFeature+0x72>
 8018c42:	2400      	movs	r4, #0
 8018c44:	e7f9      	b.n	8018c3a <BSC_DisableFeature+0x5c>
 8018c46:	f06f 0401 	mvn.w	r4, #1
 8018c4a:	e001      	b.n	8018c50 <BSC_DisableFeature+0x72>
 8018c4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018c50:	4620      	mov	r0, r4
 8018c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.BSC_EnableFeature:

08018c56 <BSC_EnableFeature>:
 8018c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5a:	000e      	movs	r6, r1
 8018c5c:	4607      	mov	r7, r0
 8018c5e:	d026      	beq.n	8018cae <BSC_EnableFeature+0x58>
 8018c60:	f7ff fe6c 	bl	801893c <AcquireBluetoothStackInformation>
 8018c64:	0005      	movs	r5, r0
 8018c66:	d01f      	beq.n	8018ca8 <BSC_EnableFeature+0x52>
 8018c68:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8018c6a:	b121      	cbz	r1, 8018c76 <BSC_EnableFeature+0x20>
 8018c6c:	4638      	mov	r0, r7
 8018c6e:	f7ff ffb6 	bl	8018bde <BSC_DisableFeature>
 8018c72:	0004      	movs	r4, r0
 8018c74:	d114      	bne.n	8018ca0 <BSC_EnableFeature+0x4a>
 8018c76:	07f0      	lsls	r0, r6, #31
 8018c78:	d005      	beq.n	8018c86 <BSC_EnableFeature+0x30>
 8018c7a:	2101      	movs	r1, #1
 8018c7c:	4638      	mov	r0, r7
 8018c7e:	f003 fe2c 	bl	801c8da <GAP_LE_Enable>
 8018c82:	0004      	movs	r4, r0
 8018c84:	d10c      	bne.n	8018ca0 <BSC_EnableFeature+0x4a>
 8018c86:	4631      	mov	r1, r6
 8018c88:	4638      	mov	r0, r7
 8018c8a:	f7fa fea1 	bl	80139d0 <HCI_VS_EnableFeature>
 8018c8e:	b108      	cbz	r0, 8018c94 <BSC_EnableFeature+0x3e>
 8018c90:	2400      	movs	r4, #0
 8018c92:	e001      	b.n	8018c98 <BSC_EnableFeature+0x42>
 8018c94:	f06f 0466 	mvn.w	r4, #102	; 0x66
 8018c98:	b914      	cbnz	r4, 8018ca0 <BSC_EnableFeature+0x4a>
 8018c9a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8018c9c:	4330      	orrs	r0, r6
 8018c9e:	6368      	str	r0, [r5, #52]	; 0x34
 8018ca0:	4628      	mov	r0, r5
 8018ca2:	f000 fc7f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8018ca6:	e004      	b.n	8018cb2 <BSC_EnableFeature+0x5c>
 8018ca8:	f06f 0401 	mvn.w	r4, #1
 8018cac:	e001      	b.n	8018cb2 <BSC_EnableFeature+0x5c>
 8018cae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.BSC_FreeGenericListEntryList:

08018cb8 <BSC_FreeGenericListEntryList>:
 8018cb8:	b570      	push	{r4, r5, r6, lr}
 8018cba:	460e      	mov	r6, r1
 8018cbc:	0005      	movs	r5, r0
 8018cbe:	d009      	beq.n	8018cd4 <BSC_FreeGenericListEntryList+0x1c>
 8018cc0:	682c      	ldr	r4, [r5, #0]
 8018cc2:	e003      	b.n	8018ccc <BSC_FreeGenericListEntryList+0x14>
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	59a4      	ldr	r4, [r4, r6]
 8018cc8:	f000 f805 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8018ccc:	2c00      	cmp	r4, #0
 8018cce:	d1f9      	bne.n	8018cc4 <BSC_FreeGenericListEntryList+0xc>
 8018cd0:	2000      	movs	r0, #0
 8018cd2:	6028      	str	r0, [r5, #0]
 8018cd4:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BSC_FreeGenericListEntryMemory:

08018cd6 <BSC_FreeGenericListEntryMemory>:
 8018cd6:	2800      	cmp	r0, #0
 8018cd8:	d001      	beq.n	8018cde <BSC_FreeGenericListEntryMemory+0x8>
 8018cda:	f7fa bb89 	b.w	80133f0 <BTPS_FreeMemory>
 8018cde:	4770      	bx	lr

Disassembly of section i.BSC_GetNextGenericListEntry:

08018ce0 <BSC_GetNextGenericListEntry>:
 8018ce0:	b510      	push	{r4, lr}
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d009      	beq.n	8018cfe <BSC_GetNextGenericListEntry+0x1e>
 8018cea:	2c06      	cmp	r4, #6
 8018cec:	d107      	bne.n	8018cfe <BSC_GetNextGenericListEntry+0x1e>
 8018cee:	6818      	ldr	r0, [r3, #0]
 8018cf0:	2900      	cmp	r1, #0
 8018cf2:	d004      	beq.n	8018cfe <BSC_GetNextGenericListEntry+0x1e>
 8018cf4:	2800      	cmp	r0, #0
 8018cf6:	d002      	beq.n	8018cfe <BSC_GetNextGenericListEntry+0x1e>
 8018cf8:	4288      	cmp	r0, r1
 8018cfa:	5880      	ldr	r0, [r0, r2]
 8018cfc:	d1fa      	bne.n	8018cf4 <BSC_GetNextGenericListEntry+0x14>
 8018cfe:	bd10      	pop	{r4, pc}

Disassembly of section i.BSC_Initialize:

08018d00 <BSC_Initialize>:
 8018d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d04:	f8df 836c 	ldr.w	r8, [pc, #876]	; 8019074 <BSC_Initialize+0x374>
 8018d08:	4683      	mov	fp, r0
 8018d0a:	b089      	sub	sp, #36	; 0x24
 8018d0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018d10:	460f      	mov	r7, r1
 8018d12:	f06f 0502 	mvn.w	r5, #2
 8018d16:	b928      	cbnz	r0, 8018d24 <BSC_Initialize+0x24>
 8018d18:	f000 fc16 	bl	8019548 <InitializeBSCModule>
 8018d1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018d20:	2800      	cmp	r0, #0
 8018d22:	d067      	beq.n	8018df4 <BSC_Initialize+0xf4>
 8018d24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018d28:	f1bb 0f00 	cmp.w	fp, #0
 8018d2c:	d07d      	beq.n	8018e2a <BSC_Initialize+0x12a>
 8018d2e:	4651      	mov	r1, sl
 8018d30:	4646      	mov	r6, r8
 8018d32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018d36:	f7fa fab8 	bl	80132aa <BTPS_WaitMutex>
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	d076      	beq.n	8018e2c <BSC_Initialize+0x12c>
 8018d3e:	f000 fd25 	bl	801978c <BTPS_InitializeTimerModule>
 8018d42:	6870      	ldr	r0, [r6, #4]
 8018d44:	f7fa facd 	bl	80132e2 <BTPS_ReleaseMutex>
 8018d48:	4658      	mov	r0, fp
 8018d4a:	f7fa fd97 	bl	801387c <HCI_VS_InitializeBeforeHCIOpen>
 8018d4e:	f06f 0964 	mvn.w	r9, #100	; 0x64
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d06b      	beq.n	8018e2e <BSC_Initialize+0x12e>
 8018d56:	f44f 6091 	mov.w	r0, #1160	; 0x488
 8018d5a:	f7fa fb2f 	bl	80133bc <BTPS_AllocateMemory>
 8018d5e:	0004      	movs	r4, r0
 8018d60:	d066      	beq.n	8018e30 <BSC_Initialize+0x130>
 8018d62:	2268      	movs	r2, #104	; 0x68
 8018d64:	2100      	movs	r1, #0
 8018d66:	f7fa fbaa 	bl	80134be <BTPS_MemInitialize>
 8018d6a:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8018d6e:	63a0      	str	r0, [r4, #56]	; 0x38
 8018d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018d74:	63e0      	str	r0, [r4, #60]	; 0x3c
 8018d76:	4658      	mov	r0, fp
 8018d78:	f00c ff06 	bl	8025b88 <HCI_OpenDriver>
 8018d7c:	6060      	str	r0, [r4, #4]
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	dd7e      	ble.n	8018e80 <BSC_Initialize+0x180>
 8018d82:	9006      	str	r0, [sp, #24]
 8018d84:	f7fa fd8e 	bl	80138a4 <HCI_VS_InitializeAfterHCIOpen>
 8018d88:	2800      	cmp	r0, #0
 8018d8a:	d07a      	beq.n	8018e82 <BSC_Initialize+0x182>
 8018d8c:	2001      	movs	r0, #1
 8018d8e:	f7fa fa78 	bl	8013282 <BTPS_CreateMutex>
 8018d92:	f06f 0941 	mvn.w	r9, #65	; 0x41
 8018d96:	6120      	str	r0, [r4, #16]
 8018d98:	2800      	cmp	r0, #0
 8018d9a:	d0f6      	beq.n	8018d8a <BSC_Initialize+0x8a>
 8018d9c:	4651      	mov	r1, sl
 8018d9e:	6870      	ldr	r0, [r6, #4]
 8018da0:	f7fa fa83 	bl	80132aa <BTPS_WaitMutex>
 8018da4:	2800      	cmp	r0, #0
 8018da6:	d06d      	beq.n	8018e84 <BSC_Initialize+0x184>
 8018da8:	6830      	ldr	r0, [r6, #0]
 8018daa:	1c40      	adds	r0, r0, #1
 8018dac:	6030      	str	r0, [r6, #0]
 8018dae:	d501      	bpl.n	8018db4 <BSC_Initialize+0xb4>
 8018db0:	2001      	movs	r0, #1
 8018db2:	6030      	str	r0, [r6, #0]
 8018db4:	4baf      	ldr	r3, [pc, #700]	; (8019074 <BSC_Initialize+0x374>)
 8018db6:	6020      	str	r0, [r4, #0]
 8018db8:	3308      	adds	r3, #8
 8018dba:	2264      	movs	r2, #100	; 0x64
 8018dbc:	2100      	movs	r1, #0
 8018dbe:	2007      	movs	r0, #7
 8018dc0:	9400      	str	r4, [sp, #0]
 8018dc2:	f7ff fe75 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d077      	beq.n	8018eba <BSC_Initialize+0x1ba>
 8018dca:	6820      	ldr	r0, [r4, #0]
 8018dcc:	f000 fba0 	bl	8019510 <IncreaseBluetoothStackThreadCount>
 8018dd0:	6870      	ldr	r0, [r6, #4]
 8018dd2:	f7fa fa86 	bl	80132e2 <BTPS_ReleaseMutex>
 8018dd6:	6820      	ldr	r0, [r4, #0]
 8018dd8:	f006 fd3a 	bl	801f850 <HCI_Initialize>
 8018ddc:	b158      	cbz	r0, 8018df6 <BSC_Initialize+0xf6>
 8018dde:	f06f 0503 	mvn.w	r5, #3
 8018de2:	6920      	ldr	r0, [r4, #16]
 8018de4:	f7fa fa7d 	bl	80132e2 <BTPS_ReleaseMutex>
 8018de8:	6820      	ldr	r0, [r4, #0]
 8018dea:	f000 fb39 	bl	8019460 <DecreaseBluetoothStackThreadCount>
 8018dee:	2400      	movs	r4, #0
 8018df0:	2d00      	cmp	r5, #0
 8018df2:	db74      	blt.n	8018ede <BSC_Initialize+0x1de>
 8018df4:	e139      	b.n	801906a <BSC_Initialize+0x36a>
 8018df6:	a904      	add	r1, sp, #16
 8018df8:	6820      	ldr	r0, [r4, #0]
 8018dfa:	f007 fdcd 	bl	8020998 <_HCI_Read_BD_ADDR>
 8018dfe:	2800      	cmp	r0, #0
 8018e00:	d16e      	bne.n	8018ee0 <BSC_Initialize+0x1e0>
 8018e02:	f00c fc31 	bl	8025668 <InitializeCertificateModule>
 8018e06:	f00c fc29 	bl	802565c <GetCertLength>
 8018e0a:	4681      	mov	r9, r0
 8018e0c:	3020      	adds	r0, #32
 8018e0e:	f7fa fad5 	bl	80133bc <BTPS_AllocateMemory>
 8018e12:	0006      	movs	r6, r0
 8018e14:	f04f 0b00 	mov.w	fp, #0
 8018e18:	d03b      	beq.n	8018e92 <BSC_Initialize+0x192>
 8018e1a:	f00c fc21 	bl	8025660 <GetCertPtr>
 8018e1e:	4601      	mov	r1, r0
 8018e20:	f106 0020 	add.w	r0, r6, #32
 8018e24:	464a      	mov	r2, r9
 8018e26:	9000      	str	r0, [sp, #0]
 8018e28:	e003      	b.n	8018e32 <BSC_Initialize+0x132>
 8018e2a:	e112      	b.n	8019052 <BSC_Initialize+0x352>
 8018e2c:	e0ff      	b.n	801902e <BSC_Initialize+0x32e>
 8018e2e:	e10e      	b.n	801904e <BSC_Initialize+0x34e>
 8018e30:	e10a      	b.n	8019048 <BSC_Initialize+0x348>
 8018e32:	f7fa fb40 	bl	80134b6 <BTPS_MemCopy>
 8018e36:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8018e3a:	7770      	strb	r0, [r6, #29]
 8018e3c:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8018e40:	7730      	strb	r0, [r6, #28]
 8018e42:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8018e46:	76f0      	strb	r0, [r6, #27]
 8018e48:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8018e4c:	76b0      	strb	r0, [r6, #26]
 8018e4e:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8018e52:	7670      	strb	r0, [r6, #25]
 8018e54:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8018e58:	7630      	strb	r0, [r6, #24]
 8018e5a:	a807      	add	r0, sp, #28
 8018e5c:	f00c fbfc 	bl	8025658 <GetCertCurrentDate>
 8018e60:	9a00      	ldr	r2, [sp, #0]
 8018e62:	f8cd b000 	str.w	fp, [sp]
 8018e66:	9603      	str	r6, [sp, #12]
 8018e68:	e9cd 2901 	strd	r2, r9, [sp, #4]
 8018e6c:	2206      	movs	r2, #6
 8018e6e:	2101      	movs	r1, #1
 8018e70:	f106 0318 	add.w	r3, r6, #24
 8018e74:	f00c fbdf 	bl	8025636 <GetAccess>
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	db07      	blt.n	8018e8c <BSC_Initialize+0x18c>
 8018e7c:	7b30      	ldrb	r0, [r6, #12]
 8018e7e:	e002      	b.n	8018e86 <BSC_Initialize+0x186>
 8018e80:	e0df      	b.n	8019042 <BSC_Initialize+0x342>
 8018e82:	e0c8      	b.n	8019016 <BSC_Initialize+0x316>
 8018e84:	e0c3      	b.n	801900e <BSC_Initialize+0x30e>
 8018e86:	06c0      	lsls	r0, r0, #27
 8018e88:	d500      	bpl.n	8018e8c <BSC_Initialize+0x18c>
 8018e8a:	2500      	movs	r5, #0
 8018e8c:	4630      	mov	r0, r6
 8018e8e:	f7fa faaf 	bl	80133f0 <BTPS_FreeMemory>
 8018e92:	2001      	movs	r0, #1
 8018e94:	f00c fbce 	bl	8025634 <CleanupCertificateModule>
 8018e98:	2d00      	cmp	r5, #0
 8018e9a:	d17d      	bne.n	8018f98 <BSC_Initialize+0x298>
 8018e9c:	2600      	movs	r6, #0
 8018e9e:	6825      	ldr	r5, [r4, #0]
 8018ea0:	07f8      	lsls	r0, r7, #31
 8018ea2:	d00b      	beq.n	8018ebc <BSC_Initialize+0x1bc>
 8018ea4:	2d00      	cmp	r5, #0
 8018ea6:	dd62      	ble.n	8018f6e <BSC_Initialize+0x26e>
 8018ea8:	07b8      	lsls	r0, r7, #30
 8018eaa:	d42b      	bmi.n	8018f04 <BSC_Initialize+0x204>
 8018eac:	6820      	ldr	r0, [r4, #0]
 8018eae:	f00b f939 	bl	8024124 <SCO_Initialize>
 8018eb2:	b328      	cbz	r0, 8018f00 <BSC_Initialize+0x200>
 8018eb4:	f06f 0505 	mvn.w	r5, #5
 8018eb8:	e059      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018eba:	e0a0      	b.n	8018ffe <BSC_Initialize+0x2fe>
 8018ebc:	4628      	mov	r0, r5
 8018ebe:	f009 faf5 	bl	80224ac <L2CAP_Initialize>
 8018ec2:	b110      	cbz	r0, 8018eca <BSC_Initialize+0x1ca>
 8018ec4:	f06f 0506 	mvn.w	r5, #6
 8018ec8:	e051      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018eca:	2601      	movs	r6, #1
 8018ecc:	0778      	lsls	r0, r7, #29
 8018ece:	d409      	bmi.n	8018ee4 <BSC_Initialize+0x1e4>
 8018ed0:	6820      	ldr	r0, [r4, #0]
 8018ed2:	f00c fa39 	bl	8025348 <SDP_Initialize>
 8018ed6:	b120      	cbz	r0, 8018ee2 <BSC_Initialize+0x1e2>
 8018ed8:	f06f 0508 	mvn.w	r5, #8
 8018edc:	e047      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018ede:	e09b      	b.n	8019018 <BSC_Initialize+0x318>
 8018ee0:	e071      	b.n	8018fc6 <BSC_Initialize+0x2c6>
 8018ee2:	2603      	movs	r6, #3
 8018ee4:	2d00      	cmp	r5, #0
 8018ee6:	dd42      	ble.n	8018f6e <BSC_Initialize+0x26e>
 8018ee8:	0738      	lsls	r0, r7, #28
 8018eea:	d4dd      	bmi.n	8018ea8 <BSC_Initialize+0x1a8>
 8018eec:	6820      	ldr	r0, [r4, #0]
 8018eee:	f00b f84f 	bl	8023f90 <RFCOMM_Initialize>
 8018ef2:	b110      	cbz	r0, 8018efa <BSC_Initialize+0x1fa>
 8018ef4:	f06f 0507 	mvn.w	r5, #7
 8018ef8:	e039      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018efa:	f046 0604 	orr.w	r6, r6, #4
 8018efe:	e7d3      	b.n	8018ea8 <BSC_Initialize+0x1a8>
 8018f00:	f046 0608 	orr.w	r6, r6, #8
 8018f04:	04f8      	lsls	r0, r7, #19
 8018f06:	d408      	bmi.n	8018f1a <BSC_Initialize+0x21a>
 8018f08:	6820      	ldr	r0, [r4, #0]
 8018f0a:	f000 ff5d 	bl	8019dc8 <GAP_Initialize>
 8018f0e:	b110      	cbz	r0, 8018f16 <BSC_Initialize+0x216>
 8018f10:	f06f 0504 	mvn.w	r5, #4
 8018f14:	e02b      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018f16:	f046 0610 	orr.w	r6, r6, #16
 8018f1a:	07f8      	lsls	r0, r7, #31
 8018f1c:	d15f      	bne.n	8018fde <BSC_Initialize+0x2de>
 8018f1e:	04b8      	lsls	r0, r7, #18
 8018f20:	d45d      	bmi.n	8018fde <BSC_Initialize+0x2de>
 8018f22:	0770      	lsls	r0, r6, #29
 8018f24:	d505      	bpl.n	8018f32 <BSC_Initialize+0x232>
 8018f26:	07b0      	lsls	r0, r6, #30
 8018f28:	d503      	bpl.n	8018f32 <BSC_Initialize+0x232>
 8018f2a:	6820      	ldr	r0, [r4, #0]
 8018f2c:	f00c fb3e 	bl	80255ac <SPP_Initialize>
 8018f30:	b110      	cbz	r0, 8018f38 <BSC_Initialize+0x238>
 8018f32:	f06f 0509 	mvn.w	r5, #9
 8018f36:	e01a      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018f38:	f046 0620 	orr.w	r6, r6, #32
 8018f3c:	0478      	lsls	r0, r7, #17
 8018f3e:	d44e      	bmi.n	8018fde <BSC_Initialize+0x2de>
 8018f40:	0770      	lsls	r0, r6, #29
 8018f42:	d507      	bpl.n	8018f54 <BSC_Initialize+0x254>
 8018f44:	07b0      	lsls	r0, r6, #30
 8018f46:	d505      	bpl.n	8018f54 <BSC_Initialize+0x254>
 8018f48:	06b0      	lsls	r0, r6, #26
 8018f4a:	d503      	bpl.n	8018f54 <BSC_Initialize+0x254>
 8018f4c:	6820      	ldr	r0, [r4, #0]
 8018f4e:	f005 fbd0 	bl	801e6f2 <GOEP_Initialize>
 8018f52:	b110      	cbz	r0, 8018f5a <BSC_Initialize+0x25a>
 8018f54:	f06f 050a 	mvn.w	r5, #10
 8018f58:	e009      	b.n	8018f6e <BSC_Initialize+0x26e>
 8018f5a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8018f5e:	0438      	lsls	r0, r7, #16
 8018f60:	d43d      	bmi.n	8018fde <BSC_Initialize+0x2de>
 8018f62:	6820      	ldr	r0, [r4, #0]
 8018f64:	f00a ffe4 	bl	8023f30 <OTP_Initialize>
 8018f68:	b3c0      	cbz	r0, 8018fdc <BSC_Initialize+0x2dc>
 8018f6a:	f06f 050b 	mvn.w	r5, #11
 8018f6e:	0630      	lsls	r0, r6, #24
 8018f70:	d502      	bpl.n	8018f78 <BSC_Initialize+0x278>
 8018f72:	6820      	ldr	r0, [r4, #0]
 8018f74:	f00a ffdb 	bl	8023f2e <OTP_Cleanup>
 8018f78:	0670      	lsls	r0, r6, #25
 8018f7a:	d502      	bpl.n	8018f82 <BSC_Initialize+0x282>
 8018f7c:	6820      	ldr	r0, [r4, #0]
 8018f7e:	f005 fba3 	bl	801e6c8 <GOEP_Cleanup>
 8018f82:	06b0      	lsls	r0, r6, #26
 8018f84:	d502      	bpl.n	8018f8c <BSC_Initialize+0x28c>
 8018f86:	6820      	ldr	r0, [r4, #0]
 8018f88:	f00c fafb 	bl	8025582 <SPP_Cleanup>
 8018f8c:	06f0      	lsls	r0, r6, #27
 8018f8e:	d502      	bpl.n	8018f96 <BSC_Initialize+0x296>
 8018f90:	6820      	ldr	r0, [r4, #0]
 8018f92:	f000 feda 	bl	8019d4a <GAP_Cleanup>
 8018f96:	e000      	b.n	8018f9a <BSC_Initialize+0x29a>
 8018f98:	e013      	b.n	8018fc2 <BSC_Initialize+0x2c2>
 8018f9a:	0770      	lsls	r0, r6, #29
 8018f9c:	d502      	bpl.n	8018fa4 <BSC_Initialize+0x2a4>
 8018f9e:	6820      	ldr	r0, [r4, #0]
 8018fa0:	f00a ffdf 	bl	8023f62 <RFCOMM_Cleanup>
 8018fa4:	07b0      	lsls	r0, r6, #30
 8018fa6:	d502      	bpl.n	8018fae <BSC_Initialize+0x2ae>
 8018fa8:	6820      	ldr	r0, [r4, #0]
 8018faa:	f00c f9aa 	bl	8025302 <SDP_Cleanup>
 8018fae:	0730      	lsls	r0, r6, #28
 8018fb0:	d502      	bpl.n	8018fb8 <BSC_Initialize+0x2b8>
 8018fb2:	6820      	ldr	r0, [r4, #0]
 8018fb4:	f00b f870 	bl	8024098 <SCO_Cleanup>
 8018fb8:	07f0      	lsls	r0, r6, #31
 8018fba:	d002      	beq.n	8018fc2 <BSC_Initialize+0x2c2>
 8018fbc:	6820      	ldr	r0, [r4, #0]
 8018fbe:	f008 fc0a 	bl	80217d6 <L2CAP_Cleanup>
 8018fc2:	2d00      	cmp	r5, #0
 8018fc4:	da51      	bge.n	801906a <BSC_Initialize+0x36a>
 8018fc6:	e9d4 1000 	ldrd	r1, r0, [r4]
 8018fca:	f7fa fcd7 	bl	801397c <HCI_VS_InitializeBeforeHCIClose>
 8018fce:	6820      	ldr	r0, [r4, #0]
 8018fd0:	f006 fbdc 	bl	801f78c <HCI_Cleanup>
 8018fd4:	2d00      	cmp	r5, #0
 8018fd6:	f6ff af04 	blt.w	8018de2 <BSC_Initialize+0xe2>
 8018fda:	e046      	b.n	801906a <BSC_Initialize+0x36a>
 8018fdc:	e7ff      	b.n	8018fde <BSC_Initialize+0x2de>
 8018fde:	f8c4 b034 	str.w	fp, [r4, #52]	; 0x34
 8018fe2:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018fe6:	2806      	cmp	r0, #6
 8018fe8:	d307      	bcc.n	8018ffa <BSC_Initialize+0x2fa>
 8018fea:	6820      	ldr	r0, [r4, #0]
 8018fec:	f006 fd72 	bl	801fad4 <HCI_Query_LE_Controller_Support>
 8018ff0:	b118      	cbz	r0, 8018ffa <BSC_Initialize+0x2fa>
 8018ff2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8018ff4:	f040 0001 	orr.w	r0, r0, #1
 8018ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8018ffa:	6920      	ldr	r0, [r4, #16]
 8018ffc:	e033      	b.n	8019066 <BSC_Initialize+0x366>
 8018ffe:	6920      	ldr	r0, [r4, #16]
 8019000:	f7fa f975 	bl	80132ee <BTPS_CloseMutex>
 8019004:	464d      	mov	r5, r9
 8019006:	6870      	ldr	r0, [r6, #4]
 8019008:	f7fa f96b 	bl	80132e2 <BTPS_ReleaseMutex>
 801900c:	e004      	b.n	8019018 <BSC_Initialize+0x318>
 801900e:	6920      	ldr	r0, [r4, #16]
 8019010:	b108      	cbz	r0, 8019016 <BSC_Initialize+0x316>
 8019012:	f7fa f96c 	bl	80132ee <BTPS_CloseMutex>
 8019016:	464d      	mov	r5, r9
 8019018:	9806      	ldr	r0, [sp, #24]
 801901a:	f00c fc49 	bl	80258b0 <HCI_CloseDriver>
 801901e:	2d00      	cmp	r5, #0
 8019020:	da23      	bge.n	801906a <BSC_Initialize+0x36a>
 8019022:	b114      	cbz	r4, 801902a <BSC_Initialize+0x32a>
 8019024:	4620      	mov	r0, r4
 8019026:	f7fa f9e3 	bl	80133f0 <BTPS_FreeMemory>
 801902a:	2d00      	cmp	r5, #0
 801902c:	da1d      	bge.n	801906a <BSC_Initialize+0x36a>
 801902e:	4651      	mov	r1, sl
 8019030:	4644      	mov	r4, r8
 8019032:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019036:	f7fa f938 	bl	80132aa <BTPS_WaitMutex>
 801903a:	b1b0      	cbz	r0, 801906a <BSC_Initialize+0x36a>
 801903c:	68a0      	ldr	r0, [r4, #8]
 801903e:	b150      	cbz	r0, 8019056 <BSC_Initialize+0x356>
 8019040:	e010      	b.n	8019064 <BSC_Initialize+0x364>
 8019042:	f06f 050d 	mvn.w	r5, #13
 8019046:	e7ed      	b.n	8019024 <BSC_Initialize+0x324>
 8019048:	f06f 0527 	mvn.w	r5, #39	; 0x27
 801904c:	e7ef      	b.n	801902e <BSC_Initialize+0x32e>
 801904e:	464d      	mov	r5, r9
 8019050:	e7ed      	b.n	801902e <BSC_Initialize+0x32e>
 8019052:	4655      	mov	r5, sl
 8019054:	e7eb      	b.n	801902e <BSC_Initialize+0x32e>
 8019056:	4807      	ldr	r0, [pc, #28]	; (8019074 <BSC_Initialize+0x374>)
 8019058:	300c      	adds	r0, #12
 801905a:	f000 fa45 	bl	80194e8 <FreeBSCTimerEntryList>
 801905e:	2000      	movs	r0, #0
 8019060:	f000 fb6e 	bl	8019740 <BTPS_CleanupTimerModule>
 8019064:	6860      	ldr	r0, [r4, #4]
 8019066:	f7fa f93c 	bl	80132e2 <BTPS_ReleaseMutex>
 801906a:	b009      	add	sp, #36	; 0x24
 801906c:	4628      	mov	r0, r5
 801906e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019072:	0000      	.short	0x0000
 8019074:	20000000 	.word	0x20000000

Disassembly of section i.BSC_LockBluetoothStack:

08019078 <BSC_LockBluetoothStack>:
 8019078:	b510      	push	{r4, lr}
 801907a:	b180      	cbz	r0, 801909e <BSC_LockBluetoothStack+0x26>
 801907c:	f7ff fc5e 	bl	801893c <AcquireBluetoothStackInformation>
 8019080:	b150      	cbz	r0, 8019098 <BSC_LockBluetoothStack+0x20>
 8019082:	69c1      	ldr	r1, [r0, #28]
 8019084:	b121      	cbz	r1, 8019090 <BSC_LockBluetoothStack+0x18>
 8019086:	1c49      	adds	r1, r1, #1
 8019088:	61c1      	str	r1, [r0, #28]
 801908a:	f000 fa8b 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801908e:	e001      	b.n	8019094 <BSC_LockBluetoothStack+0x1c>
 8019090:	2101      	movs	r1, #1
 8019092:	61c1      	str	r1, [r0, #28]
 8019094:	2000      	movs	r0, #0
 8019096:	bd10      	pop	{r4, pc}
 8019098:	f06f 0001 	mvn.w	r0, #1
 801909c:	bd10      	pop	{r4, pc}
 801909e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190a2:	bd10      	pop	{r4, pc}

Disassembly of section i.BSC_QueryActiveFeatures:

080190a4 <BSC_QueryActiveFeatures>:
 80190a4:	b510      	push	{r4, lr}
 80190a6:	000c      	movs	r4, r1
 80190a8:	d00b      	beq.n	80190c2 <BSC_QueryActiveFeatures+0x1e>
 80190aa:	f7ff fc47 	bl	801893c <AcquireBluetoothStackInformation>
 80190ae:	b128      	cbz	r0, 80190bc <BSC_QueryActiveFeatures+0x18>
 80190b0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80190b2:	6021      	str	r1, [r4, #0]
 80190b4:	2400      	movs	r4, #0
 80190b6:	f000 fa75 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80190ba:	e004      	b.n	80190c6 <BSC_QueryActiveFeatures+0x22>
 80190bc:	f06f 0401 	mvn.w	r4, #1
 80190c0:	e001      	b.n	80190c6 <BSC_QueryActiveFeatures+0x22>
 80190c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80190c6:	4620      	mov	r0, r4
 80190c8:	bd10      	pop	{r4, pc}

Disassembly of section i.BSC_RegisterEventCallback:

080190ca <BSC_RegisterEventCallback>:
 80190ca:	b570      	push	{r4, r5, r6, lr}
 80190cc:	4615      	mov	r5, r2
 80190ce:	460e      	mov	r6, r1
 80190d0:	2400      	movs	r4, #0
 80190d2:	f7ff fc33 	bl	801893c <AcquireBluetoothStackInformation>
 80190d6:	b148      	cbz	r0, 80190ec <BSC_RegisterEventCallback+0x22>
 80190d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80190da:	b121      	cbz	r1, 80190e6 <BSC_RegisterEventCallback+0x1c>
 80190dc:	f06f 0414 	mvn.w	r4, #20
 80190e0:	f000 fa60 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80190e4:	e004      	b.n	80190f0 <BSC_RegisterEventCallback+0x26>
 80190e6:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
 80190ea:	e7f9      	b.n	80190e0 <BSC_RegisterEventCallback+0x16>
 80190ec:	f06f 0401 	mvn.w	r4, #1
 80190f0:	4620      	mov	r0, r4
 80190f2:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BSC_ReleaseListLock:

080190f4 <BSC_ReleaseListLock>:
 80190f4:	4803      	ldr	r0, [pc, #12]	; (8019104 <BSC_ReleaseListLock+0x10>)
 80190f6:	6840      	ldr	r0, [r0, #4]
 80190f8:	2800      	cmp	r0, #0
 80190fa:	d001      	beq.n	8019100 <BSC_ReleaseListLock+0xc>
 80190fc:	f7fa b8f1 	b.w	80132e2 <BTPS_ReleaseMutex>
 8019100:	4770      	bx	lr
 8019102:	0000      	.short	0x0000
 8019104:	20000000 	.word	0x20000000

Disassembly of section i.BSC_ScheduleAsynchronousCallback:

08019108 <BSC_ScheduleAsynchronousCallback>:
 8019108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801910c:	4617      	mov	r7, r2
 801910e:	460c      	mov	r4, r1
 8019110:	0006      	movs	r6, r0
 8019112:	d00e      	beq.n	8019132 <BSC_ScheduleAsynchronousCallback+0x2a>
 8019114:	f7ff fc12 	bl	801893c <AcquireBluetoothStackInformation>
 8019118:	0005      	movs	r5, r0
 801911a:	d00a      	beq.n	8019132 <BSC_ScheduleAsynchronousCallback+0x2a>
 801911c:	b12c      	cbz	r4, 801912a <BSC_ScheduleAsynchronousCallback+0x22>
 801911e:	463a      	mov	r2, r7
 8019120:	4621      	mov	r1, r4
 8019122:	4630      	mov	r0, r6
 8019124:	f006 fd7a 	bl	801fc1c <HCI_Schedule_Asynchronous_Callback>
 8019128:	4604      	mov	r4, r0
 801912a:	4628      	mov	r0, r5
 801912c:	f000 fa3a 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019130:	e000      	b.n	8019134 <BSC_ScheduleAsynchronousCallback+0x2c>
 8019132:	2400      	movs	r4, #0
 8019134:	4620      	mov	r0, r4
 8019136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.BSC_SearchGenericListEntry:

0801913a <BSC_SearchGenericListEntry>:
 801913a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801913e:	4680      	mov	r8, r0
 8019140:	9806      	ldr	r0, [sp, #24]
 8019142:	461d      	mov	r5, r3
 8019144:	4616      	mov	r6, r2
 8019146:	460f      	mov	r7, r1
 8019148:	2400      	movs	r4, #0
 801914a:	b170      	cbz	r0, 801916a <BSC_SearchGenericListEntry+0x30>
 801914c:	b16f      	cbz	r7, 801916a <BSC_SearchGenericListEntry+0x30>
 801914e:	f1b8 0f00 	cmp.w	r8, #0
 8019152:	d00a      	beq.n	801916a <BSC_SearchGenericListEntry+0x30>
 8019154:	6804      	ldr	r4, [r0, #0]
 8019156:	e000      	b.n	801915a <BSC_SearchGenericListEntry+0x20>
 8019158:	5964      	ldr	r4, [r4, r5]
 801915a:	b134      	cbz	r4, 801916a <BSC_SearchGenericListEntry+0x30>
 801915c:	19a1      	adds	r1, r4, r6
 801915e:	463a      	mov	r2, r7
 8019160:	4640      	mov	r0, r8
 8019162:	f000 f947 	bl	80193f4 <CompareListEntryKeys>
 8019166:	2800      	cmp	r0, #0
 8019168:	d0f6      	beq.n	8019158 <BSC_SearchGenericListEntry+0x1e>
 801916a:	4620      	mov	r0, r4
 801916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.BSC_Shutdown:

08019170 <BSC_Shutdown>:
 8019170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019174:	4d3a      	ldr	r5, [pc, #232]	; (8019260 <BSC_Shutdown+0xf0>)
 8019176:	4681      	mov	r9, r0
 8019178:	6868      	ldr	r0, [r5, #4]
 801917a:	2800      	cmp	r0, #0
 801917c:	d06e      	beq.n	801925c <BSC_Shutdown+0xec>
 801917e:	f1b9 0f00 	cmp.w	r9, #0
 8019182:	d06b      	beq.n	801925c <BSC_Shutdown+0xec>
 8019184:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019188:	4641      	mov	r1, r8
 801918a:	f7fa f88e 	bl	80132aa <BTPS_WaitMutex>
 801918e:	2800      	cmp	r0, #0
 8019190:	d064      	beq.n	801925c <BSC_Shutdown+0xec>
 8019192:	4649      	mov	r1, r9
 8019194:	f105 0008 	add.w	r0, r5, #8
 8019198:	f000 fa12 	bl	80195c0 <SearchBTStackEntry>
 801919c:	0004      	movs	r4, r0
 801919e:	d02c      	beq.n	80191fa <BSC_Shutdown+0x8a>
 80191a0:	7d20      	ldrb	r0, [r4, #20]
 80191a2:	bb50      	cbnz	r0, 80191fa <BSC_Shutdown+0x8a>
 80191a4:	7b60      	ldrb	r0, [r4, #13]
 80191a6:	2701      	movs	r7, #1
 80191a8:	b148      	cbz	r0, 80191be <BSC_Shutdown+0x4e>
 80191aa:	2100      	movs	r1, #0
 80191ac:	6920      	ldr	r0, [r4, #16]
 80191ae:	f7fa f87c 	bl	80132aa <BTPS_WaitMutex>
 80191b2:	b120      	cbz	r0, 80191be <BSC_Shutdown+0x4e>
 80191b4:	6920      	ldr	r0, [r4, #16]
 80191b6:	f7fa f894 	bl	80132e2 <BTPS_ReleaseMutex>
 80191ba:	7327      	strb	r7, [r4, #12]
 80191bc:	e01d      	b.n	80191fa <BSC_Shutdown+0x8a>
 80191be:	6926      	ldr	r6, [r4, #16]
 80191c0:	7527      	strb	r7, [r4, #20]
 80191c2:	6868      	ldr	r0, [r5, #4]
 80191c4:	f7fa f88d 	bl	80132e2 <BTPS_ReleaseMutex>
 80191c8:	4647      	mov	r7, r8
 80191ca:	4641      	mov	r1, r8
 80191cc:	4630      	mov	r0, r6
 80191ce:	f7fa f86c 	bl	80132aa <BTPS_WaitMutex>
 80191d2:	2600      	movs	r6, #0
 80191d4:	b120      	cbz	r0, 80191e0 <BSC_Shutdown+0x70>
 80191d6:	69e0      	ldr	r0, [r4, #28]
 80191d8:	b1a0      	cbz	r0, 8019204 <BSC_Shutdown+0x94>
 80191da:	4620      	mov	r0, r4
 80191dc:	f000 f9e2 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80191e0:	4639      	mov	r1, r7
 80191e2:	6868      	ldr	r0, [r5, #4]
 80191e4:	f7fa f861 	bl	80132aa <BTPS_WaitMutex>
 80191e8:	2800      	cmp	r0, #0
 80191ea:	d037      	beq.n	801925c <BSC_Shutdown+0xec>
 80191ec:	481c      	ldr	r0, [pc, #112]	; (8019260 <BSC_Shutdown+0xf0>)
 80191ee:	4649      	mov	r1, r9
 80191f0:	3008      	adds	r0, #8
 80191f2:	f000 f9e5 	bl	80195c0 <SearchBTStackEntry>
 80191f6:	b100      	cbz	r0, 80191fa <BSC_Shutdown+0x8a>
 80191f8:	7506      	strb	r6, [r0, #20]
 80191fa:	6868      	ldr	r0, [r5, #4]
 80191fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019200:	f7fa b86f 	b.w	80132e2 <BTPS_ReleaseMutex>
 8019204:	4648      	mov	r0, r9
 8019206:	f00a fe92 	bl	8023f2e <OTP_Cleanup>
 801920a:	4648      	mov	r0, r9
 801920c:	f005 fa5c 	bl	801e6c8 <GOEP_Cleanup>
 8019210:	4648      	mov	r0, r9
 8019212:	f00c f9b6 	bl	8025582 <SPP_Cleanup>
 8019216:	4648      	mov	r0, r9
 8019218:	f000 fd97 	bl	8019d4a <GAP_Cleanup>
 801921c:	4648      	mov	r0, r9
 801921e:	f00a fea0 	bl	8023f62 <RFCOMM_Cleanup>
 8019222:	4648      	mov	r0, r9
 8019224:	f00c f86d 	bl	8025302 <SDP_Cleanup>
 8019228:	4648      	mov	r0, r9
 801922a:	f00a ff35 	bl	8024098 <SCO_Cleanup>
 801922e:	4648      	mov	r0, r9
 8019230:	f008 fad1 	bl	80217d6 <L2CAP_Cleanup>
 8019234:	4649      	mov	r1, r9
 8019236:	6860      	ldr	r0, [r4, #4]
 8019238:	f7fa fba0 	bl	801397c <HCI_VS_InitializeBeforeHCIClose>
 801923c:	4648      	mov	r0, r9
 801923e:	f006 faa5 	bl	801f78c <HCI_Cleanup>
 8019242:	4620      	mov	r0, r4
 8019244:	f000 f9ae 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019248:	6860      	ldr	r0, [r4, #4]
 801924a:	f00c fb31 	bl	80258b0 <HCI_CloseDriver>
 801924e:	f7fa fbbd 	bl	80139cc <HCI_VS_InitializeAfterHCIClose>
 8019252:	6820      	ldr	r0, [r4, #0]
 8019254:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019258:	f000 b902 	b.w	8019460 <DecreaseBluetoothStackThreadCount>
 801925c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019260:	20000000 	.word	0x20000000

Disassembly of section i.BSC_StartTimer:

08019264 <BSC_StartTimer>:
 8019264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019268:	4698      	mov	r8, r3
 801926a:	0015      	movs	r5, r2
 801926c:	460e      	mov	r6, r1
 801926e:	4607      	mov	r7, r0
 8019270:	d038      	beq.n	80192e4 <BSC_StartTimer+0x80>
 8019272:	b39e      	cbz	r6, 80192dc <BSC_StartTimer+0x78>
 8019274:	f7ff fb62 	bl	801893c <AcquireBluetoothStackInformation>
 8019278:	ea5f 0900 	movs.w	r9, r0
 801927c:	d02f      	beq.n	80192de <BSC_StartTimer+0x7a>
 801927e:	2014      	movs	r0, #20
 8019280:	f7fa f89c 	bl	80133bc <BTPS_AllocateMemory>
 8019284:	0004      	movs	r4, r0
 8019286:	d023      	beq.n	80192d0 <BSC_StartTimer+0x6c>
 8019288:	c480      	stmia	r4!, {r7}
 801928a:	2000      	movs	r0, #0
 801928c:	e8a4 0121 	stmia.w	r4!, {r0, r5, r8}
 8019290:	4639      	mov	r1, r7
 8019292:	f844 0910 	str.w	r0, [r4], #-16
 8019296:	4633      	mov	r3, r6
 8019298:	4a15      	ldr	r2, [pc, #84]	; (80192f0 <BSC_StartTimer+0x8c>)
 801929a:	4608      	mov	r0, r1
 801929c:	f000 fab0 	bl	8019800 <BTPS_StartTimer>
 80192a0:	f06f 0541 	mvn.w	r5, #65	; 0x41
 80192a4:	6060      	str	r0, [r4, #4]
 80192a6:	b178      	cbz	r0, 80192c8 <BSC_StartTimer+0x64>
 80192a8:	4b12      	ldr	r3, [pc, #72]	; (80192f4 <BSC_StartTimer+0x90>)
 80192aa:	2210      	movs	r2, #16
 80192ac:	2104      	movs	r1, #4
 80192ae:	2007      	movs	r0, #7
 80192b0:	9400      	str	r4, [sp, #0]
 80192b2:	f7ff fbfd 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 80192b6:	b118      	cbz	r0, 80192c0 <BSC_StartTimer+0x5c>
 80192b8:	6865      	ldr	r5, [r4, #4]
 80192ba:	2d00      	cmp	r5, #0
 80192bc:	db04      	blt.n	80192c8 <BSC_StartTimer+0x64>
 80192be:	e009      	b.n	80192d4 <BSC_StartTimer+0x70>
 80192c0:	4638      	mov	r0, r7
 80192c2:	6861      	ldr	r1, [r4, #4]
 80192c4:	f000 fae6 	bl	8019894 <BTPS_StopTimer>
 80192c8:	4620      	mov	r0, r4
 80192ca:	f7fa f891 	bl	80133f0 <BTPS_FreeMemory>
 80192ce:	e001      	b.n	80192d4 <BSC_StartTimer+0x70>
 80192d0:	f06f 0527 	mvn.w	r5, #39	; 0x27
 80192d4:	4648      	mov	r0, r9
 80192d6:	f000 f965 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80192da:	e005      	b.n	80192e8 <BSC_StartTimer+0x84>
 80192dc:	e002      	b.n	80192e4 <BSC_StartTimer+0x80>
 80192de:	f06f 0501 	mvn.w	r5, #1
 80192e2:	e001      	b.n	80192e8 <BSC_StartTimer+0x84>
 80192e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80192e8:	4628      	mov	r0, r5
 80192ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192ee:	0000      	.short	0x0000
 80192f0:	080195d5 	.word	0x080195d5
 80192f4:	2000000c 	.word	0x2000000c

Disassembly of section i.BSC_StopTimer:

080192f8 <BSC_StopTimer>:
 80192f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192fc:	000f      	movs	r7, r1
 80192fe:	4680      	mov	r8, r0
 8019300:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019304:	d018      	beq.n	8019338 <BSC_StopTimer+0x40>
 8019306:	f7ff fb19 	bl	801893c <AcquireBluetoothStackInformation>
 801930a:	0006      	movs	r6, r0
 801930c:	d012      	beq.n	8019334 <BSC_StopTimer+0x3c>
 801930e:	4639      	mov	r1, r7
 8019310:	480b      	ldr	r0, [pc, #44]	; (8019340 <BSC_StopTimer+0x48>)
 8019312:	f000 f8df 	bl	80194d4 <DeleteBSCTimerEntry>
 8019316:	0005      	movs	r5, r0
 8019318:	d008      	beq.n	801932c <BSC_StopTimer+0x34>
 801931a:	4639      	mov	r1, r7
 801931c:	4640      	mov	r0, r8
 801931e:	f000 fab9 	bl	8019894 <BTPS_StopTimer>
 8019322:	b100      	cbz	r0, 8019326 <BSC_StopTimer+0x2e>
 8019324:	2400      	movs	r4, #0
 8019326:	4628      	mov	r0, r5
 8019328:	f7ff fcd5 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801932c:	4630      	mov	r0, r6
 801932e:	f000 f939 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019332:	e001      	b.n	8019338 <BSC_StopTimer+0x40>
 8019334:	f06f 0401 	mvn.w	r4, #1
 8019338:	4620      	mov	r0, r4
 801933a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801933e:	0000      	.short	0x0000
 8019340:	2000000c 	.word	0x2000000c

Disassembly of section i.BSC_UnLockBluetoothStack:

08019344 <BSC_UnLockBluetoothStack>:
 8019344:	b570      	push	{r4, r5, r6, lr}
 8019346:	2800      	cmp	r0, #0
 8019348:	d010      	beq.n	801936c <BSC_UnLockBluetoothStack+0x28>
 801934a:	f7ff faf7 	bl	801893c <AcquireBluetoothStackInformation>
 801934e:	0004      	movs	r4, r0
 8019350:	d00c      	beq.n	801936c <BSC_UnLockBluetoothStack+0x28>
 8019352:	69e5      	ldr	r5, [r4, #28]
 8019354:	b135      	cbz	r5, 8019364 <BSC_UnLockBluetoothStack+0x20>
 8019356:	1e6d      	subs	r5, r5, #1
 8019358:	61e5      	str	r5, [r4, #28]
 801935a:	f000 f923 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801935e:	2d00      	cmp	r5, #0
 8019360:	d104      	bne.n	801936c <BSC_UnLockBluetoothStack+0x28>
 8019362:	4620      	mov	r0, r4
 8019364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019368:	f000 b91c 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 801936c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BSC_UnRegisterEventCallback:

0801936e <BSC_UnRegisterEventCallback>:
 801936e:	b510      	push	{r4, lr}
 8019370:	f7ff fae4 	bl	801893c <AcquireBluetoothStackInformation>
 8019374:	2800      	cmp	r0, #0
 8019376:	d006      	beq.n	8019386 <BSC_UnRegisterEventCallback+0x18>
 8019378:	2100      	movs	r1, #0
 801937a:	6241      	str	r1, [r0, #36]	; 0x24
 801937c:	6281      	str	r1, [r0, #40]	; 0x28
 801937e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019382:	f000 b90f 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 8019386:	bd10      	pop	{r4, pc}

Disassembly of section i.CalculateBufferOffset:

08019388 <CalculateBufferOffset>:
 8019388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801938a:	2200      	movs	r2, #0
 801938c:	4605      	mov	r5, r0
 801938e:	4e0a      	ldr	r6, [pc, #40]	; (80193b8 <CalculateBufferOffset+0x30>)
 8019390:	4610      	mov	r0, r2
 8019392:	600a      	str	r2, [r1, #0]
 8019394:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8019398:	eb06 0483 	add.w	r4, r6, r3, lsl #2
 801939c:	6867      	ldr	r7, [r4, #4]
 801939e:	68a4      	ldr	r4, [r4, #8]
 80193a0:	4438      	add	r0, r7
 80193a2:	680f      	ldr	r7, [r1, #0]
 80193a4:	443c      	add	r4, r7
 80193a6:	600c      	str	r4, [r1, #0]
 80193a8:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
 80193ac:	42ab      	cmp	r3, r5
 80193ae:	d002      	beq.n	80193b6 <CalculateBufferOffset+0x2e>
 80193b0:	1c52      	adds	r2, r2, #1
 80193b2:	2a05      	cmp	r2, #5
 80193b4:	d3ee      	bcc.n	8019394 <CalculateBufferOffset+0xc>
 80193b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193b8:	080396f4 	.word	0x080396f4

Disassembly of section i.CompareBluetoothAddress:

080193bc <CompareBluetoothAddress>:
 80193bc:	7802      	ldrb	r2, [r0, #0]
 80193be:	780b      	ldrb	r3, [r1, #0]
 80193c0:	429a      	cmp	r2, r3
 80193c2:	d115      	bne.n	80193f0 <CompareBluetoothAddress+0x34>
 80193c4:	7842      	ldrb	r2, [r0, #1]
 80193c6:	784b      	ldrb	r3, [r1, #1]
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d111      	bne.n	80193f0 <CompareBluetoothAddress+0x34>
 80193cc:	7882      	ldrb	r2, [r0, #2]
 80193ce:	788b      	ldrb	r3, [r1, #2]
 80193d0:	429a      	cmp	r2, r3
 80193d2:	d10d      	bne.n	80193f0 <CompareBluetoothAddress+0x34>
 80193d4:	78c2      	ldrb	r2, [r0, #3]
 80193d6:	78cb      	ldrb	r3, [r1, #3]
 80193d8:	429a      	cmp	r2, r3
 80193da:	d109      	bne.n	80193f0 <CompareBluetoothAddress+0x34>
 80193dc:	7902      	ldrb	r2, [r0, #4]
 80193de:	790b      	ldrb	r3, [r1, #4]
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d105      	bne.n	80193f0 <CompareBluetoothAddress+0x34>
 80193e4:	7940      	ldrb	r0, [r0, #5]
 80193e6:	7949      	ldrb	r1, [r1, #5]
 80193e8:	4288      	cmp	r0, r1
 80193ea:	d101      	bne.n	80193f0 <CompareBluetoothAddress+0x34>
 80193ec:	2001      	movs	r0, #1
 80193ee:	4770      	bx	lr
 80193f0:	2000      	movs	r0, #0
 80193f2:	4770      	bx	lr

Disassembly of section i.CompareListEntryKeys:

080193f4 <CompareListEntryKeys>:
 80193f4:	b570      	push	{r4, r5, r6, lr}
 80193f6:	4613      	mov	r3, r2
 80193f8:	000d      	movs	r5, r1
 80193fa:	f04f 0400 	mov.w	r4, #0
 80193fe:	d019      	beq.n	8019434 <CompareListEntryKeys+0x40>
 8019400:	b1c3      	cbz	r3, 8019434 <CompareListEntryKeys+0x40>
 8019402:	2808      	cmp	r0, #8
 8019404:	d216      	bcs.n	8019434 <CompareListEntryKeys+0x40>
 8019406:	e8df f000 	tbb	[pc, r0]
 801940a:	1715      	.short	0x1715
 801940c:	0e0b0617 	.word	0x0e0b0617
 8019410:	0b15      	.short	0x0b15
 8019412:	2401      	movs	r4, #1
 8019414:	e00e      	b.n	8019434 <CompareListEntryKeys+0x40>
 8019416:	8828      	ldrh	r0, [r5, #0]
 8019418:	8811      	ldrh	r1, [r2, #0]
 801941a:	4288      	cmp	r0, r1
 801941c:	d0f9      	beq.n	8019412 <CompareListEntryKeys+0x1e>
 801941e:	e009      	b.n	8019434 <CompareListEntryKeys+0x40>
 8019420:	6828      	ldr	r0, [r5, #0]
 8019422:	6811      	ldr	r1, [r2, #0]
 8019424:	e7f9      	b.n	801941a <CompareListEntryKeys+0x26>
 8019426:	2206      	movs	r2, #6
 8019428:	4619      	mov	r1, r3
 801942a:	4628      	mov	r0, r5
 801942c:	f7fa f8b7 	bl	801359e <BTPS_MemCompare>
 8019430:	2800      	cmp	r0, #0
 8019432:	d0ee      	beq.n	8019412 <CompareListEntryKeys+0x1e>
 8019434:	4620      	mov	r0, r4
 8019436:	bd70      	pop	{r4, r5, r6, pc}
 8019438:	7828      	ldrb	r0, [r5, #0]
 801943a:	7811      	ldrb	r1, [r2, #0]
 801943c:	e7ed      	b.n	801941a <CompareListEntryKeys+0x26>

Disassembly of section i.CompareNULLBluetoothAddress:

0801943e <CompareNULLBluetoothAddress>:
 801943e:	7801      	ldrb	r1, [r0, #0]
 8019440:	b949      	cbnz	r1, 8019456 <CompareNULLBluetoothAddress+0x18>
 8019442:	7841      	ldrb	r1, [r0, #1]
 8019444:	b939      	cbnz	r1, 8019456 <CompareNULLBluetoothAddress+0x18>
 8019446:	7881      	ldrb	r1, [r0, #2]
 8019448:	b929      	cbnz	r1, 8019456 <CompareNULLBluetoothAddress+0x18>
 801944a:	78c1      	ldrb	r1, [r0, #3]
 801944c:	b919      	cbnz	r1, 8019456 <CompareNULLBluetoothAddress+0x18>
 801944e:	7901      	ldrb	r1, [r0, #4]
 8019450:	b909      	cbnz	r1, 8019456 <CompareNULLBluetoothAddress+0x18>
 8019452:	7940      	ldrb	r0, [r0, #5]
 8019454:	b108      	cbz	r0, 801945a <CompareNULLBluetoothAddress+0x1c>
 8019456:	2000      	movs	r0, #0
 8019458:	4770      	bx	lr
 801945a:	2001      	movs	r0, #1
 801945c:	4770      	bx	lr

Disassembly of section i.DecreaseBluetoothStackThreadCount:

08019460 <DecreaseBluetoothStackThreadCount>:
 8019460:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8019462:	0004      	movs	r4, r0
 8019464:	d032      	beq.n	80194cc <DecreaseBluetoothStackThreadCount+0x6c>
 8019466:	4d1a      	ldr	r5, [pc, #104]	; (80194d0 <DecreaseBluetoothStackThreadCount+0x70>)
 8019468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801946c:	6868      	ldr	r0, [r5, #4]
 801946e:	f7f9 ff1c 	bl	80132aa <BTPS_WaitMutex>
 8019472:	2800      	cmp	r0, #0
 8019474:	d02a      	beq.n	80194cc <DecreaseBluetoothStackThreadCount+0x6c>
 8019476:	4621      	mov	r1, r4
 8019478:	f105 0008 	add.w	r0, r5, #8
 801947c:	f000 f8a0 	bl	80195c0 <SearchBTStackEntry>
 8019480:	b1f8      	cbz	r0, 80194c2 <DecreaseBluetoothStackThreadCount+0x62>
 8019482:	6982      	ldr	r2, [r0, #24]
 8019484:	b112      	cbz	r2, 801948c <DecreaseBluetoothStackThreadCount+0x2c>
 8019486:	1e52      	subs	r2, r2, #1
 8019488:	6182      	str	r2, [r0, #24]
 801948a:	d11a      	bne.n	80194c2 <DecreaseBluetoothStackThreadCount+0x62>
 801948c:	4810      	ldr	r0, [pc, #64]	; (80194d0 <DecreaseBluetoothStackThreadCount+0x70>)
 801948e:	2364      	movs	r3, #100	; 0x64
 8019490:	3008      	adds	r0, #8
 8019492:	e9cd 0400 	strd	r0, r4, [sp]
 8019496:	2200      	movs	r2, #0
 8019498:	a901      	add	r1, sp, #4
 801949a:	2007      	movs	r0, #7
 801949c:	f7ff fb6e 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80194a0:	0004      	movs	r4, r0
 80194a2:	d005      	beq.n	80194b0 <DecreaseBluetoothStackThreadCount+0x50>
 80194a4:	6920      	ldr	r0, [r4, #16]
 80194a6:	f7f9 ff22 	bl	80132ee <BTPS_CloseMutex>
 80194aa:	4620      	mov	r0, r4
 80194ac:	f7ff fc13 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80194b0:	68a8      	ldr	r0, [r5, #8]
 80194b2:	b930      	cbnz	r0, 80194c2 <DecreaseBluetoothStackThreadCount+0x62>
 80194b4:	4806      	ldr	r0, [pc, #24]	; (80194d0 <DecreaseBluetoothStackThreadCount+0x70>)
 80194b6:	300c      	adds	r0, #12
 80194b8:	f000 f816 	bl	80194e8 <FreeBSCTimerEntryList>
 80194bc:	2000      	movs	r0, #0
 80194be:	f000 f93f 	bl	8019740 <BTPS_CleanupTimerModule>
 80194c2:	6868      	ldr	r0, [r5, #4]
 80194c4:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
 80194c8:	f7f9 bf0b 	b.w	80132e2 <BTPS_ReleaseMutex>
 80194cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80194ce:	0000      	.short	0x0000
 80194d0:	20000000 	.word	0x20000000

Disassembly of section i.DeleteBSCTimerEntry:

080194d4 <DeleteBSCTimerEntry>:
 80194d4:	b503      	push	{r0, r1, lr}
 80194d6:	b081      	sub	sp, #4
 80194d8:	2310      	movs	r3, #16
 80194da:	9000      	str	r0, [sp, #0]
 80194dc:	2204      	movs	r2, #4
 80194de:	a902      	add	r1, sp, #8
 80194e0:	2007      	movs	r0, #7
 80194e2:	f7ff fb4b 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80194e6:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.FreeBSCTimerEntryList:

080194e8 <FreeBSCTimerEntryList>:
 80194e8:	b570      	push	{r4, r5, r6, lr}
 80194ea:	0006      	movs	r6, r0
 80194ec:	d00e      	beq.n	801950c <FreeBSCTimerEntryList+0x24>
 80194ee:	6834      	ldr	r4, [r6, #0]
 80194f0:	e008      	b.n	8019504 <FreeBSCTimerEntryList+0x1c>
 80194f2:	4625      	mov	r5, r4
 80194f4:	6924      	ldr	r4, [r4, #16]
 80194f6:	e9d5 0100 	ldrd	r0, r1, [r5]
 80194fa:	f000 f9cb 	bl	8019894 <BTPS_StopTimer>
 80194fe:	4628      	mov	r0, r5
 8019500:	f7ff fbe9 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8019504:	2c00      	cmp	r4, #0
 8019506:	d1f4      	bne.n	80194f2 <FreeBSCTimerEntryList+0xa>
 8019508:	2000      	movs	r0, #0
 801950a:	6030      	str	r0, [r6, #0]
 801950c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.IncreaseBluetoothStackThreadCount:

08019510 <IncreaseBluetoothStackThreadCount>:
 8019510:	b570      	push	{r4, r5, r6, lr}
 8019512:	0005      	movs	r5, r0
 8019514:	d015      	beq.n	8019542 <IncreaseBluetoothStackThreadCount+0x32>
 8019516:	4c0b      	ldr	r4, [pc, #44]	; (8019544 <IncreaseBluetoothStackThreadCount+0x34>)
 8019518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801951c:	6860      	ldr	r0, [r4, #4]
 801951e:	f7f9 fec4 	bl	80132aa <BTPS_WaitMutex>
 8019522:	2800      	cmp	r0, #0
 8019524:	d00d      	beq.n	8019542 <IncreaseBluetoothStackThreadCount+0x32>
 8019526:	4629      	mov	r1, r5
 8019528:	f104 0008 	add.w	r0, r4, #8
 801952c:	f000 f848 	bl	80195c0 <SearchBTStackEntry>
 8019530:	b110      	cbz	r0, 8019538 <IncreaseBluetoothStackThreadCount+0x28>
 8019532:	6981      	ldr	r1, [r0, #24]
 8019534:	1c49      	adds	r1, r1, #1
 8019536:	6181      	str	r1, [r0, #24]
 8019538:	6860      	ldr	r0, [r4, #4]
 801953a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801953e:	f7f9 bed0 	b.w	80132e2 <BTPS_ReleaseMutex>
 8019542:	bd70      	pop	{r4, r5, r6, pc}
 8019544:	20000000 	.word	0x20000000

Disassembly of section i.InitializeBSCModule:

08019548 <InitializeBSCModule>:
 8019548:	b510      	push	{r4, lr}
 801954a:	2000      	movs	r0, #0
 801954c:	f7f9 fe99 	bl	8013282 <BTPS_CreateMutex>
 8019550:	4904      	ldr	r1, [pc, #16]	; (8019564 <InitializeBSCModule+0x1c>)
 8019552:	6048      	str	r0, [r1, #4]
 8019554:	b118      	cbz	r0, 801955e <InitializeBSCModule+0x16>
 8019556:	2000      	movs	r0, #0
 8019558:	6088      	str	r0, [r1, #8]
 801955a:	60c8      	str	r0, [r1, #12]
 801955c:	bd10      	pop	{r4, pc}
 801955e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019562:	bd10      	pop	{r4, pc}
 8019564:	20000000 	.word	0x20000000

Disassembly of section i.QuerySharedBuffer:

08019568 <QuerySharedBuffer>:
 8019568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801956a:	2500      	movs	r5, #0
 801956c:	4616      	mov	r6, r2
 801956e:	460f      	mov	r7, r1
 8019570:	2904      	cmp	r1, #4
 8019572:	d814      	bhi.n	801959e <QuerySharedBuffer+0x36>
 8019574:	f7ff f9e2 	bl	801893c <AcquireBluetoothStackInformation>
 8019578:	0004      	movs	r4, r0
 801957a:	d010      	beq.n	801959e <QuerySharedBuffer+0x36>
 801957c:	2000      	movs	r0, #0
 801957e:	9000      	str	r0, [sp, #0]
 8019580:	4669      	mov	r1, sp
 8019582:	4638      	mov	r0, r7
 8019584:	f7ff ff00 	bl	8019388 <CalculateBufferOffset>
 8019588:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801958a:	180d      	adds	r5, r1, r0
 801958c:	b126      	cbz	r6, 8019598 <QuerySharedBuffer+0x30>
 801958e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019590:	1a08      	subs	r0, r1, r0
 8019592:	9900      	ldr	r1, [sp, #0]
 8019594:	1a40      	subs	r0, r0, r1
 8019596:	6030      	str	r0, [r6, #0]
 8019598:	4620      	mov	r0, r4
 801959a:	f000 f803 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801959e:	4628      	mov	r0, r5
 80195a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i.ReleaseBluetoothStackInformation:

080195a4 <ReleaseBluetoothStackInformation>:
 80195a4:	4905      	ldr	r1, [pc, #20]	; (80195bc <ReleaseBluetoothStackInformation+0x18>)
 80195a6:	6849      	ldr	r1, [r1, #4]
 80195a8:	2900      	cmp	r1, #0
 80195aa:	d006      	beq.n	80195ba <ReleaseBluetoothStackInformation+0x16>
 80195ac:	2800      	cmp	r0, #0
 80195ae:	d004      	beq.n	80195ba <ReleaseBluetoothStackInformation+0x16>
 80195b0:	6900      	ldr	r0, [r0, #16]
 80195b2:	2800      	cmp	r0, #0
 80195b4:	d001      	beq.n	80195ba <ReleaseBluetoothStackInformation+0x16>
 80195b6:	f7f9 be94 	b.w	80132e2 <BTPS_ReleaseMutex>
 80195ba:	4770      	bx	lr
 80195bc:	20000000 	.word	0x20000000

Disassembly of section i.SearchBTStackEntry:

080195c0 <SearchBTStackEntry>:
 80195c0:	b503      	push	{r0, r1, lr}
 80195c2:	b081      	sub	sp, #4
 80195c4:	2364      	movs	r3, #100	; 0x64
 80195c6:	9000      	str	r0, [sp, #0]
 80195c8:	2200      	movs	r2, #0
 80195ca:	a902      	add	r1, sp, #8
 80195cc:	2007      	movs	r0, #7
 80195ce:	f7ff fdb4 	bl	801913a <BSC_SearchGenericListEntry>
 80195d2:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.TimerCallback:

080195d4 <TimerCallback>:
 80195d4:	b570      	push	{r4, r5, r6, lr}
 80195d6:	4610      	mov	r0, r2
 80195d8:	000c      	movs	r4, r1
 80195da:	d016      	beq.n	801960a <TimerCallback+0x36>
 80195dc:	b1a8      	cbz	r0, 801960a <TimerCallback+0x36>
 80195de:	f7ff f9ad 	bl	801893c <AcquireBluetoothStackInformation>
 80195e2:	0005      	movs	r5, r0
 80195e4:	d011      	beq.n	801960a <TimerCallback+0x36>
 80195e6:	4621      	mov	r1, r4
 80195e8:	4809      	ldr	r0, [pc, #36]	; (8019610 <TimerCallback+0x3c>)
 80195ea:	f7ff ff73 	bl	80194d4 <DeleteBSCTimerEntry>
 80195ee:	0004      	movs	r4, r0
 80195f0:	d008      	beq.n	8019604 <TimerCallback+0x30>
 80195f2:	68a3      	ldr	r3, [r4, #8]
 80195f4:	b11b      	cbz	r3, 80195fe <TimerCallback+0x2a>
 80195f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80195fa:	68e2      	ldr	r2, [r4, #12]
 80195fc:	4798      	blx	r3
 80195fe:	4620      	mov	r0, r4
 8019600:	f7ff fb69 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8019604:	4628      	mov	r0, r5
 8019606:	f7ff ffcd 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801960a:	2000      	movs	r0, #0
 801960c:	bd70      	pop	{r4, r5, r6, pc}
 801960e:	0000      	.short	0x0000
 8019610:	2000000c 	.word	0x2000000c

Disassembly of section i.VerifySharedBufferPointer:

08019614 <VerifySharedBufferPointer>:
 8019614:	b570      	push	{r4, r5, r6, lr}
 8019616:	000c      	movs	r4, r1
 8019618:	f04f 0500 	mov.w	r5, #0
 801961c:	d00c      	beq.n	8019638 <VerifySharedBufferPointer+0x24>
 801961e:	f7ff f98d 	bl	801893c <AcquireBluetoothStackInformation>
 8019622:	b148      	cbz	r0, 8019638 <VerifySharedBufferPointer+0x24>
 8019624:	e9d0 210e 	ldrd	r2, r1, [r0, #56]	; 0x38
 8019628:	440a      	add	r2, r1
 801962a:	42a1      	cmp	r1, r4
 801962c:	d802      	bhi.n	8019634 <VerifySharedBufferPointer+0x20>
 801962e:	4294      	cmp	r4, r2
 8019630:	d200      	bcs.n	8019634 <VerifySharedBufferPointer+0x20>
 8019632:	2501      	movs	r5, #1
 8019634:	f7ff ffb6 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019638:	4628      	mov	r0, r5
 801963a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AsynchronousCallbackFunction:

0801963c <AsynchronousCallbackFunction>:
 801963c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8019640:	460c      	mov	r4, r1
 8019642:	ea5f 0800 	movs.w	r8, r0
 8019646:	d045      	beq.n	80196d4 <AsynchronousCallbackFunction+0x98>
 8019648:	4e23      	ldr	r6, [pc, #140]	; (80196d8 <AsynchronousCallbackFunction+0x9c>)
 801964a:	2100      	movs	r1, #0
 801964c:	68f0      	ldr	r0, [r6, #12]
 801964e:	f7f9 fe54 	bl	80132fa <BTPS_WaitEvent>
 8019652:	2800      	cmp	r0, #0
 8019654:	d13e      	bne.n	80196d4 <AsynchronousCallbackFunction+0x98>
 8019656:	1e41      	subs	r1, r0, #1
 8019658:	68b0      	ldr	r0, [r6, #8]
 801965a:	f7f9 fe26 	bl	80132aa <BTPS_WaitMutex>
 801965e:	2800      	cmp	r0, #0
 8019660:	d038      	beq.n	80196d4 <AsynchronousCallbackFunction+0x98>
 8019662:	481e      	ldr	r0, [pc, #120]	; (80196dc <AsynchronousCallbackFunction+0xa0>)
 8019664:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8019668:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 801966c:	68a2      	ldr	r2, [r4, #8]
 801966e:	4542      	cmp	r2, r8
 8019670:	d12b      	bne.n	80196ca <AsynchronousCallbackFunction+0x8e>
 8019672:	f810 1025 	ldrb.w	r1, [r0, r5, lsl #2]
 8019676:	2903      	cmp	r1, #3
 8019678:	d127      	bne.n	80196ca <AsynchronousCallbackFunction+0x8e>
 801967a:	6867      	ldr	r7, [r4, #4]
 801967c:	b32f      	cbz	r7, 80196ca <AsynchronousCallbackFunction+0x8e>
 801967e:	e9d4 a905 	ldrd	sl, r9, [r4, #20]
 8019682:	4683      	mov	fp, r0
 8019684:	68b0      	ldr	r0, [r6, #8]
 8019686:	f7f9 fe2c 	bl	80132e2 <BTPS_ReleaseMutex>
 801968a:	4652      	mov	r2, sl
 801968c:	4639      	mov	r1, r7
 801968e:	4640      	mov	r0, r8
 8019690:	464b      	mov	r3, r9
 8019692:	4798      	blx	r3
 8019694:	2100      	movs	r1, #0
 8019696:	68f0      	ldr	r0, [r6, #12]
 8019698:	f7f9 fe2f 	bl	80132fa <BTPS_WaitEvent>
 801969c:	2800      	cmp	r0, #0
 801969e:	d119      	bne.n	80196d4 <AsynchronousCallbackFunction+0x98>
 80196a0:	1e41      	subs	r1, r0, #1
 80196a2:	68b0      	ldr	r0, [r6, #8]
 80196a4:	f7f9 fe01 	bl	80132aa <BTPS_WaitMutex>
 80196a8:	2800      	cmp	r0, #0
 80196aa:	d013      	beq.n	80196d4 <AsynchronousCallbackFunction+0x98>
 80196ac:	f81b 0025 	ldrb.w	r0, [fp, r5, lsl #2]
 80196b0:	2803      	cmp	r0, #3
 80196b2:	d10a      	bne.n	80196ca <AsynchronousCallbackFunction+0x8e>
 80196b4:	6860      	ldr	r0, [r4, #4]
 80196b6:	42b8      	cmp	r0, r7
 80196b8:	d107      	bne.n	80196ca <AsynchronousCallbackFunction+0x8e>
 80196ba:	2000      	movs	r0, #0
 80196bc:	6060      	str	r0, [r4, #4]
 80196be:	f80b 0025 	strb.w	r0, [fp, r5, lsl #2]
 80196c2:	60a0      	str	r0, [r4, #8]
 80196c4:	6870      	ldr	r0, [r6, #4]
 80196c6:	1e40      	subs	r0, r0, #1
 80196c8:	6070      	str	r0, [r6, #4]
 80196ca:	68b0      	ldr	r0, [r6, #8]
 80196cc:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80196d0:	f7f9 be07 	b.w	80132e2 <BTPS_ReleaseMutex>
 80196d4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 80196d8:	20000010 	.word	0x20000010
 80196dc:	20000a7c 	.word	0x20000a7c

Disassembly of section i.BTPS_ChangeTimer:

080196e0 <BTPS_ChangeTimer>:
 80196e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196e4:	4814      	ldr	r0, [pc, #80]	; (8019738 <BTPS_ChangeTimer+0x58>)
 80196e6:	460f      	mov	r7, r1
 80196e8:	2400      	movs	r4, #0
 80196ea:	7801      	ldrb	r1, [r0, #0]
 80196ec:	4616      	mov	r6, r2
 80196ee:	4625      	mov	r5, r4
 80196f0:	b1f9      	cbz	r1, 8019732 <BTPS_ChangeTimer+0x52>
 80196f2:	b1f7      	cbz	r7, 8019732 <BTPS_ChangeTimer+0x52>
 80196f4:	b1ee      	cbz	r6, 8019732 <BTPS_ChangeTimer+0x52>
 80196f6:	4680      	mov	r8, r0
 80196f8:	1e61      	subs	r1, r4, #1
 80196fa:	6880      	ldr	r0, [r0, #8]
 80196fc:	f7f9 fdd5 	bl	80132aa <BTPS_WaitMutex>
 8019700:	b1b8      	cbz	r0, 8019732 <BTPS_ChangeTimer+0x52>
 8019702:	4a0e      	ldr	r2, [pc, #56]	; (801973c <BTPS_ChangeTimer+0x5c>)
 8019704:	2300      	movs	r3, #0
 8019706:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 801970a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801970e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8019712:	45bc      	cmp	ip, r7
 8019714:	d105      	bne.n	8019722 <BTPS_ChangeTimer+0x42>
 8019716:	f812 1021 	ldrb.w	r1, [r2, r1, lsl #2]
 801971a:	b111      	cbz	r1, 8019722 <BTPS_ChangeTimer+0x42>
 801971c:	e9c0 3603 	strd	r3, r6, [r0, #12]
 8019720:	2501      	movs	r5, #1
 8019722:	1c64      	adds	r4, r4, #1
 8019724:	b90d      	cbnz	r5, 801972a <BTPS_ChangeTimer+0x4a>
 8019726:	2c10      	cmp	r4, #16
 8019728:	d3ed      	bcc.n	8019706 <BTPS_ChangeTimer+0x26>
 801972a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801972e:	f7f9 fdd8 	bl	80132e2 <BTPS_ReleaseMutex>
 8019732:	4628      	mov	r0, r5
 8019734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019738:	20000010 	.word	0x20000010
 801973c:	20000a7c 	.word	0x20000a7c

Disassembly of section i.BTPS_CleanupTimerModule:

08019740 <BTPS_CleanupTimerModule>:
 8019740:	b510      	push	{r4, lr}
 8019742:	4c11      	ldr	r4, [pc, #68]	; (8019788 <BTPS_CleanupTimerModule+0x48>)
 8019744:	7821      	ldrb	r1, [r4, #0]
 8019746:	b1b1      	cbz	r1, 8019776 <BTPS_CleanupTimerModule+0x36>
 8019748:	b938      	cbnz	r0, 801975a <BTPS_CleanupTimerModule+0x1a>
 801974a:	68e0      	ldr	r0, [r4, #12]
 801974c:	b108      	cbz	r0, 8019752 <BTPS_CleanupTimerModule+0x12>
 801974e:	f7f9 fe1c 	bl	801338a <BTPS_SetEvent>
 8019752:	6960      	ldr	r0, [r4, #20]
 8019754:	b108      	cbz	r0, 801975a <BTPS_CleanupTimerModule+0x1a>
 8019756:	f7f9 fe18 	bl	801338a <BTPS_SetEvent>
 801975a:	6920      	ldr	r0, [r4, #16]
 801975c:	b938      	cbnz	r0, 801976e <BTPS_CleanupTimerModule+0x2e>
 801975e:	68e0      	ldr	r0, [r4, #12]
 8019760:	b108      	cbz	r0, 8019766 <BTPS_CleanupTimerModule+0x26>
 8019762:	f7f9 fe8f 	bl	8013484 <BTPS_CloseEvent>
 8019766:	6960      	ldr	r0, [r4, #20]
 8019768:	b108      	cbz	r0, 801976e <BTPS_CleanupTimerModule+0x2e>
 801976a:	f7f9 fe8b 	bl	8013484 <BTPS_CloseEvent>
 801976e:	68a0      	ldr	r0, [r4, #8]
 8019770:	b108      	cbz	r0, 8019776 <BTPS_CleanupTimerModule+0x36>
 8019772:	f7f9 fdbc 	bl	80132ee <BTPS_CloseMutex>
 8019776:	2000      	movs	r0, #0
 8019778:	60a0      	str	r0, [r4, #8]
 801977a:	6160      	str	r0, [r4, #20]
 801977c:	60e0      	str	r0, [r4, #12]
 801977e:	6120      	str	r0, [r4, #16]
 8019780:	61a0      	str	r0, [r4, #24]
 8019782:	6060      	str	r0, [r4, #4]
 8019784:	7020      	strb	r0, [r4, #0]
 8019786:	bd10      	pop	{r4, pc}
 8019788:	20000010 	.word	0x20000010

Disassembly of section i.BTPS_InitializeTimerModule:

0801978c <BTPS_InitializeTimerModule>:
 801978c:	b570      	push	{r4, r5, r6, lr}
 801978e:	4d19      	ldr	r5, [pc, #100]	; (80197f4 <BTPS_InitializeTimerModule+0x68>)
 8019790:	2400      	movs	r4, #0
 8019792:	7828      	ldrb	r0, [r5, #0]
 8019794:	bb00      	cbnz	r0, 80197d8 <BTPS_InitializeTimerModule+0x4c>
 8019796:	2000      	movs	r0, #0
 8019798:	4601      	mov	r1, r0
 801979a:	6068      	str	r0, [r5, #4]
 801979c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80197a0:	4815      	ldr	r0, [pc, #84]	; (80197f8 <BTPS_InitializeTimerModule+0x6c>)
 80197a2:	f7f9 fe8c 	bl	80134be <BTPS_MemInitialize>
 80197a6:	2000      	movs	r0, #0
 80197a8:	f7f9 fd6b 	bl	8013282 <BTPS_CreateMutex>
 80197ac:	60a8      	str	r0, [r5, #8]
 80197ae:	b1e8      	cbz	r0, 80197ec <BTPS_InitializeTimerModule+0x60>
 80197b0:	2000      	movs	r0, #0
 80197b2:	f7f9 fe35 	bl	8013420 <BTPS_CreateEvent>
 80197b6:	6168      	str	r0, [r5, #20]
 80197b8:	b1a8      	cbz	r0, 80197e6 <BTPS_InitializeTimerModule+0x5a>
 80197ba:	2000      	movs	r0, #0
 80197bc:	f7f9 fe30 	bl	8013420 <BTPS_CreateEvent>
 80197c0:	60e8      	str	r0, [r5, #12]
 80197c2:	b168      	cbz	r0, 80197e0 <BTPS_InitializeTimerModule+0x54>
 80197c4:	2200      	movs	r2, #0
 80197c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80197ca:	480c      	ldr	r0, [pc, #48]	; (80197fc <BTPS_InitializeTimerModule+0x70>)
 80197cc:	f7f9 fefe 	bl	80135cc <BTPS_CreateThread>
 80197d0:	6128      	str	r0, [r5, #16]
 80197d2:	b110      	cbz	r0, 80197da <BTPS_InitializeTimerModule+0x4e>
 80197d4:	2001      	movs	r0, #1
 80197d6:	7028      	strb	r0, [r5, #0]
 80197d8:	e00a      	b.n	80197f0 <BTPS_InitializeTimerModule+0x64>
 80197da:	f06f 0403 	mvn.w	r4, #3
 80197de:	e007      	b.n	80197f0 <BTPS_InitializeTimerModule+0x64>
 80197e0:	f06f 0402 	mvn.w	r4, #2
 80197e4:	e004      	b.n	80197f0 <BTPS_InitializeTimerModule+0x64>
 80197e6:	f06f 0401 	mvn.w	r4, #1
 80197ea:	e001      	b.n	80197f0 <BTPS_InitializeTimerModule+0x64>
 80197ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80197f0:	4620      	mov	r0, r4
 80197f2:	bd70      	pop	{r4, r5, r6, pc}
 80197f4:	20000010 	.word	0x20000010
 80197f8:	20000a7c 	.word	0x20000a7c
 80197fc:	0801994d 	.word	0x0801994d

Disassembly of section i.BTPS_StartTimer:

08019800 <BTPS_StartTimer>:
 8019800:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8019804:	4821      	ldr	r0, [pc, #132]	; (801988c <BTPS_StartTimer+0x8c>)
 8019806:	2500      	movs	r5, #0
 8019808:	4699      	mov	r9, r3
 801980a:	7801      	ldrb	r1, [r0, #0]
 801980c:	4692      	mov	sl, r2
 801980e:	462f      	mov	r7, r5
 8019810:	b3b9      	cbz	r1, 8019882 <BTPS_StartTimer+0x82>
 8019812:	f1ba 0f00 	cmp.w	sl, #0
 8019816:	d034      	beq.n	8019882 <BTPS_StartTimer+0x82>
 8019818:	f1b9 0f00 	cmp.w	r9, #0
 801981c:	d031      	beq.n	8019882 <BTPS_StartTimer+0x82>
 801981e:	4683      	mov	fp, r0
 8019820:	1e69      	subs	r1, r5, #1
 8019822:	6880      	ldr	r0, [r0, #8]
 8019824:	f7f9 fd41 	bl	80132aa <BTPS_WaitMutex>
 8019828:	b358      	cbz	r0, 8019882 <BTPS_StartTimer+0x82>
 801982a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8019890 <BTPS_StartTimer+0x90>
 801982e:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8019832:	eb08 0486 	add.w	r4, r8, r6, lsl #2
 8019836:	6861      	ldr	r1, [r4, #4]
 8019838:	b9d9      	cbnz	r1, 8019872 <BTPS_StartTimer+0x72>
 801983a:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
 801983e:	b9c0      	cbnz	r0, 8019872 <BTPS_StartTimer+0x72>
 8019840:	f000 f862 	bl	8019908 <GetNextTimerID>
 8019844:	4607      	mov	r7, r0
 8019846:	6060      	str	r0, [r4, #4]
 8019848:	9800      	ldr	r0, [sp, #0]
 801984a:	60a0      	str	r0, [r4, #8]
 801984c:	2001      	movs	r0, #1
 801984e:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
 8019852:	2000      	movs	r0, #0
 8019854:	60e0      	str	r0, [r4, #12]
 8019856:	9801      	ldr	r0, [sp, #4]
 8019858:	f8c4 a018 	str.w	sl, [r4, #24]
 801985c:	e9c4 9004 	strd	r9, r0, [r4, #16]
 8019860:	f8db 1004 	ldr.w	r1, [fp, #4]
 8019864:	1c49      	adds	r1, r1, #1
 8019866:	f8cb 1004 	str.w	r1, [fp, #4]
 801986a:	f8db 0014 	ldr.w	r0, [fp, #20]
 801986e:	f7f9 fd8c 	bl	801338a <BTPS_SetEvent>
 8019872:	1c6d      	adds	r5, r5, #1
 8019874:	b90f      	cbnz	r7, 801987a <BTPS_StartTimer+0x7a>
 8019876:	2d10      	cmp	r5, #16
 8019878:	d3d9      	bcc.n	801982e <BTPS_StartTimer+0x2e>
 801987a:	f8db 0008 	ldr.w	r0, [fp, #8]
 801987e:	f7f9 fd30 	bl	80132e2 <BTPS_ReleaseMutex>
 8019882:	b004      	add	sp, #16
 8019884:	4638      	mov	r0, r7
 8019886:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 801988a:	0000      	.short	0x0000
 801988c:	20000010 	.word	0x20000010
 8019890:	20000a7c 	.word	0x20000a7c

Disassembly of section i.BTPS_StopTimer:

08019894 <BTPS_StopTimer>:
 8019894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019898:	4f19      	ldr	r7, [pc, #100]	; (8019900 <BTPS_StopTimer+0x6c>)
 801989a:	2400      	movs	r4, #0
 801989c:	460e      	mov	r6, r1
 801989e:	7838      	ldrb	r0, [r7, #0]
 80198a0:	4625      	mov	r5, r4
 80198a2:	b348      	cbz	r0, 80198f8 <BTPS_StopTimer+0x64>
 80198a4:	b346      	cbz	r6, 80198f8 <BTPS_StopTimer+0x64>
 80198a6:	1e61      	subs	r1, r4, #1
 80198a8:	68b8      	ldr	r0, [r7, #8]
 80198aa:	f7f9 fcfe 	bl	80132aa <BTPS_WaitMutex>
 80198ae:	b318      	cbz	r0, 80198f8 <BTPS_StopTimer+0x64>
 80198b0:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8019904 <BTPS_StopTimer+0x70>
 80198b4:	46a1      	mov	r9, r4
 80198b6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80198ba:	eb08 0081 	add.w	r0, r8, r1, lsl #2
 80198be:	4643      	mov	r3, r8
 80198c0:	6842      	ldr	r2, [r0, #4]
 80198c2:	42b2      	cmp	r2, r6
 80198c4:	d111      	bne.n	80198ea <BTPS_StopTimer+0x56>
 80198c6:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
 80198ca:	b172      	cbz	r2, 80198ea <BTPS_StopTimer+0x56>
 80198cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80198d0:	f808 9021 	strb.w	r9, [r8, r1, lsl #2]
 80198d4:	f8c0 9008 	str.w	r9, [r0, #8]
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f04f 0501 	mov.w	r5, #1
 80198de:	1e40      	subs	r0, r0, #1
 80198e0:	6078      	str	r0, [r7, #4]
 80198e2:	d102      	bne.n	80198ea <BTPS_StopTimer+0x56>
 80198e4:	6978      	ldr	r0, [r7, #20]
 80198e6:	f7f9 fd39 	bl	801335c <BTPS_ResetEvent>
 80198ea:	1c64      	adds	r4, r4, #1
 80198ec:	b90d      	cbnz	r5, 80198f2 <BTPS_StopTimer+0x5e>
 80198ee:	2c10      	cmp	r4, #16
 80198f0:	d3e1      	bcc.n	80198b6 <BTPS_StopTimer+0x22>
 80198f2:	68b8      	ldr	r0, [r7, #8]
 80198f4:	f7f9 fcf5 	bl	80132e2 <BTPS_ReleaseMutex>
 80198f8:	4628      	mov	r0, r5
 80198fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198fe:	0000      	.short	0x0000
 8019900:	20000010 	.word	0x20000010
 8019904:	20000a7c 	.word	0x20000a7c

Disassembly of section i.GetNextTimerID:

08019908 <GetNextTimerID>:
 8019908:	b570      	push	{r4, r5, r6, lr}
 801990a:	2000      	movs	r0, #0
 801990c:	4c0d      	ldr	r4, [pc, #52]	; (8019944 <GetNextTimerID+0x3c>)
 801990e:	4b0e      	ldr	r3, [pc, #56]	; (8019948 <GetNextTimerID+0x40>)
 8019910:	2501      	movs	r5, #1
 8019912:	699a      	ldr	r2, [r3, #24]
 8019914:	b18a      	cbz	r2, 801993a <GetNextTimerID+0x32>
 8019916:	2100      	movs	r1, #0
 8019918:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 801991c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8019920:	6876      	ldr	r6, [r6, #4]
 8019922:	4296      	cmp	r6, r2
 8019924:	d002      	beq.n	801992c <GetNextTimerID+0x24>
 8019926:	1c49      	adds	r1, r1, #1
 8019928:	2910      	cmp	r1, #16
 801992a:	d3f5      	bcc.n	8019918 <GetNextTimerID+0x10>
 801992c:	2910      	cmp	r1, #16
 801992e:	d102      	bne.n	8019936 <GetNextTimerID+0x2e>
 8019930:	4610      	mov	r0, r2
 8019932:	1c52      	adds	r2, r2, #1
 8019934:	619a      	str	r2, [r3, #24]
 8019936:	2a00      	cmp	r2, #0
 8019938:	da00      	bge.n	801993c <GetNextTimerID+0x34>
 801993a:	619d      	str	r5, [r3, #24]
 801993c:	2800      	cmp	r0, #0
 801993e:	d0e8      	beq.n	8019912 <GetNextTimerID+0xa>
 8019940:	bd70      	pop	{r4, r5, r6, pc}
 8019942:	0000      	.short	0x0000
 8019944:	20000a7c 	.word	0x20000a7c
 8019948:	20000010 	.word	0x20000010

Disassembly of section i.TimerThread:

0801994c <TimerThread>:
 801994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019950:	4d1c      	ldr	r5, [pc, #112]	; (80199c4 <TimerThread+0x78>)
 8019952:	68e8      	ldr	r0, [r5, #12]
 8019954:	ea5f 0800 	movs.w	r8, r0
 8019958:	d030      	beq.n	80199bc <TimerThread+0x70>
 801995a:	696f      	ldr	r7, [r5, #20]
 801995c:	b377      	cbz	r7, 80199bc <TimerThread+0x70>
 801995e:	2400      	movs	r4, #0
 8019960:	1e66      	subs	r6, r4, #1
 8019962:	2100      	movs	r1, #0
 8019964:	4640      	mov	r0, r8
 8019966:	f7f9 fcc8 	bl	80132fa <BTPS_WaitEvent>
 801996a:	bb08      	cbnz	r0, 80199b0 <TimerThread+0x64>
 801996c:	2032      	movs	r0, #50	; 0x32
 801996e:	f7f9 fc7c 	bl	801326a <BTPS_Delay>
 8019972:	4631      	mov	r1, r6
 8019974:	4638      	mov	r0, r7
 8019976:	f7f9 fcc0 	bl	80132fa <BTPS_WaitEvent>
 801997a:	b1c8      	cbz	r0, 80199b0 <TimerThread+0x64>
 801997c:	2100      	movs	r1, #0
 801997e:	4640      	mov	r0, r8
 8019980:	f7f9 fcbb 	bl	80132fa <BTPS_WaitEvent>
 8019984:	b9a0      	cbnz	r0, 80199b0 <TimerThread+0x64>
 8019986:	4631      	mov	r1, r6
 8019988:	68a8      	ldr	r0, [r5, #8]
 801998a:	f7f9 fc8e 	bl	80132aa <BTPS_WaitMutex>
 801998e:	b178      	cbz	r0, 80199b0 <TimerThread+0x64>
 8019990:	2001      	movs	r0, #1
 8019992:	f000 f819 	bl	80199c8 <UpdateAndExpireTimers>
 8019996:	b128      	cbz	r0, 80199a4 <TimerThread+0x58>
 8019998:	6868      	ldr	r0, [r5, #4]
 801999a:	b920      	cbnz	r0, 80199a6 <TimerThread+0x5a>
 801999c:	4638      	mov	r0, r7
 801999e:	f7f9 fcdd 	bl	801335c <BTPS_ResetEvent>
 80199a2:	e000      	b.n	80199a6 <TimerThread+0x5a>
 80199a4:	2401      	movs	r4, #1
 80199a6:	68a8      	ldr	r0, [r5, #8]
 80199a8:	f7f9 fc9b 	bl	80132e2 <BTPS_ReleaseMutex>
 80199ac:	2c00      	cmp	r4, #0
 80199ae:	d0d8      	beq.n	8019962 <TimerThread+0x16>
 80199b0:	4640      	mov	r0, r8
 80199b2:	f7f9 fd67 	bl	8013484 <BTPS_CloseEvent>
 80199b6:	4638      	mov	r0, r7
 80199b8:	f7f9 fd64 	bl	8013484 <BTPS_CloseEvent>
 80199bc:	2000      	movs	r0, #0
 80199be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199c2:	0000      	.short	0x0000
 80199c4:	20000010 	.word	0x20000010

Disassembly of section i.UpdateAndExpireTimers:

080199c8 <UpdateAndExpireTimers>:
 80199c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199cc:	4e19      	ldr	r6, [pc, #100]	; (8019a34 <UpdateAndExpireTimers+0x6c>)
 80199ce:	4f1a      	ldr	r7, [pc, #104]	; (8019a38 <UpdateAndExpireTimers+0x70>)
 80199d0:	f04f 0801 	mov.w	r8, #1
 80199d4:	2500      	movs	r5, #0
 80199d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80199da:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 80199de:	f816 1020 	ldrb.w	r1, [r6, r0, lsl #2]
 80199e2:	2901      	cmp	r1, #1
 80199e4:	d11f      	bne.n	8019a26 <UpdateAndExpireTimers+0x5e>
 80199e6:	eb06 0480 	add.w	r4, r6, r0, lsl #2
 80199ea:	6861      	ldr	r1, [r4, #4]
 80199ec:	b1d9      	cbz	r1, 8019a26 <UpdateAndExpireTimers+0x5e>
 80199ee:	68e1      	ldr	r1, [r4, #12]
 80199f0:	3132      	adds	r1, #50	; 0x32
 80199f2:	60e1      	str	r1, [r4, #12]
 80199f4:	6922      	ldr	r2, [r4, #16]
 80199f6:	4291      	cmp	r1, r2
 80199f8:	d315      	bcc.n	8019a26 <UpdateAndExpireTimers+0x5e>
 80199fa:	2103      	movs	r1, #3
 80199fc:	f806 1020 	strb.w	r1, [r6, r0, lsl #2]
 8019a00:	68b8      	ldr	r0, [r7, #8]
 8019a02:	f7f9 fc6e 	bl	80132e2 <BTPS_ReleaseMutex>
 8019a06:	68a0      	ldr	r0, [r4, #8]
 8019a08:	1c41      	adds	r1, r0, #1
 8019a0a:	d004      	beq.n	8019a16 <UpdateAndExpireTimers+0x4e>
 8019a0c:	462a      	mov	r2, r5
 8019a0e:	490b      	ldr	r1, [pc, #44]	; (8019a3c <UpdateAndExpireTimers+0x74>)
 8019a10:	f7ff fb7a 	bl	8019108 <BSC_ScheduleAsynchronousCallback>
 8019a14:	e003      	b.n	8019a1e <UpdateAndExpireTimers+0x56>
 8019a16:	4629      	mov	r1, r5
 8019a18:	4648      	mov	r0, r9
 8019a1a:	f7ff fe0f 	bl	801963c <AsynchronousCallbackFunction>
 8019a1e:	4649      	mov	r1, r9
 8019a20:	68b8      	ldr	r0, [r7, #8]
 8019a22:	f7f9 fc42 	bl	80132aa <BTPS_WaitMutex>
 8019a26:	1c6d      	adds	r5, r5, #1
 8019a28:	2d10      	cmp	r5, #16
 8019a2a:	d3d6      	bcc.n	80199da <UpdateAndExpireTimers+0x12>
 8019a2c:	4640      	mov	r0, r8
 8019a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a32:	0000      	.short	0x0000
 8019a34:	20000a7c 	.word	0x20000a7c
 8019a38:	20000010 	.word	0x20000010
 8019a3c:	0801963d 	.word	0x0801963d

Disassembly of section i.AcquireGAPLEContext:

08019a40 <AcquireGAPLEContext>:
 8019a40:	b570      	push	{r4, r5, r6, lr}
 8019a42:	460c      	mov	r4, r1
 8019a44:	0005      	movs	r5, r0
 8019a46:	d00e      	beq.n	8019a66 <AcquireGAPLEContext+0x26>
 8019a48:	b16c      	cbz	r4, 8019a66 <AcquireGAPLEContext+0x26>
 8019a4a:	4610      	mov	r0, r2
 8019a4c:	f7fe ff76 	bl	801893c <AcquireBluetoothStackInformation>
 8019a50:	6028      	str	r0, [r5, #0]
 8019a52:	2800      	cmp	r0, #0
 8019a54:	d004      	beq.n	8019a60 <AcquireGAPLEContext+0x20>
 8019a56:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8019a58:	b11a      	cbz	r2, 8019a62 <AcquireGAPLEContext+0x22>
 8019a5a:	6950      	ldr	r0, [r2, #20]
 8019a5c:	6020      	str	r0, [r4, #0]
 8019a5e:	2001      	movs	r0, #1
 8019a60:	bd70      	pop	{r4, r5, r6, pc}
 8019a62:	f7ff fd9f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019a66:	2000      	movs	r0, #0
 8019a68:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AcquireGAPStackACLInfo:

08019a6a <AcquireGAPStackACLInfo>:
 8019a6a:	b570      	push	{r4, r5, r6, lr}
 8019a6c:	4605      	mov	r5, r0
 8019a6e:	461e      	mov	r6, r3
 8019a70:	460c      	mov	r4, r1
 8019a72:	4610      	mov	r0, r2
 8019a74:	f7fe ff62 	bl	801893c <AcquireBluetoothStackInformation>
 8019a78:	6028      	str	r0, [r5, #0]
 8019a7a:	b198      	cbz	r0, 8019aa4 <AcquireGAPStackACLInfo+0x3a>
 8019a7c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8019a7e:	b172      	cbz	r2, 8019a9e <AcquireGAPStackACLInfo+0x34>
 8019a80:	4631      	mov	r1, r6
 8019a82:	f102 001c 	add.w	r0, r2, #28
 8019a86:	f001 fb94 	bl	801b1b2 <SearchACLLinkEntryBD_ADDR>
 8019a8a:	6020      	str	r0, [r4, #0]
 8019a8c:	b108      	cbz	r0, 8019a92 <AcquireGAPStackACLInfo+0x28>
 8019a8e:	2400      	movs	r4, #0
 8019a90:	e00a      	b.n	8019aa8 <AcquireGAPStackACLInfo+0x3e>
 8019a92:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019a96:	6828      	ldr	r0, [r5, #0]
 8019a98:	f7ff fd84 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019a9c:	e004      	b.n	8019aa8 <AcquireGAPStackACLInfo+0x3e>
 8019a9e:	f06f 0437 	mvn.w	r4, #55	; 0x37
 8019aa2:	e7f9      	b.n	8019a98 <AcquireGAPStackACLInfo+0x2e>
 8019aa4:	f06f 0401 	mvn.w	r4, #1
 8019aa8:	4620      	mov	r0, r4
 8019aaa:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AcquireGAPStackInformation:

08019aac <AcquireGAPStackInformation>:
 8019aac:	b510      	push	{r4, lr}
 8019aae:	4604      	mov	r4, r0
 8019ab0:	4608      	mov	r0, r1
 8019ab2:	f7fe ff43 	bl	801893c <AcquireBluetoothStackInformation>
 8019ab6:	6020      	str	r0, [r4, #0]
 8019ab8:	b140      	cbz	r0, 8019acc <AcquireGAPStackInformation+0x20>
 8019aba:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8019abc:	b109      	cbz	r1, 8019ac2 <AcquireGAPStackInformation+0x16>
 8019abe:	2400      	movs	r4, #0
 8019ac0:	e006      	b.n	8019ad0 <AcquireGAPStackInformation+0x24>
 8019ac2:	f06f 0437 	mvn.w	r4, #55	; 0x37
 8019ac6:	f7ff fd6d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019aca:	e001      	b.n	8019ad0 <AcquireGAPStackInformation+0x24>
 8019acc:	f06f 0401 	mvn.w	r4, #1
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	bd10      	pop	{r4, pc}

Disassembly of section i.BSC_Event_Callback:

08019ad4 <BSC_Event_Callback>:
 8019ad4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8019ad6:	000c      	movs	r4, r1
 8019ad8:	4605      	mov	r5, r0
 8019ada:	d022      	beq.n	8019b22 <BSC_Event_Callback+0x4e>
 8019adc:	4602      	mov	r2, r0
 8019ade:	a902      	add	r1, sp, #8
 8019ae0:	a801      	add	r0, sp, #4
 8019ae2:	68a3      	ldr	r3, [r4, #8]
 8019ae4:	f7ff ffc1 	bl	8019a6a <AcquireGAPStackACLInfo>
 8019ae8:	2800      	cmp	r0, #0
 8019aea:	d11a      	bne.n	8019b22 <BSC_Event_Callback+0x4e>
 8019aec:	7820      	ldrb	r0, [r4, #0]
 8019aee:	b9a8      	cbnz	r0, 8019b1c <BSC_Event_Callback+0x48>
 8019af0:	9801      	ldr	r0, [sp, #4]
 8019af2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019af4:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019af6:	b168      	cbz	r0, 8019b14 <BSC_Event_Callback+0x40>
 8019af8:	9902      	ldr	r1, [sp, #8]
 8019afa:	2001      	movs	r0, #1
 8019afc:	7088      	strb	r0, [r1, #2]
 8019afe:	9801      	ldr	r0, [sp, #4]
 8019b00:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8019b02:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8019b04:	9000      	str	r0, [sp, #0]
 8019b06:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8019b08:	68a1      	ldr	r1, [r4, #8]
 8019b0a:	4628      	mov	r0, r5
 8019b0c:	c906      	ldmia	r1, {r1, r2}
 8019b0e:	f000 f8cf 	bl	8019cb0 <GAP_Authenticate_Remote_Device>
 8019b12:	b138      	cbz	r0, 8019b24 <BSC_Event_Callback+0x50>
 8019b14:	2003      	movs	r0, #3
 8019b16:	68a1      	ldr	r1, [r4, #8]
 8019b18:	6889      	ldr	r1, [r1, #8]
 8019b1a:	7008      	strb	r0, [r1, #0]
 8019b1c:	9801      	ldr	r0, [sp, #4]
 8019b1e:	f7ff fd41 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019b22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8019b24:	2001      	movs	r0, #1
 8019b26:	e7f6      	b.n	8019b16 <BSC_Event_Callback+0x42>

Disassembly of section i.CleanUpInquiry:

08019b28 <CleanUpInquiry>:
 8019b28:	b570      	push	{r4, r5, r6, lr}
 8019b2a:	2500      	movs	r5, #0
 8019b2c:	4604      	mov	r4, r0
 8019b2e:	6385      	str	r5, [r0, #56]	; 0x38
 8019b30:	3040      	adds	r0, #64	; 0x40
 8019b32:	f000 f8ba 	bl	8019caa <FreeInquiryResultList>
 8019b36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8019b38:	2800      	cmp	r0, #0
 8019b3a:	d102      	bne.n	8019b42 <CleanUpInquiry+0x1a>
 8019b3c:	6325      	str	r5, [r4, #48]	; 0x30
 8019b3e:	6365      	str	r5, [r4, #52]	; 0x34
 8019b40:	63e5      	str	r5, [r4, #60]	; 0x3c
 8019b42:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.DeleteACLLinkEntryConnection_Handle:

08019b44 <DeleteACLLinkEntryConnection_Handle>:
 8019b44:	b503      	push	{r0, r1, lr}
 8019b46:	b081      	sub	sp, #4
 8019b48:	2320      	movs	r3, #32
 8019b4a:	9000      	str	r0, [sp, #0]
 8019b4c:	2200      	movs	r2, #0
 8019b4e:	a902      	add	r1, sp, #8
 8019b50:	2003      	movs	r0, #3
 8019b52:	f7ff f813 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8019b56:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DeleteCallbackEntry:

08019b58 <DeleteCallbackEntry>:
 8019b58:	b508      	push	{r3, lr}
 8019b5a:	2314      	movs	r3, #20
 8019b5c:	9000      	str	r0, [sp, #0]
 8019b5e:	2200      	movs	r2, #0
 8019b60:	2005      	movs	r0, #5
 8019b62:	f7ff f80b 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8019b66:	bd08      	pop	{r3, pc}

08019b68 <DeleteCallbackEntry>:
 8019b68:	b503      	push	{r0, r1, lr}
 8019b6a:	b081      	sub	sp, #4
 8019b6c:	230c      	movs	r3, #12
 8019b6e:	9000      	str	r0, [sp, #0]
 8019b70:	2200      	movs	r2, #0
 8019b72:	a902      	add	r1, sp, #8
 8019b74:	2007      	movs	r0, #7
 8019b76:	f7ff f801 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8019b7a:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.Discoverability_Timeout_Callback:

08019b7c <Discoverability_Timeout_Callback>:
 8019b7c:	b570      	push	{r4, r5, r6, lr}
 8019b7e:	4615      	mov	r5, r2
 8019b80:	f7fe fedc 	bl	801893c <AcquireBluetoothStackInformation>
 8019b84:	0004      	movs	r4, r0
 8019b86:	d00a      	beq.n	8019b9e <Discoverability_Timeout_Callback+0x22>
 8019b88:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	6188      	str	r0, [r1, #24]
 8019b90:	4601      	mov	r1, r0
 8019b92:	4628      	mov	r0, r5
 8019b94:	f000 f99a 	bl	8019ecc <GAP_Set_Discoverability_Mode>
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f7ff fd03 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019b9e:	2000      	movs	r0, #0
 8019ba0:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FormatAndDispatchAuthenticationEvent:

08019ba2 <FormatAndDispatchAuthenticationEvent>:
 8019ba2:	b570      	push	{r4, r5, r6, lr}
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	2002      	movs	r0, #2
 8019ba8:	7008      	strb	r0, [r1, #0]
 8019baa:	201c      	movs	r0, #28
 8019bac:	8048      	strh	r0, [r1, #2]
 8019bae:	460d      	mov	r5, r1
 8019bb0:	604a      	str	r2, [r1, #4]
 8019bb2:	1c51      	adds	r1, r2, #1
 8019bb4:	f104 001c 	add.w	r0, r4, #28
 8019bb8:	f001 fafb 	bl	801b1b2 <SearchACLLinkEntryBD_ADDR>
 8019bbc:	b128      	cbz	r0, 8019bca <FormatAndDispatchAuthenticationEvent+0x28>
 8019bbe:	6983      	ldr	r3, [r0, #24]
 8019bc0:	b11b      	cbz	r3, 8019bca <FormatAndDispatchAuthenticationEvent+0x28>
 8019bc2:	7d01      	ldrb	r1, [r0, #20]
 8019bc4:	b949      	cbnz	r1, 8019bda <FormatAndDispatchAuthenticationEvent+0x38>
 8019bc6:	69c2      	ldr	r2, [r0, #28]
 8019bc8:	e002      	b.n	8019bd0 <FormatAndDispatchAuthenticationEvent+0x2e>
 8019bca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019bcc:	b12b      	cbz	r3, 8019bda <FormatAndDispatchAuthenticationEvent+0x38>
 8019bce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019bd0:	4629      	mov	r1, r5
 8019bd2:	6820      	ldr	r0, [r4, #0]
 8019bd4:	4798      	blx	r3
 8019bd6:	2001      	movs	r0, #1
 8019bd8:	bd70      	pop	{r4, r5, r6, pc}
 8019bda:	2000      	movs	r0, #0
 8019bdc:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FormatAndDispatchAuthenticationStatusEvent:

08019bde <FormatAndDispatchAuthenticationStatusEvent>:
 8019bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019be0:	b087      	sub	sp, #28
 8019be2:	4615      	mov	r5, r2
 8019be4:	e9dd 260c 	ldrd	r2, r6, [sp, #48]	; 0x30
 8019be8:	2402      	movs	r4, #2
 8019bea:	700c      	strb	r4, [r1, #0]
 8019bec:	271c      	movs	r7, #28
 8019bee:	804f      	strh	r7, [r1, #2]
 8019bf0:	f8c1 d004 	str.w	sp, [r1, #4]
 8019bf4:	f88d 4000 	strb.w	r4, [sp]
 8019bf8:	6814      	ldr	r4, [r2, #0]
 8019bfa:	f8cd 4001 	str.w	r4, [sp, #1]
 8019bfe:	8892      	ldrh	r2, [r2, #4]
 8019c00:	f8ad 2005 	strh.w	r2, [sp, #5]
 8019c04:	f88d 6008 	strb.w	r6, [sp, #8]
 8019c08:	461a      	mov	r2, r3
 8019c0a:	47a8      	blx	r5
 8019c0c:	b007      	add	sp, #28
 8019c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section i.FormatAndDispatchEncryptionChangeEvent:

08019c10 <FormatAndDispatchEncryptionChangeEvent>:
 8019c10:	b51c      	push	{r2, r3, r4, lr}
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	9c04      	ldr	r4, [sp, #16]
 8019c16:	d002      	beq.n	8019c1e <FormatAndDispatchEncryptionChangeEvent+0xe>
 8019c18:	f04f 0301 	mov.w	r3, #1
 8019c1c:	e001      	b.n	8019c22 <FormatAndDispatchEncryptionChangeEvent+0x12>
 8019c1e:	f04f 0307 	mov.w	r3, #7
 8019c22:	700b      	strb	r3, [r1, #0]
 8019c24:	d002      	beq.n	8019c2c <FormatAndDispatchEncryptionChangeEvent+0x1c>
 8019c26:	f04f 0308 	mov.w	r3, #8
 8019c2a:	e001      	b.n	8019c30 <FormatAndDispatchEncryptionChangeEvent+0x20>
 8019c2c:	f04f 0307 	mov.w	r3, #7
 8019c30:	804b      	strh	r3, [r1, #2]
 8019c32:	f8c1 d004 	str.w	sp, [r1, #4]
 8019c36:	f8d2 3003 	ldr.w	r3, [r2, #3]
 8019c3a:	9300      	str	r3, [sp, #0]
 8019c3c:	f8b2 3007 	ldrh.w	r3, [r2, #7]
 8019c40:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019c44:	f88d 4006 	strb.w	r4, [sp, #6]
 8019c48:	d002      	beq.n	8019c50 <FormatAndDispatchEncryptionChangeEvent+0x40>
 8019c4a:	7a53      	ldrb	r3, [r2, #9]
 8019c4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8019c50:	e9d2 3403 	ldrd	r3, r4, [r2, #12]
 8019c54:	4622      	mov	r2, r4
 8019c56:	4798      	blx	r3
 8019c58:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.FormatAndDispatchInquiryEvent:

08019c5a <FormatAndDispatchInquiryEvent>:
 8019c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c5e:	4605      	mov	r5, r0
 8019c60:	2000      	movs	r0, #0
 8019c62:	7008      	strb	r0, [r1, #0]
 8019c64:	2008      	movs	r0, #8
 8019c66:	8048      	strh	r0, [r1, #2]
 8019c68:	604a      	str	r2, [r1, #4]
 8019c6a:	e9d5 670c 	ldrd	r6, r7, [r5, #48]	; 0x30
 8019c6e:	460c      	mov	r4, r1
 8019c70:	4628      	mov	r0, r5
 8019c72:	f7ff ff59 	bl	8019b28 <CleanUpInquiry>
 8019c76:	2e00      	cmp	r6, #0
 8019c78:	d006      	beq.n	8019c88 <FormatAndDispatchInquiryEvent+0x2e>
 8019c7a:	463a      	mov	r2, r7
 8019c7c:	4621      	mov	r1, r4
 8019c7e:	6828      	ldr	r0, [r5, #0]
 8019c80:	46b4      	mov	ip, r6
 8019c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c86:	4760      	bx	ip
 8019c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FreeACLLinkList:

08019c8c <FreeACLLinkList>:
 8019c8c:	2120      	movs	r1, #32
 8019c8e:	f7ff b813 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

08019c92 <FreeACLLinkList>:
 8019c92:	2108      	movs	r1, #8
 8019c94:	f7ff b810 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.FreeCallbackList:

08019c98 <FreeCallbackList>:
 8019c98:	2114      	movs	r1, #20
 8019c9a:	f7ff b80d 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

08019c9e <FreeCallbackList>:
 8019c9e:	210c      	movs	r1, #12
 8019ca0:	f7ff b80a 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

08019ca4 <FreeCallbackList>:
 8019ca4:	2110      	movs	r1, #16
 8019ca6:	f7ff b807 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.FreeInquiryResultList:

08019caa <FreeInquiryResultList>:
 8019caa:	2110      	movs	r1, #16
 8019cac:	f7ff b804 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.GAP_Authenticate_Remote_Device:

08019cb0 <GAP_Authenticate_Remote_Device>:
 8019cb0:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8019cb2:	b085      	sub	sp, #20
 8019cb4:	461d      	mov	r5, r3
 8019cb6:	4607      	mov	r7, r0
 8019cb8:	4602      	mov	r2, r0
 8019cba:	ab06      	add	r3, sp, #24
 8019cbc:	4669      	mov	r1, sp
 8019cbe:	a803      	add	r0, sp, #12
 8019cc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019cc2:	f7ff fed2 	bl	8019a6a <AcquireGAPStackACLInfo>
 8019cc6:	0004      	movs	r4, r0
 8019cc8:	d110      	bne.n	8019cec <GAP_Authenticate_Remote_Device+0x3c>
 8019cca:	1e44      	subs	r4, r0, #1
 8019ccc:	b15d      	cbz	r5, 8019ce6 <GAP_Authenticate_Remote_Device+0x36>
 8019cce:	9803      	ldr	r0, [sp, #12]
 8019cd0:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8019cd2:	a806      	add	r0, sp, #24
 8019cd4:	1d09      	adds	r1, r1, #4
 8019cd6:	f7ff fb71 	bl	80193bc <CompareBluetoothAddress>
 8019cda:	b920      	cbnz	r0, 8019ce6 <GAP_Authenticate_Remote_Device+0x36>
 8019cdc:	9800      	ldr	r0, [sp, #0]
 8019cde:	6981      	ldr	r1, [r0, #24]
 8019ce0:	b139      	cbz	r1, 8019cf2 <GAP_Authenticate_Remote_Device+0x42>
 8019ce2:	f06f 0465 	mvn.w	r4, #101	; 0x65
 8019ce6:	9803      	ldr	r0, [sp, #12]
 8019ce8:	f7ff fc5c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019cec:	b009      	add	sp, #36	; 0x24
 8019cee:	4620      	mov	r0, r4
 8019cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cf2:	7881      	ldrb	r1, [r0, #2]
 8019cf4:	2902      	cmp	r1, #2
 8019cf6:	d025      	beq.n	8019d44 <GAP_Authenticate_Remote_Device+0x94>
 8019cf8:	f850 1f03 	ldr.w	r1, [r0, #3]!
 8019cfc:	9101      	str	r1, [sp, #4]
 8019cfe:	8880      	ldrh	r0, [r0, #4]
 8019d00:	f8ad 0008 	strh.w	r0, [sp, #8]
 8019d04:	ab04      	add	r3, sp, #16
 8019d06:	4638      	mov	r0, r7
 8019d08:	9a02      	ldr	r2, [sp, #8]
 8019d0a:	f008 fec1 	bl	8022a90 <L2CA_Get_Link_Connection_State>
 8019d0e:	b9c8      	cbnz	r0, 8019d44 <GAP_Authenticate_Remote_Device+0x94>
 8019d10:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8019d14:	2803      	cmp	r0, #3
 8019d16:	d015      	beq.n	8019d44 <GAP_Authenticate_Remote_Device+0x94>
 8019d18:	9800      	ldr	r0, [sp, #0]
 8019d1a:	8801      	ldrh	r1, [r0, #0]
 8019d1c:	4638      	mov	r0, r7
 8019d1e:	f006 fa49 	bl	80201b4 <_HCI_Authentication_Requested>
 8019d22:	0004      	movs	r4, r0
 8019d24:	d008      	beq.n	8019d38 <GAP_Authenticate_Remote_Device+0x88>
 8019d26:	f504 70fa 	add.w	r0, r4, #500	; 0x1f4
 8019d2a:	4240      	negs	r0, r0
 8019d2c:	b2c0      	uxtb	r0, r0
 8019d2e:	280c      	cmp	r0, #12
 8019d30:	d1d9      	bne.n	8019ce6 <GAP_Authenticate_Remote_Device+0x36>
 8019d32:	f06f 0462 	mvn.w	r4, #98	; 0x62
 8019d36:	e7d6      	b.n	8019ce6 <GAP_Authenticate_Remote_Device+0x36>
 8019d38:	9800      	ldr	r0, [sp, #0]
 8019d3a:	2100      	movs	r1, #0
 8019d3c:	7501      	strb	r1, [r0, #20]
 8019d3e:	e9c0 5606 	strd	r5, r6, [r0, #24]
 8019d42:	e7d0      	b.n	8019ce6 <GAP_Authenticate_Remote_Device+0x36>
 8019d44:	f06f 0461 	mvn.w	r4, #97	; 0x61
 8019d48:	e7cd      	b.n	8019ce6 <GAP_Authenticate_Remote_Device+0x36>

Disassembly of section i.GAP_Cleanup:

08019d4a <GAP_Cleanup>:
 8019d4a:	b538      	push	{r3, r4, r5, lr}
 8019d4c:	4604      	mov	r4, r0
 8019d4e:	4601      	mov	r1, r0
 8019d50:	4668      	mov	r0, sp
 8019d52:	f7ff feab 	bl	8019aac <AcquireGAPStackInformation>
 8019d56:	2800      	cmp	r0, #0
 8019d58:	d135      	bne.n	8019dc6 <GAP_Cleanup+0x7c>
 8019d5a:	4620      	mov	r0, r4
 8019d5c:	f7ff fb07 	bl	801936e <BSC_UnRegisterEventCallback>
 8019d60:	9800      	ldr	r0, [sp, #0]
 8019d62:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019d64:	6981      	ldr	r1, [r0, #24]
 8019d66:	b111      	cbz	r1, 8019d6e <GAP_Cleanup+0x24>
 8019d68:	4620      	mov	r0, r4
 8019d6a:	f7ff fd93 	bl	8019894 <BTPS_StopTimer>
 8019d6e:	9800      	ldr	r0, [sp, #0]
 8019d70:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019d72:	301c      	adds	r0, #28
 8019d74:	f7ff ff8a 	bl	8019c8c <FreeACLLinkList>
 8019d78:	9800      	ldr	r0, [sp, #0]
 8019d7a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019d7c:	3050      	adds	r0, #80	; 0x50
 8019d7e:	f7ff ff8b 	bl	8019c98 <FreeCallbackList>
 8019d82:	9800      	ldr	r0, [sp, #0]
 8019d84:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019d86:	3054      	adds	r0, #84	; 0x54
 8019d88:	f7ff ff86 	bl	8019c98 <FreeCallbackList>
 8019d8c:	9800      	ldr	r0, [sp, #0]
 8019d8e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019d90:	3058      	adds	r0, #88	; 0x58
 8019d92:	f7ff ff81 	bl	8019c98 <FreeCallbackList>
 8019d96:	9800      	ldr	r0, [sp, #0]
 8019d98:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019d9a:	305c      	adds	r0, #92	; 0x5c
 8019d9c:	f7ff ff7c 	bl	8019c98 <FreeCallbackList>
 8019da0:	9800      	ldr	r0, [sp, #0]
 8019da2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019da4:	6f01      	ldr	r1, [r0, #112]	; 0x70
 8019da6:	b111      	cbz	r1, 8019dae <GAP_Cleanup+0x64>
 8019da8:	3040      	adds	r0, #64	; 0x40
 8019daa:	f7ff ff7e 	bl	8019caa <FreeInquiryResultList>
 8019dae:	4620      	mov	r0, r4
 8019db0:	f002 fc1a 	bl	801c5e8 <GAP_LE_Cleanup>
 8019db4:	9800      	ldr	r0, [sp, #0]
 8019db6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019db8:	f7f9 fb1a 	bl	80133f0 <BTPS_FreeMemory>
 8019dbc:	9800      	ldr	r0, [sp, #0]
 8019dbe:	2100      	movs	r1, #0
 8019dc0:	6501      	str	r1, [r0, #80]	; 0x50
 8019dc2:	f7ff fbef 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019dc6:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.GAP_Initialize:

08019dc8 <GAP_Initialize>:
 8019dc8:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8019dcc:	4680      	mov	r8, r0
 8019dce:	f7fe fdb5 	bl	801893c <AcquireBluetoothStackInformation>
 8019dd2:	0004      	movs	r4, r0
 8019dd4:	d058      	beq.n	8019e88 <GAP_Initialize+0xc0>
 8019dd6:	2078      	movs	r0, #120	; 0x78
 8019dd8:	f7f9 faf0 	bl	80133bc <BTPS_AllocateMemory>
 8019ddc:	6520      	str	r0, [r4, #80]	; 0x50
 8019dde:	b3e8      	cbz	r0, 8019e5c <GAP_Initialize+0x94>
 8019de0:	2278      	movs	r2, #120	; 0x78
 8019de2:	2100      	movs	r1, #0
 8019de4:	f7f9 fb6b 	bl	80134be <BTPS_MemInitialize>
 8019de8:	a902      	add	r1, sp, #8
 8019dea:	4640      	mov	r0, r8
 8019dec:	f006 f806 	bl	801fdfc <HCI_Version_Supported>
 8019df0:	f06f 0538 	mvn.w	r5, #56	; 0x38
 8019df4:	2600      	movs	r6, #0
 8019df6:	bb90      	cbnz	r0, 8019e5e <GAP_Initialize+0x96>
 8019df8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8019dfc:	2807      	cmp	r0, #7
 8019dfe:	d838      	bhi.n	8019e72 <GAP_Initialize+0xaa>
 8019e00:	4642      	mov	r2, r8
 8019e02:	4924      	ldr	r1, [pc, #144]	; (8019e94 <GAP_Initialize+0xcc>)
 8019e04:	4610      	mov	r0, r2
 8019e06:	f005 feba 	bl	801fb7e <HCI_Register_Event_Callback>
 8019e0a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019e0c:	2800      	cmp	r0, #0
 8019e0e:	6108      	str	r0, [r1, #16]
 8019e10:	dd2d      	ble.n	8019e6e <GAP_Initialize+0xa6>
 8019e12:	4669      	mov	r1, sp
 8019e14:	4640      	mov	r0, r8
 8019e16:	f006 fdbf 	bl	8020998 <_HCI_Read_BD_ADDR>
 8019e1a:	bb00      	cbnz	r0, 8019e5e <GAP_Initialize+0x96>
 8019e1c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019e1e:	9900      	ldr	r1, [sp, #0]
 8019e20:	2200      	movs	r2, #0
 8019e22:	6041      	str	r1, [r0, #4]
 8019e24:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8019e28:	8101      	strh	r1, [r0, #8]
 8019e2a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019e2c:	f880 6020 	strb.w	r6, [r0, #32]
 8019e30:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019e32:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 8019e36:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019e38:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
 8019e3c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019e3e:	4640      	mov	r0, r8
 8019e40:	f8c1 8000 	str.w	r8, [r1]
 8019e44:	4914      	ldr	r1, [pc, #80]	; (8019e98 <GAP_Initialize+0xd0>)
 8019e46:	f7ff f940 	bl	80190ca <BSC_RegisterEventCallback>
 8019e4a:	1f77      	subs	r7, r6, #5
 8019e4c:	2800      	cmp	r0, #0
 8019e4e:	db0c      	blt.n	8019e6a <GAP_Initialize+0xa2>
 8019e50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8019e52:	4640      	mov	r0, r8
 8019e54:	3114      	adds	r1, #20
 8019e56:	f002 fdcf 	bl	801c9f8 <GAP_LE_Initialize>
 8019e5a:	e001      	b.n	8019e60 <GAP_Initialize+0x98>
 8019e5c:	e00e      	b.n	8019e7c <GAP_Initialize+0xb4>
 8019e5e:	e008      	b.n	8019e72 <GAP_Initialize+0xaa>
 8019e60:	0005      	movs	r5, r0
 8019e62:	d50d      	bpl.n	8019e80 <GAP_Initialize+0xb8>
 8019e64:	4640      	mov	r0, r8
 8019e66:	f7ff fa82 	bl	801936e <BSC_UnRegisterEventCallback>
 8019e6a:	463d      	mov	r5, r7
 8019e6c:	e001      	b.n	8019e72 <GAP_Initialize+0xaa>
 8019e6e:	f06f 0514 	mvn.w	r5, #20
 8019e72:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019e74:	f7f9 fabc 	bl	80133f0 <BTPS_FreeMemory>
 8019e78:	6526      	str	r6, [r4, #80]	; 0x50
 8019e7a:	e001      	b.n	8019e80 <GAP_Initialize+0xb8>
 8019e7c:	f06f 0527 	mvn.w	r5, #39	; 0x27
 8019e80:	4620      	mov	r0, r4
 8019e82:	f7ff fb8f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019e86:	e001      	b.n	8019e8c <GAP_Initialize+0xc4>
 8019e88:	f06f 0501 	mvn.w	r5, #1
 8019e8c:	4628      	mov	r0, r5
 8019e8e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8019e92:	0000      	.short	0x0000
 8019e94:	0801a0dd 	.word	0x0801a0dd
 8019e98:	08019ad5 	.word	0x08019ad5

Disassembly of section i.GAP_Query_Local_BD_ADDR:

08019e9c <GAP_Query_Local_BD_ADDR>:
 8019e9c:	b538      	push	{r3, r4, r5, lr}
 8019e9e:	460c      	mov	r4, r1
 8019ea0:	4601      	mov	r1, r0
 8019ea2:	4668      	mov	r0, sp
 8019ea4:	f7ff fe02 	bl	8019aac <AcquireGAPStackInformation>
 8019ea8:	0005      	movs	r5, r0
 8019eaa:	d10c      	bne.n	8019ec6 <GAP_Query_Local_BD_ADDR+0x2a>
 8019eac:	b134      	cbz	r4, 8019ebc <GAP_Query_Local_BD_ADDR+0x20>
 8019eae:	9800      	ldr	r0, [sp, #0]
 8019eb0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019eb2:	6841      	ldr	r1, [r0, #4]
 8019eb4:	6021      	str	r1, [r4, #0]
 8019eb6:	8900      	ldrh	r0, [r0, #8]
 8019eb8:	80a0      	strh	r0, [r4, #4]
 8019eba:	e001      	b.n	8019ec0 <GAP_Query_Local_BD_ADDR+0x24>
 8019ebc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019ec0:	9800      	ldr	r0, [sp, #0]
 8019ec2:	f7ff fb6f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8019ec6:	4628      	mov	r0, r5
 8019ec8:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.GAP_Set_Discoverability_Mode:

08019ecc <GAP_Set_Discoverability_Mode>:
 8019ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed0:	460d      	mov	r5, r1
 8019ed2:	b086      	sub	sp, #24
 8019ed4:	4680      	mov	r8, r0
 8019ed6:	4601      	mov	r1, r0
 8019ed8:	4616      	mov	r6, r2
 8019eda:	4668      	mov	r0, sp
 8019edc:	f7ff fde6 	bl	8019aac <AcquireGAPStackInformation>
 8019ee0:	0004      	movs	r4, r0
 8019ee2:	d17c      	bne.n	8019fde <GAP_Set_Discoverability_Mode+0x112>
 8019ee4:	a904      	add	r1, sp, #16
 8019ee6:	4640      	mov	r0, r8
 8019ee8:	f006 fe4b 	bl	8020b82 <_HCI_Read_Scan_Enable>
 8019eec:	0004      	movs	r4, r0
 8019eee:	d107      	bne.n	8019f00 <GAP_Set_Discoverability_Mode+0x34>
 8019ef0:	2700      	movs	r7, #0
 8019ef2:	b135      	cbz	r5, 8019f02 <GAP_Set_Discoverability_Mode+0x36>
 8019ef4:	2d01      	cmp	r5, #1
 8019ef6:	d01a      	beq.n	8019f2e <GAP_Set_Discoverability_Mode+0x62>
 8019ef8:	2d02      	cmp	r5, #2
 8019efa:	d018      	beq.n	8019f2e <GAP_Set_Discoverability_Mode+0x62>
 8019efc:	f06f 0439 	mvn.w	r4, #57	; 0x39
 8019f00:	e09c      	b.n	801a03c <GAP_Set_Discoverability_Mode+0x170>
 8019f02:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8019f06:	f020 0101 	bic.w	r1, r0, #1
 8019f0a:	f88d 1010 	strb.w	r1, [sp, #16]
 8019f0e:	4640      	mov	r0, r8
 8019f10:	f006 ff7b 	bl	8020e0a <_HCI_Write_Scan_Enable>
 8019f14:	0004      	movs	r4, r0
 8019f16:	d14e      	bne.n	8019fb6 <GAP_Set_Discoverability_Mode+0xea>
 8019f18:	9800      	ldr	r0, [sp, #0]
 8019f1a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019f1c:	6981      	ldr	r1, [r0, #24]
 8019f1e:	b389      	cbz	r1, 8019f84 <GAP_Set_Discoverability_Mode+0xb8>
 8019f20:	4640      	mov	r0, r8
 8019f22:	f7ff fcb7 	bl	8019894 <BTPS_StopTimer>
 8019f26:	9800      	ldr	r0, [sp, #0]
 8019f28:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019f2a:	6187      	str	r7, [r0, #24]
 8019f2c:	e05e      	b.n	8019fec <GAP_Set_Discoverability_Mode+0x120>
 8019f2e:	2033      	movs	r0, #51	; 0x33
 8019f30:	f88d 0004 	strb.w	r0, [sp, #4]
 8019f34:	208b      	movs	r0, #139	; 0x8b
 8019f36:	219e      	movs	r1, #158	; 0x9e
 8019f38:	f88d 0005 	strb.w	r0, [sp, #5]
 8019f3c:	f88d 1006 	strb.w	r1, [sp, #6]
 8019f40:	f88d 0008 	strb.w	r0, [sp, #8]
 8019f44:	f88d 7007 	strb.w	r7, [sp, #7]
 8019f48:	f88d 1009 	strb.w	r1, [sp, #9]
 8019f4c:	2d01      	cmp	r5, #1
 8019f4e:	d00d      	beq.n	8019f6c <GAP_Set_Discoverability_Mode+0xa0>
 8019f50:	2101      	movs	r1, #1
 8019f52:	aa01      	add	r2, sp, #4
 8019f54:	4640      	mov	r0, r8
 8019f56:	f006 fec2 	bl	8020cde <_HCI_Write_Current_IAC_LAP>
 8019f5a:	4604      	mov	r4, r0
 8019f5c:	f510 7ffa 	cmn.w	r0, #500	; 0x1f4
 8019f60:	dc06      	bgt.n	8019f70 <GAP_Set_Discoverability_Mode+0xa4>
 8019f62:	f500 74fa 	add.w	r4, r0, #500	; 0x1f4
 8019f66:	4260      	negs	r0, r4
 8019f68:	b2c0      	uxtb	r0, r0
 8019f6a:	e003      	b.n	8019f74 <GAP_Set_Discoverability_Mode+0xa8>
 8019f6c:	2102      	movs	r1, #2
 8019f6e:	e7f0      	b.n	8019f52 <GAP_Set_Discoverability_Mode+0x86>
 8019f70:	2000      	movs	r0, #0
 8019f72:	bb04      	cbnz	r4, 8019fb6 <GAP_Set_Discoverability_Mode+0xea>
 8019f74:	b138      	cbz	r0, 8019f86 <GAP_Set_Discoverability_Mode+0xba>
 8019f76:	2801      	cmp	r0, #1
 8019f78:	d101      	bne.n	8019f7e <GAP_Set_Discoverability_Mode+0xb2>
 8019f7a:	2d02      	cmp	r5, #2
 8019f7c:	d003      	beq.n	8019f86 <GAP_Set_Discoverability_Mode+0xba>
 8019f7e:	f06f 0438 	mvn.w	r4, #56	; 0x38
 8019f82:	e05b      	b.n	801a03c <GAP_Set_Discoverability_Mode+0x170>
 8019f84:	e032      	b.n	8019fec <GAP_Set_Discoverability_Mode+0x120>
 8019f86:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8019f8a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019f8e:	f040 0101 	orr.w	r1, r0, #1
 8019f92:	f88d 1010 	strb.w	r1, [sp, #16]
 8019f96:	f1a6 001f 	sub.w	r0, r6, #31
 8019f9a:	2d01      	cmp	r5, #1
 8019f9c:	d009      	beq.n	8019fb2 <GAP_Set_Discoverability_Mode+0xe6>
 8019f9e:	b116      	cbz	r6, 8019fa6 <GAP_Set_Discoverability_Mode+0xda>
 8019fa0:	4a2b      	ldr	r2, [pc, #172]	; (801a050 <GAP_Set_Discoverability_Mode+0x184>)
 8019fa2:	4290      	cmp	r0, r2
 8019fa4:	d84a      	bhi.n	801a03c <GAP_Set_Discoverability_Mode+0x170>
 8019fa6:	4640      	mov	r0, r8
 8019fa8:	f006 ff2f 	bl	8020e0a <_HCI_Write_Scan_Enable>
 8019fac:	0004      	movs	r4, r0
 8019fae:	d003      	beq.n	8019fb8 <GAP_Set_Discoverability_Mode+0xec>
 8019fb0:	e044      	b.n	801a03c <GAP_Set_Discoverability_Mode+0x170>
 8019fb2:	281d      	cmp	r0, #29
 8019fb4:	d9f7      	bls.n	8019fa6 <GAP_Set_Discoverability_Mode+0xda>
 8019fb6:	e041      	b.n	801a03c <GAP_Set_Discoverability_Mode+0x170>
 8019fb8:	9800      	ldr	r0, [sp, #0]
 8019fba:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019fbc:	6981      	ldr	r1, [r0, #24]
 8019fbe:	b129      	cbz	r1, 8019fcc <GAP_Set_Discoverability_Mode+0x100>
 8019fc0:	4640      	mov	r0, r8
 8019fc2:	f7ff fc67 	bl	8019894 <BTPS_StopTimer>
 8019fc6:	9800      	ldr	r0, [sp, #0]
 8019fc8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019fca:	6187      	str	r7, [r0, #24]
 8019fcc:	b176      	cbz	r6, 8019fec <GAP_Set_Discoverability_Mode+0x120>
 8019fce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019fd2:	fb06 f300 	mul.w	r3, r6, r0
 8019fd6:	4641      	mov	r1, r8
 8019fd8:	4a1e      	ldr	r2, [pc, #120]	; (801a054 <GAP_Set_Discoverability_Mode+0x188>)
 8019fda:	4608      	mov	r0, r1
 8019fdc:	e000      	b.n	8019fe0 <GAP_Set_Discoverability_Mode+0x114>
 8019fde:	e030      	b.n	801a042 <GAP_Set_Discoverability_Mode+0x176>
 8019fe0:	f7ff fc0e 	bl	8019800 <BTPS_StartTimer>
 8019fe4:	9900      	ldr	r1, [sp, #0]
 8019fe6:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8019fe8:	6188      	str	r0, [r1, #24]
 8019fea:	b130      	cbz	r0, 8019ffa <GAP_Set_Discoverability_Mode+0x12e>
 8019fec:	a903      	add	r1, sp, #12
 8019fee:	4640      	mov	r0, r8
 8019ff0:	f006 fd16 	bl	8020a20 <_HCI_Read_Class_of_Device>
 8019ff4:	0004      	movs	r4, r0
 8019ff6:	d003      	beq.n	801a000 <GAP_Set_Discoverability_Mode+0x134>
 8019ff8:	e01a      	b.n	801a030 <GAP_Set_Discoverability_Mode+0x164>
 8019ffa:	f06f 043f 	mvn.w	r4, #63	; 0x3f
 8019ffe:	e01d      	b.n	801a03c <GAP_Set_Discoverability_Mode+0x170>
 801a000:	f89d 000e 	ldrb.w	r0, [sp, #14]
 801a004:	f89d 100d 	ldrb.w	r1, [sp, #13]
 801a008:	00c0      	lsls	r0, r0, #3
 801a00a:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
 801a00e:	2d01      	cmp	r5, #1
 801a010:	d01b      	beq.n	801a04a <GAP_Set_Discoverability_Mode+0x17e>
 801a012:	f020 0001 	bic.w	r0, r0, #1
 801a016:	08c2      	lsrs	r2, r0, #3
 801a018:	f001 011f 	and.w	r1, r1, #31
 801a01c:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 801a020:	f88d 200e 	strb.w	r2, [sp, #14]
 801a024:	f88d 100d 	strb.w	r1, [sp, #13]
 801a028:	a903      	add	r1, sp, #12
 801a02a:	4640      	mov	r0, r8
 801a02c:	f006 fe3e 	bl	8020cac <_HCI_Write_Class_of_Device>
 801a030:	9800      	ldr	r0, [sp, #0]
 801a032:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801a034:	f881 5020 	strb.w	r5, [r1, #32]
 801a038:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a03a:	6246      	str	r6, [r0, #36]	; 0x24
 801a03c:	9800      	ldr	r0, [sp, #0]
 801a03e:	f7ff fab1 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801a042:	b006      	add	sp, #24
 801a044:	4620      	mov	r0, r4
 801a046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a04a:	f040 0001 	orr.w	r0, r0, #1
 801a04e:	e7e2      	b.n	801a016 <GAP_Set_Discoverability_Mode+0x14a>
 801a050:	00015161 	.word	0x00015161
 801a054:	08019b7d 	.word	0x08019b7d

Disassembly of section i.GAP_Set_Encryption_Mode:

0801a058 <GAP_Set_Encryption_Mode>:
 801a058:	e92d 43ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 801a05c:	b081      	sub	sp, #4
 801a05e:	4681      	mov	r9, r0
 801a060:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801a064:	4601      	mov	r1, r0
 801a066:	461e      	mov	r6, r3
 801a068:	4668      	mov	r0, sp
 801a06a:	f7ff fd1f 	bl	8019aac <AcquireGAPStackInformation>
 801a06e:	0004      	movs	r4, r0
 801a070:	d123      	bne.n	801a0ba <GAP_Set_Encryption_Mode+0x62>
 801a072:	1e44      	subs	r4, r0, #1
 801a074:	b10e      	cbz	r6, 801a07a <GAP_Set_Encryption_Mode+0x22>
 801a076:	2e01      	cmp	r6, #1
 801a078:	d11c      	bne.n	801a0b4 <GAP_Set_Encryption_Mode+0x5c>
 801a07a:	9800      	ldr	r0, [sp, #0]
 801a07c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801a07e:	a802      	add	r0, sp, #8
 801a080:	1d09      	adds	r1, r1, #4
 801a082:	f7ff f99b 	bl	80193bc <CompareBluetoothAddress>
 801a086:	b140      	cbz	r0, 801a09a <GAP_Set_Encryption_Mode+0x42>
 801a088:	b10e      	cbz	r6, 801a08e <GAP_Set_Encryption_Mode+0x36>
 801a08a:	2101      	movs	r1, #1
 801a08c:	e000      	b.n	801a090 <GAP_Set_Encryption_Mode+0x38>
 801a08e:	2100      	movs	r1, #0
 801a090:	4648      	mov	r0, r9
 801a092:	f006 fe59 	bl	8020d48 <_HCI_Write_Encryption_Mode>
 801a096:	4604      	mov	r4, r0
 801a098:	e00c      	b.n	801a0b4 <GAP_Set_Encryption_Mode+0x5c>
 801a09a:	9800      	ldr	r0, [sp, #0]
 801a09c:	a902      	add	r1, sp, #8
 801a09e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a0a0:	301c      	adds	r0, #28
 801a0a2:	f001 f886 	bl	801b1b2 <SearchACLLinkEntryBD_ADDR>
 801a0a6:	0005      	movs	r5, r0
 801a0a8:	d004      	beq.n	801a0b4 <GAP_Set_Encryption_Mode+0x5c>
 801a0aa:	b11f      	cbz	r7, 801a0b4 <GAP_Set_Encryption_Mode+0x5c>
 801a0ac:	68e8      	ldr	r0, [r5, #12]
 801a0ae:	b140      	cbz	r0, 801a0c2 <GAP_Set_Encryption_Mode+0x6a>
 801a0b0:	f06f 0465 	mvn.w	r4, #101	; 0x65
 801a0b4:	9800      	ldr	r0, [sp, #0]
 801a0b6:	f7ff fa75 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801a0ba:	b005      	add	sp, #20
 801a0bc:	4620      	mov	r0, r4
 801a0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0c2:	b10e      	cbz	r6, 801a0c8 <GAP_Set_Encryption_Mode+0x70>
 801a0c4:	2201      	movs	r2, #1
 801a0c6:	e000      	b.n	801a0ca <GAP_Set_Encryption_Mode+0x72>
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	8829      	ldrh	r1, [r5, #0]
 801a0cc:	4648      	mov	r0, r9
 801a0ce:	f006 fda4 	bl	8020c1a <_HCI_Set_Connection_Encryption>
 801a0d2:	0004      	movs	r4, r0
 801a0d4:	d1ee      	bne.n	801a0b4 <GAP_Set_Encryption_Mode+0x5c>
 801a0d6:	e9c5 7803 	strd	r7, r8, [r5, #12]
 801a0da:	e7eb      	b.n	801a0b4 <GAP_Set_Encryption_Mode+0x5c>

Disassembly of section i.HCI_Event_Callback:

0801a0dc <HCI_Event_Callback>:
 801a0dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0e0:	b090      	sub	sp, #64	; 0x40
 801a0e2:	000c      	movs	r4, r1
 801a0e4:	f04f 0800 	mov.w	r8, #0
 801a0e8:	d070      	beq.n	801a1cc <HCI_Event_Callback+0xf0>
 801a0ea:	a80c      	add	r0, sp, #48	; 0x30
 801a0ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 801a0ee:	f7ff fcdd 	bl	8019aac <AcquireGAPStackInformation>
 801a0f2:	2800      	cmp	r0, #0
 801a0f4:	d16a      	bne.n	801a1cc <HCI_Event_Callback+0xf0>
 801a0f6:	7820      	ldrb	r0, [r4, #0]
 801a0f8:	2701      	movs	r7, #1
 801a0fa:	2600      	movs	r6, #0
 801a0fc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 801a100:	2820      	cmp	r0, #32
 801a102:	d07b      	beq.n	801a1fc <HCI_Event_Callback+0x120>
 801a104:	dc10      	bgt.n	801a128 <HCI_Event_Callback+0x4c>
 801a106:	f04f 0b02 	mov.w	fp, #2
 801a10a:	2816      	cmp	r0, #22
 801a10c:	d277      	bcs.n	801a1fe <HCI_Event_Callback+0x122>
 801a10e:	e8df f000 	tbb	[pc, r0]
 801a112:	cdcd      	.short	0xcdcd
 801a114:	f7907619 	.word	0xf7907619
 801a118:	7676d7f6 	.word	0x7676d7f6
 801a11c:	7676f4f5 	.word	0x7676f4f5
 801a120:	76767676 	.word	0x76767676
 801a124:	f1f2f376 	.word	0xf1f2f376
 801a128:	3822      	subs	r0, #34	; 0x22
 801a12a:	2811      	cmp	r0, #17
 801a12c:	d2ee      	bcs.n	801a10c <HCI_Event_Callback+0x30>
 801a12e:	e8df f000 	tbb	[pc, r0]
 801a132:	66bd      	.short	0x66bd
 801a134:	bd666666 	.word	0xbd666666
 801a138:	edeeeff0 	.word	0xedeeeff0
 801a13c:	66eaebec 	.word	0x66eaebec
 801a140:	00e8e966 	.word	0x00e8e966
 801a144:	6860      	ldr	r0, [r4, #4]
 801a146:	2800      	cmp	r0, #0
 801a148:	d059      	beq.n	801a1fe <HCI_Event_Callback+0x122>
 801a14a:	7a81      	ldrb	r1, [r0, #10]
 801a14c:	2901      	cmp	r1, #1
 801a14e:	d156      	bne.n	801a1fe <HCI_Event_Callback+0x122>
 801a150:	7800      	ldrb	r0, [r0, #0]
 801a152:	f04f 0a00 	mov.w	sl, #0
 801a156:	2800      	cmp	r0, #0
 801a158:	d160      	bne.n	801a21c <HCI_Event_Callback+0x140>
 801a15a:	2024      	movs	r0, #36	; 0x24
 801a15c:	f7f9 f92e 	bl	80133bc <BTPS_AllocateMemory>
 801a160:	0005      	movs	r5, r0
 801a162:	d047      	beq.n	801a1f4 <HCI_Event_Callback+0x118>
 801a164:	2224      	movs	r2, #36	; 0x24
 801a166:	2100      	movs	r1, #0
 801a168:	f7f9 f9a9 	bl	80134be <BTPS_MemInitialize>
 801a16c:	6860      	ldr	r0, [r4, #4]
 801a16e:	46b0      	mov	r8, r6
 801a170:	6841      	ldr	r1, [r0, #4]
 801a172:	f8c5 1003 	str.w	r1, [r5, #3]
 801a176:	8900      	ldrh	r0, [r0, #8]
 801a178:	f8a5 0007 	strh.w	r0, [r5, #7]
 801a17c:	6860      	ldr	r0, [r4, #4]
 801a17e:	8840      	ldrh	r0, [r0, #2]
 801a180:	8028      	strh	r0, [r5, #0]
 801a182:	70ae      	strb	r6, [r5, #2]
 801a184:	6861      	ldr	r1, [r4, #4]
 801a186:	7ac9      	ldrb	r1, [r1, #11]
 801a188:	b161      	cbz	r1, 801a1a4 <HCI_Event_Callback+0xc8>
 801a18a:	726f      	strb	r7, [r5, #9]
 801a18c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a18e:	6d0f      	ldr	r7, [r1, #80]	; 0x50
 801a190:	371c      	adds	r7, #28
 801a192:	d020      	beq.n	801a1d6 <HCI_Event_Callback+0xfa>
 801a194:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 801a198:	d21d      	bcs.n	801a1d6 <HCI_Event_Callback+0xfa>
 801a19a:	1ce8      	adds	r0, r5, #3
 801a19c:	f7ff f94f 	bl	801943e <CompareNULLBluetoothAddress>
 801a1a0:	b118      	cbz	r0, 801a1aa <HCI_Event_Callback+0xce>
 801a1a2:	e018      	b.n	801a1d6 <HCI_Event_Callback+0xfa>
 801a1a4:	f885 8009 	strb.w	r8, [r5, #9]
 801a1a8:	e7f0      	b.n	801a18c <HCI_Event_Callback+0xb0>
 801a1aa:	f8c5 8020 	str.w	r8, [r5, #32]
 801a1ae:	683e      	ldr	r6, [r7, #0]
 801a1b0:	b186      	cbz	r6, 801a1d4 <HCI_Event_Callback+0xf8>
 801a1b2:	1ce9      	adds	r1, r5, #3
 801a1b4:	1cf0      	adds	r0, r6, #3
 801a1b6:	f7ff f901 	bl	80193bc <CompareBluetoothAddress>
 801a1ba:	bb08      	cbnz	r0, 801a200 <HCI_Event_Callback+0x124>
 801a1bc:	8831      	ldrh	r1, [r6, #0]
 801a1be:	8828      	ldrh	r0, [r5, #0]
 801a1c0:	4281      	cmp	r1, r0
 801a1c2:	d01d      	beq.n	801a200 <HCI_Event_Callback+0x124>
 801a1c4:	6a30      	ldr	r0, [r6, #32]
 801a1c6:	b110      	cbz	r0, 801a1ce <HCI_Event_Callback+0xf2>
 801a1c8:	4606      	mov	r6, r0
 801a1ca:	e7f2      	b.n	801a1b2 <HCI_Event_Callback+0xd6>
 801a1cc:	e2d1      	b.n	801a772 <HCI_Event_Callback+0x696>
 801a1ce:	b1bd      	cbz	r5, 801a200 <HCI_Event_Callback+0x124>
 801a1d0:	6235      	str	r5, [r6, #32]
 801a1d2:	e000      	b.n	801a1d6 <HCI_Event_Callback+0xfa>
 801a1d4:	603d      	str	r5, [r7, #0]
 801a1d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a1d8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a1da:	6e06      	ldr	r6, [r0, #96]	; 0x60
 801a1dc:	b13e      	cbz	r6, 801a1ee <HCI_Event_Callback+0x112>
 801a1de:	f8cd 8000 	str.w	r8, [sp]
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	462a      	mov	r2, r5
 801a1e6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801a1ea:	4621      	mov	r1, r4
 801a1ec:	47b0      	blx	r6
 801a1ee:	f1ba 0f00 	cmp.w	sl, #0
 801a1f2:	d0a9      	beq.n	801a148 <HCI_Event_Callback+0x6c>
 801a1f4:	6860      	ldr	r0, [r4, #4]
 801a1f6:	7801      	ldrb	r1, [r0, #0]
 801a1f8:	b139      	cbz	r1, 801a20a <HCI_Event_Callback+0x12e>
 801a1fa:	e00f      	b.n	801a21c <HCI_Event_Callback+0x140>
 801a1fc:	e269      	b.n	801a6d2 <HCI_Event_Callback+0x5f6>
 801a1fe:	e217      	b.n	801a630 <HCI_Event_Callback+0x554>
 801a200:	4628      	mov	r0, r5
 801a202:	f7f9 f8f5 	bl	80133f0 <BTPS_FreeMemory>
 801a206:	2500      	movs	r5, #0
 801a208:	e7f4      	b.n	801a1f4 <HCI_Event_Callback+0x118>
 801a20a:	8841      	ldrh	r1, [r0, #2]
 801a20c:	2214      	movs	r2, #20
 801a20e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a210:	f005 ffe6 	bl	80201e0 <_HCI_Disconnect>
 801a214:	b910      	cbnz	r0, 801a21c <HCI_Event_Callback+0x140>
 801a216:	b10d      	cbz	r5, 801a21c <HCI_Event_Callback+0x140>
 801a218:	f885 b002 	strb.w	fp, [r5, #2]
 801a21c:	6862      	ldr	r2, [r4, #4]
 801a21e:	7813      	ldrb	r3, [r2, #0]
 801a220:	b903      	cbnz	r3, 801a224 <HCI_Event_Callback+0x148>
 801a222:	2307      	movs	r3, #7
 801a224:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a226:	a90a      	add	r1, sp, #40	; 0x28
 801a228:	1d12      	adds	r2, r2, #4
 801a22a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a22c:	f000 ffa0 	bl	801b170 <IssueBondingCallback>
 801a230:	e29c      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a232:	6860      	ldr	r0, [r4, #4]
 801a234:	2800      	cmp	r0, #0
 801a236:	d0fb      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a238:	7801      	ldrb	r1, [r0, #0]
 801a23a:	2900      	cmp	r1, #0
 801a23c:	d1f8      	bne.n	801a230 <HCI_Event_Callback+0x154>
 801a23e:	8841      	ldrh	r1, [r0, #2]
 801a240:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a242:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a244:	301c      	adds	r0, #28
 801a246:	f7ff fc7d 	bl	8019b44 <DeleteACLLinkEntryConnection_Handle>
 801a24a:	0005      	movs	r5, r0
 801a24c:	d0f0      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a24e:	68e8      	ldr	r0, [r5, #12]
 801a250:	b140      	cbz	r0, 801a264 <HCI_Event_Callback+0x188>
 801a252:	6860      	ldr	r0, [r4, #4]
 801a254:	2301      	movs	r3, #1
 801a256:	462a      	mov	r2, r5
 801a258:	7900      	ldrb	r0, [r0, #4]
 801a25a:	9000      	str	r0, [sp, #0]
 801a25c:	a90a      	add	r1, sp, #40	; 0x28
 801a25e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a260:	f7ff fcd6 	bl	8019c10 <FormatAndDispatchEncryptionChangeEvent>
 801a264:	69aa      	ldr	r2, [r5, #24]
 801a266:	b192      	cbz	r2, 801a28e <HCI_Event_Callback+0x1b2>
 801a268:	6861      	ldr	r1, [r4, #4]
 801a26a:	1ce8      	adds	r0, r5, #3
 801a26c:	7909      	ldrb	r1, [r1, #4]
 801a26e:	e9cd 0100 	strd	r0, r1, [sp]
 801a272:	a90a      	add	r1, sp, #40	; 0x28
 801a274:	69eb      	ldr	r3, [r5, #28]
 801a276:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a278:	f7ff fcb1 	bl	8019bde <FormatAndDispatchAuthenticationStatusEvent>
 801a27c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a27e:	1ce9      	adds	r1, r5, #3
 801a280:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a282:	3050      	adds	r0, #80	; 0x50
 801a284:	f7ff fc68 	bl	8019b58 <DeleteCallbackEntry>
 801a288:	b108      	cbz	r0, 801a28e <HCI_Event_Callback+0x1b2>
 801a28a:	f7fe fd24 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801a28e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a290:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a292:	6e07      	ldr	r7, [r0, #96]	; 0x60
 801a294:	b137      	cbz	r7, 801a2a4 <HCI_Event_Callback+0x1c8>
 801a296:	9600      	str	r6, [sp, #0]
 801a298:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801a29c:	2300      	movs	r3, #0
 801a29e:	462a      	mov	r2, r5
 801a2a0:	4621      	mov	r1, r4
 801a2a2:	47b8      	blx	r7
 801a2a4:	4628      	mov	r0, r5
 801a2a6:	f7fe fd16 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801a2aa:	e25f      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a2ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a2ae:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a2b0:	6f05      	ldr	r5, [r0, #112]	; 0x70
 801a2b2:	2d00      	cmp	r5, #0
 801a2b4:	d0bc      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a2b6:	ab03      	add	r3, sp, #12
 801a2b8:	464a      	mov	r2, r9
 801a2ba:	4621      	mov	r1, r4
 801a2bc:	47a8      	blx	r5
 801a2be:	e255      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a2c0:	6860      	ldr	r0, [r4, #4]
 801a2c2:	2800      	cmp	r0, #0
 801a2c4:	d0b4      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a2c6:	8841      	ldrh	r1, [r0, #2]
 801a2c8:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a2ca:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a2cc:	301c      	adds	r0, #28
 801a2ce:	f000 ff78 	bl	801b1c2 <SearchACLLinkEntryConnection_Handle>
 801a2d2:	0005      	movs	r5, r0
 801a2d4:	d0ac      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a2d6:	6860      	ldr	r0, [r4, #4]
 801a2d8:	7801      	ldrb	r1, [r0, #0]
 801a2da:	b919      	cbnz	r1, 801a2e4 <HCI_Event_Callback+0x208>
 801a2dc:	7900      	ldrb	r0, [r0, #4]
 801a2de:	2801      	cmp	r0, #1
 801a2e0:	d018      	beq.n	801a314 <HCI_Event_Callback+0x238>
 801a2e2:	726e      	strb	r6, [r5, #9]
 801a2e4:	68e8      	ldr	r0, [r5, #12]
 801a2e6:	2800      	cmp	r0, #0
 801a2e8:	d0a2      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a2ea:	6860      	ldr	r0, [r4, #4]
 801a2ec:	2301      	movs	r3, #1
 801a2ee:	7800      	ldrb	r0, [r0, #0]
 801a2f0:	9000      	str	r0, [sp, #0]
 801a2f2:	e108      	b.n	801a506 <HCI_Event_Callback+0x42a>
 801a2f4:	e03f      	b.n	801a376 <HCI_Event_Callback+0x29a>
 801a2f6:	e00f      	b.n	801a318 <HCI_Event_Callback+0x23c>
 801a2f8:	e027      	b.n	801a34a <HCI_Event_Callback+0x26e>
 801a2fa:	e1ae      	b.n	801a65a <HCI_Event_Callback+0x57e>
 801a2fc:	e1a9      	b.n	801a652 <HCI_Event_Callback+0x576>
 801a2fe:	e0ec      	b.n	801a4da <HCI_Event_Callback+0x3fe>
 801a300:	e057      	b.n	801a3b2 <HCI_Event_Callback+0x2d6>
 801a302:	e17a      	b.n	801a5fa <HCI_Event_Callback+0x51e>
 801a304:	e168      	b.n	801a5d8 <HCI_Event_Callback+0x4fc>
 801a306:	e194      	b.n	801a632 <HCI_Event_Callback+0x556>
 801a308:	e158      	b.n	801a5bc <HCI_Event_Callback+0x4e0>
 801a30a:	e152      	b.n	801a5b2 <HCI_Event_Callback+0x4d6>
 801a30c:	e14c      	b.n	801a5a8 <HCI_Event_Callback+0x4cc>
 801a30e:	e11d      	b.n	801a54c <HCI_Event_Callback+0x470>
 801a310:	e100      	b.n	801a514 <HCI_Event_Callback+0x438>
 801a312:	e0e6      	b.n	801a4e2 <HCI_Event_Callback+0x406>
 801a314:	726f      	strb	r7, [r5, #9]
 801a316:	e7e5      	b.n	801a2e4 <HCI_Event_Callback+0x208>
 801a318:	6860      	ldr	r0, [r4, #4]
 801a31a:	2800      	cmp	r0, #0
 801a31c:	d088      	beq.n	801a230 <HCI_Event_Callback+0x154>
 801a31e:	f88d 600c 	strb.w	r6, [sp, #12]
 801a322:	6860      	ldr	r0, [r4, #4]
 801a324:	aa03      	add	r2, sp, #12
 801a326:	6801      	ldr	r1, [r0, #0]
 801a328:	f8cd 100d 	str.w	r1, [sp, #13]
 801a32c:	8880      	ldrh	r0, [r0, #4]
 801a32e:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a332:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a334:	a90a      	add	r1, sp, #40	; 0x28
 801a336:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a338:	f7ff fc33 	bl	8019ba2 <FormatAndDispatchAuthenticationEvent>
 801a33c:	2800      	cmp	r0, #0
 801a33e:	d1b4      	bne.n	801a2aa <HCI_Event_Callback+0x1ce>
 801a340:	6861      	ldr	r1, [r4, #4]
 801a342:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a344:	f006 faf8 	bl	8020938 <_HCI_Link_Key_Request_Negative_Reply>
 801a348:	e210      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a34a:	6861      	ldr	r1, [r4, #4]
 801a34c:	2900      	cmp	r1, #0
 801a34e:	d0ac      	beq.n	801a2aa <HCI_Event_Callback+0x1ce>
 801a350:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a352:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801a354:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 801a358:	b14a      	cbz	r2, 801a36e <HCI_Event_Callback+0x292>
 801a35a:	f88d 700c 	strb.w	r7, [sp, #12]
 801a35e:	6861      	ldr	r1, [r4, #4]
 801a360:	680a      	ldr	r2, [r1, #0]
 801a362:	f8cd 200d 	str.w	r2, [sp, #13]
 801a366:	8889      	ldrh	r1, [r1, #4]
 801a368:	f8ad 1011 	strh.w	r1, [sp, #17]
 801a36c:	e15b      	b.n	801a626 <HCI_Event_Callback+0x54a>
 801a36e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a370:	f006 fafa 	bl	8020968 <_HCI_PIN_Code_Request_Negative_Reply>
 801a374:	e1fa      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a376:	6860      	ldr	r0, [r4, #4]
 801a378:	2800      	cmp	r0, #0
 801a37a:	d096      	beq.n	801a2aa <HCI_Event_Callback+0x1ce>
 801a37c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a37e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 801a380:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 801a384:	2800      	cmp	r0, #0
 801a386:	d090      	beq.n	801a2aa <HCI_Event_Callback+0x1ce>
 801a388:	2003      	movs	r0, #3
 801a38a:	f88d 000c 	strb.w	r0, [sp, #12]
 801a38e:	6860      	ldr	r0, [r4, #4]
 801a390:	2210      	movs	r2, #16
 801a392:	6801      	ldr	r1, [r0, #0]
 801a394:	f8cd 100d 	str.w	r1, [sp, #13]
 801a398:	8880      	ldrh	r0, [r0, #4]
 801a39a:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a39e:	6864      	ldr	r4, [r4, #4]
 801a3a0:	a805      	add	r0, sp, #20
 801a3a2:	1da1      	adds	r1, r4, #6
 801a3a4:	f7f9 fced 	bl	8013d82 <__aeabi_memcpy>
 801a3a8:	7da0      	ldrb	r0, [r4, #22]
 801a3aa:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
 801a3ae:	6d28      	ldr	r0, [r5, #80]	; 0x50
 801a3b0:	e13a      	b.n	801a628 <HCI_Event_Callback+0x54c>
 801a3b2:	6860      	ldr	r0, [r4, #4]
 801a3b4:	2800      	cmp	r0, #0
 801a3b6:	d0c7      	beq.n	801a348 <HCI_Event_Callback+0x26c>
 801a3b8:	8841      	ldrh	r1, [r0, #2]
 801a3ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a3bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a3be:	301c      	adds	r0, #28
 801a3c0:	f000 feff 	bl	801b1c2 <SearchACLLinkEntryConnection_Handle>
 801a3c4:	0005      	movs	r5, r0
 801a3c6:	d0bf      	beq.n	801a348 <HCI_Event_Callback+0x26c>
 801a3c8:	78af      	ldrb	r7, [r5, #2]
 801a3ca:	46b2      	mov	sl, r6
 801a3cc:	4630      	mov	r0, r6
 801a3ce:	70ae      	strb	r6, [r5, #2]
 801a3d0:	e9d5 6106 	ldrd	r6, r1, [r5, #24]
 801a3d4:	4689      	mov	r9, r1
 801a3d6:	7d29      	ldrb	r1, [r5, #20]
 801a3d8:	61a8      	str	r0, [r5, #24]
 801a3da:	7528      	strb	r0, [r5, #20]
 801a3dc:	b3ae      	cbz	r6, 801a44a <HCI_Event_Callback+0x36e>
 801a3de:	2900      	cmp	r1, #0
 801a3e0:	d1b2      	bne.n	801a348 <HCI_Event_Callback+0x26c>
 801a3e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a3e4:	1ce9      	adds	r1, r5, #3
 801a3e6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a3e8:	3050      	adds	r0, #80	; 0x50
 801a3ea:	f000 fef4 	bl	801b1d6 <SearchCallbackEntry>
 801a3ee:	b358      	cbz	r0, 801a448 <HCI_Event_Callback+0x36c>
 801a3f0:	6881      	ldr	r1, [r0, #8]
 801a3f2:	2901      	cmp	r1, #1
 801a3f4:	d002      	beq.n	801a3fc <HCI_Event_Callback+0x320>
 801a3f6:	6861      	ldr	r1, [r4, #4]
 801a3f8:	7809      	ldrb	r1, [r1, #0]
 801a3fa:	b339      	cbz	r1, 801a44c <HCI_Event_Callback+0x370>
 801a3fc:	6860      	ldr	r0, [r4, #4]
 801a3fe:	f04f 0801 	mov.w	r8, #1
 801a402:	7800      	ldrb	r0, [r0, #0]
 801a404:	b978      	cbnz	r0, 801a426 <HCI_Event_Callback+0x34a>
 801a406:	f8d5 1003 	ldr.w	r1, [r5, #3]
 801a40a:	9100      	str	r1, [sp, #0]
 801a40c:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 801a410:	f8ad 0004 	strh.w	r0, [sp, #4]
 801a414:	ab0f      	add	r3, sp, #60	; 0x3c
 801a416:	9a01      	ldr	r2, [sp, #4]
 801a418:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a41a:	f008 fb39 	bl	8022a90 <L2CA_Get_Link_Connection_State>
 801a41e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801a422:	4308      	orrs	r0, r1
 801a424:	d107      	bne.n	801a436 <HCI_Event_Callback+0x35a>
 801a426:	8829      	ldrh	r1, [r5, #0]
 801a428:	2213      	movs	r2, #19
 801a42a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a42c:	f005 fed8 	bl	80201e0 <_HCI_Disconnect>
 801a430:	b908      	cbnz	r0, 801a436 <HCI_Event_Callback+0x35a>
 801a432:	f885 b002 	strb.w	fp, [r5, #2]
 801a436:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a438:	1ce9      	adds	r1, r5, #3
 801a43a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a43c:	3050      	adds	r0, #80	; 0x50
 801a43e:	f7ff fb8b 	bl	8019b58 <DeleteCallbackEntry>
 801a442:	b108      	cbz	r0, 801a448 <HCI_Event_Callback+0x36c>
 801a444:	f7fe fc47 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801a448:	e003      	b.n	801a452 <HCI_Event_Callback+0x376>
 801a44a:	e020      	b.n	801a48e <HCI_Event_Callback+0x3b2>
 801a44c:	e7ff      	b.n	801a44e <HCI_Event_Callback+0x372>
 801a44e:	f8c0 a00c 	str.w	sl, [r0, #12]
 801a452:	6861      	ldr	r1, [r4, #4]
 801a454:	1ce8      	adds	r0, r5, #3
 801a456:	464b      	mov	r3, r9
 801a458:	7809      	ldrb	r1, [r1, #0]
 801a45a:	4632      	mov	r2, r6
 801a45c:	e9cd 0100 	strd	r0, r1, [sp]
 801a460:	a90a      	add	r1, sp, #40	; 0x28
 801a462:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a464:	f7ff fbbb 	bl	8019bde <FormatAndDispatchAuthenticationStatusEvent>
 801a468:	6860      	ldr	r0, [r4, #4]
 801a46a:	7800      	ldrb	r0, [r0, #0]
 801a46c:	2800      	cmp	r0, #0
 801a46e:	d1b7      	bne.n	801a3e0 <HCI_Event_Callback+0x304>
 801a470:	2f01      	cmp	r7, #1
 801a472:	d1b5      	bne.n	801a3e0 <HCI_Event_Callback+0x304>
 801a474:	f1b8 0f00 	cmp.w	r8, #0
 801a478:	d1b2      	bne.n	801a3e0 <HCI_Event_Callback+0x304>
 801a47a:	e9cd 6900 	strd	r6, r9, [sp]
 801a47e:	f855 1f03 	ldr.w	r1, [r5, #3]!
 801a482:	910d      	str	r1, [sp, #52]	; 0x34
 801a484:	88a8      	ldrh	r0, [r5, #4]
 801a486:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801a48a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a48c:	e01f      	b.n	801a4ce <HCI_Event_Callback+0x3f2>
 801a48e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a490:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a492:	6c82      	ldr	r2, [r0, #72]	; 0x48
 801a494:	b14a      	cbz	r2, 801a4aa <HCI_Event_Callback+0x3ce>
 801a496:	6863      	ldr	r3, [r4, #4]
 801a498:	1ce9      	adds	r1, r5, #3
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	e9cd 1300 	strd	r1, r3, [sp]
 801a4a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801a4a2:	a90a      	add	r1, sp, #40	; 0x28
 801a4a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a4a6:	f7ff fb9a 	bl	8019bde <FormatAndDispatchAuthenticationStatusEvent>
 801a4aa:	6860      	ldr	r0, [r4, #4]
 801a4ac:	7800      	ldrb	r0, [r0, #0]
 801a4ae:	2800      	cmp	r0, #0
 801a4b0:	d196      	bne.n	801a3e0 <HCI_Event_Callback+0x304>
 801a4b2:	2f01      	cmp	r7, #1
 801a4b4:	d194      	bne.n	801a3e0 <HCI_Event_Callback+0x304>
 801a4b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a4b8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 801a4ba:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 801a4bc:	6c89      	ldr	r1, [r1, #72]	; 0x48
 801a4be:	e9cd 1200 	strd	r1, r2, [sp]
 801a4c2:	f855 1f03 	ldr.w	r1, [r5, #3]!
 801a4c6:	910d      	str	r1, [sp, #52]	; 0x34
 801a4c8:	88aa      	ldrh	r2, [r5, #4]
 801a4ca:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a4ce:	6800      	ldr	r0, [r0, #0]
 801a4d0:	2301      	movs	r3, #1
 801a4d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4d4:	f7ff fdc0 	bl	801a058 <GAP_Set_Encryption_Mode>
 801a4d8:	e148      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a4da:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a4dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a4de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801a4e0:	e0be      	b.n	801a660 <HCI_Event_Callback+0x584>
 801a4e2:	6860      	ldr	r0, [r4, #4]
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	d0f7      	beq.n	801a4d8 <HCI_Event_Callback+0x3fc>
 801a4e8:	8841      	ldrh	r1, [r0, #2]
 801a4ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a4ec:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a4ee:	301c      	adds	r0, #28
 801a4f0:	f000 fe67 	bl	801b1c2 <SearchACLLinkEntryConnection_Handle>
 801a4f4:	0005      	movs	r5, r0
 801a4f6:	d0ef      	beq.n	801a4d8 <HCI_Event_Callback+0x3fc>
 801a4f8:	68e8      	ldr	r0, [r5, #12]
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	d0ec      	beq.n	801a4d8 <HCI_Event_Callback+0x3fc>
 801a4fe:	6860      	ldr	r0, [r4, #4]
 801a500:	2300      	movs	r3, #0
 801a502:	7800      	ldrb	r0, [r0, #0]
 801a504:	9000      	str	r0, [sp, #0]
 801a506:	462a      	mov	r2, r5
 801a508:	a90a      	add	r1, sp, #40	; 0x28
 801a50a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a50c:	f7ff fb80 	bl	8019c10 <FormatAndDispatchEncryptionChangeEvent>
 801a510:	60ee      	str	r6, [r5, #12]
 801a512:	e12b      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a514:	6860      	ldr	r0, [r4, #4]
 801a516:	2800      	cmp	r0, #0
 801a518:	d0de      	beq.n	801a4d8 <HCI_Event_Callback+0x3fc>
 801a51a:	2004      	movs	r0, #4
 801a51c:	f88d 000c 	strb.w	r0, [sp, #12]
 801a520:	6860      	ldr	r0, [r4, #4]
 801a522:	6801      	ldr	r1, [r0, #0]
 801a524:	f8cd 100d 	str.w	r1, [sp, #13]
 801a528:	8880      	ldrh	r0, [r0, #4]
 801a52a:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a52e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a530:	6861      	ldr	r1, [r4, #4]
 801a532:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a534:	301c      	adds	r0, #28
 801a536:	f000 fe3c 	bl	801b1b2 <SearchACLLinkEntryBD_ADDR>
 801a53a:	b120      	cbz	r0, 801a546 <HCI_Event_Callback+0x46a>
 801a53c:	6980      	ldr	r0, [r0, #24]
 801a53e:	b110      	cbz	r0, 801a546 <HCI_Event_Callback+0x46a>
 801a540:	f88d 6014 	strb.w	r6, [sp, #20]
 801a544:	e06e      	b.n	801a624 <HCI_Event_Callback+0x548>
 801a546:	f88d 7014 	strb.w	r7, [sp, #20]
 801a54a:	e06b      	b.n	801a624 <HCI_Event_Callback+0x548>
 801a54c:	6860      	ldr	r0, [r4, #4]
 801a54e:	2800      	cmp	r0, #0
 801a550:	d06e      	beq.n	801a630 <HCI_Event_Callback+0x554>
 801a552:	200a      	movs	r0, #10
 801a554:	f88d 000c 	strb.w	r0, [sp, #12]
 801a558:	6860      	ldr	r0, [r4, #4]
 801a55a:	6801      	ldr	r1, [r0, #0]
 801a55c:	f8cd 100d 	str.w	r1, [sp, #13]
 801a560:	8880      	ldrh	r0, [r0, #4]
 801a562:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a566:	6860      	ldr	r0, [r4, #4]
 801a568:	79c0      	ldrb	r0, [r0, #7]
 801a56a:	f88d 0015 	strb.w	r0, [sp, #21]
 801a56e:	6860      	ldr	r0, [r4, #4]
 801a570:	7980      	ldrb	r0, [r0, #6]
 801a572:	2803      	cmp	r0, #3
 801a574:	d801      	bhi.n	801a57a <HCI_Event_Callback+0x49e>
 801a576:	4980      	ldr	r1, [pc, #512]	; (801a778 <HCI_Event_Callback+0x69c>)
 801a578:	5c08      	ldrb	r0, [r1, r0]
 801a57a:	f88d 0014 	strb.w	r0, [sp, #20]
 801a57e:	6860      	ldr	r0, [r4, #4]
 801a580:	7a00      	ldrb	r0, [r0, #8]
 801a582:	2805      	cmp	r0, #5
 801a584:	d80b      	bhi.n	801a59e <HCI_Event_Callback+0x4c2>
 801a586:	497c      	ldr	r1, [pc, #496]	; (801a778 <HCI_Event_Callback+0x69c>)
 801a588:	3112      	adds	r1, #18
 801a58a:	5c08      	ldrb	r0, [r1, r0]
 801a58c:	f88d 0016 	strb.w	r0, [sp, #22]
 801a590:	6860      	ldr	r0, [r4, #4]
 801a592:	1d89      	adds	r1, r1, #6
 801a594:	7a00      	ldrb	r0, [r0, #8]
 801a596:	5c08      	ldrb	r0, [r1, r0]
 801a598:	f88d 0017 	strb.w	r0, [sp, #23]
 801a59c:	e042      	b.n	801a624 <HCI_Event_Callback+0x548>
 801a59e:	f88d 6016 	strb.w	r6, [sp, #22]
 801a5a2:	f88d 6017 	strb.w	r6, [sp, #23]
 801a5a6:	e03d      	b.n	801a624 <HCI_Event_Callback+0x548>
 801a5a8:	6860      	ldr	r0, [r4, #4]
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	d040      	beq.n	801a630 <HCI_Event_Callback+0x554>
 801a5ae:	2005      	movs	r0, #5
 801a5b0:	e016      	b.n	801a5e0 <HCI_Event_Callback+0x504>
 801a5b2:	6860      	ldr	r0, [r4, #4]
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	d03b      	beq.n	801a630 <HCI_Event_Callback+0x554>
 801a5b8:	2006      	movs	r0, #6
 801a5ba:	e003      	b.n	801a5c4 <HCI_Event_Callback+0x4e8>
 801a5bc:	6860      	ldr	r0, [r4, #4]
 801a5be:	2800      	cmp	r0, #0
 801a5c0:	d036      	beq.n	801a630 <HCI_Event_Callback+0x554>
 801a5c2:	2009      	movs	r0, #9
 801a5c4:	f88d 000c 	strb.w	r0, [sp, #12]
 801a5c8:	6860      	ldr	r0, [r4, #4]
 801a5ca:	6801      	ldr	r1, [r0, #0]
 801a5cc:	f8cd 100d 	str.w	r1, [sp, #13]
 801a5d0:	8880      	ldrh	r0, [r0, #4]
 801a5d2:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a5d6:	e025      	b.n	801a624 <HCI_Event_Callback+0x548>
 801a5d8:	6860      	ldr	r0, [r4, #4]
 801a5da:	2800      	cmp	r0, #0
 801a5dc:	d028      	beq.n	801a630 <HCI_Event_Callback+0x554>
 801a5de:	2007      	movs	r0, #7
 801a5e0:	f88d 000c 	strb.w	r0, [sp, #12]
 801a5e4:	6860      	ldr	r0, [r4, #4]
 801a5e6:	6801      	ldr	r1, [r0, #0]
 801a5e8:	f8cd 100d 	str.w	r1, [sp, #13]
 801a5ec:	8880      	ldrh	r0, [r0, #4]
 801a5ee:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a5f2:	6860      	ldr	r0, [r4, #4]
 801a5f4:	6880      	ldr	r0, [r0, #8]
 801a5f6:	9005      	str	r0, [sp, #20]
 801a5f8:	e014      	b.n	801a624 <HCI_Event_Callback+0x548>
 801a5fa:	6860      	ldr	r0, [r4, #4]
 801a5fc:	b1c0      	cbz	r0, 801a630 <HCI_Event_Callback+0x554>
 801a5fe:	2008      	movs	r0, #8
 801a600:	f88d 000c 	strb.w	r0, [sp, #12]
 801a604:	6860      	ldr	r0, [r4, #4]
 801a606:	6801      	ldr	r1, [r0, #0]
 801a608:	f8cd 100d 	str.w	r1, [sp, #13]
 801a60c:	8880      	ldrh	r0, [r0, #4]
 801a60e:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a612:	6860      	ldr	r0, [r4, #4]
 801a614:	7980      	ldrb	r0, [r0, #6]
 801a616:	2804      	cmp	r0, #4
 801a618:	d802      	bhi.n	801a620 <HCI_Event_Callback+0x544>
 801a61a:	4957      	ldr	r1, [pc, #348]	; (801a778 <HCI_Event_Callback+0x69c>)
 801a61c:	3108      	adds	r1, #8
 801a61e:	5c08      	ldrb	r0, [r1, r0]
 801a620:	f88d 0014 	strb.w	r0, [sp, #20]
 801a624:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a626:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a628:	aa03      	add	r2, sp, #12
 801a62a:	a90a      	add	r1, sp, #40	; 0x28
 801a62c:	f7ff fab9 	bl	8019ba2 <FormatAndDispatchAuthenticationEvent>
 801a630:	e09c      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a632:	6860      	ldr	r0, [r4, #4]
 801a634:	b3f0      	cbz	r0, 801a6b4 <HCI_Event_Callback+0x5d8>
 801a636:	200b      	movs	r0, #11
 801a638:	f88d 000c 	strb.w	r0, [sp, #12]
 801a63c:	6860      	ldr	r0, [r4, #4]
 801a63e:	f850 1f01 	ldr.w	r1, [r0, #1]!
 801a642:	f8cd 100d 	str.w	r1, [sp, #13]
 801a646:	8880      	ldrh	r0, [r0, #4]
 801a648:	f8ad 0011 	strh.w	r0, [sp, #17]
 801a64c:	6860      	ldr	r0, [r4, #4]
 801a64e:	7800      	ldrb	r0, [r0, #0]
 801a650:	e7e6      	b.n	801a620 <HCI_Event_Callback+0x544>
 801a652:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a654:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a656:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801a658:	e002      	b.n	801a660 <HCI_Event_Callback+0x584>
 801a65a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a65c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a65e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801a660:	b343      	cbz	r3, 801a6b4 <HCI_Event_Callback+0x5d8>
 801a662:	464a      	mov	r2, r9
 801a664:	4621      	mov	r1, r4
 801a666:	4798      	blx	r3
 801a668:	e080      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a66a:	8809      	ldrh	r1, [r1, #0]
 801a66c:	301c      	adds	r0, #28
 801a66e:	f7ff fa69 	bl	8019b44 <DeleteACLLinkEntryConnection_Handle>
 801a672:	0005      	movs	r5, r0
 801a674:	d029      	beq.n	801a6ca <HCI_Event_Callback+0x5ee>
 801a676:	68e8      	ldr	r0, [r5, #12]
 801a678:	b138      	cbz	r0, 801a68a <HCI_Event_Callback+0x5ae>
 801a67a:	2301      	movs	r3, #1
 801a67c:	462a      	mov	r2, r5
 801a67e:	a90a      	add	r1, sp, #40	; 0x28
 801a680:	f8cd 8000 	str.w	r8, [sp]
 801a684:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a686:	f7ff fac3 	bl	8019c10 <FormatAndDispatchEncryptionChangeEvent>
 801a68a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a68c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a68e:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 801a692:	b1b0      	cbz	r0, 801a6c2 <HCI_Event_Callback+0x5e6>
 801a694:	69aa      	ldr	r2, [r5, #24]
 801a696:	b1a2      	cbz	r2, 801a6c2 <HCI_Event_Callback+0x5e6>
 801a698:	7d28      	ldrb	r0, [r5, #20]
 801a69a:	b990      	cbnz	r0, 801a6c2 <HCI_Event_Callback+0x5e6>
 801a69c:	1ce9      	adds	r1, r5, #3
 801a69e:	e9cd 1800 	strd	r1, r8, [sp]
 801a6a2:	a90a      	add	r1, sp, #40	; 0x28
 801a6a4:	69eb      	ldr	r3, [r5, #28]
 801a6a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a6a8:	f7ff fa99 	bl	8019bde <FormatAndDispatchAuthenticationStatusEvent>
 801a6ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6ae:	1ce9      	adds	r1, r5, #3
 801a6b0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a6b2:	e000      	b.n	801a6b6 <HCI_Event_Callback+0x5da>
 801a6b4:	e05a      	b.n	801a76c <HCI_Event_Callback+0x690>
 801a6b6:	3050      	adds	r0, #80	; 0x50
 801a6b8:	f7ff fa4e 	bl	8019b58 <DeleteCallbackEntry>
 801a6bc:	b108      	cbz	r0, 801a6c2 <HCI_Event_Callback+0x5e6>
 801a6be:	f7fe fb0a 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801a6c2:	4628      	mov	r0, r5
 801a6c4:	f7fe fb07 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801a6c8:	e005      	b.n	801a6d6 <HCI_Event_Callback+0x5fa>
 801a6ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6cc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a6ce:	61c6      	str	r6, [r0, #28]
 801a6d0:	e006      	b.n	801a6e0 <HCI_Event_Callback+0x604>
 801a6d2:	f04f 0816 	mov.w	r8, #22
 801a6d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6d8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a6da:	69c1      	ldr	r1, [r0, #28]
 801a6dc:	2900      	cmp	r1, #0
 801a6de:	d1c4      	bne.n	801a66a <HCI_Event_Callback+0x58e>
 801a6e0:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6e2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a6e4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801a6e6:	b113      	cbz	r3, 801a6ee <HCI_Event_Callback+0x612>
 801a6e8:	aa0a      	add	r2, sp, #40	; 0x28
 801a6ea:	4621      	mov	r1, r4
 801a6ec:	4798      	blx	r3
 801a6ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a6f2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801a6f4:	b113      	cbz	r3, 801a6fc <HCI_Event_Callback+0x620>
 801a6f6:	aa0a      	add	r2, sp, #40	; 0x28
 801a6f8:	4621      	mov	r1, r4
 801a6fa:	4798      	blx	r3
 801a6fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6fe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a700:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801a702:	b113      	cbz	r3, 801a70a <HCI_Event_Callback+0x62e>
 801a704:	aa0a      	add	r2, sp, #40	; 0x28
 801a706:	4621      	mov	r1, r4
 801a708:	4798      	blx	r3
 801a70a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a70c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a70e:	6e05      	ldr	r5, [r0, #96]	; 0x60
 801a710:	b135      	cbz	r5, 801a720 <HCI_Event_Callback+0x644>
 801a712:	9600      	str	r6, [sp, #0]
 801a714:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801a718:	2300      	movs	r3, #0
 801a71a:	461a      	mov	r2, r3
 801a71c:	4621      	mov	r1, r4
 801a71e:	47a8      	blx	r5
 801a720:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a722:	6d08      	ldr	r0, [r1, #80]	; 0x50
 801a724:	6f02      	ldr	r2, [r0, #112]	; 0x70
 801a726:	b14a      	cbz	r2, 801a73c <HCI_Event_Callback+0x660>
 801a728:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a72a:	b138      	cbz	r0, 801a73c <HCI_Event_Callback+0x660>
 801a72c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801a730:	9604      	str	r6, [sp, #16]
 801a732:	6d08      	ldr	r0, [r1, #80]	; 0x50
 801a734:	aa03      	add	r2, sp, #12
 801a736:	a90a      	add	r1, sp, #40	; 0x28
 801a738:	f7ff fa8f 	bl	8019c5a <FormatAndDispatchInquiryEvent>
 801a73c:	2200      	movs	r2, #0
 801a73e:	4611      	mov	r1, r2
 801a740:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a742:	f7ff fbc3 	bl	8019ecc <GAP_Set_Discoverability_Mode>
 801a746:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a748:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a74a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801a74c:	b12c      	cbz	r4, 801a75a <HCI_Event_Callback+0x67e>
 801a74e:	2300      	movs	r3, #0
 801a750:	461a      	mov	r2, r3
 801a752:	4619      	mov	r1, r3
 801a754:	e9cd 6700 	strd	r6, r7, [sp]
 801a758:	47a0      	blx	r4
 801a75a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a75c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801a75e:	7b00      	ldrb	r0, [r0, #12]
 801a760:	07c0      	lsls	r0, r0, #31
 801a762:	d003      	beq.n	801a76c <HCI_Event_Callback+0x690>
 801a764:	2101      	movs	r1, #1
 801a766:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a768:	f006 fb65 	bl	8020e36 <_HCI_Write_Simple_Pairing_Mode>
 801a76c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a76e:	f7fe ff19 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801a772:	b013      	add	sp, #76	; 0x4c
 801a774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a778:	08039730 	.word	0x08039730

0801a77c <HCI_Event_Callback>:
 801a77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a780:	b09e      	sub	sp, #120	; 0x78
 801a782:	000c      	movs	r4, r1
 801a784:	d074      	beq.n	801a870 <HCI_Event_Callback+0xf4>
 801a786:	a917      	add	r1, sp, #92	; 0x5c
 801a788:	a81c      	add	r0, sp, #112	; 0x70
 801a78a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a78c:	f000 fd2b 	bl	801b1e6 <AcquireGAPStackInfo>
 801a790:	2800      	cmp	r0, #0
 801a792:	d16d      	bne.n	801a870 <HCI_Event_Callback+0xf4>
 801a794:	7820      	ldrb	r0, [r4, #0]
 801a796:	2704      	movs	r7, #4
 801a798:	2600      	movs	r6, #0
 801a79a:	f10d 0a08 	add.w	sl, sp, #8
 801a79e:	f04f 0801 	mov.w	r8, #1
 801a7a2:	2820      	cmp	r0, #32
 801a7a4:	d02b      	beq.n	801a7fe <HCI_Event_Callback+0x82>
 801a7a6:	dc04      	bgt.n	801a7b2 <HCI_Event_Callback+0x36>
 801a7a8:	2804      	cmp	r0, #4
 801a7aa:	d034      	beq.n	801a816 <HCI_Event_Callback+0x9a>
 801a7ac:	2807      	cmp	r0, #7
 801a7ae:	d131      	bne.n	801a814 <HCI_Event_Callback+0x98>
 801a7b0:	e05f      	b.n	801a872 <HCI_Event_Callback+0xf6>
 801a7b2:	2828      	cmp	r0, #40	; 0x28
 801a7b4:	d07e      	beq.n	801a8b4 <HCI_Event_Callback+0x138>
 801a7b6:	2842      	cmp	r0, #66	; 0x42
 801a7b8:	d1f9      	bne.n	801a7ae <HCI_Event_Callback+0x32>
 801a7ba:	e0fe      	b.n	801a9ba <HCI_Event_Callback+0x23e>
 801a7bc:	8809      	ldrh	r1, [r1, #0]
 801a7be:	3058      	adds	r0, #88	; 0x58
 801a7c0:	f001 f8a3 	bl	801b90a <DeleteLELinkEntryConnection_Handle>
 801a7c4:	0004      	movs	r4, r0
 801a7c6:	d01b      	beq.n	801a800 <HCI_Event_Callback+0x84>
 801a7c8:	69e0      	ldr	r0, [r4, #28]
 801a7ca:	b120      	cbz	r0, 801a7d6 <HCI_Event_Callback+0x5a>
 801a7cc:	2201      	movs	r2, #1
 801a7ce:	4621      	mov	r1, r4
 801a7d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a7d2:	f001 f927 	bl	801ba24 <DispatchPairingStatusCallback>
 801a7d6:	7920      	ldrb	r0, [r4, #4]
 801a7d8:	07c0      	lsls	r0, r0, #31
 801a7da:	d005      	beq.n	801a7e8 <HCI_Event_Callback+0x6c>
 801a7dc:	2304      	movs	r3, #4
 801a7de:	aa02      	add	r2, sp, #8
 801a7e0:	4621      	mov	r1, r4
 801a7e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a7e4:	f001 f955 	bl	801ba92 <DispatchSecurityEstablishmentCallback>
 801a7e8:	231f      	movs	r3, #31
 801a7ea:	aa02      	add	r2, sp, #8
 801a7ec:	4621      	mov	r1, r4
 801a7ee:	9500      	str	r5, [sp, #0]
 801a7f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a7f2:	f001 f8eb 	bl	801b9cc <DispatchDisconnectionCompleteCallback>
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	f001 f9ca 	bl	801bb90 <FreeLELinkEntryMemory>
 801a7fc:	e000      	b.n	801a800 <HCI_Event_Callback+0x84>
 801a7fe:	251f      	movs	r5, #31
 801a800:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a802:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801a804:	2900      	cmp	r1, #0
 801a806:	d1d9      	bne.n	801a7bc <HCI_Event_Callback+0x40>
 801a808:	3054      	adds	r0, #84	; 0x54
 801a80a:	f001 f9be 	bl	801bb8a <FreeCallbackInfoList>
 801a80e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a810:	7706      	strb	r6, [r0, #28]
 801a812:	83c6      	strh	r6, [r0, #30]
 801a814:	e226      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801a816:	6860      	ldr	r0, [r4, #4]
 801a818:	2800      	cmp	r0, #0
 801a81a:	d0fb      	beq.n	801a814 <HCI_Event_Callback+0x98>
 801a81c:	7801      	ldrb	r1, [r0, #0]
 801a81e:	2900      	cmp	r1, #0
 801a820:	d1f8      	bne.n	801a814 <HCI_Event_Callback+0x98>
 801a822:	8841      	ldrh	r1, [r0, #2]
 801a824:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a826:	3058      	adds	r0, #88	; 0x58
 801a828:	f001 f86f 	bl	801b90a <DeleteLELinkEntryConnection_Handle>
 801a82c:	0005      	movs	r5, r0
 801a82e:	d0f1      	beq.n	801a814 <HCI_Event_Callback+0x98>
 801a830:	69e8      	ldr	r0, [r5, #28]
 801a832:	b120      	cbz	r0, 801a83e <HCI_Event_Callback+0xc2>
 801a834:	2201      	movs	r2, #1
 801a836:	4629      	mov	r1, r5
 801a838:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a83a:	f001 f8f3 	bl	801ba24 <DispatchPairingStatusCallback>
 801a83e:	7928      	ldrb	r0, [r5, #4]
 801a840:	07c0      	lsls	r0, r0, #31
 801a842:	d005      	beq.n	801a850 <HCI_Event_Callback+0xd4>
 801a844:	2304      	movs	r3, #4
 801a846:	aa02      	add	r2, sp, #8
 801a848:	4629      	mov	r1, r5
 801a84a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a84c:	f001 f921 	bl	801ba92 <DispatchSecurityEstablishmentCallback>
 801a850:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a852:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801a854:	b901      	cbnz	r1, 801a858 <HCI_Event_Callback+0xdc>
 801a856:	7706      	strb	r6, [r0, #28]
 801a858:	6861      	ldr	r1, [r4, #4]
 801a85a:	790a      	ldrb	r2, [r1, #4]
 801a85c:	9200      	str	r2, [sp, #0]
 801a85e:	780b      	ldrb	r3, [r1, #0]
 801a860:	aa02      	add	r2, sp, #8
 801a862:	4629      	mov	r1, r5
 801a864:	f001 f8b2 	bl	801b9cc <DispatchDisconnectionCompleteCallback>
 801a868:	4628      	mov	r0, r5
 801a86a:	f001 f991 	bl	801bb90 <FreeLELinkEntryMemory>
 801a86e:	e1f9      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801a870:	e1fb      	b.n	801ac6a <HCI_Event_Callback+0x4ee>
 801a872:	6860      	ldr	r0, [r4, #4]
 801a874:	2800      	cmp	r0, #0
 801a876:	d0cd      	beq.n	801a814 <HCI_Event_Callback+0x98>
 801a878:	8841      	ldrh	r1, [r0, #2]
 801a87a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a87c:	3058      	adds	r0, #88	; 0x58
 801a87e:	f003 fda5 	bl	801e3cc <SearchLELinkEntryConnection_Handle>
 801a882:	0005      	movs	r5, r0
 801a884:	d0c6      	beq.n	801a814 <HCI_Event_Callback+0x98>
 801a886:	75ae      	strb	r6, [r5, #22]
 801a888:	6860      	ldr	r0, [r4, #4]
 801a88a:	7801      	ldrb	r1, [r0, #0]
 801a88c:	b921      	cbnz	r1, 801a898 <HCI_Event_Callback+0x11c>
 801a88e:	7900      	ldrb	r0, [r0, #4]
 801a890:	2801      	cmp	r0, #1
 801a892:	d101      	bne.n	801a898 <HCI_Event_Callback+0x11c>
 801a894:	f885 8016 	strb.w	r8, [r5, #22]
 801a898:	2104      	movs	r1, #4
 801a89a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801a89e:	f003 fd83 	bl	801e3a8 <SearchCallbackInfoByType>
 801a8a2:	b1e8      	cbz	r0, 801a8e0 <HCI_Event_Callback+0x164>
 801a8a4:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
 801a8a8:	2108      	movs	r1, #8
 801a8aa:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
 801a8ae:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801a8b2:	e000      	b.n	801a8b6 <HCI_Event_Callback+0x13a>
 801a8b4:	e030      	b.n	801a918 <HCI_Event_Callback+0x19c>
 801a8b6:	f8d5 1009 	ldr.w	r1, [r5, #9]
 801a8ba:	9102      	str	r1, [sp, #8]
 801a8bc:	f8b5 100d 	ldrh.w	r1, [r5, #13]
 801a8c0:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a8c4:	6861      	ldr	r1, [r4, #4]
 801a8c6:	7809      	ldrb	r1, [r1, #0]
 801a8c8:	f88d 100e 	strb.w	r1, [sp, #14]
 801a8cc:	7da9      	ldrb	r1, [r5, #22]
 801a8ce:	f88d 100f 	strb.w	r1, [sp, #15]
 801a8d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a8d4:	6882      	ldr	r2, [r0, #8]
 801a8d6:	6844      	ldr	r4, [r0, #4]
 801a8d8:	680b      	ldr	r3, [r1, #0]
 801a8da:	a918      	add	r1, sp, #96	; 0x60
 801a8dc:	4618      	mov	r0, r3
 801a8de:	47a0      	blx	r4
 801a8e0:	7928      	ldrb	r0, [r5, #4]
 801a8e2:	07c0      	lsls	r0, r0, #31
 801a8e4:	d00a      	beq.n	801a8fc <HCI_Event_Callback+0x180>
 801a8e6:	7da8      	ldrb	r0, [r5, #22]
 801a8e8:	2801      	cmp	r0, #1
 801a8ea:	d001      	beq.n	801a8f0 <HCI_Event_Callback+0x174>
 801a8ec:	2301      	movs	r3, #1
 801a8ee:	e000      	b.n	801a8f2 <HCI_Event_Callback+0x176>
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	aa02      	add	r2, sp, #8
 801a8f4:	4629      	mov	r1, r5
 801a8f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a8f8:	f001 f8cb 	bl	801ba92 <DispatchSecurityEstablishmentCallback>
 801a8fc:	69e8      	ldr	r0, [r5, #28]
 801a8fe:	2800      	cmp	r0, #0
 801a900:	d088      	beq.n	801a814 <HCI_Event_Callback+0x98>
 801a902:	6801      	ldr	r1, [r0, #0]
 801a904:	b121      	cbz	r1, 801a910 <HCI_Event_Callback+0x194>
 801a906:	981e      	ldr	r0, [sp, #120]	; 0x78
 801a908:	f7fe ffc4 	bl	8019894 <BTPS_StopTimer>
 801a90c:	69e8      	ldr	r0, [r5, #28]
 801a90e:	6006      	str	r6, [r0, #0]
 801a910:	7da8      	ldrb	r0, [r5, #22]
 801a912:	2801      	cmp	r0, #1
 801a914:	d04b      	beq.n	801a9ae <HCI_Event_Callback+0x232>
 801a916:	e044      	b.n	801a9a2 <HCI_Event_Callback+0x226>
 801a918:	6860      	ldr	r0, [r4, #4]
 801a91a:	2800      	cmp	r0, #0
 801a91c:	d0a7      	beq.n	801a86e <HCI_Event_Callback+0xf2>
 801a91e:	8841      	ldrh	r1, [r0, #2]
 801a920:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a922:	3058      	adds	r0, #88	; 0x58
 801a924:	f003 fd52 	bl	801e3cc <SearchLELinkEntryConnection_Handle>
 801a928:	0005      	movs	r5, r0
 801a92a:	d0a0      	beq.n	801a86e <HCI_Event_Callback+0xf2>
 801a92c:	2104      	movs	r1, #4
 801a92e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801a932:	f003 fd39 	bl	801e3a8 <SearchCallbackInfoByType>
 801a936:	b1c8      	cbz	r0, 801a96c <HCI_Event_Callback+0x1f0>
 801a938:	2105      	movs	r1, #5
 801a93a:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
 801a93e:	2107      	movs	r1, #7
 801a940:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
 801a944:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801a948:	f8d5 1009 	ldr.w	r1, [r5, #9]
 801a94c:	9102      	str	r1, [sp, #8]
 801a94e:	f8b5 100d 	ldrh.w	r1, [r5, #13]
 801a952:	f8ad 100c 	strh.w	r1, [sp, #12]
 801a956:	6861      	ldr	r1, [r4, #4]
 801a958:	7809      	ldrb	r1, [r1, #0]
 801a95a:	f88d 100e 	strb.w	r1, [sp, #14]
 801a95e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a960:	6882      	ldr	r2, [r0, #8]
 801a962:	6843      	ldr	r3, [r0, #4]
 801a964:	680f      	ldr	r7, [r1, #0]
 801a966:	a918      	add	r1, sp, #96	; 0x60
 801a968:	4638      	mov	r0, r7
 801a96a:	4798      	blx	r3
 801a96c:	7928      	ldrb	r0, [r5, #4]
 801a96e:	07c0      	lsls	r0, r0, #31
 801a970:	d00a      	beq.n	801a988 <HCI_Event_Callback+0x20c>
 801a972:	6860      	ldr	r0, [r4, #4]
 801a974:	7800      	ldrb	r0, [r0, #0]
 801a976:	b108      	cbz	r0, 801a97c <HCI_Event_Callback+0x200>
 801a978:	2301      	movs	r3, #1
 801a97a:	e000      	b.n	801a97e <HCI_Event_Callback+0x202>
 801a97c:	2300      	movs	r3, #0
 801a97e:	aa02      	add	r2, sp, #8
 801a980:	4629      	mov	r1, r5
 801a982:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a984:	f001 f885 	bl	801ba92 <DispatchSecurityEstablishmentCallback>
 801a988:	69e8      	ldr	r0, [r5, #28]
 801a98a:	2800      	cmp	r0, #0
 801a98c:	d0b8      	beq.n	801a900 <HCI_Event_Callback+0x184>
 801a98e:	6801      	ldr	r1, [r0, #0]
 801a990:	b121      	cbz	r1, 801a99c <HCI_Event_Callback+0x220>
 801a992:	981e      	ldr	r0, [sp, #120]	; 0x78
 801a994:	f7fe ff7e 	bl	8019894 <BTPS_StopTimer>
 801a998:	69e8      	ldr	r0, [r5, #28]
 801a99a:	6006      	str	r6, [r0, #0]
 801a99c:	6860      	ldr	r0, [r4, #4]
 801a99e:	7800      	ldrb	r0, [r0, #0]
 801a9a0:	b128      	cbz	r0, 801a9ae <HCI_Event_Callback+0x232>
 801a9a2:	220b      	movs	r2, #11
 801a9a4:	4629      	mov	r1, r5
 801a9a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a9a8:	f001 f83c 	bl	801ba24 <DispatchPairingStatusCallback>
 801a9ac:	e15a      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801a9ae:	aa02      	add	r2, sp, #8
 801a9b0:	4629      	mov	r1, r5
 801a9b2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a9b4:	f003 fa46 	bl	801de44 <PairingEncryptionChange>
 801a9b8:	e154      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801a9ba:	6864      	ldr	r4, [r4, #4]
 801a9bc:	2c00      	cmp	r4, #0
 801a9be:	d0f5      	beq.n	801a9ac <HCI_Event_Callback+0x230>
 801a9c0:	7820      	ldrb	r0, [r4, #0]
 801a9c2:	2805      	cmp	r0, #5
 801a9c4:	d2f2      	bcs.n	801a9ac <HCI_Event_Callback+0x230>
 801a9c6:	e8df f000 	tbb	[pc, r0]
 801a9ca:	ab03      	.short	0xab03
 801a9cc:	00f2ecb3 	.word	0x00f2ecb3
 801a9d0:	78a0      	ldrb	r0, [r4, #2]
 801a9d2:	b108      	cbz	r0, 801a9d8 <HCI_Event_Callback+0x25c>
 801a9d4:	2701      	movs	r7, #1
 801a9d6:	e000      	b.n	801a9da <HCI_Event_Callback+0x25e>
 801a9d8:	2700      	movs	r7, #0
 801a9da:	2230      	movs	r2, #48	; 0x30
 801a9dc:	2100      	movs	r1, #0
 801a9de:	a80b      	add	r0, sp, #44	; 0x2c
 801a9e0:	f7f8 fd6d 	bl	80134be <BTPS_MemInitialize>
 801a9e4:	79a0      	ldrb	r0, [r4, #6]
 801a9e6:	f04f 0b02 	mov.w	fp, #2
 801a9ea:	2800      	cmp	r0, #0
 801a9ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a9ee:	d042      	beq.n	801aa76 <HCI_Event_Callback+0x2fa>
 801a9f0:	f880 801c 	strb.w	r8, [r0, #28]
 801a9f4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 801a9f8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801a9fc:	8bc2      	ldrh	r2, [r0, #30]
 801a9fe:	2103      	movs	r1, #3
 801aa00:	f022 0204 	bic.w	r2, r2, #4
 801aa04:	83c2      	strh	r2, [r0, #30]
 801aa06:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aa08:	3054      	adds	r0, #84	; 0x54
 801aa0a:	f000 ff74 	bl	801b8f6 <DeleteCallbackInfoByType>
 801aa0e:	0005      	movs	r5, r0
 801aa10:	d06e      	beq.n	801aaf0 <HCI_Event_Callback+0x374>
 801aa12:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 801aa16:	2800      	cmp	r0, #0
 801aa18:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aa1a:	d037      	beq.n	801aa8c <HCI_Event_Callback+0x310>
 801aa1c:	f8d0 1016 	ldr.w	r1, [r0, #22]
 801aa20:	910f      	str	r1, [sp, #60]	; 0x3c
 801aa22:	8b40      	ldrh	r0, [r0, #26]
 801aa24:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801aa28:	88a0      	ldrh	r0, [r4, #4]
 801aa2a:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
 801aa2e:	f88d 6042 	strb.w	r6, [sp, #66]	; 0x42
 801aa32:	8a63      	ldrh	r3, [r4, #18]
 801aa34:	8a22      	ldrh	r2, [r4, #16]
 801aa36:	89e1      	ldrh	r1, [r4, #14]
 801aa38:	a813      	add	r0, sp, #76	; 0x4c
 801aa3a:	f001 f895 	bl	801bb68 <FormatConnectionParametersFromHCI>
 801aa3e:	79e0      	ldrb	r0, [r4, #7]
 801aa40:	f000 fc91 	bl	801b366 <AssignGAPAddressType>
 801aa44:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
 801aa48:	68a0      	ldr	r0, [r4, #8]
 801aa4a:	f8cd 0035 	str.w	r0, [sp, #53]	; 0x35
 801aa4e:	89a0      	ldrh	r0, [r4, #12]
 801aa50:	f8ad 0039 	strh.w	r0, [sp, #57]	; 0x39
 801aa54:	9615      	str	r6, [sp, #84]	; 0x54
 801aa56:	e9d5 8901 	ldrd	r8, r9, [r5, #4]
 801aa5a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aa5c:	a90b      	add	r1, sp, #44	; 0x2c
 801aa5e:	3058      	adds	r0, #88	; 0x58
 801aa60:	f000 fc2f 	bl	801b2c2 <AddLELinkEntry>
 801aa64:	b1b0      	cbz	r0, 801aa94 <HCI_Event_Callback+0x318>
 801aa66:	464b      	mov	r3, r9
 801aa68:	4642      	mov	r2, r8
 801aa6a:	2104      	movs	r1, #4
 801aa6c:	3028      	adds	r0, #40	; 0x28
 801aa6e:	f000 ff22 	bl	801b8b6 <CreateCallbackInfoEntry>
 801aa72:	b178      	cbz	r0, 801aa94 <HCI_Event_Callback+0x318>
 801aa74:	e00f      	b.n	801aa96 <HCI_Event_Callback+0x31a>
 801aa76:	f880 b01c 	strb.w	fp, [r0, #28]
 801aa7a:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 801aa7e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 801aa82:	8bc2      	ldrh	r2, [r0, #30]
 801aa84:	2101      	movs	r1, #1
 801aa86:	f022 0213 	bic.w	r2, r2, #19
 801aa8a:	e7bb      	b.n	801aa04 <HCI_Event_Callback+0x288>
 801aa8c:	6901      	ldr	r1, [r0, #16]
 801aa8e:	910f      	str	r1, [sp, #60]	; 0x3c
 801aa90:	8a80      	ldrh	r0, [r0, #20]
 801aa92:	e7c7      	b.n	801aa24 <HCI_Event_Callback+0x2a8>
 801aa94:	2701      	movs	r7, #1
 801aa96:	f88d b060 	strb.w	fp, [sp, #96]	; 0x60
 801aa9a:	2010      	movs	r0, #16
 801aa9c:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
 801aaa0:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801aaa4:	79a0      	ldrb	r0, [r4, #6]
 801aaa6:	b378      	cbz	r0, 801ab08 <HCI_Event_Callback+0x38c>
 801aaa8:	2000      	movs	r0, #0
 801aaaa:	f88d 0009 	strb.w	r0, [sp, #9]
 801aaae:	78a0      	ldrb	r0, [r4, #2]
 801aab0:	f88d 0008 	strb.w	r0, [sp, #8]
 801aab4:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801aab8:	f88d 000a 	strb.w	r0, [sp, #10]
 801aabc:	f8dd 0035 	ldr.w	r0, [sp, #53]	; 0x35
 801aac0:	f8cd 000b 	str.w	r0, [sp, #11]
 801aac4:	f8bd 0039 	ldrh.w	r0, [sp, #57]	; 0x39
 801aac8:	f8ad 000f 	strh.w	r0, [sp, #15]
 801aacc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801aace:	f8cd 0012 	str.w	r0, [sp, #18]
 801aad2:	f8bd 0050 	ldrh.w	r0, [sp, #80]	; 0x50
 801aad6:	f8ad 0016 	strh.w	r0, [sp, #22]
 801aada:	981c      	ldr	r0, [sp, #112]	; 0x70
 801aadc:	464a      	mov	r2, r9
 801aade:	4643      	mov	r3, r8
 801aae0:	6800      	ldr	r0, [r0, #0]
 801aae2:	a918      	add	r1, sp, #96	; 0x60
 801aae4:	4798      	blx	r3
 801aae6:	4628      	mov	r0, r5
 801aae8:	f7fe f8f5 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801aaec:	2f00      	cmp	r7, #0
 801aaee:	d04f      	beq.n	801ab90 <HCI_Event_Callback+0x414>
 801aaf0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aaf2:	88a1      	ldrh	r1, [r4, #4]
 801aaf4:	3058      	adds	r0, #88	; 0x58
 801aaf6:	f000 ff08 	bl	801b90a <DeleteLELinkEntryConnection_Handle>
 801aafa:	b108      	cbz	r0, 801ab00 <HCI_Event_Callback+0x384>
 801aafc:	f001 f848 	bl	801bb90 <FreeLELinkEntryMemory>
 801ab00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ab02:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801ab04:	b119      	cbz	r1, 801ab0e <HCI_Event_Callback+0x392>
 801ab06:	e003      	b.n	801ab10 <HCI_Event_Callback+0x394>
 801ab08:	e7ff      	b.n	801ab0a <HCI_Event_Callback+0x38e>
 801ab0a:	2001      	movs	r0, #1
 801ab0c:	e7cd      	b.n	801aaaa <HCI_Event_Callback+0x32e>
 801ab0e:	7706      	strb	r6, [r0, #28]
 801ab10:	78a0      	ldrb	r0, [r4, #2]
 801ab12:	bbe8      	cbnz	r0, 801ab90 <HCI_Event_Callback+0x414>
 801ab14:	88a1      	ldrh	r1, [r4, #4]
 801ab16:	2214      	movs	r2, #20
 801ab18:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ab1a:	f005 fb61 	bl	80201e0 <_HCI_Disconnect>
 801ab1e:	e0a1      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801ab20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ab22:	6e45      	ldr	r5, [r0, #100]	; 0x64
 801ab24:	e03f      	b.n	801aba6 <HCI_Event_Callback+0x42a>
 801ab26:	4653      	mov	r3, sl
 801ab28:	aa18      	add	r2, sp, #96	; 0x60
 801ab2a:	1ca1      	adds	r1, r4, #2
 801ab2c:	47a8      	blx	r5
 801ab2e:	e099      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801ab30:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ab32:	88a1      	ldrh	r1, [r4, #4]
 801ab34:	3058      	adds	r0, #88	; 0x58
 801ab36:	f003 fc49 	bl	801e3cc <SearchLELinkEntryConnection_Handle>
 801ab3a:	0005      	movs	r5, r0
 801ab3c:	d028      	beq.n	801ab90 <HCI_Event_Callback+0x414>
 801ab3e:	2104      	movs	r1, #4
 801ab40:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801ab44:	f003 fc30 	bl	801e3a8 <SearchCallbackInfoByType>
 801ab48:	0006      	movs	r6, r0
 801ab4a:	d021      	beq.n	801ab90 <HCI_Event_Callback+0x414>
 801ab4c:	2009      	movs	r0, #9
 801ab4e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 801ab52:	200e      	movs	r0, #14
 801ab54:	f8ad 0062 	strh.w	r0, [sp, #98]	; 0x62
 801ab58:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 801ab5c:	78a0      	ldrb	r0, [r4, #2]
 801ab5e:	f88d 0008 	strb.w	r0, [sp, #8]
 801ab62:	f8d5 0009 	ldr.w	r0, [r5, #9]
 801ab66:	f8cd 0009 	str.w	r0, [sp, #9]
 801ab6a:	f8b5 000d 	ldrh.w	r0, [r5, #13]
 801ab6e:	f8ad 000d 	strh.w	r0, [sp, #13]
 801ab72:	8963      	ldrh	r3, [r4, #10]
 801ab74:	8922      	ldrh	r2, [r4, #8]
 801ab76:	88e1      	ldrh	r1, [r4, #6]
 801ab78:	f10a 0008 	add.w	r0, sl, #8
 801ab7c:	f000 fff4 	bl	801bb68 <FormatConnectionParametersFromHCI>
 801ab80:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ab82:	7800      	ldrb	r0, [r0, #0]
 801ab84:	b930      	cbnz	r0, 801ab94 <HCI_Event_Callback+0x418>
 801ab86:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ab88:	6881      	ldr	r1, [r0, #8]
 801ab8a:	6229      	str	r1, [r5, #32]
 801ab8c:	8980      	ldrh	r0, [r0, #12]
 801ab8e:	e000      	b.n	801ab92 <HCI_Event_Callback+0x416>
 801ab90:	e04a      	b.n	801ac28 <HCI_Event_Callback+0x4ac>
 801ab92:	84a8      	strh	r0, [r5, #36]	; 0x24
 801ab94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ab96:	6873      	ldr	r3, [r6, #4]
 801ab98:	68b2      	ldr	r2, [r6, #8]
 801ab9a:	6800      	ldr	r0, [r0, #0]
 801ab9c:	a918      	add	r1, sp, #96	; 0x60
 801ab9e:	4798      	blx	r3
 801aba0:	e060      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801aba2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801aba4:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801aba6:	2d00      	cmp	r5, #0
 801aba8:	d1bd      	bne.n	801ab26 <HCI_Event_Callback+0x3aa>
 801abaa:	e05b      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801abac:	e7ff      	b.n	801abae <HCI_Event_Callback+0x432>
 801abae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801abb0:	8861      	ldrh	r1, [r4, #2]
 801abb2:	3058      	adds	r0, #88	; 0x58
 801abb4:	f003 fc0a 	bl	801e3cc <SearchLELinkEntryConnection_Handle>
 801abb8:	0005      	movs	r5, r0
 801abba:	d053      	beq.n	801ac64 <HCI_Event_Callback+0x4e8>
 801abbc:	2208      	movs	r2, #8
 801abbe:	2100      	movs	r1, #0
 801abc0:	a81a      	add	r0, sp, #104	; 0x68
 801abc2:	f7f8 fc7c 	bl	80134be <BTPS_MemInitialize>
 801abc6:	69ea      	ldr	r2, [r5, #28]
 801abc8:	b37a      	cbz	r2, 801ac2a <HCI_Event_Callback+0x4ae>
 801abca:	89a0      	ldrh	r0, [r4, #12]
 801abcc:	bb68      	cbnz	r0, 801ac2a <HCI_Event_Callback+0x4ae>
 801abce:	7920      	ldrb	r0, [r4, #4]
 801abd0:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
 801abd4:	4288      	cmp	r0, r1
 801abd6:	d129      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801abd8:	7960      	ldrb	r0, [r4, #5]
 801abda:	f89d 1069 	ldrb.w	r1, [sp, #105]	; 0x69
 801abde:	4288      	cmp	r0, r1
 801abe0:	d124      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801abe2:	79a0      	ldrb	r0, [r4, #6]
 801abe4:	f89d 106a 	ldrb.w	r1, [sp, #106]	; 0x6a
 801abe8:	4288      	cmp	r0, r1
 801abea:	d11f      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801abec:	79e0      	ldrb	r0, [r4, #7]
 801abee:	f89d 106b 	ldrb.w	r1, [sp, #107]	; 0x6b
 801abf2:	4288      	cmp	r0, r1
 801abf4:	d11a      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801abf6:	7a20      	ldrb	r0, [r4, #8]
 801abf8:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801abfc:	4288      	cmp	r0, r1
 801abfe:	d115      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801ac00:	7a60      	ldrb	r0, [r4, #9]
 801ac02:	f89d 106d 	ldrb.w	r1, [sp, #109]	; 0x6d
 801ac06:	4288      	cmp	r0, r1
 801ac08:	d110      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801ac0a:	7aa0      	ldrb	r0, [r4, #10]
 801ac0c:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 801ac10:	4288      	cmp	r0, r1
 801ac12:	d10b      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801ac14:	7ae0      	ldrb	r0, [r4, #11]
 801ac16:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801ac1a:	4288      	cmp	r0, r1
 801ac1c:	d106      	bne.n	801ac2c <HCI_Event_Callback+0x4b0>
 801ac1e:	8829      	ldrh	r1, [r5, #0]
 801ac20:	3252      	adds	r2, #82	; 0x52
 801ac22:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ac24:	f005 fc84 	bl	8020530 <_HCI_LE_Long_Term_Key_Request_Reply>
 801ac28:	e01c      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801ac2a:	e7ff      	b.n	801ac2c <HCI_Event_Callback+0x4b0>
 801ac2c:	6860      	ldr	r0, [r4, #4]
 801ac2e:	9004      	str	r0, [sp, #16]
 801ac30:	68a0      	ldr	r0, [r4, #8]
 801ac32:	9005      	str	r0, [sp, #20]
 801ac34:	89a0      	ldrh	r0, [r4, #12]
 801ac36:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ac3a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ac3c:	2105      	movs	r1, #5
 801ac3e:	3054      	adds	r0, #84	; 0x54
 801ac40:	f003 fbb2 	bl	801e3a8 <SearchCallbackInfoByType>
 801ac44:	b150      	cbz	r0, 801ac5c <HCI_Event_Callback+0x4e0>
 801ac46:	6881      	ldr	r1, [r0, #8]
 801ac48:	6840      	ldr	r0, [r0, #4]
 801ac4a:	e9cd 0100 	strd	r0, r1, [sp]
 801ac4e:	ab02      	add	r3, sp, #8
 801ac50:	2200      	movs	r2, #0
 801ac52:	4629      	mov	r1, r5
 801ac54:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801ac56:	f000 fe95 	bl	801b984 <DispatchAuthenticationCallback>
 801ac5a:	e003      	b.n	801ac64 <HCI_Event_Callback+0x4e8>
 801ac5c:	8829      	ldrh	r1, [r5, #0]
 801ac5e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ac60:	f005 fc50 	bl	8020504 <_HCI_LE_Long_Term_Key_Request_Negative_Reply>
 801ac64:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ac66:	f7fe fc9d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ac6a:	b021      	add	sp, #132	; 0x84
 801ac6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac70 <HCI_Event_Callback>:
 801ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac74:	b089      	sub	sp, #36	; 0x24
 801ac76:	000c      	movs	r4, r1
 801ac78:	4683      	mov	fp, r0
 801ac7a:	d07d      	beq.n	801ad78 <HCI_Event_Callback+0x108>
 801ac7c:	4602      	mov	r2, r0
 801ac7e:	a904      	add	r1, sp, #16
 801ac80:	a808      	add	r0, sp, #32
 801ac82:	f006 f8ee 	bl	8020e62 <AcquireL2CAPStackInformation>
 801ac86:	2800      	cmp	r0, #0
 801ac88:	d176      	bne.n	801ad78 <HCI_Event_Callback+0x108>
 801ac8a:	7820      	ldrb	r0, [r4, #0]
 801ac8c:	2602      	movs	r6, #2
 801ac8e:	2500      	movs	r5, #0
 801ac90:	f04f 0904 	mov.w	r9, #4
 801ac94:	f04f 0801 	mov.w	r8, #1
 801ac98:	2810      	cmp	r0, #16
 801ac9a:	d06e      	beq.n	801ad7a <HCI_Event_Callback+0x10a>
 801ac9c:	dc10      	bgt.n	801acc0 <HCI_Event_Callback+0x50>
 801ac9e:	f04f 0a03 	mov.w	sl, #3
 801aca2:	2805      	cmp	r0, #5
 801aca4:	d06a      	beq.n	801ad7c <HCI_Event_Callback+0x10c>
 801aca6:	dc06      	bgt.n	801acb6 <HCI_Event_Callback+0x46>
 801aca8:	2802      	cmp	r0, #2
 801acaa:	d018      	beq.n	801acde <HCI_Event_Callback+0x6e>
 801acac:	2803      	cmp	r0, #3
 801acae:	d066      	beq.n	801ad7e <HCI_Event_Callback+0x10e>
 801acb0:	2804      	cmp	r0, #4
 801acb2:	d129      	bne.n	801ad08 <HCI_Event_Callback+0x98>
 801acb4:	e0b4      	b.n	801ae20 <HCI_Event_Callback+0x1b0>
 801acb6:	2807      	cmp	r0, #7
 801acb8:	d07a      	beq.n	801adb0 <HCI_Event_Callback+0x140>
 801acba:	280e      	cmp	r0, #14
 801acbc:	d1f9      	bne.n	801acb2 <HCI_Event_Callback+0x42>
 801acbe:	e13e      	b.n	801af3e <HCI_Event_Callback+0x2ce>
 801acc0:	2823      	cmp	r0, #35	; 0x23
 801acc2:	d076      	beq.n	801adb2 <HCI_Event_Callback+0x142>
 801acc4:	dc06      	bgt.n	801acd4 <HCI_Event_Callback+0x64>
 801acc6:	2813      	cmp	r0, #19
 801acc8:	d074      	beq.n	801adb4 <HCI_Event_Callback+0x144>
 801acca:	2814      	cmp	r0, #20
 801accc:	d0fc      	beq.n	801acc8 <HCI_Event_Callback+0x58>
 801acce:	2820      	cmp	r0, #32
 801acd0:	d1ef      	bne.n	801acb2 <HCI_Event_Callback+0x42>
 801acd2:	e10d      	b.n	801aef0 <HCI_Event_Callback+0x280>
 801acd4:	2829      	cmp	r0, #41	; 0x29
 801acd6:	d0f7      	beq.n	801acc8 <HCI_Event_Callback+0x58>
 801acd8:	2842      	cmp	r0, #66	; 0x42
 801acda:	d1ea      	bne.n	801acb2 <HCI_Event_Callback+0x42>
 801acdc:	e20e      	b.n	801b0fc <HCI_Event_Callback+0x48c>
 801acde:	6860      	ldr	r0, [r4, #4]
 801ace0:	2800      	cmp	r0, #0
 801ace2:	d011      	beq.n	801ad08 <HCI_Event_Callback+0x98>
 801ace4:	8861      	ldrh	r1, [r4, #2]
 801ace6:	290c      	cmp	r1, #12
 801ace8:	d30e      	bcc.n	801ad08 <HCI_Event_Callback+0x98>
 801acea:	7a81      	ldrb	r1, [r0, #10]
 801acec:	2901      	cmp	r1, #1
 801acee:	d1e0      	bne.n	801acb2 <HCI_Event_Callback+0x42>
 801acf0:	6841      	ldr	r1, [r0, #4]
 801acf2:	9105      	str	r1, [sp, #20]
 801acf4:	8900      	ldrh	r0, [r0, #8]
 801acf6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801acfa:	6860      	ldr	r0, [r4, #4]
 801acfc:	7802      	ldrb	r2, [r0, #0]
 801acfe:	b122      	cbz	r2, 801ad0a <HCI_Event_Callback+0x9a>
 801ad00:	a905      	add	r1, sp, #20
 801ad02:	9804      	ldr	r0, [sp, #16]
 801ad04:	f008 f85d 	bl	8022dc2 <LP_ConnectCfmNeg>
 801ad08:	e227      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801ad0a:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 801ad0e:	9804      	ldr	r0, [sp, #16]
 801ad10:	2200      	movs	r2, #0
 801ad12:	a905      	add	r1, sp, #20
 801ad14:	3058      	adds	r0, #88	; 0x58
 801ad16:	f008 fd96 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 801ad1a:	0004      	movs	r4, r0
 801ad1c:	d127      	bne.n	801ad6e <HCI_Event_Callback+0xfe>
 801ad1e:	2028      	movs	r0, #40	; 0x28
 801ad20:	f7f8 fb4c 	bl	80133bc <BTPS_AllocateMemory>
 801ad24:	0004      	movs	r4, r0
 801ad26:	d030      	beq.n	801ad8a <HCI_Event_Callback+0x11a>
 801ad28:	2228      	movs	r2, #40	; 0x28
 801ad2a:	2100      	movs	r1, #0
 801ad2c:	f7f8 fbc7 	bl	80134be <BTPS_MemInitialize>
 801ad30:	f884 8000 	strb.w	r8, [r4]
 801ad34:	7065      	strb	r5, [r4, #1]
 801ad36:	70e5      	strb	r5, [r4, #3]
 801ad38:	f884 a002 	strb.w	sl, [r4, #2]
 801ad3c:	20ff      	movs	r0, #255	; 0xff
 801ad3e:	7120      	strb	r0, [r4, #4]
 801ad40:	9805      	ldr	r0, [sp, #20]
 801ad42:	f8c4 0005 	str.w	r0, [r4, #5]
 801ad46:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801ad4a:	f8a4 0009 	strh.w	r0, [r4, #9]
 801ad4e:	f649 70c5 	movw	r0, #40901	; 0x9fc5
 801ad52:	8220      	strh	r0, [r4, #16]
 801ad54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ad58:	8260      	strh	r0, [r4, #18]
 801ad5a:	9804      	ldr	r0, [sp, #16]
 801ad5c:	68c1      	ldr	r1, [r0, #12]
 801ad5e:	6161      	str	r1, [r4, #20]
 801ad60:	6901      	ldr	r1, [r0, #16]
 801ad62:	61a1      	str	r1, [r4, #24]
 801ad64:	4621      	mov	r1, r4
 801ad66:	3058      	adds	r0, #88	; 0x58
 801ad68:	f006 f892 	bl	8020e90 <AddConnectionInfoEntry>
 801ad6c:	b150      	cbz	r0, 801ad84 <HCI_Event_Callback+0x114>
 801ad6e:	9804      	ldr	r0, [sp, #16]
 801ad70:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801ad74:	28ff      	cmp	r0, #255	; 0xff
 801ad76:	e003      	b.n	801ad80 <HCI_Event_Callback+0x110>
 801ad78:	e1f2      	b.n	801b160 <HCI_Event_Callback+0x4f0>
 801ad7a:	e07f      	b.n	801ae7c <HCI_Event_Callback+0x20c>
 801ad7c:	e150      	b.n	801b020 <HCI_Event_Callback+0x3b0>
 801ad7e:	e038      	b.n	801adf2 <HCI_Event_Callback+0x182>
 801ad80:	d005      	beq.n	801ad8e <HCI_Event_Callback+0x11e>
 801ad82:	e010      	b.n	801ada6 <HCI_Event_Callback+0x136>
 801ad84:	4620      	mov	r0, r4
 801ad86:	f7f8 fb33 	bl	80133f0 <BTPS_FreeMemory>
 801ad8a:	4649      	mov	r1, r9
 801ad8c:	e1b2      	b.n	801b0f4 <HCI_Event_Callback+0x484>
 801ad8e:	a907      	add	r1, sp, #28
 801ad90:	4658      	mov	r0, fp
 801ad92:	f005 ff0f 	bl	8020bb4 <_HCI_Read_Simple_Pairing_Mode>
 801ad96:	b930      	cbnz	r0, 801ada6 <HCI_Event_Callback+0x136>
 801ad98:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801ad9c:	2801      	cmp	r0, #1
 801ad9e:	d102      	bne.n	801ada6 <HCI_Event_Callback+0x136>
 801ada0:	9904      	ldr	r1, [sp, #16]
 801ada2:	f881 8039 	strb.w	r8, [r1, #57]	; 0x39
 801ada6:	f8a4 900c 	strh.w	r9, [r4, #12]
 801adaa:	9804      	ldr	r0, [sp, #16]
 801adac:	6d47      	ldr	r7, [r0, #84]	; 0x54
 801adae:	e00a      	b.n	801adc6 <HCI_Event_Callback+0x156>
 801adb0:	e181      	b.n	801b0b6 <HCI_Event_Callback+0x446>
 801adb2:	e0e1      	b.n	801af78 <HCI_Event_Callback+0x308>
 801adb4:	e10a      	b.n	801afcc <HCI_Event_Callback+0x35c>
 801adb6:	1d61      	adds	r1, r4, #5
 801adb8:	4638      	mov	r0, r7
 801adba:	f7fe faff 	bl	80193bc <CompareBluetoothAddress>
 801adbe:	b108      	cbz	r0, 801adc4 <HCI_Event_Callback+0x154>
 801adc0:	f8a7 9008 	strh.w	r9, [r7, #8]
 801adc4:	6d7f      	ldr	r7, [r7, #84]	; 0x54
 801adc6:	2f00      	cmp	r7, #0
 801adc8:	d1f5      	bne.n	801adb6 <HCI_Event_Callback+0x146>
 801adca:	9804      	ldr	r0, [sp, #16]
 801adcc:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801add0:	2801      	cmp	r0, #1
 801add2:	d106      	bne.n	801ade2 <HCI_Event_Callback+0x172>
 801add4:	2201      	movs	r2, #1
 801add6:	4649      	mov	r1, r9
 801add8:	4658      	mov	r0, fp
 801adda:	f005 febb 	bl	8020b54 <_HCI_Read_Remote_Extended_Features>
 801adde:	b118      	cbz	r0, 801ade8 <HCI_Event_Callback+0x178>
 801ade0:	7125      	strb	r5, [r4, #4]
 801ade2:	70a6      	strb	r6, [r4, #2]
 801ade4:	4621      	mov	r1, r4
 801ade6:	e0e2      	b.n	801afae <HCI_Event_Callback+0x33e>
 801ade8:	20fe      	movs	r0, #254	; 0xfe
 801adea:	7120      	strb	r0, [r4, #4]
 801adec:	f884 8002 	strb.w	r8, [r4, #2]
 801adf0:	e1b3      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801adf2:	9804      	ldr	r0, [sp, #16]
 801adf4:	f890 103b 	ldrb.w	r1, [r0, #59]	; 0x3b
 801adf8:	2902      	cmp	r1, #2
 801adfa:	d085      	beq.n	801ad08 <HCI_Event_Callback+0x98>
 801adfc:	6861      	ldr	r1, [r4, #4]
 801adfe:	2900      	cmp	r1, #0
 801ae00:	d0f6      	beq.n	801adf0 <HCI_Event_Callback+0x180>
 801ae02:	8862      	ldrh	r2, [r4, #2]
 801ae04:	2a0a      	cmp	r2, #10
 801ae06:	d3f3      	bcc.n	801adf0 <HCI_Event_Callback+0x180>
 801ae08:	7a4a      	ldrb	r2, [r1, #9]
 801ae0a:	2a01      	cmp	r2, #1
 801ae0c:	d1f0      	bne.n	801adf0 <HCI_Event_Callback+0x180>
 801ae0e:	680a      	ldr	r2, [r1, #0]
 801ae10:	9205      	str	r2, [sp, #20]
 801ae12:	8889      	ldrh	r1, [r1, #4]
 801ae14:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ae18:	a905      	add	r1, sp, #20
 801ae1a:	f008 f84c 	bl	8022eb6 <LP_ConnectIndication>
 801ae1e:	e19c      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801ae20:	6860      	ldr	r0, [r4, #4]
 801ae22:	2800      	cmp	r0, #0
 801ae24:	d0e4      	beq.n	801adf0 <HCI_Event_Callback+0x180>
 801ae26:	8861      	ldrh	r1, [r4, #2]
 801ae28:	2906      	cmp	r1, #6
 801ae2a:	d3e1      	bcc.n	801adf0 <HCI_Event_Callback+0x180>
 801ae2c:	8841      	ldrh	r1, [r0, #2]
 801ae2e:	9804      	ldr	r0, [sp, #16]
 801ae30:	3058      	adds	r0, #88	; 0x58
 801ae32:	f008 fd2a 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 801ae36:	0006      	movs	r6, r0
 801ae38:	d0da      	beq.n	801adf0 <HCI_Event_Callback+0x180>
 801ae3a:	69f1      	ldr	r1, [r6, #28]
 801ae3c:	b119      	cbz	r1, 801ae46 <HCI_Event_Callback+0x1d6>
 801ae3e:	4658      	mov	r0, fp
 801ae40:	f7fe fd28 	bl	8019894 <BTPS_StopTimer>
 801ae44:	61f5      	str	r5, [r6, #28]
 801ae46:	7870      	ldrb	r0, [r6, #1]
 801ae48:	b190      	cbz	r0, 801ae70 <HCI_Event_Callback+0x200>
 801ae4a:	9804      	ldr	r0, [sp, #16]
 801ae4c:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
 801ae50:	b171      	cbz	r1, 801ae70 <HCI_Event_Callback+0x200>
 801ae52:	f830 1f46 	ldrh.w	r1, [r0, #70]!
 801ae56:	89f2      	ldrh	r2, [r6, #14]
 801ae58:	4411      	add	r1, r2
 801ae5a:	8001      	strh	r1, [r0, #0]
 801ae5c:	81f5      	strh	r5, [r6, #14]
 801ae5e:	f886 9002 	strb.w	r9, [r6, #2]
 801ae62:	6860      	ldr	r0, [r4, #4]
 801ae64:	4631      	mov	r1, r6
 801ae66:	7902      	ldrb	r2, [r0, #4]
 801ae68:	9804      	ldr	r0, [sp, #16]
 801ae6a:	f008 f877 	bl	8022f5c <LP_DisconnectCfm>
 801ae6e:	e02e      	b.n	801aece <HCI_Event_Callback+0x25e>
 801ae70:	9804      	ldr	r0, [sp, #16]
 801ae72:	89f2      	ldrh	r2, [r6, #14]
 801ae74:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 801ae76:	4411      	add	r1, r2
 801ae78:	8481      	strh	r1, [r0, #36]	; 0x24
 801ae7a:	e7ef      	b.n	801ae5c <HCI_Event_Callback+0x1ec>
 801ae7c:	6860      	ldr	r0, [r4, #4]
 801ae7e:	2800      	cmp	r0, #0
 801ae80:	d0b6      	beq.n	801adf0 <HCI_Event_Callback+0x180>
 801ae82:	8861      	ldrh	r1, [r4, #2]
 801ae84:	2904      	cmp	r1, #4
 801ae86:	d3b3      	bcc.n	801adf0 <HCI_Event_Callback+0x180>
 801ae88:	7807      	ldrb	r7, [r0, #0]
 801ae8a:	2500      	movs	r5, #0
 801ae8c:	e01d      	b.n	801aeca <HCI_Event_Callback+0x25a>
 801ae8e:	6860      	ldr	r0, [r4, #4]
 801ae90:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 801ae94:	5a41      	ldrh	r1, [r0, r1]
 801ae96:	9804      	ldr	r0, [sp, #16]
 801ae98:	3058      	adds	r0, #88	; 0x58
 801ae9a:	f008 fcf6 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 801ae9e:	b198      	cbz	r0, 801aec8 <HCI_Event_Callback+0x258>
 801aea0:	6862      	ldr	r2, [r4, #4]
 801aea2:	eb09 0185 	add.w	r1, r9, r5, lsl #2
 801aea6:	5a51      	ldrh	r1, [r2, r1]
 801aea8:	89c2      	ldrh	r2, [r0, #14]
 801aeaa:	428a      	cmp	r2, r1
 801aeac:	d200      	bcs.n	801aeb0 <HCI_Event_Callback+0x240>
 801aeae:	4611      	mov	r1, r2
 801aeb0:	1a52      	subs	r2, r2, r1
 801aeb2:	81c2      	strh	r2, [r0, #14]
 801aeb4:	7840      	ldrb	r0, [r0, #1]
 801aeb6:	b188      	cbz	r0, 801aedc <HCI_Event_Callback+0x26c>
 801aeb8:	9804      	ldr	r0, [sp, #16]
 801aeba:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
 801aebe:	b16a      	cbz	r2, 801aedc <HCI_Event_Callback+0x26c>
 801aec0:	f830 2f46 	ldrh.w	r2, [r0, #70]!
 801aec4:	4411      	add	r1, r2
 801aec6:	8001      	strh	r1, [r0, #0]
 801aec8:	1c6d      	adds	r5, r5, #1
 801aeca:	42bd      	cmp	r5, r7
 801aecc:	dbdf      	blt.n	801ae8e <HCI_Event_Callback+0x21e>
 801aece:	9804      	ldr	r0, [sp, #16]
 801aed0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801aed2:	2900      	cmp	r1, #0
 801aed4:	d08c      	beq.n	801adf0 <HCI_Event_Callback+0x180>
 801aed6:	f007 fbdd 	bl	8022694 <L2CAP_ProcessACLQueue>
 801aeda:	e13e      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801aedc:	9804      	ldr	r0, [sp, #16]
 801aede:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 801aee0:	4411      	add	r1, r2
 801aee2:	8481      	strh	r1, [r0, #36]	; 0x24
 801aee4:	e7f0      	b.n	801aec8 <HCI_Event_Callback+0x258>
 801aee6:	4601      	mov	r1, r0
 801aee8:	2216      	movs	r2, #22
 801aeea:	9804      	ldr	r0, [sp, #16]
 801aeec:	f008 f836 	bl	8022f5c <LP_DisconnectCfm>
 801aef0:	9b04      	ldr	r3, [sp, #16]
 801aef2:	2100      	movs	r1, #0
 801aef4:	2224      	movs	r2, #36	; 0x24
 801aef6:	2006      	movs	r0, #6
 801aef8:	3358      	adds	r3, #88	; 0x58
 801aefa:	f7fd fef1 	bl	8018ce0 <BSC_GetNextGenericListEntry>
 801aefe:	2800      	cmp	r0, #0
 801af00:	d1f1      	bne.n	801aee6 <HCI_Event_Callback+0x276>
 801af02:	9804      	ldr	r0, [sp, #16]
 801af04:	304c      	adds	r0, #76	; 0x4c
 801af06:	f006 faaf 	bl	8021468 <FreeACLDataList>
 801af0a:	9804      	ldr	r0, [sp, #16]
 801af0c:	3050      	adds	r0, #80	; 0x50
 801af0e:	f006 faab 	bl	8021468 <FreeACLDataList>
 801af12:	9804      	ldr	r0, [sp, #16]
 801af14:	2101      	movs	r1, #1
 801af16:	305c      	adds	r0, #92	; 0x5c
 801af18:	f006 fadc 	bl	80214d4 <FreeIdentifierInfoList>
 801af1c:	9804      	ldr	r0, [sp, #16]
 801af1e:	3054      	adds	r0, #84	; 0x54
 801af20:	f006 faa5 	bl	802146e <FreeChannelInfoList>
 801af24:	9904      	ldr	r1, [sp, #16]
 801af26:	2200      	movs	r2, #0
 801af28:	4658      	mov	r0, fp
 801af2a:	3158      	adds	r1, #88	; 0x58
 801af2c:	f006 faa9 	bl	8021482 <FreeConnectionInfoList>
 801af30:	9804      	ldr	r0, [sp, #16]
 801af32:	f830 1f22 	ldrh.w	r1, [r0, #34]!
 801af36:	8041      	strh	r1, [r0, #2]
 801af38:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 801af3a:	8481      	strh	r1, [r0, #36]	; 0x24
 801af3c:	e10d      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801af3e:	6860      	ldr	r0, [r4, #4]
 801af40:	2800      	cmp	r0, #0
 801af42:	d0ca      	beq.n	801aeda <HCI_Event_Callback+0x26a>
 801af44:	8861      	ldrh	r1, [r4, #2]
 801af46:	2902      	cmp	r1, #2
 801af48:	d3c7      	bcc.n	801aeda <HCI_Event_Callback+0x26a>
 801af4a:	8801      	ldrh	r1, [r0, #0]
 801af4c:	9804      	ldr	r0, [sp, #16]
 801af4e:	3058      	adds	r0, #88	; 0x58
 801af50:	f008 fc9b 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 801af54:	0004      	movs	r4, r0
 801af56:	d0c0      	beq.n	801aeda <HCI_Event_Callback+0x26a>
 801af58:	7860      	ldrb	r0, [r4, #1]
 801af5a:	2801      	cmp	r0, #1
 801af5c:	d0bd      	beq.n	801aeda <HCI_Event_Callback+0x26a>
 801af5e:	89a1      	ldrh	r1, [r4, #12]
 801af60:	4658      	mov	r0, fp
 801af62:	f005 f954 	bl	802020e <_HCI_Flush>
 801af66:	2800      	cmp	r0, #0
 801af68:	d1b7      	bne.n	801aeda <HCI_Event_Callback+0x26a>
 801af6a:	9804      	ldr	r0, [sp, #16]
 801af6c:	89e2      	ldrh	r2, [r4, #14]
 801af6e:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 801af70:	4411      	add	r1, r2
 801af72:	8481      	strh	r1, [r0, #36]	; 0x24
 801af74:	81e5      	strh	r5, [r4, #14]
 801af76:	e7ae      	b.n	801aed6 <HCI_Event_Callback+0x266>
 801af78:	9804      	ldr	r0, [sp, #16]
 801af7a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801af7e:	2901      	cmp	r1, #1
 801af80:	d118      	bne.n	801afb4 <HCI_Event_Callback+0x344>
 801af82:	6861      	ldr	r1, [r4, #4]
 801af84:	3058      	adds	r0, #88	; 0x58
 801af86:	884f      	ldrh	r7, [r1, #2]
 801af88:	4639      	mov	r1, r7
 801af8a:	f008 fc7e 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 801af8e:	0001      	movs	r1, r0
 801af90:	d01a      	beq.n	801afc8 <HCI_Event_Callback+0x358>
 801af92:	6860      	ldr	r0, [r4, #4]
 801af94:	7802      	ldrb	r2, [r0, #0]
 801af96:	b10a      	cbz	r2, 801af9c <HCI_Event_Callback+0x32c>
 801af98:	710d      	strb	r5, [r1, #4]
 801af9a:	e007      	b.n	801afac <HCI_Event_Callback+0x33c>
 801af9c:	7980      	ldrb	r0, [r0, #6]
 801af9e:	f010 0001 	ands.w	r0, r0, #1
 801afa2:	7108      	strb	r0, [r1, #4]
 801afa4:	d002      	beq.n	801afac <HCI_Event_Callback+0x33c>
 801afa6:	78c8      	ldrb	r0, [r1, #3]
 801afa8:	2801      	cmp	r0, #1
 801afaa:	d004      	beq.n	801afb6 <HCI_Event_Callback+0x346>
 801afac:	708e      	strb	r6, [r1, #2]
 801afae:	9804      	ldr	r0, [sp, #16]
 801afb0:	f007 fe6a 	bl	8022c88 <LP_ConnectCfm>
 801afb4:	e0d1      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801afb6:	70ce      	strb	r6, [r1, #3]
 801afb8:	f881 8002 	strb.w	r8, [r1, #2]
 801afbc:	898a      	ldrh	r2, [r1, #12]
 801afbe:	496a      	ldr	r1, [pc, #424]	; (801b168 <HCI_Event_Callback+0x4f8>)
 801afc0:	4658      	mov	r0, fp
 801afc2:	f004 fe2b 	bl	801fc1c <HCI_Schedule_Asynchronous_Callback>
 801afc6:	e0c8      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801afc8:	4639      	mov	r1, r7
 801afca:	e093      	b.n	801b0f4 <HCI_Event_Callback+0x484>
 801afcc:	6860      	ldr	r0, [r4, #4]
 801afce:	2200      	movs	r2, #0
 801afd0:	6801      	ldr	r1, [r0, #0]
 801afd2:	9105      	str	r1, [sp, #20]
 801afd4:	8880      	ldrh	r0, [r0, #4]
 801afd6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801afda:	9804      	ldr	r0, [sp, #16]
 801afdc:	a905      	add	r1, sp, #20
 801afde:	3058      	adds	r0, #88	; 0x58
 801afe0:	f008 fc31 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 801afe4:	0004      	movs	r4, r0
 801afe6:	d01a      	beq.n	801b01e <HCI_Event_Callback+0x3ae>
 801afe8:	78a0      	ldrb	r0, [r4, #2]
 801afea:	2803      	cmp	r0, #3
 801afec:	d112      	bne.n	801b014 <HCI_Event_Callback+0x3a4>
 801afee:	69e1      	ldr	r1, [r4, #28]
 801aff0:	b181      	cbz	r1, 801b014 <HCI_Event_Callback+0x3a4>
 801aff2:	9804      	ldr	r0, [sp, #16]
 801aff4:	6800      	ldr	r0, [r0, #0]
 801aff6:	f7fe fc4d 	bl	8019894 <BTPS_StopTimer>
 801affa:	f884 8002 	strb.w	r8, [r4, #2]
 801affe:	9804      	ldr	r0, [sp, #16]
 801b000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801b004:	4a59      	ldr	r2, [pc, #356]	; (801b16c <HCI_Event_Callback+0x4fc>)
 801b006:	6903      	ldr	r3, [r0, #16]
 801b008:	6800      	ldr	r0, [r0, #0]
 801b00a:	434b      	muls	r3, r1
 801b00c:	89a1      	ldrh	r1, [r4, #12]
 801b00e:	f7fe fbf7 	bl	8019800 <BTPS_StartTimer>
 801b012:	61e0      	str	r0, [r4, #28]
 801b014:	78e0      	ldrb	r0, [r4, #3]
 801b016:	b108      	cbz	r0, 801b01c <HCI_Event_Callback+0x3ac>
 801b018:	2801      	cmp	r0, #1
 801b01a:	d100      	bne.n	801b01e <HCI_Event_Callback+0x3ae>
 801b01c:	70e6      	strb	r6, [r4, #3]
 801b01e:	e09c      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801b020:	6860      	ldr	r0, [r4, #4]
 801b022:	7801      	ldrb	r1, [r0, #0]
 801b024:	b391      	cbz	r1, 801b08c <HCI_Event_Callback+0x41c>
 801b026:	8846      	ldrh	r6, [r0, #2]
 801b028:	9804      	ldr	r0, [sp, #16]
 801b02a:	4631      	mov	r1, r6
 801b02c:	3058      	adds	r0, #88	; 0x58
 801b02e:	f008 fc2c 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 801b032:	b358      	cbz	r0, 801b08c <HCI_Event_Callback+0x41c>
 801b034:	69c1      	ldr	r1, [r0, #28]
 801b036:	b119      	cbz	r1, 801b040 <HCI_Event_Callback+0x3d0>
 801b038:	9804      	ldr	r0, [sp, #16]
 801b03a:	6800      	ldr	r0, [r0, #0]
 801b03c:	f7fe fc2a 	bl	8019894 <BTPS_StopTimer>
 801b040:	2400      	movs	r4, #0
 801b042:	e030      	b.n	801b0a6 <HCI_Event_Callback+0x436>
 801b044:	8920      	ldrh	r0, [r4, #8]
 801b046:	42b0      	cmp	r0, r6
 801b048:	d12d      	bne.n	801b0a6 <HCI_Event_Callback+0x436>
 801b04a:	7ae0      	ldrb	r0, [r4, #11]
 801b04c:	2801      	cmp	r0, #1
 801b04e:	d002      	beq.n	801b056 <HCI_Event_Callback+0x3e6>
 801b050:	2802      	cmp	r0, #2
 801b052:	d128      	bne.n	801b0a6 <HCI_Event_Callback+0x436>
 801b054:	e01b      	b.n	801b08e <HCI_Event_Callback+0x41e>
 801b056:	69e0      	ldr	r0, [r4, #28]
 801b058:	b328      	cbz	r0, 801b0a6 <HCI_Event_Callback+0x436>
 801b05a:	88e1      	ldrh	r1, [r4, #6]
 801b05c:	2300      	movs	r3, #0
 801b05e:	2203      	movs	r2, #3
 801b060:	9804      	ldr	r0, [sp, #16]
 801b062:	f006 f982 	bl	802136a <FormatEventConnectConfirmation>
 801b066:	4601      	mov	r1, r0
 801b068:	9804      	ldr	r0, [sp, #16]
 801b06a:	69e3      	ldr	r3, [r4, #28]
 801b06c:	88e7      	ldrh	r7, [r4, #6]
 801b06e:	6a22      	ldr	r2, [r4, #32]
 801b070:	6800      	ldr	r0, [r0, #0]
 801b072:	4798      	blx	r3
 801b074:	9804      	ldr	r0, [sp, #16]
 801b076:	4639      	mov	r1, r7
 801b078:	3054      	adds	r0, #84	; 0x54
 801b07a:	f008 fbda 	bl	8023832 <SearchChannelInfoEntry>
 801b07e:	2800      	cmp	r0, #0
 801b080:	d0de      	beq.n	801b040 <HCI_Event_Callback+0x3d0>
 801b082:	4621      	mov	r1, r4
 801b084:	9804      	ldr	r0, [sp, #16]
 801b086:	f006 fb2d 	bl	80216e4 <HandleChannelDisconnection>
 801b08a:	e7d9      	b.n	801b040 <HCI_Event_Callback+0x3d0>
 801b08c:	e035      	b.n	801b0fa <HCI_Event_Callback+0x48a>
 801b08e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 801b090:	9503      	str	r5, [sp, #12]
 801b092:	e88d 0504 	stmia.w	sp, {r2, r8, sl}
 801b096:	88e3      	ldrh	r3, [r4, #6]
 801b098:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801b09c:	4631      	mov	r1, r6
 801b09e:	9804      	ldr	r0, [sp, #16]
 801b0a0:	f006 fe96 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 801b0a4:	e7ed      	b.n	801b082 <HCI_Event_Callback+0x412>
 801b0a6:	9804      	ldr	r0, [sp, #16]
 801b0a8:	4621      	mov	r1, r4
 801b0aa:	3054      	adds	r0, #84	; 0x54
 801b0ac:	f006 fa48 	bl	8021540 <GetNextChannelInfoEntry>
 801b0b0:	0004      	movs	r4, r0
 801b0b2:	d1c7      	bne.n	801b044 <HCI_Event_Callback+0x3d4>
 801b0b4:	e051      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801b0b6:	6860      	ldr	r0, [r4, #4]
 801b0b8:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 801b0bc:	7905      	ldrb	r5, [r0, #4]
 801b0be:	7807      	ldrb	r7, [r0, #0]
 801b0c0:	9804      	ldr	r0, [sp, #16]
 801b0c2:	4641      	mov	r1, r8
 801b0c4:	3058      	adds	r0, #88	; 0x58
 801b0c6:	f008 fbe0 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 801b0ca:	0004      	movs	r4, r0
 801b0cc:	d045      	beq.n	801b15a <HCI_Event_Callback+0x4ea>
 801b0ce:	69e1      	ldr	r1, [r4, #28]
 801b0d0:	b119      	cbz	r1, 801b0da <HCI_Event_Callback+0x46a>
 801b0d2:	9804      	ldr	r0, [sp, #16]
 801b0d4:	6800      	ldr	r0, [r0, #0]
 801b0d6:	f7fe fbdd 	bl	8019894 <BTPS_StopTimer>
 801b0da:	b91f      	cbnz	r7, 801b0e4 <HCI_Event_Callback+0x474>
 801b0dc:	2d01      	cmp	r5, #1
 801b0de:	d101      	bne.n	801b0e4 <HCI_Event_Callback+0x474>
 801b0e0:	f884 a003 	strb.w	sl, [r4, #3]
 801b0e4:	78a0      	ldrb	r0, [r4, #2]
 801b0e6:	2801      	cmp	r0, #1
 801b0e8:	d137      	bne.n	801b15a <HCI_Event_Callback+0x4ea>
 801b0ea:	78e0      	ldrb	r0, [r4, #3]
 801b0ec:	2803      	cmp	r0, #3
 801b0ee:	f43f ae78 	beq.w	801ade2 <HCI_Event_Callback+0x172>
 801b0f2:	4641      	mov	r1, r8
 801b0f4:	9804      	ldr	r0, [sp, #16]
 801b0f6:	f007 ffac 	bl	8023052 <LP_DisconnectReq>
 801b0fa:	e02e      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801b0fc:	6867      	ldr	r7, [r4, #4]
 801b0fe:	7838      	ldrb	r0, [r7, #0]
 801b100:	bb28      	cbnz	r0, 801b14e <HCI_Event_Callback+0x4de>
 801b102:	78b8      	ldrb	r0, [r7, #2]
 801b104:	bb18      	cbnz	r0, 801b14e <HCI_Event_Callback+0x4de>
 801b106:	2028      	movs	r0, #40	; 0x28
 801b108:	f7f8 f958 	bl	80133bc <BTPS_AllocateMemory>
 801b10c:	0004      	movs	r4, r0
 801b10e:	d024      	beq.n	801b15a <HCI_Event_Callback+0x4ea>
 801b110:	2228      	movs	r2, #40	; 0x28
 801b112:	2100      	movs	r1, #0
 801b114:	f7f8 f9d3 	bl	80134be <BTPS_MemInitialize>
 801b118:	79b8      	ldrb	r0, [r7, #6]
 801b11a:	b1c8      	cbz	r0, 801b150 <HCI_Event_Callback+0x4e0>
 801b11c:	2000      	movs	r0, #0
 801b11e:	7020      	strb	r0, [r4, #0]
 801b120:	f884 8001 	strb.w	r8, [r4, #1]
 801b124:	70a6      	strb	r6, [r4, #2]
 801b126:	68b8      	ldr	r0, [r7, #8]
 801b128:	f8c4 0005 	str.w	r0, [r4, #5]
 801b12c:	89b8      	ldrh	r0, [r7, #12]
 801b12e:	f8a4 0009 	strh.w	r0, [r4, #9]
 801b132:	88b8      	ldrh	r0, [r7, #4]
 801b134:	81a0      	strh	r0, [r4, #12]
 801b136:	81e5      	strh	r5, [r4, #14]
 801b138:	9804      	ldr	r0, [sp, #16]
 801b13a:	4621      	mov	r1, r4
 801b13c:	3058      	adds	r0, #88	; 0x58
 801b13e:	f005 fea7 	bl	8020e90 <AddConnectionInfoEntry>
 801b142:	b138      	cbz	r0, 801b154 <HCI_Event_Callback+0x4e4>
 801b144:	2210      	movs	r2, #16
 801b146:	4621      	mov	r1, r4
 801b148:	9804      	ldr	r0, [sp, #16]
 801b14a:	f006 f88b 	bl	8021264 <DispatchFixedChannelConnectDisconnect>
 801b14e:	e004      	b.n	801b15a <HCI_Event_Callback+0x4ea>
 801b150:	2001      	movs	r0, #1
 801b152:	e7e4      	b.n	801b11e <HCI_Event_Callback+0x4ae>
 801b154:	4620      	mov	r0, r4
 801b156:	f7f8 f94b 	bl	80133f0 <BTPS_FreeMemory>
 801b15a:	9808      	ldr	r0, [sp, #32]
 801b15c:	f7fe fa22 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801b160:	b009      	add	sp, #36	; 0x24
 801b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b166:	0000      	.short	0x0000
 801b168:	080210fd 	.word	0x080210fd
 801b16c:	080220db 	.word	0x080220db

Disassembly of section i.IssueBondingCallback:

0801b170 <IssueBondingCallback>:
 801b170:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801b174:	4688      	mov	r8, r1
 801b176:	4605      	mov	r5, r0
 801b178:	461f      	mov	r7, r3
 801b17a:	4616      	mov	r6, r2
 801b17c:	4611      	mov	r1, r2
 801b17e:	3050      	adds	r0, #80	; 0x50
 801b180:	f7fe fcea 	bl	8019b58 <DeleteCallbackEntry>
 801b184:	0004      	movs	r4, r0
 801b186:	d00d      	beq.n	801b1a4 <IssueBondingCallback+0x34>
 801b188:	68e2      	ldr	r2, [r4, #12]
 801b18a:	b132      	cbz	r2, 801b19a <IssueBondingCallback+0x2a>
 801b18c:	e9cd 6700 	strd	r6, r7, [sp]
 801b190:	6923      	ldr	r3, [r4, #16]
 801b192:	4641      	mov	r1, r8
 801b194:	6828      	ldr	r0, [r5, #0]
 801b196:	f7fe fd22 	bl	8019bde <FormatAndDispatchAuthenticationStatusEvent>
 801b19a:	4620      	mov	r0, r4
 801b19c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801b1a0:	f7fd bd99 	b.w	8018cd6 <BSC_FreeGenericListEntryMemory>
 801b1a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.ReleaseGAPLEContext:

0801b1a8 <ReleaseGAPLEContext>:
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	d001      	beq.n	801b1b0 <ReleaseGAPLEContext+0x8>
 801b1ac:	f7fe b9fa 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 801b1b0:	4770      	bx	lr

Disassembly of section i.SearchACLLinkEntryBD_ADDR:

0801b1b2 <SearchACLLinkEntryBD_ADDR>:
 801b1b2:	b508      	push	{r3, lr}
 801b1b4:	2320      	movs	r3, #32
 801b1b6:	9000      	str	r0, [sp, #0]
 801b1b8:	2203      	movs	r2, #3
 801b1ba:	2005      	movs	r0, #5
 801b1bc:	f7fd ffbd 	bl	801913a <BSC_SearchGenericListEntry>
 801b1c0:	bd08      	pop	{r3, pc}

Disassembly of section i.SearchACLLinkEntryConnection_Handle:

0801b1c2 <SearchACLLinkEntryConnection_Handle>:
 801b1c2:	b503      	push	{r0, r1, lr}
 801b1c4:	b081      	sub	sp, #4
 801b1c6:	2320      	movs	r3, #32
 801b1c8:	9000      	str	r0, [sp, #0]
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	a902      	add	r1, sp, #8
 801b1ce:	2003      	movs	r0, #3
 801b1d0:	f7fd ffb3 	bl	801913a <BSC_SearchGenericListEntry>
 801b1d4:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchCallbackEntry:

0801b1d6 <SearchCallbackEntry>:
 801b1d6:	b508      	push	{r3, lr}
 801b1d8:	2314      	movs	r3, #20
 801b1da:	9000      	str	r0, [sp, #0]
 801b1dc:	2200      	movs	r2, #0
 801b1de:	2005      	movs	r0, #5
 801b1e0:	f7fd ffab 	bl	801913a <BSC_SearchGenericListEntry>
 801b1e4:	bd08      	pop	{r3, pc}

Disassembly of section i.AcquireGAPStackInfo:

0801b1e6 <AcquireGAPStackInfo>:
 801b1e6:	b570      	push	{r4, r5, r6, lr}
 801b1e8:	460d      	mov	r5, r1
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	f7fe fc28 	bl	8019a40 <AcquireGAPLEContext>
 801b1f0:	b1e8      	cbz	r0, 801b22e <AcquireGAPStackInfo+0x48>
 801b1f2:	6822      	ldr	r2, [r4, #0]
 801b1f4:	b1c2      	cbz	r2, 801b228 <AcquireGAPStackInfo+0x42>
 801b1f6:	6828      	ldr	r0, [r5, #0]
 801b1f8:	b198      	cbz	r0, 801b222 <AcquireGAPStackInfo+0x3c>
 801b1fa:	8bc0      	ldrh	r0, [r0, #30]
 801b1fc:	0400      	lsls	r0, r0, #16
 801b1fe:	d505      	bpl.n	801b20c <AcquireGAPStackInfo+0x26>
 801b200:	4610      	mov	r0, r2
 801b202:	f7ff ffd1 	bl	801b1a8 <ReleaseGAPLEContext>
 801b206:	f06f 0067 	mvn.w	r0, #103	; 0x67
 801b20a:	bd70      	pop	{r4, r5, r6, pc}
 801b20c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
 801b210:	2000      	movs	r0, #0
 801b212:	07c9      	lsls	r1, r1, #31
 801b214:	d1f9      	bne.n	801b20a <AcquireGAPStackInfo+0x24>
 801b216:	4610      	mov	r0, r2
 801b218:	f7ff ffc6 	bl	801b1a8 <ReleaseGAPLEContext>
 801b21c:	f06f 0077 	mvn.w	r0, #119	; 0x77
 801b220:	bd70      	pop	{r4, r5, r6, pc}
 801b222:	4610      	mov	r0, r2
 801b224:	f7ff ffc0 	bl	801b1a8 <ReleaseGAPLEContext>
 801b228:	f06f 0037 	mvn.w	r0, #55	; 0x37
 801b22c:	bd70      	pop	{r4, r5, r6, pc}
 801b22e:	f06f 0001 	mvn.w	r0, #1
 801b232:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AcquireGAPStackLELinkInfo:

0801b234 <AcquireGAPStackLELinkInfo>:
 801b234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b238:	4614      	mov	r4, r2
 801b23a:	460d      	mov	r5, r1
 801b23c:	4606      	mov	r6, r0
 801b23e:	461a      	mov	r2, r3
 801b240:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b244:	f7ff ffcf 	bl	801b1e6 <AcquireGAPStackInfo>
 801b248:	0007      	movs	r7, r0
 801b24a:	d10b      	bne.n	801b264 <AcquireGAPStackLELinkInfo+0x30>
 801b24c:	6828      	ldr	r0, [r5, #0]
 801b24e:	4641      	mov	r1, r8
 801b250:	3058      	adds	r0, #88	; 0x58
 801b252:	f003 f8b3 	bl	801e3bc <SearchLELinkEntryBD_ADDR>
 801b256:	6020      	str	r0, [r4, #0]
 801b258:	b920      	cbnz	r0, 801b264 <AcquireGAPStackLELinkInfo+0x30>
 801b25a:	6830      	ldr	r0, [r6, #0]
 801b25c:	f7ff ffa4 	bl	801b1a8 <ReleaseGAPLEContext>
 801b260:	f06f 0761 	mvn.w	r7, #97	; 0x61
 801b264:	4638      	mov	r0, r7
 801b266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.AcquireGAPStackLELinkInfoConnection_Handle:

0801b26a <AcquireGAPStackLELinkInfoConnection_Handle>:
 801b26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b26e:	4614      	mov	r4, r2
 801b270:	460d      	mov	r5, r1
 801b272:	4606      	mov	r6, r0
 801b274:	461a      	mov	r2, r3
 801b276:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b27a:	f7ff ffb4 	bl	801b1e6 <AcquireGAPStackInfo>
 801b27e:	0007      	movs	r7, r0
 801b280:	d10a      	bne.n	801b298 <AcquireGAPStackLELinkInfoConnection_Handle+0x2e>
 801b282:	6828      	ldr	r0, [r5, #0]
 801b284:	4641      	mov	r1, r8
 801b286:	3058      	adds	r0, #88	; 0x58
 801b288:	f003 f8a0 	bl	801e3cc <SearchLELinkEntryConnection_Handle>
 801b28c:	6020      	str	r0, [r4, #0]
 801b28e:	b918      	cbnz	r0, 801b298 <AcquireGAPStackLELinkInfoConnection_Handle+0x2e>
 801b290:	6830      	ldr	r0, [r6, #0]
 801b292:	f7ff ff89 	bl	801b1a8 <ReleaseGAPLEContext>
 801b296:	1e7f      	subs	r7, r7, #1
 801b298:	4638      	mov	r0, r7
 801b29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.AcquirePairingCallbackInformation:

0801b29e <AcquirePairingCallbackInformation>:
 801b29e:	b510      	push	{r4, lr}
 801b2a0:	460a      	mov	r2, r1
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	2106      	movs	r1, #6
 801b2a6:	f102 0028 	add.w	r0, r2, #40	; 0x28
 801b2aa:	f003 f87d 	bl	801e3a8 <SearchCallbackInfoByType>
 801b2ae:	2800      	cmp	r0, #0
 801b2b0:	d106      	bne.n	801b2c0 <AcquirePairingCallbackInformation+0x22>
 801b2b2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801b2b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2ba:	2105      	movs	r1, #5
 801b2bc:	f003 b874 	b.w	801e3a8 <SearchCallbackInfoByType>
 801b2c0:	bd10      	pop	{r4, pc}

Disassembly of section i.AddLELinkEntry:

0801b2c2 <AddLELinkEntry>:
 801b2c2:	b570      	push	{r4, r5, r6, lr}
 801b2c4:	460d      	mov	r5, r1
 801b2c6:	0006      	movs	r6, r0
 801b2c8:	f04f 0400 	mov.w	r4, #0
 801b2cc:	d034      	beq.n	801b338 <AddLELinkEntry+0x76>
 801b2ce:	b355      	cbz	r5, 801b326 <AddLELinkEntry+0x64>
 801b2d0:	8828      	ldrh	r0, [r5, #0]
 801b2d2:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 801b2d6:	d22f      	bcs.n	801b338 <AddLELinkEntry+0x76>
 801b2d8:	f105 0010 	add.w	r0, r5, #16
 801b2dc:	f7fe f8af 	bl	801943e <CompareNULLBluetoothAddress>
 801b2e0:	bb08      	cbnz	r0, 801b326 <AddLELinkEntry+0x64>
 801b2e2:	f105 0009 	add.w	r0, r5, #9
 801b2e6:	f7fe f8aa 	bl	801943e <CompareNULLBluetoothAddress>
 801b2ea:	b9e0      	cbnz	r0, 801b326 <AddLELinkEntry+0x64>
 801b2ec:	2030      	movs	r0, #48	; 0x30
 801b2ee:	f7f8 f865 	bl	80133bc <BTPS_AllocateMemory>
 801b2f2:	0004      	movs	r4, r0
 801b2f4:	d020      	beq.n	801b338 <AddLELinkEntry+0x76>
 801b2f6:	2230      	movs	r2, #48	; 0x30
 801b2f8:	4629      	mov	r1, r5
 801b2fa:	f7f8 fd42 	bl	8013d82 <__aeabi_memcpy>
 801b2fe:	2000      	movs	r0, #0
 801b300:	62e0      	str	r0, [r4, #44]	; 0x2c
 801b302:	6835      	ldr	r5, [r6, #0]
 801b304:	b1bd      	cbz	r5, 801b336 <AddLELinkEntry+0x74>
 801b306:	f104 0609 	add.w	r6, r4, #9
 801b30a:	4631      	mov	r1, r6
 801b30c:	f105 0009 	add.w	r0, r5, #9
 801b310:	f7fe f854 	bl	80193bc <CompareBluetoothAddress>
 801b314:	b918      	cbnz	r0, 801b31e <AddLELinkEntry+0x5c>
 801b316:	8828      	ldrh	r0, [r5, #0]
 801b318:	8821      	ldrh	r1, [r4, #0]
 801b31a:	4288      	cmp	r0, r1
 801b31c:	d104      	bne.n	801b328 <AddLELinkEntry+0x66>
 801b31e:	4620      	mov	r0, r4
 801b320:	f000 fc36 	bl	801bb90 <FreeLELinkEntryMemory>
 801b324:	2400      	movs	r4, #0
 801b326:	e007      	b.n	801b338 <AddLELinkEntry+0x76>
 801b328:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801b32a:	b108      	cbz	r0, 801b330 <AddLELinkEntry+0x6e>
 801b32c:	4605      	mov	r5, r0
 801b32e:	e7ec      	b.n	801b30a <AddLELinkEntry+0x48>
 801b330:	b114      	cbz	r4, 801b338 <AddLELinkEntry+0x76>
 801b332:	62ec      	str	r4, [r5, #44]	; 0x2c
 801b334:	e000      	b.n	801b338 <AddLELinkEntry+0x76>
 801b336:	6034      	str	r4, [r6, #0]
 801b338:	4620      	mov	r0, r4
 801b33a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AllocateSecurityManagerContext:

0801b33c <AllocateSecurityManagerContext>:
 801b33c:	b570      	push	{r4, r5, r6, lr}
 801b33e:	4604      	mov	r4, r0
 801b340:	69c0      	ldr	r0, [r0, #28]
 801b342:	460d      	mov	r5, r1
 801b344:	b108      	cbz	r0, 801b34a <AllocateSecurityManagerContext+0xe>
 801b346:	2000      	movs	r0, #0
 801b348:	bd70      	pop	{r4, r5, r6, pc}
 801b34a:	2078      	movs	r0, #120	; 0x78
 801b34c:	f7f8 f836 	bl	80133bc <BTPS_AllocateMemory>
 801b350:	61e0      	str	r0, [r4, #28]
 801b352:	2800      	cmp	r0, #0
 801b354:	d0f8      	beq.n	801b348 <AllocateSecurityManagerContext+0xc>
 801b356:	2278      	movs	r2, #120	; 0x78
 801b358:	2100      	movs	r1, #0
 801b35a:	f7f8 f8b0 	bl	80134be <BTPS_MemInitialize>
 801b35e:	69e0      	ldr	r0, [r4, #28]
 801b360:	7105      	strb	r5, [r0, #4]
 801b362:	2001      	movs	r0, #1
 801b364:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AssignGAPAddressType:

0801b366 <AssignGAPAddressType>:
 801b366:	2800      	cmp	r0, #0
 801b368:	d000      	beq.n	801b36c <AssignGAPAddressType+0x6>
 801b36a:	2001      	movs	r0, #1
 801b36c:	4770      	bx	lr

Disassembly of section i.AssignHCIAddressType:

0801b36e <AssignHCIAddressType>:
 801b36e:	2800      	cmp	r0, #0
 801b370:	d000      	beq.n	801b374 <AssignHCIAddressType+0x6>
 801b372:	2001      	movs	r0, #1
 801b374:	4770      	bx	lr

Disassembly of section i.AsynchronousPairingStatusCallbackFunction:

0801b376 <AsynchronousPairingStatusCallbackFunction>:
 801b376:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b378:	000c      	movs	r4, r1
 801b37a:	4603      	mov	r3, r0
 801b37c:	d012      	beq.n	801b3a4 <AsynchronousPairingStatusCallbackFunction+0x2e>
 801b37e:	8820      	ldrh	r0, [r4, #0]
 801b380:	9000      	str	r0, [sp, #0]
 801b382:	aa01      	add	r2, sp, #4
 801b384:	a902      	add	r1, sp, #8
 801b386:	a803      	add	r0, sp, #12
 801b388:	f7ff ff6f 	bl	801b26a <AcquireGAPStackLELinkInfoConnection_Handle>
 801b38c:	b938      	cbnz	r0, 801b39e <AsynchronousPairingStatusCallbackFunction+0x28>
 801b38e:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 801b392:	78e2      	ldrb	r2, [r4, #3]
 801b394:	f000 fb46 	bl	801ba24 <DispatchPairingStatusCallback>
 801b398:	9803      	ldr	r0, [sp, #12]
 801b39a:	f7fe f903 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801b39e:	4620      	mov	r0, r4
 801b3a0:	f7f8 f826 	bl	80133f0 <BTPS_FreeMemory>
 801b3a4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

Disassembly of section i.AuthenticationResponsePasskeyConfirmationResponse:

0801b3a8 <AuthenticationResponsePasskeyConfirmationResponse>:
 801b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ac:	69cc      	ldr	r4, [r1, #28]
 801b3ae:	4680      	mov	r8, r0
 801b3b0:	b08d      	sub	sp, #52	; 0x34
 801b3b2:	7920      	ldrb	r0, [r4, #4]
 801b3b4:	4615      	mov	r5, r2
 801b3b6:	4689      	mov	r9, r1
 801b3b8:	b160      	cbz	r0, 801b3d4 <AuthenticationResponsePasskeyConfirmationResponse+0x2c>
 801b3ba:	f898 001c 	ldrb.w	r0, [r8, #28]
 801b3be:	2801      	cmp	r0, #1
 801b3c0:	d102      	bne.n	801b3c8 <AuthenticationResponsePasskeyConfirmationResponse+0x20>
 801b3c2:	7960      	ldrb	r0, [r4, #5]
 801b3c4:	07c0      	lsls	r0, r0, #31
 801b3c6:	d005      	beq.n	801b3d4 <AuthenticationResponsePasskeyConfirmationResponse+0x2c>
 801b3c8:	f06f 0576 	mvn.w	r5, #118	; 0x76
 801b3cc:	b00d      	add	sp, #52	; 0x34
 801b3ce:	4628      	mov	r0, r5
 801b3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d4:	f104 0062 	add.w	r0, r4, #98	; 0x62
 801b3d8:	2210      	movs	r2, #16
 801b3da:	2100      	movs	r1, #0
 801b3dc:	4606      	mov	r6, r0
 801b3de:	f7f8 f86e 	bl	80134be <BTPS_MemInitialize>
 801b3e2:	7828      	ldrb	r0, [r5, #0]
 801b3e4:	f04f 0a00 	mov.w	sl, #0
 801b3e8:	2801      	cmp	r0, #1
 801b3ea:	d006      	beq.n	801b3fa <AuthenticationResponsePasskeyConfirmationResponse+0x52>
 801b3ec:	2803      	cmp	r0, #3
 801b3ee:	d012      	beq.n	801b416 <AuthenticationResponsePasskeyConfirmationResponse+0x6e>
 801b3f0:	2804      	cmp	r0, #4
 801b3f2:	d008      	beq.n	801b406 <AuthenticationResponsePasskeyConfirmationResponse+0x5e>
 801b3f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b3f8:	e7e8      	b.n	801b3cc <AuthenticationResponsePasskeyConfirmationResponse+0x24>
 801b3fa:	2210      	movs	r2, #16
 801b3fc:	1d29      	adds	r1, r5, #4
 801b3fe:	4630      	mov	r0, r6
 801b400:	f7f8 fcbf 	bl	8013d82 <__aeabi_memcpy>
 801b404:	e016      	b.n	801b434 <AuthenticationResponsePasskeyConfirmationResponse+0x8c>
 801b406:	f884 a062 	strb.w	sl, [r4, #98]	; 0x62
 801b40a:	f884 a063 	strb.w	sl, [r4, #99]	; 0x63
 801b40e:	4650      	mov	r0, sl
 801b410:	f884 a064 	strb.w	sl, [r4, #100]	; 0x64
 801b414:	e00c      	b.n	801b430 <AuthenticationResponsePasskeyConfirmationResponse+0x88>
 801b416:	7928      	ldrb	r0, [r5, #4]
 801b418:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
 801b41c:	88a8      	ldrh	r0, [r5, #4]
 801b41e:	0a00      	lsrs	r0, r0, #8
 801b420:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
 801b424:	6868      	ldr	r0, [r5, #4]
 801b426:	0c00      	lsrs	r0, r0, #16
 801b428:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
 801b42c:	6868      	ldr	r0, [r5, #4]
 801b42e:	0e00      	lsrs	r0, r0, #24
 801b430:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801b434:	f104 0632 	add.w	r6, r4, #50	; 0x32
 801b438:	2500      	movs	r5, #0
 801b43a:	f108 0b44 	add.w	fp, r8, #68	; 0x44
 801b43e:	4659      	mov	r1, fp
 801b440:	f8d8 0000 	ldr.w	r0, [r8]
 801b444:	f005 f8a8 	bl	8020598 <_HCI_LE_Rand>
 801b448:	0007      	movs	r7, r0
 801b44a:	d105      	bne.n	801b458 <AuthenticationResponsePasskeyConfirmationResponse+0xb0>
 801b44c:	2208      	movs	r2, #8
 801b44e:	4659      	mov	r1, fp
 801b450:	4630      	mov	r0, r6
 801b452:	f7f8 f830 	bl	80134b6 <BTPS_MemCopy>
 801b456:	3608      	adds	r6, #8
 801b458:	1c6d      	adds	r5, r5, #1
 801b45a:	2d02      	cmp	r5, #2
 801b45c:	d201      	bcs.n	801b462 <AuthenticationResponsePasskeyConfirmationResponse+0xba>
 801b45e:	2f00      	cmp	r7, #0
 801b460:	d0ed      	beq.n	801b43e <AuthenticationResponsePasskeyConfirmationResponse+0x96>
 801b462:	003d      	movs	r5, r7
 801b464:	d1b2      	bne.n	801b3cc <AuthenticationResponsePasskeyConfirmationResponse+0x24>
 801b466:	466a      	mov	r2, sp
 801b468:	4649      	mov	r1, r9
 801b46a:	4640      	mov	r0, r8
 801b46c:	f000 fb5d 	bl	801bb2a <FormatConfirmValueParameters>
 801b470:	aa08      	add	r2, sp, #32
 801b472:	4669      	mov	r1, sp
 801b474:	4640      	mov	r0, r8
 801b476:	f002 fed8 	bl	801e22a <SM_Confirm_Value_Generation>
 801b47a:	0005      	movs	r5, r0
 801b47c:	d1a6      	bne.n	801b3cc <AuthenticationResponsePasskeyConfirmationResponse+0x24>
 801b47e:	7920      	ldrb	r0, [r4, #4]
 801b480:	b150      	cbz	r0, 801b498 <AuthenticationResponsePasskeyConfirmationResponse+0xf0>
 801b482:	7960      	ldrb	r0, [r4, #5]
 801b484:	2210      	movs	r2, #16
 801b486:	f040 0001 	orr.w	r0, r0, #1
 801b48a:	7160      	strb	r0, [r4, #5]
 801b48c:	a908      	add	r1, sp, #32
 801b48e:	f104 0022 	add.w	r0, r4, #34	; 0x22
 801b492:	f7f8 fc76 	bl	8013d82 <__aeabi_memcpy>
 801b496:	e799      	b.n	801b3cc <AuthenticationResponsePasskeyConfirmationResponse+0x24>
 801b498:	6821      	ldr	r1, [r4, #0]
 801b49a:	b129      	cbz	r1, 801b4a8 <AuthenticationResponsePasskeyConfirmationResponse+0x100>
 801b49c:	f8d8 0000 	ldr.w	r0, [r8]
 801b4a0:	f7fe f9f8 	bl	8019894 <BTPS_StopTimer>
 801b4a4:	f8c4 a000 	str.w	sl, [r4]
 801b4a8:	aa08      	add	r2, sp, #32
 801b4aa:	4649      	mov	r1, r9
 801b4ac:	4640      	mov	r0, r8
 801b4ae:	f000 f87d 	bl	801b5ac <BuildAndSendPairingConfirmPDU>
 801b4b2:	0005      	movs	r5, r0
 801b4b4:	d18a      	bne.n	801b3cc <AuthenticationResponsePasskeyConfirmationResponse+0x24>
 801b4b6:	f8b9 1000 	ldrh.w	r1, [r9]
 801b4ba:	f247 5330 	movw	r3, #30000	; 0x7530
 801b4be:	4a03      	ldr	r2, [pc, #12]	; (801b4cc <AuthenticationResponsePasskeyConfirmationResponse+0x124>)
 801b4c0:	f8d8 0000 	ldr.w	r0, [r8]
 801b4c4:	f7fe f99c 	bl	8019800 <BTPS_StartTimer>
 801b4c8:	6020      	str	r0, [r4, #0]
 801b4ca:	e77f      	b.n	801b3cc <AuthenticationResponsePasskeyConfirmationResponse+0x24>
 801b4cc:	0801e495 	.word	0x0801e495

Disassembly of section i.AuthenticationResponseZeroLengthResponse:

0801b4d0 <AuthenticationResponseZeroLengthResponse>:
 801b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4d4:	4613      	mov	r3, r2
 801b4d6:	4606      	mov	r6, r0
 801b4d8:	2200      	movs	r2, #0
 801b4da:	7818      	ldrb	r0, [r3, #0]
 801b4dc:	460d      	mov	r5, r1
 801b4de:	4614      	mov	r4, r2
 801b4e0:	2809      	cmp	r0, #9
 801b4e2:	d249      	bcs.n	801b578 <AuthenticationResponseZeroLengthResponse+0xa8>
 801b4e4:	e8df f000 	tbb	[pc, r0]
 801b4e8:	0b380e05 	.word	0x0b380e05
 801b4ec:	45453612 	.word	0x45453612
 801b4f0:	0045      	.short	0x0045
 801b4f2:	8829      	ldrh	r1, [r5, #0]
 801b4f4:	6830      	ldr	r0, [r6, #0]
 801b4f6:	f005 f805 	bl	8020504 <_HCI_LE_Long_Term_Key_Request_Negative_Reply>
 801b4fa:	4607      	mov	r7, r0
 801b4fc:	e03e      	b.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b4fe:	2201      	movs	r2, #1
 801b500:	2404      	movs	r4, #4
 801b502:	e006      	b.n	801b512 <AuthenticationResponseZeroLengthResponse+0x42>
 801b504:	b92a      	cbnz	r2, 801b512 <AuthenticationResponseZeroLengthResponse+0x42>
 801b506:	2202      	movs	r2, #2
 801b508:	2405      	movs	r4, #5
 801b50a:	e002      	b.n	801b512 <AuthenticationResponseZeroLengthResponse+0x42>
 801b50c:	b90a      	cbnz	r2, 801b512 <AuthenticationResponseZeroLengthResponse+0x42>
 801b50e:	2208      	movs	r2, #8
 801b510:	2406      	movs	r4, #6
 801b512:	2300      	movs	r3, #0
 801b514:	4629      	mov	r1, r5
 801b516:	4630      	mov	r0, r6
 801b518:	f000 f85d 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801b51c:	0007      	movs	r7, r0
 801b51e:	d12d      	bne.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b520:	2004      	movs	r0, #4
 801b522:	f7f7 ff4b 	bl	80133bc <BTPS_AllocateMemory>
 801b526:	0007      	movs	r7, r0
 801b528:	f06f 0841 	mvn.w	r8, #65	; 0x41
 801b52c:	d010      	beq.n	801b550 <AuthenticationResponseZeroLengthResponse+0x80>
 801b52e:	8828      	ldrh	r0, [r5, #0]
 801b530:	8038      	strh	r0, [r7, #0]
 801b532:	70fc      	strb	r4, [r7, #3]
 801b534:	2000      	movs	r0, #0
 801b536:	70b8      	strb	r0, [r7, #2]
 801b538:	463a      	mov	r2, r7
 801b53a:	4912      	ldr	r1, [pc, #72]	; (801b584 <AuthenticationResponseZeroLengthResponse+0xb4>)
 801b53c:	6830      	ldr	r0, [r6, #0]
 801b53e:	f7fd fde3 	bl	8019108 <BSC_ScheduleAsynchronousCallback>
 801b542:	2800      	cmp	r0, #0
 801b544:	dd01      	ble.n	801b54a <AuthenticationResponseZeroLengthResponse+0x7a>
 801b546:	2700      	movs	r7, #0
 801b548:	e018      	b.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b54a:	4638      	mov	r0, r7
 801b54c:	f7f7 ff50 	bl	80133f0 <BTPS_FreeMemory>
 801b550:	4647      	mov	r7, r8
 801b552:	e013      	b.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b554:	2208      	movs	r2, #8
 801b556:	e001      	b.n	801b55c <AuthenticationResponseZeroLengthResponse+0x8c>
 801b558:	b902      	cbnz	r2, 801b55c <AuthenticationResponseZeroLengthResponse+0x8c>
 801b55a:	2205      	movs	r2, #5
 801b55c:	2301      	movs	r3, #1
 801b55e:	4629      	mov	r1, r5
 801b560:	4630      	mov	r0, r6
 801b562:	f000 f838 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801b566:	0007      	movs	r7, r0
 801b568:	d108      	bne.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b56a:	4628      	mov	r0, r5
 801b56c:	f000 fb30 	bl	801bbd0 <FreeSecurityManagerResources>
 801b570:	e004      	b.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b572:	f06f 0776 	mvn.w	r7, #118	; 0x76
 801b576:	e001      	b.n	801b57c <AuthenticationResponseZeroLengthResponse+0xac>
 801b578:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b57c:	4638      	mov	r0, r7
 801b57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b582:	0000      	.short	0x0000
 801b584:	0801b377 	.word	0x0801b377

Disassembly of section i.BuildAndSendEncryptKey:

0801b588 <BuildAndSendEncryptKey>:
 801b588:	b570      	push	{r4, r5, r6, lr}
 801b58a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b58e:	460d      	mov	r5, r1
 801b590:	4604      	mov	r4, r0
 801b592:	2210      	movs	r2, #16
 801b594:	4619      	mov	r1, r3
 801b596:	3029      	adds	r0, #41	; 0x29
 801b598:	f7f8 fbf3 	bl	8013d82 <__aeabi_memcpy>
 801b59c:	4629      	mov	r1, r5
 801b59e:	4620      	mov	r0, r4
 801b5a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	2211      	movs	r2, #17
 801b5a8:	f002 bf1a 	b.w	801e3e0 <SecurityManagerChannelWrite>

Disassembly of section i.BuildAndSendPairingConfirmPDU:

0801b5ac <BuildAndSendPairingConfirmPDU>:
 801b5ac:	b570      	push	{r4, r5, r6, lr}
 801b5ae:	4604      	mov	r4, r0
 801b5b0:	4613      	mov	r3, r2
 801b5b2:	2003      	movs	r0, #3
 801b5b4:	460d      	mov	r5, r1
 801b5b6:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 801b5ba:	2210      	movs	r2, #16
 801b5bc:	4619      	mov	r1, r3
 801b5be:	f104 0029 	add.w	r0, r4, #41	; 0x29
 801b5c2:	f7f8 fbde 	bl	8013d82 <__aeabi_memcpy>
 801b5c6:	4629      	mov	r1, r5
 801b5c8:	4620      	mov	r0, r4
 801b5ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b5ce:	2301      	movs	r3, #1
 801b5d0:	2211      	movs	r2, #17
 801b5d2:	f002 bf05 	b.w	801e3e0 <SecurityManagerChannelWrite>

Disassembly of section i.BuildAndSendPairingFailedPDU:

0801b5d6 <BuildAndSendPairingFailedPDU>:
 801b5d6:	b570      	push	{r4, r5, r6, lr}
 801b5d8:	4604      	mov	r4, r0
 801b5da:	2005      	movs	r0, #5
 801b5dc:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 801b5e0:	460d      	mov	r5, r1
 801b5e2:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
 801b5e6:	b14b      	cbz	r3, 801b5fc <BuildAndSendPairingFailedPDU+0x26>
 801b5e8:	69e8      	ldr	r0, [r5, #28]
 801b5ea:	b120      	cbz	r0, 801b5f6 <BuildAndSendPairingFailedPDU+0x20>
 801b5ec:	6801      	ldr	r1, [r0, #0]
 801b5ee:	b111      	cbz	r1, 801b5f6 <BuildAndSendPairingFailedPDU+0x20>
 801b5f0:	6820      	ldr	r0, [r4, #0]
 801b5f2:	f7fe f94f 	bl	8019894 <BTPS_StopTimer>
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	f000 faea 	bl	801bbd0 <FreeSecurityManagerResources>
 801b5fc:	4629      	mov	r1, r5
 801b5fe:	4620      	mov	r0, r4
 801b600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b604:	2301      	movs	r3, #1
 801b606:	2202      	movs	r2, #2
 801b608:	f002 beea 	b.w	801e3e0 <SecurityManagerChannelWrite>

Disassembly of section i.BuildAndSendPairingPDU:

0801b60c <BuildAndSendPairingPDU>:
 801b60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b610:	4604      	mov	r4, r0
 801b612:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801b616:	7818      	ldrb	r0, [r3, #0]
 801b618:	461d      	mov	r5, r3
 801b61a:	4688      	mov	r8, r1
 801b61c:	2805      	cmp	r0, #5
 801b61e:	d216      	bcs.n	801b64e <BuildAndSendPairingPDU+0x42>
 801b620:	e8df f000 	tbb	[pc, r0]
 801b624:	09070503 	.word	0x09070503
 801b628:	000b      	.short	0x000b
 801b62a:	2000      	movs	r0, #0
 801b62c:	e006      	b.n	801b63c <BuildAndSendPairingPDU+0x30>
 801b62e:	2001      	movs	r0, #1
 801b630:	e004      	b.n	801b63c <BuildAndSendPairingPDU+0x30>
 801b632:	2002      	movs	r0, #2
 801b634:	e002      	b.n	801b63c <BuildAndSendPairingPDU+0x30>
 801b636:	2003      	movs	r0, #3
 801b638:	e000      	b.n	801b63c <BuildAndSendPairingPDU+0x30>
 801b63a:	2004      	movs	r0, #4
 801b63c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801b640:	786a      	ldrb	r2, [r5, #1]
 801b642:	2101      	movs	r1, #1
 801b644:	2000      	movs	r0, #0
 801b646:	b132      	cbz	r2, 801b656 <BuildAndSendPairingPDU+0x4a>
 801b648:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
 801b64c:	e005      	b.n	801b65a <BuildAndSendPairingPDU+0x4e>
 801b64e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b656:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
 801b65a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 801b65e:	78a8      	ldrb	r0, [r5, #2]
 801b660:	2801      	cmp	r0, #1
 801b662:	d101      	bne.n	801b668 <BuildAndSendPairingPDU+0x5c>
 801b664:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
 801b668:	78e8      	ldrb	r0, [r5, #3]
 801b66a:	2800      	cmp	r0, #0
 801b66c:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 801b670:	d002      	beq.n	801b678 <BuildAndSendPairingPDU+0x6c>
 801b672:	f040 0004 	orr.w	r0, r0, #4
 801b676:	e001      	b.n	801b67c <BuildAndSendPairingPDU+0x70>
 801b678:	f020 0004 	bic.w	r0, r0, #4
 801b67c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 801b680:	7928      	ldrb	r0, [r5, #4]
 801b682:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
 801b686:	7f20      	ldrb	r0, [r4, #28]
 801b688:	f105 0608 	add.w	r6, r5, #8
 801b68c:	2801      	cmp	r0, #1
 801b68e:	d00a      	beq.n	801b6a6 <BuildAndSendPairingPDU+0x9a>
 801b690:	2802      	cmp	r0, #2
 801b692:	d002      	beq.n	801b69a <BuildAndSendPairingPDU+0x8e>
 801b694:	f06f 006a 	mvn.w	r0, #106	; 0x6a
 801b698:	e7db      	b.n	801b652 <BuildAndSendPairingPDU+0x46>
 801b69a:	4630      	mov	r0, r6
 801b69c:	f000 f845 	bl	801b72a <BuildKeyDistributionField>
 801b6a0:	4607      	mov	r7, r0
 801b6a2:	1d68      	adds	r0, r5, #5
 801b6a4:	e004      	b.n	801b6b0 <BuildAndSendPairingPDU+0xa4>
 801b6a6:	1d68      	adds	r0, r5, #5
 801b6a8:	f000 f83f 	bl	801b72a <BuildKeyDistributionField>
 801b6ac:	4607      	mov	r7, r0
 801b6ae:	4630      	mov	r0, r6
 801b6b0:	f000 f83b 	bl	801b72a <BuildKeyDistributionField>
 801b6b4:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
 801b6b8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801b6bc:	4641      	mov	r1, r8
 801b6be:	4620      	mov	r0, r4
 801b6c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c4:	2301      	movs	r3, #1
 801b6c6:	2207      	movs	r2, #7
 801b6c8:	f002 be8a 	b.w	801e3e0 <SecurityManagerChannelWrite>

Disassembly of section i.BuildAndSendPairingRandom:

0801b6cc <BuildAndSendPairingRandom>:
 801b6cc:	b570      	push	{r4, r5, r6, lr}
 801b6ce:	4604      	mov	r4, r0
 801b6d0:	2004      	movs	r0, #4
 801b6d2:	460d      	mov	r5, r1
 801b6d4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 801b6d8:	69c9      	ldr	r1, [r1, #28]
 801b6da:	2210      	movs	r2, #16
 801b6dc:	f104 0029 	add.w	r0, r4, #41	; 0x29
 801b6e0:	3132      	adds	r1, #50	; 0x32
 801b6e2:	f7f8 fb4e 	bl	8013d82 <__aeabi_memcpy>
 801b6e6:	4629      	mov	r1, r5
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	2211      	movs	r2, #17
 801b6f2:	f002 be75 	b.w	801e3e0 <SecurityManagerChannelWrite>

Disassembly of section i.BuildAndSendSlaveSecurityRequestPDU:

0801b6f6 <BuildAndSendSlaveSecurityRequestPDU>:
 801b6f6:	b430      	push	{r4, r5}
 801b6f8:	240b      	movs	r4, #11
 801b6fa:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 801b6fe:	2400      	movs	r4, #0
 801b700:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 801b704:	2a01      	cmp	r2, #1
 801b706:	d101      	bne.n	801b70c <BuildAndSendSlaveSecurityRequestPDU+0x16>
 801b708:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
 801b70c:	f890 2029 	ldrb.w	r2, [r0, #41]	; 0x29
 801b710:	b113      	cbz	r3, 801b718 <BuildAndSendSlaveSecurityRequestPDU+0x22>
 801b712:	f042 0204 	orr.w	r2, r2, #4
 801b716:	e001      	b.n	801b71c <BuildAndSendSlaveSecurityRequestPDU+0x26>
 801b718:	f022 0204 	bic.w	r2, r2, #4
 801b71c:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
 801b720:	2301      	movs	r3, #1
 801b722:	bc30      	pop	{r4, r5}
 801b724:	2202      	movs	r2, #2
 801b726:	f002 be5b 	b.w	801e3e0 <SecurityManagerChannelWrite>

Disassembly of section i.BuildKeyDistributionField:

0801b72a <BuildKeyDistributionField>:
 801b72a:	b508      	push	{r3, lr}
 801b72c:	2100      	movs	r1, #0
 801b72e:	f88d 1000 	strb.w	r1, [sp]
 801b732:	7801      	ldrb	r1, [r0, #0]
 801b734:	b111      	cbz	r1, 801b73c <BuildKeyDistributionField+0x12>
 801b736:	2101      	movs	r1, #1
 801b738:	f88d 1000 	strb.w	r1, [sp]
 801b73c:	7841      	ldrb	r1, [r0, #1]
 801b73e:	b129      	cbz	r1, 801b74c <BuildKeyDistributionField+0x22>
 801b740:	f89d 1000 	ldrb.w	r1, [sp]
 801b744:	f041 0102 	orr.w	r1, r1, #2
 801b748:	f88d 1000 	strb.w	r1, [sp]
 801b74c:	7880      	ldrb	r0, [r0, #2]
 801b74e:	b128      	cbz	r0, 801b75c <BuildKeyDistributionField+0x32>
 801b750:	f89d 0000 	ldrb.w	r0, [sp]
 801b754:	f040 0004 	orr.w	r0, r0, #4
 801b758:	f88d 0000 	strb.w	r0, [sp]
 801b75c:	f89d 0000 	ldrb.w	r0, [sp]
 801b760:	bd08      	pop	{r3, pc}

Disassembly of section i.CheckRemoteConfirmValue:

0801b762 <CheckRemoteConfirmValue>:
 801b762:	b530      	push	{r4, r5, lr}
 801b764:	b08d      	sub	sp, #52	; 0x34
 801b766:	4605      	mov	r5, r0
 801b768:	aa04      	add	r2, sp, #16
 801b76a:	69cc      	ldr	r4, [r1, #28]
 801b76c:	f000 f9dd 	bl	801bb2a <FormatConfirmValueParameters>
 801b770:	f104 0042 	add.w	r0, r4, #66	; 0x42
 801b774:	9005      	str	r0, [sp, #20]
 801b776:	466a      	mov	r2, sp
 801b778:	a904      	add	r1, sp, #16
 801b77a:	4628      	mov	r0, r5
 801b77c:	f002 fd55 	bl	801e22a <SM_Confirm_Value_Generation>
 801b780:	2800      	cmp	r0, #0
 801b782:	d161      	bne.n	801b848 <CheckRemoteConfirmValue+0xe6>
 801b784:	f89d 1000 	ldrb.w	r1, [sp]
 801b788:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 801b78c:	4291      	cmp	r1, r2
 801b78e:	d159      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b790:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801b794:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 801b798:	4291      	cmp	r1, r2
 801b79a:	d153      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b79c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 801b7a0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801b7a4:	4291      	cmp	r1, r2
 801b7a6:	d14d      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7a8:	f89d 1003 	ldrb.w	r1, [sp, #3]
 801b7ac:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 801b7b0:	4291      	cmp	r1, r2
 801b7b2:	d147      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7b4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801b7b8:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801b7bc:	4291      	cmp	r1, r2
 801b7be:	d141      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7c0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801b7c4:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 801b7c8:	4291      	cmp	r1, r2
 801b7ca:	d13b      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7cc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 801b7d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b7d4:	4291      	cmp	r1, r2
 801b7d6:	d135      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801b7dc:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 801b7e0:	4291      	cmp	r1, r2
 801b7e2:	d12f      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7e4:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801b7e8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 801b7ec:	4291      	cmp	r1, r2
 801b7ee:	d129      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7f0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 801b7f4:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 801b7f8:	4291      	cmp	r1, r2
 801b7fa:	d123      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b7fc:	f89d 100a 	ldrb.w	r1, [sp, #10]
 801b800:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801b804:	4291      	cmp	r1, r2
 801b806:	d11d      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b808:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801b80c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801b810:	4291      	cmp	r1, r2
 801b812:	d117      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b814:	f89d 100c 	ldrb.w	r1, [sp, #12]
 801b818:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 801b81c:	4291      	cmp	r1, r2
 801b81e:	d111      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b820:	f89d 100d 	ldrb.w	r1, [sp, #13]
 801b824:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 801b828:	4291      	cmp	r1, r2
 801b82a:	d10b      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b82c:	f89d 100e 	ldrb.w	r1, [sp, #14]
 801b830:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 801b834:	4291      	cmp	r1, r2
 801b836:	d105      	bne.n	801b844 <CheckRemoteConfirmValue+0xe2>
 801b838:	f89d 100f 	ldrb.w	r1, [sp, #15]
 801b83c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801b840:	4291      	cmp	r1, r2
 801b842:	d001      	beq.n	801b848 <CheckRemoteConfirmValue+0xe6>
 801b844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b848:	b00d      	add	sp, #52	; 0x34
 801b84a:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.ConvertFromTwoBasebandSlots:

0801b84c <ConvertFromTwoBasebandSlots>:
 801b84c:	f241 3188 	movw	r1, #5000	; 0x1388
 801b850:	4348      	muls	r0, r1
 801b852:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801b856:	fbb0 f0f1 	udiv	r0, r0, r1
 801b85a:	210a      	movs	r1, #10
 801b85c:	1d40      	adds	r0, r0, #5
 801b85e:	fbb0 f0f1 	udiv	r0, r0, r1
 801b862:	4770      	bx	lr

Disassembly of section i.ConvertToBasebandSlots:

0801b864 <ConvertToBasebandSlots>:
 801b864:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 801b868:	4348      	muls	r0, r1
 801b86a:	1109      	asrs	r1, r1, #4
 801b86c:	fbb0 f0f1 	udiv	r0, r0, r1
 801b870:	210a      	movs	r1, #10
 801b872:	1d40      	adds	r0, r0, #5
 801b874:	fbb0 f0f1 	udiv	r0, r0, r1
 801b878:	4770      	bx	lr

Disassembly of section i.ConvertToTwoBasebandSlots:

0801b87a <ConvertToTwoBasebandSlots>:
 801b87a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 801b87e:	4348      	muls	r0, r1
 801b880:	10c9      	asrs	r1, r1, #3
 801b882:	fbb0 f0f1 	udiv	r0, r0, r1
 801b886:	210a      	movs	r1, #10
 801b888:	1d40      	adds	r0, r0, #5
 801b88a:	fbb0 f0f1 	udiv	r0, r0, r1
 801b88e:	4770      	bx	lr

Disassembly of section i.CountAdvertisingDataRecords:

0801b890 <CountAdvertisingDataRecords>:
 801b890:	b510      	push	{r4, lr}
 801b892:	0004      	movs	r4, r0
 801b894:	f04f 0000 	mov.w	r0, #0
 801b898:	4602      	mov	r2, r0
 801b89a:	d000      	beq.n	801b89e <CountAdvertisingDataRecords+0xe>
 801b89c:	b941      	cbnz	r1, 801b8b0 <CountAdvertisingDataRecords+0x20>
 801b89e:	bd10      	pop	{r4, pc}
 801b8a0:	5c8b      	ldrb	r3, [r1, r2]
 801b8a2:	1c52      	adds	r2, r2, #1
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d0fa      	beq.n	801b89e <CountAdvertisingDataRecords+0xe>
 801b8a8:	441a      	add	r2, r3
 801b8aa:	42a2      	cmp	r2, r4
 801b8ac:	d8f7      	bhi.n	801b89e <CountAdvertisingDataRecords+0xe>
 801b8ae:	1c40      	adds	r0, r0, #1
 801b8b0:	42a2      	cmp	r2, r4
 801b8b2:	d3f5      	bcc.n	801b8a0 <CountAdvertisingDataRecords+0x10>
 801b8b4:	bd10      	pop	{r4, pc}

Disassembly of section i.CreateCallbackInfoEntry:

0801b8b6 <CreateCallbackInfoEntry>:
 801b8b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8ba:	4681      	mov	r9, r0
 801b8bc:	461e      	mov	r6, r3
 801b8be:	4690      	mov	r8, r2
 801b8c0:	460f      	mov	r7, r1
 801b8c2:	2500      	movs	r5, #0
 801b8c4:	2010      	movs	r0, #16
 801b8c6:	f7f7 fd79 	bl	80133bc <BTPS_AllocateMemory>
 801b8ca:	0004      	movs	r4, r0
 801b8cc:	d010      	beq.n	801b8f0 <CreateCallbackInfoEntry+0x3a>
 801b8ce:	2000      	movs	r0, #0
 801b8d0:	e9c4 6002 	strd	r6, r0, [r4, #8]
 801b8d4:	e9c4 7800 	strd	r7, r8, [r4]
 801b8d8:	4601      	mov	r1, r0
 801b8da:	464b      	mov	r3, r9
 801b8dc:	220c      	movs	r2, #12
 801b8de:	2007      	movs	r0, #7
 801b8e0:	9400      	str	r4, [sp, #0]
 801b8e2:	f7fd f8e5 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 801b8e6:	0005      	movs	r5, r0
 801b8e8:	d102      	bne.n	801b8f0 <CreateCallbackInfoEntry+0x3a>
 801b8ea:	4620      	mov	r0, r4
 801b8ec:	f7f7 fd80 	bl	80133f0 <BTPS_FreeMemory>
 801b8f0:	4628      	mov	r0, r5
 801b8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i.DeleteCallbackInfoByType:

0801b8f6 <DeleteCallbackInfoByType>:
 801b8f6:	b51c      	push	{r2, r3, r4, lr}
 801b8f8:	230c      	movs	r3, #12
 801b8fa:	e9cd 0100 	strd	r0, r1, [sp]
 801b8fe:	2200      	movs	r2, #0
 801b900:	a901      	add	r1, sp, #4
 801b902:	2007      	movs	r0, #7
 801b904:	f7fd f93a 	bl	8018b7c <BSC_DeleteGenericListEntry>
 801b908:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.DeleteLELinkEntryConnection_Handle:

0801b90a <DeleteLELinkEntryConnection_Handle>:
 801b90a:	b503      	push	{r0, r1, lr}
 801b90c:	b081      	sub	sp, #4
 801b90e:	232c      	movs	r3, #44	; 0x2c
 801b910:	9000      	str	r0, [sp, #0]
 801b912:	2200      	movs	r2, #0
 801b914:	a902      	add	r1, sp, #8
 801b916:	2003      	movs	r0, #3
 801b918:	f7fd f930 	bl	8018b7c <BSC_DeleteGenericListEntry>
 801b91c:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DeterminePairingAlgorithm:

0801b920 <DeterminePairingAlgorithm>:
 801b920:	b530      	push	{r4, r5, lr}
 801b922:	b087      	sub	sp, #28
 801b924:	460c      	mov	r4, r1
 801b926:	4605      	mov	r5, r0
 801b928:	f101 0214 	add.w	r2, r1, #20
 801b92c:	7f00      	ldrb	r0, [r0, #28]
 801b92e:	466b      	mov	r3, sp
 801b930:	2107      	movs	r1, #7
 801b932:	f002 fb61 	bl	801dff8 <ParsePairingPDU>
 801b936:	2800      	cmp	r0, #0
 801b938:	d120      	bne.n	801b97c <DeterminePairingAlgorithm+0x5c>
 801b93a:	7f28      	ldrb	r0, [r5, #28]
 801b93c:	ab03      	add	r3, sp, #12
 801b93e:	f104 021b 	add.w	r2, r4, #27
 801b942:	2107      	movs	r1, #7
 801b944:	f002 fb58 	bl	801dff8 <ParsePairingPDU>
 801b948:	2800      	cmp	r0, #0
 801b94a:	d117      	bne.n	801b97c <DeterminePairingAlgorithm+0x5c>
 801b94c:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801b950:	b121      	cbz	r1, 801b95c <DeterminePairingAlgorithm+0x3c>
 801b952:	f89d 100d 	ldrb.w	r1, [sp, #13]
 801b956:	b109      	cbz	r1, 801b95c <DeterminePairingAlgorithm+0x3c>
 801b958:	2110      	movs	r1, #16
 801b95a:	e00e      	b.n	801b97a <DeterminePairingAlgorithm+0x5a>
 801b95c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 801b960:	b911      	cbnz	r1, 801b968 <DeterminePairingAlgorithm+0x48>
 801b962:	f89d 100f 	ldrb.w	r1, [sp, #15]
 801b966:	b141      	cbz	r1, 801b97a <DeterminePairingAlgorithm+0x5a>
 801b968:	f89d 100c 	ldrb.w	r1, [sp, #12]
 801b96c:	4b04      	ldr	r3, [pc, #16]	; (801b980 <DeterminePairingAlgorithm+0x60>)
 801b96e:	f89d 2000 	ldrb.w	r2, [sp]
 801b972:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b976:	4419      	add	r1, r3
 801b978:	5c51      	ldrb	r1, [r2, r1]
 801b97a:	71a1      	strb	r1, [r4, #6]
 801b97c:	b007      	add	sp, #28
 801b97e:	bd30      	pop	{r4, r5, pc}
 801b980:	0803974e 	.word	0x0803974e

Disassembly of section i.DispatchAuthenticationCallback:

0801b984 <DispatchAuthenticationCallback>:
 801b984:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801b988:	001c      	movs	r4, r3
 801b98a:	4615      	mov	r5, r2
 801b98c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801b990:	460e      	mov	r6, r1
 801b992:	4607      	mov	r7, r0
 801b994:	d018      	beq.n	801b9c8 <DispatchAuthenticationCallback+0x44>
 801b996:	b92b      	cbnz	r3, 801b9a4 <DispatchAuthenticationCallback+0x20>
 801b998:	f7ff fc81 	bl	801b29e <AcquirePairingCallbackInformation>
 801b99c:	2800      	cmp	r0, #0
 801b99e:	d013      	beq.n	801b9c8 <DispatchAuthenticationCallback+0x44>
 801b9a0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801b9a4:	2006      	movs	r0, #6
 801b9a6:	f88d 0000 	strb.w	r0, [sp]
 801b9aa:	2024      	movs	r0, #36	; 0x24
 801b9ac:	f8ad 0002 	strh.w	r0, [sp, #2]
 801b9b0:	9401      	str	r4, [sp, #4]
 801b9b2:	7025      	strb	r5, [r4, #0]
 801b9b4:	f856 0f09 	ldr.w	r0, [r6, #9]!
 801b9b8:	f8c4 0001 	str.w	r0, [r4, #1]
 801b9bc:	88b0      	ldrh	r0, [r6, #4]
 801b9be:	f8a4 0005 	strh.w	r0, [r4, #5]
 801b9c2:	4669      	mov	r1, sp
 801b9c4:	6838      	ldr	r0, [r7, #0]
 801b9c6:	4798      	blx	r3
 801b9c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.DispatchDisconnectionCompleteCallback:

0801b9cc <DispatchDisconnectionCompleteCallback>:
 801b9cc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801b9d0:	461e      	mov	r6, r3
 801b9d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b9d6:	0014      	movs	r4, r2
 801b9d8:	460d      	mov	r5, r1
 801b9da:	4607      	mov	r7, r0
 801b9dc:	d020      	beq.n	801ba20 <DispatchDisconnectionCompleteCallback+0x54>
 801b9de:	2104      	movs	r1, #4
 801b9e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b9e4:	f002 fce0 	bl	801e3a8 <SearchCallbackInfoByType>
 801b9e8:	2800      	cmp	r0, #0
 801b9ea:	d019      	beq.n	801ba20 <DispatchDisconnectionCompleteCallback+0x54>
 801b9ec:	2103      	movs	r1, #3
 801b9ee:	f88d 1000 	strb.w	r1, [sp]
 801b9f2:	2109      	movs	r1, #9
 801b9f4:	f8ad 1002 	strh.w	r1, [sp, #2]
 801b9f8:	9401      	str	r4, [sp, #4]
 801b9fa:	7a29      	ldrb	r1, [r5, #8]
 801b9fc:	70a1      	strb	r1, [r4, #2]
 801b9fe:	f8d5 1009 	ldr.w	r1, [r5, #9]
 801ba02:	f8c4 1003 	str.w	r1, [r4, #3]
 801ba06:	f8b5 100d 	ldrh.w	r1, [r5, #13]
 801ba0a:	f8a4 1007 	strh.w	r1, [r4, #7]
 801ba0e:	7026      	strb	r6, [r4, #0]
 801ba10:	f884 8001 	strb.w	r8, [r4, #1]
 801ba14:	683c      	ldr	r4, [r7, #0]
 801ba16:	6882      	ldr	r2, [r0, #8]
 801ba18:	6843      	ldr	r3, [r0, #4]
 801ba1a:	4669      	mov	r1, sp
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	4798      	blx	r3
 801ba20:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.DispatchPairingStatusCallback:

0801ba24 <DispatchPairingStatusCallback>:
 801ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba28:	4680      	mov	r8, r0
 801ba2a:	69c8      	ldr	r0, [r1, #28]
 801ba2c:	b08c      	sub	sp, #48	; 0x30
 801ba2e:	4615      	mov	r5, r2
 801ba30:	460c      	mov	r4, r1
 801ba32:	2800      	cmp	r0, #0
 801ba34:	d02a      	beq.n	801ba8c <DispatchPairingStatusCallback+0x68>
 801ba36:	4640      	mov	r0, r8
 801ba38:	f7ff fc31 	bl	801b29e <AcquirePairingCallbackInformation>
 801ba3c:	2800      	cmp	r0, #0
 801ba3e:	d025      	beq.n	801ba8c <DispatchPairingStatusCallback+0x68>
 801ba40:	e9d0 6701 	ldrd	r6, r7, [r0, #4]
 801ba44:	69e0      	ldr	r0, [r4, #28]
 801ba46:	6801      	ldr	r1, [r0, #0]
 801ba48:	b119      	cbz	r1, 801ba52 <DispatchPairingStatusCallback+0x2e>
 801ba4a:	f8d8 0000 	ldr.w	r0, [r8]
 801ba4e:	f7fd ff21 	bl	8019894 <BTPS_StopTimer>
 801ba52:	2224      	movs	r2, #36	; 0x24
 801ba54:	2100      	movs	r1, #0
 801ba56:	a802      	add	r0, sp, #8
 801ba58:	f7f7 fd31 	bl	80134be <BTPS_MemInitialize>
 801ba5c:	f88d 5011 	strb.w	r5, [sp, #17]
 801ba60:	b94d      	cbnz	r5, 801ba76 <DispatchPairingStatusCallback+0x52>
 801ba62:	69e0      	ldr	r0, [r4, #28]
 801ba64:	7940      	ldrb	r0, [r0, #5]
 801ba66:	f3c0 0040 	ubfx	r0, r0, #1, #1
 801ba6a:	f88d 0010 	strb.w	r0, [sp, #16]
 801ba6e:	69e0      	ldr	r0, [r4, #28]
 801ba70:	7cc0      	ldrb	r0, [r0, #19]
 801ba72:	f88d 0012 	strb.w	r0, [sp, #18]
 801ba76:	4620      	mov	r0, r4
 801ba78:	f000 f8aa 	bl	801bbd0 <FreeSecurityManagerResources>
 801ba7c:	ab02      	add	r3, sp, #8
 801ba7e:	2204      	movs	r2, #4
 801ba80:	4621      	mov	r1, r4
 801ba82:	4640      	mov	r0, r8
 801ba84:	e9cd 6700 	strd	r6, r7, [sp]
 801ba88:	f7ff ff7c 	bl	801b984 <DispatchAuthenticationCallback>
 801ba8c:	b00c      	add	sp, #48	; 0x30
 801ba8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.DispatchSecurityEstablishmentCallback:

0801ba92 <DispatchSecurityEstablishmentCallback>:
 801ba92:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801ba96:	4680      	mov	r8, r0
 801ba98:	6848      	ldr	r0, [r1, #4]
 801ba9a:	460c      	mov	r4, r1
 801ba9c:	f020 0001 	bic.w	r0, r0, #1
 801baa0:	6048      	str	r0, [r1, #4]
 801baa2:	6989      	ldr	r1, [r1, #24]
 801baa4:	461f      	mov	r7, r3
 801baa6:	4616      	mov	r6, r2
 801baa8:	b129      	cbz	r1, 801bab6 <DispatchSecurityEstablishmentCallback+0x24>
 801baaa:	f8d8 0000 	ldr.w	r0, [r8]
 801baae:	f7fd fef1 	bl	8019894 <BTPS_StopTimer>
 801bab2:	2000      	movs	r0, #0
 801bab4:	61a0      	str	r0, [r4, #24]
 801bab6:	2107      	movs	r1, #7
 801bab8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801babc:	f7ff ff1b 	bl	801b8f6 <DeleteCallbackInfoByType>
 801bac0:	0005      	movs	r5, r0
 801bac2:	d00f      	beq.n	801bae4 <DispatchSecurityEstablishmentCallback+0x52>
 801bac4:	7237      	strb	r7, [r6, #8]
 801bac6:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 801baca:	e9cd 0100 	strd	r0, r1, [sp]
 801bace:	4633      	mov	r3, r6
 801bad0:	220b      	movs	r2, #11
 801bad2:	4621      	mov	r1, r4
 801bad4:	4640      	mov	r0, r8
 801bad6:	f7ff ff55 	bl	801b984 <DispatchAuthenticationCallback>
 801bada:	4628      	mov	r0, r5
 801badc:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801bae0:	f7fd b8f9 	b.w	8018cd6 <BSC_FreeGenericListEntryMemory>
 801bae4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.DivMaskGeneration:

0801bae8 <DivMaskGeneration>:
 801bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801baec:	4604      	mov	r4, r0
 801baee:	4690      	mov	r8, r2
 801baf0:	460f      	mov	r7, r1
 801baf2:	3044      	adds	r0, #68	; 0x44
 801baf4:	461d      	mov	r5, r3
 801baf6:	2210      	movs	r2, #16
 801baf8:	2100      	movs	r1, #0
 801bafa:	4606      	mov	r6, r0
 801bafc:	f7f7 fcdf 	bl	80134be <BTPS_MemInitialize>
 801bb00:	2208      	movs	r2, #8
 801bb02:	4641      	mov	r1, r8
 801bb04:	4630      	mov	r0, r6
 801bb06:	f7f7 fcd6 	bl	80134b6 <BTPS_MemCopy>
 801bb0a:	4633      	mov	r3, r6
 801bb0c:	461a      	mov	r2, r3
 801bb0e:	4639      	mov	r1, r7
 801bb10:	6820      	ldr	r0, [r4, #0]
 801bb12:	f004 fcbb 	bl	802048c <_HCI_LE_Encrypt>
 801bb16:	0001      	movs	r1, r0
 801bb18:	d104      	bne.n	801bb24 <DivMaskGeneration+0x3c>
 801bb1a:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
 801bb1e:	7028      	strb	r0, [r5, #0]
 801bb20:	0a00      	lsrs	r0, r0, #8
 801bb22:	7068      	strb	r0, [r5, #1]
 801bb24:	4608      	mov	r0, r1
 801bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FormatConfirmValueParameters:

0801bb2a <FormatConfirmValueParameters>:
 801bb2a:	b510      	push	{r4, lr}
 801bb2c:	69cb      	ldr	r3, [r1, #28]
 801bb2e:	f103 0462 	add.w	r4, r3, #98	; 0x62
 801bb32:	6014      	str	r4, [r2, #0]
 801bb34:	3c30      	subs	r4, #48	; 0x30
 801bb36:	6054      	str	r4, [r2, #4]
 801bb38:	3c1e      	subs	r4, #30
 801bb3a:	331b      	adds	r3, #27
 801bb3c:	e9c2 4302 	strd	r4, r3, [r2, #8]
 801bb40:	7f04      	ldrb	r4, [r0, #28]
 801bb42:	f101 0310 	add.w	r3, r1, #16
 801bb46:	1fd8      	subs	r0, r3, #7
 801bb48:	2c02      	cmp	r4, #2
 801bb4a:	d006      	beq.n	801bb5a <FormatConfirmValueParameters+0x30>
 801bb4c:	7a0c      	ldrb	r4, [r1, #8]
 801bb4e:	7414      	strb	r4, [r2, #16]
 801bb50:	6150      	str	r0, [r2, #20]
 801bb52:	7bc8      	ldrb	r0, [r1, #15]
 801bb54:	7610      	strb	r0, [r2, #24]
 801bb56:	61d3      	str	r3, [r2, #28]
 801bb58:	bd10      	pop	{r4, pc}
 801bb5a:	7bcc      	ldrb	r4, [r1, #15]
 801bb5c:	7414      	strb	r4, [r2, #16]
 801bb5e:	6153      	str	r3, [r2, #20]
 801bb60:	7a09      	ldrb	r1, [r1, #8]
 801bb62:	7611      	strb	r1, [r2, #24]
 801bb64:	61d0      	str	r0, [r2, #28]
 801bb66:	bd10      	pop	{r4, pc}

Disassembly of section i.FormatConnectionParametersFromHCI:

0801bb68 <FormatConnectionParametersFromHCI>:
 801bb68:	b570      	push	{r4, r5, r6, lr}
 801bb6a:	4604      	mov	r4, r0
 801bb6c:	461d      	mov	r5, r3
 801bb6e:	4616      	mov	r6, r2
 801bb70:	4608      	mov	r0, r1
 801bb72:	f7ff fe6b 	bl	801b84c <ConvertFromTwoBasebandSlots>
 801bb76:	8020      	strh	r0, [r4, #0]
 801bb78:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 801bb7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bb80:	8066      	strh	r6, [r4, #2]
 801bb82:	ea01 0040 	and.w	r0, r1, r0, lsl #1
 801bb86:	80a0      	strh	r0, [r4, #4]
 801bb88:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FreeCallbackInfoList:

0801bb8a <FreeCallbackInfoList>:
 801bb8a:	210c      	movs	r1, #12
 801bb8c:	f7fd b894 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.FreeLELinkEntryMemory:

0801bb90 <FreeLELinkEntryMemory>:
 801bb90:	b510      	push	{r4, lr}
 801bb92:	0004      	movs	r4, r0
 801bb94:	d00d      	beq.n	801bbb2 <FreeLELinkEntryMemory+0x22>
 801bb96:	69e0      	ldr	r0, [r4, #28]
 801bb98:	b110      	cbz	r0, 801bba0 <FreeLELinkEntryMemory+0x10>
 801bb9a:	4620      	mov	r0, r4
 801bb9c:	f000 f818 	bl	801bbd0 <FreeSecurityManagerResources>
 801bba0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801bba4:	f7ff fff1 	bl	801bb8a <FreeCallbackInfoList>
 801bba8:	4620      	mov	r0, r4
 801bbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbae:	f7f7 bc1f 	b.w	80133f0 <BTPS_FreeMemory>
 801bbb2:	bd10      	pop	{r4, pc}

Disassembly of section i.FreeLELinkList:

0801bbb4 <FreeLELinkList>:
 801bbb4:	b570      	push	{r4, r5, r6, lr}
 801bbb6:	0005      	movs	r5, r0
 801bbb8:	d009      	beq.n	801bbce <FreeLELinkList+0x1a>
 801bbba:	682c      	ldr	r4, [r5, #0]
 801bbbc:	e003      	b.n	801bbc6 <FreeLELinkList+0x12>
 801bbbe:	4620      	mov	r0, r4
 801bbc0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 801bbc2:	f7ff ffe5 	bl	801bb90 <FreeLELinkEntryMemory>
 801bbc6:	2c00      	cmp	r4, #0
 801bbc8:	d1f9      	bne.n	801bbbe <FreeLELinkList+0xa>
 801bbca:	2000      	movs	r0, #0
 801bbcc:	6028      	str	r0, [r5, #0]
 801bbce:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FreeSecurityManagerResources:

0801bbd0 <FreeSecurityManagerResources>:
 801bbd0:	b570      	push	{r4, r5, r6, lr}
 801bbd2:	4604      	mov	r4, r0
 801bbd4:	69c0      	ldr	r0, [r0, #28]
 801bbd6:	2800      	cmp	r0, #0
 801bbd8:	d013      	beq.n	801bc02 <FreeSecurityManagerResources+0x32>
 801bbda:	2106      	movs	r1, #6
 801bbdc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801bbe0:	f7ff fe89 	bl	801b8f6 <DeleteCallbackInfoByType>
 801bbe4:	b108      	cbz	r0, 801bbea <FreeSecurityManagerResources+0x1a>
 801bbe6:	f7fd f876 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801bbea:	69e0      	ldr	r0, [r4, #28]
 801bbec:	2500      	movs	r5, #0
 801bbee:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801bbf0:	b118      	cbz	r0, 801bbfa <FreeSecurityManagerResources+0x2a>
 801bbf2:	f7f7 fbfd 	bl	80133f0 <BTPS_FreeMemory>
 801bbf6:	69e0      	ldr	r0, [r4, #28]
 801bbf8:	6745      	str	r5, [r0, #116]	; 0x74
 801bbfa:	69e0      	ldr	r0, [r4, #28]
 801bbfc:	f7f7 fbf8 	bl	80133f0 <BTPS_FreeMemory>
 801bc00:	61e5      	str	r5, [r4, #28]
 801bc02:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.GAPLEConnectionUpdateIndicationEventHandler:

0801bc04 <GAPLEConnectionUpdateIndicationEventHandler>:
 801bc04:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801bc08:	4615      	mov	r5, r2
 801bc0a:	000c      	movs	r4, r1
 801bc0c:	4607      	mov	r7, r0
 801bc0e:	d04b      	beq.n	801bca8 <GAPLEConnectionUpdateIndicationEventHandler+0xa4>
 801bc10:	8939      	ldrh	r1, [r7, #8]
 801bc12:	8820      	ldrh	r0, [r4, #0]
 801bc14:	b289      	uxth	r1, r1
 801bc16:	4288      	cmp	r0, r1
 801bc18:	d146      	bne.n	801bca8 <GAPLEConnectionUpdateIndicationEventHandler+0xa4>
 801bc1a:	1ca1      	adds	r1, r4, #2
 801bc1c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 801bc20:	f002 fbcc 	bl	801e3bc <SearchLELinkEntryBD_ADDR>
 801bc24:	0006      	movs	r6, r0
 801bc26:	d03f      	beq.n	801bca8 <GAPLEConnectionUpdateIndicationEventHandler+0xa4>
 801bc28:	f8d6 0009 	ldr.w	r0, [r6, #9]
 801bc2c:	6028      	str	r0, [r5, #0]
 801bc2e:	f8b6 000d 	ldrh.w	r0, [r6, #13]
 801bc32:	80a8      	strh	r0, [r5, #4]
 801bc34:	8920      	ldrh	r0, [r4, #8]
 801bc36:	f640 427a 	movw	r2, #3194	; 0xc7a
 801bc3a:	1f81      	subs	r1, r0, #6
 801bc3c:	4291      	cmp	r1, r2
 801bc3e:	d835      	bhi.n	801bcac <GAPLEConnectionUpdateIndicationEventHandler+0xa8>
 801bc40:	8961      	ldrh	r1, [r4, #10]
 801bc42:	2906      	cmp	r1, #6
 801bc44:	d332      	bcc.n	801bcac <GAPLEConnectionUpdateIndicationEventHandler+0xa8>
 801bc46:	1d92      	adds	r2, r2, #6
 801bc48:	4291      	cmp	r1, r2
 801bc4a:	d82f      	bhi.n	801bcac <GAPLEConnectionUpdateIndicationEventHandler+0xa8>
 801bc4c:	89a1      	ldrh	r1, [r4, #12]
 801bc4e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 801bc52:	d82b      	bhi.n	801bcac <GAPLEConnectionUpdateIndicationEventHandler+0xa8>
 801bc54:	89e1      	ldrh	r1, [r4, #14]
 801bc56:	290a      	cmp	r1, #10
 801bc58:	d328      	bcc.n	801bcac <GAPLEConnectionUpdateIndicationEventHandler+0xa8>
 801bc5a:	4291      	cmp	r1, r2
 801bc5c:	d826      	bhi.n	801bcac <GAPLEConnectionUpdateIndicationEventHandler+0xa8>
 801bc5e:	f7ff fdf5 	bl	801b84c <ConvertFromTwoBasebandSlots>
 801bc62:	80e8      	strh	r0, [r5, #6]
 801bc64:	8960      	ldrh	r0, [r4, #10]
 801bc66:	f7ff fdf1 	bl	801b84c <ConvertFromTwoBasebandSlots>
 801bc6a:	8128      	strh	r0, [r5, #8]
 801bc6c:	89a0      	ldrh	r0, [r4, #12]
 801bc6e:	8168      	strh	r0, [r5, #10]
 801bc70:	89e0      	ldrh	r0, [r4, #14]
 801bc72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bc76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bc7a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
 801bc7e:	81a8      	strh	r0, [r5, #12]
 801bc80:	2007      	movs	r0, #7
 801bc82:	f88d 0000 	strb.w	r0, [sp]
 801bc86:	200e      	movs	r0, #14
 801bc88:	f8ad 0002 	strh.w	r0, [sp, #2]
 801bc8c:	2104      	movs	r1, #4
 801bc8e:	f106 0028 	add.w	r0, r6, #40	; 0x28
 801bc92:	9501      	str	r5, [sp, #4]
 801bc94:	f002 fb88 	bl	801e3a8 <SearchCallbackInfoByType>
 801bc98:	2800      	cmp	r0, #0
 801bc9a:	d005      	beq.n	801bca8 <GAPLEConnectionUpdateIndicationEventHandler+0xa4>
 801bc9c:	683c      	ldr	r4, [r7, #0]
 801bc9e:	6882      	ldr	r2, [r0, #8]
 801bca0:	6843      	ldr	r3, [r0, #4]
 801bca2:	4669      	mov	r1, sp
 801bca4:	4620      	mov	r0, r4
 801bca6:	4798      	blx	r3
 801bca8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 801bcac:	8831      	ldrh	r1, [r6, #0]
 801bcae:	2201      	movs	r2, #1
 801bcb0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801bcb2:	f007 ffe5 	bl	8023c80 <_L2CA_Connection_Parameter_Update_Response>
 801bcb6:	e7f7      	b.n	801bca8 <GAPLEConnectionUpdateIndicationEventHandler+0xa4>

Disassembly of section i.GAPLEScanningEventHandler:

0801bcb8 <GAPLEScanningEventHandler>:
 801bcb8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcbc:	b081      	sub	sp, #4
 801bcbe:	461c      	mov	r4, r3
 801bcc0:	9801      	ldr	r0, [sp, #4]
 801bcc2:	2102      	movs	r1, #2
 801bcc4:	3054      	adds	r0, #84	; 0x54
 801bcc6:	f002 fb6f 	bl	801e3a8 <SearchCallbackInfoByType>
 801bcca:	9000      	str	r0, [sp, #0]
 801bccc:	2800      	cmp	r0, #0
 801bcce:	d073      	beq.n	801bdb8 <GAPLEScanningEventHandler+0x100>
 801bcd0:	9802      	ldr	r0, [sp, #8]
 801bcd2:	7800      	ldrb	r0, [r0, #0]
 801bcd4:	6020      	str	r0, [r4, #0]
 801bcd6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801bcda:	0080      	lsls	r0, r0, #2
 801bcdc:	f7f7 fb6e 	bl	80133bc <BTPS_AllocateMemory>
 801bce0:	6060      	str	r0, [r4, #4]
 801bce2:	2800      	cmp	r0, #0
 801bce4:	d068      	beq.n	801bdb8 <GAPLEScanningEventHandler+0x100>
 801bce6:	9903      	ldr	r1, [sp, #12]
 801bce8:	f04f 0801 	mov.w	r8, #1
 801bcec:	f881 8000 	strb.w	r8, [r1]
 801bcf0:	8820      	ldrh	r0, [r4, #0]
 801bcf2:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 801bcf6:	2008      	movs	r0, #8
 801bcf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801bcfc:	9903      	ldr	r1, [sp, #12]
 801bcfe:	2500      	movs	r5, #0
 801bd00:	8048      	strh	r0, [r1, #2]
 801bd02:	9803      	ldr	r0, [sp, #12]
 801bd04:	6044      	str	r4, [r0, #4]
 801bd06:	e063      	b.n	801bdd0 <GAPLEScanningEventHandler+0x118>
 801bd08:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
 801bd0c:	eb00 1145 	add.w	r1, r0, r5, lsl #5
 801bd10:	9802      	ldr	r0, [sp, #8]
 801bd12:	180f      	adds	r7, r1, r0
 801bd14:	78b8      	ldrb	r0, [r7, #2]
 801bd16:	b3e0      	cbz	r0, 801bd92 <GAPLEScanningEventHandler+0xda>
 801bd18:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 801bd1c:	6861      	ldr	r1, [r4, #4]
 801bd1e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 801bd22:	f801 8002 	strb.w	r8, [r1, r2]
 801bd26:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 801bd2a:	2002      	movs	r0, #2
 801bd2c:	6861      	ldr	r1, [r4, #4]
 801bd2e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 801bd32:	4408      	add	r0, r1
 801bd34:	f8d7 1003 	ldr.w	r1, [r7, #3]
 801bd38:	6001      	str	r1, [r0, #0]
 801bd3a:	f8b7 1007 	ldrh.w	r1, [r7, #7]
 801bd3e:	8081      	strh	r1, [r0, #4]
 801bd40:	2008      	movs	r0, #8
 801bd42:	6862      	ldr	r2, [r4, #4]
 801bd44:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 801bd48:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 801bd4c:	5411      	strb	r1, [r2, r0]
 801bd4e:	2014      	movs	r0, #20
 801bd50:	6862      	ldr	r2, [r4, #4]
 801bd52:	eb00 0b86 	add.w	fp, r0, r6, lsl #2
 801bd56:	7a79      	ldrb	r1, [r7, #9]
 801bd58:	f802 100b 	strb.w	r1, [r2, fp]
 801bd5c:	2118      	movs	r1, #24
 801bd5e:	6862      	ldr	r2, [r4, #4]
 801bd60:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
 801bd64:	f107 000a 	add.w	r0, r7, #10
 801bd68:	f842 000a 	str.w	r0, [r2, sl]
 801bd6c:	200c      	movs	r0, #12
 801bd6e:	6862      	ldr	r2, [r4, #4]
 801bd70:	eb00 0986 	add.w	r9, r0, r6, lsl #2
 801bd74:	eb02 0009 	add.w	r0, r2, r9
 801bd78:	2208      	movs	r2, #8
 801bd7a:	2100      	movs	r1, #0
 801bd7c:	f7f7 fb9f 	bl	80134be <BTPS_MemInitialize>
 801bd80:	6860      	ldr	r0, [r4, #4]
 801bd82:	2301      	movs	r3, #1
 801bd84:	eb00 0209 	add.w	r2, r0, r9
 801bd88:	f850 100a 	ldr.w	r1, [r0, sl]
 801bd8c:	f810 000b 	ldrb.w	r0, [r0, fp]
 801bd90:	e000      	b.n	801bd94 <GAPLEScanningEventHandler+0xdc>
 801bd92:	e009      	b.n	801bda8 <GAPLEScanningEventHandler+0xf0>
 801bd94:	f002 f899 	bl	801deca <ParseAdvertisingDataRecords>
 801bd98:	7878      	ldrb	r0, [r7, #1]
 801bd9a:	2805      	cmp	r0, #5
 801bd9c:	d227      	bcs.n	801bdee <GAPLEScanningEventHandler+0x136>
 801bd9e:	e8df f000 	tbb	[pc, r0]
 801bda2:	0e0c      	.short	0x0e0c
 801bda4:	00242612 	.word	0x00242612
 801bda8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 801bdac:	6862      	ldr	r2, [r4, #4]
 801bdae:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 801bdb2:	2000      	movs	r0, #0
 801bdb4:	5450      	strb	r0, [r2, r1]
 801bdb6:	e7b6      	b.n	801bd26 <GAPLEScanningEventHandler+0x6e>
 801bdb8:	e047      	b.n	801be4a <GAPLEScanningEventHandler+0x192>
 801bdba:	2000      	movs	r0, #0
 801bdbc:	e004      	b.n	801bdc8 <GAPLEScanningEventHandler+0x110>
 801bdbe:	6861      	ldr	r1, [r4, #4]
 801bdc0:	f801 8026 	strb.w	r8, [r1, r6, lsl #2]
 801bdc4:	e003      	b.n	801bdce <GAPLEScanningEventHandler+0x116>
 801bdc6:	2002      	movs	r0, #2
 801bdc8:	6861      	ldr	r1, [r4, #4]
 801bdca:	f801 0026 	strb.w	r0, [r1, r6, lsl #2]
 801bdce:	1c6d      	adds	r5, r5, #1
 801bdd0:	6820      	ldr	r0, [r4, #0]
 801bdd2:	42a8      	cmp	r0, r5
 801bdd4:	d898      	bhi.n	801bd08 <GAPLEScanningEventHandler+0x50>
 801bdd6:	9800      	ldr	r0, [sp, #0]
 801bdd8:	9900      	ldr	r1, [sp, #0]
 801bdda:	6882      	ldr	r2, [r0, #8]
 801bddc:	9801      	ldr	r0, [sp, #4]
 801bdde:	684b      	ldr	r3, [r1, #4]
 801bde0:	9903      	ldr	r1, [sp, #12]
 801bde2:	6800      	ldr	r0, [r0, #0]
 801bde4:	4798      	blx	r3
 801bde6:	2700      	movs	r7, #0
 801bde8:	e026      	b.n	801be38 <GAPLEScanningEventHandler+0x180>
 801bdea:	2004      	movs	r0, #4
 801bdec:	e7ec      	b.n	801bdc8 <GAPLEScanningEventHandler+0x110>
 801bdee:	2003      	movs	r0, #3
 801bdf0:	e7ea      	b.n	801bdc8 <GAPLEScanningEventHandler+0x110>
 801bdf2:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
 801bdf6:	200c      	movs	r0, #12
 801bdf8:	6861      	ldr	r1, [r4, #4]
 801bdfa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801bdfe:	180d      	adds	r5, r1, r0
 801be00:	6828      	ldr	r0, [r5, #0]
 801be02:	b1c0      	cbz	r0, 801be36 <GAPLEScanningEventHandler+0x17e>
 801be04:	6868      	ldr	r0, [r5, #4]
 801be06:	b1b0      	cbz	r0, 801be36 <GAPLEScanningEventHandler+0x17e>
 801be08:	2600      	movs	r6, #0
 801be0a:	f04f 0808 	mov.w	r8, #8
 801be0e:	e009      	b.n	801be24 <GAPLEScanningEventHandler+0x16c>
 801be10:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 801be14:	6869      	ldr	r1, [r5, #4]
 801be16:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 801be1a:	5808      	ldr	r0, [r1, r0]
 801be1c:	b108      	cbz	r0, 801be22 <GAPLEScanningEventHandler+0x16a>
 801be1e:	f7f7 fae7 	bl	80133f0 <BTPS_FreeMemory>
 801be22:	1c76      	adds	r6, r6, #1
 801be24:	6828      	ldr	r0, [r5, #0]
 801be26:	42b0      	cmp	r0, r6
 801be28:	d8f2      	bhi.n	801be10 <GAPLEScanningEventHandler+0x158>
 801be2a:	6868      	ldr	r0, [r5, #4]
 801be2c:	f7f7 fae0 	bl	80133f0 <BTPS_FreeMemory>
 801be30:	2000      	movs	r0, #0
 801be32:	6028      	str	r0, [r5, #0]
 801be34:	6068      	str	r0, [r5, #4]
 801be36:	1c7f      	adds	r7, r7, #1
 801be38:	6820      	ldr	r0, [r4, #0]
 801be3a:	42b8      	cmp	r0, r7
 801be3c:	d8d9      	bhi.n	801bdf2 <GAPLEScanningEventHandler+0x13a>
 801be3e:	6860      	ldr	r0, [r4, #4]
 801be40:	b005      	add	sp, #20
 801be42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be46:	f7f7 bad3 	b.w	80133f0 <BTPS_FreeMemory>
 801be4a:	b005      	add	sp, #20
 801be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.GAPLESecurityManagerMasterEventHandler:

0801be50 <GAPLESecurityManagerMasterEventHandler>:
 801be50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801be54:	b092      	sub	sp, #72	; 0x48
 801be56:	4606      	mov	r6, r0
 801be58:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801be5c:	2400      	movs	r4, #0
 801be5e:	461d      	mov	r5, r3
 801be60:	4617      	mov	r7, r2
 801be62:	280b      	cmp	r0, #11
 801be64:	d002      	beq.n	801be6c <GAPLESecurityManagerMasterEventHandler+0x1c>
 801be66:	69fc      	ldr	r4, [r7, #28]
 801be68:	2c00      	cmp	r4, #0
 801be6a:	d05b      	beq.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801be6c:	2d00      	cmp	r5, #0
 801be6e:	d059      	beq.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801be70:	2100      	movs	r1, #0
 801be72:	2802      	cmp	r0, #2
 801be74:	d017      	beq.n	801bea6 <GAPLESecurityManagerMasterEventHandler+0x56>
 801be76:	2804      	cmp	r0, #4
 801be78:	d065      	beq.n	801bf46 <GAPLESecurityManagerMasterEventHandler+0xf6>
 801be7a:	280b      	cmp	r0, #11
 801be7c:	d152      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801be7e:	8928      	ldrh	r0, [r5, #8]
 801be80:	2802      	cmp	r0, #2
 801be82:	d34f      	bcc.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801be84:	7f30      	ldrb	r0, [r6, #28]
 801be86:	2802      	cmp	r0, #2
 801be88:	d14c      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801be8a:	7938      	ldrb	r0, [r7, #4]
 801be8c:	07c0      	lsls	r0, r0, #31
 801be8e:	d149      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801be90:	68d8      	ldr	r0, [r3, #12]
 801be92:	f04f 0201 	mov.w	r2, #1
 801be96:	7840      	ldrb	r0, [r0, #1]
 801be98:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
 801be9c:	07c3      	lsls	r3, r0, #31
 801be9e:	d079      	beq.n	801bf94 <GAPLESecurityManagerMasterEventHandler+0x144>
 801bea0:	f88d 2020 	strb.w	r2, [sp, #32]
 801bea4:	e078      	b.n	801bf98 <GAPLESecurityManagerMasterEventHandler+0x148>
 801bea6:	8928      	ldrh	r0, [r5, #8]
 801bea8:	2807      	cmp	r0, #7
 801beaa:	d33b      	bcc.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801beac:	7f30      	ldrb	r0, [r6, #28]
 801beae:	2802      	cmp	r0, #2
 801beb0:	d138      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801beb2:	4688      	mov	r8, r1
 801beb4:	7121      	strb	r1, [r4, #4]
 801beb6:	6821      	ldr	r1, [r4, #0]
 801beb8:	b121      	cbz	r1, 801bec4 <GAPLESecurityManagerMasterEventHandler+0x74>
 801beba:	6830      	ldr	r0, [r6, #0]
 801bebc:	f7fd fcea 	bl	8019894 <BTPS_StopTimer>
 801bec0:	f8c4 8000 	str.w	r8, [r4]
 801bec4:	8929      	ldrh	r1, [r5, #8]
 801bec6:	ab0f      	add	r3, sp, #60	; 0x3c
 801bec8:	2002      	movs	r0, #2
 801beca:	68ea      	ldr	r2, [r5, #12]
 801becc:	f002 f894 	bl	801dff8 <ParsePairingPDU>
 801bed0:	2800      	cmp	r0, #0
 801bed2:	d127      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bed4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801bed8:	1fc1      	subs	r1, r0, #7
 801beda:	2909      	cmp	r1, #9
 801bedc:	d825      	bhi.n	801bf2a <GAPLESecurityManagerMasterEventHandler+0xda>
 801bede:	7ce1      	ldrb	r1, [r4, #19]
 801bee0:	4288      	cmp	r0, r1
 801bee2:	d200      	bcs.n	801bee6 <GAPLESecurityManagerMasterEventHandler+0x96>
 801bee4:	74e0      	strb	r0, [r4, #19]
 801bee6:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 801beea:	f8a4 000d 	strh.w	r0, [r4, #13]
 801beee:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
 801bef2:	73e0      	strb	r0, [r4, #15]
 801bef4:	f8bd 0041 	ldrh.w	r0, [sp, #65]	; 0x41
 801bef8:	8220      	strh	r0, [r4, #16]
 801befa:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
 801befe:	74a0      	strb	r0, [r4, #18]
 801bf00:	2207      	movs	r2, #7
 801bf02:	f104 001b 	add.w	r0, r4, #27
 801bf06:	68e9      	ldr	r1, [r5, #12]
 801bf08:	f7f7 fad5 	bl	80134b6 <BTPS_MemCopy>
 801bf0c:	8839      	ldrh	r1, [r7, #0]
 801bf0e:	f247 5330 	movw	r3, #30000	; 0x7530
 801bf12:	4a32      	ldr	r2, [pc, #200]	; (801bfdc <GAPLESecurityManagerMasterEventHandler+0x18c>)
 801bf14:	6830      	ldr	r0, [r6, #0]
 801bf16:	f7fd fc73 	bl	8019800 <BTPS_StartTimer>
 801bf1a:	6020      	str	r0, [r4, #0]
 801bf1c:	8839      	ldrh	r1, [r7, #0]
 801bf1e:	6830      	ldr	r0, [r6, #0]
 801bf20:	f002 f8be 	bl	801e0a0 <PasskeyEventDispatcher>
 801bf24:	b016      	add	sp, #88	; 0x58
 801bf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	2206      	movs	r2, #6
 801bf2e:	4639      	mov	r1, r7
 801bf30:	4630      	mov	r0, r6
 801bf32:	f7ff fb50 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801bf36:	2800      	cmp	r0, #0
 801bf38:	d1f4      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bf3a:	220d      	movs	r2, #13
 801bf3c:	4639      	mov	r1, r7
 801bf3e:	4630      	mov	r0, r6
 801bf40:	f7ff fd70 	bl	801ba24 <DispatchPairingStatusCallback>
 801bf44:	e7ee      	b.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bf46:	a802      	add	r0, sp, #8
 801bf48:	9000      	str	r0, [sp, #0]
 801bf4a:	f104 0332 	add.w	r3, r4, #50	; 0x32
 801bf4e:	f104 0242 	add.w	r2, r4, #66	; 0x42
 801bf52:	f104 0162 	add.w	r1, r4, #98	; 0x62
 801bf56:	4630      	mov	r0, r6
 801bf58:	f002 f9e3 	bl	801e322 <SM_Key_Generation>
 801bf5c:	2800      	cmp	r0, #0
 801bf5e:	d1e1      	bne.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bf60:	7ce2      	ldrb	r2, [r4, #19]
 801bf62:	2110      	movs	r1, #16
 801bf64:	a802      	add	r0, sp, #8
 801bf66:	f001 ff65 	bl	801de34 <MaskEncryptionKey>
 801bf6a:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801bf6e:	2210      	movs	r2, #16
 801bf70:	a902      	add	r1, sp, #8
 801bf72:	4604      	mov	r4, r0
 801bf74:	f7f7 ff05 	bl	8013d82 <__aeabi_memcpy>
 801bf78:	2208      	movs	r2, #8
 801bf7a:	2100      	movs	r1, #0
 801bf7c:	a802      	add	r0, sp, #8
 801bf7e:	f7f7 fa9e 	bl	80134be <BTPS_MemInitialize>
 801bf82:	9400      	str	r4, [sp, #0]
 801bf84:	2300      	movs	r3, #0
 801bf86:	8839      	ldrh	r1, [r7, #0]
 801bf88:	aa02      	add	r2, sp, #8
 801bf8a:	6830      	ldr	r0, [r6, #0]
 801bf8c:	f004 fc92 	bl	80208b4 <_HCI_LE_Start_Encryption>
 801bf90:	e7c8      	b.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bf92:	e7ff      	b.n	801bf94 <GAPLESecurityManagerMasterEventHandler+0x144>
 801bf94:	f88d 1020 	strb.w	r1, [sp, #32]
 801bf98:	0740      	lsls	r0, r0, #29
 801bf9a:	d502      	bpl.n	801bfa2 <GAPLESecurityManagerMasterEventHandler+0x152>
 801bf9c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801bfa0:	e001      	b.n	801bfa6 <GAPLESecurityManagerMasterEventHandler+0x156>
 801bfa2:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
 801bfa6:	7f70      	ldrb	r0, [r6, #29]
 801bfa8:	2801      	cmp	r0, #1
 801bfaa:	d10f      	bne.n	801bfcc <GAPLESecurityManagerMasterEventHandler+0x17c>
 801bfac:	4639      	mov	r1, r7
 801bfae:	4630      	mov	r0, r6
 801bfb0:	f7ff f975 	bl	801b29e <AcquirePairingCallbackInformation>
 801bfb4:	b150      	cbz	r0, 801bfcc <GAPLESecurityManagerMasterEventHandler+0x17c>
 801bfb6:	6881      	ldr	r1, [r0, #8]
 801bfb8:	6840      	ldr	r0, [r0, #4]
 801bfba:	e9cd 0100 	strd	r0, r1, [sp]
 801bfbe:	ab06      	add	r3, sp, #24
 801bfc0:	2201      	movs	r2, #1
 801bfc2:	4639      	mov	r1, r7
 801bfc4:	4630      	mov	r0, r6
 801bfc6:	f7ff fcdd 	bl	801b984 <DispatchAuthenticationCallback>
 801bfca:	e7ab      	b.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bfcc:	2301      	movs	r3, #1
 801bfce:	2205      	movs	r2, #5
 801bfd0:	4639      	mov	r1, r7
 801bfd2:	4630      	mov	r0, r6
 801bfd4:	f7ff faff 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801bfd8:	e7a4      	b.n	801bf24 <GAPLESecurityManagerMasterEventHandler+0xd4>
 801bfda:	0000      	.short	0x0000
 801bfdc:	0801e495 	.word	0x0801e495

Disassembly of section i.GAPLESecurityManagerSlaveEventHandler:

0801bfe0 <GAPLESecurityManagerSlaveEventHandler>:
 801bfe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bfe4:	b08f      	sub	sp, #60	; 0x3c
 801bfe6:	001f      	movs	r7, r3
 801bfe8:	4615      	mov	r5, r2
 801bfea:	4606      	mov	r6, r0
 801bfec:	d02a      	beq.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801bfee:	f247 5930 	movw	r9, #30000	; 0x7530
 801bff2:	2901      	cmp	r1, #1
 801bff4:	d029      	beq.n	801c04a <GAPLESecurityManagerSlaveEventHandler+0x6a>
 801bff6:	4611      	mov	r1, r2
 801bff8:	f7ff fb68 	bl	801b6cc <BuildAndSendPairingRandom>
 801bffc:	2800      	cmp	r0, #0
 801bffe:	d121      	bne.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c000:	69ec      	ldr	r4, [r5, #28]
 801c002:	2c00      	cmp	r4, #0
 801c004:	d01e      	beq.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c006:	8829      	ldrh	r1, [r5, #0]
 801c008:	464b      	mov	r3, r9
 801c00a:	4a42      	ldr	r2, [pc, #264]	; (801c114 <GAPLESecurityManagerSlaveEventHandler+0x134>)
 801c00c:	6830      	ldr	r0, [r6, #0]
 801c00e:	f7fd fbf7 	bl	8019800 <BTPS_StartTimer>
 801c012:	6020      	str	r0, [r4, #0]
 801c014:	a80b      	add	r0, sp, #44	; 0x2c
 801c016:	9000      	str	r0, [sp, #0]
 801c018:	f104 0342 	add.w	r3, r4, #66	; 0x42
 801c01c:	f104 0232 	add.w	r2, r4, #50	; 0x32
 801c020:	f104 0162 	add.w	r1, r4, #98	; 0x62
 801c024:	4630      	mov	r0, r6
 801c026:	f002 f97c 	bl	801e322 <SM_Key_Generation>
 801c02a:	2800      	cmp	r0, #0
 801c02c:	d10a      	bne.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c02e:	7ce2      	ldrb	r2, [r4, #19]
 801c030:	2110      	movs	r1, #16
 801c032:	a80b      	add	r0, sp, #44	; 0x2c
 801c034:	f001 fefe 	bl	801de34 <MaskEncryptionKey>
 801c038:	2210      	movs	r2, #16
 801c03a:	a90b      	add	r1, sp, #44	; 0x2c
 801c03c:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801c040:	f7f7 fe9f 	bl	8013d82 <__aeabi_memcpy>
 801c044:	b00f      	add	sp, #60	; 0x3c
 801c046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c04a:	8938      	ldrh	r0, [r7, #8]
 801c04c:	2807      	cmp	r0, #7
 801c04e:	d3f9      	bcc.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c050:	7f30      	ldrb	r0, [r6, #28]
 801c052:	2801      	cmp	r0, #1
 801c054:	d1f6      	bne.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c056:	7928      	ldrb	r0, [r5, #4]
 801c058:	07c0      	lsls	r0, r0, #31
 801c05a:	d005      	beq.n	801c068 <GAPLESecurityManagerSlaveEventHandler+0x88>
 801c05c:	2303      	movs	r3, #3
 801c05e:	aa02      	add	r2, sp, #8
 801c060:	4629      	mov	r1, r5
 801c062:	4630      	mov	r0, r6
 801c064:	f7ff fd15 	bl	801ba92 <DispatchSecurityEstablishmentCallback>
 801c068:	7f70      	ldrb	r0, [r6, #29]
 801c06a:	2801      	cmp	r0, #1
 801c06c:	d14e      	bne.n	801c10c <GAPLESecurityManagerSlaveEventHandler+0x12c>
 801c06e:	69e8      	ldr	r0, [r5, #28]
 801c070:	b920      	cbnz	r0, 801c07c <GAPLESecurityManagerSlaveEventHandler+0x9c>
 801c072:	2100      	movs	r1, #0
 801c074:	4628      	mov	r0, r5
 801c076:	f7ff f961 	bl	801b33c <AllocateSecurityManagerContext>
 801c07a:	b3e0      	cbz	r0, 801c0f6 <GAPLESecurityManagerSlaveEventHandler+0x116>
 801c07c:	4629      	mov	r1, r5
 801c07e:	4630      	mov	r0, r6
 801c080:	69ec      	ldr	r4, [r5, #28]
 801c082:	f7ff f90c 	bl	801b29e <AcquirePairingCallbackInformation>
 801c086:	ea5f 0800 	movs.w	r8, r0
 801c08a:	d03f      	beq.n	801c10c <GAPLESecurityManagerSlaveEventHandler+0x12c>
 801c08c:	2000      	movs	r0, #0
 801c08e:	7120      	strb	r0, [r4, #4]
 801c090:	8939      	ldrh	r1, [r7, #8]
 801c092:	ab04      	add	r3, sp, #16
 801c094:	2001      	movs	r0, #1
 801c096:	68fa      	ldr	r2, [r7, #12]
 801c098:	f001 ffae 	bl	801dff8 <ParsePairingPDU>
 801c09c:	2800      	cmp	r0, #0
 801c09e:	d1d1      	bne.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c0a0:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801c0a4:	1fc0      	subs	r0, r0, #7
 801c0a6:	2809      	cmp	r0, #9
 801c0a8:	d829      	bhi.n	801c0fe <GAPLESecurityManagerSlaveEventHandler+0x11e>
 801c0aa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801c0ae:	f8a4 0007 	strh.w	r0, [r4, #7]
 801c0b2:	f89d 001a 	ldrb.w	r0, [sp, #26]
 801c0b6:	7260      	strb	r0, [r4, #9]
 801c0b8:	f8bd 0015 	ldrh.w	r0, [sp, #21]
 801c0bc:	8160      	strh	r0, [r4, #10]
 801c0be:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801c0c2:	7320      	strb	r0, [r4, #12]
 801c0c4:	f89d 0014 	ldrb.w	r0, [sp, #20]
 801c0c8:	74e0      	strb	r0, [r4, #19]
 801c0ca:	2207      	movs	r2, #7
 801c0cc:	f104 0014 	add.w	r0, r4, #20
 801c0d0:	68f9      	ldr	r1, [r7, #12]
 801c0d2:	f7f7 f9f0 	bl	80134b6 <BTPS_MemCopy>
 801c0d6:	8829      	ldrh	r1, [r5, #0]
 801c0d8:	464b      	mov	r3, r9
 801c0da:	4a0e      	ldr	r2, [pc, #56]	; (801c114 <GAPLESecurityManagerSlaveEventHandler+0x134>)
 801c0dc:	6830      	ldr	r0, [r6, #0]
 801c0de:	f7fd fb8f 	bl	8019800 <BTPS_StartTimer>
 801c0e2:	6020      	str	r0, [r4, #0]
 801c0e4:	e9d8 0101 	ldrd	r0, r1, [r8, #4]
 801c0e8:	e9cd 0100 	strd	r0, r1, [sp]
 801c0ec:	ab02      	add	r3, sp, #8
 801c0ee:	2202      	movs	r2, #2
 801c0f0:	4629      	mov	r1, r5
 801c0f2:	4630      	mov	r0, r6
 801c0f4:	e000      	b.n	801c0f8 <GAPLESecurityManagerSlaveEventHandler+0x118>
 801c0f6:	e009      	b.n	801c10c <GAPLESecurityManagerSlaveEventHandler+0x12c>
 801c0f8:	f7ff fc44 	bl	801b984 <DispatchAuthenticationCallback>
 801c0fc:	e7a2      	b.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c0fe:	2301      	movs	r3, #1
 801c100:	2206      	movs	r2, #6
 801c102:	4629      	mov	r1, r5
 801c104:	4630      	mov	r0, r6
 801c106:	f7ff fa66 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801c10a:	e79b      	b.n	801c044 <GAPLESecurityManagerSlaveEventHandler+0x64>
 801c10c:	2301      	movs	r3, #1
 801c10e:	2205      	movs	r2, #5
 801c110:	e7f7      	b.n	801c102 <GAPLESecurityManagerSlaveEventHandler+0x122>
 801c112:	0000      	.short	0x0000
 801c114:	0801e495 	.word	0x0801e495

Disassembly of section i.GAP_LE_Add_Device_To_White_List:

0801c118 <GAP_LE_Add_Device_To_White_List>:
 801c118:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c11c:	461e      	mov	r6, r3
 801c11e:	4617      	mov	r7, r2
 801c120:	ea5f 0801 	movs.w	r8, r1
 801c124:	4681      	mov	r9, r0
 801c126:	d025      	beq.n	801c174 <GAP_LE_Add_Device_To_White_List+0x5c>
 801c128:	b327      	cbz	r7, 801c174 <GAP_LE_Add_Device_To_White_List+0x5c>
 801c12a:	b31e      	cbz	r6, 801c174 <GAP_LE_Add_Device_To_White_List+0x5c>
 801c12c:	2000      	movs	r0, #0
 801c12e:	6030      	str	r0, [r6, #0]
 801c130:	464a      	mov	r2, r9
 801c132:	a901      	add	r1, sp, #4
 801c134:	4668      	mov	r0, sp
 801c136:	f7ff f856 	bl	801b1e6 <AcquireGAPStackInfo>
 801c13a:	0005      	movs	r5, r0
 801c13c:	d11c      	bne.n	801c178 <GAP_LE_Add_Device_To_White_List+0x60>
 801c13e:	2400      	movs	r4, #0
 801c140:	e010      	b.n	801c164 <GAP_LE_Add_Device_To_White_List+0x4c>
 801c142:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 801c146:	5d78      	ldrb	r0, [r7, r5]
 801c148:	f7ff f911 	bl	801b36e <AssignHCIAddressType>
 801c14c:	4601      	mov	r1, r0
 801c14e:	19ea      	adds	r2, r5, r7
 801c150:	4648      	mov	r0, r9
 801c152:	1c52      	adds	r2, r2, #1
 801c154:	f004 f8be 	bl	80202d4 <_HCI_LE_Add_Device_To_White_List>
 801c158:	0005      	movs	r5, r0
 801c15a:	d102      	bne.n	801c162 <GAP_LE_Add_Device_To_White_List+0x4a>
 801c15c:	6830      	ldr	r0, [r6, #0]
 801c15e:	1c40      	adds	r0, r0, #1
 801c160:	6030      	str	r0, [r6, #0]
 801c162:	1c64      	adds	r4, r4, #1
 801c164:	4544      	cmp	r4, r8
 801c166:	d201      	bcs.n	801c16c <GAP_LE_Add_Device_To_White_List+0x54>
 801c168:	2d00      	cmp	r5, #0
 801c16a:	d0ea      	beq.n	801c142 <GAP_LE_Add_Device_To_White_List+0x2a>
 801c16c:	9800      	ldr	r0, [sp, #0]
 801c16e:	f7fd fa19 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c172:	e001      	b.n	801c178 <GAP_LE_Add_Device_To_White_List+0x60>
 801c174:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c178:	4628      	mov	r0, r5
 801c17a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.GAP_LE_Advertising_Disable:

0801c17e <GAP_LE_Advertising_Disable>:
 801c17e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801c180:	0005      	movs	r5, r0
 801c182:	d020      	beq.n	801c1c6 <GAP_LE_Advertising_Disable+0x48>
 801c184:	4602      	mov	r2, r0
 801c186:	4669      	mov	r1, sp
 801c188:	a801      	add	r0, sp, #4
 801c18a:	f7ff f82c 	bl	801b1e6 <AcquireGAPStackInfo>
 801c18e:	0004      	movs	r4, r0
 801c190:	d11b      	bne.n	801c1ca <GAP_LE_Advertising_Disable+0x4c>
 801c192:	9800      	ldr	r0, [sp, #0]
 801c194:	2103      	movs	r1, #3
 801c196:	3054      	adds	r0, #84	; 0x54
 801c198:	f7ff fbad 	bl	801b8f6 <DeleteCallbackInfoByType>
 801c19c:	b168      	cbz	r0, 801c1ba <GAP_LE_Advertising_Disable+0x3c>
 801c19e:	f7fc fd9a 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	4628      	mov	r0, r5
 801c1a6:	f004 fa65 	bl	8020674 <_HCI_LE_Set_Advertise_Enable>
 801c1aa:	0004      	movs	r4, r0
 801c1ac:	d107      	bne.n	801c1be <GAP_LE_Advertising_Disable+0x40>
 801c1ae:	9800      	ldr	r0, [sp, #0]
 801c1b0:	8bc1      	ldrh	r1, [r0, #30]
 801c1b2:	f021 0104 	bic.w	r1, r1, #4
 801c1b6:	83c1      	strh	r1, [r0, #30]
 801c1b8:	e001      	b.n	801c1be <GAP_LE_Advertising_Disable+0x40>
 801c1ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c1be:	9801      	ldr	r0, [sp, #4]
 801c1c0:	f7fd f9f0 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c1c4:	e001      	b.n	801c1ca <GAP_LE_Advertising_Disable+0x4c>
 801c1c6:	f06f 0401 	mvn.w	r4, #1
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.GAP_LE_Advertising_Enable:

0801c1d0 <GAP_LE_Advertising_Enable>:
 801c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1d4:	b087      	sub	sp, #28
 801c1d6:	461c      	mov	r4, r3
 801c1d8:	e9dd 8a10 	ldrd	r8, sl, [sp, #64]	; 0x40
 801c1dc:	0015      	movs	r5, r2
 801c1de:	4689      	mov	r9, r1
 801c1e0:	4683      	mov	fp, r0
 801c1e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c1e6:	d018      	beq.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c1e8:	8829      	ldrh	r1, [r5, #0]
 801c1ea:	8868      	ldrh	r0, [r5, #2]
 801c1ec:	4281      	cmp	r1, r0
 801c1ee:	d814      	bhi.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c1f0:	2914      	cmp	r1, #20
 801c1f2:	d312      	bcc.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c1f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801c1f8:	4291      	cmp	r1, r2
 801c1fa:	d80e      	bhi.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c1fc:	2814      	cmp	r0, #20
 801c1fe:	d30c      	bcc.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c200:	4290      	cmp	r0, r2
 801c202:	d80a      	bhi.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c204:	2c00      	cmp	r4, #0
 801c206:	d008      	beq.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c208:	7822      	ldrb	r2, [r4, #0]
 801c20a:	b112      	cbz	r2, 801c212 <GAP_LE_Advertising_Enable+0x42>
 801c20c:	2a02      	cmp	r2, #2
 801c20e:	d10a      	bne.n	801c226 <GAP_LE_Advertising_Enable+0x56>
 801c210:	e004      	b.n	801c21c <GAP_LE_Advertising_Enable+0x4c>
 801c212:	2964      	cmp	r1, #100	; 0x64
 801c214:	d301      	bcc.n	801c21a <GAP_LE_Advertising_Enable+0x4a>
 801c216:	2864      	cmp	r0, #100	; 0x64
 801c218:	d205      	bcs.n	801c226 <GAP_LE_Advertising_Enable+0x56>
 801c21a:	e090      	b.n	801c33e <GAP_LE_Advertising_Enable+0x16e>
 801c21c:	1ce0      	adds	r0, r4, #3
 801c21e:	f7fd f90e 	bl	801943e <CompareNULLBluetoothAddress>
 801c222:	2800      	cmp	r0, #0
 801c224:	d17e      	bne.n	801c324 <GAP_LE_Advertising_Enable+0x154>
 801c226:	f1b8 0f00 	cmp.w	r8, #0
 801c22a:	d07b      	beq.n	801c324 <GAP_LE_Advertising_Enable+0x154>
 801c22c:	465a      	mov	r2, fp
 801c22e:	a905      	add	r1, sp, #20
 801c230:	a806      	add	r0, sp, #24
 801c232:	f7fe ffd8 	bl	801b1e6 <AcquireGAPStackInfo>
 801c236:	0006      	movs	r6, r0
 801c238:	d10d      	bne.n	801c256 <GAP_LE_Advertising_Enable+0x86>
 801c23a:	9805      	ldr	r0, [sp, #20]
 801c23c:	7f81      	ldrb	r1, [r0, #30]
 801c23e:	f011 0f11 	tst.w	r1, #17
 801c242:	d101      	bne.n	801c248 <GAP_LE_Advertising_Enable+0x78>
 801c244:	7f01      	ldrb	r1, [r0, #28]
 801c246:	b139      	cbz	r1, 801c258 <GAP_LE_Advertising_Enable+0x88>
 801c248:	7821      	ldrb	r1, [r4, #0]
 801c24a:	b129      	cbz	r1, 801c258 <GAP_LE_Advertising_Enable+0x88>
 801c24c:	f06f 066a 	mvn.w	r6, #106	; 0x6a
 801c250:	9806      	ldr	r0, [sp, #24]
 801c252:	f7fd f9a7 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c256:	e073      	b.n	801c340 <GAP_LE_Advertising_Enable+0x170>
 801c258:	4653      	mov	r3, sl
 801c25a:	4642      	mov	r2, r8
 801c25c:	2103      	movs	r1, #3
 801c25e:	3054      	adds	r0, #84	; 0x54
 801c260:	f7ff fb29 	bl	801b8b6 <CreateCallbackInfoEntry>
 801c264:	b3f0      	cbz	r0, 801c2e4 <GAP_LE_Advertising_Enable+0x114>
 801c266:	7820      	ldrb	r0, [r4, #0]
 801c268:	f04f 0800 	mov.w	r8, #0
 801c26c:	b128      	cbz	r0, 801c27a <GAP_LE_Advertising_Enable+0xaa>
 801c26e:	2801      	cmp	r0, #1
 801c270:	d00a      	beq.n	801c288 <GAP_LE_Advertising_Enable+0xb8>
 801c272:	2802      	cmp	r0, #2
 801c274:	d00a      	beq.n	801c28c <GAP_LE_Advertising_Enable+0xbc>
 801c276:	463e      	mov	r6, r7
 801c278:	e03a      	b.n	801c2f0 <GAP_LE_Advertising_Enable+0x120>
 801c27a:	f1b9 0f00 	cmp.w	r9, #0
 801c27e:	d001      	beq.n	801c284 <GAP_LE_Advertising_Enable+0xb4>
 801c280:	2702      	movs	r7, #2
 801c282:	e008      	b.n	801c296 <GAP_LE_Advertising_Enable+0xc6>
 801c284:	2703      	movs	r7, #3
 801c286:	e006      	b.n	801c296 <GAP_LE_Advertising_Enable+0xc6>
 801c288:	2700      	movs	r7, #0
 801c28a:	e004      	b.n	801c296 <GAP_LE_Advertising_Enable+0xc6>
 801c28c:	2701      	movs	r7, #1
 801c28e:	78a0      	ldrb	r0, [r4, #2]
 801c290:	f7ff f86d 	bl	801b36e <AssignHCIAddressType>
 801c294:	4680      	mov	r8, r0
 801c296:	7860      	ldrb	r0, [r4, #1]
 801c298:	f7ff f869 	bl	801b36e <AssignHCIAddressType>
 801c29c:	4681      	mov	r9, r0
 801c29e:	7968      	ldrb	r0, [r5, #5]
 801c2a0:	2600      	movs	r6, #0
 801c2a2:	2801      	cmp	r0, #1
 801c2a4:	d100      	bne.n	801c2a8 <GAP_LE_Advertising_Enable+0xd8>
 801c2a6:	2601      	movs	r6, #1
 801c2a8:	79a8      	ldrb	r0, [r5, #6]
 801c2aa:	2801      	cmp	r0, #1
 801c2ac:	d101      	bne.n	801c2b2 <GAP_LE_Advertising_Enable+0xe2>
 801c2ae:	f046 0602 	orr.w	r6, r6, #2
 801c2b2:	8868      	ldrh	r0, [r5, #2]
 801c2b4:	f7ff fad6 	bl	801b864 <ConvertToBasebandSlots>
 801c2b8:	fa1f fa80 	uxth.w	sl, r0
 801c2bc:	8828      	ldrh	r0, [r5, #0]
 801c2be:	f7ff fad1 	bl	801b864 <ConvertToBasebandSlots>
 801c2c2:	b281      	uxth	r1, r0
 801c2c4:	7928      	ldrb	r0, [r5, #4]
 801c2c6:	1ce4      	adds	r4, r4, #3
 801c2c8:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c2cc:	e9cd 9800 	strd	r9, r8, [sp]
 801c2d0:	463b      	mov	r3, r7
 801c2d2:	4652      	mov	r2, sl
 801c2d4:	9604      	str	r6, [sp, #16]
 801c2d6:	4658      	mov	r0, fp
 801c2d8:	f004 fa08 	bl	80206ec <_HCI_LE_Set_Advertising_Parameters>
 801c2dc:	0006      	movs	r6, r0
 801c2de:	d107      	bne.n	801c2f0 <GAP_LE_Advertising_Enable+0x120>
 801c2e0:	2101      	movs	r1, #1
 801c2e2:	e000      	b.n	801c2e6 <GAP_LE_Advertising_Enable+0x116>
 801c2e4:	e028      	b.n	801c338 <GAP_LE_Advertising_Enable+0x168>
 801c2e6:	4658      	mov	r0, fp
 801c2e8:	f004 f9c4 	bl	8020674 <_HCI_LE_Set_Advertise_Enable>
 801c2ec:	0006      	movs	r6, r0
 801c2ee:	d009      	beq.n	801c304 <GAP_LE_Advertising_Enable+0x134>
 801c2f0:	9805      	ldr	r0, [sp, #20]
 801c2f2:	2103      	movs	r1, #3
 801c2f4:	3054      	adds	r0, #84	; 0x54
 801c2f6:	f7ff fafe 	bl	801b8f6 <DeleteCallbackInfoByType>
 801c2fa:	2800      	cmp	r0, #0
 801c2fc:	d0a8      	beq.n	801c250 <GAP_LE_Advertising_Enable+0x80>
 801c2fe:	f7fc fcea 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801c302:	e7a5      	b.n	801c250 <GAP_LE_Advertising_Enable+0x80>
 801c304:	9805      	ldr	r0, [sp, #20]
 801c306:	f1b9 0f01 	cmp.w	r9, #1
 801c30a:	8bc1      	ldrh	r1, [r0, #30]
 801c30c:	d00f      	beq.n	801c32e <GAP_LE_Advertising_Enable+0x15e>
 801c30e:	f021 0104 	bic.w	r1, r1, #4
 801c312:	83c1      	strh	r1, [r0, #30]
 801c314:	2100      	movs	r1, #0
 801c316:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
 801c31a:	9805      	ldr	r0, [sp, #20]
 801c31c:	490a      	ldr	r1, [pc, #40]	; (801c348 <GAP_LE_Advertising_Enable+0x178>)
 801c31e:	65c1      	str	r1, [r0, #92]	; 0x5c
 801c320:	490a      	ldr	r1, [pc, #40]	; (801c34c <GAP_LE_Advertising_Enable+0x17c>)
 801c322:	e000      	b.n	801c326 <GAP_LE_Advertising_Enable+0x156>
 801c324:	e00b      	b.n	801c33e <GAP_LE_Advertising_Enable+0x16e>
 801c326:	6601      	str	r1, [r0, #96]	; 0x60
 801c328:	4909      	ldr	r1, [pc, #36]	; (801c350 <GAP_LE_Advertising_Enable+0x180>)
 801c32a:	6781      	str	r1, [r0, #120]	; 0x78
 801c32c:	e790      	b.n	801c250 <GAP_LE_Advertising_Enable+0x80>
 801c32e:	f041 0104 	orr.w	r1, r1, #4
 801c332:	83c1      	strh	r1, [r0, #30]
 801c334:	2101      	movs	r1, #1
 801c336:	e7ee      	b.n	801c316 <GAP_LE_Advertising_Enable+0x146>
 801c338:	f06f 0641 	mvn.w	r6, #65	; 0x41
 801c33c:	e788      	b.n	801c250 <GAP_LE_Advertising_Enable+0x80>
 801c33e:	463e      	mov	r6, r7
 801c340:	b007      	add	sp, #28
 801c342:	4630      	mov	r0, r6
 801c344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c348:	0801a77d 	.word	0x0801a77d
 801c34c:	0801d289 	.word	0x0801d289
 801c350:	0801bfe1 	.word	0x0801bfe1

Disassembly of section i.GAP_LE_Authentication_Response:

0801c354 <GAP_LE_Authentication_Response>:
 801c354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c358:	b084      	sub	sp, #16
 801c35a:	4682      	mov	sl, r0
 801c35c:	461c      	mov	r4, r3
 801c35e:	a805      	add	r0, sp, #20
 801c360:	f7fd f86d 	bl	801943e <CompareNULLBluetoothAddress>
 801c364:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c368:	2800      	cmp	r0, #0
 801c36a:	d17d      	bne.n	801c468 <GAP_LE_Authentication_Response+0x114>
 801c36c:	2c00      	cmp	r4, #0
 801c36e:	d07b      	beq.n	801c468 <GAP_LE_Authentication_Response+0x114>
 801c370:	a805      	add	r0, sp, #20
 801c372:	9000      	str	r0, [sp, #0]
 801c374:	4653      	mov	r3, sl
 801c376:	aa02      	add	r2, sp, #8
 801c378:	a901      	add	r1, sp, #4
 801c37a:	a803      	add	r0, sp, #12
 801c37c:	f7fe ff5a 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801c380:	0005      	movs	r5, r0
 801c382:	d109      	bne.n	801c398 <GAP_LE_Authentication_Response+0x44>
 801c384:	9902      	ldr	r1, [sp, #8]
 801c386:	69ce      	ldr	r6, [r1, #28]
 801c388:	b93e      	cbnz	r6, 801c39a <GAP_LE_Authentication_Response+0x46>
 801c38a:	7820      	ldrb	r0, [r4, #0]
 801c38c:	b128      	cbz	r0, 801c39a <GAP_LE_Authentication_Response+0x46>
 801c38e:	f06f 0575 	mvn.w	r5, #117	; 0x75
 801c392:	9803      	ldr	r0, [sp, #12]
 801c394:	f7fd f906 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c398:	e0fc      	b.n	801c594 <GAP_LE_Authentication_Response+0x240>
 801c39a:	7860      	ldrb	r0, [r4, #1]
 801c39c:	2800      	cmp	r0, #0
 801c39e:	d070      	beq.n	801c482 <GAP_LE_Authentication_Response+0x12e>
 801c3a0:	7820      	ldrb	r0, [r4, #0]
 801c3a2:	f04f 0900 	mov.w	r9, #0
 801c3a6:	f06f 0841 	mvn.w	r8, #65	; 0x41
 801c3aa:	2809      	cmp	r0, #9
 801c3ac:	d26a      	bcs.n	801c484 <GAP_LE_Authentication_Response+0x130>
 801c3ae:	e8df f000 	tbb	[pc, r0]
 801c3b2:	6a05      	.short	0x6a05
 801c3b4:	6f6a6a15 	.word	0x6f6a6a15
 801c3b8:	00dcb97a 	.word	0x00dcb97a
 801c3bc:	7922      	ldrb	r2, [r4, #4]
 801c3be:	1fd0      	subs	r0, r2, #7
 801c3c0:	2809      	cmp	r0, #9
 801c3c2:	d85f      	bhi.n	801c484 <GAP_LE_Authentication_Response+0x130>
 801c3c4:	2110      	movs	r1, #16
 801c3c6:	1d60      	adds	r0, r4, #5
 801c3c8:	f001 fd34 	bl	801de34 <MaskEncryptionKey>
 801c3cc:	9802      	ldr	r0, [sp, #8]
 801c3ce:	1d62      	adds	r2, r4, #5
 801c3d0:	8801      	ldrh	r1, [r0, #0]
 801c3d2:	4650      	mov	r0, sl
 801c3d4:	f004 f8ac 	bl	8020530 <_HCI_LE_Long_Term_Key_Request_Reply>
 801c3d8:	4605      	mov	r5, r0
 801c3da:	e7da      	b.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c3dc:	9801      	ldr	r0, [sp, #4]
 801c3de:	7f00      	ldrb	r0, [r0, #28]
 801c3e0:	2801      	cmp	r0, #1
 801c3e2:	d002      	beq.n	801c3ea <GAP_LE_Authentication_Response+0x96>
 801c3e4:	f06f 056a 	mvn.w	r5, #106	; 0x6a
 801c3e8:	e7d3      	b.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c3ea:	7a20      	ldrb	r0, [r4, #8]
 801c3ec:	7cf1      	ldrb	r1, [r6, #19]
 801c3ee:	4288      	cmp	r0, r1
 801c3f0:	d200      	bcs.n	801c3f4 <GAP_LE_Authentication_Response+0xa0>
 801c3f2:	74f0      	strb	r0, [r6, #19]
 801c3f4:	7a60      	ldrb	r0, [r4, #9]
 801c3f6:	7ab1      	ldrb	r1, [r6, #10]
 801c3f8:	4008      	ands	r0, r1
 801c3fa:	7260      	strb	r0, [r4, #9]
 801c3fc:	7aa0      	ldrb	r0, [r4, #10]
 801c3fe:	7af1      	ldrb	r1, [r6, #11]
 801c400:	4008      	ands	r0, r1
 801c402:	72a0      	strb	r0, [r4, #10]
 801c404:	7ae0      	ldrb	r0, [r4, #11]
 801c406:	7b31      	ldrb	r1, [r6, #12]
 801c408:	4008      	ands	r0, r1
 801c40a:	72e0      	strb	r0, [r4, #11]
 801c40c:	7b20      	ldrb	r0, [r4, #12]
 801c40e:	79f1      	ldrb	r1, [r6, #7]
 801c410:	4008      	ands	r0, r1
 801c412:	7320      	strb	r0, [r4, #12]
 801c414:	7b60      	ldrb	r0, [r4, #13]
 801c416:	7a31      	ldrb	r1, [r6, #8]
 801c418:	4008      	ands	r0, r1
 801c41a:	7360      	strb	r0, [r4, #13]
 801c41c:	7ba0      	ldrb	r0, [r4, #14]
 801c41e:	7a71      	ldrb	r1, [r6, #9]
 801c420:	4008      	ands	r0, r1
 801c422:	73a0      	strb	r0, [r4, #14]
 801c424:	f8b4 0009 	ldrh.w	r0, [r4, #9]
 801c428:	8230      	strh	r0, [r6, #16]
 801c42a:	7ae0      	ldrb	r0, [r4, #11]
 801c42c:	74b0      	strb	r0, [r6, #18]
 801c42e:	89a0      	ldrh	r0, [r4, #12]
 801c430:	f8a6 000d 	strh.w	r0, [r6, #13]
 801c434:	7ba0      	ldrb	r0, [r4, #14]
 801c436:	73f0      	strb	r0, [r6, #15]
 801c438:	6831      	ldr	r1, [r6, #0]
 801c43a:	b121      	cbz	r1, 801c446 <GAP_LE_Authentication_Response+0xf2>
 801c43c:	4650      	mov	r0, sl
 801c43e:	f7fd fa29 	bl	8019894 <BTPS_StopTimer>
 801c442:	f8c6 9000 	str.w	r9, [r6]
 801c446:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 801c44a:	1d23      	adds	r3, r4, #4
 801c44c:	2202      	movs	r2, #2
 801c44e:	f7ff f8dd 	bl	801b60c <BuildAndSendPairingPDU>
 801c452:	0005      	movs	r5, r0
 801c454:	d19d      	bne.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c456:	9802      	ldr	r0, [sp, #8]
 801c458:	f247 5330 	movw	r3, #30000	; 0x7530
 801c45c:	4a4f      	ldr	r2, [pc, #316]	; (801c59c <GAP_LE_Authentication_Response+0x248>)
 801c45e:	8801      	ldrh	r1, [r0, #0]
 801c460:	4650      	mov	r0, sl
 801c462:	f7fd f9cd 	bl	8019800 <BTPS_StartTimer>
 801c466:	e000      	b.n	801c46a <GAP_LE_Authentication_Response+0x116>
 801c468:	e093      	b.n	801c592 <GAP_LE_Authentication_Response+0x23e>
 801c46a:	6030      	str	r0, [r6, #0]
 801c46c:	9901      	ldr	r1, [sp, #4]
 801c46e:	2207      	movs	r2, #7
 801c470:	f106 001b 	add.w	r0, r6, #27
 801c474:	3128      	adds	r1, #40	; 0x28
 801c476:	f7f7 f81e 	bl	80134b6 <BTPS_MemCopy>
 801c47a:	9802      	ldr	r0, [sp, #8]
 801c47c:	4948      	ldr	r1, [pc, #288]	; (801c5a0 <GAP_LE_Authentication_Response+0x24c>)
 801c47e:	8802      	ldrh	r2, [r0, #0]
 801c480:	e047      	b.n	801c512 <GAP_LE_Authentication_Response+0x1be>
 801c482:	e081      	b.n	801c588 <GAP_LE_Authentication_Response+0x234>
 801c484:	e04c      	b.n	801c520 <GAP_LE_Authentication_Response+0x1cc>
 801c486:	4622      	mov	r2, r4
 801c488:	9801      	ldr	r0, [sp, #4]
 801c48a:	f7fe ff8d 	bl	801b3a8 <AuthenticationResponsePasskeyConfirmationResponse>
 801c48e:	e7a3      	b.n	801c3d8 <GAP_LE_Authentication_Response+0x84>
 801c490:	7922      	ldrb	r2, [r4, #4]
 801c492:	2301      	movs	r3, #1
 801c494:	9801      	ldr	r0, [sp, #4]
 801c496:	f7ff f89e 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801c49a:	0005      	movs	r5, r0
 801c49c:	d19d      	bne.n	801c3da <GAP_LE_Authentication_Response+0x86>
 801c49e:	9802      	ldr	r0, [sp, #8]
 801c4a0:	f7ff fb96 	bl	801bbd0 <FreeSecurityManagerResources>
 801c4a4:	e775      	b.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c4a6:	7922      	ldrb	r2, [r4, #4]
 801c4a8:	1fd0      	subs	r0, r2, #7
 801c4aa:	2809      	cmp	r0, #9
 801c4ac:	d838      	bhi.n	801c520 <GAP_LE_Authentication_Response+0x1cc>
 801c4ae:	2110      	movs	r1, #16
 801c4b0:	1d60      	adds	r0, r4, #5
 801c4b2:	f001 fcbf 	bl	801de34 <MaskEncryptionKey>
 801c4b6:	e9dd 5701 	ldrd	r5, r7, [sp, #4]
 801c4ba:	2006      	movs	r0, #6
 801c4bc:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
 801c4c0:	1d61      	adds	r1, r4, #5
 801c4c2:	2210      	movs	r2, #16
 801c4c4:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801c4c8:	f7f7 fc5b 	bl	8013d82 <__aeabi_memcpy>
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	2211      	movs	r2, #17
 801c4d0:	4639      	mov	r1, r7
 801c4d2:	4628      	mov	r0, r5
 801c4d4:	f001 ff84 	bl	801e3e0 <SecurityManagerChannelWrite>
 801c4d8:	0005      	movs	r5, r0
 801c4da:	d185      	bne.n	801c3e8 <GAP_LE_Authentication_Response+0x94>
 801c4dc:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 801c4e0:	2207      	movs	r2, #7
 801c4e2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801c4e6:	7da2      	ldrb	r2, [r4, #22]
 801c4e8:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
 801c4ec:	8ae2      	ldrh	r2, [r4, #22]
 801c4ee:	2300      	movs	r3, #0
 801c4f0:	0a12      	lsrs	r2, r2, #8
 801c4f2:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 801c4f6:	69a2      	ldr	r2, [r4, #24]
 801c4f8:	f8c0 202b 	str.w	r2, [r0, #43]	; 0x2b
 801c4fc:	69e2      	ldr	r2, [r4, #28]
 801c4fe:	f8c0 202f 	str.w	r2, [r0, #47]	; 0x2f
 801c502:	220b      	movs	r2, #11
 801c504:	f001 ff6c 	bl	801e3e0 <SecurityManagerChannelWrite>
 801c508:	0005      	movs	r5, r0
 801c50a:	d1cb      	bne.n	801c4a4 <GAP_LE_Authentication_Response+0x150>
 801c50c:	f886 900d 	strb.w	r9, [r6, #13]
 801c510:	e034      	b.n	801c57c <GAP_LE_Authentication_Response+0x228>
 801c512:	4650      	mov	r0, sl
 801c514:	f7fc fdf8 	bl	8019108 <BSC_ScheduleAsynchronousCallback>
 801c518:	2800      	cmp	r0, #0
 801c51a:	dd33      	ble.n	801c584 <GAP_LE_Authentication_Response+0x230>
 801c51c:	2500      	movs	r5, #0
 801c51e:	e738      	b.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c520:	463d      	mov	r5, r7
 801c522:	e736      	b.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c524:	1d23      	adds	r3, r4, #4
 801c526:	2208      	movs	r2, #8
 801c528:	9801      	ldr	r0, [sp, #4]
 801c52a:	f7ff f82d 	bl	801b588 <BuildAndSendEncryptKey>
 801c52e:	0005      	movs	r5, r0
 801c530:	d1b8      	bne.n	801c4a4 <GAP_LE_Authentication_Response+0x150>
 801c532:	e9dd 5701 	ldrd	r5, r7, [sp, #4]
 801c536:	7d20      	ldrb	r0, [r4, #20]
 801c538:	f7fe ff19 	bl	801b36e <AssignHCIAddressType>
 801c53c:	2109      	movs	r1, #9
 801c53e:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
 801c542:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
 801c546:	f8d4 0015 	ldr.w	r0, [r4, #21]
 801c54a:	f8c5 002a 	str.w	r0, [r5, #42]	; 0x2a
 801c54e:	f8b4 0019 	ldrh.w	r0, [r4, #25]
 801c552:	85e8      	strh	r0, [r5, #46]	; 0x2e
 801c554:	2300      	movs	r3, #0
 801c556:	2208      	movs	r2, #8
 801c558:	4639      	mov	r1, r7
 801c55a:	4628      	mov	r0, r5
 801c55c:	f001 ff40 	bl	801e3e0 <SecurityManagerChannelWrite>
 801c560:	0005      	movs	r5, r0
 801c562:	d19f      	bne.n	801c4a4 <GAP_LE_Authentication_Response+0x150>
 801c564:	f886 900e 	strb.w	r9, [r6, #14]
 801c568:	e008      	b.n	801c57c <GAP_LE_Authentication_Response+0x228>
 801c56a:	1d23      	adds	r3, r4, #4
 801c56c:	220a      	movs	r2, #10
 801c56e:	9801      	ldr	r0, [sp, #4]
 801c570:	f7ff f80a 	bl	801b588 <BuildAndSendEncryptKey>
 801c574:	0005      	movs	r5, r0
 801c576:	d195      	bne.n	801c4a4 <GAP_LE_Authentication_Response+0x150>
 801c578:	f886 900f 	strb.w	r9, [r6, #15]
 801c57c:	9802      	ldr	r0, [sp, #8]
 801c57e:	4909      	ldr	r1, [pc, #36]	; (801c5a4 <GAP_LE_Authentication_Response+0x250>)
 801c580:	8802      	ldrh	r2, [r0, #0]
 801c582:	e7c6      	b.n	801c512 <GAP_LE_Authentication_Response+0x1be>
 801c584:	4645      	mov	r5, r8
 801c586:	e704      	b.n	801c392 <GAP_LE_Authentication_Response+0x3e>
 801c588:	4622      	mov	r2, r4
 801c58a:	9801      	ldr	r0, [sp, #4]
 801c58c:	f7fe ffa0 	bl	801b4d0 <AuthenticationResponseZeroLengthResponse>
 801c590:	e722      	b.n	801c3d8 <GAP_LE_Authentication_Response+0x84>
 801c592:	463d      	mov	r5, r7
 801c594:	b008      	add	sp, #32
 801c596:	4628      	mov	r0, r5
 801c598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c59c:	0801e495 	.word	0x0801e495
 801c5a0:	0801e0a1 	.word	0x0801e0a1
 801c5a4:	0801e1ab 	.word	0x0801e1ab

Disassembly of section i.GAP_LE_Cancel_Scan:

0801c5a8 <GAP_LE_Cancel_Scan>:
 801c5a8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801c5aa:	0005      	movs	r5, r0
 801c5ac:	d018      	beq.n	801c5e0 <GAP_LE_Cancel_Scan+0x38>
 801c5ae:	4602      	mov	r2, r0
 801c5b0:	a901      	add	r1, sp, #4
 801c5b2:	4668      	mov	r0, sp
 801c5b4:	f7fe fe17 	bl	801b1e6 <AcquireGAPStackInfo>
 801c5b8:	0004      	movs	r4, r0
 801c5ba:	d113      	bne.n	801c5e4 <GAP_LE_Cancel_Scan+0x3c>
 801c5bc:	9801      	ldr	r0, [sp, #4]
 801c5be:	2102      	movs	r1, #2
 801c5c0:	3054      	adds	r0, #84	; 0x54
 801c5c2:	f7ff f998 	bl	801b8f6 <DeleteCallbackInfoByType>
 801c5c6:	b108      	cbz	r0, 801c5cc <GAP_LE_Cancel_Scan+0x24>
 801c5c8:	f7fc fb85 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	4611      	mov	r1, r2
 801c5d0:	4628      	mov	r0, r5
 801c5d2:	f004 f8eb 	bl	80207ac <_HCI_LE_Set_Scan_Enable>
 801c5d6:	4604      	mov	r4, r0
 801c5d8:	9800      	ldr	r0, [sp, #0]
 801c5da:	f7fc ffe3 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c5de:	e001      	b.n	801c5e4 <GAP_LE_Cancel_Scan+0x3c>
 801c5e0:	f06f 0401 	mvn.w	r4, #1
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.GAP_LE_Cleanup:

0801c5e8 <GAP_LE_Cleanup>:
 801c5e8:	b51c      	push	{r2, r3, r4, lr}
 801c5ea:	4602      	mov	r2, r0
 801c5ec:	4669      	mov	r1, sp
 801c5ee:	a801      	add	r0, sp, #4
 801c5f0:	f7fd fa26 	bl	8019a40 <AcquireGAPLEContext>
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	d010      	beq.n	801c61a <GAP_LE_Cleanup+0x32>
 801c5f8:	9801      	ldr	r0, [sp, #4]
 801c5fa:	b158      	cbz	r0, 801c614 <GAP_LE_Cleanup+0x2c>
 801c5fc:	9800      	ldr	r0, [sp, #0]
 801c5fe:	b148      	cbz	r0, 801c614 <GAP_LE_Cleanup+0x2c>
 801c600:	3058      	adds	r0, #88	; 0x58
 801c602:	f7ff fad7 	bl	801bbb4 <FreeLELinkList>
 801c606:	9800      	ldr	r0, [sp, #0]
 801c608:	3054      	adds	r0, #84	; 0x54
 801c60a:	f7ff fabe 	bl	801bb8a <FreeCallbackInfoList>
 801c60e:	9800      	ldr	r0, [sp, #0]
 801c610:	f7f6 feee 	bl	80133f0 <BTPS_FreeMemory>
 801c614:	9801      	ldr	r0, [sp, #4]
 801c616:	f7fc ffc5 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c61a:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.GAP_LE_Connection_Parameter_Update_Response:

0801c61c <GAP_LE_Connection_Parameter_Update_Response>:
 801c61c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c61e:	b084      	sub	sp, #16
 801c620:	4604      	mov	r4, r0
 801c622:	461d      	mov	r5, r3
 801c624:	a805      	add	r0, sp, #20
 801c626:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c628:	f7fc ff09 	bl	801943e <CompareNULLBluetoothAddress>
 801c62c:	bb80      	cbnz	r0, 801c690 <GAP_LE_Connection_Parameter_Update_Response+0x74>
 801c62e:	b125      	cbz	r5, 801c63a <GAP_LE_Connection_Parameter_Update_Response+0x1e>
 801c630:	b376      	cbz	r6, 801c690 <GAP_LE_Connection_Parameter_Update_Response+0x74>
 801c632:	4630      	mov	r0, r6
 801c634:	f001 ff04 	bl	801e440 <TestValidConnectionParameters>
 801c638:	b350      	cbz	r0, 801c690 <GAP_LE_Connection_Parameter_Update_Response+0x74>
 801c63a:	a805      	add	r0, sp, #20
 801c63c:	9000      	str	r0, [sp, #0]
 801c63e:	4623      	mov	r3, r4
 801c640:	aa02      	add	r2, sp, #8
 801c642:	a903      	add	r1, sp, #12
 801c644:	a801      	add	r0, sp, #4
 801c646:	f7fe fdf5 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801c64a:	0004      	movs	r4, r0
 801c64c:	d123      	bne.n	801c696 <GAP_LE_Connection_Parameter_Update_Response+0x7a>
 801c64e:	9803      	ldr	r0, [sp, #12]
 801c650:	7f00      	ldrb	r0, [r0, #28]
 801c652:	2802      	cmp	r0, #2
 801c654:	d005      	beq.n	801c662 <GAP_LE_Connection_Parameter_Update_Response+0x46>
 801c656:	f06f 046a 	mvn.w	r4, #106	; 0x6a
 801c65a:	9801      	ldr	r0, [sp, #4]
 801c65c:	f7fc ffa2 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c660:	e019      	b.n	801c696 <GAP_LE_Connection_Parameter_Update_Response+0x7a>
 801c662:	b19d      	cbz	r5, 801c68c <GAP_LE_Connection_Parameter_Update_Response+0x70>
 801c664:	2200      	movs	r2, #0
 801c666:	9802      	ldr	r0, [sp, #8]
 801c668:	8801      	ldrh	r1, [r0, #0]
 801c66a:	9801      	ldr	r0, [sp, #4]
 801c66c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c66e:	f007 fb07 	bl	8023c80 <_L2CA_Connection_Parameter_Update_Response>
 801c672:	0004      	movs	r4, r0
 801c674:	d1f1      	bne.n	801c65a <GAP_LE_Connection_Parameter_Update_Response+0x3e>
 801c676:	2d00      	cmp	r5, #0
 801c678:	d0ef      	beq.n	801c65a <GAP_LE_Connection_Parameter_Update_Response+0x3e>
 801c67a:	9801      	ldr	r0, [sp, #4]
 801c67c:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801c680:	6800      	ldr	r0, [r0, #0]
 801c682:	4633      	mov	r3, r6
 801c684:	f000 fda4 	bl	801d1d0 <GAP_LE_Update_Connection_Parameters>
 801c688:	4604      	mov	r4, r0
 801c68a:	e7e6      	b.n	801c65a <GAP_LE_Connection_Parameter_Update_Response+0x3e>
 801c68c:	2201      	movs	r2, #1
 801c68e:	e7ea      	b.n	801c666 <GAP_LE_Connection_Parameter_Update_Response+0x4a>
 801c690:	e7ff      	b.n	801c692 <GAP_LE_Connection_Parameter_Update_Response+0x76>
 801c692:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c696:	b008      	add	sp, #32
 801c698:	4620      	mov	r0, r4
 801c69a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.GAP_LE_Create_Connection:

0801c69c <GAP_LE_Create_Connection>:
 801c69c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6a0:	b08f      	sub	sp, #60	; 0x3c
 801c6a2:	468b      	mov	fp, r1
 801c6a4:	e9dd 851e 	ldrd	r8, r5, [sp, #120]	; 0x78
 801c6a8:	461f      	mov	r7, r3
 801c6aa:	4692      	mov	sl, r2
 801c6ac:	4611      	mov	r1, r2
 801c6ae:	4658      	mov	r0, fp
 801c6b0:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 801c6b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801c6b6:	f001 fedd 	bl	801e474 <TestValidScanParameters>
 801c6ba:	2800      	cmp	r0, #0
 801c6bc:	d06f      	beq.n	801c79e <GAP_LE_Create_Connection+0x102>
 801c6be:	2f01      	cmp	r7, #1
 801c6c0:	d006      	beq.n	801c6d0 <GAP_LE_Create_Connection+0x34>
 801c6c2:	2e00      	cmp	r6, #0
 801c6c4:	d0fa      	beq.n	801c6bc <GAP_LE_Create_Connection+0x20>
 801c6c6:	4630      	mov	r0, r6
 801c6c8:	f7fc feb9 	bl	801943e <CompareNULLBluetoothAddress>
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	d166      	bne.n	801c79e <GAP_LE_Create_Connection+0x102>
 801c6d0:	2d00      	cmp	r5, #0
 801c6d2:	d0f3      	beq.n	801c6bc <GAP_LE_Create_Connection+0x20>
 801c6d4:	f1b9 0f00 	cmp.w	r9, #0
 801c6d8:	d0f0      	beq.n	801c6bc <GAP_LE_Create_Connection+0x20>
 801c6da:	4628      	mov	r0, r5
 801c6dc:	f001 feb0 	bl	801e440 <TestValidConnectionParameters>
 801c6e0:	2800      	cmp	r0, #0
 801c6e2:	d07d      	beq.n	801c7e0 <GAP_LE_Create_Connection+0x144>
 801c6e4:	a90b      	add	r1, sp, #44	; 0x2c
 801c6e6:	a80c      	add	r0, sp, #48	; 0x30
 801c6e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c6ea:	f7fe fd7c 	bl	801b1e6 <AcquireGAPStackInfo>
 801c6ee:	0004      	movs	r4, r0
 801c6f0:	d10c      	bne.n	801c70c <GAP_LE_Create_Connection+0x70>
 801c6f2:	f1b8 0f00 	cmp.w	r8, #0
 801c6f6:	d00a      	beq.n	801c70e <GAP_LE_Create_Connection+0x72>
 801c6f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c6fa:	3016      	adds	r0, #22
 801c6fc:	f7fc fe9f 	bl	801943e <CompareNULLBluetoothAddress>
 801c700:	b128      	cbz	r0, 801c70e <GAP_LE_Create_Connection+0x72>
 801c702:	f06f 0473 	mvn.w	r4, #115	; 0x73
 801c706:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c708:	f7fc ff4c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c70c:	e097      	b.n	801c83e <GAP_LE_Create_Connection+0x1a2>
 801c70e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c710:	7f81      	ldrb	r1, [r0, #30]
 801c712:	f011 0f11 	tst.w	r1, #17
 801c716:	d002      	beq.n	801c71e <GAP_LE_Create_Connection+0x82>
 801c718:	f06f 046e 	mvn.w	r4, #110	; 0x6e
 801c71c:	e7f3      	b.n	801c706 <GAP_LE_Create_Connection+0x6a>
 801c71e:	464a      	mov	r2, r9
 801c720:	2101      	movs	r1, #1
 801c722:	3054      	adds	r0, #84	; 0x54
 801c724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c726:	f7ff f8c6 	bl	801b8b6 <CreateCallbackInfoEntry>
 801c72a:	2800      	cmp	r0, #0
 801c72c:	d07f      	beq.n	801c82e <GAP_LE_Create_Connection+0x192>
 801c72e:	4658      	mov	r0, fp
 801c730:	f7ff f898 	bl	801b864 <ConvertToBasebandSlots>
 801c734:	9010      	str	r0, [sp, #64]	; 0x40
 801c736:	4650      	mov	r0, sl
 801c738:	f7ff f894 	bl	801b864 <ConvertToBasebandSlots>
 801c73c:	4604      	mov	r4, r0
 801c73e:	2f01      	cmp	r7, #1
 801c740:	d02b      	beq.n	801c79a <GAP_LE_Create_Connection+0xfe>
 801c742:	2000      	movs	r0, #0
 801c744:	900d      	str	r0, [sp, #52]	; 0x34
 801c746:	981c      	ldr	r0, [sp, #112]	; 0x70
 801c748:	f7fe fe11 	bl	801b36e <AssignHCIAddressType>
 801c74c:	900e      	str	r0, [sp, #56]	; 0x38
 801c74e:	4640      	mov	r0, r8
 801c750:	f7fe fe0d 	bl	801b36e <AssignHCIAddressType>
 801c754:	9001      	str	r0, [sp, #4]
 801c756:	8828      	ldrh	r0, [r5, #0]
 801c758:	f7ff f88f 	bl	801b87a <ConvertToTwoBasebandSlots>
 801c75c:	b280      	uxth	r0, r0
 801c75e:	9000      	str	r0, [sp, #0]
 801c760:	8868      	ldrh	r0, [r5, #2]
 801c762:	f7ff f88a 	bl	801b87a <ConvertToTwoBasebandSlots>
 801c766:	fa1f fb80 	uxth.w	fp, r0
 801c76a:	88e8      	ldrh	r0, [r5, #6]
 801c76c:	210a      	movs	r1, #10
 801c76e:	fbb0 f0f1 	udiv	r0, r0, r1
 801c772:	fa1f fa80 	uxth.w	sl, r0
 801c776:	8928      	ldrh	r0, [r5, #8]
 801c778:	f7ff f874 	bl	801b864 <ConvertToBasebandSlots>
 801c77c:	fa1f f980 	uxth.w	r9, r0
 801c780:	8968      	ldrh	r0, [r5, #10]
 801c782:	f7ff f86f 	bl	801b864 <ConvertToBasebandSlots>
 801c786:	b281      	uxth	r1, r0
 801c788:	2f01      	cmp	r7, #1
 801c78a:	d009      	beq.n	801c7a0 <GAP_LE_Create_Connection+0x104>
 801c78c:	b146      	cbz	r6, 801c7a0 <GAP_LE_Create_Connection+0x104>
 801c78e:	6830      	ldr	r0, [r6, #0]
 801c790:	9009      	str	r0, [sp, #36]	; 0x24
 801c792:	88b0      	ldrh	r0, [r6, #4]
 801c794:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801c798:	e008      	b.n	801c7ac <GAP_LE_Create_Connection+0x110>
 801c79a:	2001      	movs	r0, #1
 801c79c:	e7d2      	b.n	801c744 <GAP_LE_Create_Connection+0xa8>
 801c79e:	e04c      	b.n	801c83a <GAP_LE_Create_Connection+0x19e>
 801c7a0:	2000      	movs	r0, #0
 801c7a2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801c7a6:	9009      	str	r0, [sp, #36]	; 0x24
 801c7a8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801c7ac:	88ab      	ldrh	r3, [r5, #4]
 801c7ae:	e9cd 9107 	strd	r9, r1, [sp, #28]
 801c7b2:	e9cd 3a05 	strd	r3, sl, [sp, #20]
 801c7b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c7ba:	f8cd b010 	str.w	fp, [sp, #16]
 801c7be:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801c7c2:	ab09      	add	r3, sp, #36	; 0x24
 801c7c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c7c6:	9301      	str	r3, [sp, #4]
 801c7c8:	9000      	str	r0, [sp, #0]
 801c7ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c7cc:	b2a2      	uxth	r2, r4
 801c7ce:	b281      	uxth	r1, r0
 801c7d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c7d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c7d4:	f003 fdfa 	bl	80203cc <_HCI_LE_Create_Connection>
 801c7d8:	0004      	movs	r4, r0
 801c7da:	d00b      	beq.n	801c7f4 <GAP_LE_Create_Connection+0x158>
 801c7dc:	2101      	movs	r1, #1
 801c7de:	e000      	b.n	801c7e2 <GAP_LE_Create_Connection+0x146>
 801c7e0:	e028      	b.n	801c834 <GAP_LE_Create_Connection+0x198>
 801c7e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c7e4:	3054      	adds	r0, #84	; 0x54
 801c7e6:	f7ff f886 	bl	801b8f6 <DeleteCallbackInfoByType>
 801c7ea:	2800      	cmp	r0, #0
 801c7ec:	d08b      	beq.n	801c706 <GAP_LE_Create_Connection+0x6a>
 801c7ee:	f7fc fa72 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801c7f2:	e788      	b.n	801c706 <GAP_LE_Create_Connection+0x6a>
 801c7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c7f6:	f1b8 0f01 	cmp.w	r8, #1
 801c7fa:	8bc8      	ldrh	r0, [r1, #30]
 801c7fc:	f040 0001 	orr.w	r0, r0, #1
 801c800:	83c8      	strh	r0, [r1, #30]
 801c802:	d00f      	beq.n	801c824 <GAP_LE_Create_Connection+0x188>
 801c804:	f020 0002 	bic.w	r0, r0, #2
 801c808:	83c8      	strh	r0, [r1, #30]
 801c80a:	2000      	movs	r0, #0
 801c80c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
 801c810:	480d      	ldr	r0, [pc, #52]	; (801c848 <GAP_LE_Create_Connection+0x1ac>)
 801c812:	65c8      	str	r0, [r1, #92]	; 0x5c
 801c814:	480d      	ldr	r0, [pc, #52]	; (801c84c <GAP_LE_Create_Connection+0x1b0>)
 801c816:	6608      	str	r0, [r1, #96]	; 0x60
 801c818:	480d      	ldr	r0, [pc, #52]	; (801c850 <GAP_LE_Create_Connection+0x1b4>)
 801c81a:	66c8      	str	r0, [r1, #108]	; 0x6c
 801c81c:	480d      	ldr	r0, [pc, #52]	; (801c854 <GAP_LE_Create_Connection+0x1b8>)
 801c81e:	6748      	str	r0, [r1, #116]	; 0x74
 801c820:	e771      	b.n	801c706 <GAP_LE_Create_Connection+0x6a>
 801c822:	e004      	b.n	801c82e <GAP_LE_Create_Connection+0x192>
 801c824:	f040 0002 	orr.w	r0, r0, #2
 801c828:	83c8      	strh	r0, [r1, #30]
 801c82a:	2001      	movs	r0, #1
 801c82c:	e7ee      	b.n	801c80c <GAP_LE_Create_Connection+0x170>
 801c82e:	f06f 0441 	mvn.w	r4, #65	; 0x41
 801c832:	e768      	b.n	801c706 <GAP_LE_Create_Connection+0x6a>
 801c834:	f06f 046f 	mvn.w	r4, #111	; 0x6f
 801c838:	e001      	b.n	801c83e <GAP_LE_Create_Connection+0x1a2>
 801c83a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c83e:	b013      	add	sp, #76	; 0x4c
 801c840:	4620      	mov	r0, r4
 801c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c846:	0000      	.short	0x0000
 801c848:	0801a77d 	.word	0x0801a77d
 801c84c:	0801d289 	.word	0x0801d289
 801c850:	0801bc05 	.word	0x0801bc05
 801c854:	0801be51 	.word	0x0801be51

Disassembly of section i.GAP_LE_Disconnect:

0801c858 <GAP_LE_Disconnect>:
 801c858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c85a:	b084      	sub	sp, #16
 801c85c:	4605      	mov	r5, r0
 801c85e:	a805      	add	r0, sp, #20
 801c860:	f7fc fded 	bl	801943e <CompareNULLBluetoothAddress>
 801c864:	b120      	cbz	r0, 801c870 <GAP_LE_Disconnect+0x18>
 801c866:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c86a:	b007      	add	sp, #28
 801c86c:	4620      	mov	r0, r4
 801c86e:	bd30      	pop	{r4, r5, pc}
 801c870:	a805      	add	r0, sp, #20
 801c872:	9000      	str	r0, [sp, #0]
 801c874:	462b      	mov	r3, r5
 801c876:	aa01      	add	r2, sp, #4
 801c878:	a903      	add	r1, sp, #12
 801c87a:	a802      	add	r0, sp, #8
 801c87c:	f7fe fcda 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801c880:	0004      	movs	r4, r0
 801c882:	d1f2      	bne.n	801c86a <GAP_LE_Disconnect+0x12>
 801c884:	9801      	ldr	r0, [sp, #4]
 801c886:	2213      	movs	r2, #19
 801c888:	8801      	ldrh	r1, [r0, #0]
 801c88a:	4628      	mov	r0, r5
 801c88c:	f003 fca8 	bl	80201e0 <_HCI_Disconnect>
 801c890:	4604      	mov	r4, r0
 801c892:	9802      	ldr	r0, [sp, #8]
 801c894:	f7fc fe86 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c898:	e7e7      	b.n	801c86a <GAP_LE_Disconnect+0x12>

Disassembly of section i.GAP_LE_Diversify_Function:

0801c89a <GAP_LE_Diversify_Function>:
 801c89a:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 801c89e:	461f      	mov	r7, r3
 801c8a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c8a2:	4690      	mov	r8, r2
 801c8a4:	000e      	movs	r6, r1
 801c8a6:	d013      	beq.n	801c8d0 <GAP_LE_Diversify_Function+0x36>
 801c8a8:	b195      	cbz	r5, 801c8d0 <GAP_LE_Diversify_Function+0x36>
 801c8aa:	4602      	mov	r2, r0
 801c8ac:	a902      	add	r1, sp, #8
 801c8ae:	a801      	add	r0, sp, #4
 801c8b0:	f7fe fc99 	bl	801b1e6 <AcquireGAPStackInfo>
 801c8b4:	0004      	movs	r4, r0
 801c8b6:	d10d      	bne.n	801c8d4 <GAP_LE_Diversify_Function+0x3a>
 801c8b8:	463b      	mov	r3, r7
 801c8ba:	4642      	mov	r2, r8
 801c8bc:	4631      	mov	r1, r6
 801c8be:	9500      	str	r5, [sp, #0]
 801c8c0:	9802      	ldr	r0, [sp, #8]
 801c8c2:	f001 fd08 	bl	801e2d6 <SM_Diversify_Function>
 801c8c6:	4604      	mov	r4, r0
 801c8c8:	9801      	ldr	r0, [sp, #4]
 801c8ca:	f7fc fe6b 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c8ce:	e001      	b.n	801c8d4 <GAP_LE_Diversify_Function+0x3a>
 801c8d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c8d4:	4620      	mov	r0, r4
 801c8d6:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i.GAP_LE_Enable:

0801c8da <GAP_LE_Enable>:
 801c8da:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801c8dc:	460c      	mov	r4, r1
 801c8de:	4605      	mov	r5, r0
 801c8e0:	4602      	mov	r2, r0
 801c8e2:	a901      	add	r1, sp, #4
 801c8e4:	4668      	mov	r0, sp
 801c8e6:	f7fd f8ab 	bl	8019a40 <AcquireGAPLEContext>
 801c8ea:	b340      	cbz	r0, 801c93e <GAP_LE_Enable+0x64>
 801c8ec:	9800      	ldr	r0, [sp, #0]
 801c8ee:	b318      	cbz	r0, 801c938 <GAP_LE_Enable+0x5e>
 801c8f0:	9b01      	ldr	r3, [sp, #4]
 801c8f2:	b1fb      	cbz	r3, 801c934 <GAP_LE_Enable+0x5a>
 801c8f4:	8bd9      	ldrh	r1, [r3, #30]
 801c8f6:	040a      	lsls	r2, r1, #16
 801c8f8:	d504      	bpl.n	801c904 <GAP_LE_Enable+0x2a>
 801c8fa:	f7fe fc55 	bl	801b1a8 <ReleaseGAPLEContext>
 801c8fe:	f06f 0467 	mvn.w	r4, #103	; 0x67
 801c902:	e01e      	b.n	801c942 <GAP_LE_Enable+0x68>
 801c904:	b98c      	cbnz	r4, 801c92a <GAP_LE_Enable+0x50>
 801c906:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801c90a:	07c0      	lsls	r0, r0, #31
 801c90c:	d00d      	beq.n	801c92a <GAP_LE_Enable+0x50>
 801c90e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801c910:	b910      	cbnz	r0, 801c918 <GAP_LE_Enable+0x3e>
 801c912:	f011 0f11 	tst.w	r1, #17
 801c916:	d002      	beq.n	801c91e <GAP_LE_Enable+0x44>
 801c918:	f06f 0462 	mvn.w	r4, #98	; 0x62
 801c91c:	e006      	b.n	801c92c <GAP_LE_Enable+0x52>
 801c91e:	4628      	mov	r0, r5
 801c920:	f7ff fc2d 	bl	801c17e <GAP_LE_Advertising_Disable>
 801c924:	4628      	mov	r0, r5
 801c926:	f7ff fe3f 	bl	801c5a8 <GAP_LE_Cancel_Scan>
 801c92a:	2400      	movs	r4, #0
 801c92c:	9800      	ldr	r0, [sp, #0]
 801c92e:	f7fe fc3b 	bl	801b1a8 <ReleaseGAPLEContext>
 801c932:	e006      	b.n	801c942 <GAP_LE_Enable+0x68>
 801c934:	f7fe fc38 	bl	801b1a8 <ReleaseGAPLEContext>
 801c938:	f06f 0437 	mvn.w	r4, #55	; 0x37
 801c93c:	e001      	b.n	801c942 <GAP_LE_Enable+0x68>
 801c93e:	f06f 0401 	mvn.w	r4, #1
 801c942:	4620      	mov	r0, r4
 801c944:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.GAP_LE_Generate_Long_Term_Key:

0801c946 <GAP_LE_Generate_Long_Term_Key>:
 801c946:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 801c94a:	461e      	mov	r6, r3
 801c94c:	e9dd 480e 	ldrd	r4, r8, [sp, #56]	; 0x38
 801c950:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c952:	4691      	mov	r9, r2
 801c954:	ea5f 0a01 	movs.w	sl, r1
 801c958:	4683      	mov	fp, r0
 801c95a:	d047      	beq.n	801c9ec <GAP_LE_Generate_Long_Term_Key+0xa6>
 801c95c:	f1b9 0f00 	cmp.w	r9, #0
 801c960:	d044      	beq.n	801c9ec <GAP_LE_Generate_Long_Term_Key+0xa6>
 801c962:	b3f6      	cbz	r6, 801c9e2 <GAP_LE_Generate_Long_Term_Key+0x9c>
 801c964:	b3ec      	cbz	r4, 801c9e2 <GAP_LE_Generate_Long_Term_Key+0x9c>
 801c966:	ea5f 0008 	movs.w	r0, r8
 801c96a:	d03f      	beq.n	801c9ec <GAP_LE_Generate_Long_Term_Key+0xa6>
 801c96c:	b3cd      	cbz	r5, 801c9e2 <GAP_LE_Generate_Long_Term_Key+0x9c>
 801c96e:	465a      	mov	r2, fp
 801c970:	a901      	add	r1, sp, #4
 801c972:	a803      	add	r0, sp, #12
 801c974:	f7fe fc37 	bl	801b1e6 <AcquireGAPStackInfo>
 801c978:	0007      	movs	r7, r0
 801c97a:	d139      	bne.n	801c9f0 <GAP_LE_Generate_Long_Term_Key+0xaa>
 801c97c:	9901      	ldr	r1, [sp, #4]
 801c97e:	4658      	mov	r0, fp
 801c980:	3144      	adds	r1, #68	; 0x44
 801c982:	f003 fe09 	bl	8020598 <_HCI_LE_Rand>
 801c986:	0007      	movs	r7, r0
 801c988:	d10b      	bne.n	801c9a2 <GAP_LE_Generate_Long_Term_Key+0x5c>
 801c98a:	9901      	ldr	r1, [sp, #4]
 801c98c:	f851 0f44 	ldr.w	r0, [r1, #68]!
 801c990:	6028      	str	r0, [r5, #0]
 801c992:	6848      	ldr	r0, [r1, #4]
 801c994:	6068      	str	r0, [r5, #4]
 801c996:	4658      	mov	r0, fp
 801c998:	f003 fdfe 	bl	8020598 <_HCI_LE_Rand>
 801c99c:	b128      	cbz	r0, 801c9aa <GAP_LE_Generate_Long_Term_Key+0x64>
 801c99e:	f06f 0738 	mvn.w	r7, #56	; 0x38
 801c9a2:	9803      	ldr	r0, [sp, #12]
 801c9a4:	f7fc fdfe 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801c9a8:	e022      	b.n	801c9f0 <GAP_LE_Generate_Long_Term_Key+0xaa>
 801c9aa:	9801      	ldr	r0, [sp, #4]
 801c9ac:	2100      	movs	r1, #0
 801c9ae:	1842      	adds	r2, r0, r1
 801c9b0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801c9b4:	5462      	strb	r2, [r4, r1]
 801c9b6:	1c49      	adds	r1, r1, #1
 801c9b8:	2902      	cmp	r1, #2
 801c9ba:	d3f8      	bcc.n	801c9ae <GAP_LE_Generate_Long_Term_Key+0x68>
 801c9bc:	ab02      	add	r3, sp, #8
 801c9be:	462a      	mov	r2, r5
 801c9c0:	4651      	mov	r1, sl
 801c9c2:	f7ff f891 	bl	801bae8 <DivMaskGeneration>
 801c9c6:	0007      	movs	r7, r0
 801c9c8:	d1eb      	bne.n	801c9a2 <GAP_LE_Generate_Long_Term_Key+0x5c>
 801c9ca:	8820      	ldrh	r0, [r4, #0]
 801c9cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801c9d0:	4048      	eors	r0, r1
 801c9d2:	f8a8 0000 	strh.w	r0, [r8]
 801c9d6:	8822      	ldrh	r2, [r4, #0]
 801c9d8:	2300      	movs	r3, #0
 801c9da:	4649      	mov	r1, r9
 801c9dc:	9600      	str	r6, [sp, #0]
 801c9de:	9801      	ldr	r0, [sp, #4]
 801c9e0:	e000      	b.n	801c9e4 <GAP_LE_Generate_Long_Term_Key+0x9e>
 801c9e2:	e003      	b.n	801c9ec <GAP_LE_Generate_Long_Term_Key+0xa6>
 801c9e4:	f001 fc77 	bl	801e2d6 <SM_Diversify_Function>
 801c9e8:	4607      	mov	r7, r0
 801c9ea:	e7da      	b.n	801c9a2 <GAP_LE_Generate_Long_Term_Key+0x5c>
 801c9ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c9f0:	b004      	add	sp, #16
 801c9f2:	4638      	mov	r0, r7
 801c9f4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

Disassembly of section i.GAP_LE_Initialize:

0801c9f8 <GAP_LE_Initialize>:
 801c9f8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c9fc:	000c      	movs	r4, r1
 801c9fe:	4681      	mov	r9, r0
 801ca00:	d075      	beq.n	801caee <GAP_LE_Initialize+0xf6>
 801ca02:	f7fb ff9b 	bl	801893c <AcquireBluetoothStackInformation>
 801ca06:	0006      	movs	r6, r0
 801ca08:	d071      	beq.n	801caee <GAP_LE_Initialize+0xf6>
 801ca0a:	207c      	movs	r0, #124	; 0x7c
 801ca0c:	f7f6 fcd6 	bl	80133bc <BTPS_AllocateMemory>
 801ca10:	6020      	str	r0, [r4, #0]
 801ca12:	2800      	cmp	r0, #0
 801ca14:	d064      	beq.n	801cae0 <GAP_LE_Initialize+0xe8>
 801ca16:	227c      	movs	r2, #124	; 0x7c
 801ca18:	2100      	movs	r1, #0
 801ca1a:	f7f6 fd50 	bl	80134be <BTPS_MemInitialize>
 801ca1e:	6821      	ldr	r1, [r4, #0]
 801ca20:	6c70      	ldr	r0, [r6, #68]	; 0x44
 801ca22:	6408      	str	r0, [r1, #64]	; 0x40
 801ca24:	a901      	add	r1, sp, #4
 801ca26:	4648      	mov	r0, r9
 801ca28:	f003 f9e8 	bl	801fdfc <HCI_Version_Supported>
 801ca2c:	f06f 0538 	mvn.w	r5, #56	; 0x38
 801ca30:	f04f 0800 	mov.w	r8, #0
 801ca34:	bbf0      	cbnz	r0, 801cab4 <GAP_LE_Initialize+0xbc>
 801ca36:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801ca3a:	2806      	cmp	r0, #6
 801ca3c:	d34b      	bcc.n	801cad6 <GAP_LE_Initialize+0xde>
 801ca3e:	4648      	mov	r0, r9
 801ca40:	f003 f848 	bl	801fad4 <HCI_Query_LE_Controller_Support>
 801ca44:	b3b8      	cbz	r0, 801cab6 <GAP_LE_Initialize+0xbe>
 801ca46:	464a      	mov	r2, r9
 801ca48:	492b      	ldr	r1, [pc, #172]	; (801caf8 <GAP_LE_Initialize+0x100>)
 801ca4a:	4610      	mov	r0, r2
 801ca4c:	f003 f897 	bl	801fb7e <HCI_Register_Event_Callback>
 801ca50:	f06f 0714 	mvn.w	r7, #20
 801ca54:	2800      	cmp	r0, #0
 801ca56:	dd37      	ble.n	801cac8 <GAP_LE_Initialize+0xd0>
 801ca58:	6821      	ldr	r1, [r4, #0]
 801ca5a:	60c8      	str	r0, [r1, #12]
 801ca5c:	6821      	ldr	r1, [r4, #0]
 801ca5e:	4648      	mov	r0, r9
 801ca60:	3110      	adds	r1, #16
 801ca62:	f003 ff99 	bl	8020998 <_HCI_Read_BD_ADDR>
 801ca66:	bb28      	cbnz	r0, 801cab4 <GAP_LE_Initialize+0xbc>
 801ca68:	6821      	ldr	r1, [r4, #0]
 801ca6a:	4648      	mov	r0, r9
 801ca6c:	3120      	adds	r1, #32
 801ca6e:	f003 fdcc 	bl	802060a <_HCI_LE_Read_White_List_Size>
 801ca72:	b9f8      	cbnz	r0, 801cab4 <GAP_LE_Initialize+0xbc>
 801ca74:	4645      	mov	r5, r8
 801ca76:	4b21      	ldr	r3, [pc, #132]	; (801cafc <GAP_LE_Initialize+0x104>)
 801ca78:	2200      	movs	r2, #0
 801ca7a:	2106      	movs	r1, #6
 801ca7c:	4648      	mov	r0, r9
 801ca7e:	f8cd 8000 	str.w	r8, [sp]
 801ca82:	f006 f87b 	bl	8022b7c <L2CA_Register_Fixed_Channel>
 801ca86:	2800      	cmp	r0, #0
 801ca88:	dd1e      	ble.n	801cac8 <GAP_LE_Initialize+0xd0>
 801ca8a:	6821      	ldr	r1, [r4, #0]
 801ca8c:	4b1b      	ldr	r3, [pc, #108]	; (801cafc <GAP_LE_Initialize+0x104>)
 801ca8e:	2200      	movs	r2, #0
 801ca90:	6048      	str	r0, [r1, #4]
 801ca92:	2105      	movs	r1, #5
 801ca94:	4648      	mov	r0, r9
 801ca96:	9500      	str	r5, [sp, #0]
 801ca98:	f006 f870 	bl	8022b7c <L2CA_Register_Fixed_Channel>
 801ca9c:	2800      	cmp	r0, #0
 801ca9e:	dd13      	ble.n	801cac8 <GAP_LE_Initialize+0xd0>
 801caa0:	6821      	ldr	r1, [r4, #0]
 801caa2:	6088      	str	r0, [r1, #8]
 801caa4:	6820      	ldr	r0, [r4, #0]
 801caa6:	7745      	strb	r5, [r0, #29]
 801caa8:	6820      	ldr	r0, [r4, #0]
 801caaa:	7705      	strb	r5, [r0, #28]
 801caac:	6821      	ldr	r1, [r4, #0]
 801caae:	f8c1 9000 	str.w	r9, [r1]
 801cab2:	e001      	b.n	801cab8 <GAP_LE_Initialize+0xc0>
 801cab4:	e009      	b.n	801caca <GAP_LE_Initialize+0xd2>
 801cab6:	e00e      	b.n	801cad6 <GAP_LE_Initialize+0xde>
 801cab8:	6820      	ldr	r0, [r4, #0]
 801caba:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 801cabe:	6820      	ldr	r0, [r4, #0]
 801cac0:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
 801cac4:	2500      	movs	r5, #0
 801cac6:	e00d      	b.n	801cae4 <GAP_LE_Initialize+0xec>
 801cac8:	463d      	mov	r5, r7
 801caca:	6820      	ldr	r0, [r4, #0]
 801cacc:	f7f6 fc90 	bl	80133f0 <BTPS_FreeMemory>
 801cad0:	f8c4 8000 	str.w	r8, [r4]
 801cad4:	e006      	b.n	801cae4 <GAP_LE_Initialize+0xec>
 801cad6:	6821      	ldr	r1, [r4, #0]
 801cad8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801cadc:	83c8      	strh	r0, [r1, #30]
 801cade:	e7f1      	b.n	801cac4 <GAP_LE_Initialize+0xcc>
 801cae0:	f06f 0527 	mvn.w	r5, #39	; 0x27
 801cae4:	4630      	mov	r0, r6
 801cae6:	f7fc fd5d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801caea:	e002      	b.n	801caf2 <GAP_LE_Initialize+0xfa>
 801caec:	e7ff      	b.n	801caee <GAP_LE_Initialize+0xf6>
 801caee:	f06f 0501 	mvn.w	r5, #1
 801caf2:	4628      	mov	r0, r5
 801caf4:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 801caf8:	0801e4ef 	.word	0x0801e4ef
 801cafc:	0801e613 	.word	0x0801e613

Disassembly of section i.GAP_LE_Pair_Remote_Device:

0801cb00 <GAP_LE_Pair_Remote_Device>:
 801cb00:	e92d 43ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 801cb04:	b085      	sub	sp, #20
 801cb06:	4680      	mov	r8, r0
 801cb08:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	; 0x40
 801cb0c:	461f      	mov	r7, r3
 801cb0e:	a806      	add	r0, sp, #24
 801cb10:	f7fc fc95 	bl	801943e <CompareNULLBluetoothAddress>
 801cb14:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801cb18:	2800      	cmp	r0, #0
 801cb1a:	d157      	bne.n	801cbcc <GAP_LE_Pair_Remote_Device+0xcc>
 801cb1c:	2f00      	cmp	r7, #0
 801cb1e:	d055      	beq.n	801cbcc <GAP_LE_Pair_Remote_Device+0xcc>
 801cb20:	2e00      	cmp	r6, #0
 801cb22:	d053      	beq.n	801cbcc <GAP_LE_Pair_Remote_Device+0xcc>
 801cb24:	a806      	add	r0, sp, #24
 801cb26:	9000      	str	r0, [sp, #0]
 801cb28:	4643      	mov	r3, r8
 801cb2a:	aa01      	add	r2, sp, #4
 801cb2c:	a902      	add	r1, sp, #8
 801cb2e:	a803      	add	r0, sp, #12
 801cb30:	f7fe fb80 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801cb34:	0004      	movs	r4, r0
 801cb36:	d14a      	bne.n	801cbce <GAP_LE_Pair_Remote_Device+0xce>
 801cb38:	9802      	ldr	r0, [sp, #8]
 801cb3a:	7f00      	ldrb	r0, [r0, #28]
 801cb3c:	2802      	cmp	r0, #2
 801cb3e:	d005      	beq.n	801cb4c <GAP_LE_Pair_Remote_Device+0x4c>
 801cb40:	f06f 046a 	mvn.w	r4, #106	; 0x6a
 801cb44:	9803      	ldr	r0, [sp, #12]
 801cb46:	f7fc fd2d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801cb4a:	e040      	b.n	801cbce <GAP_LE_Pair_Remote_Device+0xce>
 801cb4c:	9801      	ldr	r0, [sp, #4]
 801cb4e:	464b      	mov	r3, r9
 801cb50:	4632      	mov	r2, r6
 801cb52:	2106      	movs	r1, #6
 801cb54:	3028      	adds	r0, #40	; 0x28
 801cb56:	f7fe feae 	bl	801b8b6 <CreateCallbackInfoEntry>
 801cb5a:	b3a0      	cbz	r0, 801cbc6 <GAP_LE_Pair_Remote_Device+0xc6>
 801cb5c:	2100      	movs	r1, #0
 801cb5e:	9801      	ldr	r0, [sp, #4]
 801cb60:	f7fe fbec 	bl	801b33c <AllocateSecurityManagerContext>
 801cb64:	f06f 0641 	mvn.w	r6, #65	; 0x41
 801cb68:	b310      	cbz	r0, 801cbb0 <GAP_LE_Pair_Remote_Device+0xb0>
 801cb6a:	9901      	ldr	r1, [sp, #4]
 801cb6c:	7938      	ldrb	r0, [r7, #4]
 801cb6e:	463b      	mov	r3, r7
 801cb70:	69cd      	ldr	r5, [r1, #28]
 801cb72:	2201      	movs	r2, #1
 801cb74:	74e8      	strb	r0, [r5, #19]
 801cb76:	9802      	ldr	r0, [sp, #8]
 801cb78:	f7fe fd48 	bl	801b60c <BuildAndSendPairingPDU>
 801cb7c:	0004      	movs	r4, r0
 801cb7e:	d112      	bne.n	801cba6 <GAP_LE_Pair_Remote_Device+0xa6>
 801cb80:	9902      	ldr	r1, [sp, #8]
 801cb82:	2207      	movs	r2, #7
 801cb84:	f105 0014 	add.w	r0, r5, #20
 801cb88:	3128      	adds	r1, #40	; 0x28
 801cb8a:	f7f6 fc94 	bl	80134b6 <BTPS_MemCopy>
 801cb8e:	9801      	ldr	r0, [sp, #4]
 801cb90:	f247 5330 	movw	r3, #30000	; 0x7530
 801cb94:	4a10      	ldr	r2, [pc, #64]	; (801cbd8 <GAP_LE_Pair_Remote_Device+0xd8>)
 801cb96:	8801      	ldrh	r1, [r0, #0]
 801cb98:	4640      	mov	r0, r8
 801cb9a:	f7fc fe31 	bl	8019800 <BTPS_StartTimer>
 801cb9e:	6028      	str	r0, [r5, #0]
 801cba0:	2800      	cmp	r0, #0
 801cba2:	d1cf      	bne.n	801cb44 <GAP_LE_Pair_Remote_Device+0x44>
 801cba4:	4634      	mov	r4, r6
 801cba6:	9801      	ldr	r0, [sp, #4]
 801cba8:	f7ff f812 	bl	801bbd0 <FreeSecurityManagerResources>
 801cbac:	b90c      	cbnz	r4, 801cbb2 <GAP_LE_Pair_Remote_Device+0xb2>
 801cbae:	e7c9      	b.n	801cb44 <GAP_LE_Pair_Remote_Device+0x44>
 801cbb0:	4634      	mov	r4, r6
 801cbb2:	9801      	ldr	r0, [sp, #4]
 801cbb4:	2106      	movs	r1, #6
 801cbb6:	3028      	adds	r0, #40	; 0x28
 801cbb8:	f7fe fe9d 	bl	801b8f6 <DeleteCallbackInfoByType>
 801cbbc:	2800      	cmp	r0, #0
 801cbbe:	d0c1      	beq.n	801cb44 <GAP_LE_Pair_Remote_Device+0x44>
 801cbc0:	f7fc f889 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801cbc4:	e7be      	b.n	801cb44 <GAP_LE_Pair_Remote_Device+0x44>
 801cbc6:	e7ff      	b.n	801cbc8 <GAP_LE_Pair_Remote_Device+0xc8>
 801cbc8:	462c      	mov	r4, r5
 801cbca:	e7bb      	b.n	801cb44 <GAP_LE_Pair_Remote_Device+0x44>
 801cbcc:	462c      	mov	r4, r5
 801cbce:	b009      	add	sp, #36	; 0x24
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbd6:	0000      	.short	0x0000
 801cbd8:	0801e495 	.word	0x0801e495

Disassembly of section i.GAP_LE_Perform_Scan:

0801cbdc <GAP_LE_Perform_Scan>:
 801cbdc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 801cbe0:	460f      	mov	r7, r1
 801cbe2:	e9dd 8510 	ldrd	r8, r5, [sp, #64]	; 0x40
 801cbe6:	4683      	mov	fp, r0
 801cbe8:	4699      	mov	r9, r3
 801cbea:	4692      	mov	sl, r2
 801cbec:	4619      	mov	r1, r3
 801cbee:	4610      	mov	r0, r2
 801cbf0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cbf2:	f001 fc3f 	bl	801e474 <TestValidScanParameters>
 801cbf6:	2800      	cmp	r0, #0
 801cbf8:	d05c      	beq.n	801ccb4 <GAP_LE_Perform_Scan+0xd8>
 801cbfa:	2d00      	cmp	r5, #0
 801cbfc:	d05a      	beq.n	801ccb4 <GAP_LE_Perform_Scan+0xd8>
 801cbfe:	465a      	mov	r2, fp
 801cc00:	a902      	add	r1, sp, #8
 801cc02:	a803      	add	r0, sp, #12
 801cc04:	f7fe faef 	bl	801b1e6 <AcquireGAPStackInfo>
 801cc08:	0004      	movs	r4, r0
 801cc0a:	d155      	bne.n	801ccb8 <GAP_LE_Perform_Scan+0xdc>
 801cc0c:	9802      	ldr	r0, [sp, #8]
 801cc0e:	2102      	movs	r1, #2
 801cc10:	3054      	adds	r0, #84	; 0x54
 801cc12:	f001 fbc9 	bl	801e3a8 <SearchCallbackInfoByType>
 801cc16:	b128      	cbz	r0, 801cc24 <GAP_LE_Perform_Scan+0x48>
 801cc18:	f06f 0468 	mvn.w	r4, #104	; 0x68
 801cc1c:	9803      	ldr	r0, [sp, #12]
 801cc1e:	f7fc fcc1 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801cc22:	e049      	b.n	801ccb8 <GAP_LE_Perform_Scan+0xdc>
 801cc24:	9802      	ldr	r0, [sp, #8]
 801cc26:	462a      	mov	r2, r5
 801cc28:	2102      	movs	r1, #2
 801cc2a:	3054      	adds	r0, #84	; 0x54
 801cc2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cc2e:	f7fe fe42 	bl	801b8b6 <CreateCallbackInfoEntry>
 801cc32:	b3a8      	cbz	r0, 801cca0 <GAP_LE_Perform_Scan+0xc4>
 801cc34:	b10f      	cbz	r7, 801cc3a <GAP_LE_Perform_Scan+0x5e>
 801cc36:	2f01      	cmp	r7, #1
 801cc38:	d001      	beq.n	801cc3e <GAP_LE_Perform_Scan+0x62>
 801cc3a:	2400      	movs	r4, #0
 801cc3c:	e000      	b.n	801cc40 <GAP_LE_Perform_Scan+0x64>
 801cc3e:	2401      	movs	r4, #1
 801cc40:	b10e      	cbz	r6, 801cc46 <GAP_LE_Perform_Scan+0x6a>
 801cc42:	2501      	movs	r5, #1
 801cc44:	e000      	b.n	801cc48 <GAP_LE_Perform_Scan+0x6c>
 801cc46:	2500      	movs	r5, #0
 801cc48:	f1b8 0f00 	cmp.w	r8, #0
 801cc4c:	d001      	beq.n	801cc52 <GAP_LE_Perform_Scan+0x76>
 801cc4e:	2601      	movs	r6, #1
 801cc50:	e000      	b.n	801cc54 <GAP_LE_Perform_Scan+0x78>
 801cc52:	2600      	movs	r6, #0
 801cc54:	980e      	ldr	r0, [sp, #56]	; 0x38
 801cc56:	f7fe fb8a 	bl	801b36e <AssignHCIAddressType>
 801cc5a:	4680      	mov	r8, r0
 801cc5c:	4650      	mov	r0, sl
 801cc5e:	f7fe fe01 	bl	801b864 <ConvertToBasebandSlots>
 801cc62:	b287      	uxth	r7, r0
 801cc64:	4648      	mov	r0, r9
 801cc66:	f7fe fdfd 	bl	801b864 <ConvertToBasebandSlots>
 801cc6a:	e9cd 8500 	strd	r8, r5, [sp]
 801cc6e:	b283      	uxth	r3, r0
 801cc70:	463a      	mov	r2, r7
 801cc72:	4621      	mov	r1, r4
 801cc74:	4658      	mov	r0, fp
 801cc76:	f003 fdbf 	bl	80207f8 <_HCI_LE_Set_Scan_Parameters>
 801cc7a:	0004      	movs	r4, r0
 801cc7c:	d106      	bne.n	801cc8c <GAP_LE_Perform_Scan+0xb0>
 801cc7e:	4632      	mov	r2, r6
 801cc80:	2101      	movs	r1, #1
 801cc82:	4658      	mov	r0, fp
 801cc84:	f003 fd92 	bl	80207ac <_HCI_LE_Set_Scan_Enable>
 801cc88:	0004      	movs	r4, r0
 801cc8a:	d00a      	beq.n	801cca2 <GAP_LE_Perform_Scan+0xc6>
 801cc8c:	9802      	ldr	r0, [sp, #8]
 801cc8e:	2102      	movs	r1, #2
 801cc90:	3054      	adds	r0, #84	; 0x54
 801cc92:	f7fe fe30 	bl	801b8f6 <DeleteCallbackInfoByType>
 801cc96:	2800      	cmp	r0, #0
 801cc98:	d0c0      	beq.n	801cc1c <GAP_LE_Perform_Scan+0x40>
 801cc9a:	f7fc f81c 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801cc9e:	e7bd      	b.n	801cc1c <GAP_LE_Perform_Scan+0x40>
 801cca0:	e005      	b.n	801ccae <GAP_LE_Perform_Scan+0xd2>
 801cca2:	9802      	ldr	r0, [sp, #8]
 801cca4:	4906      	ldr	r1, [pc, #24]	; (801ccc0 <GAP_LE_Perform_Scan+0xe4>)
 801cca6:	65c1      	str	r1, [r0, #92]	; 0x5c
 801cca8:	4906      	ldr	r1, [pc, #24]	; (801ccc4 <GAP_LE_Perform_Scan+0xe8>)
 801ccaa:	6641      	str	r1, [r0, #100]	; 0x64
 801ccac:	e7b6      	b.n	801cc1c <GAP_LE_Perform_Scan+0x40>
 801ccae:	f06f 0441 	mvn.w	r4, #65	; 0x41
 801ccb2:	e7b3      	b.n	801cc1c <GAP_LE_Perform_Scan+0x40>
 801ccb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ccb8:	b004      	add	sp, #16
 801ccba:	4620      	mov	r0, r4
 801ccbc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 801ccc0:	0801a77d 	.word	0x0801a77d
 801ccc4:	0801bcb9 	.word	0x0801bcb9

Disassembly of section i.GAP_LE_Query_Encryption_Mode:

0801ccc8 <GAP_LE_Query_Encryption_Mode>:
 801ccc8:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
 801ccca:	b085      	sub	sp, #20
 801cccc:	4604      	mov	r4, r0
 801ccce:	461d      	mov	r5, r3
 801ccd0:	a806      	add	r0, sp, #24
 801ccd2:	f7fc fbb4 	bl	801943e <CompareNULLBluetoothAddress>
 801ccd6:	b988      	cbnz	r0, 801ccfc <GAP_LE_Query_Encryption_Mode+0x34>
 801ccd8:	b185      	cbz	r5, 801ccfc <GAP_LE_Query_Encryption_Mode+0x34>
 801ccda:	a806      	add	r0, sp, #24
 801ccdc:	9000      	str	r0, [sp, #0]
 801ccde:	4623      	mov	r3, r4
 801cce0:	aa01      	add	r2, sp, #4
 801cce2:	a903      	add	r1, sp, #12
 801cce4:	a802      	add	r0, sp, #8
 801cce6:	f7fe faa5 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801ccea:	0004      	movs	r4, r0
 801ccec:	d108      	bne.n	801cd00 <GAP_LE_Query_Encryption_Mode+0x38>
 801ccee:	9801      	ldr	r0, [sp, #4]
 801ccf0:	7d80      	ldrb	r0, [r0, #22]
 801ccf2:	7028      	strb	r0, [r5, #0]
 801ccf4:	9802      	ldr	r0, [sp, #8]
 801ccf6:	f7fc fc55 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ccfa:	e001      	b.n	801cd00 <GAP_LE_Query_Encryption_Mode+0x38>
 801ccfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801cd00:	b009      	add	sp, #36	; 0x24
 801cd02:	4620      	mov	r0, r4
 801cd04:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.GAP_LE_Reestablish_Security:

0801cd08 <GAP_LE_Reestablish_Security>:
 801cd08:	e92d 43ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 801cd0c:	b085      	sub	sp, #20
 801cd0e:	4680      	mov	r8, r0
 801cd10:	e9dd 7910 	ldrd	r7, r9, [sp, #64]	; 0x40
 801cd14:	461d      	mov	r5, r3
 801cd16:	a806      	add	r0, sp, #24
 801cd18:	f7fc fb91 	bl	801943e <CompareNULLBluetoothAddress>
 801cd1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801cd20:	2800      	cmp	r0, #0
 801cd22:	d16a      	bne.n	801cdfa <GAP_LE_Reestablish_Security+0xf2>
 801cd24:	2d00      	cmp	r5, #0
 801cd26:	d068      	beq.n	801cdfa <GAP_LE_Reestablish_Security+0xf2>
 801cd28:	2f00      	cmp	r7, #0
 801cd2a:	d066      	beq.n	801cdfa <GAP_LE_Reestablish_Security+0xf2>
 801cd2c:	a806      	add	r0, sp, #24
 801cd2e:	9000      	str	r0, [sp, #0]
 801cd30:	4643      	mov	r3, r8
 801cd32:	aa01      	add	r2, sp, #4
 801cd34:	a903      	add	r1, sp, #12
 801cd36:	a802      	add	r0, sp, #8
 801cd38:	f7fe fa7c 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801cd3c:	0004      	movs	r4, r0
 801cd3e:	d15d      	bne.n	801cdfc <GAP_LE_Reestablish_Security+0xf4>
 801cd40:	9801      	ldr	r0, [sp, #4]
 801cd42:	69c1      	ldr	r1, [r0, #28]
 801cd44:	b911      	cbnz	r1, 801cd4c <GAP_LE_Reestablish_Security+0x44>
 801cd46:	7901      	ldrb	r1, [r0, #4]
 801cd48:	07c9      	lsls	r1, r1, #31
 801cd4a:	d005      	beq.n	801cd58 <GAP_LE_Reestablish_Security+0x50>
 801cd4c:	f06f 0474 	mvn.w	r4, #116	; 0x74
 801cd50:	9802      	ldr	r0, [sp, #8]
 801cd52:	f7fc fc27 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801cd56:	e051      	b.n	801cdfc <GAP_LE_Reestablish_Security+0xf4>
 801cd58:	464b      	mov	r3, r9
 801cd5a:	463a      	mov	r2, r7
 801cd5c:	2107      	movs	r1, #7
 801cd5e:	3028      	adds	r0, #40	; 0x28
 801cd60:	f7fe fda9 	bl	801b8b6 <CreateCallbackInfoEntry>
 801cd64:	f06f 0741 	mvn.w	r7, #65	; 0x41
 801cd68:	b3c8      	cbz	r0, 801cdde <GAP_LE_Reestablish_Security+0xd6>
 801cd6a:	9803      	ldr	r0, [sp, #12]
 801cd6c:	7f01      	ldrb	r1, [r0, #28]
 801cd6e:	2901      	cmp	r1, #1
 801cd70:	d01a      	beq.n	801cda8 <GAP_LE_Reestablish_Security+0xa0>
 801cd72:	2902      	cmp	r1, #2
 801cd74:	d116      	bne.n	801cda4 <GAP_LE_Reestablish_Security+0x9c>
 801cd76:	7828      	ldrb	r0, [r5, #0]
 801cd78:	b1a0      	cbz	r0, 801cda4 <GAP_LE_Reestablish_Security+0x9c>
 801cd7a:	78aa      	ldrb	r2, [r5, #2]
 801cd7c:	1fd0      	subs	r0, r2, #7
 801cd7e:	2809      	cmp	r0, #9
 801cd80:	d810      	bhi.n	801cda4 <GAP_LE_Reestablish_Security+0x9c>
 801cd82:	2110      	movs	r1, #16
 801cd84:	1ce8      	adds	r0, r5, #3
 801cd86:	f001 f855 	bl	801de34 <MaskEncryptionKey>
 801cd8a:	1ce8      	adds	r0, r5, #3
 801cd8c:	9000      	str	r0, [sp, #0]
 801cd8e:	9801      	ldr	r0, [sp, #4]
 801cd90:	8aab      	ldrh	r3, [r5, #20]
 801cd92:	f105 0216 	add.w	r2, r5, #22
 801cd96:	8801      	ldrh	r1, [r0, #0]
 801cd98:	4640      	mov	r0, r8
 801cd9a:	f003 fd8b 	bl	80208b4 <_HCI_LE_Start_Encryption>
 801cd9e:	0004      	movs	r4, r0
 801cda0:	d017      	beq.n	801cdd2 <GAP_LE_Reestablish_Security+0xca>
 801cda2:	e01e      	b.n	801cde2 <GAP_LE_Reestablish_Security+0xda>
 801cda4:	4634      	mov	r4, r6
 801cda6:	e01c      	b.n	801cde2 <GAP_LE_Reestablish_Security+0xda>
 801cda8:	7829      	ldrb	r1, [r5, #0]
 801cdaa:	2900      	cmp	r1, #0
 801cdac:	d1fa      	bne.n	801cda4 <GAP_LE_Reestablish_Security+0x9c>
 801cdae:	78eb      	ldrb	r3, [r5, #3]
 801cdb0:	78aa      	ldrb	r2, [r5, #2]
 801cdb2:	9901      	ldr	r1, [sp, #4]
 801cdb4:	f7fe fc9f 	bl	801b6f6 <BuildAndSendSlaveSecurityRequestPDU>
 801cdb8:	0004      	movs	r4, r0
 801cdba:	d112      	bne.n	801cde2 <GAP_LE_Reestablish_Security+0xda>
 801cdbc:	9801      	ldr	r0, [sp, #4]
 801cdbe:	f247 5330 	movw	r3, #30000	; 0x7530
 801cdc2:	4a10      	ldr	r2, [pc, #64]	; (801ce04 <GAP_LE_Reestablish_Security+0xfc>)
 801cdc4:	8801      	ldrh	r1, [r0, #0]
 801cdc6:	4640      	mov	r0, r8
 801cdc8:	f7fc fd1a 	bl	8019800 <BTPS_StartTimer>
 801cdcc:	9901      	ldr	r1, [sp, #4]
 801cdce:	6188      	str	r0, [r1, #24]
 801cdd0:	b130      	cbz	r0, 801cde0 <GAP_LE_Reestablish_Security+0xd8>
 801cdd2:	9801      	ldr	r0, [sp, #4]
 801cdd4:	6841      	ldr	r1, [r0, #4]
 801cdd6:	f041 0101 	orr.w	r1, r1, #1
 801cdda:	6041      	str	r1, [r0, #4]
 801cddc:	e7b8      	b.n	801cd50 <GAP_LE_Reestablish_Security+0x48>
 801cdde:	e00a      	b.n	801cdf6 <GAP_LE_Reestablish_Security+0xee>
 801cde0:	463c      	mov	r4, r7
 801cde2:	9801      	ldr	r0, [sp, #4]
 801cde4:	2107      	movs	r1, #7
 801cde6:	3028      	adds	r0, #40	; 0x28
 801cde8:	f7fe fd85 	bl	801b8f6 <DeleteCallbackInfoByType>
 801cdec:	2800      	cmp	r0, #0
 801cdee:	d0af      	beq.n	801cd50 <GAP_LE_Reestablish_Security+0x48>
 801cdf0:	f7fb ff71 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801cdf4:	e7ac      	b.n	801cd50 <GAP_LE_Reestablish_Security+0x48>
 801cdf6:	463c      	mov	r4, r7
 801cdf8:	e7aa      	b.n	801cd50 <GAP_LE_Reestablish_Security+0x48>
 801cdfa:	4634      	mov	r4, r6
 801cdfc:	b009      	add	sp, #36	; 0x24
 801cdfe:	4620      	mov	r0, r4
 801ce00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce04:	0801e495 	.word	0x0801e495

Disassembly of section i.GAP_LE_Regenerate_Long_Term_Key:

0801ce08 <GAP_LE_Regenerate_Long_Term_Key>:
 801ce08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ce0c:	4699      	mov	r9, r3
 801ce0e:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
 801ce12:	4616      	mov	r6, r2
 801ce14:	ea5f 0801 	movs.w	r8, r1
 801ce18:	d020      	beq.n	801ce5c <GAP_LE_Regenerate_Long_Term_Key+0x54>
 801ce1a:	b1fe      	cbz	r6, 801ce5c <GAP_LE_Regenerate_Long_Term_Key+0x54>
 801ce1c:	b1f7      	cbz	r7, 801ce5c <GAP_LE_Regenerate_Long_Term_Key+0x54>
 801ce1e:	b1ed      	cbz	r5, 801ce5c <GAP_LE_Regenerate_Long_Term_Key+0x54>
 801ce20:	4602      	mov	r2, r0
 801ce22:	a901      	add	r1, sp, #4
 801ce24:	a803      	add	r0, sp, #12
 801ce26:	f7fe f9de 	bl	801b1e6 <AcquireGAPStackInfo>
 801ce2a:	0004      	movs	r4, r0
 801ce2c:	d118      	bne.n	801ce60 <GAP_LE_Regenerate_Long_Term_Key+0x58>
 801ce2e:	ab02      	add	r3, sp, #8
 801ce30:	463a      	mov	r2, r7
 801ce32:	4641      	mov	r1, r8
 801ce34:	9801      	ldr	r0, [sp, #4]
 801ce36:	f7fe fe57 	bl	801bae8 <DivMaskGeneration>
 801ce3a:	0004      	movs	r4, r0
 801ce3c:	d10a      	bne.n	801ce54 <GAP_LE_Regenerate_Long_Term_Key+0x4c>
 801ce3e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801ce42:	2300      	movs	r3, #0
 801ce44:	ea82 0209 	eor.w	r2, r2, r9
 801ce48:	4631      	mov	r1, r6
 801ce4a:	9500      	str	r5, [sp, #0]
 801ce4c:	9801      	ldr	r0, [sp, #4]
 801ce4e:	f001 fa42 	bl	801e2d6 <SM_Diversify_Function>
 801ce52:	4604      	mov	r4, r0
 801ce54:	9803      	ldr	r0, [sp, #12]
 801ce56:	f7fc fba5 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ce5a:	e001      	b.n	801ce60 <GAP_LE_Regenerate_Long_Term_Key+0x58>
 801ce5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ce60:	b004      	add	sp, #16
 801ce62:	4620      	mov	r0, r4
 801ce64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.GAP_LE_Register_Remote_Authentication:

0801ce68 <GAP_LE_Register_Remote_Authentication>:
 801ce68:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801ce6c:	4617      	mov	r7, r2
 801ce6e:	000e      	movs	r6, r1
 801ce70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ce74:	d01d      	beq.n	801ceb2 <GAP_LE_Register_Remote_Authentication+0x4a>
 801ce76:	4602      	mov	r2, r0
 801ce78:	4669      	mov	r1, sp
 801ce7a:	a801      	add	r0, sp, #4
 801ce7c:	f7fe f9b3 	bl	801b1e6 <AcquireGAPStackInfo>
 801ce80:	0004      	movs	r4, r0
 801ce82:	d117      	bne.n	801ceb4 <GAP_LE_Register_Remote_Authentication+0x4c>
 801ce84:	9800      	ldr	r0, [sp, #0]
 801ce86:	2105      	movs	r1, #5
 801ce88:	3054      	adds	r0, #84	; 0x54
 801ce8a:	f001 fa8d 	bl	801e3a8 <SearchCallbackInfoByType>
 801ce8e:	b120      	cbz	r0, 801ce9a <GAP_LE_Register_Remote_Authentication+0x32>
 801ce90:	462c      	mov	r4, r5
 801ce92:	9801      	ldr	r0, [sp, #4]
 801ce94:	f7fc fb86 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ce98:	e00c      	b.n	801ceb4 <GAP_LE_Register_Remote_Authentication+0x4c>
 801ce9a:	9800      	ldr	r0, [sp, #0]
 801ce9c:	463b      	mov	r3, r7
 801ce9e:	4632      	mov	r2, r6
 801cea0:	2105      	movs	r1, #5
 801cea2:	3054      	adds	r0, #84	; 0x54
 801cea4:	f7fe fd07 	bl	801b8b6 <CreateCallbackInfoEntry>
 801cea8:	2800      	cmp	r0, #0
 801ceaa:	d1f2      	bne.n	801ce92 <GAP_LE_Register_Remote_Authentication+0x2a>
 801ceac:	f06f 0441 	mvn.w	r4, #65	; 0x41
 801ceb0:	e7ef      	b.n	801ce92 <GAP_LE_Register_Remote_Authentication+0x2a>
 801ceb2:	462c      	mov	r4, r5
 801ceb4:	4620      	mov	r0, r4
 801ceb6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.GAP_LE_Remove_Device_From_White_List:

0801ceba <GAP_LE_Remove_Device_From_White_List>:
 801ceba:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cebe:	461e      	mov	r6, r3
 801cec0:	4617      	mov	r7, r2
 801cec2:	ea5f 0801 	movs.w	r8, r1
 801cec6:	4681      	mov	r9, r0
 801cec8:	d001      	beq.n	801cece <GAP_LE_Remove_Device_From_White_List+0x14>
 801ceca:	b35f      	cbz	r7, 801cf24 <GAP_LE_Remove_Device_From_White_List+0x6a>
 801cecc:	b356      	cbz	r6, 801cf24 <GAP_LE_Remove_Device_From_White_List+0x6a>
 801cece:	464a      	mov	r2, r9
 801ced0:	a901      	add	r1, sp, #4
 801ced2:	4668      	mov	r0, sp
 801ced4:	f7fe f987 	bl	801b1e6 <AcquireGAPStackInfo>
 801ced8:	0004      	movs	r4, r0
 801ceda:	d125      	bne.n	801cf28 <GAP_LE_Remove_Device_From_White_List+0x6e>
 801cedc:	f1b8 0f00 	cmp.w	r8, #0
 801cee0:	d018      	beq.n	801cf14 <GAP_LE_Remove_Device_From_White_List+0x5a>
 801cee2:	4605      	mov	r5, r0
 801cee4:	6030      	str	r0, [r6, #0]
 801cee6:	e010      	b.n	801cf0a <GAP_LE_Remove_Device_From_White_List+0x50>
 801cee8:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 801ceec:	5d38      	ldrb	r0, [r7, r4]
 801ceee:	f7fe fa3e 	bl	801b36e <AssignHCIAddressType>
 801cef2:	4601      	mov	r1, r0
 801cef4:	19e2      	adds	r2, r4, r7
 801cef6:	4648      	mov	r0, r9
 801cef8:	1c52      	adds	r2, r2, #1
 801cefa:	f003 fb9f 	bl	802063c <_HCI_LE_Remove_Device_From_White_List>
 801cefe:	0004      	movs	r4, r0
 801cf00:	d102      	bne.n	801cf08 <GAP_LE_Remove_Device_From_White_List+0x4e>
 801cf02:	6830      	ldr	r0, [r6, #0]
 801cf04:	1c40      	adds	r0, r0, #1
 801cf06:	6030      	str	r0, [r6, #0]
 801cf08:	1c6d      	adds	r5, r5, #1
 801cf0a:	4545      	cmp	r5, r8
 801cf0c:	d206      	bcs.n	801cf1c <GAP_LE_Remove_Device_From_White_List+0x62>
 801cf0e:	2c00      	cmp	r4, #0
 801cf10:	d0ea      	beq.n	801cee8 <GAP_LE_Remove_Device_From_White_List+0x2e>
 801cf12:	e003      	b.n	801cf1c <GAP_LE_Remove_Device_From_White_List+0x62>
 801cf14:	4648      	mov	r0, r9
 801cf16:	f003 f9f8 	bl	802030a <_HCI_LE_Clear_White_List>
 801cf1a:	4604      	mov	r4, r0
 801cf1c:	9800      	ldr	r0, [sp, #0]
 801cf1e:	f7fc fb41 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801cf22:	e001      	b.n	801cf28 <GAP_LE_Remove_Device_From_White_List+0x6e>
 801cf24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801cf28:	4620      	mov	r0, r4
 801cf2a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.GAP_LE_Request_Security:

0801cf30 <GAP_LE_Request_Security>:
 801cf30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf34:	b084      	sub	sp, #16
 801cf36:	4680      	mov	r8, r0
 801cf38:	e9dd 6911 	ldrd	r6, r9, [sp, #68]	; 0x44
 801cf3c:	461f      	mov	r7, r3
 801cf3e:	a805      	add	r0, sp, #20
 801cf40:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 801cf44:	f7fc fa7b 	bl	801943e <CompareNULLBluetoothAddress>
 801cf48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801cf4c:	2800      	cmp	r0, #0
 801cf4e:	d14b      	bne.n	801cfe8 <GAP_LE_Request_Security+0xb8>
 801cf50:	b3e6      	cbz	r6, 801cfcc <GAP_LE_Request_Security+0x9c>
 801cf52:	a805      	add	r0, sp, #20
 801cf54:	9000      	str	r0, [sp, #0]
 801cf56:	4643      	mov	r3, r8
 801cf58:	aa01      	add	r2, sp, #4
 801cf5a:	a902      	add	r1, sp, #8
 801cf5c:	a803      	add	r0, sp, #12
 801cf5e:	f7fe f969 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801cf62:	0004      	movs	r4, r0
 801cf64:	d141      	bne.n	801cfea <GAP_LE_Request_Security+0xba>
 801cf66:	9802      	ldr	r0, [sp, #8]
 801cf68:	7f00      	ldrb	r0, [r0, #28]
 801cf6a:	2801      	cmp	r0, #1
 801cf6c:	d005      	beq.n	801cf7a <GAP_LE_Request_Security+0x4a>
 801cf6e:	f06f 046a 	mvn.w	r4, #106	; 0x6a
 801cf72:	9803      	ldr	r0, [sp, #12]
 801cf74:	f7fc fb16 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801cf78:	e037      	b.n	801cfea <GAP_LE_Request_Security+0xba>
 801cf7a:	9801      	ldr	r0, [sp, #4]
 801cf7c:	464b      	mov	r3, r9
 801cf7e:	4632      	mov	r2, r6
 801cf80:	2106      	movs	r1, #6
 801cf82:	3028      	adds	r0, #40	; 0x28
 801cf84:	f7fe fc97 	bl	801b8b6 <CreateCallbackInfoEntry>
 801cf88:	b360      	cbz	r0, 801cfe4 <GAP_LE_Request_Security+0xb4>
 801cf8a:	2100      	movs	r1, #0
 801cf8c:	9801      	ldr	r0, [sp, #4]
 801cf8e:	f7fe f9d5 	bl	801b33c <AllocateSecurityManagerContext>
 801cf92:	f06f 0641 	mvn.w	r6, #65	; 0x41
 801cf96:	b1d0      	cbz	r0, 801cfce <GAP_LE_Request_Security+0x9e>
 801cf98:	9901      	ldr	r1, [sp, #4]
 801cf9a:	4653      	mov	r3, sl
 801cf9c:	463a      	mov	r2, r7
 801cf9e:	69cd      	ldr	r5, [r1, #28]
 801cfa0:	9802      	ldr	r0, [sp, #8]
 801cfa2:	f7fe fba8 	bl	801b6f6 <BuildAndSendSlaveSecurityRequestPDU>
 801cfa6:	0004      	movs	r4, r0
 801cfa8:	d10b      	bne.n	801cfc2 <GAP_LE_Request_Security+0x92>
 801cfaa:	9801      	ldr	r0, [sp, #4]
 801cfac:	f247 5330 	movw	r3, #30000	; 0x7530
 801cfb0:	4a10      	ldr	r2, [pc, #64]	; (801cff4 <GAP_LE_Request_Security+0xc4>)
 801cfb2:	8801      	ldrh	r1, [r0, #0]
 801cfb4:	4640      	mov	r0, r8
 801cfb6:	f7fc fc23 	bl	8019800 <BTPS_StartTimer>
 801cfba:	6028      	str	r0, [r5, #0]
 801cfbc:	2800      	cmp	r0, #0
 801cfbe:	d1d8      	bne.n	801cf72 <GAP_LE_Request_Security+0x42>
 801cfc0:	4634      	mov	r4, r6
 801cfc2:	9801      	ldr	r0, [sp, #4]
 801cfc4:	f7fe fe04 	bl	801bbd0 <FreeSecurityManagerResources>
 801cfc8:	b914      	cbnz	r4, 801cfd0 <GAP_LE_Request_Security+0xa0>
 801cfca:	e7d2      	b.n	801cf72 <GAP_LE_Request_Security+0x42>
 801cfcc:	e00c      	b.n	801cfe8 <GAP_LE_Request_Security+0xb8>
 801cfce:	4634      	mov	r4, r6
 801cfd0:	9801      	ldr	r0, [sp, #4]
 801cfd2:	2106      	movs	r1, #6
 801cfd4:	3028      	adds	r0, #40	; 0x28
 801cfd6:	f7fe fc8e 	bl	801b8f6 <DeleteCallbackInfoByType>
 801cfda:	2800      	cmp	r0, #0
 801cfdc:	d0c9      	beq.n	801cf72 <GAP_LE_Request_Security+0x42>
 801cfde:	f7fb fe7a 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801cfe2:	e7c6      	b.n	801cf72 <GAP_LE_Request_Security+0x42>
 801cfe4:	462c      	mov	r4, r5
 801cfe6:	e7c4      	b.n	801cf72 <GAP_LE_Request_Security+0x42>
 801cfe8:	462c      	mov	r4, r5
 801cfea:	b008      	add	sp, #32
 801cfec:	4620      	mov	r0, r4
 801cfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cff2:	0000      	.short	0x0000
 801cff4:	0801e495 	.word	0x0801e495

Disassembly of section i.GAP_LE_Resolve_Address:

0801cff8 <GAP_LE_Resolve_Address>:
 801cff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cffc:	b086      	sub	sp, #24
 801cffe:	4614      	mov	r4, r2
 801d000:	461f      	mov	r7, r3
 801d002:	ea5f 0801 	movs.w	r8, r1
 801d006:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801d00a:	d030      	beq.n	801d06e <GAP_LE_Resolve_Address+0x76>
 801d00c:	f3c7 2507 	ubfx	r5, r7, #8, #8
 801d010:	0669      	lsls	r1, r5, #25
 801d012:	d52c      	bpl.n	801d06e <GAP_LE_Resolve_Address+0x76>
 801d014:	0629      	lsls	r1, r5, #24
 801d016:	d42a      	bmi.n	801d06e <GAP_LE_Resolve_Address+0x76>
 801d018:	4602      	mov	r2, r0
 801d01a:	a904      	add	r1, sp, #16
 801d01c:	a803      	add	r0, sp, #12
 801d01e:	f7fe f8e2 	bl	801b1e6 <AcquireGAPStackInfo>
 801d022:	bb20      	cbnz	r0, 801d06e <GAP_LE_Resolve_Address+0x76>
 801d024:	f88d 5002 	strb.w	r5, [sp, #2]
 801d028:	f88d 7001 	strb.w	r7, [sp, #1]
 801d02c:	0e20      	lsrs	r0, r4, #24
 801d02e:	f88d 0000 	strb.w	r0, [sp]
 801d032:	ab02      	add	r3, sp, #8
 801d034:	466a      	mov	r2, sp
 801d036:	4641      	mov	r1, r8
 801d038:	9804      	ldr	r0, [sp, #16]
 801d03a:	f001 f994 	bl	801e366 <SM_Random_Address_Hash>
 801d03e:	0005      	movs	r5, r0
 801d040:	d111      	bne.n	801d066 <GAP_LE_Resolve_Address+0x6e>
 801d042:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801d046:	b2e0      	uxtb	r0, r4
 801d048:	4288      	cmp	r0, r1
 801d04a:	d10b      	bne.n	801d064 <GAP_LE_Resolve_Address+0x6c>
 801d04c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 801d050:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d054:	4288      	cmp	r0, r1
 801d056:	d105      	bne.n	801d064 <GAP_LE_Resolve_Address+0x6c>
 801d058:	f89d 100a 	ldrb.w	r1, [sp, #10]
 801d05c:	f3c4 4007 	ubfx	r0, r4, #16, #8
 801d060:	4288      	cmp	r0, r1
 801d062:	d000      	beq.n	801d066 <GAP_LE_Resolve_Address+0x6e>
 801d064:	4635      	mov	r5, r6
 801d066:	9803      	ldr	r0, [sp, #12]
 801d068:	f7fc fa9c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d06c:	b11d      	cbz	r5, 801d076 <GAP_LE_Resolve_Address+0x7e>
 801d06e:	2000      	movs	r0, #0
 801d070:	b006      	add	sp, #24
 801d072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d076:	2001      	movs	r0, #1
 801d078:	e7fa      	b.n	801d070 <GAP_LE_Resolve_Address+0x78>

Disassembly of section i.GAP_LE_Set_Advertising_Data:

0801d07a <GAP_LE_Set_Advertising_Data>:
 801d07a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801d07e:	4616      	mov	r6, r2
 801d080:	000d      	movs	r5, r1
 801d082:	4607      	mov	r7, r0
 801d084:	d000      	beq.n	801d088 <GAP_LE_Set_Advertising_Data+0xe>
 801d086:	b33e      	cbz	r6, 801d0d8 <GAP_LE_Set_Advertising_Data+0x5e>
 801d088:	4602      	mov	r2, r0
 801d08a:	a901      	add	r1, sp, #4
 801d08c:	4668      	mov	r0, sp
 801d08e:	f7fe f8aa 	bl	801b1e6 <AcquireGAPStackInfo>
 801d092:	0004      	movs	r4, r0
 801d094:	d122      	bne.n	801d0dc <GAP_LE_Set_Advertising_Data+0x62>
 801d096:	b135      	cbz	r5, 801d0a6 <GAP_LE_Set_Advertising_Data+0x2c>
 801d098:	b2e9      	uxtb	r1, r5
 801d09a:	4632      	mov	r2, r6
 801d09c:	4638      	mov	r0, r7
 801d09e:	f003 fb09 	bl	80206b4 <_HCI_LE_Set_Advertising_Data>
 801d0a2:	4604      	mov	r4, r0
 801d0a4:	e014      	b.n	801d0d0 <GAP_LE_Set_Advertising_Data+0x56>
 801d0a6:	201f      	movs	r0, #31
 801d0a8:	f7f6 f988 	bl	80133bc <BTPS_AllocateMemory>
 801d0ac:	0005      	movs	r5, r0
 801d0ae:	d00d      	beq.n	801d0cc <GAP_LE_Set_Advertising_Data+0x52>
 801d0b0:	221f      	movs	r2, #31
 801d0b2:	2100      	movs	r1, #0
 801d0b4:	f7f6 fa03 	bl	80134be <BTPS_MemInitialize>
 801d0b8:	2100      	movs	r1, #0
 801d0ba:	462a      	mov	r2, r5
 801d0bc:	4638      	mov	r0, r7
 801d0be:	f003 faf9 	bl	80206b4 <_HCI_LE_Set_Advertising_Data>
 801d0c2:	4604      	mov	r4, r0
 801d0c4:	4628      	mov	r0, r5
 801d0c6:	f7f6 f993 	bl	80133f0 <BTPS_FreeMemory>
 801d0ca:	e001      	b.n	801d0d0 <GAP_LE_Set_Advertising_Data+0x56>
 801d0cc:	f06f 0441 	mvn.w	r4, #65	; 0x41
 801d0d0:	9800      	ldr	r0, [sp, #0]
 801d0d2:	f7fc fa67 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d0d6:	e001      	b.n	801d0dc <GAP_LE_Set_Advertising_Data+0x62>
 801d0d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d0dc:	4620      	mov	r0, r4
 801d0de:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.GAP_LE_Set_Fixed_Passkey:

0801d0e4 <GAP_LE_Set_Fixed_Passkey>:
 801d0e4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801d0e6:	460d      	mov	r5, r1
 801d0e8:	b1e8      	cbz	r0, 801d126 <GAP_LE_Set_Fixed_Passkey+0x42>
 801d0ea:	4602      	mov	r2, r0
 801d0ec:	4669      	mov	r1, sp
 801d0ee:	a801      	add	r0, sp, #4
 801d0f0:	f7fe f879 	bl	801b1e6 <AcquireGAPStackInfo>
 801d0f4:	0004      	movs	r4, r0
 801d0f6:	d118      	bne.n	801d12a <GAP_LE_Set_Fixed_Passkey+0x46>
 801d0f8:	b185      	cbz	r5, 801d11c <GAP_LE_Set_Fixed_Passkey+0x38>
 801d0fa:	480d      	ldr	r0, [pc, #52]	; (801d130 <GAP_LE_Set_Fixed_Passkey+0x4c>)
 801d0fc:	6829      	ldr	r1, [r5, #0]
 801d0fe:	4281      	cmp	r1, r0
 801d100:	d806      	bhi.n	801d110 <GAP_LE_Set_Fixed_Passkey+0x2c>
 801d102:	9800      	ldr	r0, [sp, #0]
 801d104:	6241      	str	r1, [r0, #36]	; 0x24
 801d106:	8bc1      	ldrh	r1, [r0, #30]
 801d108:	f041 0108 	orr.w	r1, r1, #8
 801d10c:	83c1      	strh	r1, [r0, #30]
 801d10e:	e001      	b.n	801d114 <GAP_LE_Set_Fixed_Passkey+0x30>
 801d110:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d114:	9801      	ldr	r0, [sp, #4]
 801d116:	f7fc fa45 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d11a:	e006      	b.n	801d12a <GAP_LE_Set_Fixed_Passkey+0x46>
 801d11c:	9800      	ldr	r0, [sp, #0]
 801d11e:	8bc1      	ldrh	r1, [r0, #30]
 801d120:	f021 0108 	bic.w	r1, r1, #8
 801d124:	e7f2      	b.n	801d10c <GAP_LE_Set_Fixed_Passkey+0x28>
 801d126:	f06f 0401 	mvn.w	r4, #1
 801d12a:	4620      	mov	r0, r4
 801d12c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 801d12e:	0000      	.short	0x0000
 801d130:	000f423f 	.word	0x000f423f

Disassembly of section i.GAP_LE_Set_Pairability_Mode:

0801d134 <GAP_LE_Set_Pairability_Mode>:
 801d134:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801d136:	460d      	mov	r5, r1
 801d138:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801d13c:	b188      	cbz	r0, 801d162 <GAP_LE_Set_Pairability_Mode+0x2e>
 801d13e:	4602      	mov	r2, r0
 801d140:	a901      	add	r1, sp, #4
 801d142:	4668      	mov	r0, sp
 801d144:	f7fe f84f 	bl	801b1e6 <AcquireGAPStackInfo>
 801d148:	0004      	movs	r4, r0
 801d14a:	d10b      	bne.n	801d164 <GAP_LE_Set_Pairability_Mode+0x30>
 801d14c:	b135      	cbz	r5, 801d15c <GAP_LE_Set_Pairability_Mode+0x28>
 801d14e:	2d01      	cmp	r5, #1
 801d150:	d004      	beq.n	801d15c <GAP_LE_Set_Pairability_Mode+0x28>
 801d152:	4634      	mov	r4, r6
 801d154:	9800      	ldr	r0, [sp, #0]
 801d156:	f7fc fa25 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d15a:	e003      	b.n	801d164 <GAP_LE_Set_Pairability_Mode+0x30>
 801d15c:	9801      	ldr	r0, [sp, #4]
 801d15e:	7745      	strb	r5, [r0, #29]
 801d160:	e7f8      	b.n	801d154 <GAP_LE_Set_Pairability_Mode+0x20>
 801d162:	4634      	mov	r4, r6
 801d164:	4620      	mov	r0, r4
 801d166:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.GAP_LE_Set_Scan_Response_Data:

0801d168 <GAP_LE_Set_Scan_Response_Data>:
 801d168:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801d16c:	4616      	mov	r6, r2
 801d16e:	000d      	movs	r5, r1
 801d170:	4607      	mov	r7, r0
 801d172:	d000      	beq.n	801d176 <GAP_LE_Set_Scan_Response_Data+0xe>
 801d174:	b33e      	cbz	r6, 801d1c6 <GAP_LE_Set_Scan_Response_Data+0x5e>
 801d176:	4602      	mov	r2, r0
 801d178:	a901      	add	r1, sp, #4
 801d17a:	4668      	mov	r0, sp
 801d17c:	f7fe f833 	bl	801b1e6 <AcquireGAPStackInfo>
 801d180:	0004      	movs	r4, r0
 801d182:	d122      	bne.n	801d1ca <GAP_LE_Set_Scan_Response_Data+0x62>
 801d184:	b135      	cbz	r5, 801d194 <GAP_LE_Set_Scan_Response_Data+0x2c>
 801d186:	b2e9      	uxtb	r1, r5
 801d188:	4632      	mov	r2, r6
 801d18a:	4638      	mov	r0, r7
 801d18c:	f003 fb76 	bl	802087c <_HCI_LE_Set_Scan_Response_Data>
 801d190:	4604      	mov	r4, r0
 801d192:	e014      	b.n	801d1be <GAP_LE_Set_Scan_Response_Data+0x56>
 801d194:	201f      	movs	r0, #31
 801d196:	f7f6 f911 	bl	80133bc <BTPS_AllocateMemory>
 801d19a:	0005      	movs	r5, r0
 801d19c:	d00d      	beq.n	801d1ba <GAP_LE_Set_Scan_Response_Data+0x52>
 801d19e:	221f      	movs	r2, #31
 801d1a0:	2100      	movs	r1, #0
 801d1a2:	f7f6 f98c 	bl	80134be <BTPS_MemInitialize>
 801d1a6:	2100      	movs	r1, #0
 801d1a8:	462a      	mov	r2, r5
 801d1aa:	4638      	mov	r0, r7
 801d1ac:	f003 fb66 	bl	802087c <_HCI_LE_Set_Scan_Response_Data>
 801d1b0:	4604      	mov	r4, r0
 801d1b2:	4628      	mov	r0, r5
 801d1b4:	f7f6 f91c 	bl	80133f0 <BTPS_FreeMemory>
 801d1b8:	e001      	b.n	801d1be <GAP_LE_Set_Scan_Response_Data+0x56>
 801d1ba:	f06f 0441 	mvn.w	r4, #65	; 0x41
 801d1be:	9800      	ldr	r0, [sp, #0]
 801d1c0:	f7fc f9f0 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d1c4:	e001      	b.n	801d1ca <GAP_LE_Set_Scan_Response_Data+0x62>
 801d1c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.GAP_LE_Update_Connection_Parameters:

0801d1d0 <GAP_LE_Update_Connection_Parameters>:
 801d1d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d1d2:	b088      	sub	sp, #32
 801d1d4:	4606      	mov	r6, r0
 801d1d6:	461c      	mov	r4, r3
 801d1d8:	a809      	add	r0, sp, #36	; 0x24
 801d1da:	f7fc f930 	bl	801943e <CompareNULLBluetoothAddress>
 801d1de:	bbe8      	cbnz	r0, 801d25c <GAP_LE_Update_Connection_Parameters+0x8c>
 801d1e0:	b3e4      	cbz	r4, 801d25c <GAP_LE_Update_Connection_Parameters+0x8c>
 801d1e2:	4620      	mov	r0, r4
 801d1e4:	f001 f92c 	bl	801e440 <TestValidConnectionParameters>
 801d1e8:	b3c0      	cbz	r0, 801d25c <GAP_LE_Update_Connection_Parameters+0x8c>
 801d1ea:	a809      	add	r0, sp, #36	; 0x24
 801d1ec:	9000      	str	r0, [sp, #0]
 801d1ee:	4633      	mov	r3, r6
 801d1f0:	aa05      	add	r2, sp, #20
 801d1f2:	a904      	add	r1, sp, #16
 801d1f4:	a806      	add	r0, sp, #24
 801d1f6:	f7fe f81d 	bl	801b234 <AcquireGAPStackLELinkInfo>
 801d1fa:	0005      	movs	r5, r0
 801d1fc:	d140      	bne.n	801d280 <GAP_LE_Update_Connection_Parameters+0xb0>
 801d1fe:	9804      	ldr	r0, [sp, #16]
 801d200:	7f00      	ldrb	r0, [r0, #28]
 801d202:	2802      	cmp	r0, #2
 801d204:	d005      	beq.n	801d212 <GAP_LE_Update_Connection_Parameters+0x42>
 801d206:	f06f 056a 	mvn.w	r5, #106	; 0x6a
 801d20a:	9806      	ldr	r0, [sp, #24]
 801d20c:	f7fc f9ca 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d210:	e036      	b.n	801d280 <GAP_LE_Update_Connection_Parameters+0xb0>
 801d212:	8820      	ldrh	r0, [r4, #0]
 801d214:	f7fe fb31 	bl	801b87a <ConvertToTwoBasebandSlots>
 801d218:	9904      	ldr	r1, [sp, #16]
 801d21a:	f8a1 0044 	strh.w	r0, [r1, #68]	; 0x44
 801d21e:	8860      	ldrh	r0, [r4, #2]
 801d220:	f7fe fb2b 	bl	801b87a <ConvertToTwoBasebandSlots>
 801d224:	4601      	mov	r1, r0
 801d226:	9804      	ldr	r0, [sp, #16]
 801d228:	220a      	movs	r2, #10
 801d22a:	f820 1f46 	strh.w	r1, [r0, #70]!
 801d22e:	88e1      	ldrh	r1, [r4, #6]
 801d230:	fbb1 f1f2 	udiv	r1, r1, r2
 801d234:	8041      	strh	r1, [r0, #2]
 801d236:	8920      	ldrh	r0, [r4, #8]
 801d238:	f7fe fb14 	bl	801b864 <ConvertToBasebandSlots>
 801d23c:	9904      	ldr	r1, [sp, #16]
 801d23e:	f8a1 004a 	strh.w	r0, [r1, #74]	; 0x4a
 801d242:	8960      	ldrh	r0, [r4, #10]
 801d244:	f7fe fb0e 	bl	801b864 <ConvertToBasebandSlots>
 801d248:	b281      	uxth	r1, r0
 801d24a:	9804      	ldr	r0, [sp, #16]
 801d24c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
 801d250:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
 801d254:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
 801d258:	88a4      	ldrh	r4, [r4, #4]
 801d25a:	e000      	b.n	801d25e <GAP_LE_Update_Connection_Parameters+0x8e>
 801d25c:	e00e      	b.n	801d27c <GAP_LE_Update_Connection_Parameters+0xac>
 801d25e:	9400      	str	r4, [sp, #0]
 801d260:	9103      	str	r1, [sp, #12]
 801d262:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d266:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 801d26a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 801d26e:	9805      	ldr	r0, [sp, #20]
 801d270:	8801      	ldrh	r1, [r0, #0]
 801d272:	4630      	mov	r0, r6
 801d274:	f003 f85e 	bl	8020334 <_HCI_LE_Connection_Update>
 801d278:	4605      	mov	r5, r0
 801d27a:	e7c6      	b.n	801d20a <GAP_LE_Update_Connection_Parameters+0x3a>
 801d27c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801d280:	b00c      	add	sp, #48	; 0x30
 801d282:	4628      	mov	r0, r5
 801d284:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.L2CA_Event_Callback:

0801d288 <L2CA_Event_Callback>:
 801d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d28c:	b092      	sub	sp, #72	; 0x48
 801d28e:	000d      	movs	r5, r1
 801d290:	4682      	mov	sl, r0
 801d292:	d07c      	beq.n	801d38e <L2CA_Event_Callback+0x106>
 801d294:	6868      	ldr	r0, [r5, #4]
 801d296:	2800      	cmp	r0, #0
 801d298:	d079      	beq.n	801d38e <L2CA_Event_Callback+0x106>
 801d29a:	4652      	mov	r2, sl
 801d29c:	a90b      	add	r1, sp, #44	; 0x2c
 801d29e:	a810      	add	r0, sp, #64	; 0x40
 801d2a0:	f7fd ffa1 	bl	801b1e6 <AcquireGAPStackInfo>
 801d2a4:	2800      	cmp	r0, #0
 801d2a6:	d172      	bne.n	801d38e <L2CA_Event_Callback+0x106>
 801d2a8:	7828      	ldrb	r0, [r5, #0]
 801d2aa:	f10d 0908 	add.w	r9, sp, #8
 801d2ae:	280e      	cmp	r0, #14
 801d2b0:	d004      	beq.n	801d2bc <L2CA_Event_Callback+0x34>
 801d2b2:	280f      	cmp	r0, #15
 801d2b4:	d005      	beq.n	801d2c2 <L2CA_Event_Callback+0x3a>
 801d2b6:	2812      	cmp	r0, #18
 801d2b8:	d10a      	bne.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d2ba:	e00a      	b.n	801d2d2 <L2CA_Event_Callback+0x4a>
 801d2bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d2be:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801d2c0:	e001      	b.n	801d2c6 <L2CA_Event_Callback+0x3e>
 801d2c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d2c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d002      	beq.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d2ca:	464a      	mov	r2, r9
 801d2cc:	68a9      	ldr	r1, [r5, #8]
 801d2ce:	4798      	blx	r3
 801d2d0:	e170      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d2d2:	68a9      	ldr	r1, [r5, #8]
 801d2d4:	2900      	cmp	r1, #0
 801d2d6:	d0fb      	beq.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d2d8:	8908      	ldrh	r0, [r1, #8]
 801d2da:	2800      	cmp	r0, #0
 801d2dc:	d0f8      	beq.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d2de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d2e0:	880a      	ldrh	r2, [r1, #0]
 801d2e2:	8883      	ldrh	r3, [r0, #4]
 801d2e4:	b29b      	uxth	r3, r3
 801d2e6:	429a      	cmp	r2, r3
 801d2e8:	d1f2      	bne.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d2ea:	3058      	adds	r0, #88	; 0x58
 801d2ec:	1c89      	adds	r1, r1, #2
 801d2ee:	f001 f865 	bl	801e3bc <SearchLELinkEntryBD_ADDR>
 801d2f2:	0006      	movs	r6, r0
 801d2f4:	d0ec      	beq.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d2f6:	68ab      	ldr	r3, [r5, #8]
 801d2f8:	69f4      	ldr	r4, [r6, #28]
 801d2fa:	a804      	add	r0, sp, #16
 801d2fc:	68d9      	ldr	r1, [r3, #12]
 801d2fe:	f04f 0800 	mov.w	r8, #0
 801d302:	780f      	ldrb	r7, [r1, #0]
 801d304:	2f0c      	cmp	r7, #12
 801d306:	d2e3      	bcs.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d308:	e8df f007 	tbb	[pc, r7]
 801d30c:	10fe060c 	.word	0x10fe060c
 801d310:	cfb6905e 	.word	0xcfb6905e
 801d314:	fefcfdb6 	.word	0xfefcfdb6
 801d318:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d31a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 801d31c:	e003      	b.n	801d326 <L2CA_Event_Callback+0x9e>
 801d31e:	4632      	mov	r2, r6
 801d320:	4639      	mov	r1, r7
 801d322:	47a0      	blx	r4
 801d324:	e146      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d326:	2c00      	cmp	r4, #0
 801d328:	d1f9      	bne.n	801d31e <L2CA_Event_Callback+0x96>
 801d32a:	e143      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d32c:	8918      	ldrh	r0, [r3, #8]
 801d32e:	2811      	cmp	r0, #17
 801d330:	d3ce      	bcc.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d332:	2c00      	cmp	r4, #0
 801d334:	d0cc      	beq.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d336:	f884 8004 	strb.w	r8, [r4, #4]
 801d33a:	68a8      	ldr	r0, [r5, #8]
 801d33c:	4647      	mov	r7, r8
 801d33e:	2210      	movs	r2, #16
 801d340:	68c1      	ldr	r1, [r0, #12]
 801d342:	a80c      	add	r0, sp, #48	; 0x30
 801d344:	1c49      	adds	r1, r1, #1
 801d346:	f7f6 fd1c 	bl	8013d82 <__aeabi_memcpy>
 801d34a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d34c:	f247 5530 	movw	r5, #30000	; 0x7530
 801d350:	7f00      	ldrb	r0, [r0, #28]
 801d352:	2801      	cmp	r0, #1
 801d354:	d01c      	beq.n	801d390 <L2CA_Event_Callback+0x108>
 801d356:	2802      	cmp	r0, #2
 801d358:	d1ba      	bne.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d35a:	6821      	ldr	r1, [r4, #0]
 801d35c:	b119      	cbz	r1, 801d366 <L2CA_Event_Callback+0xde>
 801d35e:	4650      	mov	r0, sl
 801d360:	f7fc fa98 	bl	8019894 <BTPS_StopTimer>
 801d364:	6027      	str	r7, [r4, #0]
 801d366:	2210      	movs	r2, #16
 801d368:	a90c      	add	r1, sp, #48	; 0x30
 801d36a:	f104 0022 	add.w	r0, r4, #34	; 0x22
 801d36e:	f7f6 fd08 	bl	8013d82 <__aeabi_memcpy>
 801d372:	4631      	mov	r1, r6
 801d374:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d376:	f7fe f9a9 	bl	801b6cc <BuildAndSendPairingRandom>
 801d37a:	2800      	cmp	r0, #0
 801d37c:	d1a8      	bne.n	801d2d0 <L2CA_Event_Callback+0x48>
 801d37e:	8831      	ldrh	r1, [r6, #0]
 801d380:	462b      	mov	r3, r5
 801d382:	4a8f      	ldr	r2, [pc, #572]	; (801d5c0 <L2CA_Event_Callback+0x338>)
 801d384:	4650      	mov	r0, sl
 801d386:	f7fc fa3b 	bl	8019800 <BTPS_StartTimer>
 801d38a:	6020      	str	r0, [r4, #0]
 801d38c:	e112      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d38e:	e114      	b.n	801d5ba <L2CA_Event_Callback+0x332>
 801d390:	7960      	ldrb	r0, [r4, #5]
 801d392:	07c0      	lsls	r0, r0, #31
 801d394:	d013      	beq.n	801d3be <L2CA_Event_Callback+0x136>
 801d396:	6821      	ldr	r1, [r4, #0]
 801d398:	b119      	cbz	r1, 801d3a2 <L2CA_Event_Callback+0x11a>
 801d39a:	4650      	mov	r0, sl
 801d39c:	f7fc fa7a 	bl	8019894 <BTPS_StopTimer>
 801d3a0:	6027      	str	r7, [r4, #0]
 801d3a2:	f104 0222 	add.w	r2, r4, #34	; 0x22
 801d3a6:	4631      	mov	r1, r6
 801d3a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d3aa:	f7fe f8ff 	bl	801b5ac <BuildAndSendPairingConfirmPDU>
 801d3ae:	b930      	cbnz	r0, 801d3be <L2CA_Event_Callback+0x136>
 801d3b0:	8831      	ldrh	r1, [r6, #0]
 801d3b2:	462b      	mov	r3, r5
 801d3b4:	4a82      	ldr	r2, [pc, #520]	; (801d5c0 <L2CA_Event_Callback+0x338>)
 801d3b6:	4650      	mov	r0, sl
 801d3b8:	f7fc fa22 	bl	8019800 <BTPS_StartTimer>
 801d3bc:	6020      	str	r0, [r4, #0]
 801d3be:	2210      	movs	r2, #16
 801d3c0:	a90c      	add	r1, sp, #48	; 0x30
 801d3c2:	f104 0022 	add.w	r0, r4, #34	; 0x22
 801d3c6:	e065      	b.n	801d494 <L2CA_Event_Callback+0x20c>
 801d3c8:	8918      	ldrh	r0, [r3, #8]
 801d3ca:	2811      	cmp	r0, #17
 801d3cc:	d3aa      	bcc.n	801d324 <L2CA_Event_Callback+0x9c>
 801d3ce:	2c00      	cmp	r4, #0
 801d3d0:	d0a8      	beq.n	801d324 <L2CA_Event_Callback+0x9c>
 801d3d2:	f884 8004 	strb.w	r8, [r4, #4]
 801d3d6:	68a8      	ldr	r0, [r5, #8]
 801d3d8:	2210      	movs	r2, #16
 801d3da:	68c1      	ldr	r1, [r0, #12]
 801d3dc:	f104 0042 	add.w	r0, r4, #66	; 0x42
 801d3e0:	1c49      	adds	r1, r1, #1
 801d3e2:	f7f6 fcce 	bl	8013d82 <__aeabi_memcpy>
 801d3e6:	4631      	mov	r1, r6
 801d3e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d3ea:	f7fe f9ba 	bl	801b762 <CheckRemoteConfirmValue>
 801d3ee:	b138      	cbz	r0, 801d400 <L2CA_Event_Callback+0x178>
 801d3f0:	2300      	movs	r3, #0
 801d3f2:	2204      	movs	r2, #4
 801d3f4:	4631      	mov	r1, r6
 801d3f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d3f8:	f7fe f8ed 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801d3fc:	b1a0      	cbz	r0, 801d428 <L2CA_Event_Callback+0x1a0>
 801d3fe:	e0d9      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d400:	6821      	ldr	r1, [r4, #0]
 801d402:	b121      	cbz	r1, 801d40e <L2CA_Event_Callback+0x186>
 801d404:	4650      	mov	r0, sl
 801d406:	f7fc fa45 	bl	8019894 <BTPS_StopTimer>
 801d40a:	f8c4 8000 	str.w	r8, [r4]
 801d40e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d410:	7f01      	ldrb	r1, [r0, #28]
 801d412:	2901      	cmp	r1, #1
 801d414:	d003      	beq.n	801d41e <L2CA_Event_Callback+0x196>
 801d416:	2902      	cmp	r1, #2
 801d418:	d12d      	bne.n	801d476 <L2CA_Event_Callback+0x1ee>
 801d41a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801d41c:	e000      	b.n	801d420 <L2CA_Event_Callback+0x198>
 801d41e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 801d420:	2c00      	cmp	r4, #0
 801d422:	d028      	beq.n	801d476 <L2CA_Event_Callback+0x1ee>
 801d424:	68ab      	ldr	r3, [r5, #8]
 801d426:	e77a      	b.n	801d31e <L2CA_Event_Callback+0x96>
 801d428:	2207      	movs	r2, #7
 801d42a:	e020      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d42c:	8918      	ldrh	r0, [r3, #8]
 801d42e:	2802      	cmp	r0, #2
 801d430:	d321      	bcc.n	801d476 <L2CA_Event_Callback+0x1ee>
 801d432:	2c00      	cmp	r4, #0
 801d434:	d01f      	beq.n	801d476 <L2CA_Event_Callback+0x1ee>
 801d436:	7848      	ldrb	r0, [r1, #1]
 801d438:	280a      	cmp	r0, #10
 801d43a:	d217      	bcs.n	801d46c <L2CA_Event_Callback+0x1e4>
 801d43c:	e8df f000 	tbb	[pc, r0]
 801d440:	0a080616 	.word	0x0a080616
 801d444:	100e0c05 	.word	0x100e0c05
 801d448:	1412      	.short	0x1412
 801d44a:	e7ed      	b.n	801d428 <L2CA_Event_Callback+0x1a0>
 801d44c:	2204      	movs	r2, #4
 801d44e:	e00e      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d450:	2205      	movs	r2, #5
 801d452:	e00c      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d454:	2206      	movs	r2, #6
 801d456:	e00a      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d458:	2208      	movs	r2, #8
 801d45a:	e008      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d45c:	2209      	movs	r2, #9
 801d45e:	e006      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d460:	220a      	movs	r2, #10
 801d462:	e004      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d464:	220b      	movs	r2, #11
 801d466:	e002      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d468:	220c      	movs	r2, #12
 801d46a:	e000      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d46c:	220d      	movs	r2, #13
 801d46e:	4631      	mov	r1, r6
 801d470:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d472:	f7fe fad7 	bl	801ba24 <DispatchPairingStatusCallback>
 801d476:	e09d      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d478:	8918      	ldrh	r0, [r3, #8]
 801d47a:	2811      	cmp	r0, #17
 801d47c:	d30c      	bcc.n	801d498 <L2CA_Event_Callback+0x210>
 801d47e:	2c00      	cmp	r4, #0
 801d480:	d00a      	beq.n	801d498 <L2CA_Event_Callback+0x210>
 801d482:	2010      	movs	r0, #16
 801d484:	f7f5 ff9a 	bl	80133bc <BTPS_AllocateMemory>
 801d488:	6760      	str	r0, [r4, #116]	; 0x74
 801d48a:	b130      	cbz	r0, 801d49a <L2CA_Event_Callback+0x212>
 801d48c:	68a9      	ldr	r1, [r5, #8]
 801d48e:	2210      	movs	r2, #16
 801d490:	68c9      	ldr	r1, [r1, #12]
 801d492:	1c49      	adds	r1, r1, #1
 801d494:	f7f6 fc75 	bl	8013d82 <__aeabi_memcpy>
 801d498:	e08c      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d49a:	2300      	movs	r3, #0
 801d49c:	2208      	movs	r2, #8
 801d49e:	4631      	mov	r1, r6
 801d4a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d4a2:	f7fe f898 	bl	801b5d6 <BuildAndSendPairingFailedPDU>
 801d4a6:	b380      	cbz	r0, 801d50a <L2CA_Event_Callback+0x282>
 801d4a8:	e084      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d4aa:	8918      	ldrh	r0, [r3, #8]
 801d4ac:	280b      	cmp	r0, #11
 801d4ae:	d32d      	bcc.n	801d50c <L2CA_Event_Callback+0x284>
 801d4b0:	b364      	cbz	r4, 801d50c <L2CA_Event_Callback+0x284>
 801d4b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d4b4:	b350      	cbz	r0, 801d50c <L2CA_Event_Callback+0x284>
 801d4b6:	7ce0      	ldrb	r0, [r4, #19]
 801d4b8:	f88d 0010 	strb.w	r0, [sp, #16]
 801d4bc:	2210      	movs	r2, #16
 801d4be:	f109 0009 	add.w	r0, r9, #9
 801d4c2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801d4c4:	f7f6 fc5d 	bl	8013d82 <__aeabi_memcpy>
 801d4c8:	68a8      	ldr	r0, [r5, #8]
 801d4ca:	68c0      	ldr	r0, [r0, #12]
 801d4cc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 801d4d0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801d4d4:	68a8      	ldr	r0, [r5, #8]
 801d4d6:	68c0      	ldr	r0, [r0, #12]
 801d4d8:	f850 1f03 	ldr.w	r1, [r0, #3]!
 801d4dc:	9109      	str	r1, [sp, #36]	; 0x24
 801d4de:	6840      	ldr	r0, [r0, #4]
 801d4e0:	900a      	str	r0, [sp, #40]	; 0x28
 801d4e2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d4e4:	f7f5 ff84 	bl	80133f0 <BTPS_FreeMemory>
 801d4e8:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
 801d4ec:	f8cd 8004 	str.w	r8, [sp, #4]
 801d4f0:	4645      	mov	r5, r8
 801d4f2:	f8cd 8000 	str.w	r8, [sp]
 801d4f6:	464b      	mov	r3, r9
 801d4f8:	2208      	movs	r2, #8
 801d4fa:	4631      	mov	r1, r6
 801d4fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d4fe:	f7fe fa41 	bl	801b984 <DispatchAuthenticationCallback>
 801d502:	e004      	b.n	801d50e <L2CA_Event_Callback+0x286>
 801d504:	e03e      	b.n	801d584 <L2CA_Event_Callback+0x2fc>
 801d506:	e00c      	b.n	801d522 <L2CA_Event_Callback+0x29a>
 801d508:	e051      	b.n	801d5ae <L2CA_Event_Callback+0x326>
 801d50a:	e008      	b.n	801d51e <L2CA_Event_Callback+0x296>
 801d50c:	e039      	b.n	801d582 <L2CA_Event_Callback+0x2fa>
 801d50e:	7425      	strb	r5, [r4, #16]
 801d510:	e031      	b.n	801d576 <L2CA_Event_Callback+0x2ee>
 801d512:	8832      	ldrh	r2, [r6, #0]
 801d514:	492b      	ldr	r1, [pc, #172]	; (801d5c4 <L2CA_Event_Callback+0x33c>)
 801d516:	4650      	mov	r0, sl
 801d518:	f7fb fdf6 	bl	8019108 <BSC_ScheduleAsynchronousCallback>
 801d51c:	e04a      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d51e:	2202      	movs	r2, #2
 801d520:	e7a5      	b.n	801d46e <L2CA_Event_Callback+0x1e6>
 801d522:	8919      	ldrh	r1, [r3, #8]
 801d524:	2908      	cmp	r1, #8
 801d526:	d345      	bcc.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d528:	b35c      	cbz	r4, 801d582 <L2CA_Event_Callback+0x2fa>
 801d52a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801d52c:	b349      	cbz	r1, 801d582 <L2CA_Event_Callback+0x2fa>
 801d52e:	2210      	movs	r2, #16
 801d530:	f7f6 fc27 	bl	8013d82 <__aeabi_memcpy>
 801d534:	68a8      	ldr	r0, [r5, #8]
 801d536:	68c0      	ldr	r0, [r0, #12]
 801d538:	f8d0 1002 	ldr.w	r1, [r0, #2]
 801d53c:	f8cd 1021 	str.w	r1, [sp, #33]	; 0x21
 801d540:	88c0      	ldrh	r0, [r0, #6]
 801d542:	f8ad 0025 	strh.w	r0, [sp, #37]	; 0x25
 801d546:	68a8      	ldr	r0, [r5, #8]
 801d548:	68c0      	ldr	r0, [r0, #12]
 801d54a:	7840      	ldrb	r0, [r0, #1]
 801d54c:	f7fd ff0b 	bl	801b366 <AssignGAPAddressType>
 801d550:	f88d 0020 	strb.w	r0, [sp, #32]
 801d554:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d556:	f7f5 ff4b 	bl	80133f0 <BTPS_FreeMemory>
 801d55a:	f8c4 8074 	str.w	r8, [r4, #116]	; 0x74
 801d55e:	f8cd 8004 	str.w	r8, [sp, #4]
 801d562:	4645      	mov	r5, r8
 801d564:	f8cd 8000 	str.w	r8, [sp]
 801d568:	464b      	mov	r3, r9
 801d56a:	2209      	movs	r2, #9
 801d56c:	4631      	mov	r1, r6
 801d56e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d570:	f7fe fa08 	bl	801b984 <DispatchAuthenticationCallback>
 801d574:	7465      	strb	r5, [r4, #17]
 801d576:	f104 0010 	add.w	r0, r4, #16
 801d57a:	f000 ff58 	bl	801e42e <TestKeyExchange>
 801d57e:	2800      	cmp	r0, #0
 801d580:	d0c7      	beq.n	801d512 <L2CA_Event_Callback+0x28a>
 801d582:	e017      	b.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d584:	891a      	ldrh	r2, [r3, #8]
 801d586:	2a11      	cmp	r2, #17
 801d588:	d314      	bcc.n	801d5b4 <L2CA_Event_Callback+0x32c>
 801d58a:	b19c      	cbz	r4, 801d5b4 <L2CA_Event_Callback+0x32c>
 801d58c:	2210      	movs	r2, #16
 801d58e:	1c49      	adds	r1, r1, #1
 801d590:	f7f6 fbf7 	bl	8013d82 <__aeabi_memcpy>
 801d594:	f8cd 8004 	str.w	r8, [sp, #4]
 801d598:	4645      	mov	r5, r8
 801d59a:	f8cd 8000 	str.w	r8, [sp]
 801d59e:	464b      	mov	r3, r9
 801d5a0:	220a      	movs	r2, #10
 801d5a2:	4631      	mov	r1, r6
 801d5a4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d5a6:	f7fe f9ed 	bl	801b984 <DispatchAuthenticationCallback>
 801d5aa:	74a5      	strb	r5, [r4, #18]
 801d5ac:	e7e3      	b.n	801d576 <L2CA_Event_Callback+0x2ee>
 801d5ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d5b0:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801d5b2:	e6b8      	b.n	801d326 <L2CA_Event_Callback+0x9e>
 801d5b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d5b6:	f7fb fff5 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801d5ba:	b012      	add	sp, #72	; 0x48
 801d5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5c0:	0801e495 	.word	0x0801e495
 801d5c4:	0801e1ab 	.word	0x0801e1ab

0801d5c8 <L2CA_Event_Callback>:
 801d5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5cc:	b09c      	sub	sp, #112	; 0x70
 801d5ce:	4615      	mov	r5, r2
 801d5d0:	000c      	movs	r4, r1
 801d5d2:	d07d      	beq.n	801d6d0 <L2CA_Event_Callback+0x108>
 801d5d4:	2d00      	cmp	r5, #0
 801d5d6:	d07b      	beq.n	801d6d0 <L2CA_Event_Callback+0x108>
 801d5d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 801d5da:	f7fb f9af 	bl	801893c <AcquireBluetoothStackInformation>
 801d5de:	ea5f 0a00 	movs.w	sl, r0
 801d5e2:	d075      	beq.n	801d6d0 <L2CA_Event_Callback+0x108>
 801d5e4:	7820      	ldrb	r0, [r4, #0]
 801d5e6:	f04f 0800 	mov.w	r8, #0
 801d5ea:	f240 39f9 	movw	r9, #1017	; 0x3f9
 801d5ee:	f105 071c 	add.w	r7, r5, #28
 801d5f2:	f04f 0b01 	mov.w	fp, #1
 801d5f6:	280a      	cmp	r0, #10
 801d5f8:	d239      	bcs.n	801d66e <L2CA_Event_Callback+0xa6>
 801d5fa:	e8df f000 	tbb	[pc, r0]
 801d5fe:	4605      	.short	0x4605
 801d600:	fefed36c 	.word	0xfefed36c
 801d604:	fd383838 	.word	0xfd383838
 801d608:	2044      	movs	r0, #68	; 0x44
 801d60a:	f7f5 fed7 	bl	80133bc <BTPS_AllocateMemory>
 801d60e:	0006      	movs	r6, r0
 801d610:	d031      	beq.n	801d676 <L2CA_Event_Callback+0xae>
 801d612:	2244      	movs	r2, #68	; 0x44
 801d614:	2100      	movs	r1, #0
 801d616:	f7f5 ff52 	bl	80134be <BTPS_MemInitialize>
 801d61a:	68a0      	ldr	r0, [r4, #8]
 801d61c:	f850 1f05 	ldr.w	r1, [r0, #5]!
 801d620:	6031      	str	r1, [r6, #0]
 801d622:	8880      	ldrh	r0, [r0, #4]
 801d624:	80b0      	strh	r0, [r6, #4]
 801d626:	68a0      	ldr	r0, [r4, #8]
 801d628:	4631      	mov	r1, r6
 801d62a:	8840      	ldrh	r0, [r0, #2]
 801d62c:	80f0      	strh	r0, [r6, #6]
 801d62e:	f8a6 900a 	strh.w	r9, [r6, #10]
 801d632:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 801d636:	81b0      	strh	r0, [r6, #12]
 801d638:	2003      	movs	r0, #3
 801d63a:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
 801d63e:	68a0      	ldr	r0, [r4, #8]
 801d640:	7900      	ldrb	r0, [r0, #4]
 801d642:	7230      	strb	r0, [r6, #8]
 801d644:	2010      	movs	r0, #16
 801d646:	6170      	str	r0, [r6, #20]
 801d648:	4638      	mov	r0, r7
 801d64a:	f003 fc34 	bl	8020eb6 <AddConnectionInfoEntry>
 801d64e:	b178      	cbz	r0, 801d670 <L2CA_Event_Callback+0xa8>
 801d650:	6928      	ldr	r0, [r5, #16]
 801d652:	b140      	cbz	r0, 801d666 <L2CA_Event_Callback+0x9e>
 801d654:	7b28      	ldrb	r0, [r5, #12]
 801d656:	2801      	cmp	r0, #1
 801d658:	d105      	bne.n	801d666 <L2CA_Event_Callback+0x9e>
 801d65a:	4631      	mov	r1, r6
 801d65c:	4628      	mov	r0, r5
 801d65e:	f007 fb10 	bl	8024c82 <ProcessSDPConnectionRequest>
 801d662:	2800      	cmp	r0, #0
 801d664:	d003      	beq.n	801d66e <L2CA_Event_Callback+0xa6>
 801d666:	4631      	mov	r1, r6
 801d668:	4628      	mov	r0, r5
 801d66a:	f007 fed5 	bl	8025418 <SendConnectionResponse>
 801d66e:	e316      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d670:	4630      	mov	r0, r6
 801d672:	f7f5 febd 	bl	80133f0 <BTPS_FreeMemory>
 801d676:	f8cd 8000 	str.w	r8, [sp]
 801d67a:	68a0      	ldr	r0, [r4, #8]
 801d67c:	2304      	movs	r3, #4
 801d67e:	8842      	ldrh	r2, [r0, #2]
 801d680:	7901      	ldrb	r1, [r0, #4]
 801d682:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d684:	f006 faa4 	bl	8023bd0 <_L2CA_Connect_Response>
 801d688:	e309      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d68a:	68a0      	ldr	r0, [r4, #8]
 801d68c:	8804      	ldrh	r4, [r0, #0]
 801d68e:	8840      	ldrh	r0, [r0, #2]
 801d690:	b138      	cbz	r0, 801d6a2 <L2CA_Event_Callback+0xda>
 801d692:	2801      	cmp	r0, #1
 801d694:	d0eb      	beq.n	801d66e <L2CA_Event_Callback+0xa6>
 801d696:	2200      	movs	r2, #0
 801d698:	4621      	mov	r1, r4
 801d69a:	4628      	mov	r0, r5
 801d69c:	f007 fabf 	bl	8024c1e <ProcessConnectionError>
 801d6a0:	e2fd      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d6a2:	4621      	mov	r1, r4
 801d6a4:	4638      	mov	r0, r7
 801d6a6:	f007 fea3 	bl	80253f0 <SearchConnectionInfoEntry>
 801d6aa:	b178      	cbz	r0, 801d6cc <L2CA_Event_Callback+0x104>
 801d6ac:	f880 b034 	strb.w	fp, [r0, #52]	; 0x34
 801d6b0:	f8ad b018 	strh.w	fp, [sp, #24]
 801d6b4:	8941      	ldrh	r1, [r0, #10]
 801d6b6:	f8ad 101a 	strh.w	r1, [sp, #26]
 801d6ba:	88c1      	ldrh	r1, [r0, #6]
 801d6bc:	ab06      	add	r3, sp, #24
 801d6be:	f644 6220 	movw	r2, #20000	; 0x4e20
 801d6c2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d6c4:	f006 f978 	bl	80239b8 <_L2CA_Config_Request>
 801d6c8:	2800      	cmp	r0, #0
 801d6ca:	d0d0      	beq.n	801d66e <L2CA_Event_Callback+0xa6>
 801d6cc:	4621      	mov	r1, r4
 801d6ce:	e000      	b.n	801d6d2 <L2CA_Event_Callback+0x10a>
 801d6d0:	e2e8      	b.n	801dca4 <L2CA_Event_Callback+0x6dc>
 801d6d2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d6d4:	e2e1      	b.n	801dc9a <L2CA_Event_Callback+0x6d2>
 801d6d6:	68a0      	ldr	r0, [r4, #8]
 801d6d8:	8800      	ldrh	r0, [r0, #0]
 801d6da:	4683      	mov	fp, r0
 801d6dc:	4601      	mov	r1, r0
 801d6de:	4638      	mov	r0, r7
 801d6e0:	f007 fe86 	bl	80253f0 <SearchConnectionInfoEntry>
 801d6e4:	0006      	movs	r6, r0
 801d6e6:	d05a      	beq.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d6e8:	2240      	movs	r2, #64	; 0x40
 801d6ea:	2100      	movs	r1, #0
 801d6ec:	a806      	add	r0, sp, #24
 801d6ee:	f7f5 fee6 	bl	80134be <BTPS_MemInitialize>
 801d6f2:	68a0      	ldr	r0, [r4, #8]
 801d6f4:	2700      	movs	r7, #0
 801d6f6:	8841      	ldrh	r1, [r0, #2]
 801d6f8:	b321      	cbz	r1, 801d744 <L2CA_Event_Callback+0x17c>
 801d6fa:	07c9      	lsls	r1, r1, #31
 801d6fc:	d00e      	beq.n	801d71c <L2CA_Event_Callback+0x154>
 801d6fe:	8880      	ldrh	r0, [r0, #4]
 801d700:	81b0      	strh	r0, [r6, #12]
 801d702:	4548      	cmp	r0, r9
 801d704:	d901      	bls.n	801d70a <L2CA_Event_Callback+0x142>
 801d706:	f8a6 900c 	strh.w	r9, [r6, #12]
 801d70a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801d70e:	f040 0001 	orr.w	r0, r0, #1
 801d712:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d716:	89b0      	ldrh	r0, [r6, #12]
 801d718:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d71c:	68a0      	ldr	r0, [r4, #8]
 801d71e:	7880      	ldrb	r0, [r0, #2]
 801d720:	0700      	lsls	r0, r0, #28
 801d722:	d50f      	bpl.n	801d744 <L2CA_Event_Callback+0x17c>
 801d724:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801d728:	f88d 8038 	strb.w	r8, [sp, #56]	; 0x38
 801d72c:	f040 0008 	orr.w	r0, r0, #8
 801d730:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d734:	68a0      	ldr	r0, [r4, #8]
 801d736:	f890 0020 	ldrb.w	r0, [r0, #32]
 801d73a:	b118      	cbz	r0, 801d744 <L2CA_Event_Callback+0x17c>
 801d73c:	2008      	movs	r0, #8
 801d73e:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d742:	2701      	movs	r7, #1
 801d744:	ab06      	add	r3, sp, #24
 801d746:	463a      	mov	r2, r7
 801d748:	4659      	mov	r1, fp
 801d74a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d74c:	f006 f9fc 	bl	8023b48 <_L2CA_Config_Response>
 801d750:	b120      	cbz	r0, 801d75c <L2CA_Event_Callback+0x194>
 801d752:	6970      	ldr	r0, [r6, #20]
 801d754:	f020 0002 	bic.w	r0, r0, #2
 801d758:	6170      	str	r0, [r6, #20]
 801d75a:	e2a0      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d75c:	b91f      	cbnz	r7, 801d766 <L2CA_Event_Callback+0x19e>
 801d75e:	6970      	ldr	r0, [r6, #20]
 801d760:	f040 0002 	orr.w	r0, r0, #2
 801d764:	e071      	b.n	801d84a <L2CA_Event_Callback+0x282>
 801d766:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 801d768:	b13a      	cbz	r2, 801d77a <L2CA_Event_Callback+0x1b2>
 801d76a:	4631      	mov	r1, r6
 801d76c:	4628      	mov	r0, r5
 801d76e:	4790      	blx	r2
 801d770:	f896 0034 	ldrb.w	r0, [r6, #52]	; 0x34
 801d774:	2802      	cmp	r0, #2
 801d776:	d003      	beq.n	801d780 <L2CA_Event_Callback+0x1b8>
 801d778:	e291      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d77a:	2002      	movs	r0, #2
 801d77c:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
 801d780:	6970      	ldr	r0, [r6, #20]
 801d782:	06c1      	lsls	r1, r0, #27
 801d784:	d58c      	bpl.n	801d6a0 <L2CA_Event_Callback+0xd8>
 801d786:	6929      	ldr	r1, [r5, #16]
 801d788:	2900      	cmp	r1, #0
 801d78a:	d089      	beq.n	801d6a0 <L2CA_Event_Callback+0xd8>
 801d78c:	f040 0020 	orr.w	r0, r0, #32
 801d790:	6170      	str	r0, [r6, #20]
 801d792:	2201      	movs	r2, #1
 801d794:	4631      	mov	r1, r6
 801d796:	4628      	mov	r0, r5
 801d798:	f006 ffb6 	bl	8024708 <DispatchSDPConnectionEvent>
 801d79c:	e27f      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d79e:	4659      	mov	r1, fp
 801d7a0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d7a2:	e27a      	b.n	801dc9a <L2CA_Event_Callback+0x6d2>
 801d7a4:	68a0      	ldr	r0, [r4, #8]
 801d7a6:	8800      	ldrh	r0, [r0, #0]
 801d7a8:	4683      	mov	fp, r0
 801d7aa:	4601      	mov	r1, r0
 801d7ac:	4638      	mov	r0, r7
 801d7ae:	f007 fe1f 	bl	80253f0 <SearchConnectionInfoEntry>
 801d7b2:	0006      	movs	r6, r0
 801d7b4:	d0f3      	beq.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d7b6:	68a0      	ldr	r0, [r4, #8]
 801d7b8:	8840      	ldrh	r0, [r0, #2]
 801d7ba:	2801      	cmp	r0, #1
 801d7bc:	d003      	beq.n	801d7c6 <L2CA_Event_Callback+0x1fe>
 801d7be:	b3e8      	cbz	r0, 801d83c <L2CA_Event_Callback+0x274>
 801d7c0:	2804      	cmp	r0, #4
 801d7c2:	d1ec      	bne.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d7c4:	e26b      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d7c6:	2240      	movs	r2, #64	; 0x40
 801d7c8:	2100      	movs	r1, #0
 801d7ca:	a806      	add	r0, sp, #24
 801d7cc:	f7f5 fe77 	bl	80134be <BTPS_MemInitialize>
 801d7d0:	68a0      	ldr	r0, [r4, #8]
 801d7d2:	8841      	ldrh	r1, [r0, #2]
 801d7d4:	8880      	ldrh	r0, [r0, #4]
 801d7d6:	2800      	cmp	r0, #0
 801d7d8:	d0e1      	beq.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d7da:	07c0      	lsls	r0, r0, #31
 801d7dc:	d013      	beq.n	801d806 <L2CA_Event_Callback+0x23e>
 801d7de:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801d7e2:	f040 0001 	orr.w	r0, r0, #1
 801d7e6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d7ea:	68a0      	ldr	r0, [r4, #8]
 801d7ec:	88c0      	ldrh	r0, [r0, #6]
 801d7ee:	f8ad 001a 	strh.w	r0, [sp, #26]
 801d7f2:	4548      	cmp	r0, r9
 801d7f4:	d904      	bls.n	801d800 <L2CA_Event_Callback+0x238>
 801d7f6:	e001      	b.n	801d7fc <L2CA_Event_Callback+0x234>
 801d7f8:	e04b      	b.n	801d892 <L2CA_Event_Callback+0x2ca>
 801d7fa:	e028      	b.n	801d84e <L2CA_Event_Callback+0x286>
 801d7fc:	f8ad 901a 	strh.w	r9, [sp, #26]
 801d800:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801d804:	8170      	strh	r0, [r6, #10]
 801d806:	68a0      	ldr	r0, [r4, #8]
 801d808:	7900      	ldrb	r0, [r0, #4]
 801d80a:	0700      	lsls	r0, r0, #28
 801d80c:	d50c      	bpl.n	801d828 <L2CA_Event_Callback+0x260>
 801d80e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801d812:	f88d 8038 	strb.w	r8, [sp, #56]	; 0x38
 801d816:	f040 0008 	orr.w	r0, r0, #8
 801d81a:	f8ad 0018 	strh.w	r0, [sp, #24]
 801d81e:	68a0      	ldr	r0, [r4, #8]
 801d820:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 801d824:	2800      	cmp	r0, #0
 801d826:	d1ba      	bne.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d828:	2900      	cmp	r1, #0
 801d82a:	d0b8      	beq.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d82c:	88f1      	ldrh	r1, [r6, #6]
 801d82e:	ab06      	add	r3, sp, #24
 801d830:	f644 6220 	movw	r2, #20000	; 0x4e20
 801d834:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d836:	f006 f8bf 	bl	80239b8 <_L2CA_Config_Request>
 801d83a:	e000      	b.n	801d83e <L2CA_Event_Callback+0x276>
 801d83c:	e002      	b.n	801d844 <L2CA_Event_Callback+0x27c>
 801d83e:	2800      	cmp	r0, #0
 801d840:	d1ad      	bne.n	801d79e <L2CA_Event_Callback+0x1d6>
 801d842:	e22c      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d844:	6970      	ldr	r0, [r6, #20]
 801d846:	f040 0001 	orr.w	r0, r0, #1
 801d84a:	6170      	str	r0, [r6, #20]
 801d84c:	e78b      	b.n	801d766 <L2CA_Event_Callback+0x19e>
 801d84e:	2804      	cmp	r0, #4
 801d850:	68a0      	ldr	r0, [r4, #8]
 801d852:	d017      	beq.n	801d884 <L2CA_Event_Callback+0x2bc>
 801d854:	8846      	ldrh	r6, [r0, #2]
 801d856:	2201      	movs	r2, #1
 801d858:	4631      	mov	r1, r6
 801d85a:	4628      	mov	r0, r5
 801d85c:	f007 f9df 	bl	8024c1e <ProcessConnectionError>
 801d860:	f105 0020 	add.w	r0, r5, #32
 801d864:	9000      	str	r0, [sp, #0]
 801d866:	f8ad 6004 	strh.w	r6, [sp, #4]
 801d86a:	230c      	movs	r3, #12
 801d86c:	2206      	movs	r2, #6
 801d86e:	a901      	add	r1, sp, #4
 801d870:	2003      	movs	r0, #3
 801d872:	f7fb f983 	bl	8018b7c <BSC_DeleteGenericListEntry>
 801d876:	b108      	cbz	r0, 801d87c <L2CA_Event_Callback+0x2b4>
 801d878:	f7fb fa2d 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801d87c:	7820      	ldrb	r0, [r4, #0]
 801d87e:	2804      	cmp	r0, #4
 801d880:	d002      	beq.n	801d888 <L2CA_Event_Callback+0x2c0>
 801d882:	e20c      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d884:	8806      	ldrh	r6, [r0, #0]
 801d886:	e7e6      	b.n	801d856 <L2CA_Event_Callback+0x28e>
 801d888:	4631      	mov	r1, r6
 801d88a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801d88c:	f006 fa80 	bl	8023d90 <_L2CA_Disconnect_Response>
 801d890:	e205      	b.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801d892:	68a0      	ldr	r0, [r4, #8]
 801d894:	8800      	ldrh	r0, [r0, #0]
 801d896:	9016      	str	r0, [sp, #88]	; 0x58
 801d898:	4601      	mov	r1, r0
 801d89a:	4638      	mov	r0, r7
 801d89c:	9719      	str	r7, [sp, #100]	; 0x64
 801d89e:	f007 fda7 	bl	80253f0 <SearchConnectionInfoEntry>
 801d8a2:	ea5f 0900 	movs.w	r9, r0
 801d8a6:	d07d      	beq.n	801d9a4 <L2CA_Event_Callback+0x3dc>
 801d8a8:	2700      	movs	r7, #0
 801d8aa:	f899 0034 	ldrb.w	r0, [r9, #52]	; 0x34
 801d8ae:	463e      	mov	r6, r7
 801d8b0:	2802      	cmp	r0, #2
 801d8b2:	d187      	bne.n	801d7c4 <L2CA_Event_Callback+0x1fc>
 801d8b4:	68a2      	ldr	r2, [r4, #8]
 801d8b6:	8850      	ldrh	r0, [r2, #2]
 801d8b8:	2805      	cmp	r0, #5
 801d8ba:	d374      	bcc.n	801d9a6 <L2CA_Event_Callback+0x3de>
 801d8bc:	6851      	ldr	r1, [r2, #4]
 801d8be:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 801d8c2:	ba5b      	rev16	r3, r3
 801d8c4:	f103 0c05 	add.w	ip, r3, #5
 801d8c8:	fa1f fc8c 	uxth.w	ip, ip
 801d8cc:	4560      	cmp	r0, ip
 801d8ce:	d36c      	bcc.n	801d9aa <L2CA_Event_Callback+0x3e2>
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d06a      	beq.n	801d9aa <L2CA_Event_Callback+0x3e2>
 801d8d4:	780b      	ldrb	r3, [r1, #0]
 801d8d6:	2b08      	cmp	r3, #8
 801d8d8:	d268      	bcs.n	801d9ac <L2CA_Event_Callback+0x3e4>
 801d8da:	e8df f003 	tbb	[pc, r3]
 801d8de:	04e9      	.short	0x04e9
 801d8e0:	fd8c842a 	.word	0xfd8c842a
 801d8e4:	fbfc      	.short	0xfbfc
 801d8e6:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 801d8ea:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 801d8ee:	ba49      	rev16	r1, r1
 801d8f0:	428a      	cmp	r2, r1
 801d8f2:	d11d      	bne.n	801d930 <L2CA_Event_Callback+0x368>
 801d8f4:	2807      	cmp	r0, #7
 801d8f6:	d31b      	bcc.n	801d930 <L2CA_Event_Callback+0x368>
 801d8f8:	2002      	movs	r0, #2
 801d8fa:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
 801d8fe:	68a0      	ldr	r0, [r4, #8]
 801d900:	6840      	ldr	r0, [r0, #4]
 801d902:	f8b0 0005 	ldrh.w	r0, [r0, #5]
 801d906:	ba40      	rev16	r0, r0
 801d908:	85a8      	strh	r0, [r5, #44]	; 0x2c
 801d90a:	68a0      	ldr	r0, [r4, #8]
 801d90c:	8840      	ldrh	r0, [r0, #2]
 801d90e:	1fc0      	subs	r0, r0, #7
 801d910:	0400      	lsls	r0, r0, #16
 801d912:	0c00      	lsrs	r0, r0, #16
 801d914:	85e8      	strh	r0, [r5, #46]	; 0x2e
 801d916:	d004      	beq.n	801d922 <L2CA_Event_Callback+0x35a>
 801d918:	68a0      	ldr	r0, [r4, #8]
 801d91a:	6840      	ldr	r0, [r0, #4]
 801d91c:	1dc0      	adds	r0, r0, #7
 801d91e:	6328      	str	r0, [r5, #48]	; 0x30
 801d920:	e001      	b.n	801d926 <L2CA_Event_Callback+0x35e>
 801d922:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
 801d926:	7e28      	ldrb	r0, [r5, #24]
 801d928:	2703      	movs	r7, #3
 801d92a:	2800      	cmp	r0, #0
 801d92c:	d1e1      	bne.n	801d8f2 <L2CA_Event_Callback+0x32a>
 801d92e:	2707      	movs	r7, #7
 801d930:	e183      	b.n	801dc3a <L2CA_Event_Callback+0x672>
 801d932:	1f40      	subs	r0, r0, #5
 801d934:	2300      	movs	r3, #0
 801d936:	4680      	mov	r8, r0
 801d938:	461a      	mov	r2, r3
 801d93a:	1d49      	adds	r1, r1, #5
 801d93c:	f007 f908 	bl	8024b50 <ParseServiceSearchPattern>
 801d940:	0006      	movs	r6, r0
 801d942:	d44e      	bmi.n	801d9e2 <L2CA_Event_Callback+0x41a>
 801d944:	f7f5 fd3a 	bl	80133bc <BTPS_AllocateMemory>
 801d948:	9017      	str	r0, [sp, #92]	; 0x5c
 801d94a:	b368      	cbz	r0, 801d9a8 <L2CA_Event_Callback+0x3e0>
 801d94c:	68a0      	ldr	r0, [r4, #8]
 801d94e:	4633      	mov	r3, r6
 801d950:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d952:	6841      	ldr	r1, [r0, #4]
 801d954:	4640      	mov	r0, r8
 801d956:	1d49      	adds	r1, r1, #5
 801d958:	f007 f8fa 	bl	8024b50 <ParseServiceSearchPattern>
 801d95c:	2800      	cmp	r0, #0
 801d95e:	db3c      	blt.n	801d9da <L2CA_Event_Callback+0x412>
 801d960:	f3c0 160f 	ubfx	r6, r0, #4, #16
 801d964:	68a0      	ldr	r0, [r4, #8]
 801d966:	6841      	ldr	r1, [r0, #4]
 801d968:	4640      	mov	r0, r8
 801d96a:	1d49      	adds	r1, r1, #5
 801d96c:	f006 fd59 	bl	8024422 <CalculateDataTypeLength>
 801d970:	b380      	cbz	r0, 801d9d4 <L2CA_Event_Callback+0x40c>
 801d972:	68a1      	ldr	r1, [r4, #8]
 801d974:	f100 0208 	add.w	r2, r0, #8
 801d978:	b292      	uxth	r2, r2
 801d97a:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 801d97e:	4594      	cmp	ip, r2
 801d980:	d329      	bcc.n	801d9d6 <L2CA_Event_Callback+0x40e>
 801d982:	6849      	ldr	r1, [r1, #4]
 801d984:	1d42      	adds	r2, r0, #5
 801d986:	440a      	add	r2, r1
 801d988:	8812      	ldrh	r2, [r2, #0]
 801d98a:	ba53      	rev16	r3, r2
 801d98c:	1dc2      	adds	r2, r0, #7
 801d98e:	f811 8002 	ldrb.w	r8, [r1, r2]
 801d992:	f1b8 0f10 	cmp.w	r8, #16
 801d996:	d81b      	bhi.n	801d9d0 <L2CA_Event_Callback+0x408>
 801d998:	4440      	add	r0, r8
 801d99a:	3008      	adds	r0, #8
 801d99c:	b280      	uxth	r0, r0
 801d99e:	4584      	cmp	ip, r0
 801d9a0:	d316      	bcc.n	801d9d0 <L2CA_Event_Callback+0x408>
 801d9a2:	e004      	b.n	801d9ae <L2CA_Event_Callback+0x3e6>
 801d9a4:	e177      	b.n	801dc96 <L2CA_Event_Callback+0x6ce>
 801d9a6:	e180      	b.n	801dcaa <L2CA_Event_Callback+0x6e2>
 801d9a8:	e019      	b.n	801d9de <L2CA_Event_Callback+0x416>
 801d9aa:	e13b      	b.n	801dc24 <L2CA_Event_Callback+0x65c>
 801d9ac:	e080      	b.n	801dab0 <L2CA_Event_Callback+0x4e8>
 801d9ae:	1888      	adds	r0, r1, r2
 801d9b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801d9b2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801d9b6:	e9cd 6200 	strd	r6, r2, [sp]
 801d9ba:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 801d9be:	4649      	mov	r1, r9
 801d9c0:	ba43      	rev16	r3, r0
 801d9c2:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801d9c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801d9c8:	f007 fba4 	bl	8025114 <ProcessServiceSearchRequest>
 801d9cc:	4606      	mov	r6, r0
 801d9ce:	e121      	b.n	801dc14 <L2CA_Event_Callback+0x64c>
 801d9d0:	2605      	movs	r6, #5
 801d9d2:	e11f      	b.n	801dc14 <L2CA_Event_Callback+0x64c>
 801d9d4:	e001      	b.n	801d9da <L2CA_Event_Callback+0x412>
 801d9d6:	2604      	movs	r6, #4
 801d9d8:	e11c      	b.n	801dc14 <L2CA_Event_Callback+0x64c>
 801d9da:	2603      	movs	r6, #3
 801d9dc:	e11a      	b.n	801dc14 <L2CA_Event_Callback+0x64c>
 801d9de:	2606      	movs	r6, #6
 801d9e0:	e067      	b.n	801dab2 <L2CA_Event_Callback+0x4ea>
 801d9e2:	2603      	movs	r6, #3
 801d9e4:	e065      	b.n	801dab2 <L2CA_Event_Callback+0x4ea>
 801d9e6:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801d9ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801d9ec:	e07d      	b.n	801daea <L2CA_Event_Callback+0x522>
 801d9ee:	4649      	mov	r1, r9
 801d9f0:	4798      	blx	r3
 801d9f2:	4607      	mov	r7, r0
 801d9f4:	e121      	b.n	801dc3a <L2CA_Event_Callback+0x672>
 801d9f6:	280b      	cmp	r0, #11
 801d9f8:	d3f3      	bcc.n	801d9e2 <L2CA_Event_Callback+0x41a>
 801d9fa:	f8d1 2005 	ldr.w	r2, [r1, #5]
 801d9fe:	7a0b      	ldrb	r3, [r1, #8]
 801da00:	ba12      	rev	r2, r2
 801da02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801da06:	431a      	orrs	r2, r3
 801da08:	9202      	str	r2, [sp, #8]
 801da0a:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 801da0e:	380b      	subs	r0, #11
 801da10:	ba52      	rev16	r2, r2
 801da12:	e9cd 0200 	strd	r0, r2, [sp]
 801da16:	2300      	movs	r3, #0
 801da18:	461a      	mov	r2, r3
 801da1a:	310b      	adds	r1, #11
 801da1c:	f006 ff7e 	bl	802491c <ParseAttributeIDList>
 801da20:	0006      	movs	r6, r0
 801da22:	d4de      	bmi.n	801d9e2 <L2CA_Event_Callback+0x41a>
 801da24:	f7f5 fcca 	bl	80133bc <BTPS_AllocateMemory>
 801da28:	ea5f 0800 	movs.w	r8, r0
 801da2c:	d0d7      	beq.n	801d9de <L2CA_Event_Callback+0x416>
 801da2e:	68a0      	ldr	r0, [r4, #8]
 801da30:	4633      	mov	r3, r6
 801da32:	4642      	mov	r2, r8
 801da34:	6841      	ldr	r1, [r0, #4]
 801da36:	9800      	ldr	r0, [sp, #0]
 801da38:	310b      	adds	r1, #11
 801da3a:	f006 ff6f 	bl	802491c <ParseAttributeIDList>
 801da3e:	0006      	movs	r6, r0
 801da40:	d432      	bmi.n	801daa8 <L2CA_Event_Callback+0x4e0>
 801da42:	68a0      	ldr	r0, [r4, #8]
 801da44:	6841      	ldr	r1, [r0, #4]
 801da46:	9800      	ldr	r0, [sp, #0]
 801da48:	310b      	adds	r1, #11
 801da4a:	f006 fcea 	bl	8024422 <CalculateDataTypeLength>
 801da4e:	b358      	cbz	r0, 801daa8 <L2CA_Event_Callback+0x4e0>
 801da50:	68a1      	ldr	r1, [r4, #8]
 801da52:	f100 020c 	add.w	r2, r0, #12
 801da56:	b292      	uxth	r2, r2
 801da58:	884b      	ldrh	r3, [r1, #2]
 801da5a:	4293      	cmp	r3, r2
 801da5c:	d322      	bcc.n	801daa4 <L2CA_Event_Callback+0x4dc>
 801da5e:	6849      	ldr	r1, [r1, #4]
 801da60:	f100 020b 	add.w	r2, r0, #11
 801da64:	4694      	mov	ip, r2
 801da66:	5c8a      	ldrb	r2, [r1, r2]
 801da68:	2a10      	cmp	r2, #16
 801da6a:	d819      	bhi.n	801daa0 <L2CA_Event_Callback+0x4d8>
 801da6c:	4410      	add	r0, r2
 801da6e:	300c      	adds	r0, #12
 801da70:	b280      	uxth	r0, r0
 801da72:	4283      	cmp	r3, r0
 801da74:	d314      	bcc.n	801daa0 <L2CA_Event_Callback+0x4d8>
 801da76:	2206      	movs	r2, #6
 801da78:	fbb6 f2f2 	udiv	r2, r6, r2
 801da7c:	eb01 000c 	add.w	r0, r1, ip
 801da80:	9b01      	ldr	r3, [sp, #4]
 801da82:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801da86:	e9cd 2800 	strd	r2, r8, [sp]
 801da8a:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 801da8e:	4649      	mov	r1, r9
 801da90:	ba43      	rev16	r3, r0
 801da92:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801da96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801da98:	f007 f93a 	bl	8024d10 <ProcessServiceAttributeRequest>
 801da9c:	4606      	mov	r6, r0
 801da9e:	e004      	b.n	801daaa <L2CA_Event_Callback+0x4e2>
 801daa0:	2605      	movs	r6, #5
 801daa2:	e002      	b.n	801daaa <L2CA_Event_Callback+0x4e2>
 801daa4:	2604      	movs	r6, #4
 801daa6:	e000      	b.n	801daaa <L2CA_Event_Callback+0x4e2>
 801daa8:	2603      	movs	r6, #3
 801daaa:	4640      	mov	r0, r8
 801daac:	f7f5 fca0 	bl	80133f0 <BTPS_FreeMemory>
 801dab0:	b3f6      	cbz	r6, 801db30 <L2CA_Event_Callback+0x568>
 801dab2:	f88d 601e 	strb.w	r6, [sp, #30]
 801dab6:	0a30      	lsrs	r0, r6, #8
 801dab8:	f88d 001d 	strb.w	r0, [sp, #29]
 801dabc:	a906      	add	r1, sp, #24
 801dabe:	9816      	ldr	r0, [sp, #88]	; 0x58
 801dac0:	e9cd 0100 	strd	r0, r1, [sp]
 801dac4:	68a0      	ldr	r0, [r4, #8]
 801dac6:	2302      	movs	r3, #2
 801dac8:	2101      	movs	r1, #1
 801daca:	6840      	ldr	r0, [r0, #4]
 801dacc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 801dad0:	ba42      	rev16	r2, r0
 801dad2:	e002      	b.n	801dada <L2CA_Event_Callback+0x512>
 801dad4:	e0a2      	b.n	801dc1c <L2CA_Event_Callback+0x654>
 801dad6:	e00c      	b.n	801daf2 <L2CA_Event_Callback+0x52a>
 801dad8:	e004      	b.n	801dae4 <L2CA_Event_Callback+0x51c>
 801dada:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801dadc:	f006 fe27 	bl	802472e <FormatResponsePDUHeaderAndSend>
 801dae0:	b338      	cbz	r0, 801db32 <L2CA_Event_Callback+0x56a>
 801dae2:	e0aa      	b.n	801dc3a <L2CA_Event_Callback+0x672>
 801dae4:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801dae8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801daea:	2b00      	cmp	r3, #0
 801daec:	f47f af7f 	bne.w	801d9ee <L2CA_Event_Callback+0x426>
 801daf0:	e0a3      	b.n	801dc3a <L2CA_Event_Callback+0x672>
 801daf2:	1f40      	subs	r0, r0, #5
 801daf4:	2300      	movs	r3, #0
 801daf6:	4680      	mov	r8, r0
 801daf8:	461a      	mov	r2, r3
 801dafa:	1d49      	adds	r1, r1, #5
 801dafc:	f007 f828 	bl	8024b50 <ParseServiceSearchPattern>
 801db00:	0006      	movs	r6, r0
 801db02:	d48e      	bmi.n	801da22 <L2CA_Event_Callback+0x45a>
 801db04:	f7f5 fc5a 	bl	80133bc <BTPS_AllocateMemory>
 801db08:	9017      	str	r0, [sp, #92]	; 0x5c
 801db0a:	2800      	cmp	r0, #0
 801db0c:	d08e      	beq.n	801da2c <L2CA_Event_Callback+0x464>
 801db0e:	68a0      	ldr	r0, [r4, #8]
 801db10:	4633      	mov	r3, r6
 801db12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801db14:	6841      	ldr	r1, [r0, #4]
 801db16:	4640      	mov	r0, r8
 801db18:	1d49      	adds	r1, r1, #5
 801db1a:	f007 f819 	bl	8024b50 <ParseServiceSearchPattern>
 801db1e:	2800      	cmp	r0, #0
 801db20:	f6ff af5b 	blt.w	801d9da <L2CA_Event_Callback+0x412>
 801db24:	f3c0 100f 	ubfx	r0, r0, #4, #16
 801db28:	901a      	str	r0, [sp, #104]	; 0x68
 801db2a:	68a0      	ldr	r0, [r4, #8]
 801db2c:	6841      	ldr	r1, [r0, #4]
 801db2e:	e001      	b.n	801db34 <L2CA_Event_Callback+0x56c>
 801db30:	e083      	b.n	801dc3a <L2CA_Event_Callback+0x672>
 801db32:	e080      	b.n	801dc36 <L2CA_Event_Callback+0x66e>
 801db34:	4640      	mov	r0, r8
 801db36:	1d49      	adds	r1, r1, #5
 801db38:	f006 fc73 	bl	8024422 <CalculateDataTypeLength>
 801db3c:	0006      	movs	r6, r0
 801db3e:	f43f af4c 	beq.w	801d9da <L2CA_Event_Callback+0x412>
 801db42:	68a2      	ldr	r2, [r4, #8]
 801db44:	1d70      	adds	r0, r6, #5
 801db46:	b283      	uxth	r3, r0
 801db48:	8851      	ldrh	r1, [r2, #2]
 801db4a:	4299      	cmp	r1, r3
 801db4c:	f4ff af45 	bcc.w	801d9da <L2CA_Event_Callback+0x412>
 801db50:	6852      	ldr	r2, [r2, #4]
 801db52:	f106 0807 	add.w	r8, r6, #7
 801db56:	4410      	add	r0, r2
 801db58:	2300      	movs	r3, #0
 801db5a:	8800      	ldrh	r0, [r0, #0]
 801db5c:	ba40      	rev16	r0, r0
 801db5e:	9001      	str	r0, [sp, #4]
 801db60:	1b88      	subs	r0, r1, r6
 801db62:	1fc0      	subs	r0, r0, #7
 801db64:	eb02 0108 	add.w	r1, r2, r8
 801db68:	461a      	mov	r2, r3
 801db6a:	9000      	str	r0, [sp, #0]
 801db6c:	f006 fed6 	bl	802491c <ParseAttributeIDList>
 801db70:	9005      	str	r0, [sp, #20]
 801db72:	2800      	cmp	r0, #0
 801db74:	dbd4      	blt.n	801db20 <L2CA_Event_Callback+0x558>
 801db76:	f7f5 fc21 	bl	80133bc <BTPS_AllocateMemory>
 801db7a:	9018      	str	r0, [sp, #96]	; 0x60
 801db7c:	b3f0      	cbz	r0, 801dbfc <L2CA_Event_Callback+0x634>
 801db7e:	68a0      	ldr	r0, [r4, #8]
 801db80:	9b05      	ldr	r3, [sp, #20]
 801db82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801db84:	6841      	ldr	r1, [r0, #4]
 801db86:	9800      	ldr	r0, [sp, #0]
 801db88:	4441      	add	r1, r8
 801db8a:	f006 fec7 	bl	802491c <ParseAttributeIDList>
 801db8e:	9005      	str	r0, [sp, #20]
 801db90:	2800      	cmp	r0, #0
 801db92:	db3b      	blt.n	801dc0c <L2CA_Event_Callback+0x644>
 801db94:	68a0      	ldr	r0, [r4, #8]
 801db96:	6841      	ldr	r1, [r0, #4]
 801db98:	9800      	ldr	r0, [sp, #0]
 801db9a:	4441      	add	r1, r8
 801db9c:	f006 fc41 	bl	8024422 <CalculateDataTypeLength>
 801dba0:	b368      	cbz	r0, 801dbfe <L2CA_Event_Callback+0x636>
 801dba2:	68a1      	ldr	r1, [r4, #8]
 801dba4:	1832      	adds	r2, r6, r0
 801dba6:	f102 0308 	add.w	r3, r2, #8
 801dbaa:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 801dbae:	b29b      	uxth	r3, r3
 801dbb0:	459c      	cmp	ip, r3
 801dbb2:	d329      	bcc.n	801dc08 <L2CA_Event_Callback+0x640>
 801dbb4:	684b      	ldr	r3, [r1, #4]
 801dbb6:	1dc0      	adds	r0, r0, #7
 801dbb8:	441e      	add	r6, r3
 801dbba:	5c31      	ldrb	r1, [r6, r0]
 801dbbc:	2910      	cmp	r1, #16
 801dbbe:	d821      	bhi.n	801dc04 <L2CA_Event_Callback+0x63c>
 801dbc0:	4411      	add	r1, r2
 801dbc2:	3108      	adds	r1, #8
 801dbc4:	b289      	uxth	r1, r1
 801dbc6:	458c      	cmp	ip, r1
 801dbc8:	d31c      	bcc.n	801dc04 <L2CA_Event_Callback+0x63c>
 801dbca:	1831      	adds	r1, r6, r0
 801dbcc:	9805      	ldr	r0, [sp, #20]
 801dbce:	2206      	movs	r2, #6
 801dbd0:	fbb0 f0f2 	udiv	r0, r0, r2
 801dbd4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801dbd6:	9a01      	ldr	r2, [sp, #4]
 801dbd8:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801dbdc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801dbe0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801dbe2:	981a      	ldr	r0, [sp, #104]	; 0x68
 801dbe4:	e9cd 0100 	strd	r0, r1, [sp]
 801dbe8:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 801dbec:	4649      	mov	r1, r9
 801dbee:	ba43      	rev16	r3, r0
 801dbf0:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801dbf4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801dbf6:	f007 f960 	bl	8024eba <ProcessServiceSearchAttributeRequest>
 801dbfa:	e001      	b.n	801dc00 <L2CA_Event_Callback+0x638>
 801dbfc:	e00c      	b.n	801dc18 <L2CA_Event_Callback+0x650>
 801dbfe:	e005      	b.n	801dc0c <L2CA_Event_Callback+0x644>
 801dc00:	4606      	mov	r6, r0
 801dc02:	e004      	b.n	801dc0e <L2CA_Event_Callback+0x646>
 801dc04:	2605      	movs	r6, #5
 801dc06:	e002      	b.n	801dc0e <L2CA_Event_Callback+0x646>
 801dc08:	2604      	movs	r6, #4
 801dc0a:	e000      	b.n	801dc0e <L2CA_Event_Callback+0x646>
 801dc0c:	2603      	movs	r6, #3
 801dc0e:	9818      	ldr	r0, [sp, #96]	; 0x60
 801dc10:	f7f5 fbee 	bl	80133f0 <BTPS_FreeMemory>
 801dc14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dc16:	e749      	b.n	801daac <L2CA_Event_Callback+0x4e4>
 801dc18:	2606      	movs	r6, #6
 801dc1a:	e7fb      	b.n	801dc14 <L2CA_Event_Callback+0x64c>
 801dc1c:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
 801dc20:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801dc22:	e762      	b.n	801daea <L2CA_Event_Callback+0x522>
 801dc24:	f899 0014 	ldrb.w	r0, [r9, #20]
 801dc28:	0740      	lsls	r0, r0, #29
 801dc2a:	d502      	bpl.n	801dc32 <L2CA_Event_Callback+0x66a>
 801dc2c:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
 801dc30:	e679      	b.n	801d926 <L2CA_Event_Callback+0x35e>
 801dc32:	2604      	movs	r6, #4
 801dc34:	e73d      	b.n	801dab2 <L2CA_Event_Callback+0x4ea>
 801dc36:	f047 0702 	orr.w	r7, r7, #2
 801dc3a:	07b8      	lsls	r0, r7, #30
 801dc3c:	d504      	bpl.n	801dc48 <L2CA_Event_Callback+0x680>
 801dc3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dc40:	9819      	ldr	r0, [sp, #100]	; 0x64
 801dc42:	f006 fd57 	bl	80246f4 <DeleteConnectionInfoEntryCID>
 801dc46:	4681      	mov	r9, r0
 801dc48:	07f8      	lsls	r0, r7, #31
 801dc4a:	d012      	beq.n	801dc72 <L2CA_Event_Callback+0x6aa>
 801dc4c:	f1b9 0f00 	cmp.w	r9, #0
 801dc50:	d00f      	beq.n	801dc72 <L2CA_Event_Callback+0x6aa>
 801dc52:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 801dc56:	b160      	cbz	r0, 801dc72 <L2CA_Event_Callback+0x6aa>
 801dc58:	f8d9 0018 	ldr.w	r0, [r9, #24]
 801dc5c:	b148      	cbz	r0, 801dc72 <L2CA_Event_Callback+0x6aa>
 801dc5e:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
 801dc62:	e9d9 430e 	ldrd	r4, r3, [r9, #56]	; 0x38
 801dc66:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801dc6a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 801dc6e:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dc70:	47a0      	blx	r4
 801dc72:	07b8      	lsls	r0, r7, #30
 801dc74:	d50d      	bpl.n	801dc92 <L2CA_Event_Callback+0x6ca>
 801dc76:	f1b9 0f00 	cmp.w	r9, #0
 801dc7a:	d00a      	beq.n	801dc92 <L2CA_Event_Callback+0x6ca>
 801dc7c:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
 801dc80:	b120      	cbz	r0, 801dc8c <L2CA_Event_Callback+0x6c4>
 801dc82:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 801dc86:	b108      	cbz	r0, 801dc8c <L2CA_Event_Callback+0x6c4>
 801dc88:	f7f5 fbb2 	bl	80133f0 <BTPS_FreeMemory>
 801dc8c:	4648      	mov	r0, r9
 801dc8e:	f7fb f822 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801dc92:	0778      	lsls	r0, r7, #29
 801dc94:	d503      	bpl.n	801dc9e <L2CA_Event_Callback+0x6d6>
 801dc96:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801dc98:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dc9a:	f006 f82e 	bl	8023cfa <_L2CA_Disconnect_Request>
 801dc9e:	4650      	mov	r0, sl
 801dca0:	f7fb fc80 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801dca4:	b01f      	add	sp, #124	; 0x7c
 801dca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcaa:	f885 b028 	strb.w	fp, [r5, #40]	; 0x28
 801dcae:	e63e      	b.n	801d92e <L2CA_Event_Callback+0x366>

0801dcb0 <L2CA_Event_Callback>:
 801dcb0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801dcb4:	000c      	movs	r4, r1
 801dcb6:	d07c      	beq.n	801ddb2 <L2CA_Event_Callback+0x102>
 801dcb8:	4601      	mov	r1, r0
 801dcba:	a801      	add	r0, sp, #4
 801dcbc:	f009 feee 	bl	8027a9c <AcquireGATTStackInformation>
 801dcc0:	2800      	cmp	r0, #0
 801dcc2:	d176      	bne.n	801ddb2 <L2CA_Event_Callback+0x102>
 801dcc4:	7820      	ldrb	r0, [r4, #0]
 801dcc6:	2500      	movs	r5, #0
 801dcc8:	2810      	cmp	r0, #16
 801dcca:	d006      	beq.n	801dcda <L2CA_Event_Callback+0x2a>
 801dccc:	2811      	cmp	r0, #17
 801dcce:	d03c      	beq.n	801dd4a <L2CA_Event_Callback+0x9a>
 801dcd0:	2812      	cmp	r0, #18
 801dcd2:	d07d      	beq.n	801ddd0 <L2CA_Event_Callback+0x120>
 801dcd4:	2813      	cmp	r0, #19
 801dcd6:	d133      	bne.n	801dd40 <L2CA_Event_Callback+0x90>
 801dcd8:	e091      	b.n	801ddfe <L2CA_Event_Callback+0x14e>
 801dcda:	9901      	ldr	r1, [sp, #4]
 801dcdc:	68a0      	ldr	r0, [r4, #8]
 801dcde:	8889      	ldrh	r1, [r1, #4]
 801dce0:	8800      	ldrh	r0, [r0, #0]
 801dce2:	b289      	uxth	r1, r1
 801dce4:	4288      	cmp	r0, r1
 801dce6:	d12b      	bne.n	801dd40 <L2CA_Event_Callback+0x90>
 801dce8:	201c      	movs	r0, #28
 801dcea:	f7f5 fb67 	bl	80133bc <BTPS_AllocateMemory>
 801dcee:	0006      	movs	r6, r0
 801dcf0:	d026      	beq.n	801dd40 <L2CA_Event_Callback+0x90>
 801dcf2:	221c      	movs	r2, #28
 801dcf4:	2100      	movs	r1, #0
 801dcf6:	f7f5 fbe2 	bl	80134be <BTPS_MemInitialize>
 801dcfa:	494d      	ldr	r1, [pc, #308]	; (801de30 <L2CA_Event_Callback+0x180>)
 801dcfc:	6908      	ldr	r0, [r1, #16]
 801dcfe:	1c40      	adds	r0, r0, #1
 801dd00:	6108      	str	r0, [r1, #16]
 801dd02:	d501      	bpl.n	801dd08 <L2CA_Event_Callback+0x58>
 801dd04:	2001      	movs	r0, #1
 801dd06:	6108      	str	r0, [r1, #16]
 801dd08:	6030      	str	r0, [r6, #0]
 801dd0a:	2017      	movs	r0, #23
 801dd0c:	81b0      	strh	r0, [r6, #12]
 801dd0e:	68a0      	ldr	r0, [r4, #8]
 801dd10:	2218      	movs	r2, #24
 801dd12:	f8d0 1002 	ldr.w	r1, [r0, #2]
 801dd16:	f8c6 1005 	str.w	r1, [r6, #5]
 801dd1a:	88c0      	ldrh	r0, [r0, #6]
 801dd1c:	f8a6 0009 	strh.w	r0, [r6, #9]
 801dd20:	7135      	strb	r5, [r6, #4]
 801dd22:	9b01      	ldr	r3, [sp, #4]
 801dd24:	2105      	movs	r1, #5
 801dd26:	4608      	mov	r0, r1
 801dd28:	3314      	adds	r3, #20
 801dd2a:	9600      	str	r6, [sp, #0]
 801dd2c:	f7fa fec0 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 801dd30:	b138      	cbz	r0, 801dd42 <L2CA_Event_Callback+0x92>
 801dd32:	9500      	str	r5, [sp, #0]
 801dd34:	2300      	movs	r3, #0
 801dd36:	2204      	movs	r2, #4
 801dd38:	6831      	ldr	r1, [r6, #0]
 801dd3a:	9801      	ldr	r0, [sp, #4]
 801dd3c:	f00c fd68 	bl	802a810 <ScheduleAsynchronousDispatch>
 801dd40:	e070      	b.n	801de24 <L2CA_Event_Callback+0x174>
 801dd42:	4630      	mov	r0, r6
 801dd44:	f7f5 fb54 	bl	80133f0 <BTPS_FreeMemory>
 801dd48:	e06c      	b.n	801de24 <L2CA_Event_Callback+0x174>
 801dd4a:	9a01      	ldr	r2, [sp, #4]
 801dd4c:	68a0      	ldr	r0, [r4, #8]
 801dd4e:	8893      	ldrh	r3, [r2, #4]
 801dd50:	8801      	ldrh	r1, [r0, #0]
 801dd52:	b29b      	uxth	r3, r3
 801dd54:	4299      	cmp	r1, r3
 801dd56:	d165      	bne.n	801de24 <L2CA_Event_Callback+0x174>
 801dd58:	7a01      	ldrb	r1, [r0, #8]
 801dd5a:	3214      	adds	r2, #20
 801dd5c:	2901      	cmp	r1, #1
 801dd5e:	d001      	beq.n	801dd64 <L2CA_Event_Callback+0xb4>
 801dd60:	2301      	movs	r3, #1
 801dd62:	e000      	b.n	801dd66 <L2CA_Event_Callback+0xb6>
 801dd64:	2300      	movs	r3, #0
 801dd66:	2100      	movs	r1, #0
 801dd68:	1c80      	adds	r0, r0, #2
 801dd6a:	6814      	ldr	r4, [r2, #0]
 801dd6c:	e001      	b.n	801dd72 <L2CA_Event_Callback+0xc2>
 801dd6e:	4621      	mov	r1, r4
 801dd70:	69a4      	ldr	r4, [r4, #24]
 801dd72:	b314      	cbz	r4, 801ddba <L2CA_Event_Callback+0x10a>
 801dd74:	7926      	ldrb	r6, [r4, #4]
 801dd76:	429e      	cmp	r6, r3
 801dd78:	d1f9      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801dd7a:	7966      	ldrb	r6, [r4, #5]
 801dd7c:	7807      	ldrb	r7, [r0, #0]
 801dd7e:	42be      	cmp	r6, r7
 801dd80:	d1f5      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801dd82:	79a6      	ldrb	r6, [r4, #6]
 801dd84:	7847      	ldrb	r7, [r0, #1]
 801dd86:	42be      	cmp	r6, r7
 801dd88:	d1f1      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801dd8a:	79e6      	ldrb	r6, [r4, #7]
 801dd8c:	7887      	ldrb	r7, [r0, #2]
 801dd8e:	42be      	cmp	r6, r7
 801dd90:	d1ed      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801dd92:	7a26      	ldrb	r6, [r4, #8]
 801dd94:	78c7      	ldrb	r7, [r0, #3]
 801dd96:	42be      	cmp	r6, r7
 801dd98:	d1e9      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801dd9a:	7a66      	ldrb	r6, [r4, #9]
 801dd9c:	7907      	ldrb	r7, [r0, #4]
 801dd9e:	42be      	cmp	r6, r7
 801dda0:	d1e5      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801dda2:	7aa6      	ldrb	r6, [r4, #10]
 801dda4:	7947      	ldrb	r7, [r0, #5]
 801dda6:	42be      	cmp	r6, r7
 801dda8:	d1e1      	bne.n	801dd6e <L2CA_Event_Callback+0xbe>
 801ddaa:	69a0      	ldr	r0, [r4, #24]
 801ddac:	b119      	cbz	r1, 801ddb6 <L2CA_Event_Callback+0x106>
 801ddae:	6188      	str	r0, [r1, #24]
 801ddb0:	e002      	b.n	801ddb8 <L2CA_Event_Callback+0x108>
 801ddb2:	e03b      	b.n	801de2c <L2CA_Event_Callback+0x17c>
 801ddb4:	e00c      	b.n	801ddd0 <L2CA_Event_Callback+0x120>
 801ddb6:	6010      	str	r0, [r2, #0]
 801ddb8:	61a5      	str	r5, [r4, #24]
 801ddba:	b1fc      	cbz	r4, 801ddfc <L2CA_Event_Callback+0x14c>
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	2203      	movs	r2, #3
 801ddc0:	4621      	mov	r1, r4
 801ddc2:	9801      	ldr	r0, [sp, #4]
 801ddc4:	f00a fdeb 	bl	802899e <FormatAndDispatchConnectionEvent>
 801ddc8:	4620      	mov	r0, r4
 801ddca:	f00a ffd1 	bl	8028d70 <FreeConnectionInfoEntryMemory>
 801ddce:	e029      	b.n	801de24 <L2CA_Event_Callback+0x174>
 801ddd0:	9801      	ldr	r0, [sp, #4]
 801ddd2:	68a2      	ldr	r2, [r4, #8]
 801ddd4:	8883      	ldrh	r3, [r0, #4]
 801ddd6:	8811      	ldrh	r1, [r2, #0]
 801ddd8:	b29b      	uxth	r3, r3
 801ddda:	4299      	cmp	r1, r3
 801dddc:	d122      	bne.n	801de24 <L2CA_Event_Callback+0x174>
 801ddde:	2100      	movs	r1, #0
 801dde0:	3014      	adds	r0, #20
 801dde2:	1c92      	adds	r2, r2, #2
 801dde4:	f00c fd4c 	bl	802a880 <SearchConnectionInfoEntryByBD_ADDR>
 801dde8:	0001      	movs	r1, r0
 801ddea:	d01b      	beq.n	801de24 <L2CA_Event_Callback+0x174>
 801ddec:	68a3      	ldr	r3, [r4, #8]
 801ddee:	68d8      	ldr	r0, [r3, #12]
 801ddf0:	7802      	ldrb	r2, [r0, #0]
 801ddf2:	9000      	str	r0, [sp, #0]
 801ddf4:	891b      	ldrh	r3, [r3, #8]
 801ddf6:	9801      	ldr	r0, [sp, #4]
 801ddf8:	f009 fc88 	bl	802770c <ATT_PDU_Event>
 801ddfc:	e012      	b.n	801de24 <L2CA_Event_Callback+0x174>
 801ddfe:	9801      	ldr	r0, [sp, #4]
 801de00:	68a2      	ldr	r2, [r4, #8]
 801de02:	8883      	ldrh	r3, [r0, #4]
 801de04:	8811      	ldrh	r1, [r2, #0]
 801de06:	b29b      	uxth	r3, r3
 801de08:	4299      	cmp	r1, r3
 801de0a:	d10b      	bne.n	801de24 <L2CA_Event_Callback+0x174>
 801de0c:	2100      	movs	r1, #0
 801de0e:	3014      	adds	r0, #20
 801de10:	1c92      	adds	r2, r2, #2
 801de12:	f00c fd35 	bl	802a880 <SearchConnectionInfoEntryByBD_ADDR>
 801de16:	0001      	movs	r1, r0
 801de18:	d004      	beq.n	801de24 <L2CA_Event_Callback+0x174>
 801de1a:	2300      	movs	r3, #0
 801de1c:	220a      	movs	r2, #10
 801de1e:	9801      	ldr	r0, [sp, #4]
 801de20:	f00a fdbd 	bl	802899e <FormatAndDispatchConnectionEvent>
 801de24:	9801      	ldr	r0, [sp, #4]
 801de26:	6800      	ldr	r0, [r0, #0]
 801de28:	f7fb fa8c 	bl	8019344 <BSC_UnLockBluetoothStack>
 801de2c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 801de30:	20000054 	.word	0x20000054

Disassembly of section i.MaskEncryptionKey:

0801de34 <MaskEncryptionKey>:
 801de34:	1a8a      	subs	r2, r1, r2
 801de36:	d004      	beq.n	801de42 <MaskEncryptionKey+0xe>
 801de38:	1a89      	subs	r1, r1, r2
 801de3a:	4408      	add	r0, r1
 801de3c:	2100      	movs	r1, #0
 801de3e:	f7f5 bb3e 	b.w	80134be <BTPS_MemInitialize>
 801de42:	4770      	bx	lr

Disassembly of section i.PairingEncryptionChange:

0801de44 <PairingEncryptionChange>:
 801de44:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801de48:	69cc      	ldr	r4, [r1, #28]
 801de4a:	4680      	mov	r8, r0
 801de4c:	4616      	mov	r6, r2
 801de4e:	460f      	mov	r7, r1
 801de50:	f104 000d 	add.w	r0, r4, #13
 801de54:	f000 faeb 	bl	801e42e <TestKeyExchange>
 801de58:	4605      	mov	r5, r0
 801de5a:	f104 0010 	add.w	r0, r4, #16
 801de5e:	f000 fae6 	bl	801e42e <TestKeyExchange>
 801de62:	ea55 0100 	orrs.w	r1, r5, r0
 801de66:	d011      	beq.n	801de8c <PairingEncryptionChange+0x48>
 801de68:	f898 101c 	ldrb.w	r1, [r8, #28]
 801de6c:	2902      	cmp	r1, #2
 801de6e:	d015      	beq.n	801de9c <PairingEncryptionChange+0x58>
 801de70:	2901      	cmp	r1, #1
 801de72:	d115      	bne.n	801dea0 <PairingEncryptionChange+0x5c>
 801de74:	2d00      	cmp	r5, #0
 801de76:	d013      	beq.n	801dea0 <PairingEncryptionChange+0x5c>
 801de78:	7b61      	ldrb	r1, [r4, #13]
 801de7a:	2000      	movs	r0, #0
 801de7c:	b191      	cbz	r1, 801dea4 <PairingEncryptionChange+0x60>
 801de7e:	7ce1      	ldrb	r1, [r4, #19]
 801de80:	7231      	strb	r1, [r6, #8]
 801de82:	9000      	str	r0, [sp, #0]
 801de84:	4633      	mov	r3, r6
 801de86:	2205      	movs	r2, #5
 801de88:	9001      	str	r0, [sp, #4]
 801de8a:	e011      	b.n	801deb0 <PairingEncryptionChange+0x6c>
 801de8c:	b002      	add	sp, #8
 801de8e:	4639      	mov	r1, r7
 801de90:	4640      	mov	r0, r8
 801de92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de96:	2200      	movs	r2, #0
 801de98:	f7fd bdc4 	b.w	801ba24 <DispatchPairingStatusCallback>
 801de9c:	2800      	cmp	r0, #0
 801de9e:	d0eb      	beq.n	801de78 <PairingEncryptionChange+0x34>
 801dea0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 801dea4:	7ba1      	ldrb	r1, [r4, #14]
 801dea6:	b141      	cbz	r1, 801deba <PairingEncryptionChange+0x76>
 801dea8:	9000      	str	r0, [sp, #0]
 801deaa:	4633      	mov	r3, r6
 801deac:	2206      	movs	r2, #6
 801deae:	9001      	str	r0, [sp, #4]
 801deb0:	4639      	mov	r1, r7
 801deb2:	4640      	mov	r0, r8
 801deb4:	f7fd fd66 	bl	801b984 <DispatchAuthenticationCallback>
 801deb8:	e7f2      	b.n	801dea0 <PairingEncryptionChange+0x5c>
 801deba:	7be1      	ldrb	r1, [r4, #15]
 801debc:	2900      	cmp	r1, #0
 801debe:	d0ef      	beq.n	801dea0 <PairingEncryptionChange+0x5c>
 801dec0:	9000      	str	r0, [sp, #0]
 801dec2:	4633      	mov	r3, r6
 801dec4:	2207      	movs	r2, #7
 801dec6:	9001      	str	r0, [sp, #4]
 801dec8:	e7f2      	b.n	801deb0 <PairingEncryptionChange+0x6c>

Disassembly of section i.ParseAdvertisingDataRecords:

0801deca <ParseAdvertisingDataRecords>:
 801deca:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 801dece:	4614      	mov	r4, r2
 801ded0:	460f      	mov	r7, r1
 801ded2:	ea5f 0800 	movs.w	r8, r0
 801ded6:	d076      	beq.n	801dfc6 <ParseAdvertisingDataRecords+0xfc>
 801ded8:	2f00      	cmp	r7, #0
 801deda:	d074      	beq.n	801dfc6 <ParseAdvertisingDataRecords+0xfc>
 801dedc:	2600      	movs	r6, #0
 801dede:	6026      	str	r6, [r4, #0]
 801dee0:	f7fd fcd6 	bl	801b890 <CountAdvertisingDataRecords>
 801dee4:	1e05      	subs	r5, r0, #0
 801dee6:	dd4e      	ble.n	801df86 <ParseAdvertisingDataRecords+0xbc>
 801dee8:	9803      	ldr	r0, [sp, #12]
 801deea:	b130      	cbz	r0, 801defa <ParseAdvertisingDataRecords+0x30>
 801deec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801def0:	0080      	lsls	r0, r0, #2
 801def2:	f7f5 fa63 	bl	80133bc <BTPS_AllocateMemory>
 801def6:	6060      	str	r0, [r4, #4]
 801def8:	e005      	b.n	801df06 <ParseAdvertisingDataRecords+0x3c>
 801defa:	6820      	ldr	r0, [r4, #0]
 801defc:	42a8      	cmp	r0, r5
 801defe:	d301      	bcc.n	801df04 <ParseAdvertisingDataRecords+0x3a>
 801df00:	6860      	ldr	r0, [r4, #4]
 801df02:	b900      	cbnz	r0, 801df06 <ParseAdvertisingDataRecords+0x3c>
 801df04:	2500      	movs	r5, #0
 801df06:	46b3      	mov	fp, r6
 801df08:	6026      	str	r6, [r4, #0]
 801df0a:	b3e5      	cbz	r5, 801df86 <ParseAdvertisingDataRecords+0xbc>
 801df0c:	6860      	ldr	r0, [r4, #4]
 801df0e:	b3d0      	cbz	r0, 801df86 <ParseAdvertisingDataRecords+0xbc>
 801df10:	2600      	movs	r6, #0
 801df12:	f04f 0a08 	mov.w	sl, #8
 801df16:	e034      	b.n	801df82 <ParseAdvertisingDataRecords+0xb8>
 801df18:	5dbd      	ldrb	r5, [r7, r6]
 801df1a:	1c76      	adds	r6, r6, #1
 801df1c:	b39d      	cbz	r5, 801df86 <ParseAdvertisingDataRecords+0xbc>
 801df1e:	1971      	adds	r1, r6, r5
 801df20:	4541      	cmp	r1, r8
 801df22:	d830      	bhi.n	801df86 <ParseAdvertisingDataRecords+0xbc>
 801df24:	f817 9006 	ldrb.w	r9, [r7, r6]
 801df28:	4628      	mov	r0, r5
 801df2a:	1c76      	adds	r6, r6, #1
 801df2c:	f7f5 fa46 	bl	80133bc <BTPS_AllocateMemory>
 801df30:	e9d4 1200 	ldrd	r1, r2, [r4]
 801df34:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 801df38:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801df3c:	50d0      	str	r0, [r2, r3]
 801df3e:	b330      	cbz	r0, 801df8e <ParseAdvertisingDataRecords+0xc4>
 801df40:	19b9      	adds	r1, r7, r6
 801df42:	1e6a      	subs	r2, r5, #1
 801df44:	f7f5 fab7 	bl	80134b6 <BTPS_MemCopy>
 801df48:	e9d4 0100 	ldrd	r0, r1, [r4]
 801df4c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801df50:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 801df54:	442e      	add	r6, r5
 801df56:	580b      	ldr	r3, [r1, r0]
 801df58:	1e69      	subs	r1, r5, #1
 801df5a:	f803 b001 	strb.w	fp, [r3, r1]
 801df5e:	e9d4 0300 	ldrd	r0, r3, [r4]
 801df62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801df66:	f843 9020 	str.w	r9, [r3, r0, lsl #2]
 801df6a:	e9d4 0200 	ldrd	r0, r2, [r4]
 801df6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801df72:	2304      	movs	r3, #4
 801df74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801df78:	5411      	strb	r1, [r2, r0]
 801df7a:	6820      	ldr	r0, [r4, #0]
 801df7c:	1c40      	adds	r0, r0, #1
 801df7e:	1e76      	subs	r6, r6, #1
 801df80:	6020      	str	r0, [r4, #0]
 801df82:	4546      	cmp	r6, r8
 801df84:	d3c8      	bcc.n	801df18 <ParseAdvertisingDataRecords+0x4e>
 801df86:	6820      	ldr	r0, [r4, #0]
 801df88:	b004      	add	sp, #16
 801df8a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 801df8e:	2500      	movs	r5, #0
 801df90:	46d0      	mov	r8, sl
 801df92:	465f      	mov	r7, fp
 801df94:	e00b      	b.n	801dfae <ParseAdvertisingDataRecords+0xe4>
 801df96:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801df9a:	6861      	ldr	r1, [r4, #4]
 801df9c:	eb08 0682 	add.w	r6, r8, r2, lsl #2
 801dfa0:	5988      	ldr	r0, [r1, r6]
 801dfa2:	b118      	cbz	r0, 801dfac <ParseAdvertisingDataRecords+0xe2>
 801dfa4:	f7f5 fa24 	bl	80133f0 <BTPS_FreeMemory>
 801dfa8:	6860      	ldr	r0, [r4, #4]
 801dfaa:	5187      	str	r7, [r0, r6]
 801dfac:	1c6d      	adds	r5, r5, #1
 801dfae:	6820      	ldr	r0, [r4, #0]
 801dfb0:	42a8      	cmp	r0, r5
 801dfb2:	d8f0      	bhi.n	801df96 <ParseAdvertisingDataRecords+0xcc>
 801dfb4:	9803      	ldr	r0, [sp, #12]
 801dfb6:	b118      	cbz	r0, 801dfc0 <ParseAdvertisingDataRecords+0xf6>
 801dfb8:	6860      	ldr	r0, [r4, #4]
 801dfba:	f7f5 fa19 	bl	80133f0 <BTPS_FreeMemory>
 801dfbe:	6067      	str	r7, [r4, #4]
 801dfc0:	6027      	str	r7, [r4, #0]
 801dfc2:	e7e0      	b.n	801df86 <ParseAdvertisingDataRecords+0xbc>
 801dfc4:	e7ff      	b.n	801dfc6 <ParseAdvertisingDataRecords+0xfc>
 801dfc6:	2000      	movs	r0, #0
 801dfc8:	e7de      	b.n	801df88 <ParseAdvertisingDataRecords+0xbe>

Disassembly of section i.ParseKeyDistributionField:

0801dfca <ParseKeyDistributionField>:
 801dfca:	b513      	push	{r0, r1, r4, lr}
 801dfcc:	f04f 0301 	mov.w	r3, #1
 801dfd0:	f89d 0000 	ldrb.w	r0, [sp]
 801dfd4:	f04f 0200 	mov.w	r2, #0
 801dfd8:	07c4      	lsls	r4, r0, #31
 801dfda:	d001      	beq.n	801dfe0 <ParseKeyDistributionField+0x16>
 801dfdc:	700b      	strb	r3, [r1, #0]
 801dfde:	e000      	b.n	801dfe2 <ParseKeyDistributionField+0x18>
 801dfe0:	700a      	strb	r2, [r1, #0]
 801dfe2:	0784      	lsls	r4, r0, #30
 801dfe4:	d501      	bpl.n	801dfea <ParseKeyDistributionField+0x20>
 801dfe6:	704b      	strb	r3, [r1, #1]
 801dfe8:	e000      	b.n	801dfec <ParseKeyDistributionField+0x22>
 801dfea:	704a      	strb	r2, [r1, #1]
 801dfec:	0740      	lsls	r0, r0, #29
 801dfee:	d501      	bpl.n	801dff4 <ParseKeyDistributionField+0x2a>
 801dff0:	708b      	strb	r3, [r1, #2]
 801dff2:	bd1c      	pop	{r2, r3, r4, pc}
 801dff4:	708a      	strb	r2, [r1, #2]
 801dff6:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.ParsePairingPDU:

0801dff8 <ParsePairingPDU>:
 801dff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dffa:	461c      	mov	r4, r3
 801dffc:	000d      	movs	r5, r1
 801dffe:	4601      	mov	r1, r0
 801e000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e004:	d021      	beq.n	801e04a <ParsePairingPDU+0x52>
 801e006:	2d07      	cmp	r5, #7
 801e008:	d31f      	bcc.n	801e04a <ParsePairingPDU+0x52>
 801e00a:	b1f2      	cbz	r2, 801e04a <ParsePairingPDU+0x52>
 801e00c:	b1ec      	cbz	r4, 801e04a <ParsePairingPDU+0x52>
 801e00e:	2500      	movs	r5, #0
 801e010:	7850      	ldrb	r0, [r2, #1]
 801e012:	2601      	movs	r6, #1
 801e014:	f88d 0000 	strb.w	r0, [sp]
 801e018:	462f      	mov	r7, r5
 801e01a:	2805      	cmp	r0, #5
 801e01c:	d215      	bcs.n	801e04a <ParsePairingPDU+0x52>
 801e01e:	e8df f000 	tbb	[pc, r0]
 801e022:	0503      	.short	0x0503
 801e024:	00120907 	.word	0x00120907
 801e028:	7027      	strb	r7, [r4, #0]
 801e02a:	e005      	b.n	801e038 <ParsePairingPDU+0x40>
 801e02c:	7026      	strb	r6, [r4, #0]
 801e02e:	e003      	b.n	801e038 <ParsePairingPDU+0x40>
 801e030:	2002      	movs	r0, #2
 801e032:	e000      	b.n	801e036 <ParsePairingPDU+0x3e>
 801e034:	2003      	movs	r0, #3
 801e036:	7020      	strb	r0, [r4, #0]
 801e038:	7890      	ldrb	r0, [r2, #2]
 801e03a:	f88d 0000 	strb.w	r0, [sp]
 801e03e:	07c0      	lsls	r0, r0, #31
 801e040:	d005      	beq.n	801e04e <ParsePairingPDU+0x56>
 801e042:	7066      	strb	r6, [r4, #1]
 801e044:	e004      	b.n	801e050 <ParsePairingPDU+0x58>
 801e046:	2004      	movs	r0, #4
 801e048:	e7f5      	b.n	801e036 <ParsePairingPDU+0x3e>
 801e04a:	461d      	mov	r5, r3
 801e04c:	e026      	b.n	801e09c <ParsePairingPDU+0xa4>
 801e04e:	7067      	strb	r7, [r4, #1]
 801e050:	78d0      	ldrb	r0, [r2, #3]
 801e052:	f88d 0000 	strb.w	r0, [sp]
 801e056:	ea5f 7cc0 	movs.w	ip, r0, lsl #31
 801e05a:	d001      	beq.n	801e060 <ParsePairingPDU+0x68>
 801e05c:	70a6      	strb	r6, [r4, #2]
 801e05e:	e000      	b.n	801e062 <ParsePairingPDU+0x6a>
 801e060:	70a7      	strb	r7, [r4, #2]
 801e062:	0740      	lsls	r0, r0, #29
 801e064:	d501      	bpl.n	801e06a <ParsePairingPDU+0x72>
 801e066:	70e6      	strb	r6, [r4, #3]
 801e068:	e000      	b.n	801e06c <ParsePairingPDU+0x74>
 801e06a:	70e7      	strb	r7, [r4, #3]
 801e06c:	7910      	ldrb	r0, [r2, #4]
 801e06e:	7120      	strb	r0, [r4, #4]
 801e070:	7950      	ldrb	r0, [r2, #5]
 801e072:	f88d 0000 	strb.w	r0, [sp]
 801e076:	7997      	ldrb	r7, [r2, #6]
 801e078:	f104 0608 	add.w	r6, r4, #8
 801e07c:	2901      	cmp	r1, #1
 801e07e:	d006      	beq.n	801e08e <ParsePairingPDU+0x96>
 801e080:	2902      	cmp	r1, #2
 801e082:	d1e2      	bne.n	801e04a <ParsePairingPDU+0x52>
 801e084:	4631      	mov	r1, r6
 801e086:	f7ff ffa0 	bl	801dfca <ParseKeyDistributionField>
 801e08a:	1d61      	adds	r1, r4, #5
 801e08c:	e003      	b.n	801e096 <ParsePairingPDU+0x9e>
 801e08e:	1d61      	adds	r1, r4, #5
 801e090:	f7ff ff9b 	bl	801dfca <ParseKeyDistributionField>
 801e094:	4631      	mov	r1, r6
 801e096:	4638      	mov	r0, r7
 801e098:	f7ff ff97 	bl	801dfca <ParseKeyDistributionField>
 801e09c:	4628      	mov	r0, r5
 801e09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i.PasskeyEventDispatcher:

0801e0a0 <PasskeyEventDispatcher>:
 801e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0a2:	b097      	sub	sp, #92	; 0x5c
 801e0a4:	b289      	uxth	r1, r1
 801e0a6:	4603      	mov	r3, r0
 801e0a8:	9100      	str	r1, [sp, #0]
 801e0aa:	aa03      	add	r2, sp, #12
 801e0ac:	a902      	add	r1, sp, #8
 801e0ae:	a815      	add	r0, sp, #84	; 0x54
 801e0b0:	f7fd f8db 	bl	801b26a <AcquireGAPStackLELinkInfoConnection_Handle>
 801e0b4:	2800      	cmp	r0, #0
 801e0b6:	d168      	bne.n	801e18a <PasskeyEventDispatcher+0xea>
 801e0b8:	9803      	ldr	r0, [sp, #12]
 801e0ba:	69c5      	ldr	r5, [r0, #28]
 801e0bc:	2d00      	cmp	r5, #0
 801e0be:	d061      	beq.n	801e184 <PasskeyEventDispatcher+0xe4>
 801e0c0:	4629      	mov	r1, r5
 801e0c2:	9802      	ldr	r0, [sp, #8]
 801e0c4:	f7fd fc2c 	bl	801b920 <DeterminePairingAlgorithm>
 801e0c8:	bbe8      	cbnz	r0, 801e146 <PasskeyEventDispatcher+0xa6>
 801e0ca:	9902      	ldr	r1, [sp, #8]
 801e0cc:	7f08      	ldrb	r0, [r1, #28]
 801e0ce:	2802      	cmp	r0, #2
 801e0d0:	d01b      	beq.n	801e10a <PasskeyEventDispatcher+0x6a>
 801e0d2:	2301      	movs	r3, #1
 801e0d4:	2202      	movs	r2, #2
 801e0d6:	2703      	movs	r7, #3
 801e0d8:	f88d 7010 	strb.w	r7, [sp, #16]
 801e0dc:	7ce8      	ldrb	r0, [r5, #19]
 801e0de:	2600      	movs	r6, #0
 801e0e0:	f88d 0020 	strb.w	r0, [sp, #32]
 801e0e4:	9607      	str	r6, [sp, #28]
 801e0e6:	79a8      	ldrb	r0, [r5, #6]
 801e0e8:	b190      	cbz	r0, 801e110 <PasskeyEventDispatcher+0x70>
 801e0ea:	796c      	ldrb	r4, [r5, #5]
 801e0ec:	2810      	cmp	r0, #16
 801e0ee:	f044 0402 	orr.w	r4, r4, #2
 801e0f2:	716c      	strb	r4, [r5, #5]
 801e0f4:	d00f      	beq.n	801e116 <PasskeyEventDispatcher+0x76>
 801e0f6:	4218      	tst	r0, r3
 801e0f8:	d036      	beq.n	801e168 <PasskeyEventDispatcher+0xc8>
 801e0fa:	2002      	movs	r0, #2
 801e0fc:	f88d 0018 	strb.w	r0, [sp, #24]
 801e100:	7f88      	ldrb	r0, [r1, #30]
 801e102:	0700      	lsls	r0, r0, #28
 801e104:	d50a      	bpl.n	801e11c <PasskeyEventDispatcher+0x7c>
 801e106:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801e108:	e020      	b.n	801e14c <PasskeyEventDispatcher+0xac>
 801e10a:	2304      	movs	r3, #4
 801e10c:	2208      	movs	r2, #8
 801e10e:	e7e2      	b.n	801e0d6 <PasskeyEventDispatcher+0x36>
 801e110:	f88d 6018 	strb.w	r6, [sp, #24]
 801e114:	e02d      	b.n	801e172 <PasskeyEventDispatcher+0xd2>
 801e116:	f88d 7018 	strb.w	r7, [sp, #24]
 801e11a:	e02a      	b.n	801e172 <PasskeyEventDispatcher+0xd2>
 801e11c:	460c      	mov	r4, r1
 801e11e:	9607      	str	r6, [sp, #28]
 801e120:	f851 0b44 	ldr.w	r0, [r1], #68
 801e124:	f002 fa38 	bl	8020598 <_HCI_LE_Rand>
 801e128:	b988      	cbnz	r0, 801e14e <PasskeyEventDispatcher+0xae>
 801e12a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 801e12e:	f8d4 1045 	ldr.w	r1, [r4, #69]	; 0x45
 801e132:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e136:	4601      	mov	r1, r0
 801e138:	9007      	str	r0, [sp, #28]
 801e13a:	4815      	ldr	r0, [pc, #84]	; (801e190 <PasskeyEventDispatcher+0xf0>)
 801e13c:	4281      	cmp	r1, r0
 801e13e:	d906      	bls.n	801e14e <PasskeyEventDispatcher+0xae>
 801e140:	fbb1 f2f0 	udiv	r2, r1, r0
 801e144:	e000      	b.n	801e148 <PasskeyEventDispatcher+0xa8>
 801e146:	e01d      	b.n	801e184 <PasskeyEventDispatcher+0xe4>
 801e148:	fb00 1012 	mls	r0, r0, r2, r1
 801e14c:	9007      	str	r0, [sp, #28]
 801e14e:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
 801e152:	2004      	movs	r0, #4
 801e154:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 801e158:	9807      	ldr	r0, [sp, #28]
 801e15a:	900e      	str	r0, [sp, #56]	; 0x38
 801e15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e160:	aa0d      	add	r2, sp, #52	; 0x34
 801e162:	f7fd f921 	bl	801b3a8 <AuthenticationResponsePasskeyConfirmationResponse>
 801e166:	e004      	b.n	801e172 <PasskeyEventDispatcher+0xd2>
 801e168:	4210      	tst	r0, r2
 801e16a:	d002      	beq.n	801e172 <PasskeyEventDispatcher+0xd2>
 801e16c:	2001      	movs	r0, #1
 801e16e:	f88d 0018 	strb.w	r0, [sp, #24]
 801e172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e176:	9600      	str	r6, [sp, #0]
 801e178:	9601      	str	r6, [sp, #4]
 801e17a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801e17e:	ab04      	add	r3, sp, #16
 801e180:	f7fd fc00 	bl	801b984 <DispatchAuthenticationCallback>
 801e184:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e186:	f7fb fa0d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801e18a:	b017      	add	sp, #92	; 0x5c
 801e18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e18e:	0000      	.short	0x0000
 801e190:	000f423f 	.word	0x000f423f

Disassembly of section i.PerformArrayXOR:

0801e194 <PerformArrayXOR>:
 801e194:	b530      	push	{r4, r5, lr}
 801e196:	2300      	movs	r3, #0
 801e198:	e004      	b.n	801e1a4 <PerformArrayXOR+0x10>
 801e19a:	5cc4      	ldrb	r4, [r0, r3]
 801e19c:	5ccd      	ldrb	r5, [r1, r3]
 801e19e:	406c      	eors	r4, r5
 801e1a0:	54c4      	strb	r4, [r0, r3]
 801e1a2:	1c5b      	adds	r3, r3, #1
 801e1a4:	4293      	cmp	r3, r2
 801e1a6:	d3f8      	bcc.n	801e19a <PerformArrayXOR+0x6>
 801e1a8:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.Phase3DistributionScheduler:

0801e1aa <Phase3DistributionScheduler>:
 801e1aa:	b510      	push	{r4, lr}
 801e1ac:	b08e      	sub	sp, #56	; 0x38
 801e1ae:	b289      	uxth	r1, r1
 801e1b0:	4603      	mov	r3, r0
 801e1b2:	9100      	str	r1, [sp, #0]
 801e1b4:	aa0b      	add	r2, sp, #44	; 0x2c
 801e1b6:	a90c      	add	r1, sp, #48	; 0x30
 801e1b8:	a80d      	add	r0, sp, #52	; 0x34
 801e1ba:	f7fd f856 	bl	801b26a <AcquireGAPStackLELinkInfoConnection_Handle>
 801e1be:	2800      	cmp	r0, #0
 801e1c0:	d131      	bne.n	801e226 <Phase3DistributionScheduler+0x7c>
 801e1c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e1c4:	69c4      	ldr	r4, [r0, #28]
 801e1c6:	b35c      	cbz	r4, 801e220 <Phase3DistributionScheduler+0x76>
 801e1c8:	f104 000d 	add.w	r0, r4, #13
 801e1cc:	f000 f92f 	bl	801e42e <TestKeyExchange>
 801e1d0:	b1e0      	cbz	r0, 801e20c <Phase3DistributionScheduler+0x62>
 801e1d2:	7b61      	ldrb	r1, [r4, #13]
 801e1d4:	2000      	movs	r0, #0
 801e1d6:	b139      	cbz	r1, 801e1e8 <Phase3DistributionScheduler+0x3e>
 801e1d8:	7ce1      	ldrb	r1, [r4, #19]
 801e1da:	f88d 1010 	strb.w	r1, [sp, #16]
 801e1de:	9000      	str	r0, [sp, #0]
 801e1e0:	ab02      	add	r3, sp, #8
 801e1e2:	2205      	movs	r2, #5
 801e1e4:	9001      	str	r0, [sp, #4]
 801e1e6:	e005      	b.n	801e1f4 <Phase3DistributionScheduler+0x4a>
 801e1e8:	7ba1      	ldrb	r1, [r4, #14]
 801e1ea:	b141      	cbz	r1, 801e1fe <Phase3DistributionScheduler+0x54>
 801e1ec:	9000      	str	r0, [sp, #0]
 801e1ee:	ab02      	add	r3, sp, #8
 801e1f0:	2206      	movs	r2, #6
 801e1f2:	9001      	str	r0, [sp, #4]
 801e1f4:	e9dd 100b 	ldrd	r1, r0, [sp, #44]	; 0x2c
 801e1f8:	f7fd fbc4 	bl	801b984 <DispatchAuthenticationCallback>
 801e1fc:	e010      	b.n	801e220 <Phase3DistributionScheduler+0x76>
 801e1fe:	7be1      	ldrb	r1, [r4, #15]
 801e200:	b171      	cbz	r1, 801e220 <Phase3DistributionScheduler+0x76>
 801e202:	9000      	str	r0, [sp, #0]
 801e204:	ab02      	add	r3, sp, #8
 801e206:	2207      	movs	r2, #7
 801e208:	9001      	str	r0, [sp, #4]
 801e20a:	e7f3      	b.n	801e1f4 <Phase3DistributionScheduler+0x4a>
 801e20c:	f104 0010 	add.w	r0, r4, #16
 801e210:	f000 f90d 	bl	801e42e <TestKeyExchange>
 801e214:	b920      	cbnz	r0, 801e220 <Phase3DistributionScheduler+0x76>
 801e216:	e9dd 100b 	ldrd	r1, r0, [sp, #44]	; 0x2c
 801e21a:	2200      	movs	r2, #0
 801e21c:	f7fd fc02 	bl	801ba24 <DispatchPairingStatusCallback>
 801e220:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e222:	f7fb f9bf 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801e226:	b00e      	add	sp, #56	; 0x38
 801e228:	bd10      	pop	{r4, pc}

Disassembly of section i.SM_Confirm_Value_Generation:

0801e22a <SM_Confirm_Value_Generation>:
 801e22a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e22e:	4691      	mov	r9, r2
 801e230:	460c      	mov	r4, r1
 801e232:	4605      	mov	r5, r0
 801e234:	2210      	movs	r2, #16
 801e236:	2100      	movs	r1, #0
 801e238:	4668      	mov	r0, sp
 801e23a:	f7f5 f940 	bl	80134be <BTPS_MemInitialize>
 801e23e:	2207      	movs	r2, #7
 801e240:	f10d 0009 	add.w	r0, sp, #9
 801e244:	68e1      	ldr	r1, [r4, #12]
 801e246:	f7f5 f936 	bl	80134b6 <BTPS_MemCopy>
 801e24a:	466e      	mov	r6, sp
 801e24c:	2207      	movs	r2, #7
 801e24e:	1cb0      	adds	r0, r6, #2
 801e250:	68a1      	ldr	r1, [r4, #8]
 801e252:	f7f5 f930 	bl	80134b6 <BTPS_MemCopy>
 801e256:	7e20      	ldrb	r0, [r4, #24]
 801e258:	f7fd f889 	bl	801b36e <AssignHCIAddressType>
 801e25c:	f88d 0001 	strb.w	r0, [sp, #1]
 801e260:	7c20      	ldrb	r0, [r4, #16]
 801e262:	f7fd f884 	bl	801b36e <AssignHCIAddressType>
 801e266:	f88d 0000 	strb.w	r0, [sp]
 801e26a:	2010      	movs	r0, #16
 801e26c:	4680      	mov	r8, r0
 801e26e:	4602      	mov	r2, r0
 801e270:	4668      	mov	r0, sp
 801e272:	6861      	ldr	r1, [r4, #4]
 801e274:	f7ff ff8e 	bl	801e194 <PerformArrayXOR>
 801e278:	f105 0344 	add.w	r3, r5, #68	; 0x44
 801e27c:	6821      	ldr	r1, [r4, #0]
 801e27e:	469a      	mov	sl, r3
 801e280:	466a      	mov	r2, sp
 801e282:	6828      	ldr	r0, [r5, #0]
 801e284:	f002 f902 	bl	802048c <_HCI_LE_Encrypt>
 801e288:	0007      	movs	r7, r0
 801e28a:	d120      	bne.n	801e2ce <SM_Confirm_Value_Generation+0xa4>
 801e28c:	2210      	movs	r2, #16
 801e28e:	2100      	movs	r1, #0
 801e290:	4668      	mov	r0, sp
 801e292:	f7f5 f914 	bl	80134be <BTPS_MemInitialize>
 801e296:	2206      	movs	r2, #6
 801e298:	4668      	mov	r0, sp
 801e29a:	69e1      	ldr	r1, [r4, #28]
 801e29c:	f7f5 f90b 	bl	80134b6 <BTPS_MemCopy>
 801e2a0:	2206      	movs	r2, #6
 801e2a2:	1db0      	adds	r0, r6, #6
 801e2a4:	6961      	ldr	r1, [r4, #20]
 801e2a6:	f7f5 f906 	bl	80134b6 <BTPS_MemCopy>
 801e2aa:	4642      	mov	r2, r8
 801e2ac:	4651      	mov	r1, sl
 801e2ae:	4668      	mov	r0, sp
 801e2b0:	f7ff ff70 	bl	801e194 <PerformArrayXOR>
 801e2b4:	6821      	ldr	r1, [r4, #0]
 801e2b6:	4653      	mov	r3, sl
 801e2b8:	466a      	mov	r2, sp
 801e2ba:	6828      	ldr	r0, [r5, #0]
 801e2bc:	f002 f8e6 	bl	802048c <_HCI_LE_Encrypt>
 801e2c0:	0007      	movs	r7, r0
 801e2c2:	d104      	bne.n	801e2ce <SM_Confirm_Value_Generation+0xa4>
 801e2c4:	4642      	mov	r2, r8
 801e2c6:	4651      	mov	r1, sl
 801e2c8:	4648      	mov	r0, r9
 801e2ca:	f7f5 f8f4 	bl	80134b6 <BTPS_MemCopy>
 801e2ce:	b004      	add	sp, #16
 801e2d0:	4638      	mov	r0, r7
 801e2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.SM_Diversify_Function:

0801e2d6 <SM_Diversify_Function>:
 801e2d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e2da:	4604      	mov	r4, r0
 801e2dc:	4616      	mov	r6, r2
 801e2de:	460f      	mov	r7, r1
 801e2e0:	3044      	adds	r0, #68	; 0x44
 801e2e2:	461d      	mov	r5, r3
 801e2e4:	2210      	movs	r2, #16
 801e2e6:	2100      	movs	r1, #0
 801e2e8:	4681      	mov	r9, r0
 801e2ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e2ee:	f7f5 f8e6 	bl	80134be <BTPS_MemInitialize>
 801e2f2:	f804 6f44 	strb.w	r6, [r4, #68]!
 801e2f6:	0a30      	lsrs	r0, r6, #8
 801e2f8:	7060      	strb	r0, [r4, #1]
 801e2fa:	70a5      	strb	r5, [r4, #2]
 801e2fc:	0a28      	lsrs	r0, r5, #8
 801e2fe:	70e0      	strb	r0, [r4, #3]
 801e300:	464b      	mov	r3, r9
 801e302:	f854 0c44 	ldr.w	r0, [r4, #-68]
 801e306:	461a      	mov	r2, r3
 801e308:	4639      	mov	r1, r7
 801e30a:	f002 f8bf 	bl	802048c <_HCI_LE_Encrypt>
 801e30e:	0004      	movs	r4, r0
 801e310:	d104      	bne.n	801e31c <SM_Diversify_Function+0x46>
 801e312:	2210      	movs	r2, #16
 801e314:	4649      	mov	r1, r9
 801e316:	4640      	mov	r0, r8
 801e318:	f7f5 f8cd 	bl	80134b6 <BTPS_MemCopy>
 801e31c:	4620      	mov	r0, r4
 801e31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.SM_Key_Generation:

0801e322 <SM_Key_Generation>:
 801e322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e326:	4604      	mov	r4, r0
 801e328:	4617      	mov	r7, r2
 801e32a:	460e      	mov	r6, r1
 801e32c:	3044      	adds	r0, #68	; 0x44
 801e32e:	2208      	movs	r2, #8
 801e330:	4619      	mov	r1, r3
 801e332:	4680      	mov	r8, r0
 801e334:	9d06      	ldr	r5, [sp, #24]
 801e336:	f7f5 f8be 	bl	80134b6 <BTPS_MemCopy>
 801e33a:	2208      	movs	r2, #8
 801e33c:	4639      	mov	r1, r7
 801e33e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801e342:	f7f5 f8b8 	bl	80134b6 <BTPS_MemCopy>
 801e346:	4643      	mov	r3, r8
 801e348:	461a      	mov	r2, r3
 801e34a:	4631      	mov	r1, r6
 801e34c:	6820      	ldr	r0, [r4, #0]
 801e34e:	f002 f89d 	bl	802048c <_HCI_LE_Encrypt>
 801e352:	0004      	movs	r4, r0
 801e354:	d104      	bne.n	801e360 <SM_Key_Generation+0x3e>
 801e356:	2210      	movs	r2, #16
 801e358:	4641      	mov	r1, r8
 801e35a:	4628      	mov	r0, r5
 801e35c:	f7f5 f8ab 	bl	80134b6 <BTPS_MemCopy>
 801e360:	4620      	mov	r0, r4
 801e362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.SM_Random_Address_Hash:

0801e366 <SM_Random_Address_Hash>:
 801e366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e36a:	4604      	mov	r4, r0
 801e36c:	4617      	mov	r7, r2
 801e36e:	460e      	mov	r6, r1
 801e370:	3044      	adds	r0, #68	; 0x44
 801e372:	461d      	mov	r5, r3
 801e374:	2210      	movs	r2, #16
 801e376:	2100      	movs	r1, #0
 801e378:	4680      	mov	r8, r0
 801e37a:	f7f5 f8a0 	bl	80134be <BTPS_MemInitialize>
 801e37e:	2203      	movs	r2, #3
 801e380:	4639      	mov	r1, r7
 801e382:	4640      	mov	r0, r8
 801e384:	f7f5 f897 	bl	80134b6 <BTPS_MemCopy>
 801e388:	4643      	mov	r3, r8
 801e38a:	461a      	mov	r2, r3
 801e38c:	4631      	mov	r1, r6
 801e38e:	6820      	ldr	r0, [r4, #0]
 801e390:	f002 f87c 	bl	802048c <_HCI_LE_Encrypt>
 801e394:	0004      	movs	r4, r0
 801e396:	d104      	bne.n	801e3a2 <SM_Random_Address_Hash+0x3c>
 801e398:	2203      	movs	r2, #3
 801e39a:	4641      	mov	r1, r8
 801e39c:	4628      	mov	r0, r5
 801e39e:	f7f5 f88a 	bl	80134b6 <BTPS_MemCopy>
 801e3a2:	4620      	mov	r0, r4
 801e3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.SearchCallbackInfoByType:

0801e3a8 <SearchCallbackInfoByType>:
 801e3a8:	b51c      	push	{r2, r3, r4, lr}
 801e3aa:	230c      	movs	r3, #12
 801e3ac:	e9cd 0100 	strd	r0, r1, [sp]
 801e3b0:	2200      	movs	r2, #0
 801e3b2:	a901      	add	r1, sp, #4
 801e3b4:	2007      	movs	r0, #7
 801e3b6:	f7fa fec0 	bl	801913a <BSC_SearchGenericListEntry>
 801e3ba:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.SearchLELinkEntryBD_ADDR:

0801e3bc <SearchLELinkEntryBD_ADDR>:
 801e3bc:	b508      	push	{r3, lr}
 801e3be:	232c      	movs	r3, #44	; 0x2c
 801e3c0:	9000      	str	r0, [sp, #0]
 801e3c2:	2209      	movs	r2, #9
 801e3c4:	2005      	movs	r0, #5
 801e3c6:	f7fa feb8 	bl	801913a <BSC_SearchGenericListEntry>
 801e3ca:	bd08      	pop	{r3, pc}

Disassembly of section i.SearchLELinkEntryConnection_Handle:

0801e3cc <SearchLELinkEntryConnection_Handle>:
 801e3cc:	b503      	push	{r0, r1, lr}
 801e3ce:	b081      	sub	sp, #4
 801e3d0:	232c      	movs	r3, #44	; 0x2c
 801e3d2:	9000      	str	r0, [sp, #0]
 801e3d4:	2200      	movs	r2, #0
 801e3d6:	a902      	add	r1, sp, #8
 801e3d8:	2003      	movs	r0, #3
 801e3da:	f7fa feae 	bl	801913a <BSC_SearchGenericListEntry>
 801e3de:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SecurityManagerChannelWrite:

0801e3e0 <SecurityManagerChannelWrite>:
 801e3e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801e3e2:	001d      	movs	r5, r3
 801e3e4:	460c      	mov	r4, r1
 801e3e6:	d007      	beq.n	801e3f8 <SecurityManagerChannelWrite+0x18>
 801e3e8:	69e1      	ldr	r1, [r4, #28]
 801e3ea:	b129      	cbz	r1, 801e3f8 <SecurityManagerChannelWrite+0x18>
 801e3ec:	7909      	ldrb	r1, [r1, #4]
 801e3ee:	b119      	cbz	r1, 801e3f8 <SecurityManagerChannelWrite+0x18>
 801e3f0:	f06f 0076 	mvn.w	r0, #118	; 0x76
 801e3f4:	b004      	add	sp, #16
 801e3f6:	bd70      	pop	{r4, r5, r6, pc}
 801e3f8:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801e3fc:	e9cd 2100 	strd	r2, r1, [sp]
 801e400:	8881      	ldrh	r1, [r0, #4]
 801e402:	b28b      	uxth	r3, r1
 801e404:	f8d4 1009 	ldr.w	r1, [r4, #9]
 801e408:	9102      	str	r1, [sp, #8]
 801e40a:	f8b4 200d 	ldrh.w	r2, [r4, #13]
 801e40e:	f8ad 200c 	strh.w	r2, [sp, #12]
 801e412:	6800      	ldr	r0, [r0, #0]
 801e414:	9a03      	ldr	r2, [sp, #12]
 801e416:	f004 fb32 	bl	8022a7e <L2CA_Fixed_Channel_Data_Write>
 801e41a:	2800      	cmp	r0, #0
 801e41c:	d1ea      	bne.n	801e3f4 <SecurityManagerChannelWrite+0x14>
 801e41e:	2d00      	cmp	r5, #0
 801e420:	d0e8      	beq.n	801e3f4 <SecurityManagerChannelWrite+0x14>
 801e422:	69e1      	ldr	r1, [r4, #28]
 801e424:	2900      	cmp	r1, #0
 801e426:	d0e5      	beq.n	801e3f4 <SecurityManagerChannelWrite+0x14>
 801e428:	2201      	movs	r2, #1
 801e42a:	710a      	strb	r2, [r1, #4]
 801e42c:	e7e2      	b.n	801e3f4 <SecurityManagerChannelWrite+0x14>

Disassembly of section i.TestKeyExchange:

0801e42e <TestKeyExchange>:
 801e42e:	7801      	ldrb	r1, [r0, #0]
 801e430:	b921      	cbnz	r1, 801e43c <TestKeyExchange+0xe>
 801e432:	7841      	ldrb	r1, [r0, #1]
 801e434:	b911      	cbnz	r1, 801e43c <TestKeyExchange+0xe>
 801e436:	7880      	ldrb	r0, [r0, #2]
 801e438:	2800      	cmp	r0, #0
 801e43a:	d000      	beq.n	801e43e <TestKeyExchange+0x10>
 801e43c:	2001      	movs	r0, #1
 801e43e:	4770      	bx	lr

Disassembly of section i.TestValidConnectionParameters:

0801e440 <TestValidConnectionParameters>:
 801e440:	8801      	ldrh	r1, [r0, #0]
 801e442:	f640 7298 	movw	r2, #3992	; 0xf98
 801e446:	3908      	subs	r1, #8
 801e448:	4291      	cmp	r1, r2
 801e44a:	d811      	bhi.n	801e470 <TestValidConnectionParameters+0x30>
 801e44c:	8841      	ldrh	r1, [r0, #2]
 801e44e:	2908      	cmp	r1, #8
 801e450:	d30e      	bcc.n	801e470 <TestValidConnectionParameters+0x30>
 801e452:	f5b1 6f7a 	cmp.w	r1, #4000	; 0xfa0
 801e456:	d80b      	bhi.n	801e470 <TestValidConnectionParameters+0x30>
 801e458:	88c1      	ldrh	r1, [r0, #6]
 801e45a:	2964      	cmp	r1, #100	; 0x64
 801e45c:	d308      	bcc.n	801e470 <TestValidConnectionParameters+0x30>
 801e45e:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 801e462:	d805      	bhi.n	801e470 <TestValidConnectionParameters+0x30>
 801e464:	8880      	ldrh	r0, [r0, #4]
 801e466:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 801e46a:	d801      	bhi.n	801e470 <TestValidConnectionParameters+0x30>
 801e46c:	2001      	movs	r0, #1
 801e46e:	4770      	bx	lr
 801e470:	2000      	movs	r0, #0
 801e472:	4770      	bx	lr

Disassembly of section i.TestValidScanParameters:

0801e474 <TestValidScanParameters>:
 801e474:	1ec2      	subs	r2, r0, #3
 801e476:	f242 73fd 	movw	r3, #10237	; 0x27fd
 801e47a:	429a      	cmp	r2, r3
 801e47c:	d808      	bhi.n	801e490 <TestValidScanParameters+0x1c>
 801e47e:	2903      	cmp	r1, #3
 801e480:	d306      	bcc.n	801e490 <TestValidScanParameters+0x1c>
 801e482:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 801e486:	d803      	bhi.n	801e490 <TestValidScanParameters+0x1c>
 801e488:	4281      	cmp	r1, r0
 801e48a:	d801      	bhi.n	801e490 <TestValidScanParameters+0x1c>
 801e48c:	2001      	movs	r0, #1
 801e48e:	4770      	bx	lr
 801e490:	2000      	movs	r0, #0
 801e492:	4770      	bx	lr

Disassembly of section i.Timer_Event_Callback:

0801e494 <Timer_Event_Callback>:
 801e494:	b530      	push	{r4, r5, lr}
 801e496:	b08d      	sub	sp, #52	; 0x34
 801e498:	000c      	movs	r4, r1
 801e49a:	d025      	beq.n	801e4e8 <Timer_Event_Callback+0x54>
 801e49c:	b291      	uxth	r1, r2
 801e49e:	4603      	mov	r3, r0
 801e4a0:	9100      	str	r1, [sp, #0]
 801e4a2:	aa0a      	add	r2, sp, #40	; 0x28
 801e4a4:	a90b      	add	r1, sp, #44	; 0x2c
 801e4a6:	a80c      	add	r0, sp, #48	; 0x30
 801e4a8:	f7fc fedf 	bl	801b26a <AcquireGAPStackLELinkInfoConnection_Handle>
 801e4ac:	b9e0      	cbnz	r0, 801e4e8 <Timer_Event_Callback+0x54>
 801e4ae:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e4b0:	2500      	movs	r5, #0
 801e4b2:	69c0      	ldr	r0, [r0, #28]
 801e4b4:	b140      	cbz	r0, 801e4c8 <Timer_Event_Callback+0x34>
 801e4b6:	6801      	ldr	r1, [r0, #0]
 801e4b8:	42a1      	cmp	r1, r4
 801e4ba:	d105      	bne.n	801e4c8 <Timer_Event_Callback+0x34>
 801e4bc:	6005      	str	r5, [r0, #0]
 801e4be:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
 801e4c2:	2203      	movs	r2, #3
 801e4c4:	f7fd faae 	bl	801ba24 <DispatchPairingStatusCallback>
 801e4c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e4ca:	6988      	ldr	r0, [r1, #24]
 801e4cc:	42a0      	cmp	r0, r4
 801e4ce:	d108      	bne.n	801e4e2 <Timer_Event_Callback+0x4e>
 801e4d0:	618d      	str	r5, [r1, #24]
 801e4d2:	7908      	ldrb	r0, [r1, #4]
 801e4d4:	07c0      	lsls	r0, r0, #31
 801e4d6:	d004      	beq.n	801e4e2 <Timer_Event_Callback+0x4e>
 801e4d8:	2305      	movs	r3, #5
 801e4da:	aa01      	add	r2, sp, #4
 801e4dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e4de:	f7fd fad8 	bl	801ba92 <DispatchSecurityEstablishmentCallback>
 801e4e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e4e4:	f7fb f85e 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801e4e8:	b00d      	add	sp, #52	; 0x34
 801e4ea:	2000      	movs	r0, #0
 801e4ec:	bd30      	pop	{r4, r5, pc}

Disassembly of section i._HCI_Event_Callback:

0801e4ee <_HCI_Event_Callback>:
 801e4ee:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801e4f0:	4616      	mov	r6, r2
 801e4f2:	000c      	movs	r4, r1
 801e4f4:	4605      	mov	r5, r0
 801e4f6:	d010      	beq.n	801e51a <_HCI_Event_Callback+0x2c>
 801e4f8:	4602      	mov	r2, r0
 801e4fa:	a901      	add	r1, sp, #4
 801e4fc:	4668      	mov	r0, sp
 801e4fe:	f7fc fe72 	bl	801b1e6 <AcquireGAPStackInfo>
 801e502:	2800      	cmp	r0, #0
 801e504:	d109      	bne.n	801e51a <_HCI_Event_Callback+0x2c>
 801e506:	9801      	ldr	r0, [sp, #4]
 801e508:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801e50a:	b11b      	cbz	r3, 801e514 <_HCI_Event_Callback+0x26>
 801e50c:	4632      	mov	r2, r6
 801e50e:	4621      	mov	r1, r4
 801e510:	4628      	mov	r0, r5
 801e512:	4798      	blx	r3
 801e514:	9800      	ldr	r0, [sp, #0]
 801e516:	f7fb f845 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801e51a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0801e51c <_HCI_Event_Callback>:
 801e51c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e520:	4691      	mov	r9, r2
 801e522:	000e      	movs	r6, r1
 801e524:	4682      	mov	sl, r0
 801e526:	d072      	beq.n	801e60e <_HCI_Event_Callback+0xf2>
 801e528:	f7fa fa08 	bl	801893c <AcquireBluetoothStackInformation>
 801e52c:	ea5f 0800 	movs.w	r8, r0
 801e530:	d06d      	beq.n	801e60e <_HCI_Event_Callback+0xf2>
 801e532:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 801e536:	2800      	cmp	r0, #0
 801e538:	d064      	beq.n	801e604 <_HCI_Event_Callback+0xe8>
 801e53a:	7831      	ldrb	r1, [r6, #0]
 801e53c:	2902      	cmp	r1, #2
 801e53e:	d004      	beq.n	801e54a <_HCI_Event_Callback+0x2e>
 801e540:	2904      	cmp	r1, #4
 801e542:	d040      	beq.n	801e5c6 <_HCI_Event_Callback+0xaa>
 801e544:	2920      	cmp	r1, #32
 801e546:	d154      	bne.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e548:	e050      	b.n	801e5ec <_HCI_Event_Callback+0xd0>
 801e54a:	6870      	ldr	r0, [r6, #4]
 801e54c:	b380      	cbz	r0, 801e5b0 <_HCI_Event_Callback+0x94>
 801e54e:	7a81      	ldrb	r1, [r0, #10]
 801e550:	2901      	cmp	r1, #1
 801e552:	d14e      	bne.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e554:	7800      	ldrb	r0, [r0, #0]
 801e556:	bb58      	cbnz	r0, 801e5b0 <_HCI_Event_Callback+0x94>
 801e558:	200c      	movs	r0, #12
 801e55a:	f7f4 ff2f 	bl	80133bc <BTPS_AllocateMemory>
 801e55e:	0004      	movs	r4, r0
 801e560:	d047      	beq.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e562:	6870      	ldr	r0, [r6, #4]
 801e564:	2500      	movs	r5, #0
 801e566:	6841      	ldr	r1, [r0, #4]
 801e568:	f8c4 1002 	str.w	r1, [r4, #2]
 801e56c:	8900      	ldrh	r0, [r0, #8]
 801e56e:	80e0      	strh	r0, [r4, #6]
 801e570:	6870      	ldr	r0, [r6, #4]
 801e572:	8840      	ldrh	r0, [r0, #2]
 801e574:	8020      	strh	r0, [r4, #0]
 801e576:	60a5      	str	r5, [r4, #8]
 801e578:	f8d8 7048 	ldr.w	r7, [r8, #72]	; 0x48
 801e57c:	37d8      	adds	r7, #216	; 0xd8
 801e57e:	d01e      	beq.n	801e5be <_HCI_Event_Callback+0xa2>
 801e580:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
 801e584:	d235      	bcs.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e586:	1ca0      	adds	r0, r4, #2
 801e588:	f7fa ff59 	bl	801943e <CompareNULLBluetoothAddress>
 801e58c:	b980      	cbnz	r0, 801e5b0 <_HCI_Event_Callback+0x94>
 801e58e:	60a5      	str	r5, [r4, #8]
 801e590:	683d      	ldr	r5, [r7, #0]
 801e592:	4620      	mov	r0, r4
 801e594:	b18d      	cbz	r5, 801e5ba <_HCI_Event_Callback+0x9e>
 801e596:	1ca1      	adds	r1, r4, #2
 801e598:	1ca8      	adds	r0, r5, #2
 801e59a:	f7fa ff0f 	bl	80193bc <CompareBluetoothAddress>
 801e59e:	b970      	cbnz	r0, 801e5be <_HCI_Event_Callback+0xa2>
 801e5a0:	8829      	ldrh	r1, [r5, #0]
 801e5a2:	8820      	ldrh	r0, [r4, #0]
 801e5a4:	4281      	cmp	r1, r0
 801e5a6:	d00a      	beq.n	801e5be <_HCI_Event_Callback+0xa2>
 801e5a8:	68a8      	ldr	r0, [r5, #8]
 801e5aa:	b110      	cbz	r0, 801e5b2 <_HCI_Event_Callback+0x96>
 801e5ac:	4605      	mov	r5, r0
 801e5ae:	e7f2      	b.n	801e596 <_HCI_Event_Callback+0x7a>
 801e5b0:	e01f      	b.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e5b2:	0020      	movs	r0, r4
 801e5b4:	d003      	beq.n	801e5be <_HCI_Event_Callback+0xa2>
 801e5b6:	60a8      	str	r0, [r5, #8]
 801e5b8:	e01b      	b.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e5ba:	6038      	str	r0, [r7, #0]
 801e5bc:	e019      	b.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e5be:	4620      	mov	r0, r4
 801e5c0:	f7f4 ff16 	bl	80133f0 <BTPS_FreeMemory>
 801e5c4:	e015      	b.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e5c6:	6871      	ldr	r1, [r6, #4]
 801e5c8:	b199      	cbz	r1, 801e5f2 <_HCI_Event_Callback+0xd6>
 801e5ca:	780a      	ldrb	r2, [r1, #0]
 801e5cc:	b98a      	cbnz	r2, 801e5f2 <_HCI_Event_Callback+0xd6>
 801e5ce:	8849      	ldrh	r1, [r1, #2]
 801e5d0:	30d8      	adds	r0, #216	; 0xd8
 801e5d2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e5d6:	9000      	str	r0, [sp, #0]
 801e5d8:	2308      	movs	r3, #8
 801e5da:	2200      	movs	r2, #0
 801e5dc:	a901      	add	r1, sp, #4
 801e5de:	2003      	movs	r0, #3
 801e5e0:	f7fa facc 	bl	8018b7c <BSC_DeleteGenericListEntry>
 801e5e4:	b128      	cbz	r0, 801e5f2 <_HCI_Event_Callback+0xd6>
 801e5e6:	f7fa fb76 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801e5ea:	e002      	b.n	801e5f2 <_HCI_Event_Callback+0xd6>
 801e5ec:	30d8      	adds	r0, #216	; 0xd8
 801e5ee:	f7fb fb50 	bl	8019c92 <FreeACLLinkList>
 801e5f2:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 801e5f6:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
 801e5fa:	b11b      	cbz	r3, 801e604 <_HCI_Event_Callback+0xe8>
 801e5fc:	464a      	mov	r2, r9
 801e5fe:	4631      	mov	r1, r6
 801e600:	4650      	mov	r0, sl
 801e602:	4798      	blx	r3
 801e604:	4640      	mov	r0, r8
 801e606:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e60a:	f7fa bfcb 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 801e60e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i._L2CA_Event_Callback:

0801e612 <_L2CA_Event_Callback>:
 801e612:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801e614:	4616      	mov	r6, r2
 801e616:	000c      	movs	r4, r1
 801e618:	4605      	mov	r5, r0
 801e61a:	d010      	beq.n	801e63e <_L2CA_Event_Callback+0x2c>
 801e61c:	4602      	mov	r2, r0
 801e61e:	a901      	add	r1, sp, #4
 801e620:	4668      	mov	r0, sp
 801e622:	f7fc fde0 	bl	801b1e6 <AcquireGAPStackInfo>
 801e626:	2800      	cmp	r0, #0
 801e628:	d109      	bne.n	801e63e <_L2CA_Event_Callback+0x2c>
 801e62a:	9801      	ldr	r0, [sp, #4]
 801e62c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801e62e:	b11b      	cbz	r3, 801e638 <_L2CA_Event_Callback+0x26>
 801e630:	4632      	mov	r2, r6
 801e632:	4621      	mov	r1, r4
 801e634:	4628      	mov	r0, r5
 801e636:	4798      	blx	r3
 801e638:	9800      	ldr	r0, [sp, #0]
 801e63a:	f7fa ffb3 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801e63e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0801e640 <_L2CA_Event_Callback>:
 801e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e642:	4614      	mov	r4, r2
 801e644:	000d      	movs	r5, r1
 801e646:	4607      	mov	r7, r0
 801e648:	d01e      	beq.n	801e688 <_L2CA_Event_Callback+0x48>
 801e64a:	2c00      	cmp	r4, #0
 801e64c:	d01c      	beq.n	801e688 <_L2CA_Event_Callback+0x48>
 801e64e:	4638      	mov	r0, r7
 801e650:	f7fa f974 	bl	801893c <AcquireBluetoothStackInformation>
 801e654:	0006      	movs	r6, r0
 801e656:	d017      	beq.n	801e688 <_L2CA_Event_Callback+0x48>
 801e658:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e65a:	4620      	mov	r0, r4
 801e65c:	b123      	cbz	r3, 801e668 <_L2CA_Event_Callback+0x28>
 801e65e:	4602      	mov	r2, r0
 801e660:	4629      	mov	r1, r5
 801e662:	4638      	mov	r0, r7
 801e664:	4798      	blx	r3
 801e666:	e00a      	b.n	801e67e <_L2CA_Event_Callback+0x3e>
 801e668:	7828      	ldrb	r0, [r5, #0]
 801e66a:	b940      	cbnz	r0, 801e67e <_L2CA_Event_Callback+0x3e>
 801e66c:	2000      	movs	r0, #0
 801e66e:	9000      	str	r0, [sp, #0]
 801e670:	68a8      	ldr	r0, [r5, #8]
 801e672:	2302      	movs	r3, #2
 801e674:	8842      	ldrh	r2, [r0, #2]
 801e676:	7901      	ldrb	r1, [r0, #4]
 801e678:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801e67a:	f005 faa9 	bl	8023bd0 <_L2CA_Connect_Response>
 801e67e:	4630      	mov	r0, r6
 801e680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e684:	f7fa bf8e 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 801e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i.FreePortInfoEntryMemory:

0801e68a <FreePortInfoEntryMemory>:
 801e68a:	b510      	push	{r4, lr}
 801e68c:	0004      	movs	r4, r0
 801e68e:	d00c      	beq.n	801e6aa <FreePortInfoEntryMemory+0x20>
 801e690:	6960      	ldr	r0, [r4, #20]
 801e692:	b108      	cbz	r0, 801e698 <FreePortInfoEntryMemory+0xe>
 801e694:	f7f4 feac 	bl	80133f0 <BTPS_FreeMemory>
 801e698:	69e0      	ldr	r0, [r4, #28]
 801e69a:	b108      	cbz	r0, 801e6a0 <FreePortInfoEntryMemory+0x16>
 801e69c:	f7f4 fea8 	bl	80133f0 <BTPS_FreeMemory>
 801e6a0:	4620      	mov	r0, r4
 801e6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6a6:	f7fa bb16 	b.w	8018cd6 <BSC_FreeGenericListEntryMemory>
 801e6aa:	bd10      	pop	{r4, pc}

Disassembly of section i.FreePortInfoList:

0801e6ac <FreePortInfoList>:
 801e6ac:	b570      	push	{r4, r5, r6, lr}
 801e6ae:	0005      	movs	r5, r0
 801e6b0:	d009      	beq.n	801e6c6 <FreePortInfoList+0x1a>
 801e6b2:	682c      	ldr	r4, [r5, #0]
 801e6b4:	e003      	b.n	801e6be <FreePortInfoList+0x12>
 801e6b6:	4620      	mov	r0, r4
 801e6b8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801e6ba:	f7ff ffe6 	bl	801e68a <FreePortInfoEntryMemory>
 801e6be:	2c00      	cmp	r4, #0
 801e6c0:	d1f9      	bne.n	801e6b6 <FreePortInfoList+0xa>
 801e6c2:	2000      	movs	r0, #0
 801e6c4:	6028      	str	r0, [r5, #0]
 801e6c6:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.GOEP_Cleanup:

0801e6c8 <GOEP_Cleanup>:
 801e6c8:	b510      	push	{r4, lr}
 801e6ca:	f7fa f937 	bl	801893c <AcquireBluetoothStackInformation>
 801e6ce:	0004      	movs	r4, r0
 801e6d0:	d00e      	beq.n	801e6f0 <GOEP_Cleanup+0x28>
 801e6d2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801e6d4:	b138      	cbz	r0, 801e6e6 <GOEP_Cleanup+0x1e>
 801e6d6:	1d00      	adds	r0, r0, #4
 801e6d8:	f7ff ffe8 	bl	801e6ac <FreePortInfoList>
 801e6dc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 801e6de:	f7f4 fe87 	bl	80133f0 <BTPS_FreeMemory>
 801e6e2:	2000      	movs	r0, #0
 801e6e4:	65e0      	str	r0, [r4, #92]	; 0x5c
 801e6e6:	4620      	mov	r0, r4
 801e6e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6ec:	f7fa bf5a 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 801e6f0:	bd10      	pop	{r4, pc}

Disassembly of section i.GOEP_Initialize:

0801e6f2 <GOEP_Initialize>:
 801e6f2:	b570      	push	{r4, r5, r6, lr}
 801e6f4:	4605      	mov	r5, r0
 801e6f6:	f7fa f921 	bl	801893c <AcquireBluetoothStackInformation>
 801e6fa:	0004      	movs	r4, r0
 801e6fc:	d010      	beq.n	801e720 <GOEP_Initialize+0x2e>
 801e6fe:	2018      	movs	r0, #24
 801e700:	f7f4 fe5c 	bl	80133bc <BTPS_AllocateMemory>
 801e704:	65e0      	str	r0, [r4, #92]	; 0x5c
 801e706:	b128      	cbz	r0, 801e714 <GOEP_Initialize+0x22>
 801e708:	6005      	str	r5, [r0, #0]
 801e70a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e70c:	2000      	movs	r0, #0
 801e70e:	4605      	mov	r5, r0
 801e710:	6048      	str	r0, [r1, #4]
 801e712:	e001      	b.n	801e718 <GOEP_Initialize+0x26>
 801e714:	f06f 0527 	mvn.w	r5, #39	; 0x27
 801e718:	4620      	mov	r0, r4
 801e71a:	f7fa ff43 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801e71e:	e001      	b.n	801e724 <GOEP_Initialize+0x32>
 801e720:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801e724:	4628      	mov	r0, r5
 801e726:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AsynchronousACLDataCallback:

0801e728 <AsynchronousACLDataCallback>:
 801e728:	b51c      	push	{r2, r3, r4, lr}
 801e72a:	0008      	movs	r0, r1
 801e72c:	d016      	beq.n	801e75c <AsynchronousACLDataCallback+0x34>
 801e72e:	6843      	ldr	r3, [r0, #4]
 801e730:	2b04      	cmp	r3, #4
 801e732:	d313      	bcc.n	801e75c <AsynchronousACLDataCallback+0x34>
 801e734:	b192      	cbz	r2, 801e75c <AsynchronousACLDataCallback+0x34>
 801e736:	8941      	ldrh	r1, [r0, #10]
 801e738:	b169      	cbz	r1, 801e756 <AsynchronousACLDataCallback+0x2e>
 801e73a:	1d09      	adds	r1, r1, #4
 801e73c:	428b      	cmp	r3, r1
 801e73e:	d30a      	bcc.n	801e756 <AsynchronousACLDataCallback+0x2e>
 801e740:	2101      	movs	r1, #1
 801e742:	f88d 1000 	strb.w	r1, [sp]
 801e746:	9001      	str	r0, [sp, #4]
 801e748:	4669      	mov	r1, sp
 801e74a:	4610      	mov	r0, r2
 801e74c:	f7f4 ff98 	bl	8013680 <BTPS_AddMailbox>
 801e750:	2800      	cmp	r0, #0
 801e752:	d102      	bne.n	801e75a <AsynchronousACLDataCallback+0x32>
 801e754:	9801      	ldr	r0, [sp, #4]
 801e756:	f7f4 fe4b 	bl	80133f0 <BTPS_FreeMemory>
 801e75a:	bd1c      	pop	{r2, r3, r4, pc}
 801e75c:	2800      	cmp	r0, #0
 801e75e:	d1fa      	bne.n	801e756 <AsynchronousACLDataCallback+0x2e>
 801e760:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.AsynchronousHCIEventCallback:

0801e764 <AsynchronousHCIEventCallback>:
 801e764:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e768:	f04f 0500 	mov.w	r5, #0
 801e76c:	000c      	movs	r4, r1
 801e76e:	46aa      	mov	sl, r5
 801e770:	9202      	str	r2, [sp, #8]
 801e772:	d074      	beq.n	801e85e <AsynchronousHCIEventCallback+0xfa>
 801e774:	6860      	ldr	r0, [r4, #4]
 801e776:	2802      	cmp	r0, #2
 801e778:	d371      	bcc.n	801e85e <AsynchronousHCIEventCallback+0xfa>
 801e77a:	f8df c430 	ldr.w	ip, [pc, #1072]	; 801ebac <AsynchronousHCIEventCallback+0x448>
 801e77e:	7a22      	ldrb	r2, [r4, #8]
 801e780:	f104 060b 	add.w	r6, r4, #11
 801e784:	1e71      	subs	r1, r6, #1
 801e786:	f8dc 3014 	ldr.w	r3, [ip, #20]
 801e78a:	f104 090d 	add.w	r9, r4, #13
 801e78e:	f104 0b10 	add.w	fp, r4, #16
 801e792:	f04f 0802 	mov.w	r8, #2
 801e796:	2a1c      	cmp	r2, #28
 801e798:	d079      	beq.n	801e88e <AsynchronousHCIEventCallback+0x12a>
 801e79a:	dc10      	bgt.n	801e7be <AsynchronousHCIEventCallback+0x5a>
 801e79c:	d25e      	bcs.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e79e:	e8df f002 	tbb	[pc, r2]
 801e7a2:	3e5d      	.short	0x3e5d
 801e7a4:	775f413e 	.word	0x775f413e
 801e7a8:	978f8881 	.word	0x978f8881
 801e7ac:	adaaa79e 	.word	0xadaaa79e
 801e7b0:	b7b25def 	.word	0xb7b25def
 801e7b4:	edf0c3bb 	.word	0xedf0c3bb
 801e7b8:	e9eaebec 	.word	0xe9eaebec
 801e7bc:	e7e8      	.short	0xe7e8
 801e7be:	2a32      	cmp	r2, #50	; 0x32
 801e7c0:	d06f      	beq.n	801e8a2 <AsynchronousHCIEventCallback+0x13e>
 801e7c2:	dc12      	bgt.n	801e7ea <AsynchronousHCIEventCallback+0x86>
 801e7c4:	4ff9      	ldr	r7, [pc, #996]	; (801ebac <AsynchronousHCIEventCallback+0x448>)
 801e7c6:	f1a2 021d 	sub.w	r2, r2, #29
 801e7ca:	2a15      	cmp	r2, #21
 801e7cc:	687f      	ldr	r7, [r7, #4]
 801e7ce:	d2e5      	bcs.n	801e79c <AsynchronousHCIEventCallback+0x38>
 801e7d0:	e8df f002 	tbb	[pc, r2]
 801e7d4:	f4f594f6 	.word	0xf4f594f6
 801e7d8:	44f1f2f3 	.word	0x44f1f2f3
 801e7dc:	44444444 	.word	0x44444444
 801e7e0:	f0444444 	.word	0xf0444444
 801e7e4:	eef2eff0 	.word	0xeef2eff0
 801e7e8:	00ed      	.short	0x00ed
 801e7ea:	2a3b      	cmp	r2, #59	; 0x3b
 801e7ec:	d06f      	beq.n	801e8ce <AsynchronousHCIEventCallback+0x16a>
 801e7ee:	dc09      	bgt.n	801e804 <AsynchronousHCIEventCallback+0xa0>
 801e7f0:	f1a2 0233 	sub.w	r2, r2, #51	; 0x33
 801e7f4:	2a07      	cmp	r2, #7
 801e7f6:	d2d1      	bcs.n	801e79c <AsynchronousHCIEventCallback+0x38>
 801e7f8:	e8df f002 	tbb	[pc, r2]
 801e7fc:	e5e6e7e8 	.word	0xe5e6e7e8
 801e800:	00e3e430 	.word	0x00e3e430
 801e804:	2a3e      	cmp	r2, #62	; 0x3e
 801e806:	d071      	beq.n	801e8ec <AsynchronousHCIEventCallback+0x188>
 801e808:	dc04      	bgt.n	801e814 <AsynchronousHCIEventCallback+0xb0>
 801e80a:	2a3c      	cmp	r2, #60	; 0x3c
 801e80c:	d06f      	beq.n	801e8ee <AsynchronousHCIEventCallback+0x18a>
 801e80e:	2a3d      	cmp	r2, #61	; 0x3d
 801e810:	d124      	bne.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e812:	e273      	b.n	801ecfc <AsynchronousHCIEventCallback+0x598>
 801e814:	2afe      	cmp	r2, #254	; 0xfe
 801e816:	d001      	beq.n	801e81c <AsynchronousHCIEventCallback+0xb8>
 801e818:	2aff      	cmp	r2, #255	; 0xff
 801e81a:	d1f9      	bne.n	801e810 <AsynchronousHCIEventCallback+0xac>
 801e81c:	e1cb      	b.n	801ebb6 <AsynchronousHCIEventCallback+0x452>
 801e81e:	f8dc 1000 	ldr.w	r1, [ip]
 801e822:	e048      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801e824:	280d      	cmp	r0, #13
 801e826:	d319      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e828:	210c      	movs	r1, #12
 801e82a:	2002      	movs	r0, #2
 801e82c:	f000 fd25 	bl	801f27a <BuildEventHeader>
 801e830:	0005      	movs	r5, r0
 801e832:	d013      	beq.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e834:	6869      	ldr	r1, [r5, #4]
 801e836:	7aa0      	ldrb	r0, [r4, #10]
 801e838:	7008      	strb	r0, [r1, #0]
 801e83a:	6869      	ldr	r1, [r5, #4]
 801e83c:	f8b4 000b 	ldrh.w	r0, [r4, #11]
 801e840:	8048      	strh	r0, [r1, #2]
 801e842:	6868      	ldr	r0, [r5, #4]
 801e844:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801e848:	6041      	str	r1, [r0, #4]
 801e84a:	f8b4 1011 	ldrh.w	r1, [r4, #17]
 801e84e:	8101      	strh	r1, [r0, #8]
 801e850:	6869      	ldr	r1, [r5, #4]
 801e852:	7ce0      	ldrb	r0, [r4, #19]
 801e854:	7288      	strb	r0, [r1, #10]
 801e856:	6869      	ldr	r1, [r5, #4]
 801e858:	7d20      	ldrb	r0, [r4, #20]
 801e85a:	72c8      	strb	r0, [r1, #11]
 801e85c:	e2ae      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801e85e:	e2ac      	b.n	801edba <AsynchronousHCIEventCallback+0x656>
 801e860:	280c      	cmp	r0, #12
 801e862:	d3fb      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e864:	210a      	movs	r1, #10
 801e866:	2003      	movs	r0, #3
 801e868:	f000 fd07 	bl	801f27a <BuildEventHeader>
 801e86c:	0005      	movs	r5, r0
 801e86e:	d0f5      	beq.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e870:	6868      	ldr	r0, [r5, #4]
 801e872:	f8d4 100a 	ldr.w	r1, [r4, #10]
 801e876:	6001      	str	r1, [r0, #0]
 801e878:	89e1      	ldrh	r1, [r4, #14]
 801e87a:	8081      	strh	r1, [r0, #4]
 801e87c:	6868      	ldr	r0, [r5, #4]
 801e87e:	8a21      	ldrh	r1, [r4, #16]
 801e880:	80c1      	strh	r1, [r0, #6]
 801e882:	7ca1      	ldrb	r1, [r4, #18]
 801e884:	7201      	strb	r1, [r0, #8]
 801e886:	6869      	ldr	r1, [r5, #4]
 801e888:	7ce0      	ldrb	r0, [r4, #19]
 801e88a:	7248      	strb	r0, [r1, #9]
 801e88c:	e296      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801e88e:	e11f      	b.n	801ead0 <AsynchronousHCIEventCallback+0x36c>
 801e890:	2806      	cmp	r0, #6
 801e892:	d3e3      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e894:	7aa1      	ldrb	r1, [r4, #10]
 801e896:	464b      	mov	r3, r9
 801e898:	4632      	mov	r2, r6
 801e89a:	2004      	movs	r0, #4
 801e89c:	e1d6      	b.n	801ec4c <AsynchronousHCIEventCallback+0x4e8>
 801e89e:	4605      	mov	r5, r0
 801e8a0:	e28c      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801e8a2:	e1dc      	b.n	801ec5e <AsynchronousHCIEventCallback+0x4fa>
 801e8a4:	2805      	cmp	r0, #5
 801e8a6:	d3d9      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	7aa1      	ldrb	r1, [r4, #10]
 801e8ac:	4632      	mov	r2, r6
 801e8ae:	2005      	movs	r0, #5
 801e8b0:	e1cc      	b.n	801ec4c <AsynchronousHCIEventCallback+0x4e8>
 801e8b2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801e8b6:	2900      	cmp	r1, #0
 801e8b8:	d0d0      	beq.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e8ba:	4620      	mov	r0, r4
 801e8bc:	4788      	blx	r1
 801e8be:	e7ee      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801e8c0:	2806      	cmp	r0, #6
 801e8c2:	d3cb      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e8c4:	7aa1      	ldrb	r1, [r4, #10]
 801e8c6:	464b      	mov	r3, r9
 801e8c8:	4632      	mov	r2, r6
 801e8ca:	2007      	movs	r0, #7
 801e8cc:	e1be      	b.n	801ec4c <AsynchronousHCIEventCallback+0x4e8>
 801e8ce:	e208      	b.n	801ece2 <AsynchronousHCIEventCallback+0x57e>
 801e8d0:	2805      	cmp	r0, #5
 801e8d2:	d3c3      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	7aa1      	ldrb	r1, [r4, #10]
 801e8d8:	4632      	mov	r2, r6
 801e8da:	2008      	movs	r0, #8
 801e8dc:	e1b6      	b.n	801ec4c <AsynchronousHCIEventCallback+0x4e8>
 801e8de:	2806      	cmp	r0, #6
 801e8e0:	d3bc      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e8e2:	7aa1      	ldrb	r1, [r4, #10]
 801e8e4:	464b      	mov	r3, r9
 801e8e6:	4632      	mov	r2, r6
 801e8e8:	2009      	movs	r0, #9
 801e8ea:	e1af      	b.n	801ec4c <AsynchronousHCIEventCallback+0x4e8>
 801e8ec:	e20e      	b.n	801ed0c <AsynchronousHCIEventCallback+0x5a8>
 801e8ee:	e1ff      	b.n	801ecf0 <AsynchronousHCIEventCallback+0x58c>
 801e8f0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801e8f4:	e7df      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801e8f6:	f8dc 1010 	ldr.w	r1, [ip, #16]
 801e8fa:	e7dc      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d0ad      	beq.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e900:	4620      	mov	r0, r4
 801e902:	4798      	blx	r3
 801e904:	e7cb      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801e906:	2803      	cmp	r0, #3
 801e908:	d3a8      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e90a:	7aa1      	ldrb	r1, [r4, #10]
 801e90c:	200d      	movs	r0, #13
 801e90e:	e0cd      	b.n	801eaac <AsynchronousHCIEventCallback+0x348>
 801e910:	2804      	cmp	r0, #4
 801e912:	d3a3      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e914:	200e      	movs	r0, #14
 801e916:	e1e1      	b.n	801ecdc <AsynchronousHCIEventCallback+0x578>
 801e918:	280a      	cmp	r0, #10
 801e91a:	d39f      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e91c:	7aa1      	ldrb	r1, [r4, #10]
 801e91e:	f104 0311 	add.w	r3, r4, #17
 801e922:	4632      	mov	r2, r6
 801e924:	200f      	movs	r0, #15
 801e926:	e1c9      	b.n	801ecbc <AsynchronousHCIEventCallback+0x558>
 801e928:	2803      	cmp	r0, #3
 801e92a:	d397      	bcc.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e92c:	7aa0      	ldrb	r0, [r4, #10]
 801e92e:	4646      	mov	r6, r8
 801e930:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 801e934:	2010      	movs	r0, #16
 801e936:	f000 fca0 	bl	801f27a <BuildEventHeader>
 801e93a:	0005      	movs	r5, r0
 801e93c:	d08e      	beq.n	801e85c <AsynchronousHCIEventCallback+0xf8>
 801e93e:	6869      	ldr	r1, [r5, #4]
 801e940:	7aa0      	ldrb	r0, [r4, #10]
 801e942:	7008      	strb	r0, [r1, #0]
 801e944:	2000      	movs	r0, #0
 801e946:	2304      	movs	r3, #4
 801e948:	e00d      	b.n	801e966 <AsynchronousHCIEventCallback+0x202>
 801e94a:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 801e94e:	eb06 0c80 	add.w	ip, r6, r0, lsl #2
 801e952:	f831 7f0b 	ldrh.w	r7, [r1, #11]!
 801e956:	f822 700c 	strh.w	r7, [r2, ip]
 801e95a:	686a      	ldr	r2, [r5, #4]
 801e95c:	eb03 0780 	add.w	r7, r3, r0, lsl #2
 801e960:	8849      	ldrh	r1, [r1, #2]
 801e962:	53d1      	strh	r1, [r2, r7]
 801e964:	1c40      	adds	r0, r0, #1
 801e966:	686a      	ldr	r2, [r5, #4]
 801e968:	7811      	ldrb	r1, [r2, #0]
 801e96a:	4281      	cmp	r1, r0
 801e96c:	d8ed      	bhi.n	801e94a <AsynchronousHCIEventCallback+0x1e6>
 801e96e:	e224      	b.n	801edba <AsynchronousHCIEventCallback+0x656>
 801e970:	e09f      	b.n	801eab2 <AsynchronousHCIEventCallback+0x34e>
 801e972:	e097      	b.n	801eaa4 <AsynchronousHCIEventCallback+0x340>
 801e974:	e083      	b.n	801ea7e <AsynchronousHCIEventCallback+0x31a>
 801e976:	e069      	b.n	801ea4c <AsynchronousHCIEventCallback+0x2e8>
 801e978:	e062      	b.n	801ea40 <AsynchronousHCIEventCallback+0x2dc>
 801e97a:	e05b      	b.n	801ea34 <AsynchronousHCIEventCallback+0x2d0>
 801e97c:	e027      	b.n	801e9ce <AsynchronousHCIEventCallback+0x26a>
 801e97e:	e000      	b.n	801e982 <AsynchronousHCIEventCallback+0x21e>
 801e980:	e12f      	b.n	801ebe2 <AsynchronousHCIEventCallback+0x47e>
 801e982:	2808      	cmp	r0, #8
 801e984:	d38c      	bcc.n	801e8a0 <AsynchronousHCIEventCallback+0x13c>
 801e986:	2108      	movs	r1, #8
 801e988:	2011      	movs	r0, #17
 801e98a:	f000 fc76 	bl	801f27a <BuildEventHeader>
 801e98e:	0005      	movs	r5, r0
 801e990:	d086      	beq.n	801e8a0 <AsynchronousHCIEventCallback+0x13c>
 801e992:	6869      	ldr	r1, [r5, #4]
 801e994:	7aa0      	ldrb	r0, [r4, #10]
 801e996:	7008      	strb	r0, [r1, #0]
 801e998:	6869      	ldr	r1, [r5, #4]
 801e99a:	f8b4 000b 	ldrh.w	r0, [r4, #11]
 801e99e:	8048      	strh	r0, [r1, #2]
 801e9a0:	6869      	ldr	r1, [r5, #4]
 801e9a2:	7b60      	ldrb	r0, [r4, #13]
 801e9a4:	7108      	strb	r0, [r1, #4]
 801e9a6:	6869      	ldr	r1, [r5, #4]
 801e9a8:	89e0      	ldrh	r0, [r4, #14]
 801e9aa:	80c8      	strh	r0, [r1, #6]
 801e9ac:	e206      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801e9ae:	e150      	b.n	801ec52 <AsynchronousHCIEventCallback+0x4ee>
 801e9b0:	e146      	b.n	801ec40 <AsynchronousHCIEventCallback+0x4dc>
 801e9b2:	e127      	b.n	801ec04 <AsynchronousHCIEventCallback+0x4a0>
 801e9b4:	e0fc      	b.n	801ebb0 <AsynchronousHCIEventCallback+0x44c>
 801e9b6:	e0da      	b.n	801eb6e <AsynchronousHCIEventCallback+0x40a>
 801e9b8:	e0d4      	b.n	801eb64 <AsynchronousHCIEventCallback+0x400>
 801e9ba:	e09e      	b.n	801eafa <AsynchronousHCIEventCallback+0x396>
 801e9bc:	e097      	b.n	801eaee <AsynchronousHCIEventCallback+0x38a>
 801e9be:	e090      	b.n	801eae2 <AsynchronousHCIEventCallback+0x37e>
 801e9c0:	e089      	b.n	801ead6 <AsynchronousHCIEventCallback+0x372>
 801e9c2:	e188      	b.n	801ecd6 <AsynchronousHCIEventCallback+0x572>
 801e9c4:	e17d      	b.n	801ecc2 <AsynchronousHCIEventCallback+0x55e>
 801e9c6:	e173      	b.n	801ecb0 <AsynchronousHCIEventCallback+0x54c>
 801e9c8:	e16c      	b.n	801eca4 <AsynchronousHCIEventCallback+0x540>
 801e9ca:	e165      	b.n	801ec98 <AsynchronousHCIEventCallback+0x534>
 801e9cc:	e15f      	b.n	801ec8e <AsynchronousHCIEventCallback+0x52a>
 801e9ce:	2803      	cmp	r0, #3
 801e9d0:	d3ec      	bcc.n	801e9ac <AsynchronousHCIEventCallback+0x248>
 801e9d2:	7aa0      	ldrb	r0, [r4, #10]
 801e9d4:	2701      	movs	r7, #1
 801e9d6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801e9da:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801e9de:	eb07 0140 	add.w	r1, r7, r0, lsl #1
 801e9e2:	2012      	movs	r0, #18
 801e9e4:	f000 fc49 	bl	801f27a <BuildEventHeader>
 801e9e8:	0005      	movs	r5, r0
 801e9ea:	d0df      	beq.n	801e9ac <AsynchronousHCIEventCallback+0x248>
 801e9ec:	6869      	ldr	r1, [r5, #4]
 801e9ee:	7aa0      	ldrb	r0, [r4, #10]
 801e9f0:	2600      	movs	r6, #0
 801e9f2:	7008      	strb	r0, [r1, #0]
 801e9f4:	f04f 0807 	mov.w	r8, #7
 801e9f8:	e017      	b.n	801ea2a <AsynchronousHCIEventCallback+0x2c6>
 801e9fa:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 801e9fe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 801ea02:	eb07 0240 	add.w	r2, r7, r0, lsl #1
 801ea06:	440a      	add	r2, r1
 801ea08:	eb04 0140 	add.w	r1, r4, r0, lsl #1
 801ea0c:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 801ea10:	f8d1 300b 	ldr.w	r3, [r1, #11]
 801ea14:	6013      	str	r3, [r2, #0]
 801ea16:	f8b1 300f 	ldrh.w	r3, [r1, #15]
 801ea1a:	8093      	strh	r3, [r2, #4]
 801ea1c:	686b      	ldr	r3, [r5, #4]
 801ea1e:	2210      	movs	r2, #16
 801ea20:	4418      	add	r0, r3
 801ea22:	3111      	adds	r1, #17
 801ea24:	f7f5 f9ad 	bl	8013d82 <__aeabi_memcpy>
 801ea28:	1c76      	adds	r6, r6, #1
 801ea2a:	6869      	ldr	r1, [r5, #4]
 801ea2c:	7808      	ldrb	r0, [r1, #0]
 801ea2e:	42b0      	cmp	r0, r6
 801ea30:	d8e3      	bhi.n	801e9fa <AsynchronousHCIEventCallback+0x296>
 801ea32:	e1c2      	b.n	801edba <AsynchronousHCIEventCallback+0x656>
 801ea34:	2808      	cmp	r0, #8
 801ea36:	d3b9      	bcc.n	801e9ac <AsynchronousHCIEventCallback+0x248>
 801ea38:	2300      	movs	r3, #0
 801ea3a:	461a      	mov	r2, r3
 801ea3c:	2013      	movs	r0, #19
 801ea3e:	e162      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801ea40:	2808      	cmp	r0, #8
 801ea42:	d3b3      	bcc.n	801e9ac <AsynchronousHCIEventCallback+0x248>
 801ea44:	2300      	movs	r3, #0
 801ea46:	461a      	mov	r2, r3
 801ea48:	2014      	movs	r0, #20
 801ea4a:	e15c      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801ea4c:	2818      	cmp	r0, #24
 801ea4e:	d3ad      	bcc.n	801e9ac <AsynchronousHCIEventCallback+0x248>
 801ea50:	2117      	movs	r1, #23
 801ea52:	2015      	movs	r0, #21
 801ea54:	f000 fc11 	bl	801f27a <BuildEventHeader>
 801ea58:	0005      	movs	r5, r0
 801ea5a:	d0a7      	beq.n	801e9ac <AsynchronousHCIEventCallback+0x248>
 801ea5c:	6868      	ldr	r0, [r5, #4]
 801ea5e:	f8d4 100a 	ldr.w	r1, [r4, #10]
 801ea62:	2210      	movs	r2, #16
 801ea64:	6001      	str	r1, [r0, #0]
 801ea66:	89e1      	ldrh	r1, [r4, #14]
 801ea68:	8081      	strh	r1, [r0, #4]
 801ea6a:	6868      	ldr	r0, [r5, #4]
 801ea6c:	4659      	mov	r1, fp
 801ea6e:	1d80      	adds	r0, r0, #6
 801ea70:	f7f5 f987 	bl	8013d82 <__aeabi_memcpy>
 801ea74:	6869      	ldr	r1, [r5, #4]
 801ea76:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ea7a:	7588      	strb	r0, [r1, #22]
 801ea7c:	e19e      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ea7e:	7a65      	ldrb	r5, [r4, #9]
 801ea80:	460f      	mov	r7, r1
 801ea82:	2016      	movs	r0, #22
 801ea84:	1ca9      	adds	r1, r5, #2
 801ea86:	f000 fbf8 	bl	801f27a <BuildEventHeader>
 801ea8a:	0006      	movs	r6, r0
 801ea8c:	d008      	beq.n	801eaa0 <AsynchronousHCIEventCallback+0x33c>
 801ea8e:	6870      	ldr	r0, [r6, #4]
 801ea90:	8005      	strh	r5, [r0, #0]
 801ea92:	b12d      	cbz	r5, 801eaa0 <AsynchronousHCIEventCallback+0x33c>
 801ea94:	6870      	ldr	r0, [r6, #4]
 801ea96:	462a      	mov	r2, r5
 801ea98:	4639      	mov	r1, r7
 801ea9a:	1c80      	adds	r0, r0, #2
 801ea9c:	f7f4 fd0b 	bl	80134b6 <BTPS_MemCopy>
 801eaa0:	4635      	mov	r5, r6
 801eaa2:	e18b      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801eaa4:	2803      	cmp	r0, #3
 801eaa6:	d3e9      	bcc.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eaa8:	7aa1      	ldrb	r1, [r4, #10]
 801eaaa:	2017      	movs	r0, #23
 801eaac:	f000 fb8c 	bl	801f1c8 <BuildEventByte>
 801eab0:	e6f5      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801eab2:	2805      	cmp	r0, #5
 801eab4:	d3e2      	bcc.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eab6:	2104      	movs	r1, #4
 801eab8:	2018      	movs	r0, #24
 801eaba:	f000 fbde 	bl	801f27a <BuildEventHeader>
 801eabe:	0005      	movs	r5, r0
 801eac0:	d0dc      	beq.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eac2:	6869      	ldr	r1, [r5, #4]
 801eac4:	8960      	ldrh	r0, [r4, #10]
 801eac6:	8008      	strh	r0, [r1, #0]
 801eac8:	6869      	ldr	r1, [r5, #4]
 801eaca:	7b20      	ldrb	r0, [r4, #12]
 801eacc:	7088      	strb	r0, [r1, #2]
 801eace:	e175      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ead0:	f8dc 1018 	ldr.w	r1, [ip, #24]
 801ead4:	e6ef      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801ead6:	2807      	cmp	r0, #7
 801ead8:	d3d0      	bcc.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eada:	464b      	mov	r3, r9
 801eadc:	4632      	mov	r2, r6
 801eade:	201a      	movs	r0, #26
 801eae0:	e0f6      	b.n	801ecd0 <AsynchronousHCIEventCallback+0x56c>
 801eae2:	2809      	cmp	r0, #9
 801eae4:	d3ca      	bcc.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eae6:	2201      	movs	r2, #1
 801eae8:	465b      	mov	r3, fp
 801eaea:	201c      	movs	r0, #28
 801eaec:	e10b      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801eaee:	2809      	cmp	r0, #9
 801eaf0:	d3c4      	bcc.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eaf2:	2201      	movs	r2, #1
 801eaf4:	465b      	mov	r3, fp
 801eaf6:	201d      	movs	r0, #29
 801eaf8:	e105      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801eafa:	2818      	cmp	r0, #24
 801eafc:	d3be      	bcc.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eafe:	2118      	movs	r1, #24
 801eb00:	2021      	movs	r0, #33	; 0x21
 801eb02:	f000 fbba 	bl	801f27a <BuildEventHeader>
 801eb06:	0005      	movs	r5, r0
 801eb08:	d0b8      	beq.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eb0a:	6869      	ldr	r1, [r5, #4]
 801eb0c:	7aa0      	ldrb	r0, [r4, #10]
 801eb0e:	7008      	strb	r0, [r1, #0]
 801eb10:	6869      	ldr	r1, [r5, #4]
 801eb12:	f8b4 000b 	ldrh.w	r0, [r4, #11]
 801eb16:	8048      	strh	r0, [r1, #2]
 801eb18:	6869      	ldr	r1, [r5, #4]
 801eb1a:	7b60      	ldrb	r0, [r4, #13]
 801eb1c:	7108      	strb	r0, [r1, #4]
 801eb1e:	6869      	ldr	r1, [r5, #4]
 801eb20:	7ba0      	ldrb	r0, [r4, #14]
 801eb22:	7148      	strb	r0, [r1, #5]
 801eb24:	6869      	ldr	r1, [r5, #4]
 801eb26:	7be0      	ldrb	r0, [r4, #15]
 801eb28:	7188      	strb	r0, [r1, #6]
 801eb2a:	7c20      	ldrb	r0, [r4, #16]
 801eb2c:	f8d4 1011 	ldr.w	r1, [r4, #17]
 801eb30:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801eb34:	6869      	ldr	r1, [r5, #4]
 801eb36:	6088      	str	r0, [r1, #8]
 801eb38:	7d20      	ldrb	r0, [r4, #20]
 801eb3a:	f8d4 1015 	ldr.w	r1, [r4, #21]
 801eb3e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801eb42:	6869      	ldr	r1, [r5, #4]
 801eb44:	60c8      	str	r0, [r1, #12]
 801eb46:	7e20      	ldrb	r0, [r4, #24]
 801eb48:	f8d4 1019 	ldr.w	r1, [r4, #25]
 801eb4c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801eb50:	6869      	ldr	r1, [r5, #4]
 801eb52:	6108      	str	r0, [r1, #16]
 801eb54:	7f20      	ldrb	r0, [r4, #28]
 801eb56:	f8d4 101d 	ldr.w	r1, [r4, #29]
 801eb5a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801eb5e:	6869      	ldr	r1, [r5, #4]
 801eb60:	6148      	str	r0, [r1, #20]
 801eb62:	e12b      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801eb64:	2f00      	cmp	r7, #0
 801eb66:	d089      	beq.n	801ea7c <AsynchronousHCIEventCallback+0x318>
 801eb68:	4620      	mov	r0, r4
 801eb6a:	47b8      	blx	r7
 801eb6c:	e697      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801eb6e:	2500      	movs	r5, #0
 801eb70:	280f      	cmp	r0, #15
 801eb72:	d31a      	bcc.n	801ebaa <AsynchronousHCIEventCallback+0x446>
 801eb74:	210e      	movs	r1, #14
 801eb76:	2023      	movs	r0, #35	; 0x23
 801eb78:	f000 fb7f 	bl	801f27a <BuildEventHeader>
 801eb7c:	0005      	movs	r5, r0
 801eb7e:	d014      	beq.n	801ebaa <AsynchronousHCIEventCallback+0x446>
 801eb80:	6869      	ldr	r1, [r5, #4]
 801eb82:	7aa0      	ldrb	r0, [r4, #10]
 801eb84:	7008      	strb	r0, [r1, #0]
 801eb86:	6869      	ldr	r1, [r5, #4]
 801eb88:	f8b4 000b 	ldrh.w	r0, [r4, #11]
 801eb8c:	8048      	strh	r0, [r1, #2]
 801eb8e:	6869      	ldr	r1, [r5, #4]
 801eb90:	7b60      	ldrb	r0, [r4, #13]
 801eb92:	7108      	strb	r0, [r1, #4]
 801eb94:	6869      	ldr	r1, [r5, #4]
 801eb96:	7ba0      	ldrb	r0, [r4, #14]
 801eb98:	7148      	strb	r0, [r1, #5]
 801eb9a:	4620      	mov	r0, r4
 801eb9c:	6869      	ldr	r1, [r5, #4]
 801eb9e:	f850 2f0f 	ldr.w	r2, [r0, #15]!
 801eba2:	f841 2f06 	str.w	r2, [r1, #6]!
 801eba6:	6840      	ldr	r0, [r0, #4]
 801eba8:	6048      	str	r0, [r1, #4]
 801ebaa:	e107      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ebac:	20000c3c 	.word	0x20000c3c
 801ebb0:	f8dc 101c 	ldr.w	r1, [ip, #28]
 801ebb4:	e67f      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801ebb6:	2aff      	cmp	r2, #255	; 0xff
 801ebb8:	d00e      	beq.n	801ebd8 <AsynchronousHCIEventCallback+0x474>
 801ebba:	201e      	movs	r0, #30
 801ebbc:	7a66      	ldrb	r6, [r4, #9]
 801ebbe:	460f      	mov	r7, r1
 801ebc0:	4631      	mov	r1, r6
 801ebc2:	f000 fb5a 	bl	801f27a <BuildEventHeader>
 801ebc6:	0005      	movs	r5, r0
 801ebc8:	d005      	beq.n	801ebd6 <AsynchronousHCIEventCallback+0x472>
 801ebca:	b13e      	cbz	r6, 801ebdc <AsynchronousHCIEventCallback+0x478>
 801ebcc:	4632      	mov	r2, r6
 801ebce:	4639      	mov	r1, r7
 801ebd0:	6868      	ldr	r0, [r5, #4]
 801ebd2:	f7f4 fc70 	bl	80134b6 <BTPS_MemCopy>
 801ebd6:	e0f1      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ebd8:	201f      	movs	r0, #31
 801ebda:	e7ef      	b.n	801ebbc <AsynchronousHCIEventCallback+0x458>
 801ebdc:	f8c5 a004 	str.w	sl, [r5, #4]
 801ebe0:	e0ec      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ebe2:	2806      	cmp	r0, #6
 801ebe4:	d30d      	bcc.n	801ec02 <AsynchronousHCIEventCallback+0x49e>
 801ebe6:	f8b4 000b 	ldrh.w	r0, [r4, #11]
 801ebea:	f5a0 6140 	sub.w	r1, r0, #3072	; 0xc00
 801ebee:	3903      	subs	r1, #3
 801ebf0:	d107      	bne.n	801ec02 <AsynchronousHCIEventCallback+0x49e>
 801ebf2:	7b60      	ldrb	r0, [r4, #13]
 801ebf4:	2800      	cmp	r0, #0
 801ebf6:	d104      	bne.n	801ec02 <AsynchronousHCIEventCallback+0x49e>
 801ebf8:	2020      	movs	r0, #32
 801ebfa:	f000 fb3e 	bl	801f27a <BuildEventHeader>
 801ebfe:	0005      	movs	r5, r0
 801ec00:	d1ec      	bne.n	801ebdc <AsynchronousHCIEventCallback+0x478>
 801ec02:	e0db      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ec04:	280d      	cmp	r0, #13
 801ec06:	d341      	bcc.n	801ec8c <AsynchronousHCIEventCallback+0x528>
 801ec08:	210c      	movs	r1, #12
 801ec0a:	2026      	movs	r0, #38	; 0x26
 801ec0c:	f000 fb35 	bl	801f27a <BuildEventHeader>
 801ec10:	0005      	movs	r5, r0
 801ec12:	d03b      	beq.n	801ec8c <AsynchronousHCIEventCallback+0x528>
 801ec14:	6869      	ldr	r1, [r5, #4]
 801ec16:	7aa0      	ldrb	r0, [r4, #10]
 801ec18:	7008      	strb	r0, [r1, #0]
 801ec1a:	6869      	ldr	r1, [r5, #4]
 801ec1c:	f8b4 000b 	ldrh.w	r0, [r4, #11]
 801ec20:	8048      	strh	r0, [r1, #2]
 801ec22:	6869      	ldr	r1, [r5, #4]
 801ec24:	f8b4 000d 	ldrh.w	r0, [r4, #13]
 801ec28:	8088      	strh	r0, [r1, #4]
 801ec2a:	6869      	ldr	r1, [r5, #4]
 801ec2c:	f8b4 000f 	ldrh.w	r0, [r4, #15]
 801ec30:	80c8      	strh	r0, [r1, #6]
 801ec32:	6869      	ldr	r1, [r5, #4]
 801ec34:	f8b4 0011 	ldrh.w	r0, [r4, #17]
 801ec38:	8108      	strh	r0, [r1, #8]
 801ec3a:	f8b4 0013 	ldrh.w	r0, [r4, #19]
 801ec3e:	e0b3      	b.n	801eda8 <AsynchronousHCIEventCallback+0x644>
 801ec40:	2805      	cmp	r0, #5
 801ec42:	d323      	bcc.n	801ec8c <AsynchronousHCIEventCallback+0x528>
 801ec44:	7aa1      	ldrb	r1, [r4, #10]
 801ec46:	2300      	movs	r3, #0
 801ec48:	4632      	mov	r2, r6
 801ec4a:	2028      	movs	r0, #40	; 0x28
 801ec4c:	f000 fae0 	bl	801f210 <BuildEventByteWordByte>
 801ec50:	e625      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801ec52:	2808      	cmp	r0, #8
 801ec54:	d31a      	bcc.n	801ec8c <AsynchronousHCIEventCallback+0x528>
 801ec56:	2300      	movs	r3, #0
 801ec58:	461a      	mov	r2, r3
 801ec5a:	2029      	movs	r0, #41	; 0x29
 801ec5c:	e053      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801ec5e:	280b      	cmp	r0, #11
 801ec60:	d314      	bcc.n	801ec8c <AsynchronousHCIEventCallback+0x528>
 801ec62:	2109      	movs	r1, #9
 801ec64:	202a      	movs	r0, #42	; 0x2a
 801ec66:	f000 fb08 	bl	801f27a <BuildEventHeader>
 801ec6a:	0005      	movs	r5, r0
 801ec6c:	d00e      	beq.n	801ec8c <AsynchronousHCIEventCallback+0x528>
 801ec6e:	6868      	ldr	r0, [r5, #4]
 801ec70:	f8d4 100a 	ldr.w	r1, [r4, #10]
 801ec74:	6001      	str	r1, [r0, #0]
 801ec76:	89e1      	ldrh	r1, [r4, #14]
 801ec78:	8081      	strh	r1, [r0, #4]
 801ec7a:	6869      	ldr	r1, [r5, #4]
 801ec7c:	7c20      	ldrb	r0, [r4, #16]
 801ec7e:	7188      	strb	r0, [r1, #6]
 801ec80:	6869      	ldr	r1, [r5, #4]
 801ec82:	7c60      	ldrb	r0, [r4, #17]
 801ec84:	71c8      	strb	r0, [r1, #7]
 801ec86:	6869      	ldr	r1, [r5, #4]
 801ec88:	7ca0      	ldrb	r0, [r4, #18]
 801ec8a:	7208      	strb	r0, [r1, #8]
 801ec8c:	e096      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ec8e:	280c      	cmp	r0, #12
 801ec90:	d36e      	bcc.n	801ed70 <AsynchronousHCIEventCallback+0x60c>
 801ec92:	465a      	mov	r2, fp
 801ec94:	202b      	movs	r0, #43	; 0x2b
 801ec96:	e028      	b.n	801ecea <AsynchronousHCIEventCallback+0x586>
 801ec98:	2808      	cmp	r0, #8
 801ec9a:	d369      	bcc.n	801ed70 <AsynchronousHCIEventCallback+0x60c>
 801ec9c:	2300      	movs	r3, #0
 801ec9e:	461a      	mov	r2, r3
 801eca0:	202c      	movs	r0, #44	; 0x2c
 801eca2:	e030      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801eca4:	2808      	cmp	r0, #8
 801eca6:	d363      	bcc.n	801ed70 <AsynchronousHCIEventCallback+0x60c>
 801eca8:	2300      	movs	r3, #0
 801ecaa:	461a      	mov	r2, r3
 801ecac:	202d      	movs	r0, #45	; 0x2d
 801ecae:	e02a      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801ecb0:	2809      	cmp	r0, #9
 801ecb2:	d35d      	bcc.n	801ed70 <AsynchronousHCIEventCallback+0x60c>
 801ecb4:	7aa1      	ldrb	r1, [r4, #10]
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	4632      	mov	r2, r6
 801ecba:	202e      	movs	r0, #46	; 0x2e
 801ecbc:	f000 fa8e 	bl	801f1dc <BuildEventByteBD_ADDRByte>
 801ecc0:	e5ed      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801ecc2:	2806      	cmp	r0, #6
 801ecc4:	d37a      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ecc6:	460a      	mov	r2, r1
 801ecc8:	f104 030c 	add.w	r3, r4, #12
 801eccc:	2100      	movs	r1, #0
 801ecce:	202f      	movs	r0, #47	; 0x2f
 801ecd0:	f000 fab5 	bl	801f23e <BuildEventByteWordWord>
 801ecd4:	e5e3      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801ecd6:	2804      	cmp	r0, #4
 801ecd8:	d370      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ecda:	2030      	movs	r0, #48	; 0x30
 801ecdc:	f000 fadc 	bl	801f298 <BuildEventWord>
 801ece0:	e5dd      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801ece2:	280c      	cmp	r0, #12
 801ece4:	d36a      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ece6:	465a      	mov	r2, fp
 801ece8:	2031      	movs	r0, #49	; 0x31
 801ecea:	f000 fa34 	bl	801f156 <BuildEventBD_ADDRDWord>
 801ecee:	e5d6      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801ecf0:	2809      	cmp	r0, #9
 801ecf2:	d363      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ecf4:	2201      	movs	r2, #1
 801ecf6:	465b      	mov	r3, fp
 801ecf8:	2032      	movs	r0, #50	; 0x32
 801ecfa:	e004      	b.n	801ed06 <AsynchronousHCIEventCallback+0x5a2>
 801ecfc:	2810      	cmp	r0, #16
 801ecfe:	d35d      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed00:	465b      	mov	r3, fp
 801ed02:	2208      	movs	r2, #8
 801ed04:	2033      	movs	r0, #51	; 0x33
 801ed06:	f000 fa40 	bl	801f18a <BuildEventBD_ADDRVariableData>
 801ed0a:	e5c8      	b.n	801e89e <AsynchronousHCIEventCallback+0x13a>
 801ed0c:	2803      	cmp	r0, #3
 801ed0e:	d355      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed10:	7aa1      	ldrb	r1, [r4, #10]
 801ed12:	2906      	cmp	r1, #6
 801ed14:	d251      	bcs.n	801edba <AsynchronousHCIEventCallback+0x656>
 801ed16:	e8df f001 	tbb	[pc, r1]
 801ed1a:	0350      	.short	0x0350
 801ed1c:	4a4d2f2c 	.word	0x4a4d2f2c
 801ed20:	2815      	cmp	r0, #21
 801ed22:	d34b      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed24:	212c      	movs	r1, #44	; 0x2c
 801ed26:	2042      	movs	r0, #66	; 0x42
 801ed28:	f000 faa7 	bl	801f27a <BuildEventHeader>
 801ed2c:	0005      	movs	r5, r0
 801ed2e:	d045      	beq.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed30:	6869      	ldr	r1, [r5, #4]
 801ed32:	f881 a000 	strb.w	sl, [r1]
 801ed36:	6869      	ldr	r1, [r5, #4]
 801ed38:	7ae0      	ldrb	r0, [r4, #11]
 801ed3a:	7088      	strb	r0, [r1, #2]
 801ed3c:	6869      	ldr	r1, [r5, #4]
 801ed3e:	89a0      	ldrh	r0, [r4, #12]
 801ed40:	8088      	strh	r0, [r1, #4]
 801ed42:	6869      	ldr	r1, [r5, #4]
 801ed44:	7ba0      	ldrb	r0, [r4, #14]
 801ed46:	7188      	strb	r0, [r1, #6]
 801ed48:	6869      	ldr	r1, [r5, #4]
 801ed4a:	7be0      	ldrb	r0, [r4, #15]
 801ed4c:	71c8      	strb	r0, [r1, #7]
 801ed4e:	6868      	ldr	r0, [r5, #4]
 801ed50:	6921      	ldr	r1, [r4, #16]
 801ed52:	6081      	str	r1, [r0, #8]
 801ed54:	8aa1      	ldrh	r1, [r4, #20]
 801ed56:	8181      	strh	r1, [r0, #12]
 801ed58:	6869      	ldr	r1, [r5, #4]
 801ed5a:	8ae0      	ldrh	r0, [r4, #22]
 801ed5c:	81c8      	strh	r0, [r1, #14]
 801ed5e:	6869      	ldr	r1, [r5, #4]
 801ed60:	8b20      	ldrh	r0, [r4, #24]
 801ed62:	8208      	strh	r0, [r1, #16]
 801ed64:	6869      	ldr	r1, [r5, #4]
 801ed66:	8b60      	ldrh	r0, [r4, #26]
 801ed68:	8248      	strh	r0, [r1, #18]
 801ed6a:	6869      	ldr	r1, [r5, #4]
 801ed6c:	7f20      	ldrb	r0, [r4, #28]
 801ed6e:	7508      	strb	r0, [r1, #20]
 801ed70:	e024      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed72:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
 801ed76:	e59e      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801ed78:	280c      	cmp	r0, #12
 801ed7a:	d31f      	bcc.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed7c:	212c      	movs	r1, #44	; 0x2c
 801ed7e:	2042      	movs	r0, #66	; 0x42
 801ed80:	f000 fa7b 	bl	801f27a <BuildEventHeader>
 801ed84:	0005      	movs	r5, r0
 801ed86:	d019      	beq.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801ed88:	6869      	ldr	r1, [r5, #4]
 801ed8a:	f881 8000 	strb.w	r8, [r1]
 801ed8e:	6869      	ldr	r1, [r5, #4]
 801ed90:	7ae0      	ldrb	r0, [r4, #11]
 801ed92:	7088      	strb	r0, [r1, #2]
 801ed94:	6869      	ldr	r1, [r5, #4]
 801ed96:	89a0      	ldrh	r0, [r4, #12]
 801ed98:	8088      	strh	r0, [r1, #4]
 801ed9a:	6869      	ldr	r1, [r5, #4]
 801ed9c:	89e0      	ldrh	r0, [r4, #14]
 801ed9e:	80c8      	strh	r0, [r1, #6]
 801eda0:	6869      	ldr	r1, [r5, #4]
 801eda2:	8a20      	ldrh	r0, [r4, #16]
 801eda4:	8108      	strh	r0, [r1, #8]
 801eda6:	8a60      	ldrh	r0, [r4, #18]
 801eda8:	6869      	ldr	r1, [r5, #4]
 801edaa:	8148      	strh	r0, [r1, #10]
 801edac:	e006      	b.n	801edbc <AsynchronousHCIEventCallback+0x658>
 801edae:	f8dc 1020 	ldr.w	r1, [ip, #32]
 801edb2:	e580      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801edb4:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 801edb8:	e57d      	b.n	801e8b6 <AsynchronousHCIEventCallback+0x152>
 801edba:	b12c      	cbz	r4, 801edc8 <AsynchronousHCIEventCallback+0x664>
 801edbc:	7820      	ldrb	r0, [r4, #0]
 801edbe:	0600      	lsls	r0, r0, #24
 801edc0:	d402      	bmi.n	801edc8 <AsynchronousHCIEventCallback+0x664>
 801edc2:	4620      	mov	r0, r4
 801edc4:	f7f4 fb14 	bl	80133f0 <BTPS_FreeMemory>
 801edc8:	2d00      	cmp	r5, #0
 801edca:	d00b      	beq.n	801ede4 <AsynchronousHCIEventCallback+0x680>
 801edcc:	f88d a000 	strb.w	sl, [sp]
 801edd0:	4669      	mov	r1, sp
 801edd2:	9501      	str	r5, [sp, #4]
 801edd4:	9802      	ldr	r0, [sp, #8]
 801edd6:	f7f4 fc53 	bl	8013680 <BTPS_AddMailbox>
 801edda:	2800      	cmp	r0, #0
 801eddc:	d102      	bne.n	801ede4 <AsynchronousHCIEventCallback+0x680>
 801edde:	9801      	ldr	r0, [sp, #4]
 801ede0:	f7f4 fb06 	bl	80133f0 <BTPS_FreeMemory>
 801ede4:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.AsynchronousSCODataCallback:

0801ede8 <AsynchronousSCODataCallback>:
 801ede8:	b51c      	push	{r2, r3, r4, lr}
 801edea:	0008      	movs	r0, r1
 801edec:	d016      	beq.n	801ee1c <AsynchronousSCODataCallback+0x34>
 801edee:	6843      	ldr	r3, [r0, #4]
 801edf0:	2b03      	cmp	r3, #3
 801edf2:	d313      	bcc.n	801ee1c <AsynchronousSCODataCallback+0x34>
 801edf4:	b192      	cbz	r2, 801ee1c <AsynchronousSCODataCallback+0x34>
 801edf6:	7a81      	ldrb	r1, [r0, #10]
 801edf8:	b169      	cbz	r1, 801ee16 <AsynchronousSCODataCallback+0x2e>
 801edfa:	1cc9      	adds	r1, r1, #3
 801edfc:	428b      	cmp	r3, r1
 801edfe:	d30a      	bcc.n	801ee16 <AsynchronousSCODataCallback+0x2e>
 801ee00:	2102      	movs	r1, #2
 801ee02:	f88d 1000 	strb.w	r1, [sp]
 801ee06:	9001      	str	r0, [sp, #4]
 801ee08:	4669      	mov	r1, sp
 801ee0a:	4610      	mov	r0, r2
 801ee0c:	f7f4 fc38 	bl	8013680 <BTPS_AddMailbox>
 801ee10:	2800      	cmp	r0, #0
 801ee12:	d102      	bne.n	801ee1a <AsynchronousSCODataCallback+0x32>
 801ee14:	9801      	ldr	r0, [sp, #4]
 801ee16:	f7f4 faeb 	bl	80133f0 <BTPS_FreeMemory>
 801ee1a:	bd1c      	pop	{r2, r3, r4, pc}
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	d1fa      	bne.n	801ee16 <AsynchronousSCODataCallback+0x2e>
 801ee20:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.BuildAndSubmitCommandBD_ADDRByte:

0801ee24 <BuildAndSubmitCommandBD_ADDRByte>:
 801ee24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee28:	461f      	mov	r7, r3
 801ee2a:	9e06      	ldr	r6, [sp, #24]
 801ee2c:	4613      	mov	r3, r2
 801ee2e:	468c      	mov	ip, r1
 801ee30:	4605      	mov	r5, r0
 801ee32:	f06f 040d 	mvn.w	r4, #13
 801ee36:	b10e      	cbz	r6, 801ee3c <BuildAndSubmitCommandBD_ADDRByte+0x18>
 801ee38:	220a      	movs	r2, #10
 801ee3a:	e000      	b.n	801ee3e <BuildAndSubmitCommandBD_ADDRByte+0x1a>
 801ee3c:	2209      	movs	r2, #9
 801ee3e:	4619      	mov	r1, r3
 801ee40:	4660      	mov	r0, ip
 801ee42:	f000 f971 	bl	801f128 <BuildCommandHeader>
 801ee46:	6028      	str	r0, [r5, #0]
 801ee48:	b1c0      	cbz	r0, 801ee7c <BuildAndSubmitCommandBD_ADDRByte+0x58>
 801ee4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ee4c:	6981      	ldr	r1, [r0, #24]
 801ee4e:	6838      	ldr	r0, [r7, #0]
 801ee50:	f8c1 000b 	str.w	r0, [r1, #11]
 801ee54:	88b8      	ldrh	r0, [r7, #4]
 801ee56:	f8a1 000f 	strh.w	r0, [r1, #15]
 801ee5a:	b10e      	cbz	r6, 801ee60 <BuildAndSubmitCommandBD_ADDRByte+0x3c>
 801ee5c:	7830      	ldrb	r0, [r6, #0]
 801ee5e:	7448      	strb	r0, [r1, #17]
 801ee60:	6828      	ldr	r0, [r5, #0]
 801ee62:	4a09      	ldr	r2, [pc, #36]	; (801ee88 <BuildAndSubmitCommandBD_ADDRByte+0x64>)
 801ee64:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ee66:	4603      	mov	r3, r0
 801ee68:	f000 fc16 	bl	801f698 <HCISendPacket>
 801ee6c:	2800      	cmp	r0, #0
 801ee6e:	db01      	blt.n	801ee74 <BuildAndSubmitCommandBD_ADDRByte+0x50>
 801ee70:	2400      	movs	r4, #0
 801ee72:	e005      	b.n	801ee80 <BuildAndSubmitCommandBD_ADDRByte+0x5c>
 801ee74:	6828      	ldr	r0, [r5, #0]
 801ee76:	f7fa fb95 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ee7a:	e001      	b.n	801ee80 <BuildAndSubmitCommandBD_ADDRByte+0x5c>
 801ee7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ee80:	4620      	mov	r0, r4
 801ee82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee86:	0000      	.short	0x0000
 801ee88:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildAndSubmitCommandBD_ADDRByteVariable:

0801ee8c <BuildAndSubmitCommandBD_ADDRByteVariable>:
 801ee8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ee90:	4699      	mov	r9, r3
 801ee92:	e9dd 8608 	ldrd	r8, r6, [sp, #32]
 801ee96:	4607      	mov	r7, r0
 801ee98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801ee9c:	4613      	mov	r3, r2
 801ee9e:	460c      	mov	r4, r1
 801eea0:	f06f 050d 	mvn.w	r5, #13
 801eea4:	ea5f 0008 	movs.w	r0, r8
 801eea8:	d000      	beq.n	801eeac <BuildAndSubmitCommandBD_ADDRByteVariable+0x20>
 801eeaa:	2001      	movs	r0, #1
 801eeac:	4430      	add	r0, r6
 801eeae:	3009      	adds	r0, #9
 801eeb0:	b2c2      	uxtb	r2, r0
 801eeb2:	4619      	mov	r1, r3
 801eeb4:	4620      	mov	r0, r4
 801eeb6:	f000 f937 	bl	801f128 <BuildCommandHeader>
 801eeba:	6038      	str	r0, [r7, #0]
 801eebc:	b358      	cbz	r0, 801ef16 <BuildAndSubmitCommandBD_ADDRByteVariable+0x8a>
 801eebe:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801eec0:	f8d9 1000 	ldr.w	r1, [r9]
 801eec4:	f1b8 0f00 	cmp.w	r8, #0
 801eec8:	6984      	ldr	r4, [r0, #24]
 801eeca:	f8c4 100b 	str.w	r1, [r4, #11]
 801eece:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 801eed2:	f8a4 000f 	strh.w	r0, [r4, #15]
 801eed6:	d008      	beq.n	801eeea <BuildAndSubmitCommandBD_ADDRByteVariable+0x5e>
 801eed8:	f898 0000 	ldrb.w	r0, [r8]
 801eedc:	7460      	strb	r0, [r4, #17]
 801eede:	b15e      	cbz	r6, 801eef8 <BuildAndSubmitCommandBD_ADDRByteVariable+0x6c>
 801eee0:	4632      	mov	r2, r6
 801eee2:	4651      	mov	r1, sl
 801eee4:	f104 0012 	add.w	r0, r4, #18
 801eee8:	e004      	b.n	801eef4 <BuildAndSubmitCommandBD_ADDRByteVariable+0x68>
 801eeea:	b12e      	cbz	r6, 801eef8 <BuildAndSubmitCommandBD_ADDRByteVariable+0x6c>
 801eeec:	4632      	mov	r2, r6
 801eeee:	4651      	mov	r1, sl
 801eef0:	f104 0011 	add.w	r0, r4, #17
 801eef4:	f7f4 fadf 	bl	80134b6 <BTPS_MemCopy>
 801eef8:	6838      	ldr	r0, [r7, #0]
 801eefa:	4a09      	ldr	r2, [pc, #36]	; (801ef20 <BuildAndSubmitCommandBD_ADDRByteVariable+0x94>)
 801eefc:	4621      	mov	r1, r4
 801eefe:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ef00:	4603      	mov	r3, r0
 801ef02:	f000 fbc9 	bl	801f698 <HCISendPacket>
 801ef06:	2800      	cmp	r0, #0
 801ef08:	db01      	blt.n	801ef0e <BuildAndSubmitCommandBD_ADDRByteVariable+0x82>
 801ef0a:	2500      	movs	r5, #0
 801ef0c:	e005      	b.n	801ef1a <BuildAndSubmitCommandBD_ADDRByteVariable+0x8e>
 801ef0e:	6838      	ldr	r0, [r7, #0]
 801ef10:	f7fa fb48 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ef14:	e001      	b.n	801ef1a <BuildAndSubmitCommandBD_ADDRByteVariable+0x8e>
 801ef16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ef1a:	4628      	mov	r0, r5
 801ef1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef20:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildAndSubmitCommandByte:

0801ef24 <BuildAndSubmitCommandByte>:
 801ef24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef28:	461e      	mov	r6, r3
 801ef2a:	4613      	mov	r3, r2
 801ef2c:	460f      	mov	r7, r1
 801ef2e:	4605      	mov	r5, r0
 801ef30:	f06f 040d 	mvn.w	r4, #13
 801ef34:	2204      	movs	r2, #4
 801ef36:	4619      	mov	r1, r3
 801ef38:	4638      	mov	r0, r7
 801ef3a:	f000 f8f5 	bl	801f128 <BuildCommandHeader>
 801ef3e:	6028      	str	r0, [r5, #0]
 801ef40:	b180      	cbz	r0, 801ef64 <BuildAndSubmitCommandByte+0x40>
 801ef42:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ef44:	4a0a      	ldr	r2, [pc, #40]	; (801ef70 <BuildAndSubmitCommandByte+0x4c>)
 801ef46:	6981      	ldr	r1, [r0, #24]
 801ef48:	72ce      	strb	r6, [r1, #11]
 801ef4a:	6828      	ldr	r0, [r5, #0]
 801ef4c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801ef4e:	4603      	mov	r3, r0
 801ef50:	f000 fba2 	bl	801f698 <HCISendPacket>
 801ef54:	2800      	cmp	r0, #0
 801ef56:	db01      	blt.n	801ef5c <BuildAndSubmitCommandByte+0x38>
 801ef58:	2400      	movs	r4, #0
 801ef5a:	e005      	b.n	801ef68 <BuildAndSubmitCommandByte+0x44>
 801ef5c:	6828      	ldr	r0, [r5, #0]
 801ef5e:	f7fa fb21 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ef62:	e001      	b.n	801ef68 <BuildAndSubmitCommandByte+0x44>
 801ef64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ef68:	4620      	mov	r0, r4
 801ef6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef6e:	0000      	.short	0x0000
 801ef70:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildAndSubmitCommandByteVariable:

0801ef74 <BuildAndSubmitCommandByteVariable>:
 801ef74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef78:	001f      	movs	r7, r3
 801ef7a:	e9dd 6908 	ldrd	r6, r9, [sp, #32]
 801ef7e:	4613      	mov	r3, r2
 801ef80:	460c      	mov	r4, r1
 801ef82:	4680      	mov	r8, r0
 801ef84:	f06f 050d 	mvn.w	r5, #13
 801ef88:	d001      	beq.n	801ef8e <BuildAndSubmitCommandByteVariable+0x1a>
 801ef8a:	2001      	movs	r0, #1
 801ef8c:	e000      	b.n	801ef90 <BuildAndSubmitCommandByteVariable+0x1c>
 801ef8e:	2000      	movs	r0, #0
 801ef90:	4430      	add	r0, r6
 801ef92:	1cc0      	adds	r0, r0, #3
 801ef94:	b2c2      	uxtb	r2, r0
 801ef96:	4619      	mov	r1, r3
 801ef98:	4620      	mov	r0, r4
 801ef9a:	f000 f8c5 	bl	801f128 <BuildCommandHeader>
 801ef9e:	f8c8 0000 	str.w	r0, [r8]
 801efa2:	b310      	cbz	r0, 801efea <BuildAndSubmitCommandByteVariable+0x76>
 801efa4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801efa6:	6984      	ldr	r4, [r0, #24]
 801efa8:	b13f      	cbz	r7, 801efba <BuildAndSubmitCommandByteVariable+0x46>
 801efaa:	7838      	ldrb	r0, [r7, #0]
 801efac:	72e0      	strb	r0, [r4, #11]
 801efae:	b15e      	cbz	r6, 801efc8 <BuildAndSubmitCommandByteVariable+0x54>
 801efb0:	4632      	mov	r2, r6
 801efb2:	4649      	mov	r1, r9
 801efb4:	f104 000c 	add.w	r0, r4, #12
 801efb8:	e004      	b.n	801efc4 <BuildAndSubmitCommandByteVariable+0x50>
 801efba:	b12e      	cbz	r6, 801efc8 <BuildAndSubmitCommandByteVariable+0x54>
 801efbc:	4632      	mov	r2, r6
 801efbe:	4649      	mov	r1, r9
 801efc0:	f104 000b 	add.w	r0, r4, #11
 801efc4:	f7f4 fa77 	bl	80134b6 <BTPS_MemCopy>
 801efc8:	f8d8 0000 	ldr.w	r0, [r8]
 801efcc:	4a09      	ldr	r2, [pc, #36]	; (801eff4 <BuildAndSubmitCommandByteVariable+0x80>)
 801efce:	4621      	mov	r1, r4
 801efd0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801efd2:	4603      	mov	r3, r0
 801efd4:	f000 fb60 	bl	801f698 <HCISendPacket>
 801efd8:	2800      	cmp	r0, #0
 801efda:	db01      	blt.n	801efe0 <BuildAndSubmitCommandByteVariable+0x6c>
 801efdc:	2500      	movs	r5, #0
 801efde:	e006      	b.n	801efee <BuildAndSubmitCommandByteVariable+0x7a>
 801efe0:	f8d8 0000 	ldr.w	r0, [r8]
 801efe4:	f7fa fade 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801efe8:	e001      	b.n	801efee <BuildAndSubmitCommandByteVariable+0x7a>
 801efea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801efee:	4628      	mov	r0, r5
 801eff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eff4:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildAndSubmitCommandNoData:

0801eff8 <BuildAndSubmitCommandNoData>:
 801eff8:	b51c      	push	{r2, r3, r4, lr}
 801effa:	2300      	movs	r3, #0
 801effc:	9300      	str	r3, [sp, #0]
 801effe:	9301      	str	r3, [sp, #4]
 801f000:	f7ff ffb8 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 801f004:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.BuildAndSubmitCommandThreeWords:

0801f008 <BuildAndSubmitCommandThreeWords>:
 801f008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f00c:	461f      	mov	r7, r3
 801f00e:	e9dd 8406 	ldrd	r8, r4, [sp, #24]
 801f012:	4613      	mov	r3, r2
 801f014:	468c      	mov	ip, r1
 801f016:	4606      	mov	r6, r0
 801f018:	f06f 050d 	mvn.w	r5, #13
 801f01c:	b10c      	cbz	r4, 801f022 <BuildAndSubmitCommandThreeWords+0x1a>
 801f01e:	2209      	movs	r2, #9
 801f020:	e000      	b.n	801f024 <BuildAndSubmitCommandThreeWords+0x1c>
 801f022:	2207      	movs	r2, #7
 801f024:	4619      	mov	r1, r3
 801f026:	4660      	mov	r0, ip
 801f028:	f000 f87e 	bl	801f128 <BuildCommandHeader>
 801f02c:	6030      	str	r0, [r6, #0]
 801f02e:	b1e8      	cbz	r0, 801f06c <BuildAndSubmitCommandThreeWords+0x64>
 801f030:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f032:	6981      	ldr	r1, [r0, #24]
 801f034:	0a38      	lsrs	r0, r7, #8
 801f036:	72cf      	strb	r7, [r1, #11]
 801f038:	7308      	strb	r0, [r1, #12]
 801f03a:	f881 800d 	strb.w	r8, [r1, #13]
 801f03e:	ea4f 2018 	mov.w	r0, r8, lsr #8
 801f042:	7388      	strb	r0, [r1, #14]
 801f044:	b124      	cbz	r4, 801f050 <BuildAndSubmitCommandThreeWords+0x48>
 801f046:	7820      	ldrb	r0, [r4, #0]
 801f048:	73c8      	strb	r0, [r1, #15]
 801f04a:	8820      	ldrh	r0, [r4, #0]
 801f04c:	0a00      	lsrs	r0, r0, #8
 801f04e:	7408      	strb	r0, [r1, #16]
 801f050:	6830      	ldr	r0, [r6, #0]
 801f052:	4a09      	ldr	r2, [pc, #36]	; (801f078 <BuildAndSubmitCommandThreeWords+0x70>)
 801f054:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f056:	4603      	mov	r3, r0
 801f058:	f000 fb1e 	bl	801f698 <HCISendPacket>
 801f05c:	2800      	cmp	r0, #0
 801f05e:	db01      	blt.n	801f064 <BuildAndSubmitCommandThreeWords+0x5c>
 801f060:	2500      	movs	r5, #0
 801f062:	e005      	b.n	801f070 <BuildAndSubmitCommandThreeWords+0x68>
 801f064:	6830      	ldr	r0, [r6, #0]
 801f066:	f7fa fa9d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f06a:	e001      	b.n	801f070 <BuildAndSubmitCommandThreeWords+0x68>
 801f06c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801f070:	4628      	mov	r0, r5
 801f072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f076:	0000      	.short	0x0000
 801f078:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildAndSubmitCommandWord:

0801f07c <BuildAndSubmitCommandWord>:
 801f07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f080:	461e      	mov	r6, r3
 801f082:	4613      	mov	r3, r2
 801f084:	460f      	mov	r7, r1
 801f086:	4605      	mov	r5, r0
 801f088:	f06f 040d 	mvn.w	r4, #13
 801f08c:	2205      	movs	r2, #5
 801f08e:	4619      	mov	r1, r3
 801f090:	4638      	mov	r0, r7
 801f092:	f000 f849 	bl	801f128 <BuildCommandHeader>
 801f096:	6028      	str	r0, [r5, #0]
 801f098:	b190      	cbz	r0, 801f0c0 <BuildAndSubmitCommandWord+0x44>
 801f09a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f09c:	4a0b      	ldr	r2, [pc, #44]	; (801f0cc <BuildAndSubmitCommandWord+0x50>)
 801f09e:	6981      	ldr	r1, [r0, #24]
 801f0a0:	0a30      	lsrs	r0, r6, #8
 801f0a2:	72ce      	strb	r6, [r1, #11]
 801f0a4:	7308      	strb	r0, [r1, #12]
 801f0a6:	6828      	ldr	r0, [r5, #0]
 801f0a8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	f000 faf4 	bl	801f698 <HCISendPacket>
 801f0b0:	2800      	cmp	r0, #0
 801f0b2:	db01      	blt.n	801f0b8 <BuildAndSubmitCommandWord+0x3c>
 801f0b4:	2400      	movs	r4, #0
 801f0b6:	e005      	b.n	801f0c4 <BuildAndSubmitCommandWord+0x48>
 801f0b8:	6828      	ldr	r0, [r5, #0]
 801f0ba:	f7fa fa73 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f0be:	e001      	b.n	801f0c4 <BuildAndSubmitCommandWord+0x48>
 801f0c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f0c4:	4620      	mov	r0, r4
 801f0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0ca:	0000      	.short	0x0000
 801f0cc:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildAndSubmitCommandWordByte:

0801f0d0 <BuildAndSubmitCommandWordByte>:
 801f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f0d4:	461e      	mov	r6, r3
 801f0d6:	4613      	mov	r3, r2
 801f0d8:	468c      	mov	ip, r1
 801f0da:	4605      	mov	r5, r0
 801f0dc:	f06f 040d 	mvn.w	r4, #13
 801f0e0:	2206      	movs	r2, #6
 801f0e2:	4619      	mov	r1, r3
 801f0e4:	4660      	mov	r0, ip
 801f0e6:	9f06      	ldr	r7, [sp, #24]
 801f0e8:	f000 f81e 	bl	801f128 <BuildCommandHeader>
 801f0ec:	6028      	str	r0, [r5, #0]
 801f0ee:	b198      	cbz	r0, 801f118 <BuildAndSubmitCommandWordByte+0x48>
 801f0f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f0f2:	4a0c      	ldr	r2, [pc, #48]	; (801f124 <BuildAndSubmitCommandWordByte+0x54>)
 801f0f4:	6981      	ldr	r1, [r0, #24]
 801f0f6:	0a30      	lsrs	r0, r6, #8
 801f0f8:	734f      	strb	r7, [r1, #13]
 801f0fa:	72ce      	strb	r6, [r1, #11]
 801f0fc:	7308      	strb	r0, [r1, #12]
 801f0fe:	6828      	ldr	r0, [r5, #0]
 801f100:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f102:	4603      	mov	r3, r0
 801f104:	f000 fac8 	bl	801f698 <HCISendPacket>
 801f108:	2800      	cmp	r0, #0
 801f10a:	db01      	blt.n	801f110 <BuildAndSubmitCommandWordByte+0x40>
 801f10c:	2400      	movs	r4, #0
 801f10e:	e005      	b.n	801f11c <BuildAndSubmitCommandWordByte+0x4c>
 801f110:	6828      	ldr	r0, [r5, #0]
 801f112:	f7fa fa47 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f116:	e001      	b.n	801f11c <BuildAndSubmitCommandWordByte+0x4c>
 801f118:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f11c:	4620      	mov	r0, r4
 801f11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f122:	0000      	.short	0x0000
 801f124:	0802010d 	.word	0x0802010d

Disassembly of section i.BuildCommandHeader:

0801f128 <BuildCommandHeader>:
 801f128:	b570      	push	{r4, r5, r6, lr}
 801f12a:	4614      	mov	r4, r2
 801f12c:	460d      	mov	r5, r1
 801f12e:	f7f9 fc05 	bl	801893c <AcquireBluetoothStackInformation>
 801f132:	2800      	cmp	r0, #0
 801f134:	d00a      	beq.n	801f14c <BuildCommandHeader+0x24>
 801f136:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801f138:	b149      	cbz	r1, 801f14e <BuildCommandHeader+0x26>
 801f13a:	698b      	ldr	r3, [r1, #24]
 801f13c:	2101      	movs	r1, #1
 801f13e:	7019      	strb	r1, [r3, #0]
 801f140:	605c      	str	r4, [r3, #4]
 801f142:	0a29      	lsrs	r1, r5, #8
 801f144:	721d      	strb	r5, [r3, #8]
 801f146:	7259      	strb	r1, [r3, #9]
 801f148:	1ee4      	subs	r4, r4, #3
 801f14a:	729c      	strb	r4, [r3, #10]
 801f14c:	bd70      	pop	{r4, r5, r6, pc}
 801f14e:	f7fa fa29 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f152:	2000      	movs	r0, #0
 801f154:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BuildEventBD_ADDRDWord:

0801f156 <BuildEventBD_ADDRDWord>:
 801f156:	b570      	push	{r4, r5, r6, lr}
 801f158:	0014      	movs	r4, r2
 801f15a:	460d      	mov	r5, r1
 801f15c:	d001      	beq.n	801f162 <BuildEventBD_ADDRDWord+0xc>
 801f15e:	210c      	movs	r1, #12
 801f160:	e000      	b.n	801f164 <BuildEventBD_ADDRDWord+0xe>
 801f162:	2108      	movs	r1, #8
 801f164:	f000 f889 	bl	801f27a <BuildEventHeader>
 801f168:	2800      	cmp	r0, #0
 801f16a:	d00d      	beq.n	801f188 <BuildEventBD_ADDRDWord+0x32>
 801f16c:	6841      	ldr	r1, [r0, #4]
 801f16e:	682a      	ldr	r2, [r5, #0]
 801f170:	2c00      	cmp	r4, #0
 801f172:	600a      	str	r2, [r1, #0]
 801f174:	88aa      	ldrh	r2, [r5, #4]
 801f176:	808a      	strh	r2, [r1, #4]
 801f178:	d006      	beq.n	801f188 <BuildEventBD_ADDRDWord+0x32>
 801f17a:	7821      	ldrb	r1, [r4, #0]
 801f17c:	f8d4 2001 	ldr.w	r2, [r4, #1]
 801f180:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 801f184:	6842      	ldr	r2, [r0, #4]
 801f186:	6091      	str	r1, [r2, #8]
 801f188:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BuildEventBD_ADDRVariableData:

0801f18a <BuildEventBD_ADDRVariableData>:
 801f18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f18e:	460f      	mov	r7, r1
 801f190:	461e      	mov	r6, r3
 801f192:	4615      	mov	r5, r2
 801f194:	1d91      	adds	r1, r2, #6
 801f196:	f000 f870 	bl	801f27a <BuildEventHeader>
 801f19a:	0004      	movs	r4, r0
 801f19c:	d00d      	beq.n	801f1ba <BuildEventBD_ADDRVariableData+0x30>
 801f19e:	6860      	ldr	r0, [r4, #4]
 801f1a0:	6839      	ldr	r1, [r7, #0]
 801f1a2:	6001      	str	r1, [r0, #0]
 801f1a4:	88b9      	ldrh	r1, [r7, #4]
 801f1a6:	8081      	strh	r1, [r0, #4]
 801f1a8:	b13d      	cbz	r5, 801f1ba <BuildEventBD_ADDRVariableData+0x30>
 801f1aa:	2d01      	cmp	r5, #1
 801f1ac:	d008      	beq.n	801f1c0 <BuildEventBD_ADDRVariableData+0x36>
 801f1ae:	6860      	ldr	r0, [r4, #4]
 801f1b0:	462a      	mov	r2, r5
 801f1b2:	4631      	mov	r1, r6
 801f1b4:	1d80      	adds	r0, r0, #6
 801f1b6:	f7f4 f97e 	bl	80134b6 <BTPS_MemCopy>
 801f1ba:	4620      	mov	r0, r4
 801f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1c0:	6861      	ldr	r1, [r4, #4]
 801f1c2:	7830      	ldrb	r0, [r6, #0]
 801f1c4:	7188      	strb	r0, [r1, #6]
 801f1c6:	e7f8      	b.n	801f1ba <BuildEventBD_ADDRVariableData+0x30>

Disassembly of section i.BuildEventByte:

0801f1c8 <BuildEventByte>:
 801f1c8:	b510      	push	{r4, lr}
 801f1ca:	460c      	mov	r4, r1
 801f1cc:	2101      	movs	r1, #1
 801f1ce:	f000 f854 	bl	801f27a <BuildEventHeader>
 801f1d2:	2800      	cmp	r0, #0
 801f1d4:	d001      	beq.n	801f1da <BuildEventByte+0x12>
 801f1d6:	6841      	ldr	r1, [r0, #4]
 801f1d8:	700c      	strb	r4, [r1, #0]
 801f1da:	bd10      	pop	{r4, pc}

Disassembly of section i.BuildEventByteBD_ADDRByte:

0801f1dc <BuildEventByteBD_ADDRByte>:
 801f1dc:	b570      	push	{r4, r5, r6, lr}
 801f1de:	001c      	movs	r4, r3
 801f1e0:	4615      	mov	r5, r2
 801f1e2:	460e      	mov	r6, r1
 801f1e4:	d001      	beq.n	801f1ea <BuildEventByteBD_ADDRByte+0xe>
 801f1e6:	2108      	movs	r1, #8
 801f1e8:	e000      	b.n	801f1ec <BuildEventByteBD_ADDRByte+0x10>
 801f1ea:	2107      	movs	r1, #7
 801f1ec:	f000 f845 	bl	801f27a <BuildEventHeader>
 801f1f0:	2800      	cmp	r0, #0
 801f1f2:	d00c      	beq.n	801f20e <BuildEventByteBD_ADDRByte+0x32>
 801f1f4:	6841      	ldr	r1, [r0, #4]
 801f1f6:	2c00      	cmp	r4, #0
 801f1f8:	700e      	strb	r6, [r1, #0]
 801f1fa:	6841      	ldr	r1, [r0, #4]
 801f1fc:	682a      	ldr	r2, [r5, #0]
 801f1fe:	f841 2f01 	str.w	r2, [r1, #1]!
 801f202:	88aa      	ldrh	r2, [r5, #4]
 801f204:	808a      	strh	r2, [r1, #4]
 801f206:	d002      	beq.n	801f20e <BuildEventByteBD_ADDRByte+0x32>
 801f208:	6842      	ldr	r2, [r0, #4]
 801f20a:	7821      	ldrb	r1, [r4, #0]
 801f20c:	71d1      	strb	r1, [r2, #7]
 801f20e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BuildEventByteWordByte:

0801f210 <BuildEventByteWordByte>:
 801f210:	b570      	push	{r4, r5, r6, lr}
 801f212:	001c      	movs	r4, r3
 801f214:	4615      	mov	r5, r2
 801f216:	460e      	mov	r6, r1
 801f218:	d001      	beq.n	801f21e <BuildEventByteWordByte+0xe>
 801f21a:	2106      	movs	r1, #6
 801f21c:	e000      	b.n	801f220 <BuildEventByteWordByte+0x10>
 801f21e:	2104      	movs	r1, #4
 801f220:	f000 f82b 	bl	801f27a <BuildEventHeader>
 801f224:	2800      	cmp	r0, #0
 801f226:	d009      	beq.n	801f23c <BuildEventByteWordByte+0x2c>
 801f228:	6841      	ldr	r1, [r0, #4]
 801f22a:	2c00      	cmp	r4, #0
 801f22c:	700e      	strb	r6, [r1, #0]
 801f22e:	6842      	ldr	r2, [r0, #4]
 801f230:	8829      	ldrh	r1, [r5, #0]
 801f232:	8051      	strh	r1, [r2, #2]
 801f234:	d002      	beq.n	801f23c <BuildEventByteWordByte+0x2c>
 801f236:	6842      	ldr	r2, [r0, #4]
 801f238:	7821      	ldrb	r1, [r4, #0]
 801f23a:	7111      	strb	r1, [r2, #4]
 801f23c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BuildEventByteWordWord:

0801f23e <BuildEventByteWordWord>:
 801f23e:	b570      	push	{r4, r5, r6, lr}
 801f240:	461d      	mov	r5, r3
 801f242:	4616      	mov	r6, r2
 801f244:	000c      	movs	r4, r1
 801f246:	d001      	beq.n	801f24c <BuildEventByteWordWord+0xe>
 801f248:	2106      	movs	r1, #6
 801f24a:	e000      	b.n	801f24e <BuildEventByteWordWord+0x10>
 801f24c:	2104      	movs	r1, #4
 801f24e:	f000 f814 	bl	801f27a <BuildEventHeader>
 801f252:	2800      	cmp	r0, #0
 801f254:	d009      	beq.n	801f26a <BuildEventByteWordWord+0x2c>
 801f256:	b14c      	cbz	r4, 801f26c <BuildEventByteWordWord+0x2e>
 801f258:	6842      	ldr	r2, [r0, #4]
 801f25a:	7821      	ldrb	r1, [r4, #0]
 801f25c:	7011      	strb	r1, [r2, #0]
 801f25e:	6842      	ldr	r2, [r0, #4]
 801f260:	8831      	ldrh	r1, [r6, #0]
 801f262:	8051      	strh	r1, [r2, #2]
 801f264:	6842      	ldr	r2, [r0, #4]
 801f266:	8829      	ldrh	r1, [r5, #0]
 801f268:	8091      	strh	r1, [r2, #4]
 801f26a:	bd70      	pop	{r4, r5, r6, pc}
 801f26c:	6842      	ldr	r2, [r0, #4]
 801f26e:	8831      	ldrh	r1, [r6, #0]
 801f270:	8011      	strh	r1, [r2, #0]
 801f272:	6842      	ldr	r2, [r0, #4]
 801f274:	8829      	ldrh	r1, [r5, #0]
 801f276:	8051      	strh	r1, [r2, #2]
 801f278:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BuildEventHeader:

0801f27a <BuildEventHeader>:
 801f27a:	b570      	push	{r4, r5, r6, lr}
 801f27c:	4605      	mov	r5, r0
 801f27e:	460c      	mov	r4, r1
 801f280:	f101 0008 	add.w	r0, r1, #8
 801f284:	f7f4 f89a 	bl	80133bc <BTPS_AllocateMemory>
 801f288:	2800      	cmp	r0, #0
 801f28a:	d004      	beq.n	801f296 <BuildEventHeader+0x1c>
 801f28c:	7005      	strb	r5, [r0, #0]
 801f28e:	8044      	strh	r4, [r0, #2]
 801f290:	f100 0108 	add.w	r1, r0, #8
 801f294:	6041      	str	r1, [r0, #4]
 801f296:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.BuildEventWord:

0801f298 <BuildEventWord>:
 801f298:	b510      	push	{r4, lr}
 801f29a:	460c      	mov	r4, r1
 801f29c:	2102      	movs	r1, #2
 801f29e:	f7ff ffec 	bl	801f27a <BuildEventHeader>
 801f2a2:	2800      	cmp	r0, #0
 801f2a4:	d002      	beq.n	801f2ac <BuildEventWord+0x14>
 801f2a6:	6842      	ldr	r2, [r0, #4]
 801f2a8:	8821      	ldrh	r1, [r4, #0]
 801f2aa:	8011      	strh	r1, [r2, #0]
 801f2ac:	bd10      	pop	{r4, pc}

Disassembly of section i.CreditDataPacket:

0801f2ae <CreditDataPacket>:
 801f2ae:	b508      	push	{r3, lr}
 801f2b0:	2300      	movs	r3, #0
 801f2b2:	f8ad 1000 	strh.w	r1, [sp]
 801f2b6:	2101      	movs	r1, #1
 801f2b8:	f8ad 1002 	strh.w	r1, [sp, #2]
 801f2bc:	466a      	mov	r2, sp
 801f2be:	f000 ffbd 	bl	802023c <_HCI_Host_Number_Of_Completed_Packets>
 801f2c2:	bd08      	pop	{r3, pc}

Disassembly of section i.DetermineLEControllerSupport:

0801f2c4 <DetermineLEControllerSupport>:
 801f2c4:	b51c      	push	{r2, r3, r4, lr}
 801f2c6:	4669      	mov	r1, sp
 801f2c8:	f001 fbfd 	bl	8020ac6 <_HCI_Read_Local_Supported_Features>
 801f2cc:	b110      	cbz	r0, 801f2d4 <DetermineLEControllerSupport+0x10>
 801f2ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f2d2:	bd1c      	pop	{r2, r3, r4, pc}
 801f2d4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801f2d8:	0641      	lsls	r1, r0, #25
 801f2da:	d506      	bpl.n	801f2ea <DetermineLEControllerSupport+0x26>
 801f2dc:	0680      	lsls	r0, r0, #26
 801f2de:	d502      	bpl.n	801f2e6 <DetermineLEControllerSupport+0x22>
 801f2e0:	f06f 0001 	mvn.w	r0, #1
 801f2e4:	bd1c      	pop	{r2, r3, r4, pc}
 801f2e6:	2001      	movs	r0, #1
 801f2e8:	bd1c      	pop	{r2, r3, r4, pc}
 801f2ea:	2000      	movs	r0, #0
 801f2ec:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.HCICallbackThread:

0801f2f0 <HCICallbackThread>:
 801f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f4:	b089      	sub	sp, #36	; 0x24
 801f2f6:	0004      	movs	r4, r0
 801f2f8:	d07e      	beq.n	801f3f8 <HCICallbackThread+0x108>
 801f2fa:	6860      	ldr	r0, [r4, #4]
 801f2fc:	2800      	cmp	r0, #0
 801f2fe:	d0fb      	beq.n	801f2f8 <HCICallbackThread+0x8>
 801f300:	68e0      	ldr	r0, [r4, #12]
 801f302:	9004      	str	r0, [sp, #16]
 801f304:	2108      	movs	r1, #8
 801f306:	2030      	movs	r0, #48	; 0x30
 801f308:	f7f4 f99c 	bl	8013644 <BTPS_CreateMailbox>
 801f30c:	9007      	str	r0, [sp, #28]
 801f30e:	2800      	cmp	r0, #0
 801f310:	d0f2      	beq.n	801f2f8 <HCICallbackThread+0x8>
 801f312:	6020      	str	r0, [r4, #0]
 801f314:	2001      	movs	r0, #1
 801f316:	7220      	strb	r0, [r4, #8]
 801f318:	6860      	ldr	r0, [r4, #4]
 801f31a:	f7f4 f836 	bl	801338a <BTPS_SetEvent>
 801f31e:	9804      	ldr	r0, [sp, #16]
 801f320:	f7fa f8f6 	bl	8019510 <IncreaseBluetoothStackThreadCount>
 801f324:	2401      	movs	r4, #1
 801f326:	f04f 0b00 	mov.w	fp, #0
 801f32a:	e103      	b.n	801f534 <HCICallbackThread+0x244>
 801f32c:	a902      	add	r1, sp, #8
 801f32e:	9807      	ldr	r0, [sp, #28]
 801f330:	f7f4 f9be 	bl	80136b0 <BTPS_WaitMailbox>
 801f334:	2800      	cmp	r0, #0
 801f336:	d079      	beq.n	801f42c <HCICallbackThread+0x13c>
 801f338:	f89d 0008 	ldrb.w	r0, [sp, #8]
 801f33c:	2804      	cmp	r0, #4
 801f33e:	d0fa      	beq.n	801f336 <HCICallbackThread+0x46>
 801f340:	9804      	ldr	r0, [sp, #16]
 801f342:	f7f9 fafb 	bl	801893c <AcquireBluetoothStackInformation>
 801f346:	0006      	movs	r6, r0
 801f348:	d071      	beq.n	801f42e <HCICallbackThread+0x13e>
 801f34a:	6c30      	ldr	r0, [r6, #64]	; 0x40
 801f34c:	2800      	cmp	r0, #0
 801f34e:	d06f      	beq.n	801f430 <HCICallbackThread+0x140>
 801f350:	2101      	movs	r1, #1
 801f352:	7371      	strb	r1, [r6, #13]
 801f354:	f04f 0a00 	mov.w	sl, #0
 801f358:	f89d 1008 	ldrb.w	r1, [sp, #8]
 801f35c:	46d1      	mov	r9, sl
 801f35e:	4657      	mov	r7, sl
 801f360:	f024 0404 	bic.w	r4, r4, #4
 801f364:	2907      	cmp	r1, #7
 801f366:	d244      	bcs.n	801f3f2 <HCICallbackThread+0x102>
 801f368:	e8df f001 	tbb	[pc, r1]
 801f36c:	1b120c04 	.word	0x1b120c04
 801f370:	00312a43 	.word	0x00312a43
 801f374:	9903      	ldr	r1, [sp, #12]
 801f376:	b349      	cbz	r1, 801f3cc <HCICallbackThread+0xdc>
 801f378:	f100 0780 	add.w	r7, r0, #128	; 0x80
 801f37c:	f04f 0904 	mov.w	r9, #4
 801f380:	468a      	mov	sl, r1
 801f382:	e00b      	b.n	801f39c <HCICallbackThread+0xac>
 801f384:	9903      	ldr	r1, [sp, #12]
 801f386:	b309      	cbz	r1, 801f3cc <HCICallbackThread+0xdc>
 801f388:	f100 0784 	add.w	r7, r0, #132	; 0x84
 801f38c:	2008      	movs	r0, #8
 801f38e:	e004      	b.n	801f39a <HCICallbackThread+0xaa>
 801f390:	9903      	ldr	r1, [sp, #12]
 801f392:	b1d9      	cbz	r1, 801f3cc <HCICallbackThread+0xdc>
 801f394:	f100 0788 	add.w	r7, r0, #136	; 0x88
 801f398:	2010      	movs	r0, #16
 801f39a:	4681      	mov	r9, r0
 801f39c:	f044 0404 	orr.w	r4, r4, #4
 801f3a0:	e027      	b.n	801f3f2 <HCICallbackThread+0x102>
 801f3a2:	2020      	movs	r0, #32
 801f3a4:	f88d 0014 	strb.w	r0, [sp, #20]
 801f3a8:	f8ad b016 	strh.w	fp, [sp, #22]
 801f3ac:	f8cd b018 	str.w	fp, [sp, #24]
 801f3b0:	6c37      	ldr	r7, [r6, #64]	; 0x40
 801f3b2:	f04f 0904 	mov.w	r9, #4
 801f3b6:	f10d 0a14 	add.w	sl, sp, #20
 801f3ba:	f88d b008 	strb.w	fp, [sp, #8]
 801f3be:	e015      	b.n	801f3ec <HCICallbackThread+0xfc>
 801f3c0:	9803      	ldr	r0, [sp, #12]
 801f3c2:	6802      	ldr	r2, [r0, #0]
 801f3c4:	b112      	cbz	r2, 801f3cc <HCICallbackThread+0xdc>
 801f3c6:	6841      	ldr	r1, [r0, #4]
 801f3c8:	6830      	ldr	r0, [r6, #0]
 801f3ca:	4790      	blx	r2
 801f3cc:	e011      	b.n	801f3f2 <HCICallbackThread+0x102>
 801f3ce:	2043      	movs	r0, #67	; 0x43
 801f3d0:	f88d 0014 	strb.w	r0, [sp, #20]
 801f3d4:	2008      	movs	r0, #8
 801f3d6:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f3da:	9803      	ldr	r0, [sp, #12]
 801f3dc:	9006      	str	r0, [sp, #24]
 801f3de:	6c37      	ldr	r7, [r6, #64]	; 0x40
 801f3e0:	f04f 0904 	mov.w	r9, #4
 801f3e4:	f10d 0a14 	add.w	sl, sp, #20
 801f3e8:	f88d b008 	strb.w	fp, [sp, #8]
 801f3ec:	f044 0404 	orr.w	r4, r4, #4
 801f3f0:	3780      	adds	r7, #128	; 0x80
 801f3f2:	0760      	lsls	r0, r4, #29
 801f3f4:	d57b      	bpl.n	801f4ee <HCICallbackThread+0x1fe>
 801f3f6:	e000      	b.n	801f3fa <HCICallbackThread+0x10a>
 801f3f8:	e0b0      	b.n	801f55c <HCICallbackThread+0x26c>
 801f3fa:	b3e7      	cbz	r7, 801f476 <HCICallbackThread+0x186>
 801f3fc:	6838      	ldr	r0, [r7, #0]
 801f3fe:	b3d0      	cbz	r0, 801f476 <HCICallbackThread+0x186>
 801f400:	6c30      	ldr	r0, [r6, #64]	; 0x40
 801f402:	2500      	movs	r5, #0
 801f404:	6901      	ldr	r1, [r0, #16]
 801f406:	ea41 0109 	orr.w	r1, r1, r9
 801f40a:	6101      	str	r1, [r0, #16]
 801f40c:	f8d7 8000 	ldr.w	r8, [r7]
 801f410:	e030      	b.n	801f474 <HCICallbackThread+0x184>
 801f412:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801f416:	f1bc 0f00 	cmp.w	ip, #0
 801f41a:	d029      	beq.n	801f470 <HCICallbackThread+0x180>
 801f41c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 801f420:	b138      	cbz	r0, 801f432 <HCICallbackThread+0x142>
 801f422:	2801      	cmp	r0, #1
 801f424:	d00b      	beq.n	801f43e <HCICallbackThread+0x14e>
 801f426:	2802      	cmp	r0, #2
 801f428:	d122      	bne.n	801f470 <HCICallbackThread+0x180>
 801f42a:	e011      	b.n	801f450 <HCICallbackThread+0x160>
 801f42c:	e080      	b.n	801f530 <HCICallbackThread+0x240>
 801f42e:	e06c      	b.n	801f50a <HCICallbackThread+0x21a>
 801f430:	e068      	b.n	801f504 <HCICallbackThread+0x214>
 801f432:	4651      	mov	r1, sl
 801f434:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801f438:	9804      	ldr	r0, [sp, #16]
 801f43a:	47e0      	blx	ip
 801f43c:	e018      	b.n	801f470 <HCICallbackThread+0x180>
 801f43e:	9d03      	ldr	r5, [sp, #12]
 801f440:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801f444:	f105 000c 	add.w	r0, r5, #12
 801f448:	e9cd 0100 	strd	r0, r1, [sp]
 801f44c:	896b      	ldrh	r3, [r5, #10]
 801f44e:	e007      	b.n	801f460 <HCICallbackThread+0x170>
 801f450:	9d03      	ldr	r5, [sp, #12]
 801f452:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801f456:	f105 000b 	add.w	r0, r5, #11
 801f45a:	e9cd 0100 	strd	r0, r1, [sp]
 801f45e:	7aab      	ldrb	r3, [r5, #10]
 801f460:	f835 0f08 	ldrh.w	r0, [r5, #8]!
 801f464:	0b02      	lsrs	r2, r0, #12
 801f466:	f3c0 010b 	ubfx	r1, r0, #0, #12
 801f46a:	0312      	lsls	r2, r2, #12
 801f46c:	9804      	ldr	r0, [sp, #16]
 801f46e:	47e0      	blx	ip
 801f470:	f8d8 800c 	ldr.w	r8, [r8, #12]
 801f474:	e000      	b.n	801f478 <HCICallbackThread+0x188>
 801f476:	e036      	b.n	801f4e6 <HCICallbackThread+0x1f6>
 801f478:	f1b8 0f00 	cmp.w	r8, #0
 801f47c:	d1c9      	bne.n	801f412 <HCICallbackThread+0x122>
 801f47e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 801f482:	2801      	cmp	r0, #1
 801f484:	d002      	beq.n	801f48c <HCICallbackThread+0x19c>
 801f486:	2802      	cmp	r0, #2
 801f488:	d005      	beq.n	801f496 <HCICallbackThread+0x1a6>
 801f48a:	e00f      	b.n	801f4ac <HCICallbackThread+0x1bc>
 801f48c:	b175      	cbz	r5, 801f4ac <HCICallbackThread+0x1bc>
 801f48e:	6c30      	ldr	r0, [r6, #64]	; 0x40
 801f490:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 801f494:	e003      	b.n	801f49e <HCICallbackThread+0x1ae>
 801f496:	b14d      	cbz	r5, 801f4ac <HCICallbackThread+0x1bc>
 801f498:	6c30      	ldr	r0, [r6, #64]	; 0x40
 801f49a:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
 801f49e:	b128      	cbz	r0, 801f4ac <HCICallbackThread+0x1bc>
 801f4a0:	8828      	ldrh	r0, [r5, #0]
 801f4a2:	f3c0 010b 	ubfx	r1, r0, #0, #12
 801f4a6:	9804      	ldr	r0, [sp, #16]
 801f4a8:	f7ff ff01 	bl	801f2ae <CreditDataPacket>
 801f4ac:	6c30      	ldr	r0, [r6, #64]	; 0x40
 801f4ae:	f044 0408 	orr.w	r4, r4, #8
 801f4b2:	6901      	ldr	r1, [r0, #16]
 801f4b4:	ea21 0109 	bic.w	r1, r1, r9
 801f4b8:	6101      	str	r1, [r0, #16]
 801f4ba:	683d      	ldr	r5, [r7, #0]
 801f4bc:	e011      	b.n	801f4e2 <HCICallbackThread+0x1f2>
 801f4be:	6868      	ldr	r0, [r5, #4]
 801f4c0:	b110      	cbz	r0, 801f4c8 <HCICallbackThread+0x1d8>
 801f4c2:	68ed      	ldr	r5, [r5, #12]
 801f4c4:	b96d      	cbnz	r5, 801f4e2 <HCICallbackThread+0x1f2>
 801f4c6:	e00a      	b.n	801f4de <HCICallbackThread+0x1ee>
 801f4c8:	4638      	mov	r0, r7
 801f4ca:	6829      	ldr	r1, [r5, #0]
 801f4cc:	f7fa fb4c 	bl	8019b68 <DeleteCallbackEntry>
 801f4d0:	b110      	cbz	r0, 801f4d8 <HCICallbackThread+0x1e8>
 801f4d2:	4628      	mov	r0, r5
 801f4d4:	f7f9 fbff 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801f4d8:	683d      	ldr	r5, [r7, #0]
 801f4da:	e7f3      	b.n	801f4c4 <HCICallbackThread+0x1d4>
 801f4dc:	e007      	b.n	801f4ee <HCICallbackThread+0x1fe>
 801f4de:	f024 0408 	bic.w	r4, r4, #8
 801f4e2:	0720      	lsls	r0, r4, #28
 801f4e4:	d4eb      	bmi.n	801f4be <HCICallbackThread+0x1ce>
 801f4e6:	7b30      	ldrb	r0, [r6, #12]
 801f4e8:	b108      	cbz	r0, 801f4ee <HCICallbackThread+0x1fe>
 801f4ea:	f044 0402 	orr.w	r4, r4, #2
 801f4ee:	f886 b00d 	strb.w	fp, [r6, #13]
 801f4f2:	4630      	mov	r0, r6
 801f4f4:	f7fa f856 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f4f8:	07a0      	lsls	r0, r4, #30
 801f4fa:	d508      	bpl.n	801f50e <HCICallbackThread+0x21e>
 801f4fc:	9804      	ldr	r0, [sp, #16]
 801f4fe:	f7f9 fe37 	bl	8019170 <BSC_Shutdown>
 801f502:	e002      	b.n	801f50a <HCICallbackThread+0x21a>
 801f504:	4630      	mov	r0, r6
 801f506:	f7fa f84d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f50a:	f024 0401 	bic.w	r4, r4, #1
 801f50e:	9803      	ldr	r0, [sp, #12]
 801f510:	b180      	cbz	r0, 801f534 <HCICallbackThread+0x244>
 801f512:	f89d 0008 	ldrb.w	r0, [sp, #8]
 801f516:	b138      	cbz	r0, 801f528 <HCICallbackThread+0x238>
 801f518:	2801      	cmp	r0, #1
 801f51a:	d005      	beq.n	801f528 <HCICallbackThread+0x238>
 801f51c:	2802      	cmp	r0, #2
 801f51e:	d003      	beq.n	801f528 <HCICallbackThread+0x238>
 801f520:	2805      	cmp	r0, #5
 801f522:	d001      	beq.n	801f528 <HCICallbackThread+0x238>
 801f524:	2806      	cmp	r0, #6
 801f526:	d105      	bne.n	801f534 <HCICallbackThread+0x244>
 801f528:	9803      	ldr	r0, [sp, #12]
 801f52a:	f7f3 ff61 	bl	80133f0 <BTPS_FreeMemory>
 801f52e:	e001      	b.n	801f534 <HCICallbackThread+0x244>
 801f530:	f024 0401 	bic.w	r4, r4, #1
 801f534:	07e0      	lsls	r0, r4, #31
 801f536:	f47f aef9 	bne.w	801f32c <HCICallbackThread+0x3c>
 801f53a:	490a      	ldr	r1, [pc, #40]	; (801f564 <HCICallbackThread+0x274>)
 801f53c:	9807      	ldr	r0, [sp, #28]
 801f53e:	f7f4 f8ce 	bl	80136de <BTPS_DeleteMailbox>
 801f542:	9804      	ldr	r0, [sp, #16]
 801f544:	f7f9 f9fa 	bl	801893c <AcquireBluetoothStackInformation>
 801f548:	b128      	cbz	r0, 801f556 <HCICallbackThread+0x266>
 801f54a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801f54c:	b109      	cbz	r1, 801f552 <HCICallbackThread+0x262>
 801f54e:	f8c1 b028 	str.w	fp, [r1, #40]	; 0x28
 801f552:	f7fa f827 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f556:	9804      	ldr	r0, [sp, #16]
 801f558:	f7f9 ff82 	bl	8019460 <DecreaseBluetoothStackThreadCount>
 801f55c:	b009      	add	sp, #36	; 0x24
 801f55e:	2000      	movs	r0, #0
 801f560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f564:	0801fe71 	.word	0x0801fe71

Disassembly of section i.HCILEAdvertisingEventHandler:

0801f568 <HCILEAdvertisingEventHandler>:
 801f568:	b510      	push	{r4, lr}
 801f56a:	0004      	movs	r4, r0
 801f56c:	f04f 0000 	mov.w	r0, #0
 801f570:	d018      	beq.n	801f5a4 <HCILEAdvertisingEventHandler+0x3c>
 801f572:	6861      	ldr	r1, [r4, #4]
 801f574:	290f      	cmp	r1, #15
 801f576:	d315      	bcc.n	801f5a4 <HCILEAdvertisingEventHandler+0x3c>
 801f578:	212c      	movs	r1, #44	; 0x2c
 801f57a:	2042      	movs	r0, #66	; 0x42
 801f57c:	f7ff fe7d 	bl	801f27a <BuildEventHeader>
 801f580:	2800      	cmp	r0, #0
 801f582:	d00f      	beq.n	801f5a4 <HCILEAdvertisingEventHandler+0x3c>
 801f584:	6842      	ldr	r2, [r0, #4]
 801f586:	2104      	movs	r1, #4
 801f588:	7011      	strb	r1, [r2, #0]
 801f58a:	6842      	ldr	r2, [r0, #4]
 801f58c:	f8b4 100b 	ldrh.w	r1, [r4, #11]
 801f590:	8051      	strh	r1, [r2, #2]
 801f592:	6841      	ldr	r1, [r0, #4]
 801f594:	f854 2f0d 	ldr.w	r2, [r4, #13]!
 801f598:	604a      	str	r2, [r1, #4]
 801f59a:	6862      	ldr	r2, [r4, #4]
 801f59c:	608a      	str	r2, [r1, #8]
 801f59e:	6842      	ldr	r2, [r0, #4]
 801f5a0:	8921      	ldrh	r1, [r4, #8]
 801f5a2:	8191      	strh	r1, [r2, #12]
 801f5a4:	bd10      	pop	{r4, pc}

Disassembly of section i.HCILEScanningEventHandler:

0801f5a6 <HCILEScanningEventHandler>:
 801f5a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5aa:	ea5f 0800 	movs.w	r8, r0
 801f5ae:	f04f 0400 	mov.w	r4, #0
 801f5b2:	d06e      	beq.n	801f692 <HCILEScanningEventHandler+0xec>
 801f5b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f5b8:	2804      	cmp	r0, #4
 801f5ba:	d36a      	bcc.n	801f692 <HCILEScanningEventHandler+0xec>
 801f5bc:	f898 000b 	ldrb.w	r0, [r8, #11]
 801f5c0:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801f5c4:	eb01 1540 	add.w	r5, r1, r0, lsl #5
 801f5c8:	3535      	adds	r5, #53	; 0x35
 801f5ca:	4628      	mov	r0, r5
 801f5cc:	f7f3 fef6 	bl	80133bc <BTPS_AllocateMemory>
 801f5d0:	0004      	movs	r4, r0
 801f5d2:	d05e      	beq.n	801f692 <HCILEScanningEventHandler+0xec>
 801f5d4:	462a      	mov	r2, r5
 801f5d6:	2100      	movs	r1, #0
 801f5d8:	f7f3 ff71 	bl	80134be <BTPS_MemInitialize>
 801f5dc:	2042      	movs	r0, #66	; 0x42
 801f5de:	7020      	strb	r0, [r4, #0]
 801f5e0:	f898 000b 	ldrb.w	r0, [r8, #11]
 801f5e4:	2700      	movs	r7, #0
 801f5e6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 801f5ea:	eb01 1040 	add.w	r0, r1, r0, lsl #5
 801f5ee:	1c40      	adds	r0, r0, #1
 801f5f0:	8060      	strh	r0, [r4, #2]
 801f5f2:	f104 0008 	add.w	r0, r4, #8
 801f5f6:	2101      	movs	r1, #1
 801f5f8:	6060      	str	r0, [r4, #4]
 801f5fa:	7221      	strb	r1, [r4, #8]
 801f5fc:	6861      	ldr	r1, [r4, #4]
 801f5fe:	f898 000b 	ldrb.w	r0, [r8, #11]
 801f602:	7088      	strb	r0, [r1, #2]
 801f604:	2004      	movs	r0, #4
 801f606:	e038      	b.n	801f67a <HCILEScanningEventHandler+0xd4>
 801f608:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f60c:	f100 030a 	add.w	r3, r0, #10
 801f610:	4299      	cmp	r1, r3
 801f612:	d336      	bcc.n	801f682 <HCILEScanningEventHandler+0xdc>
 801f614:	eb08 0500 	add.w	r5, r8, r0
 801f618:	7c2e      	ldrb	r6, [r5, #16]
 801f61a:	4430      	add	r0, r6
 801f61c:	f100 0a0a 	add.w	sl, r0, #10
 801f620:	458a      	cmp	sl, r1
 801f622:	d82e      	bhi.n	801f682 <HCILEScanningEventHandler+0xdc>
 801f624:	2e1f      	cmp	r6, #31
 801f626:	d82c      	bhi.n	801f682 <HCILEScanningEventHandler+0xdc>
 801f628:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
 801f62c:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 801f630:	1cc3      	adds	r3, r0, #3
 801f632:	7a29      	ldrb	r1, [r5, #8]
 801f634:	54d1      	strb	r1, [r2, r3]
 801f636:	6863      	ldr	r3, [r4, #4]
 801f638:	1d01      	adds	r1, r0, #4
 801f63a:	7a6a      	ldrb	r2, [r5, #9]
 801f63c:	545a      	strb	r2, [r3, r1]
 801f63e:	6862      	ldr	r2, [r4, #4]
 801f640:	1d41      	adds	r1, r0, #5
 801f642:	4411      	add	r1, r2
 801f644:	f8d5 200a 	ldr.w	r2, [r5, #10]
 801f648:	600a      	str	r2, [r1, #0]
 801f64a:	89ea      	ldrh	r2, [r5, #14]
 801f64c:	808a      	strh	r2, [r1, #4]
 801f64e:	4681      	mov	r9, r0
 801f650:	6861      	ldr	r1, [r4, #4]
 801f652:	300b      	adds	r0, #11
 801f654:	540e      	strb	r6, [r1, r0]
 801f656:	b146      	cbz	r6, 801f66a <HCILEScanningEventHandler+0xc4>
 801f658:	6861      	ldr	r1, [r4, #4]
 801f65a:	f109 000c 	add.w	r0, r9, #12
 801f65e:	4408      	add	r0, r1
 801f660:	f105 0111 	add.w	r1, r5, #17
 801f664:	4632      	mov	r2, r6
 801f666:	f7f3 ff26 	bl	80134b6 <BTPS_MemCopy>
 801f66a:	19a8      	adds	r0, r5, r6
 801f66c:	6862      	ldr	r2, [r4, #4]
 801f66e:	7c41      	ldrb	r1, [r0, #17]
 801f670:	f109 002b 	add.w	r0, r9, #43	; 0x2b
 801f674:	1c7f      	adds	r7, r7, #1
 801f676:	5411      	strb	r1, [r2, r0]
 801f678:	4650      	mov	r0, sl
 801f67a:	6862      	ldr	r2, [r4, #4]
 801f67c:	7891      	ldrb	r1, [r2, #2]
 801f67e:	42b9      	cmp	r1, r7
 801f680:	d8c2      	bhi.n	801f608 <HCILEScanningEventHandler+0x62>
 801f682:	7891      	ldrb	r1, [r2, #2]
 801f684:	b2f8      	uxtb	r0, r7
 801f686:	4288      	cmp	r0, r1
 801f688:	d003      	beq.n	801f692 <HCILEScanningEventHandler+0xec>
 801f68a:	4620      	mov	r0, r4
 801f68c:	f7f3 feb0 	bl	80133f0 <BTPS_FreeMemory>
 801f690:	2400      	movs	r4, #0
 801f692:	4620      	mov	r0, r4
 801f694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.HCISendPacket:

0801f698 <HCISendPacket>:
 801f698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f69c:	461f      	mov	r7, r3
 801f69e:	4615      	mov	r5, r2
 801f6a0:	460e      	mov	r6, r1
 801f6a2:	0004      	movs	r4, r0
 801f6a4:	d030      	beq.n	801f708 <HCISendPacket+0x70>
 801f6a6:	6820      	ldr	r0, [r4, #0]
 801f6a8:	b370      	cbz	r0, 801f708 <HCISendPacket+0x70>
 801f6aa:	69e0      	ldr	r0, [r4, #28]
 801f6ac:	b360      	cbz	r0, 801f708 <HCISendPacket+0x70>
 801f6ae:	b35e      	cbz	r6, 801f708 <HCISendPacket+0x70>
 801f6b0:	b12d      	cbz	r5, 801f6be <HCISendPacket+0x26>
 801f6b2:	f7f3 fe53 	bl	801335c <BTPS_ResetEvent>
 801f6b6:	6920      	ldr	r0, [r4, #16]
 801f6b8:	f020 0020 	bic.w	r0, r0, #32
 801f6bc:	6120      	str	r0, [r4, #16]
 801f6be:	463b      	mov	r3, r7
 801f6c0:	462a      	mov	r2, r5
 801f6c2:	4631      	mov	r1, r6
 801f6c4:	6820      	ldr	r0, [r4, #0]
 801f6c6:	f006 fb11 	bl	8025cec <HCI_SendPacket>
 801f6ca:	1e06      	subs	r6, r0, #0
 801f6cc:	dd19      	ble.n	801f702 <HCISendPacket+0x6a>
 801f6ce:	b1b5      	cbz	r5, 801f6fe <HCISendPacket+0x66>
 801f6d0:	f241 3188 	movw	r1, #5000	; 0x1388
 801f6d4:	69e0      	ldr	r0, [r4, #28]
 801f6d6:	f7f3 fe10 	bl	80132fa <BTPS_WaitEvent>
 801f6da:	b148      	cbz	r0, 801f6f0 <HCISendPacket+0x58>
 801f6dc:	6920      	ldr	r0, [r4, #16]
 801f6de:	0681      	lsls	r1, r0, #26
 801f6e0:	d50d      	bpl.n	801f6fe <HCISendPacket+0x66>
 801f6e2:	f020 0020 	bic.w	r0, r0, #32
 801f6e6:	6120      	str	r0, [r4, #16]
 801f6e8:	f06f 0041 	mvn.w	r0, #65	; 0x41
 801f6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6f0:	4631      	mov	r1, r6
 801f6f2:	6820      	ldr	r0, [r4, #0]
 801f6f4:	f006 f854 	bl	80257a0 <HCI_CancelPacket>
 801f6f8:	f06f 0010 	mvn.w	r0, #16
 801f6fc:	e7f6      	b.n	801f6ec <HCISendPacket+0x54>
 801f6fe:	2000      	movs	r0, #0
 801f700:	e7f4      	b.n	801f6ec <HCISendPacket+0x54>
 801f702:	f06f 000d 	mvn.w	r0, #13
 801f706:	e7f1      	b.n	801f6ec <HCISendPacket+0x54>
 801f708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f70c:	e7ee      	b.n	801f6ec <HCISendPacket+0x54>

Disassembly of section i.HCI_Build_ACL_Packet_Type_Mask:

0801f70e <HCI_Build_ACL_Packet_Type_Mask>:
 801f70e:	b51c      	push	{r2, r3, r4, lr}
 801f710:	4669      	mov	r1, sp
 801f712:	f001 f9d8 	bl	8020ac6 <_HCI_Read_Local_Supported_Features>
 801f716:	b108      	cbz	r0, 801f71c <HCI_Build_ACL_Packet_Type_Mask+0xe>
 801f718:	2000      	movs	r0, #0
 801f71a:	bd1c      	pop	{r2, r3, r4, pc}
 801f71c:	f89d 1000 	ldrb.w	r1, [sp]
 801f720:	2018      	movs	r0, #24
 801f722:	07ca      	lsls	r2, r1, #31
 801f724:	d001      	beq.n	801f72a <HCI_Build_ACL_Packet_Type_Mask+0x1c>
 801f726:	f640 4018 	movw	r0, #3096	; 0xc18
 801f72a:	0789      	lsls	r1, r1, #30
 801f72c:	d5f5      	bpl.n	801f71a <HCI_Build_ACL_Packet_Type_Mask+0xc>
 801f72e:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 801f732:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.HCI_Change_SCO_Configuration:

0801f734 <HCI_Change_SCO_Configuration>:
 801f734:	b570      	push	{r4, r5, r6, lr}
 801f736:	460d      	mov	r5, r1
 801f738:	f06f 0601 	mvn.w	r6, #1
 801f73c:	b160      	cbz	r0, 801f758 <HCI_Change_SCO_Configuration+0x24>
 801f73e:	f7f9 f8fd 	bl	801893c <AcquireBluetoothStackInformation>
 801f742:	0004      	movs	r4, r0
 801f744:	d008      	beq.n	801f758 <HCI_Change_SCO_Configuration+0x24>
 801f746:	4629      	mov	r1, r5
 801f748:	6860      	ldr	r0, [r4, #4]
 801f74a:	f006 f863 	bl	8025814 <HCI_ChangeSCOConfiguration>
 801f74e:	4605      	mov	r5, r0
 801f750:	4620      	mov	r0, r4
 801f752:	f7f9 ff27 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f756:	e000      	b.n	801f75a <HCI_Change_SCO_Configuration+0x26>
 801f758:	4635      	mov	r5, r6
 801f75a:	4628      	mov	r0, r5
 801f75c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCI_Change_SCO_Configuration_Handles:

0801f75e <HCI_Change_SCO_Configuration_Handles>:
 801f75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f762:	4616      	mov	r6, r2
 801f764:	460f      	mov	r7, r1
 801f766:	f06f 0501 	mvn.w	r5, #1
 801f76a:	b160      	cbz	r0, 801f786 <HCI_Change_SCO_Configuration_Handles+0x28>
 801f76c:	f7f9 f8e6 	bl	801893c <AcquireBluetoothStackInformation>
 801f770:	0004      	movs	r4, r0
 801f772:	d008      	beq.n	801f786 <HCI_Change_SCO_Configuration_Handles+0x28>
 801f774:	4632      	mov	r2, r6
 801f776:	4639      	mov	r1, r7
 801f778:	6860      	ldr	r0, [r4, #4]
 801f77a:	f006 f87b 	bl	8025874 <HCI_ChangeSCOConfigurationHandles>
 801f77e:	4605      	mov	r5, r0
 801f780:	4620      	mov	r0, r4
 801f782:	f7f9 ff0f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f786:	4628      	mov	r0, r5
 801f788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.HCI_Cleanup:

0801f78c <HCI_Cleanup>:
 801f78c:	b570      	push	{r4, r5, r6, lr}
 801f78e:	f7f9 f8d5 	bl	801893c <AcquireBluetoothStackInformation>
 801f792:	0004      	movs	r4, r0
 801f794:	d03e      	beq.n	801f814 <HCI_Cleanup+0x88>
 801f796:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f798:	b3b8      	cbz	r0, 801f80a <HCI_Cleanup+0x7e>
 801f79a:	6841      	ldr	r1, [r0, #4]
 801f79c:	b111      	cbz	r1, 801f7a4 <HCI_Cleanup+0x18>
 801f79e:	6800      	ldr	r0, [r0, #0]
 801f7a0:	f006 fafe 	bl	8025da0 <HCI_UnRegisterCallback>
 801f7a4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7a6:	2500      	movs	r5, #0
 801f7a8:	6045      	str	r5, [r0, #4]
 801f7aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7ac:	3080      	adds	r0, #128	; 0x80
 801f7ae:	f7fa fa76 	bl	8019c9e <FreeCallbackList>
 801f7b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7b4:	6881      	ldr	r1, [r0, #8]
 801f7b6:	b111      	cbz	r1, 801f7be <HCI_Cleanup+0x32>
 801f7b8:	6800      	ldr	r0, [r0, #0]
 801f7ba:	f006 faf1 	bl	8025da0 <HCI_UnRegisterCallback>
 801f7be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7c0:	6085      	str	r5, [r0, #8]
 801f7c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7c4:	3084      	adds	r0, #132	; 0x84
 801f7c6:	f7fa fa6a 	bl	8019c9e <FreeCallbackList>
 801f7ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7cc:	68c1      	ldr	r1, [r0, #12]
 801f7ce:	b111      	cbz	r1, 801f7d6 <HCI_Cleanup+0x4a>
 801f7d0:	6800      	ldr	r0, [r0, #0]
 801f7d2:	f006 fae5 	bl	8025da0 <HCI_UnRegisterCallback>
 801f7d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7d8:	60c5      	str	r5, [r0, #12]
 801f7da:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7dc:	3088      	adds	r0, #136	; 0x88
 801f7de:	f7fa fa5e 	bl	8019c9e <FreeCallbackList>
 801f7e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801f7e6:	b111      	cbz	r1, 801f7ee <HCI_Cleanup+0x62>
 801f7e8:	2100      	movs	r1, #0
 801f7ea:	f000 fc72 	bl	80200d2 <SendDispatchResetThreadClose>
 801f7ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7f0:	6245      	str	r5, [r0, #36]	; 0x24
 801f7f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7f4:	6285      	str	r5, [r0, #40]	; 0x28
 801f7f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f7f8:	69c0      	ldr	r0, [r0, #28]
 801f7fa:	f7f3 fe43 	bl	8013484 <BTPS_CloseEvent>
 801f7fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f800:	61c5      	str	r5, [r0, #28]
 801f802:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f804:	f7f3 fdf4 	bl	80133f0 <BTPS_FreeMemory>
 801f808:	6425      	str	r5, [r4, #64]	; 0x40
 801f80a:	4620      	mov	r0, r4
 801f80c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f810:	f7f9 bec8 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 801f814:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCI_Command_Supported:

0801f816 <HCI_Command_Supported>:
 801f816:	b570      	push	{r4, r5, r6, lr}
 801f818:	460d      	mov	r5, r1
 801f81a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801f81e:	b1a8      	cbz	r0, 801f84c <HCI_Command_Supported+0x36>
 801f820:	f7f9 f88c 	bl	801893c <AcquireBluetoothStackInformation>
 801f824:	b190      	cbz	r0, 801f84c <HCI_Command_Supported+0x36>
 801f826:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801f828:	b171      	cbz	r1, 801f848 <HCI_Command_Supported+0x32>
 801f82a:	2400      	movs	r4, #0
 801f82c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 801f830:	d80a      	bhi.n	801f848 <HCI_Command_Supported+0x32>
 801f832:	222d      	movs	r2, #45	; 0x2d
 801f834:	eb02 02d5 	add.w	r2, r2, r5, lsr #3
 801f838:	f005 0307 	and.w	r3, r5, #7
 801f83c:	5c89      	ldrb	r1, [r1, r2]
 801f83e:	2201      	movs	r2, #1
 801f840:	409a      	lsls	r2, r3
 801f842:	4211      	tst	r1, r2
 801f844:	d000      	beq.n	801f848 <HCI_Command_Supported+0x32>
 801f846:	2401      	movs	r4, #1
 801f848:	f7f9 feac 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801f84c:	4620      	mov	r0, r4
 801f84e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCI_Initialize:

0801f850 <HCI_Initialize>:
 801f850:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f852:	b08d      	sub	sp, #52	; 0x34
 801f854:	4606      	mov	r6, r0
 801f856:	f7f9 f871 	bl	801893c <AcquireBluetoothStackInformation>
 801f85a:	0004      	movs	r4, r0
 801f85c:	d079      	beq.n	801f952 <HCI_Initialize+0x102>
 801f85e:	208c      	movs	r0, #140	; 0x8c
 801f860:	f7f3 fdac 	bl	80133bc <BTPS_AllocateMemory>
 801f864:	f06f 0541 	mvn.w	r5, #65	; 0x41
 801f868:	6420      	str	r0, [r4, #64]	; 0x40
 801f86a:	2800      	cmp	r0, #0
 801f86c:	d072      	beq.n	801f954 <HCI_Initialize+0x104>
 801f86e:	aa0c      	add	r2, sp, #48	; 0x30
 801f870:	2100      	movs	r1, #0
 801f872:	4630      	mov	r0, r6
 801f874:	f7f9 fe78 	bl	8019568 <QuerySharedBuffer>
 801f878:	0007      	movs	r7, r0
 801f87a:	d0f7      	beq.n	801f86c <HCI_Initialize+0x1c>
 801f87c:	228c      	movs	r2, #140	; 0x8c
 801f87e:	2100      	movs	r1, #0
 801f880:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f882:	f7f3 fe1c 	bl	80134be <BTPS_MemInitialize>
 801f886:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f888:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f88a:	222c      	movs	r2, #44	; 0x2c
 801f88c:	6148      	str	r0, [r1, #20]
 801f88e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f890:	2100      	movs	r1, #0
 801f892:	6187      	str	r7, [r0, #24]
 801f894:	487f      	ldr	r0, [pc, #508]	; (801fa94 <HCI_Initialize+0x244>)
 801f896:	f7f3 fe12 	bl	80134be <BTPS_MemInitialize>
 801f89a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f89c:	6860      	ldr	r0, [r4, #4]
 801f89e:	f06f 070d 	mvn.w	r7, #13
 801f8a2:	6008      	str	r0, [r1, #0]
 801f8a4:	2800      	cmp	r0, #0
 801f8a6:	d071      	beq.n	801f98c <HCI_Initialize+0x13c>
 801f8a8:	2000      	movs	r0, #0
 801f8aa:	f7f3 fdb9 	bl	8013420 <BTPS_CreateEvent>
 801f8ae:	9003      	str	r0, [sp, #12]
 801f8b0:	2800      	cmp	r0, #0
 801f8b2:	d06c      	beq.n	801f98e <HCI_Initialize+0x13e>
 801f8b4:	aa02      	add	r2, sp, #8
 801f8b6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 801f8ba:	4877      	ldr	r0, [pc, #476]	; (801fa98 <HCI_Initialize+0x248>)
 801f8bc:	9605      	str	r6, [sp, #20]
 801f8be:	f7f3 fe85 	bl	80135cc <BTPS_CreateThread>
 801f8c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f8c4:	2800      	cmp	r0, #0
 801f8c6:	6248      	str	r0, [r1, #36]	; 0x24
 801f8c8:	d042      	beq.n	801f950 <HCI_Initialize+0x100>
 801f8ca:	11e9      	asrs	r1, r5, #7
 801f8cc:	9803      	ldr	r0, [sp, #12]
 801f8ce:	f7f3 fd14 	bl	80132fa <BTPS_WaitEvent>
 801f8d2:	2800      	cmp	r0, #0
 801f8d4:	d0f8      	beq.n	801f8c8 <HCI_Initialize+0x78>
 801f8d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	d0f4      	beq.n	801f8c8 <HCI_Initialize+0x78>
 801f8de:	9802      	ldr	r0, [sp, #8]
 801f8e0:	2800      	cmp	r0, #0
 801f8e2:	d0f1      	beq.n	801f8c8 <HCI_Initialize+0x78>
 801f8e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f8e6:	6288      	str	r0, [r1, #40]	; 0x28
 801f8e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f8ea:	9a02      	ldr	r2, [sp, #8]
 801f8ec:	496b      	ldr	r1, [pc, #428]	; (801fa9c <HCI_Initialize+0x24c>)
 801f8ee:	6800      	ldr	r0, [r0, #0]
 801f8f0:	f006 f9f1 	bl	8025cd6 <HCI_RegisterEventCallback>
 801f8f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f8f6:	2800      	cmp	r0, #0
 801f8f8:	6048      	str	r0, [r1, #4]
 801f8fa:	dd7d      	ble.n	801f9f8 <HCI_Initialize+0x1a8>
 801f8fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f8fe:	9a02      	ldr	r2, [sp, #8]
 801f900:	4967      	ldr	r1, [pc, #412]	; (801faa0 <HCI_Initialize+0x250>)
 801f902:	6800      	ldr	r0, [r0, #0]
 801f904:	f006 f9e2 	bl	8025ccc <HCI_RegisterACLDataCallback>
 801f908:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f90a:	2800      	cmp	r0, #0
 801f90c:	6088      	str	r0, [r1, #8]
 801f90e:	dd73      	ble.n	801f9f8 <HCI_Initialize+0x1a8>
 801f910:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f912:	9a02      	ldr	r2, [sp, #8]
 801f914:	4963      	ldr	r1, [pc, #396]	; (801faa4 <HCI_Initialize+0x254>)
 801f916:	6800      	ldr	r0, [r0, #0]
 801f918:	f006 f9e2 	bl	8025ce0 <HCI_RegisterSCODataCallback>
 801f91c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f91e:	2800      	cmp	r0, #0
 801f920:	60c8      	str	r0, [r1, #12]
 801f922:	dd6a      	ble.n	801f9fa <HCI_Initialize+0x1aa>
 801f924:	2000      	movs	r0, #0
 801f926:	f7f3 fd7b 	bl	8013420 <BTPS_CreateEvent>
 801f92a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f92c:	2800      	cmp	r0, #0
 801f92e:	61c8      	str	r0, [r1, #28]
 801f930:	d063      	beq.n	801f9fa <HCI_Initialize+0x1aa>
 801f932:	a90a      	add	r1, sp, #40	; 0x28
 801f934:	4630      	mov	r0, r6
 801f936:	f000 f92c 	bl	801fb92 <HCI_Reset>
 801f93a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 801f93e:	4308      	orrs	r0, r1
 801f940:	d009      	beq.n	801f956 <HCI_Initialize+0x106>
 801f942:	1e7d      	subs	r5, r7, #1
 801f944:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f946:	69c0      	ldr	r0, [r0, #28]
 801f948:	f7f3 fd9c 	bl	8013484 <BTPS_CloseEvent>
 801f94c:	2d00      	cmp	r5, #0
 801f94e:	db79      	blt.n	801fa44 <HCI_Initialize+0x1f4>
 801f950:	e08a      	b.n	801fa68 <HCI_Initialize+0x218>
 801f952:	e099      	b.n	801fa88 <HCI_Initialize+0x238>
 801f954:	e094      	b.n	801fa80 <HCI_Initialize+0x230>
 801f956:	a908      	add	r1, sp, #32
 801f958:	a809      	add	r0, sp, #36	; 0x24
 801f95a:	e9cd 0100 	strd	r0, r1, [sp]
 801f95e:	ab08      	add	r3, sp, #32
 801f960:	461a      	mov	r2, r3
 801f962:	a90b      	add	r1, sp, #44	; 0x2c
 801f964:	4630      	mov	r0, r6
 801f966:	f001 f8cb 	bl	8020b00 <_HCI_Read_Local_Version_Information>
 801f96a:	f06f 0711 	mvn.w	r7, #17
 801f96e:	b108      	cbz	r0, 801f974 <HCI_Initialize+0x124>
 801f970:	463d      	mov	r5, r7
 801f972:	e7e7      	b.n	801f944 <HCI_Initialize+0xf4>
 801f974:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 801f978:	1e81      	subs	r1, r0, #2
 801f97a:	2906      	cmp	r1, #6
 801f97c:	d247      	bcs.n	801fa0e <HCI_Initialize+0x1be>
 801f97e:	e8df f001 	tbb	[pc, r1]
 801f982:	0703      	.short	0x0703
 801f984:	0c0c0c0c 	.word	0x0c0c0c0c
 801f988:	2002      	movs	r0, #2
 801f98a:	e002      	b.n	801f992 <HCI_Initialize+0x142>
 801f98c:	e072      	b.n	801fa74 <HCI_Initialize+0x224>
 801f98e:	e072      	b.n	801fa76 <HCI_Initialize+0x226>
 801f990:	2003      	movs	r0, #3
 801f992:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f994:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
 801f998:	e03e      	b.n	801fa18 <HCI_Initialize+0x1c8>
 801f99a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f99c:	2500      	movs	r5, #0
 801f99e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
 801f9a2:	211f      	movs	r1, #31
 801f9a4:	f8ad 1020 	strh.w	r1, [sp, #32]
 801f9a8:	2806      	cmp	r0, #6
 801f9aa:	d309      	bcc.n	801f9c0 <HCI_Initialize+0x170>
 801f9ac:	4630      	mov	r0, r6
 801f9ae:	f7ff fc89 	bl	801f2c4 <DetermineLEControllerSupport>
 801f9b2:	1e05      	subs	r5, r0, #0
 801f9b4:	dd03      	ble.n	801f9be <HCI_Initialize+0x16e>
 801f9b6:	203f      	movs	r0, #63	; 0x3f
 801f9b8:	f8ad 0020 	strh.w	r0, [sp, #32]
 801f9bc:	e000      	b.n	801f9c0 <HCI_Initialize+0x170>
 801f9be:	db26      	blt.n	801fa0e <HCI_Initialize+0x1be>
 801f9c0:	20ff      	movs	r0, #255	; 0xff
 801f9c2:	f88d 0018 	strb.w	r0, [sp, #24]
 801f9c6:	f88d 0019 	strb.w	r0, [sp, #25]
 801f9ca:	f88d 001c 	strb.w	r0, [sp, #28]
 801f9ce:	f88d 001a 	strb.w	r0, [sp, #26]
 801f9d2:	f88d 001d 	strb.w	r0, [sp, #29]
 801f9d6:	f88d 001b 	strb.w	r0, [sp, #27]
 801f9da:	f88d 001e 	strb.w	r0, [sp, #30]
 801f9de:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 801f9e2:	f88d 001f 	strb.w	r0, [sp, #31]
 801f9e6:	a906      	add	r1, sp, #24
 801f9e8:	4630      	mov	r0, r6
 801f9ea:	f001 f92d 	bl	8020c48 <_HCI_Set_Event_Mask>
 801f9ee:	b970      	cbnz	r0, 801fa0e <HCI_Initialize+0x1be>
 801f9f0:	2d00      	cmp	r5, #0
 801f9f2:	dd0c      	ble.n	801fa0e <HCI_Initialize+0x1be>
 801f9f4:	2200      	movs	r2, #0
 801f9f6:	e001      	b.n	801f9fc <HCI_Initialize+0x1ac>
 801f9f8:	e023      	b.n	801fa42 <HCI_Initialize+0x1f2>
 801f9fa:	e023      	b.n	801fa44 <HCI_Initialize+0x1f4>
 801f9fc:	2101      	movs	r1, #1
 801f9fe:	4630      	mov	r0, r6
 801fa00:	f001 f9b8 	bl	8020d74 <_HCI_Write_LE_Host_Supported>
 801fa04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa06:	6901      	ldr	r1, [r0, #16]
 801fa08:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 801fa0c:	6101      	str	r1, [r0, #16]
 801fa0e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa10:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801fa14:	2802      	cmp	r0, #2
 801fa16:	d309      	bcc.n	801fa2c <HCI_Initialize+0x1dc>
 801fa18:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fa1a:	4630      	mov	r0, r6
 801fa1c:	312d      	adds	r1, #45	; 0x2d
 801fa1e:	f001 f836 	bl	8020a8e <_HCI_Read_Local_Supported_Commands>
 801fa22:	b918      	cbnz	r0, 801fa2c <HCI_Initialize+0x1dc>
 801fa24:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 801fa28:	280d      	cmp	r0, #13
 801fa2a:	d008      	beq.n	801fa3e <HCI_Initialize+0x1ee>
 801fa2c:	463d      	mov	r5, r7
 801fa2e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa30:	2d00      	cmp	r5, #0
 801fa32:	6901      	ldr	r1, [r0, #16]
 801fa34:	f041 0101 	orr.w	r1, r1, #1
 801fa38:	6101      	str	r1, [r0, #16]
 801fa3a:	d183      	bne.n	801f944 <HCI_Initialize+0xf4>
 801fa3c:	e014      	b.n	801fa68 <HCI_Initialize+0x218>
 801fa3e:	2500      	movs	r5, #0
 801fa40:	e7f5      	b.n	801fa2e <HCI_Initialize+0x1de>
 801fa42:	463d      	mov	r5, r7
 801fa44:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa46:	68c1      	ldr	r1, [r0, #12]
 801fa48:	6800      	ldr	r0, [r0, #0]
 801fa4a:	f006 f9a9 	bl	8025da0 <HCI_UnRegisterCallback>
 801fa4e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa50:	6881      	ldr	r1, [r0, #8]
 801fa52:	6800      	ldr	r0, [r0, #0]
 801fa54:	f006 f9a4 	bl	8025da0 <HCI_UnRegisterCallback>
 801fa58:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa5a:	c803      	ldmia	r0, {r0, r1}
 801fa5c:	f006 f9a0 	bl	8025da0 <HCI_UnRegisterCallback>
 801fa60:	2100      	movs	r1, #0
 801fa62:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa64:	f000 fb35 	bl	80200d2 <SendDispatchResetThreadClose>
 801fa68:	9803      	ldr	r0, [sp, #12]
 801fa6a:	f7f3 fd0b 	bl	8013484 <BTPS_CloseEvent>
 801fa6e:	2d00      	cmp	r5, #0
 801fa70:	db01      	blt.n	801fa76 <HCI_Initialize+0x226>
 801fa72:	e005      	b.n	801fa80 <HCI_Initialize+0x230>
 801fa74:	463d      	mov	r5, r7
 801fa76:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801fa78:	f7f3 fcba 	bl	80133f0 <BTPS_FreeMemory>
 801fa7c:	2000      	movs	r0, #0
 801fa7e:	6420      	str	r0, [r4, #64]	; 0x40
 801fa80:	4620      	mov	r0, r4
 801fa82:	f7f9 fd8f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fa86:	e001      	b.n	801fa8c <HCI_Initialize+0x23c>
 801fa88:	f06f 0501 	mvn.w	r5, #1
 801fa8c:	b00d      	add	sp, #52	; 0x34
 801fa8e:	4628      	mov	r0, r5
 801fa90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa92:	0000      	.short	0x0000
 801fa94:	20000c3c 	.word	0x20000c3c
 801fa98:	0801f2f1 	.word	0x0801f2f1
 801fa9c:	0801e765 	.word	0x0801e765
 801faa0:	0801e729 	.word	0x0801e729
 801faa4:	0801ede9 	.word	0x0801ede9

Disassembly of section i.HCI_LE_Set_Random_Address:

0801faa8 <HCI_LE_Set_Random_Address>:
 801faa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801faaa:	001c      	movs	r4, r3
 801faac:	d00f      	beq.n	801face <HCI_LE_Set_Random_Address+0x26>
 801faae:	a901      	add	r1, sp, #4
 801fab0:	f000 fe60 	bl	8020774 <_HCI_LE_Set_Random_Address>
 801fab4:	f510 7ffa 	cmn.w	r0, #500	; 0x1f4
 801fab8:	dc06      	bgt.n	801fac8 <HCI_LE_Set_Random_Address+0x20>
 801faba:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 801fabe:	4240      	negs	r0, r0
 801fac0:	7020      	strb	r0, [r4, #0]
 801fac2:	2000      	movs	r0, #0
 801fac4:	b004      	add	sp, #16
 801fac6:	bd10      	pop	{r4, pc}
 801fac8:	2100      	movs	r1, #0
 801faca:	7021      	strb	r1, [r4, #0]
 801facc:	e7fa      	b.n	801fac4 <HCI_LE_Set_Random_Address+0x1c>
 801face:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fad2:	e7f7      	b.n	801fac4 <HCI_LE_Set_Random_Address+0x1c>

Disassembly of section i.HCI_Query_LE_Controller_Support:

0801fad4 <HCI_Query_LE_Controller_Support>:
 801fad4:	b51c      	push	{r2, r3, r4, lr}
 801fad6:	4604      	mov	r4, r0
 801fad8:	f7ff fbf4 	bl	801f2c4 <DetermineLEControllerSupport>
 801fadc:	2800      	cmp	r0, #0
 801fade:	dd09      	ble.n	801faf4 <HCI_Query_LE_Controller_Support+0x20>
 801fae0:	aa01      	add	r2, sp, #4
 801fae2:	4669      	mov	r1, sp
 801fae4:	4620      	mov	r0, r4
 801fae6:	f000 ffb6 	bl	8020a56 <_HCI_Read_LE_Host_Supported>
 801faea:	b918      	cbnz	r0, 801faf4 <HCI_Query_LE_Controller_Support+0x20>
 801faec:	f89d 0000 	ldrb.w	r0, [sp]
 801faf0:	2801      	cmp	r0, #1
 801faf2:	d000      	beq.n	801faf6 <HCI_Query_LE_Controller_Support+0x22>
 801faf4:	2000      	movs	r0, #0
 801faf6:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.HCI_Read_Local_Version_Information:

0801faf8 <HCI_Read_Local_Version_Information>:
 801faf8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 801fafa:	4616      	mov	r6, r2
 801fafc:	000c      	movs	r4, r1
 801fafe:	461d      	mov	r5, r3
 801fb00:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
 801fb04:	9b06      	ldr	r3, [sp, #24]
 801fb06:	d016      	beq.n	801fb36 <HCI_Read_Local_Version_Information+0x3e>
 801fb08:	b1ae      	cbz	r6, 801fb36 <HCI_Read_Local_Version_Information+0x3e>
 801fb0a:	b1a5      	cbz	r5, 801fb36 <HCI_Read_Local_Version_Information+0x3e>
 801fb0c:	b19b      	cbz	r3, 801fb36 <HCI_Read_Local_Version_Information+0x3e>
 801fb0e:	b192      	cbz	r2, 801fb36 <HCI_Read_Local_Version_Information+0x3e>
 801fb10:	b189      	cbz	r1, 801fb36 <HCI_Read_Local_Version_Information+0x3e>
 801fb12:	e9cd 2100 	strd	r2, r1, [sp]
 801fb16:	462a      	mov	r2, r5
 801fb18:	4631      	mov	r1, r6
 801fb1a:	f000 fff1 	bl	8020b00 <_HCI_Read_Local_Version_Information>
 801fb1e:	f510 7ffa 	cmn.w	r0, #500	; 0x1f4
 801fb22:	dc05      	bgt.n	801fb30 <HCI_Read_Local_Version_Information+0x38>
 801fb24:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 801fb28:	4240      	negs	r0, r0
 801fb2a:	7020      	strb	r0, [r4, #0]
 801fb2c:	2000      	movs	r0, #0
 801fb2e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 801fb30:	2100      	movs	r1, #0
 801fb32:	7021      	strb	r1, [r4, #0]
 801fb34:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 801fb36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb3a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.HCI_Reconfigure_Driver:

0801fb3c <HCI_Reconfigure_Driver>:
 801fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb40:	4616      	mov	r6, r2
 801fb42:	460f      	mov	r7, r1
 801fb44:	f06f 0401 	mvn.w	r4, #1
 801fb48:	b188      	cbz	r0, 801fb6e <HCI_Reconfigure_Driver+0x32>
 801fb4a:	f7f8 fef7 	bl	801893c <AcquireBluetoothStackInformation>
 801fb4e:	0005      	movs	r5, r0
 801fb50:	d00d      	beq.n	801fb6e <HCI_Reconfigure_Driver+0x32>
 801fb52:	4632      	mov	r2, r6
 801fb54:	4639      	mov	r1, r7
 801fb56:	6868      	ldr	r0, [r5, #4]
 801fb58:	f006 f882 	bl	8025c60 <HCI_ReconfigureDriver>
 801fb5c:	2800      	cmp	r0, #0
 801fb5e:	da02      	bge.n	801fb66 <HCI_Reconfigure_Driver+0x2a>
 801fb60:	f06f 040d 	mvn.w	r4, #13
 801fb64:	e000      	b.n	801fb68 <HCI_Reconfigure_Driver+0x2c>
 801fb66:	2400      	movs	r4, #0
 801fb68:	4628      	mov	r0, r5
 801fb6a:	f7f9 fd1b 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fb6e:	4620      	mov	r0, r4
 801fb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.HCI_Register_ACL_Data_Callback:

0801fb74 <HCI_Register_ACL_Data_Callback>:
 801fb74:	4613      	mov	r3, r2
 801fb76:	460a      	mov	r2, r1
 801fb78:	2102      	movs	r1, #2
 801fb7a:	f000 b98d 	b.w	801fe98 <RegisterCallback>

Disassembly of section i.HCI_Register_Event_Callback:

0801fb7e <HCI_Register_Event_Callback>:
 801fb7e:	4613      	mov	r3, r2
 801fb80:	460a      	mov	r2, r1
 801fb82:	2101      	movs	r1, #1
 801fb84:	f000 b988 	b.w	801fe98 <RegisterCallback>

Disassembly of section i.HCI_Register_SCO_Data_Callback:

0801fb88 <HCI_Register_SCO_Data_Callback>:
 801fb88:	4613      	mov	r3, r2
 801fb8a:	460a      	mov	r2, r1
 801fb8c:	2103      	movs	r1, #3
 801fb8e:	f000 b983 	b.w	801fe98 <RegisterCallback>

Disassembly of section i.HCI_Reset:

0801fb92 <HCI_Reset>:
 801fb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb94:	000c      	movs	r4, r1
 801fb96:	4605      	mov	r5, r0
 801fb98:	d03c      	beq.n	801fc14 <HCI_Reset+0x82>
 801fb9a:	f7f8 fecf 	bl	801893c <AcquireBluetoothStackInformation>
 801fb9e:	9000      	str	r0, [sp, #0]
 801fba0:	b370      	cbz	r0, 801fc00 <HCI_Reset+0x6e>
 801fba2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fba4:	4629      	mov	r1, r5
 801fba6:	6800      	ldr	r0, [r0, #0]
 801fba8:	f7f3 fe7e 	bl	80138a8 <HCI_VS_InitializeBeforeHCIReset>
 801fbac:	f06f 0664 	mvn.w	r6, #100	; 0x64
 801fbb0:	b338      	cbz	r0, 801fc02 <HCI_Reset+0x70>
 801fbb2:	f640 4203 	movw	r2, #3075	; 0xc03
 801fbb6:	4629      	mov	r1, r5
 801fbb8:	4668      	mov	r0, sp
 801fbba:	f7ff fa1d 	bl	801eff8 <BuildAndSubmitCommandNoData>
 801fbbe:	2800      	cmp	r0, #0
 801fbc0:	db1b      	blt.n	801fbfa <HCI_Reset+0x68>
 801fbc2:	9900      	ldr	r1, [sp, #0]
 801fbc4:	6c08      	ldr	r0, [r1, #64]	; 0x40
 801fbc6:	6980      	ldr	r0, [r0, #24]
 801fbc8:	7942      	ldrb	r2, [r0, #5]
 801fbca:	7022      	strb	r2, [r4, #0]
 801fbcc:	7940      	ldrb	r0, [r0, #5]
 801fbce:	b930      	cbnz	r0, 801fbde <HCI_Reset+0x4c>
 801fbd0:	6c08      	ldr	r0, [r1, #64]	; 0x40
 801fbd2:	7c01      	ldrb	r1, [r0, #16]
 801fbd4:	07c9      	lsls	r1, r1, #31
 801fbd6:	d002      	beq.n	801fbde <HCI_Reset+0x4c>
 801fbd8:	2101      	movs	r1, #1
 801fbda:	f000 fa7a 	bl	80200d2 <SendDispatchResetThreadClose>
 801fbde:	9800      	ldr	r0, [sp, #0]
 801fbe0:	4629      	mov	r1, r5
 801fbe2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801fbe4:	6800      	ldr	r0, [r0, #0]
 801fbe6:	f7f3 fe61 	bl	80138ac <HCI_VS_InitializeAfterHCIReset>
 801fbea:	b108      	cbz	r0, 801fbf0 <HCI_Reset+0x5e>
 801fbec:	2400      	movs	r4, #0
 801fbee:	e000      	b.n	801fbf2 <HCI_Reset+0x60>
 801fbf0:	4634      	mov	r4, r6
 801fbf2:	9800      	ldr	r0, [sp, #0]
 801fbf4:	f7f9 fcd6 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fbf8:	e005      	b.n	801fc06 <HCI_Reset+0x74>
 801fbfa:	f06f 040d 	mvn.w	r4, #13
 801fbfe:	e002      	b.n	801fc06 <HCI_Reset+0x74>
 801fc00:	e005      	b.n	801fc0e <HCI_Reset+0x7c>
 801fc02:	e7ff      	b.n	801fc04 <HCI_Reset+0x72>
 801fc04:	4634      	mov	r4, r6
 801fc06:	9800      	ldr	r0, [sp, #0]
 801fc08:	f7f9 fccc 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fc0c:	e004      	b.n	801fc18 <HCI_Reset+0x86>
 801fc0e:	f06f 0401 	mvn.w	r4, #1
 801fc12:	e001      	b.n	801fc18 <HCI_Reset+0x86>
 801fc14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801fc18:	4620      	mov	r0, r4
 801fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i.HCI_Schedule_Asynchronous_Callback:

0801fc1c <HCI_Schedule_Asynchronous_Callback>:
 801fc1c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 801fc20:	4617      	mov	r7, r2
 801fc22:	000e      	movs	r6, r1
 801fc24:	d020      	beq.n	801fc68 <HCI_Schedule_Asynchronous_Callback+0x4c>
 801fc26:	f7f8 fe89 	bl	801893c <AcquireBluetoothStackInformation>
 801fc2a:	0005      	movs	r5, r0
 801fc2c:	d01c      	beq.n	801fc68 <HCI_Schedule_Asynchronous_Callback+0x4c>
 801fc2e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 801fc30:	b1a8      	cbz	r0, 801fc5e <HCI_Schedule_Asynchronous_Callback+0x42>
 801fc32:	2008      	movs	r0, #8
 801fc34:	f7f3 fbc2 	bl	80133bc <BTPS_AllocateMemory>
 801fc38:	0004      	movs	r4, r0
 801fc3a:	d011      	beq.n	801fc60 <HCI_Schedule_Asynchronous_Callback+0x44>
 801fc3c:	e9c4 6700 	strd	r6, r7, [r4]
 801fc40:	2005      	movs	r0, #5
 801fc42:	f88d 0000 	strb.w	r0, [sp]
 801fc46:	9401      	str	r4, [sp, #4]
 801fc48:	6c28      	ldr	r0, [r5, #64]	; 0x40
 801fc4a:	4669      	mov	r1, sp
 801fc4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801fc4e:	f7f3 fd17 	bl	8013680 <BTPS_AddMailbox>
 801fc52:	b108      	cbz	r0, 801fc58 <HCI_Schedule_Asynchronous_Callback+0x3c>
 801fc54:	2401      	movs	r4, #1
 801fc56:	e003      	b.n	801fc60 <HCI_Schedule_Asynchronous_Callback+0x44>
 801fc58:	4620      	mov	r0, r4
 801fc5a:	f7f3 fbc9 	bl	80133f0 <BTPS_FreeMemory>
 801fc5e:	2400      	movs	r4, #0
 801fc60:	4628      	mov	r0, r5
 801fc62:	f7f9 fc9f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fc66:	e000      	b.n	801fc6a <HCI_Schedule_Asynchronous_Callback+0x4e>
 801fc68:	2400      	movs	r4, #0
 801fc6a:	4620      	mov	r0, r4
 801fc6c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.HCI_Send_ACL_Data:

0801fc70 <HCI_Send_ACL_Data>:
 801fc70:	b538      	push	{r3, r4, r5, lr}
 801fc72:	4311      	orrs	r1, r2
 801fc74:	9c04      	ldr	r4, [sp, #16]
 801fc76:	2200      	movs	r2, #0
 801fc78:	9400      	str	r4, [sp, #0]
 801fc7a:	f000 f9ab 	bl	801ffd4 <SendDataPacket>
 801fc7e:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.HCI_Send_Raw_Command:

0801fc80 <HCI_Send_Raw_Command>:
 801fc80:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 801fc84:	4692      	mov	sl, r2
 801fc86:	e9dd 840b 	ldrd	r8, r4, [sp, #44]	; 0x2c
 801fc8a:	4689      	mov	r9, r1
 801fc8c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 801fc90:	461e      	mov	r6, r3
 801fc92:	ea51 010a 	orrs.w	r1, r1, sl
 801fc96:	d06e      	beq.n	801fd76 <HCI_Send_Raw_Command+0xf6>
 801fc98:	b116      	cbz	r6, 801fca0 <HCI_Send_Raw_Command+0x20>
 801fc9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fc9c:	2900      	cmp	r1, #0
 801fc9e:	d06a      	beq.n	801fd76 <HCI_Send_Raw_Command+0xf6>
 801fca0:	ea5f 010b 	movs.w	r1, fp
 801fca4:	d00a      	beq.n	801fcbc <HCI_Send_Raw_Command+0x3c>
 801fca6:	f1b8 0f00 	cmp.w	r8, #0
 801fcaa:	d064      	beq.n	801fd76 <HCI_Send_Raw_Command+0xf6>
 801fcac:	2c00      	cmp	r4, #0
 801fcae:	d062      	beq.n	801fd76 <HCI_Send_Raw_Command+0xf6>
 801fcb0:	7821      	ldrb	r1, [r4, #0]
 801fcb2:	2900      	cmp	r1, #0
 801fcb4:	d05f      	beq.n	801fd76 <HCI_Send_Raw_Command+0xf6>
 801fcb6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fcb8:	2900      	cmp	r1, #0
 801fcba:	d05c      	beq.n	801fd76 <HCI_Send_Raw_Command+0xf6>
 801fcbc:	f7f8 fe3e 	bl	801893c <AcquireBluetoothStackInformation>
 801fcc0:	0007      	movs	r7, r0
 801fcc2:	d078      	beq.n	801fdb6 <HCI_Send_Raw_Command+0x136>
 801fcc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801fcc6:	f106 000e 	add.w	r0, r6, #14
 801fcca:	694a      	ldr	r2, [r1, #20]
 801fccc:	4282      	cmp	r2, r0
 801fcce:	d301      	bcc.n	801fcd4 <HCI_Send_Raw_Command+0x54>
 801fcd0:	698d      	ldr	r5, [r1, #24]
 801fcd2:	e002      	b.n	801fcda <HCI_Send_Raw_Command+0x5a>
 801fcd4:	f7f3 fb72 	bl	80133bc <BTPS_AllocateMemory>
 801fcd8:	4605      	mov	r5, r0
 801fcda:	2d00      	cmp	r5, #0
 801fcdc:	d07e      	beq.n	801fddc <HCI_Send_Raw_Command+0x15c>
 801fcde:	2001      	movs	r0, #1
 801fce0:	7028      	strb	r0, [r5, #0]
 801fce2:	1cf0      	adds	r0, r6, #3
 801fce4:	6068      	str	r0, [r5, #4]
 801fce6:	ea4a 2089 	orr.w	r0, sl, r9, lsl #10
 801fcea:	7228      	strb	r0, [r5, #8]
 801fcec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801fcf0:	ea01 2089 	and.w	r0, r1, r9, lsl #10
 801fcf4:	f3ca 0109 	ubfx	r1, sl, #0, #10
 801fcf8:	4308      	orrs	r0, r1
 801fcfa:	0a00      	lsrs	r0, r0, #8
 801fcfc:	7268      	strb	r0, [r5, #9]
 801fcfe:	72ae      	strb	r6, [r5, #10]
 801fd00:	0030      	movs	r0, r6
 801fd02:	d005      	beq.n	801fd10 <HCI_Send_Raw_Command+0x90>
 801fd04:	4632      	mov	r2, r6
 801fd06:	f105 000b 	add.w	r0, r5, #11
 801fd0a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fd0c:	f7f3 fbd3 	bl	80134b6 <BTPS_MemCopy>
 801fd10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fd12:	f1bb 0f00 	cmp.w	fp, #0
 801fd16:	d001      	beq.n	801fd1c <HCI_Send_Raw_Command+0x9c>
 801fd18:	4a37      	ldr	r2, [pc, #220]	; (801fdf8 <HCI_Send_Raw_Command+0x178>)
 801fd1a:	e000      	b.n	801fd1e <HCI_Send_Raw_Command+0x9e>
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	4603      	mov	r3, r0
 801fd20:	4629      	mov	r1, r5
 801fd22:	f7ff fcb9 	bl	801f698 <HCISendPacket>
 801fd26:	2800      	cmp	r0, #0
 801fd28:	db4e      	blt.n	801fdc8 <HCI_Send_Raw_Command+0x148>
 801fd2a:	2000      	movs	r0, #0
 801fd2c:	f1bb 0f00 	cmp.w	fp, #0
 801fd30:	d046      	beq.n	801fdc0 <HCI_Send_Raw_Command+0x140>
 801fd32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fd34:	f06f 060f 	mvn.w	r6, #15
 801fd38:	6993      	ldr	r3, [r2, #24]
 801fd3a:	7819      	ldrb	r1, [r3, #0]
 801fd3c:	290e      	cmp	r1, #14
 801fd3e:	d004      	beq.n	801fd4a <HCI_Send_Raw_Command+0xca>
 801fd40:	290f      	cmp	r1, #15
 801fd42:	d01b      	beq.n	801fd7c <HCI_Send_Raw_Command+0xfc>
 801fd44:	29ff      	cmp	r1, #255	; 0xff
 801fd46:	d01e      	beq.n	801fd86 <HCI_Send_Raw_Command+0x106>
 801fd48:	e037      	b.n	801fdba <HCI_Send_Raw_Command+0x13a>
 801fd4a:	6a11      	ldr	r1, [r2, #32]
 801fd4c:	2905      	cmp	r1, #5
 801fd4e:	d334      	bcc.n	801fdba <HCI_Send_Raw_Command+0x13a>
 801fd50:	7822      	ldrb	r2, [r4, #0]
 801fd52:	1f49      	subs	r1, r1, #5
 801fd54:	428a      	cmp	r2, r1
 801fd56:	d330      	bcc.n	801fdba <HCI_Send_Raw_Command+0x13a>
 801fd58:	f888 0000 	strb.w	r0, [r8]
 801fd5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fd5e:	f890 0020 	ldrb.w	r0, [r0, #32]
 801fd62:	1f40      	subs	r0, r0, #5
 801fd64:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 801fd68:	7022      	strb	r2, [r4, #0]
 801fd6a:	d005      	beq.n	801fd78 <HCI_Send_Raw_Command+0xf8>
 801fd6c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fd6e:	6981      	ldr	r1, [r0, #24]
 801fd70:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fd72:	1d49      	adds	r1, r1, #5
 801fd74:	e01c      	b.n	801fdb0 <HCI_Send_Raw_Command+0x130>
 801fd76:	e03a      	b.n	801fdee <HCI_Send_Raw_Command+0x16e>
 801fd78:	2600      	movs	r6, #0
 801fd7a:	e027      	b.n	801fdcc <HCI_Send_Raw_Command+0x14c>
 801fd7c:	7899      	ldrb	r1, [r3, #2]
 801fd7e:	f888 1000 	strb.w	r1, [r8]
 801fd82:	7020      	strb	r0, [r4, #0]
 801fd84:	e7f8      	b.n	801fd78 <HCI_Send_Raw_Command+0xf8>
 801fd86:	f892 1020 	ldrb.w	r1, [r2, #32]
 801fd8a:	7823      	ldrb	r3, [r4, #0]
 801fd8c:	1e89      	subs	r1, r1, #2
 801fd8e:	b2c9      	uxtb	r1, r1
 801fd90:	428b      	cmp	r3, r1
 801fd92:	d312      	bcc.n	801fdba <HCI_Send_Raw_Command+0x13a>
 801fd94:	f888 0000 	strb.w	r0, [r8]
 801fd98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fd9a:	f890 0020 	ldrb.w	r0, [r0, #32]
 801fd9e:	1e80      	subs	r0, r0, #2
 801fda0:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 801fda4:	7022      	strb	r2, [r4, #0]
 801fda6:	d0e7      	beq.n	801fd78 <HCI_Send_Raw_Command+0xf8>
 801fda8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fdaa:	6981      	ldr	r1, [r0, #24]
 801fdac:	980d      	ldr	r0, [sp, #52]	; 0x34
 801fdae:	1c89      	adds	r1, r1, #2
 801fdb0:	f7f3 fb81 	bl	80134b6 <BTPS_MemCopy>
 801fdb4:	e7e0      	b.n	801fd78 <HCI_Send_Raw_Command+0xf8>
 801fdb6:	e017      	b.n	801fde8 <HCI_Send_Raw_Command+0x168>
 801fdb8:	e010      	b.n	801fddc <HCI_Send_Raw_Command+0x15c>
 801fdba:	f888 0000 	strb.w	r0, [r8]
 801fdbe:	e001      	b.n	801fdc4 <HCI_Send_Raw_Command+0x144>
 801fdc0:	2600      	movs	r6, #0
 801fdc2:	b11c      	cbz	r4, 801fdcc <HCI_Send_Raw_Command+0x14c>
 801fdc4:	7020      	strb	r0, [r4, #0]
 801fdc6:	e001      	b.n	801fdcc <HCI_Send_Raw_Command+0x14c>
 801fdc8:	f06f 060d 	mvn.w	r6, #13
 801fdcc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fdce:	6980      	ldr	r0, [r0, #24]
 801fdd0:	42a8      	cmp	r0, r5
 801fdd2:	d005      	beq.n	801fde0 <HCI_Send_Raw_Command+0x160>
 801fdd4:	4628      	mov	r0, r5
 801fdd6:	f7f3 fb0b 	bl	80133f0 <BTPS_FreeMemory>
 801fdda:	e001      	b.n	801fde0 <HCI_Send_Raw_Command+0x160>
 801fddc:	f06f 0641 	mvn.w	r6, #65	; 0x41
 801fde0:	4638      	mov	r0, r7
 801fde2:	f7f9 fbdf 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fde6:	e004      	b.n	801fdf2 <HCI_Send_Raw_Command+0x172>
 801fde8:	f06f 0601 	mvn.w	r6, #1
 801fdec:	e001      	b.n	801fdf2 <HCI_Send_Raw_Command+0x172>
 801fdee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801fdf2:	4630      	mov	r0, r6
 801fdf4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 801fdf8:	0802010d 	.word	0x0802010d

Disassembly of section i.HCI_Version_Supported:

0801fdfc <HCI_Version_Supported>:
 801fdfc:	b570      	push	{r4, r5, r6, lr}
 801fdfe:	000d      	movs	r5, r1
 801fe00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801fe04:	d00a      	beq.n	801fe1c <HCI_Version_Supported+0x20>
 801fe06:	f7f8 fd99 	bl	801893c <AcquireBluetoothStackInformation>
 801fe0a:	b138      	cbz	r0, 801fe1c <HCI_Version_Supported+0x20>
 801fe0c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801fe0e:	b119      	cbz	r1, 801fe18 <HCI_Version_Supported+0x1c>
 801fe10:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 801fe14:	7029      	strb	r1, [r5, #0]
 801fe16:	2400      	movs	r4, #0
 801fe18:	f7f9 fbc4 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801fe1c:	4620      	mov	r0, r4
 801fe1e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCI_Write_Default_Link_Policy_Settings:

0801fe20 <HCI_Write_Default_Link_Policy_Settings>:
 801fe20:	b510      	push	{r4, lr}
 801fe22:	0014      	movs	r4, r2
 801fe24:	d00d      	beq.n	801fe42 <HCI_Write_Default_Link_Policy_Settings+0x22>
 801fe26:	f000 ff79 	bl	8020d1c <_HCI_Write_Default_Link_Policy_Settings>
 801fe2a:	f510 7ffa 	cmn.w	r0, #500	; 0x1f4
 801fe2e:	dc05      	bgt.n	801fe3c <HCI_Write_Default_Link_Policy_Settings+0x1c>
 801fe30:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 801fe34:	4240      	negs	r0, r0
 801fe36:	7020      	strb	r0, [r4, #0]
 801fe38:	2000      	movs	r0, #0
 801fe3a:	bd10      	pop	{r4, pc}
 801fe3c:	2100      	movs	r1, #0
 801fe3e:	7021      	strb	r1, [r4, #0]
 801fe40:	bd10      	pop	{r4, pc}
 801fe42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fe46:	bd10      	pop	{r4, pc}

Disassembly of section i.HCI_Write_SCO_Flow_Control_Enable:

0801fe48 <HCI_Write_SCO_Flow_Control_Enable>:
 801fe48:	b510      	push	{r4, lr}
 801fe4a:	0014      	movs	r4, r2
 801fe4c:	d00d      	beq.n	801fe6a <HCI_Write_SCO_Flow_Control_Enable+0x22>
 801fe4e:	f000 ffc6 	bl	8020dde <_HCI_Write_SCO_Flow_Control_Enable>
 801fe52:	f510 7ffa 	cmn.w	r0, #500	; 0x1f4
 801fe56:	dc05      	bgt.n	801fe64 <HCI_Write_SCO_Flow_Control_Enable+0x1c>
 801fe58:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 801fe5c:	4240      	negs	r0, r0
 801fe5e:	7020      	strb	r0, [r4, #0]
 801fe60:	2000      	movs	r0, #0
 801fe62:	bd10      	pop	{r4, pc}
 801fe64:	2100      	movs	r1, #0
 801fe66:	7021      	strb	r1, [r4, #0]
 801fe68:	bd10      	pop	{r4, pc}
 801fe6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fe6e:	bd10      	pop	{r4, pc}

Disassembly of section i.MailboxDeleteDataCallback:

0801fe70 <MailboxDeleteDataCallback>:
 801fe70:	2800      	cmp	r0, #0
 801fe72:	d00f      	beq.n	801fe94 <MailboxDeleteDataCallback+0x24>
 801fe74:	6841      	ldr	r1, [r0, #4]
 801fe76:	2900      	cmp	r1, #0
 801fe78:	d00c      	beq.n	801fe94 <MailboxDeleteDataCallback+0x24>
 801fe7a:	7800      	ldrb	r0, [r0, #0]
 801fe7c:	b138      	cbz	r0, 801fe8e <MailboxDeleteDataCallback+0x1e>
 801fe7e:	2801      	cmp	r0, #1
 801fe80:	d005      	beq.n	801fe8e <MailboxDeleteDataCallback+0x1e>
 801fe82:	2802      	cmp	r0, #2
 801fe84:	d003      	beq.n	801fe8e <MailboxDeleteDataCallback+0x1e>
 801fe86:	2805      	cmp	r0, #5
 801fe88:	d001      	beq.n	801fe8e <MailboxDeleteDataCallback+0x1e>
 801fe8a:	2806      	cmp	r0, #6
 801fe8c:	d102      	bne.n	801fe94 <MailboxDeleteDataCallback+0x24>
 801fe8e:	4608      	mov	r0, r1
 801fe90:	f7f3 baae 	b.w	80133f0 <BTPS_FreeMemory>
 801fe94:	4770      	bx	lr

Disassembly of section i.RegisterCallback:

0801fe98 <RegisterCallback>:
 801fe98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe9c:	4699      	mov	r9, r3
 801fe9e:	ea5f 0802 	movs.w	r8, r2
 801fea2:	460c      	mov	r4, r1
 801fea4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801fea8:	d041      	beq.n	801ff2e <RegisterCallback+0x96>
 801feaa:	f7f8 fd47 	bl	801893c <AcquireBluetoothStackInformation>
 801feae:	0006      	movs	r6, r0
 801feb0:	d03d      	beq.n	801ff2e <RegisterCallback+0x96>
 801feb2:	6c35      	ldr	r5, [r6, #64]	; 0x40
 801feb4:	b12d      	cbz	r5, 801fec2 <RegisterCallback+0x2a>
 801feb6:	2c01      	cmp	r4, #1
 801feb8:	d005      	beq.n	801fec6 <RegisterCallback+0x2e>
 801feba:	2c02      	cmp	r4, #2
 801febc:	d007      	beq.n	801fece <RegisterCallback+0x36>
 801febe:	2c03      	cmp	r4, #3
 801fec0:	d009      	beq.n	801fed6 <RegisterCallback+0x3e>
 801fec2:	463c      	mov	r4, r7
 801fec4:	e02f      	b.n	801ff26 <RegisterCallback+0x8e>
 801fec6:	f105 0780 	add.w	r7, r5, #128	; 0x80
 801feca:	3574      	adds	r5, #116	; 0x74
 801fecc:	e006      	b.n	801fedc <RegisterCallback+0x44>
 801fece:	f105 0784 	add.w	r7, r5, #132	; 0x84
 801fed2:	3578      	adds	r5, #120	; 0x78
 801fed4:	e002      	b.n	801fedc <RegisterCallback+0x44>
 801fed6:	f105 0788 	add.w	r7, r5, #136	; 0x88
 801feda:	357c      	adds	r5, #124	; 0x7c
 801fedc:	2010      	movs	r0, #16
 801fede:	f7f3 fa6d 	bl	80133bc <BTPS_AllocateMemory>
 801fee2:	0004      	movs	r4, r0
 801fee4:	d01d      	beq.n	801ff22 <RegisterCallback+0x8a>
 801fee6:	4914      	ldr	r1, [pc, #80]	; (801ff38 <RegisterCallback+0xa0>)
 801fee8:	6808      	ldr	r0, [r1, #0]
 801feea:	1c40      	adds	r0, r0, #1
 801feec:	6008      	str	r0, [r1, #0]
 801feee:	d501      	bpl.n	801fef4 <RegisterCallback+0x5c>
 801fef0:	2001      	movs	r0, #1
 801fef2:	6008      	str	r0, [r1, #0]
 801fef4:	e884 0301 	stmia.w	r4, {r0, r8, r9}
 801fef8:	2000      	movs	r0, #0
 801fefa:	60e0      	str	r0, [r4, #12]
 801fefc:	4601      	mov	r1, r0
 801fefe:	463b      	mov	r3, r7
 801ff00:	220c      	movs	r2, #12
 801ff02:	2007      	movs	r0, #7
 801ff04:	9400      	str	r4, [sp, #0]
 801ff06:	f7f8 fdd3 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 801ff0a:	b120      	cbz	r0, 801ff16 <RegisterCallback+0x7e>
 801ff0c:	6828      	ldr	r0, [r5, #0]
 801ff0e:	1c40      	adds	r0, r0, #1
 801ff10:	6028      	str	r0, [r5, #0]
 801ff12:	6824      	ldr	r4, [r4, #0]
 801ff14:	e007      	b.n	801ff26 <RegisterCallback+0x8e>
 801ff16:	4620      	mov	r0, r4
 801ff18:	f7f8 fedd 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 801ff1c:	f06f 0415 	mvn.w	r4, #21
 801ff20:	e001      	b.n	801ff26 <RegisterCallback+0x8e>
 801ff22:	f06f 0427 	mvn.w	r4, #39	; 0x27
 801ff26:	4630      	mov	r0, r6
 801ff28:	f7f9 fb3c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 801ff2c:	e000      	b.n	801ff30 <RegisterCallback+0x98>
 801ff2e:	463c      	mov	r4, r7
 801ff30:	4620      	mov	r0, r4
 801ff32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff36:	0000      	.short	0x0000
 801ff38:	2000002c 	.word	0x2000002c

0801ff3c <RegisterCallback>:
 801ff3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff3e:	460d      	mov	r5, r1
 801ff40:	4923      	ldr	r1, [pc, #140]	; (801ffd0 <RegisterCallback+0x94>)
 801ff42:	461e      	mov	r6, r3
 801ff44:	4617      	mov	r7, r2
 801ff46:	7809      	ldrb	r1, [r1, #0]
 801ff48:	b3b1      	cbz	r1, 801ffb8 <RegisterCallback+0x7c>
 801ff4a:	b3a8      	cbz	r0, 801ffb8 <RegisterCallback+0x7c>
 801ff4c:	b3af      	cbz	r7, 801ffba <RegisterCallback+0x7e>
 801ff4e:	4601      	mov	r1, r0
 801ff50:	481f      	ldr	r0, [pc, #124]	; (801ffd0 <RegisterCallback+0x94>)
 801ff52:	466a      	mov	r2, sp
 801ff54:	3008      	adds	r0, #8
 801ff56:	f005 fb89 	bl	802566c <AcquireDriverEntry>
 801ff5a:	0004      	movs	r4, r0
 801ff5c:	d02e      	beq.n	801ffbc <RegisterCallback+0x80>
 801ff5e:	2d01      	cmp	r5, #1
 801ff60:	d006      	beq.n	801ff70 <RegisterCallback+0x34>
 801ff62:	2d02      	cmp	r5, #2
 801ff64:	d009      	beq.n	801ff7a <RegisterCallback+0x3e>
 801ff66:	2d03      	cmp	r5, #3
 801ff68:	d00c      	beq.n	801ff84 <RegisterCallback+0x48>
 801ff6a:	2d04      	cmp	r5, #4
 801ff6c:	d11b      	bne.n	801ffa6 <RegisterCallback+0x6a>
 801ff6e:	e00e      	b.n	801ff8e <RegisterCallback+0x52>
 801ff70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ff72:	b9c0      	cbnz	r0, 801ffa6 <RegisterCallback+0x6a>
 801ff74:	f104 0520 	add.w	r5, r4, #32
 801ff78:	e00d      	b.n	801ff96 <RegisterCallback+0x5a>
 801ff7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ff7c:	b998      	cbnz	r0, 801ffa6 <RegisterCallback+0x6a>
 801ff7e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 801ff82:	e008      	b.n	801ff96 <RegisterCallback+0x5a>
 801ff84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ff86:	b970      	cbnz	r0, 801ffa6 <RegisterCallback+0x6a>
 801ff88:	f104 0538 	add.w	r5, r4, #56	; 0x38
 801ff8c:	e003      	b.n	801ff96 <RegisterCallback+0x5a>
 801ff8e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ff90:	b948      	cbnz	r0, 801ffa6 <RegisterCallback+0x6a>
 801ff92:	f104 0544 	add.w	r5, r4, #68	; 0x44
 801ff96:	b135      	cbz	r5, 801ffa6 <RegisterCallback+0x6a>
 801ff98:	f005 fbf8 	bl	802578c <GetNextCallbackPacketID>
 801ff9c:	60ae      	str	r6, [r5, #8]
 801ff9e:	e9c5 0700 	strd	r0, r7, [r5]
 801ffa2:	4606      	mov	r6, r0
 801ffa4:	e001      	b.n	801ffaa <RegisterCallback+0x6e>
 801ffa6:	f06f 0609 	mvn.w	r6, #9
 801ffaa:	f89d 0000 	ldrb.w	r0, [sp]
 801ffae:	b168      	cbz	r0, 801ffcc <RegisterCallback+0x90>
 801ffb0:	68e0      	ldr	r0, [r4, #12]
 801ffb2:	f7f3 f996 	bl	80132e2 <BTPS_ReleaseMutex>
 801ffb6:	e009      	b.n	801ffcc <RegisterCallback+0x90>
 801ffb8:	e006      	b.n	801ffc8 <RegisterCallback+0x8c>
 801ffba:	e002      	b.n	801ffc2 <RegisterCallback+0x86>
 801ffbc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801ffc0:	e004      	b.n	801ffcc <RegisterCallback+0x90>
 801ffc2:	f06f 0602 	mvn.w	r6, #2
 801ffc6:	e001      	b.n	801ffcc <RegisterCallback+0x90>
 801ffc8:	f06f 0604 	mvn.w	r6, #4
 801ffcc:	4630      	mov	r0, r6
 801ffce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffd0:	2000003c 	.word	0x2000003c

Disassembly of section i.SendDataPacket:

0801ffd4 <SendDataPacket>:
 801ffd4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 801ffd8:	001d      	movs	r5, r3
 801ffda:	4691      	mov	r9, r2
 801ffdc:	4688      	mov	r8, r1
 801ffde:	d072      	beq.n	80200c6 <SendDataPacket+0xf2>
 801ffe0:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ffe2:	2800      	cmp	r0, #0
 801ffe4:	d06f      	beq.n	80200c6 <SendDataPacket+0xf2>
 801ffe6:	9800      	ldr	r0, [sp, #0]
 801ffe8:	f7f8 fca8 	bl	801893c <AcquireBluetoothStackInformation>
 801ffec:	0007      	movs	r7, r0
 801ffee:	f06f 0601 	mvn.w	r6, #1
 801fff2:	d06a      	beq.n	80200ca <SendDataPacket+0xf6>
 801fff4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801fff6:	2800      	cmp	r0, #0
 801fff8:	d060      	beq.n	80200bc <SendDataPacket+0xe8>
 801fffa:	6942      	ldr	r2, [r0, #20]
 801fffc:	f105 010f 	add.w	r1, r5, #15
 8020000:	428a      	cmp	r2, r1
 8020002:	d301      	bcc.n	8020008 <SendDataPacket+0x34>
 8020004:	6984      	ldr	r4, [r0, #24]
 8020006:	e003      	b.n	8020010 <SendDataPacket+0x3c>
 8020008:	4608      	mov	r0, r1
 802000a:	f7f3 f9d7 	bl	80133bc <BTPS_AllocateMemory>
 802000e:	4604      	mov	r4, r0
 8020010:	b38c      	cbz	r4, 8020076 <SendDataPacket+0xa2>
 8020012:	f008 0bff 	and.w	fp, r8, #255	; 0xff
 8020016:	ea4f 2a18 	mov.w	sl, r8, lsr #8
 802001a:	f884 b008 	strb.w	fp, [r4, #8]
 802001e:	f884 a009 	strb.w	sl, [r4, #9]
 8020022:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8020026:	0a2e      	lsrs	r6, r5, #8
 8020028:	f884 800a 	strb.w	r8, [r4, #10]
 802002c:	72e6      	strb	r6, [r4, #11]
 802002e:	f1b9 0f00 	cmp.w	r9, #0
 8020032:	d003      	beq.n	802003c <SendDataPacket+0x68>
 8020034:	2003      	movs	r0, #3
 8020036:	7020      	strb	r0, [r4, #0]
 8020038:	1ce8      	adds	r0, r5, #3
 802003a:	e002      	b.n	8020042 <SendDataPacket+0x6e>
 802003c:	2002      	movs	r0, #2
 802003e:	7020      	strb	r0, [r4, #0]
 8020040:	1d28      	adds	r0, r5, #4
 8020042:	6060      	str	r0, [r4, #4]
 8020044:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020046:	9800      	ldr	r0, [sp, #0]
 8020048:	f7f9 fae4 	bl	8019614 <VerifySharedBufferPointer>
 802004c:	b1a0      	cbz	r0, 8020078 <SendDataPacket+0xa4>
 802004e:	2304      	movs	r3, #4
 8020050:	2101      	movs	r1, #1
 8020052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020054:	9800      	ldr	r0, [sp, #0]
 8020056:	f7f8 fcb7 	bl	80189c8 <AdjustSharedBuffer>
 802005a:	b168      	cbz	r0, 8020078 <SendDataPacket+0xa4>
 802005c:	f880 b000 	strb.w	fp, [r0]
 8020060:	f880 a001 	strb.w	sl, [r0, #1]
 8020064:	f880 8002 	strb.w	r8, [r0, #2]
 8020068:	70c6      	strb	r6, [r0, #3]
 802006a:	60a0      	str	r0, [r4, #8]
 802006c:	6860      	ldr	r0, [r4, #4]
 802006e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8020072:	6060      	str	r0, [r4, #4]
 8020074:	e00c      	b.n	8020090 <SendDataPacket+0xbc>
 8020076:	e01f      	b.n	80200b8 <SendDataPacket+0xe4>
 8020078:	f1b9 0f00 	cmp.w	r9, #0
 802007c:	d001      	beq.n	8020082 <SendDataPacket+0xae>
 802007e:	2001      	movs	r0, #1
 8020080:	e000      	b.n	8020084 <SendDataPacket+0xb0>
 8020082:	2002      	movs	r0, #2
 8020084:	4420      	add	r0, r4
 8020086:	462a      	mov	r2, r5
 8020088:	300a      	adds	r0, #10
 802008a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802008c:	f7f3 fa13 	bl	80134b6 <BTPS_MemCopy>
 8020090:	2300      	movs	r3, #0
 8020092:	461a      	mov	r2, r3
 8020094:	4621      	mov	r1, r4
 8020096:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8020098:	f7ff fafe 	bl	801f698 <HCISendPacket>
 802009c:	2800      	cmp	r0, #0
 802009e:	db01      	blt.n	80200a4 <SendDataPacket+0xd0>
 80200a0:	2600      	movs	r6, #0
 80200a2:	e001      	b.n	80200a8 <SendDataPacket+0xd4>
 80200a4:	f06f 060d 	mvn.w	r6, #13
 80200a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80200aa:	6980      	ldr	r0, [r0, #24]
 80200ac:	42a0      	cmp	r0, r4
 80200ae:	d005      	beq.n	80200bc <SendDataPacket+0xe8>
 80200b0:	4620      	mov	r0, r4
 80200b2:	f7f3 f99d 	bl	80133f0 <BTPS_FreeMemory>
 80200b6:	e001      	b.n	80200bc <SendDataPacket+0xe8>
 80200b8:	f06f 0641 	mvn.w	r6, #65	; 0x41
 80200bc:	4638      	mov	r0, r7
 80200be:	f7f9 fa71 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80200c2:	e002      	b.n	80200ca <SendDataPacket+0xf6>
 80200c4:	e7ff      	b.n	80200c6 <SendDataPacket+0xf2>
 80200c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80200ca:	b004      	add	sp, #16
 80200cc:	4630      	mov	r0, r6
 80200ce:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

Disassembly of section i.SendDispatchResetThreadClose:

080200d2 <SendDispatchResetThreadClose>:
 80200d2:	b51c      	push	{r2, r3, r4, lr}
 80200d4:	b109      	cbz	r1, 80200da <SendDispatchResetThreadClose+0x8>
 80200d6:	2103      	movs	r1, #3
 80200d8:	e000      	b.n	80200dc <SendDispatchResetThreadClose+0xa>
 80200da:	2104      	movs	r1, #4
 80200dc:	f88d 1000 	strb.w	r1, [sp]
 80200e0:	2100      	movs	r1, #0
 80200e2:	9101      	str	r1, [sp, #4]
 80200e4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80200e6:	4669      	mov	r1, sp
 80200e8:	f7f3 faca 	bl	8013680 <BTPS_AddMailbox>
 80200ec:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.SetEventHandler:

080200ee <SetEventHandler>:
 80200ee:	b570      	push	{r4, r5, r6, lr}
 80200f0:	460d      	mov	r5, r1
 80200f2:	4604      	mov	r4, r0
 80200f4:	f7f8 fc9a 	bl	8018a2c <BSC_AcquireListLock>
 80200f8:	2800      	cmp	r0, #0
 80200fa:	d006      	beq.n	802010a <SetEventHandler+0x1c>
 80200fc:	6820      	ldr	r0, [r4, #0]
 80200fe:	b900      	cbnz	r0, 8020102 <SetEventHandler+0x14>
 8020100:	6025      	str	r5, [r4, #0]
 8020102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020106:	f7f8 bff5 	b.w	80190f4 <BSC_ReleaseListLock>
 802010a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.SynchronousHCICommandCallback:

0802010c <SynchronousHCICommandCallback>:
 802010c:	b570      	push	{r4, r5, r6, lr}
 802010e:	0014      	movs	r4, r2
 8020110:	460d      	mov	r5, r1
 8020112:	d02a      	beq.n	802016a <SynchronousHCICommandCallback+0x5e>
 8020114:	69e0      	ldr	r0, [r4, #28]
 8020116:	b340      	cbz	r0, 802016a <SynchronousHCICommandCallback+0x5e>
 8020118:	2000      	movs	r0, #0
 802011a:	6220      	str	r0, [r4, #32]
 802011c:	b1dd      	cbz	r5, 8020156 <SynchronousHCICommandCallback+0x4a>
 802011e:	686a      	ldr	r2, [r5, #4]
 8020120:	2a02      	cmp	r2, #2
 8020122:	d318      	bcc.n	8020156 <SynchronousHCICommandCallback+0x4a>
 8020124:	7a28      	ldrb	r0, [r5, #8]
 8020126:	280e      	cmp	r0, #14
 8020128:	d004      	beq.n	8020134 <SynchronousHCICommandCallback+0x28>
 802012a:	280f      	cmp	r0, #15
 802012c:	d005      	beq.n	802013a <SynchronousHCICommandCallback+0x2e>
 802012e:	28ff      	cmp	r0, #255	; 0xff
 8020130:	d111      	bne.n	8020156 <SynchronousHCICommandCallback+0x4a>
 8020132:	e004      	b.n	802013e <SynchronousHCICommandCallback+0x32>
 8020134:	2a05      	cmp	r2, #5
 8020136:	d30e      	bcc.n	8020156 <SynchronousHCICommandCallback+0x4a>
 8020138:	e001      	b.n	802013e <SynchronousHCICommandCallback+0x32>
 802013a:	2a06      	cmp	r2, #6
 802013c:	d30b      	bcc.n	8020156 <SynchronousHCICommandCallback+0x4a>
 802013e:	69a0      	ldr	r0, [r4, #24]
 8020140:	b148      	cbz	r0, 8020156 <SynchronousHCICommandCallback+0x4a>
 8020142:	6961      	ldr	r1, [r4, #20]
 8020144:	428a      	cmp	r2, r1
 8020146:	d806      	bhi.n	8020156 <SynchronousHCICommandCallback+0x4a>
 8020148:	f105 0108 	add.w	r1, r5, #8
 802014c:	f7f3 f9b3 	bl	80134b6 <BTPS_MemCopy>
 8020150:	88a8      	ldrh	r0, [r5, #4]
 8020152:	b280      	uxth	r0, r0
 8020154:	6220      	str	r0, [r4, #32]
 8020156:	7828      	ldrb	r0, [r5, #0]
 8020158:	0600      	lsls	r0, r0, #24
 802015a:	d503      	bpl.n	8020164 <SynchronousHCICommandCallback+0x58>
 802015c:	6920      	ldr	r0, [r4, #16]
 802015e:	f040 0020 	orr.w	r0, r0, #32
 8020162:	6120      	str	r0, [r4, #16]
 8020164:	69e0      	ldr	r0, [r4, #28]
 8020166:	f7f3 f910 	bl	801338a <BTPS_SetEvent>
 802016a:	2d00      	cmp	r5, #0
 802016c:	d007      	beq.n	802017e <SynchronousHCICommandCallback+0x72>
 802016e:	7828      	ldrb	r0, [r5, #0]
 8020170:	0600      	lsls	r0, r0, #24
 8020172:	d404      	bmi.n	802017e <SynchronousHCICommandCallback+0x72>
 8020174:	4628      	mov	r0, r5
 8020176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802017a:	f7f3 b939 	b.w	80133f0 <BTPS_FreeMemory>
 802017e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i._HCI_Accept_Connection_Request:

08020180 <_HCI_Accept_Connection_Request>:
 8020180:	b517      	push	{r0, r1, r2, r4, lr}
 8020182:	b083      	sub	sp, #12
 8020184:	460b      	mov	r3, r1
 8020186:	a905      	add	r1, sp, #20
 8020188:	9100      	str	r1, [sp, #0]
 802018a:	4601      	mov	r1, r0
 802018c:	f240 4209 	movw	r2, #1033	; 0x409
 8020190:	a801      	add	r0, sp, #4
 8020192:	f7fe fe47 	bl	801ee24 <BuildAndSubmitCommandBD_ADDRByte>
 8020196:	0004      	movs	r4, r0
 8020198:	d409      	bmi.n	80201ae <_HCI_Accept_Connection_Request+0x2e>
 802019a:	9801      	ldr	r0, [sp, #4]
 802019c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802019e:	6989      	ldr	r1, [r1, #24]
 80201a0:	788c      	ldrb	r4, [r1, #2]
 80201a2:	b114      	cbz	r4, 80201aa <_HCI_Accept_Connection_Request+0x2a>
 80201a4:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80201a8:	4264      	negs	r4, r4
 80201aa:	f7f9 f9fb 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80201ae:	b006      	add	sp, #24
 80201b0:	4620      	mov	r0, r4
 80201b2:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_Authentication_Requested:

080201b4 <_HCI_Authentication_Requested>:
 80201b4:	b538      	push	{r3, r4, r5, lr}
 80201b6:	460b      	mov	r3, r1
 80201b8:	4601      	mov	r1, r0
 80201ba:	f240 4211 	movw	r2, #1041	; 0x411
 80201be:	4668      	mov	r0, sp
 80201c0:	f7fe ff5c 	bl	801f07c <BuildAndSubmitCommandWord>
 80201c4:	0004      	movs	r4, r0
 80201c6:	d409      	bmi.n	80201dc <_HCI_Authentication_Requested+0x28>
 80201c8:	9800      	ldr	r0, [sp, #0]
 80201ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80201cc:	6989      	ldr	r1, [r1, #24]
 80201ce:	788c      	ldrb	r4, [r1, #2]
 80201d0:	b114      	cbz	r4, 80201d8 <_HCI_Authentication_Requested+0x24>
 80201d2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80201d6:	4264      	negs	r4, r4
 80201d8:	f7f9 f9e4 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80201dc:	4620      	mov	r0, r4
 80201de:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Disconnect:

080201e0 <_HCI_Disconnect>:
 80201e0:	b51c      	push	{r2, r3, r4, lr}
 80201e2:	460b      	mov	r3, r1
 80201e4:	9200      	str	r2, [sp, #0]
 80201e6:	4601      	mov	r1, r0
 80201e8:	f240 4206 	movw	r2, #1030	; 0x406
 80201ec:	a801      	add	r0, sp, #4
 80201ee:	f7fe ff6f 	bl	801f0d0 <BuildAndSubmitCommandWordByte>
 80201f2:	0004      	movs	r4, r0
 80201f4:	d409      	bmi.n	802020a <_HCI_Disconnect+0x2a>
 80201f6:	9801      	ldr	r0, [sp, #4]
 80201f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80201fa:	6989      	ldr	r1, [r1, #24]
 80201fc:	788c      	ldrb	r4, [r1, #2]
 80201fe:	b114      	cbz	r4, 8020206 <_HCI_Disconnect+0x26>
 8020200:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020204:	4264      	negs	r4, r4
 8020206:	f7f9 f9cd 	bl	80195a4 <ReleaseBluetoothStackInformation>
 802020a:	4620      	mov	r0, r4
 802020c:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i._HCI_Flush:

0802020e <_HCI_Flush>:
 802020e:	b538      	push	{r3, r4, r5, lr}
 8020210:	460b      	mov	r3, r1
 8020212:	4601      	mov	r1, r0
 8020214:	f640 4208 	movw	r2, #3080	; 0xc08
 8020218:	4668      	mov	r0, sp
 802021a:	f7fe ff2f 	bl	801f07c <BuildAndSubmitCommandWord>
 802021e:	0004      	movs	r4, r0
 8020220:	d409      	bmi.n	8020236 <_HCI_Flush+0x28>
 8020222:	9800      	ldr	r0, [sp, #0]
 8020224:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020226:	6989      	ldr	r1, [r1, #24]
 8020228:	794c      	ldrb	r4, [r1, #5]
 802022a:	b114      	cbz	r4, 8020232 <_HCI_Flush+0x24>
 802022c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020230:	4264      	negs	r4, r4
 8020232:	f7f9 f9b7 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020236:	4620      	mov	r0, r4
 8020238:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Host_Number_Of_Completed_Packets:

0802023c <_HCI_Host_Number_Of_Completed_Packets>:
 802023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020240:	460e      	mov	r6, r1
 8020242:	2104      	movs	r1, #4
 8020244:	4614      	mov	r4, r2
 8020246:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 802024a:	b2ca      	uxtb	r2, r1
 802024c:	461f      	mov	r7, r3
 802024e:	f640 4135 	movw	r1, #3125	; 0xc35
 8020252:	f7fe ff69 	bl	801f128 <BuildCommandHeader>
 8020256:	0005      	movs	r5, r0
 8020258:	d035      	beq.n	80202c6 <_HCI_Host_Number_Of_Completed_Packets+0x8a>
 802025a:	6c28      	ldr	r0, [r5, #64]	; 0x40
 802025c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8020260:	2000      	movs	r0, #0
 8020262:	f88c 600b 	strb.w	r6, [ip, #11]
 8020266:	e010      	b.n	802028a <_HCI_Host_Number_Of_Completed_Packets+0x4e>
 8020268:	eb0c 0180 	add.w	r1, ip, r0, lsl #2
 802026c:	f814 2020 	ldrb.w	r2, [r4, r0, lsl #2]
 8020270:	730a      	strb	r2, [r1, #12]
 8020272:	f834 2020 	ldrh.w	r2, [r4, r0, lsl #2]
 8020276:	0a12      	lsrs	r2, r2, #8
 8020278:	734a      	strb	r2, [r1, #13]
 802027a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 802027e:	7893      	ldrb	r3, [r2, #2]
 8020280:	738b      	strb	r3, [r1, #14]
 8020282:	8852      	ldrh	r2, [r2, #2]
 8020284:	0a12      	lsrs	r2, r2, #8
 8020286:	73ca      	strb	r2, [r1, #15]
 8020288:	1c40      	adds	r0, r0, #1
 802028a:	42b0      	cmp	r0, r6
 802028c:	dbec      	blt.n	8020268 <_HCI_Host_Number_Of_Completed_Packets+0x2c>
 802028e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8020290:	b10f      	cbz	r7, 8020296 <_HCI_Host_Number_Of_Completed_Packets+0x5a>
 8020292:	4a0f      	ldr	r2, [pc, #60]	; (80202d0 <_HCI_Host_Number_Of_Completed_Packets+0x94>)
 8020294:	e000      	b.n	8020298 <_HCI_Host_Number_Of_Completed_Packets+0x5c>
 8020296:	2200      	movs	r2, #0
 8020298:	4603      	mov	r3, r0
 802029a:	4661      	mov	r1, ip
 802029c:	f7ff f9fc 	bl	801f698 <HCISendPacket>
 80202a0:	2800      	cmp	r0, #0
 80202a2:	db0a      	blt.n	80202ba <_HCI_Host_Number_Of_Completed_Packets+0x7e>
 80202a4:	b13f      	cbz	r7, 80202b6 <_HCI_Host_Number_Of_Completed_Packets+0x7a>
 80202a6:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80202a8:	6980      	ldr	r0, [r0, #24]
 80202aa:	7944      	ldrb	r4, [r0, #5]
 80202ac:	b13c      	cbz	r4, 80202be <_HCI_Host_Number_Of_Completed_Packets+0x82>
 80202ae:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80202b2:	4264      	negs	r4, r4
 80202b4:	e003      	b.n	80202be <_HCI_Host_Number_Of_Completed_Packets+0x82>
 80202b6:	2400      	movs	r4, #0
 80202b8:	e001      	b.n	80202be <_HCI_Host_Number_Of_Completed_Packets+0x82>
 80202ba:	f06f 040d 	mvn.w	r4, #13
 80202be:	4628      	mov	r0, r5
 80202c0:	f7f9 f970 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80202c4:	e001      	b.n	80202ca <_HCI_Host_Number_Of_Completed_Packets+0x8e>
 80202c6:	f06f 0401 	mvn.w	r4, #1
 80202ca:	4620      	mov	r0, r4
 80202cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202d0:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Add_Device_To_White_List:

080202d4 <_HCI_LE_Add_Device_To_White_List>:
 80202d4:	b517      	push	{r0, r1, r2, r4, lr}
 80202d6:	b083      	sub	sp, #12
 80202d8:	2306      	movs	r3, #6
 80202da:	e9cd 3200 	strd	r3, r2, [sp]
 80202de:	4601      	mov	r1, r0
 80202e0:	ab04      	add	r3, sp, #16
 80202e2:	f242 0211 	movw	r2, #8209	; 0x2011
 80202e6:	a802      	add	r0, sp, #8
 80202e8:	f7fe fe44 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 80202ec:	0004      	movs	r4, r0
 80202ee:	d409      	bmi.n	8020304 <_HCI_LE_Add_Device_To_White_List+0x30>
 80202f0:	9802      	ldr	r0, [sp, #8]
 80202f2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80202f4:	6989      	ldr	r1, [r1, #24]
 80202f6:	794c      	ldrb	r4, [r1, #5]
 80202f8:	b114      	cbz	r4, 8020300 <_HCI_LE_Add_Device_To_White_List+0x2c>
 80202fa:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80202fe:	4264      	negs	r4, r4
 8020300:	f7f9 f950 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020304:	b006      	add	sp, #24
 8020306:	4620      	mov	r0, r4
 8020308:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_LE_Clear_White_List:

0802030a <_HCI_LE_Clear_White_List>:
 802030a:	b538      	push	{r3, r4, r5, lr}
 802030c:	4601      	mov	r1, r0
 802030e:	f242 0210 	movw	r2, #8208	; 0x2010
 8020312:	4668      	mov	r0, sp
 8020314:	f7fe fe70 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020318:	0004      	movs	r4, r0
 802031a:	d409      	bmi.n	8020330 <_HCI_LE_Clear_White_List+0x26>
 802031c:	9800      	ldr	r0, [sp, #0]
 802031e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020320:	6989      	ldr	r1, [r1, #24]
 8020322:	794c      	ldrb	r4, [r1, #5]
 8020324:	b114      	cbz	r4, 802032c <_HCI_LE_Clear_White_List+0x22>
 8020326:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 802032a:	4264      	negs	r4, r4
 802032c:	f7f9 f93a 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020330:	4620      	mov	r0, r4
 8020332:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_LE_Connection_Update:

08020334 <_HCI_LE_Connection_Update>:
 8020334:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8020338:	460f      	mov	r7, r1
 802033a:	a90b      	add	r1, sp, #44	; 0x2c
 802033c:	4616      	mov	r6, r2
 802033e:	e891 0b00 	ldmia.w	r1, {r8, r9, fp}
 8020342:	461d      	mov	r5, r3
 8020344:	2211      	movs	r2, #17
 8020346:	f242 0113 	movw	r1, #8211	; 0x2013
 802034a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802034e:	f7fe feeb 	bl	801f128 <BuildCommandHeader>
 8020352:	0004      	movs	r4, r0
 8020354:	d033      	beq.n	80203be <_HCI_LE_Connection_Update+0x8a>
 8020356:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8020358:	4a1b      	ldr	r2, [pc, #108]	; (80203c8 <_HCI_LE_Connection_Update+0x94>)
 802035a:	6981      	ldr	r1, [r0, #24]
 802035c:	0a38      	lsrs	r0, r7, #8
 802035e:	72cf      	strb	r7, [r1, #11]
 8020360:	7308      	strb	r0, [r1, #12]
 8020362:	734e      	strb	r6, [r1, #13]
 8020364:	0a30      	lsrs	r0, r6, #8
 8020366:	7388      	strb	r0, [r1, #14]
 8020368:	73cd      	strb	r5, [r1, #15]
 802036a:	0a28      	lsrs	r0, r5, #8
 802036c:	7408      	strb	r0, [r1, #16]
 802036e:	f881 a011 	strb.w	sl, [r1, #17]
 8020372:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8020376:	7488      	strb	r0, [r1, #18]
 8020378:	f881 8013 	strb.w	r8, [r1, #19]
 802037c:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8020380:	7508      	strb	r0, [r1, #20]
 8020382:	f881 9015 	strb.w	r9, [r1, #21]
 8020386:	ea4f 2019 	mov.w	r0, r9, lsr #8
 802038a:	7588      	strb	r0, [r1, #22]
 802038c:	f881 b017 	strb.w	fp, [r1, #23]
 8020390:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020394:	7608      	strb	r0, [r1, #24]
 8020396:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8020398:	4603      	mov	r3, r0
 802039a:	f7ff f97d 	bl	801f698 <HCISendPacket>
 802039e:	2800      	cmp	r0, #0
 80203a0:	db07      	blt.n	80203b2 <_HCI_LE_Connection_Update+0x7e>
 80203a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80203a4:	6980      	ldr	r0, [r0, #24]
 80203a6:	7885      	ldrb	r5, [r0, #2]
 80203a8:	b12d      	cbz	r5, 80203b6 <_HCI_LE_Connection_Update+0x82>
 80203aa:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
 80203ae:	426d      	negs	r5, r5
 80203b0:	e001      	b.n	80203b6 <_HCI_LE_Connection_Update+0x82>
 80203b2:	f06f 050d 	mvn.w	r5, #13
 80203b6:	4620      	mov	r0, r4
 80203b8:	f7f9 f8f4 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80203bc:	e001      	b.n	80203c2 <_HCI_LE_Connection_Update+0x8e>
 80203be:	f06f 0501 	mvn.w	r5, #1
 80203c2:	4628      	mov	r0, r5
 80203c4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 80203c8:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Create_Connection:

080203cc <_HCI_LE_Create_Connection>:
 80203cc:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80203d0:	4615      	mov	r5, r2
 80203d2:	e9dd 8715 	ldrd	r8, r7, [sp, #84]	; 0x54
 80203d6:	e9dd b913 	ldrd	fp, r9, [sp, #76]	; 0x4c
 80203da:	460e      	mov	r6, r1
 80203dc:	221c      	movs	r2, #28
 80203de:	f242 010d 	movw	r1, #8205	; 0x200d
 80203e2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80203e6:	f7fe fe9f 	bl	801f128 <BuildCommandHeader>
 80203ea:	0004      	movs	r4, r0
 80203ec:	d046      	beq.n	802047c <_HCI_LE_Create_Connection+0xb0>
 80203ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80203f0:	6981      	ldr	r1, [r0, #24]
 80203f2:	0a30      	lsrs	r0, r6, #8
 80203f4:	f801 6f0b 	strb.w	r6, [r1, #11]!
 80203f8:	7048      	strb	r0, [r1, #1]
 80203fa:	708d      	strb	r5, [r1, #2]
 80203fc:	0a28      	lsrs	r0, r5, #8
 80203fe:	70c8      	strb	r0, [r1, #3]
 8020400:	9803      	ldr	r0, [sp, #12]
 8020402:	7108      	strb	r0, [r1, #4]
 8020404:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020406:	7148      	strb	r0, [r1, #5]
 8020408:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802040a:	6802      	ldr	r2, [r0, #0]
 802040c:	f8c1 2006 	str.w	r2, [r1, #6]
 8020410:	8880      	ldrh	r0, [r0, #4]
 8020412:	8148      	strh	r0, [r1, #10]
 8020414:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020416:	7308      	strb	r0, [r1, #12]
 8020418:	f881 a00d 	strb.w	sl, [r1, #13]
 802041c:	ea4f 201a 	mov.w	r0, sl, lsr #8
 8020420:	7388      	strb	r0, [r1, #14]
 8020422:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020424:	73c8      	strb	r0, [r1, #15]
 8020426:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020428:	4a17      	ldr	r2, [pc, #92]	; (8020488 <_HCI_LE_Create_Connection+0xbc>)
 802042a:	0a00      	lsrs	r0, r0, #8
 802042c:	7408      	strb	r0, [r1, #16]
 802042e:	f881 b011 	strb.w	fp, [r1, #17]
 8020432:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020436:	7488      	strb	r0, [r1, #18]
 8020438:	f881 9013 	strb.w	r9, [r1, #19]
 802043c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020440:	7508      	strb	r0, [r1, #20]
 8020442:	f881 8015 	strb.w	r8, [r1, #21]
 8020446:	ea4f 2018 	mov.w	r0, r8, lsr #8
 802044a:	7588      	strb	r0, [r1, #22]
 802044c:	75cf      	strb	r7, [r1, #23]
 802044e:	0a38      	lsrs	r0, r7, #8
 8020450:	7608      	strb	r0, [r1, #24]
 8020452:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8020454:	390b      	subs	r1, #11
 8020456:	4603      	mov	r3, r0
 8020458:	f7ff f91e 	bl	801f698 <HCISendPacket>
 802045c:	2800      	cmp	r0, #0
 802045e:	db07      	blt.n	8020470 <_HCI_LE_Create_Connection+0xa4>
 8020460:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8020462:	6980      	ldr	r0, [r0, #24]
 8020464:	7885      	ldrb	r5, [r0, #2]
 8020466:	b12d      	cbz	r5, 8020474 <_HCI_LE_Create_Connection+0xa8>
 8020468:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
 802046c:	426d      	negs	r5, r5
 802046e:	e001      	b.n	8020474 <_HCI_LE_Create_Connection+0xa8>
 8020470:	f06f 050d 	mvn.w	r5, #13
 8020474:	4620      	mov	r0, r4
 8020476:	f7f9 f895 	bl	80195a4 <ReleaseBluetoothStackInformation>
 802047a:	e001      	b.n	8020480 <_HCI_LE_Create_Connection+0xb4>
 802047c:	f06f 0501 	mvn.w	r5, #1
 8020480:	b004      	add	sp, #16
 8020482:	4628      	mov	r0, r5
 8020484:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8020488:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Encrypt:

0802048c <_HCI_LE_Encrypt>:
 802048c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020490:	4617      	mov	r7, r2
 8020492:	4688      	mov	r8, r1
 8020494:	461e      	mov	r6, r3
 8020496:	2223      	movs	r2, #35	; 0x23
 8020498:	f242 0117 	movw	r1, #8215	; 0x2017
 802049c:	f7fe fe44 	bl	801f128 <BuildCommandHeader>
 80204a0:	0005      	movs	r5, r0
 80204a2:	d028      	beq.n	80204f6 <_HCI_LE_Encrypt+0x6a>
 80204a4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80204a6:	2210      	movs	r2, #16
 80204a8:	4641      	mov	r1, r8
 80204aa:	6984      	ldr	r4, [r0, #24]
 80204ac:	f104 000b 	add.w	r0, r4, #11
 80204b0:	f7f3 fc67 	bl	8013d82 <__aeabi_memcpy>
 80204b4:	2210      	movs	r2, #16
 80204b6:	4639      	mov	r1, r7
 80204b8:	f104 001b 	add.w	r0, r4, #27
 80204bc:	f7f3 fc61 	bl	8013d82 <__aeabi_memcpy>
 80204c0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80204c2:	4a0f      	ldr	r2, [pc, #60]	; (8020500 <_HCI_LE_Encrypt+0x74>)
 80204c4:	4603      	mov	r3, r0
 80204c6:	4621      	mov	r1, r4
 80204c8:	f7ff f8e6 	bl	801f698 <HCISendPacket>
 80204cc:	2800      	cmp	r0, #0
 80204ce:	db0c      	blt.n	80204ea <_HCI_LE_Encrypt+0x5e>
 80204d0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80204d2:	2210      	movs	r2, #16
 80204d4:	6984      	ldr	r4, [r0, #24]
 80204d6:	4630      	mov	r0, r6
 80204d8:	1da1      	adds	r1, r4, #6
 80204da:	f7f3 fc52 	bl	8013d82 <__aeabi_memcpy>
 80204de:	7964      	ldrb	r4, [r4, #5]
 80204e0:	b12c      	cbz	r4, 80204ee <_HCI_LE_Encrypt+0x62>
 80204e2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80204e6:	4264      	negs	r4, r4
 80204e8:	e001      	b.n	80204ee <_HCI_LE_Encrypt+0x62>
 80204ea:	f06f 040d 	mvn.w	r4, #13
 80204ee:	4628      	mov	r0, r5
 80204f0:	f7f9 f858 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80204f4:	e001      	b.n	80204fa <_HCI_LE_Encrypt+0x6e>
 80204f6:	f06f 0401 	mvn.w	r4, #1
 80204fa:	4620      	mov	r0, r4
 80204fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020500:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Long_Term_Key_Request_Negative_Reply:

08020504 <_HCI_LE_Long_Term_Key_Request_Negative_Reply>:
 8020504:	b538      	push	{r3, r4, r5, lr}
 8020506:	460b      	mov	r3, r1
 8020508:	4601      	mov	r1, r0
 802050a:	f242 021b 	movw	r2, #8219	; 0x201b
 802050e:	4668      	mov	r0, sp
 8020510:	f7fe fdb4 	bl	801f07c <BuildAndSubmitCommandWord>
 8020514:	0004      	movs	r4, r0
 8020516:	d409      	bmi.n	802052c <_HCI_LE_Long_Term_Key_Request_Negative_Reply+0x28>
 8020518:	9800      	ldr	r0, [sp, #0]
 802051a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802051c:	6989      	ldr	r1, [r1, #24]
 802051e:	794c      	ldrb	r4, [r1, #5]
 8020520:	b114      	cbz	r4, 8020528 <_HCI_LE_Long_Term_Key_Request_Negative_Reply+0x24>
 8020522:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020526:	4264      	negs	r4, r4
 8020528:	f7f9 f83c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 802052c:	4620      	mov	r0, r4
 802052e:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_LE_Long_Term_Key_Request_Reply:

08020530 <_HCI_LE_Long_Term_Key_Request_Reply>:
 8020530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020534:	4617      	mov	r7, r2
 8020536:	460e      	mov	r6, r1
 8020538:	2215      	movs	r2, #21
 802053a:	f242 011a 	movw	r1, #8218	; 0x201a
 802053e:	f7fe fdf3 	bl	801f128 <BuildCommandHeader>
 8020542:	0005      	movs	r5, r0
 8020544:	d020      	beq.n	8020588 <_HCI_LE_Long_Term_Key_Request_Reply+0x58>
 8020546:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8020548:	2210      	movs	r2, #16
 802054a:	4639      	mov	r1, r7
 802054c:	6984      	ldr	r4, [r0, #24]
 802054e:	0a30      	lsrs	r0, r6, #8
 8020550:	72e6      	strb	r6, [r4, #11]
 8020552:	7320      	strb	r0, [r4, #12]
 8020554:	f104 000d 	add.w	r0, r4, #13
 8020558:	f7f3 fc13 	bl	8013d82 <__aeabi_memcpy>
 802055c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 802055e:	4a0d      	ldr	r2, [pc, #52]	; (8020594 <_HCI_LE_Long_Term_Key_Request_Reply+0x64>)
 8020560:	4603      	mov	r3, r0
 8020562:	4621      	mov	r1, r4
 8020564:	f7ff f898 	bl	801f698 <HCISendPacket>
 8020568:	2800      	cmp	r0, #0
 802056a:	db07      	blt.n	802057c <_HCI_LE_Long_Term_Key_Request_Reply+0x4c>
 802056c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 802056e:	6980      	ldr	r0, [r0, #24]
 8020570:	7944      	ldrb	r4, [r0, #5]
 8020572:	b12c      	cbz	r4, 8020580 <_HCI_LE_Long_Term_Key_Request_Reply+0x50>
 8020574:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020578:	4264      	negs	r4, r4
 802057a:	e001      	b.n	8020580 <_HCI_LE_Long_Term_Key_Request_Reply+0x50>
 802057c:	f06f 040d 	mvn.w	r4, #13
 8020580:	4628      	mov	r0, r5
 8020582:	f7f9 f80f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020586:	e001      	b.n	802058c <_HCI_LE_Long_Term_Key_Request_Reply+0x5c>
 8020588:	f06f 0401 	mvn.w	r4, #1
 802058c:	4620      	mov	r0, r4
 802058e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020592:	0000      	.short	0x0000
 8020594:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Rand:

08020598 <_HCI_LE_Rand>:
 8020598:	b538      	push	{r3, r4, r5, lr}
 802059a:	460d      	mov	r5, r1
 802059c:	4601      	mov	r1, r0
 802059e:	f242 0218 	movw	r2, #8216	; 0x2018
 80205a2:	4668      	mov	r0, sp
 80205a4:	f7fe fd28 	bl	801eff8 <BuildAndSubmitCommandNoData>
 80205a8:	0004      	movs	r4, r0
 80205aa:	d410      	bmi.n	80205ce <_HCI_LE_Rand+0x36>
 80205ac:	9900      	ldr	r1, [sp, #0]
 80205ae:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80205b0:	6980      	ldr	r0, [r0, #24]
 80205b2:	f8d0 2006 	ldr.w	r2, [r0, #6]
 80205b6:	602a      	str	r2, [r5, #0]
 80205b8:	f8d0 200a 	ldr.w	r2, [r0, #10]
 80205bc:	606a      	str	r2, [r5, #4]
 80205be:	7944      	ldrb	r4, [r0, #5]
 80205c0:	b114      	cbz	r4, 80205c8 <_HCI_LE_Rand+0x30>
 80205c2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80205c6:	4264      	negs	r4, r4
 80205c8:	4608      	mov	r0, r1
 80205ca:	f7f8 ffeb 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80205ce:	4620      	mov	r0, r4
 80205d0:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_LE_Read_Buffer_Size:

080205d2 <_HCI_LE_Read_Buffer_Size>:
 80205d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205d4:	460e      	mov	r6, r1
 80205d6:	4615      	mov	r5, r2
 80205d8:	4601      	mov	r1, r0
 80205da:	f242 0202 	movw	r2, #8194	; 0x2002
 80205de:	4668      	mov	r0, sp
 80205e0:	f7fe fd0a 	bl	801eff8 <BuildAndSubmitCommandNoData>
 80205e4:	0004      	movs	r4, r0
 80205e6:	d40e      	bmi.n	8020606 <_HCI_LE_Read_Buffer_Size+0x34>
 80205e8:	9900      	ldr	r1, [sp, #0]
 80205ea:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80205ec:	6980      	ldr	r0, [r0, #24]
 80205ee:	88c2      	ldrh	r2, [r0, #6]
 80205f0:	8032      	strh	r2, [r6, #0]
 80205f2:	7a02      	ldrb	r2, [r0, #8]
 80205f4:	702a      	strb	r2, [r5, #0]
 80205f6:	7944      	ldrb	r4, [r0, #5]
 80205f8:	b114      	cbz	r4, 8020600 <_HCI_LE_Read_Buffer_Size+0x2e>
 80205fa:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80205fe:	4264      	negs	r4, r4
 8020600:	4608      	mov	r0, r1
 8020602:	f7f8 ffcf 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020606:	4620      	mov	r0, r4
 8020608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i._HCI_LE_Read_White_List_Size:

0802060a <_HCI_LE_Read_White_List_Size>:
 802060a:	b538      	push	{r3, r4, r5, lr}
 802060c:	460d      	mov	r5, r1
 802060e:	4601      	mov	r1, r0
 8020610:	f242 020f 	movw	r2, #8207	; 0x200f
 8020614:	4668      	mov	r0, sp
 8020616:	f7fe fcef 	bl	801eff8 <BuildAndSubmitCommandNoData>
 802061a:	0004      	movs	r4, r0
 802061c:	d40c      	bmi.n	8020638 <_HCI_LE_Read_White_List_Size+0x2e>
 802061e:	9900      	ldr	r1, [sp, #0]
 8020620:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020622:	6980      	ldr	r0, [r0, #24]
 8020624:	7982      	ldrb	r2, [r0, #6]
 8020626:	702a      	strb	r2, [r5, #0]
 8020628:	7944      	ldrb	r4, [r0, #5]
 802062a:	b114      	cbz	r4, 8020632 <_HCI_LE_Read_White_List_Size+0x28>
 802062c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020630:	4264      	negs	r4, r4
 8020632:	4608      	mov	r0, r1
 8020634:	f7f8 ffb6 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020638:	4620      	mov	r0, r4
 802063a:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_LE_Remove_Device_From_White_List:

0802063c <_HCI_LE_Remove_Device_From_White_List>:
 802063c:	b517      	push	{r0, r1, r2, r4, lr}
 802063e:	b083      	sub	sp, #12
 8020640:	2306      	movs	r3, #6
 8020642:	e9cd 3200 	strd	r3, r2, [sp]
 8020646:	4601      	mov	r1, r0
 8020648:	ab04      	add	r3, sp, #16
 802064a:	f242 0212 	movw	r2, #8210	; 0x2012
 802064e:	a802      	add	r0, sp, #8
 8020650:	f7fe fc90 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 8020654:	0004      	movs	r4, r0
 8020656:	d409      	bmi.n	802066c <_HCI_LE_Remove_Device_From_White_List+0x30>
 8020658:	9802      	ldr	r0, [sp, #8]
 802065a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802065c:	6989      	ldr	r1, [r1, #24]
 802065e:	794c      	ldrb	r4, [r1, #5]
 8020660:	b114      	cbz	r4, 8020668 <_HCI_LE_Remove_Device_From_White_List+0x2c>
 8020662:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020666:	4264      	negs	r4, r4
 8020668:	f7f8 ff9c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 802066c:	b006      	add	sp, #24
 802066e:	4620      	mov	r0, r4
 8020670:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_LE_Set_Advertise_Enable:

08020674 <_HCI_LE_Set_Advertise_Enable>:
 8020674:	b538      	push	{r3, r4, r5, lr}
 8020676:	460c      	mov	r4, r1
 8020678:	4605      	mov	r5, r0
 802067a:	490c      	ldr	r1, [pc, #48]	; (80206ac <_HCI_LE_Set_Advertise_Enable+0x38>)
 802067c:	480c      	ldr	r0, [pc, #48]	; (80206b0 <_HCI_LE_Set_Advertise_Enable+0x3c>)
 802067e:	f7ff fd36 	bl	80200ee <SetEventHandler>
 8020682:	4623      	mov	r3, r4
 8020684:	f242 020a 	movw	r2, #8202	; 0x200a
 8020688:	4629      	mov	r1, r5
 802068a:	4668      	mov	r0, sp
 802068c:	f7fe fc4a 	bl	801ef24 <BuildAndSubmitCommandByte>
 8020690:	0004      	movs	r4, r0
 8020692:	d409      	bmi.n	80206a8 <_HCI_LE_Set_Advertise_Enable+0x34>
 8020694:	9800      	ldr	r0, [sp, #0]
 8020696:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020698:	6989      	ldr	r1, [r1, #24]
 802069a:	794c      	ldrb	r4, [r1, #5]
 802069c:	b114      	cbz	r4, 80206a4 <_HCI_LE_Set_Advertise_Enable+0x30>
 802069e:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80206a2:	4264      	negs	r4, r4
 80206a4:	f7f8 ff7e 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80206a8:	4620      	mov	r0, r4
 80206aa:	bd38      	pop	{r3, r4, r5, pc}
 80206ac:	0801f569 	.word	0x0801f569
 80206b0:	20000c5c 	.word	0x20000c5c

Disassembly of section i._HCI_LE_Set_Advertising_Data:

080206b4 <_HCI_LE_Set_Advertising_Data>:
 80206b4:	b517      	push	{r0, r1, r2, r4, lr}
 80206b6:	b083      	sub	sp, #12
 80206b8:	231f      	movs	r3, #31
 80206ba:	e9cd 3200 	strd	r3, r2, [sp]
 80206be:	4601      	mov	r1, r0
 80206c0:	ab04      	add	r3, sp, #16
 80206c2:	f242 0208 	movw	r2, #8200	; 0x2008
 80206c6:	a802      	add	r0, sp, #8
 80206c8:	f7fe fc54 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 80206cc:	0004      	movs	r4, r0
 80206ce:	d409      	bmi.n	80206e4 <_HCI_LE_Set_Advertising_Data+0x30>
 80206d0:	9802      	ldr	r0, [sp, #8]
 80206d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80206d4:	6989      	ldr	r1, [r1, #24]
 80206d6:	794c      	ldrb	r4, [r1, #5]
 80206d8:	b114      	cbz	r4, 80206e0 <_HCI_LE_Set_Advertising_Data+0x2c>
 80206da:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80206de:	4264      	negs	r4, r4
 80206e0:	f7f8 ff60 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80206e4:	b006      	add	sp, #24
 80206e6:	4620      	mov	r0, r4
 80206e8:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_LE_Set_Advertising_Parameters:

080206ec <_HCI_LE_Set_Advertising_Parameters>:
 80206ec:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80206f0:	4615      	mov	r5, r2
 80206f2:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 80206f6:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80206fa:	460e      	mov	r6, r1
 80206fc:	461f      	mov	r7, r3
 80206fe:	2212      	movs	r2, #18
 8020700:	f242 0106 	movw	r1, #8198	; 0x2006
 8020704:	f7fe fd10 	bl	801f128 <BuildCommandHeader>
 8020708:	0004      	movs	r4, r0
 802070a:	d02c      	beq.n	8020766 <_HCI_LE_Set_Advertising_Parameters+0x7a>
 802070c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802070e:	6981      	ldr	r1, [r0, #24]
 8020710:	0a30      	lsrs	r0, r6, #8
 8020712:	72ce      	strb	r6, [r1, #11]
 8020714:	7308      	strb	r0, [r1, #12]
 8020716:	734d      	strb	r5, [r1, #13]
 8020718:	0a28      	lsrs	r0, r5, #8
 802071a:	7388      	strb	r0, [r1, #14]
 802071c:	73cf      	strb	r7, [r1, #15]
 802071e:	f881 a010 	strb.w	sl, [r1, #16]
 8020722:	f881 b011 	strb.w	fp, [r1, #17]
 8020726:	f8d8 2000 	ldr.w	r2, [r8]
 802072a:	f8c1 2012 	str.w	r2, [r1, #18]
 802072e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8020732:	82c8      	strh	r0, [r1, #22]
 8020734:	f881 9018 	strb.w	r9, [r1, #24]
 8020738:	980e      	ldr	r0, [sp, #56]	; 0x38
 802073a:	7648      	strb	r0, [r1, #25]
 802073c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802073e:	4a0c      	ldr	r2, [pc, #48]	; (8020770 <_HCI_LE_Set_Advertising_Parameters+0x84>)
 8020740:	4603      	mov	r3, r0
 8020742:	f7fe ffa9 	bl	801f698 <HCISendPacket>
 8020746:	2800      	cmp	r0, #0
 8020748:	db07      	blt.n	802075a <_HCI_LE_Set_Advertising_Parameters+0x6e>
 802074a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802074c:	6980      	ldr	r0, [r0, #24]
 802074e:	7945      	ldrb	r5, [r0, #5]
 8020750:	b12d      	cbz	r5, 802075e <_HCI_LE_Set_Advertising_Parameters+0x72>
 8020752:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
 8020756:	426d      	negs	r5, r5
 8020758:	e001      	b.n	802075e <_HCI_LE_Set_Advertising_Parameters+0x72>
 802075a:	f06f 050d 	mvn.w	r5, #13
 802075e:	4620      	mov	r0, r4
 8020760:	f7f8 ff20 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020764:	e001      	b.n	802076a <_HCI_LE_Set_Advertising_Parameters+0x7e>
 8020766:	f06f 0501 	mvn.w	r5, #1
 802076a:	4628      	mov	r0, r5
 802076c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8020770:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Set_Random_Address:

08020774 <_HCI_LE_Set_Random_Address>:
 8020774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020776:	460b      	mov	r3, r1
 8020778:	2100      	movs	r1, #0
 802077a:	9100      	str	r1, [sp, #0]
 802077c:	9101      	str	r1, [sp, #4]
 802077e:	9102      	str	r1, [sp, #8]
 8020780:	4601      	mov	r1, r0
 8020782:	f242 0205 	movw	r2, #8197	; 0x2005
 8020786:	a803      	add	r0, sp, #12
 8020788:	f7fe fb80 	bl	801ee8c <BuildAndSubmitCommandBD_ADDRByteVariable>
 802078c:	0004      	movs	r4, r0
 802078e:	d409      	bmi.n	80207a4 <_HCI_LE_Set_Random_Address+0x30>
 8020790:	9803      	ldr	r0, [sp, #12]
 8020792:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020794:	6989      	ldr	r1, [r1, #24]
 8020796:	794c      	ldrb	r4, [r1, #5]
 8020798:	b114      	cbz	r4, 80207a0 <_HCI_LE_Set_Random_Address+0x2c>
 802079a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 802079e:	4264      	negs	r4, r4
 80207a0:	f7f8 ff00 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80207a4:	b004      	add	sp, #16
 80207a6:	4620      	mov	r0, r4
 80207a8:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_LE_Set_Scan_Enable:

080207ac <_HCI_LE_Set_Scan_Enable>:
 80207ac:	b517      	push	{r0, r1, r2, r4, lr}
 80207ae:	4604      	mov	r4, r0
 80207b0:	b083      	sub	sp, #12
 80207b2:	490f      	ldr	r1, [pc, #60]	; (80207f0 <_HCI_LE_Set_Scan_Enable+0x44>)
 80207b4:	480f      	ldr	r0, [pc, #60]	; (80207f4 <_HCI_LE_Set_Scan_Enable+0x48>)
 80207b6:	f7ff fc9a 	bl	80200ee <SetEventHandler>
 80207ba:	aa05      	add	r2, sp, #20
 80207bc:	2001      	movs	r0, #1
 80207be:	e9cd 0200 	strd	r0, r2, [sp]
 80207c2:	ab04      	add	r3, sp, #16
 80207c4:	f242 020c 	movw	r2, #8204	; 0x200c
 80207c8:	4621      	mov	r1, r4
 80207ca:	a802      	add	r0, sp, #8
 80207cc:	f7fe fbd2 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 80207d0:	0004      	movs	r4, r0
 80207d2:	d409      	bmi.n	80207e8 <_HCI_LE_Set_Scan_Enable+0x3c>
 80207d4:	9802      	ldr	r0, [sp, #8]
 80207d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80207d8:	6989      	ldr	r1, [r1, #24]
 80207da:	794c      	ldrb	r4, [r1, #5]
 80207dc:	b114      	cbz	r4, 80207e4 <_HCI_LE_Set_Scan_Enable+0x38>
 80207de:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80207e2:	4264      	negs	r4, r4
 80207e4:	f7f8 fede 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80207e8:	b006      	add	sp, #24
 80207ea:	4620      	mov	r0, r4
 80207ec:	bd10      	pop	{r4, pc}
 80207ee:	0000      	.short	0x0000
 80207f0:	0801f5a7 	.word	0x0801f5a7
 80207f4:	20000c60 	.word	0x20000c60

Disassembly of section i._HCI_LE_Set_Scan_Parameters:

080207f8 <_HCI_LE_Set_Scan_Parameters>:
 80207f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80207fc:	460f      	mov	r7, r1
 80207fe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8020802:	4604      	mov	r4, r0
 8020804:	461d      	mov	r5, r3
 8020806:	4616      	mov	r6, r2
 8020808:	4919      	ldr	r1, [pc, #100]	; (8020870 <_HCI_LE_Set_Scan_Parameters+0x78>)
 802080a:	481a      	ldr	r0, [pc, #104]	; (8020874 <_HCI_LE_Set_Scan_Parameters+0x7c>)
 802080c:	f7ff fc6f 	bl	80200ee <SetEventHandler>
 8020810:	220a      	movs	r2, #10
 8020812:	f242 010b 	movw	r1, #8203	; 0x200b
 8020816:	4620      	mov	r0, r4
 8020818:	f7fe fc86 	bl	801f128 <BuildCommandHeader>
 802081c:	0004      	movs	r4, r0
 802081e:	d021      	beq.n	8020864 <_HCI_LE_Set_Scan_Parameters+0x6c>
 8020820:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8020822:	4a15      	ldr	r2, [pc, #84]	; (8020878 <_HCI_LE_Set_Scan_Parameters+0x80>)
 8020824:	6981      	ldr	r1, [r0, #24]
 8020826:	0a30      	lsrs	r0, r6, #8
 8020828:	72cf      	strb	r7, [r1, #11]
 802082a:	730e      	strb	r6, [r1, #12]
 802082c:	7348      	strb	r0, [r1, #13]
 802082e:	738d      	strb	r5, [r1, #14]
 8020830:	0a28      	lsrs	r0, r5, #8
 8020832:	73c8      	strb	r0, [r1, #15]
 8020834:	f881 8010 	strb.w	r8, [r1, #16]
 8020838:	f881 9011 	strb.w	r9, [r1, #17]
 802083c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802083e:	4603      	mov	r3, r0
 8020840:	f7fe ff2a 	bl	801f698 <HCISendPacket>
 8020844:	2800      	cmp	r0, #0
 8020846:	db07      	blt.n	8020858 <_HCI_LE_Set_Scan_Parameters+0x60>
 8020848:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802084a:	6980      	ldr	r0, [r0, #24]
 802084c:	7945      	ldrb	r5, [r0, #5]
 802084e:	b12d      	cbz	r5, 802085c <_HCI_LE_Set_Scan_Parameters+0x64>
 8020850:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
 8020854:	426d      	negs	r5, r5
 8020856:	e001      	b.n	802085c <_HCI_LE_Set_Scan_Parameters+0x64>
 8020858:	f06f 050d 	mvn.w	r5, #13
 802085c:	4620      	mov	r0, r4
 802085e:	f7f8 fea1 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020862:	e001      	b.n	8020868 <_HCI_LE_Set_Scan_Parameters+0x70>
 8020864:	f06f 0501 	mvn.w	r5, #1
 8020868:	4628      	mov	r0, r5
 802086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802086e:	0000      	.short	0x0000
 8020870:	0801f5a7 	.word	0x0801f5a7
 8020874:	20000c60 	.word	0x20000c60
 8020878:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_LE_Set_Scan_Response_Data:

0802087c <_HCI_LE_Set_Scan_Response_Data>:
 802087c:	b517      	push	{r0, r1, r2, r4, lr}
 802087e:	b083      	sub	sp, #12
 8020880:	231f      	movs	r3, #31
 8020882:	e9cd 3200 	strd	r3, r2, [sp]
 8020886:	4601      	mov	r1, r0
 8020888:	ab04      	add	r3, sp, #16
 802088a:	f242 0209 	movw	r2, #8201	; 0x2009
 802088e:	a802      	add	r0, sp, #8
 8020890:	f7fe fb70 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 8020894:	0004      	movs	r4, r0
 8020896:	d409      	bmi.n	80208ac <_HCI_LE_Set_Scan_Response_Data+0x30>
 8020898:	9802      	ldr	r0, [sp, #8]
 802089a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802089c:	6989      	ldr	r1, [r1, #24]
 802089e:	794c      	ldrb	r4, [r1, #5]
 80208a0:	b114      	cbz	r4, 80208a8 <_HCI_LE_Set_Scan_Response_Data+0x2c>
 80208a2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80208a6:	4264      	negs	r4, r4
 80208a8:	f7f8 fe7c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80208ac:	b006      	add	sp, #24
 80208ae:	4620      	mov	r0, r4
 80208b0:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_LE_Start_Encryption:

080208b4 <_HCI_LE_Start_Encryption>:
 80208b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80208b8:	4690      	mov	r8, r2
 80208ba:	460f      	mov	r7, r1
 80208bc:	461e      	mov	r6, r3
 80208be:	221f      	movs	r2, #31
 80208c0:	f242 0119 	movw	r1, #8217	; 0x2019
 80208c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80208c8:	f7fe fc2e 	bl	801f128 <BuildCommandHeader>
 80208cc:	0005      	movs	r5, r0
 80208ce:	d02b      	beq.n	8020928 <_HCI_LE_Start_Encryption+0x74>
 80208d0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80208d2:	2210      	movs	r2, #16
 80208d4:	6984      	ldr	r4, [r0, #24]
 80208d6:	0a38      	lsrs	r0, r7, #8
 80208d8:	72e7      	strb	r7, [r4, #11]
 80208da:	7320      	strb	r0, [r4, #12]
 80208dc:	f8d8 1000 	ldr.w	r1, [r8]
 80208e0:	f8c4 100d 	str.w	r1, [r4, #13]
 80208e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80208e8:	f8c4 0011 	str.w	r0, [r4, #17]
 80208ec:	7566      	strb	r6, [r4, #21]
 80208ee:	0a30      	lsrs	r0, r6, #8
 80208f0:	75a0      	strb	r0, [r4, #22]
 80208f2:	4649      	mov	r1, r9
 80208f4:	f104 0017 	add.w	r0, r4, #23
 80208f8:	f7f3 fa43 	bl	8013d82 <__aeabi_memcpy>
 80208fc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80208fe:	4a0d      	ldr	r2, [pc, #52]	; (8020934 <_HCI_LE_Start_Encryption+0x80>)
 8020900:	4603      	mov	r3, r0
 8020902:	4621      	mov	r1, r4
 8020904:	f7fe fec8 	bl	801f698 <HCISendPacket>
 8020908:	2800      	cmp	r0, #0
 802090a:	db07      	blt.n	802091c <_HCI_LE_Start_Encryption+0x68>
 802090c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 802090e:	6980      	ldr	r0, [r0, #24]
 8020910:	7884      	ldrb	r4, [r0, #2]
 8020912:	b12c      	cbz	r4, 8020920 <_HCI_LE_Start_Encryption+0x6c>
 8020914:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020918:	4264      	negs	r4, r4
 802091a:	e001      	b.n	8020920 <_HCI_LE_Start_Encryption+0x6c>
 802091c:	f06f 040d 	mvn.w	r4, #13
 8020920:	4628      	mov	r0, r5
 8020922:	f7f8 fe3f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020926:	e001      	b.n	802092c <_HCI_LE_Start_Encryption+0x78>
 8020928:	f06f 0401 	mvn.w	r4, #1
 802092c:	4620      	mov	r0, r4
 802092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020932:	0000      	.short	0x0000
 8020934:	0802010d 	.word	0x0802010d

Disassembly of section i._HCI_Link_Key_Request_Negative_Reply:

08020938 <_HCI_Link_Key_Request_Negative_Reply>:
 8020938:	b51c      	push	{r2, r3, r4, lr}
 802093a:	460b      	mov	r3, r1
 802093c:	2100      	movs	r1, #0
 802093e:	9100      	str	r1, [sp, #0]
 8020940:	4601      	mov	r1, r0
 8020942:	f240 420c 	movw	r2, #1036	; 0x40c
 8020946:	a801      	add	r0, sp, #4
 8020948:	f7fe fa6c 	bl	801ee24 <BuildAndSubmitCommandBD_ADDRByte>
 802094c:	0004      	movs	r4, r0
 802094e:	d409      	bmi.n	8020964 <_HCI_Link_Key_Request_Negative_Reply+0x2c>
 8020950:	9801      	ldr	r0, [sp, #4]
 8020952:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020954:	6989      	ldr	r1, [r1, #24]
 8020956:	794c      	ldrb	r4, [r1, #5]
 8020958:	b114      	cbz	r4, 8020960 <_HCI_Link_Key_Request_Negative_Reply+0x28>
 802095a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 802095e:	4264      	negs	r4, r4
 8020960:	f7f8 fe20 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020964:	4620      	mov	r0, r4
 8020966:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i._HCI_PIN_Code_Request_Negative_Reply:

08020968 <_HCI_PIN_Code_Request_Negative_Reply>:
 8020968:	b51c      	push	{r2, r3, r4, lr}
 802096a:	460b      	mov	r3, r1
 802096c:	2100      	movs	r1, #0
 802096e:	9100      	str	r1, [sp, #0]
 8020970:	4601      	mov	r1, r0
 8020972:	f240 420e 	movw	r2, #1038	; 0x40e
 8020976:	a801      	add	r0, sp, #4
 8020978:	f7fe fa54 	bl	801ee24 <BuildAndSubmitCommandBD_ADDRByte>
 802097c:	0004      	movs	r4, r0
 802097e:	d409      	bmi.n	8020994 <_HCI_PIN_Code_Request_Negative_Reply+0x2c>
 8020980:	9801      	ldr	r0, [sp, #4]
 8020982:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020984:	6989      	ldr	r1, [r1, #24]
 8020986:	794c      	ldrb	r4, [r1, #5]
 8020988:	b114      	cbz	r4, 8020990 <_HCI_PIN_Code_Request_Negative_Reply+0x28>
 802098a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 802098e:	4264      	negs	r4, r4
 8020990:	f7f8 fe08 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020994:	4620      	mov	r0, r4
 8020996:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i._HCI_Read_BD_ADDR:

08020998 <_HCI_Read_BD_ADDR>:
 8020998:	b538      	push	{r3, r4, r5, lr}
 802099a:	460d      	mov	r5, r1
 802099c:	4601      	mov	r1, r0
 802099e:	f241 0209 	movw	r2, #4105	; 0x1009
 80209a2:	4668      	mov	r0, sp
 80209a4:	f7fe fb28 	bl	801eff8 <BuildAndSubmitCommandNoData>
 80209a8:	0004      	movs	r4, r0
 80209aa:	d40f      	bmi.n	80209cc <_HCI_Read_BD_ADDR+0x34>
 80209ac:	9900      	ldr	r1, [sp, #0]
 80209ae:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80209b0:	6980      	ldr	r0, [r0, #24]
 80209b2:	f8d0 2006 	ldr.w	r2, [r0, #6]
 80209b6:	602a      	str	r2, [r5, #0]
 80209b8:	8942      	ldrh	r2, [r0, #10]
 80209ba:	80aa      	strh	r2, [r5, #4]
 80209bc:	7944      	ldrb	r4, [r0, #5]
 80209be:	b114      	cbz	r4, 80209c6 <_HCI_Read_BD_ADDR+0x2e>
 80209c0:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 80209c4:	4264      	negs	r4, r4
 80209c6:	4608      	mov	r0, r1
 80209c8:	f7f8 fdec 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80209cc:	4620      	mov	r0, r4
 80209ce:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Read_Buffer_Size:

080209d0 <_HCI_Read_Buffer_Size>:
 80209d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209d4:	460e      	mov	r6, r1
 80209d6:	4615      	mov	r5, r2
 80209d8:	4601      	mov	r1, r0
 80209da:	461c      	mov	r4, r3
 80209dc:	f241 0205 	movw	r2, #4101	; 0x1005
 80209e0:	4668      	mov	r0, sp
 80209e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80209e6:	f7fe fb07 	bl	801eff8 <BuildAndSubmitCommandNoData>
 80209ea:	0007      	movs	r7, r0
 80209ec:	d415      	bmi.n	8020a1a <_HCI_Read_Buffer_Size+0x4a>
 80209ee:	9900      	ldr	r1, [sp, #0]
 80209f0:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80209f2:	6980      	ldr	r0, [r0, #24]
 80209f4:	88c2      	ldrh	r2, [r0, #6]
 80209f6:	8032      	strh	r2, [r6, #0]
 80209f8:	7a02      	ldrb	r2, [r0, #8]
 80209fa:	702a      	strb	r2, [r5, #0]
 80209fc:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8020a00:	8022      	strh	r2, [r4, #0]
 8020a02:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8020a06:	f8a8 3000 	strh.w	r3, [r8]
 8020a0a:	7947      	ldrb	r7, [r0, #5]
 8020a0c:	b117      	cbz	r7, 8020a14 <_HCI_Read_Buffer_Size+0x44>
 8020a0e:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8020a12:	427f      	negs	r7, r7
 8020a14:	4608      	mov	r0, r1
 8020a16:	f7f8 fdc5 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020a1a:	4638      	mov	r0, r7
 8020a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i._HCI_Read_Class_of_Device:

08020a20 <_HCI_Read_Class_of_Device>:
 8020a20:	b538      	push	{r3, r4, r5, lr}
 8020a22:	460d      	mov	r5, r1
 8020a24:	4601      	mov	r1, r0
 8020a26:	f640 4223 	movw	r2, #3107	; 0xc23
 8020a2a:	4668      	mov	r0, sp
 8020a2c:	f7fe fae4 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020a30:	0004      	movs	r4, r0
 8020a32:	d40e      	bmi.n	8020a52 <_HCI_Read_Class_of_Device+0x32>
 8020a34:	9900      	ldr	r1, [sp, #0]
 8020a36:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020a38:	6980      	ldr	r0, [r0, #24]
 8020a3a:	88c2      	ldrh	r2, [r0, #6]
 8020a3c:	802a      	strh	r2, [r5, #0]
 8020a3e:	7a02      	ldrb	r2, [r0, #8]
 8020a40:	70aa      	strb	r2, [r5, #2]
 8020a42:	7944      	ldrb	r4, [r0, #5]
 8020a44:	b114      	cbz	r4, 8020a4c <_HCI_Read_Class_of_Device+0x2c>
 8020a46:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020a4a:	4264      	negs	r4, r4
 8020a4c:	4608      	mov	r0, r1
 8020a4e:	f7f8 fda9 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020a52:	4620      	mov	r0, r4
 8020a54:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Read_LE_Host_Supported:

08020a56 <_HCI_Read_LE_Host_Supported>:
 8020a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a58:	460e      	mov	r6, r1
 8020a5a:	4615      	mov	r5, r2
 8020a5c:	4601      	mov	r1, r0
 8020a5e:	f640 426c 	movw	r2, #3180	; 0xc6c
 8020a62:	4668      	mov	r0, sp
 8020a64:	f7fe fac8 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020a68:	0004      	movs	r4, r0
 8020a6a:	d40e      	bmi.n	8020a8a <_HCI_Read_LE_Host_Supported+0x34>
 8020a6c:	9900      	ldr	r1, [sp, #0]
 8020a6e:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020a70:	6980      	ldr	r0, [r0, #24]
 8020a72:	7982      	ldrb	r2, [r0, #6]
 8020a74:	7032      	strb	r2, [r6, #0]
 8020a76:	79c2      	ldrb	r2, [r0, #7]
 8020a78:	702a      	strb	r2, [r5, #0]
 8020a7a:	7944      	ldrb	r4, [r0, #5]
 8020a7c:	b114      	cbz	r4, 8020a84 <_HCI_Read_LE_Host_Supported+0x2e>
 8020a7e:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020a82:	4264      	negs	r4, r4
 8020a84:	4608      	mov	r0, r1
 8020a86:	f7f8 fd8d 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020a8a:	4620      	mov	r0, r4
 8020a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i._HCI_Read_Local_Supported_Commands:

08020a8e <_HCI_Read_Local_Supported_Commands>:
 8020a8e:	b538      	push	{r3, r4, r5, lr}
 8020a90:	460d      	mov	r5, r1
 8020a92:	4601      	mov	r1, r0
 8020a94:	f241 0202 	movw	r2, #4098	; 0x1002
 8020a98:	4668      	mov	r0, sp
 8020a9a:	f7fe faad 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020a9e:	0004      	movs	r4, r0
 8020aa0:	d40f      	bmi.n	8020ac2 <_HCI_Read_Local_Supported_Commands+0x34>
 8020aa2:	9800      	ldr	r0, [sp, #0]
 8020aa4:	2240      	movs	r2, #64	; 0x40
 8020aa6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8020aa8:	6984      	ldr	r4, [r0, #24]
 8020aaa:	4628      	mov	r0, r5
 8020aac:	1da1      	adds	r1, r4, #6
 8020aae:	f7f3 f968 	bl	8013d82 <__aeabi_memcpy>
 8020ab2:	7964      	ldrb	r4, [r4, #5]
 8020ab4:	b114      	cbz	r4, 8020abc <_HCI_Read_Local_Supported_Commands+0x2e>
 8020ab6:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020aba:	4264      	negs	r4, r4
 8020abc:	9800      	ldr	r0, [sp, #0]
 8020abe:	f7f8 fd71 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020ac2:	4620      	mov	r0, r4
 8020ac4:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Read_Local_Supported_Features:

08020ac6 <_HCI_Read_Local_Supported_Features>:
 8020ac6:	b538      	push	{r3, r4, r5, lr}
 8020ac8:	460d      	mov	r5, r1
 8020aca:	4601      	mov	r1, r0
 8020acc:	f241 0203 	movw	r2, #4099	; 0x1003
 8020ad0:	4668      	mov	r0, sp
 8020ad2:	f7fe fa91 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020ad6:	0004      	movs	r4, r0
 8020ad8:	d410      	bmi.n	8020afc <_HCI_Read_Local_Supported_Features+0x36>
 8020ada:	9900      	ldr	r1, [sp, #0]
 8020adc:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020ade:	6980      	ldr	r0, [r0, #24]
 8020ae0:	f8d0 2006 	ldr.w	r2, [r0, #6]
 8020ae4:	602a      	str	r2, [r5, #0]
 8020ae6:	f8d0 200a 	ldr.w	r2, [r0, #10]
 8020aea:	606a      	str	r2, [r5, #4]
 8020aec:	7944      	ldrb	r4, [r0, #5]
 8020aee:	b114      	cbz	r4, 8020af6 <_HCI_Read_Local_Supported_Features+0x30>
 8020af0:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020af4:	4264      	negs	r4, r4
 8020af6:	4608      	mov	r0, r1
 8020af8:	f7f8 fd54 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020afc:	4620      	mov	r0, r4
 8020afe:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Read_Local_Version_Information:

08020b00 <_HCI_Read_Local_Version_Information>:
 8020b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b04:	460e      	mov	r6, r1
 8020b06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8020b0a:	4615      	mov	r5, r2
 8020b0c:	4601      	mov	r1, r0
 8020b0e:	461c      	mov	r4, r3
 8020b10:	f241 0201 	movw	r2, #4097	; 0x1001
 8020b14:	4668      	mov	r0, sp
 8020b16:	f7fe fa6f 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020b1a:	0007      	movs	r7, r0
 8020b1c:	d417      	bmi.n	8020b4e <_HCI_Read_Local_Version_Information+0x4e>
 8020b1e:	9900      	ldr	r1, [sp, #0]
 8020b20:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020b22:	6980      	ldr	r0, [r0, #24]
 8020b24:	7982      	ldrb	r2, [r0, #6]
 8020b26:	7032      	strb	r2, [r6, #0]
 8020b28:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8020b2c:	802a      	strh	r2, [r5, #0]
 8020b2e:	7a42      	ldrb	r2, [r0, #9]
 8020b30:	7022      	strb	r2, [r4, #0]
 8020b32:	8943      	ldrh	r3, [r0, #10]
 8020b34:	f8a8 3000 	strh.w	r3, [r8]
 8020b38:	8983      	ldrh	r3, [r0, #12]
 8020b3a:	f8a9 3000 	strh.w	r3, [r9]
 8020b3e:	7947      	ldrb	r7, [r0, #5]
 8020b40:	b117      	cbz	r7, 8020b48 <_HCI_Read_Local_Version_Information+0x48>
 8020b42:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 8020b46:	427f      	negs	r7, r7
 8020b48:	4608      	mov	r0, r1
 8020b4a:	f7f8 fd2b 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020b4e:	4638      	mov	r0, r7
 8020b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i._HCI_Read_Remote_Extended_Features:

08020b54 <_HCI_Read_Remote_Extended_Features>:
 8020b54:	b51c      	push	{r2, r3, r4, lr}
 8020b56:	460b      	mov	r3, r1
 8020b58:	9200      	str	r2, [sp, #0]
 8020b5a:	4601      	mov	r1, r0
 8020b5c:	f240 421c 	movw	r2, #1052	; 0x41c
 8020b60:	a801      	add	r0, sp, #4
 8020b62:	f7fe fab5 	bl	801f0d0 <BuildAndSubmitCommandWordByte>
 8020b66:	0004      	movs	r4, r0
 8020b68:	d409      	bmi.n	8020b7e <_HCI_Read_Remote_Extended_Features+0x2a>
 8020b6a:	9801      	ldr	r0, [sp, #4]
 8020b6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020b6e:	6989      	ldr	r1, [r1, #24]
 8020b70:	788c      	ldrb	r4, [r1, #2]
 8020b72:	b114      	cbz	r4, 8020b7a <_HCI_Read_Remote_Extended_Features+0x26>
 8020b74:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020b78:	4264      	negs	r4, r4
 8020b7a:	f7f8 fd13 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020b7e:	4620      	mov	r0, r4
 8020b80:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i._HCI_Read_Scan_Enable:

08020b82 <_HCI_Read_Scan_Enable>:
 8020b82:	b538      	push	{r3, r4, r5, lr}
 8020b84:	460d      	mov	r5, r1
 8020b86:	4601      	mov	r1, r0
 8020b88:	f640 4219 	movw	r2, #3097	; 0xc19
 8020b8c:	4668      	mov	r0, sp
 8020b8e:	f7fe fa33 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020b92:	0004      	movs	r4, r0
 8020b94:	d40c      	bmi.n	8020bb0 <_HCI_Read_Scan_Enable+0x2e>
 8020b96:	9900      	ldr	r1, [sp, #0]
 8020b98:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020b9a:	6980      	ldr	r0, [r0, #24]
 8020b9c:	7982      	ldrb	r2, [r0, #6]
 8020b9e:	702a      	strb	r2, [r5, #0]
 8020ba0:	7944      	ldrb	r4, [r0, #5]
 8020ba2:	b114      	cbz	r4, 8020baa <_HCI_Read_Scan_Enable+0x28>
 8020ba4:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020ba8:	4264      	negs	r4, r4
 8020baa:	4608      	mov	r0, r1
 8020bac:	f7f8 fcfa 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020bb0:	4620      	mov	r0, r4
 8020bb2:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Read_Simple_Pairing_Mode:

08020bb4 <_HCI_Read_Simple_Pairing_Mode>:
 8020bb4:	b538      	push	{r3, r4, r5, lr}
 8020bb6:	460d      	mov	r5, r1
 8020bb8:	4601      	mov	r1, r0
 8020bba:	f640 4255 	movw	r2, #3157	; 0xc55
 8020bbe:	4668      	mov	r0, sp
 8020bc0:	f7fe fa1a 	bl	801eff8 <BuildAndSubmitCommandNoData>
 8020bc4:	0004      	movs	r4, r0
 8020bc6:	d40c      	bmi.n	8020be2 <_HCI_Read_Simple_Pairing_Mode+0x2e>
 8020bc8:	9900      	ldr	r1, [sp, #0]
 8020bca:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8020bcc:	6980      	ldr	r0, [r0, #24]
 8020bce:	7982      	ldrb	r2, [r0, #6]
 8020bd0:	702a      	strb	r2, [r5, #0]
 8020bd2:	7944      	ldrb	r4, [r0, #5]
 8020bd4:	b114      	cbz	r4, 8020bdc <_HCI_Read_Simple_Pairing_Mode+0x28>
 8020bd6:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020bda:	4264      	negs	r4, r4
 8020bdc:	4608      	mov	r0, r1
 8020bde:	f7f8 fce1 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020be2:	4620      	mov	r0, r4
 8020be4:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Reject_Connection_Request:

08020be6 <_HCI_Reject_Connection_Request>:
 8020be6:	b517      	push	{r0, r1, r2, r4, lr}
 8020be8:	b083      	sub	sp, #12
 8020bea:	460b      	mov	r3, r1
 8020bec:	a905      	add	r1, sp, #20
 8020bee:	9100      	str	r1, [sp, #0]
 8020bf0:	4601      	mov	r1, r0
 8020bf2:	f240 420a 	movw	r2, #1034	; 0x40a
 8020bf6:	a801      	add	r0, sp, #4
 8020bf8:	f7fe f914 	bl	801ee24 <BuildAndSubmitCommandBD_ADDRByte>
 8020bfc:	0004      	movs	r4, r0
 8020bfe:	d409      	bmi.n	8020c14 <_HCI_Reject_Connection_Request+0x2e>
 8020c00:	9801      	ldr	r0, [sp, #4]
 8020c02:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020c04:	6989      	ldr	r1, [r1, #24]
 8020c06:	788c      	ldrb	r4, [r1, #2]
 8020c08:	b114      	cbz	r4, 8020c10 <_HCI_Reject_Connection_Request+0x2a>
 8020c0a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020c0e:	4264      	negs	r4, r4
 8020c10:	f7f8 fcc8 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020c14:	b006      	add	sp, #24
 8020c16:	4620      	mov	r0, r4
 8020c18:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_Set_Connection_Encryption:

08020c1a <_HCI_Set_Connection_Encryption>:
 8020c1a:	b51c      	push	{r2, r3, r4, lr}
 8020c1c:	460b      	mov	r3, r1
 8020c1e:	9200      	str	r2, [sp, #0]
 8020c20:	4601      	mov	r1, r0
 8020c22:	f240 4213 	movw	r2, #1043	; 0x413
 8020c26:	a801      	add	r0, sp, #4
 8020c28:	f7fe fa52 	bl	801f0d0 <BuildAndSubmitCommandWordByte>
 8020c2c:	0004      	movs	r4, r0
 8020c2e:	d409      	bmi.n	8020c44 <_HCI_Set_Connection_Encryption+0x2a>
 8020c30:	9801      	ldr	r0, [sp, #4]
 8020c32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020c34:	6989      	ldr	r1, [r1, #24]
 8020c36:	788c      	ldrb	r4, [r1, #2]
 8020c38:	b114      	cbz	r4, 8020c40 <_HCI_Set_Connection_Encryption+0x26>
 8020c3a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020c3e:	4264      	negs	r4, r4
 8020c40:	f7f8 fcb0 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020c44:	4620      	mov	r0, r4
 8020c46:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i._HCI_Set_Event_Mask:

08020c48 <_HCI_Set_Event_Mask>:
 8020c48:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8020c4a:	2208      	movs	r2, #8
 8020c4c:	e9cd 2100 	strd	r2, r1, [sp]
 8020c50:	4601      	mov	r1, r0
 8020c52:	2300      	movs	r3, #0
 8020c54:	f640 4201 	movw	r2, #3073	; 0xc01
 8020c58:	a802      	add	r0, sp, #8
 8020c5a:	f7fe f98b 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 8020c5e:	0004      	movs	r4, r0
 8020c60:	d409      	bmi.n	8020c76 <_HCI_Set_Event_Mask+0x2e>
 8020c62:	9802      	ldr	r0, [sp, #8]
 8020c64:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020c66:	6989      	ldr	r1, [r1, #24]
 8020c68:	794c      	ldrb	r4, [r1, #5]
 8020c6a:	b114      	cbz	r4, 8020c72 <_HCI_Set_Event_Mask+0x2a>
 8020c6c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020c70:	4264      	negs	r4, r4
 8020c72:	f7f8 fc97 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020c76:	4620      	mov	r0, r4
 8020c78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i._HCI_Write_Automatic_Flush_Timeout:

08020c7a <_HCI_Write_Automatic_Flush_Timeout>:
 8020c7a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8020c7c:	460b      	mov	r3, r1
 8020c7e:	2100      	movs	r1, #0
 8020c80:	e9cd 2100 	strd	r2, r1, [sp]
 8020c84:	4601      	mov	r1, r0
 8020c86:	f640 4228 	movw	r2, #3112	; 0xc28
 8020c8a:	a802      	add	r0, sp, #8
 8020c8c:	f7fe f9bc 	bl	801f008 <BuildAndSubmitCommandThreeWords>
 8020c90:	0004      	movs	r4, r0
 8020c92:	d409      	bmi.n	8020ca8 <_HCI_Write_Automatic_Flush_Timeout+0x2e>
 8020c94:	9802      	ldr	r0, [sp, #8]
 8020c96:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020c98:	6989      	ldr	r1, [r1, #24]
 8020c9a:	794c      	ldrb	r4, [r1, #5]
 8020c9c:	b114      	cbz	r4, 8020ca4 <_HCI_Write_Automatic_Flush_Timeout+0x2a>
 8020c9e:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020ca2:	4264      	negs	r4, r4
 8020ca4:	f7f8 fc7e 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020ca8:	4620      	mov	r0, r4
 8020caa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i._HCI_Write_Class_of_Device:

08020cac <_HCI_Write_Class_of_Device>:
 8020cac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8020cae:	2203      	movs	r2, #3
 8020cb0:	e9cd 2100 	strd	r2, r1, [sp]
 8020cb4:	4601      	mov	r1, r0
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	f640 4224 	movw	r2, #3108	; 0xc24
 8020cbc:	a802      	add	r0, sp, #8
 8020cbe:	f7fe f959 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 8020cc2:	0004      	movs	r4, r0
 8020cc4:	d409      	bmi.n	8020cda <_HCI_Write_Class_of_Device+0x2e>
 8020cc6:	9802      	ldr	r0, [sp, #8]
 8020cc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020cca:	6989      	ldr	r1, [r1, #24]
 8020ccc:	794c      	ldrb	r4, [r1, #5]
 8020cce:	b114      	cbz	r4, 8020cd6 <_HCI_Write_Class_of_Device+0x2a>
 8020cd0:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020cd4:	4264      	negs	r4, r4
 8020cd6:	f7f8 fc65 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020cda:	4620      	mov	r0, r4
 8020cdc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i._HCI_Write_Current_IAC_LAP:

08020cde <_HCI_Write_Current_IAC_LAP>:
 8020cde:	b517      	push	{r0, r1, r2, r4, lr}
 8020ce0:	b083      	sub	sp, #12
 8020ce2:	4601      	mov	r1, r0
 8020ce4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8020ce8:	a802      	add	r0, sp, #8
 8020cea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020cee:	b2db      	uxtb	r3, r3
 8020cf0:	e9cd 3200 	strd	r3, r2, [sp]
 8020cf4:	ab04      	add	r3, sp, #16
 8020cf6:	f640 423a 	movw	r2, #3130	; 0xc3a
 8020cfa:	f7fe f93b 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 8020cfe:	0004      	movs	r4, r0
 8020d00:	d409      	bmi.n	8020d16 <_HCI_Write_Current_IAC_LAP+0x38>
 8020d02:	9802      	ldr	r0, [sp, #8]
 8020d04:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020d06:	6989      	ldr	r1, [r1, #24]
 8020d08:	794c      	ldrb	r4, [r1, #5]
 8020d0a:	b114      	cbz	r4, 8020d12 <_HCI_Write_Current_IAC_LAP+0x34>
 8020d0c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020d10:	4264      	negs	r4, r4
 8020d12:	f7f8 fc47 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020d16:	b006      	add	sp, #24
 8020d18:	4620      	mov	r0, r4
 8020d1a:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_Write_Default_Link_Policy_Settings:

08020d1c <_HCI_Write_Default_Link_Policy_Settings>:
 8020d1c:	b538      	push	{r3, r4, r5, lr}
 8020d1e:	460b      	mov	r3, r1
 8020d20:	4601      	mov	r1, r0
 8020d22:	f640 020f 	movw	r2, #2063	; 0x80f
 8020d26:	4668      	mov	r0, sp
 8020d28:	f7fe f9a8 	bl	801f07c <BuildAndSubmitCommandWord>
 8020d2c:	0004      	movs	r4, r0
 8020d2e:	d409      	bmi.n	8020d44 <_HCI_Write_Default_Link_Policy_Settings+0x28>
 8020d30:	9800      	ldr	r0, [sp, #0]
 8020d32:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020d34:	6989      	ldr	r1, [r1, #24]
 8020d36:	794c      	ldrb	r4, [r1, #5]
 8020d38:	b114      	cbz	r4, 8020d40 <_HCI_Write_Default_Link_Policy_Settings+0x24>
 8020d3a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020d3e:	4264      	negs	r4, r4
 8020d40:	f7f8 fc30 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020d44:	4620      	mov	r0, r4
 8020d46:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Write_Encryption_Mode:

08020d48 <_HCI_Write_Encryption_Mode>:
 8020d48:	b538      	push	{r3, r4, r5, lr}
 8020d4a:	460b      	mov	r3, r1
 8020d4c:	4601      	mov	r1, r0
 8020d4e:	f640 4222 	movw	r2, #3106	; 0xc22
 8020d52:	4668      	mov	r0, sp
 8020d54:	f7fe f8e6 	bl	801ef24 <BuildAndSubmitCommandByte>
 8020d58:	0004      	movs	r4, r0
 8020d5a:	d409      	bmi.n	8020d70 <_HCI_Write_Encryption_Mode+0x28>
 8020d5c:	9800      	ldr	r0, [sp, #0]
 8020d5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020d60:	6989      	ldr	r1, [r1, #24]
 8020d62:	794c      	ldrb	r4, [r1, #5]
 8020d64:	b114      	cbz	r4, 8020d6c <_HCI_Write_Encryption_Mode+0x24>
 8020d66:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020d6a:	4264      	negs	r4, r4
 8020d6c:	f7f8 fc1a 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020d70:	4620      	mov	r0, r4
 8020d72:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Write_LE_Host_Supported:

08020d74 <_HCI_Write_LE_Host_Supported>:
 8020d74:	b517      	push	{r0, r1, r2, r4, lr}
 8020d76:	b083      	sub	sp, #12
 8020d78:	ab05      	add	r3, sp, #20
 8020d7a:	2201      	movs	r2, #1
 8020d7c:	e9cd 2300 	strd	r2, r3, [sp]
 8020d80:	4601      	mov	r1, r0
 8020d82:	ab04      	add	r3, sp, #16
 8020d84:	f640 426d 	movw	r2, #3181	; 0xc6d
 8020d88:	a802      	add	r0, sp, #8
 8020d8a:	f7fe f8f3 	bl	801ef74 <BuildAndSubmitCommandByteVariable>
 8020d8e:	0004      	movs	r4, r0
 8020d90:	d409      	bmi.n	8020da6 <_HCI_Write_LE_Host_Supported+0x32>
 8020d92:	9802      	ldr	r0, [sp, #8]
 8020d94:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020d96:	6989      	ldr	r1, [r1, #24]
 8020d98:	794c      	ldrb	r4, [r1, #5]
 8020d9a:	b114      	cbz	r4, 8020da2 <_HCI_Write_LE_Host_Supported+0x2e>
 8020d9c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020da0:	4264      	negs	r4, r4
 8020da2:	f7f8 fbff 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020da6:	b006      	add	sp, #24
 8020da8:	4620      	mov	r0, r4
 8020daa:	bd10      	pop	{r4, pc}

Disassembly of section i._HCI_Write_Link_Supervision_Timeout:

08020dac <_HCI_Write_Link_Supervision_Timeout>:
 8020dac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8020dae:	460b      	mov	r3, r1
 8020db0:	2100      	movs	r1, #0
 8020db2:	e9cd 2100 	strd	r2, r1, [sp]
 8020db6:	4601      	mov	r1, r0
 8020db8:	f640 4237 	movw	r2, #3127	; 0xc37
 8020dbc:	a802      	add	r0, sp, #8
 8020dbe:	f7fe f923 	bl	801f008 <BuildAndSubmitCommandThreeWords>
 8020dc2:	0004      	movs	r4, r0
 8020dc4:	d409      	bmi.n	8020dda <_HCI_Write_Link_Supervision_Timeout+0x2e>
 8020dc6:	9802      	ldr	r0, [sp, #8]
 8020dc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020dca:	6989      	ldr	r1, [r1, #24]
 8020dcc:	794c      	ldrb	r4, [r1, #5]
 8020dce:	b114      	cbz	r4, 8020dd6 <_HCI_Write_Link_Supervision_Timeout+0x2a>
 8020dd0:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020dd4:	4264      	negs	r4, r4
 8020dd6:	f7f8 fbe5 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020dda:	4620      	mov	r0, r4
 8020ddc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i._HCI_Write_SCO_Flow_Control_Enable:

08020dde <_HCI_Write_SCO_Flow_Control_Enable>:
 8020dde:	b538      	push	{r3, r4, r5, lr}
 8020de0:	460b      	mov	r3, r1
 8020de2:	4601      	mov	r1, r0
 8020de4:	f640 422f 	movw	r2, #3119	; 0xc2f
 8020de8:	4668      	mov	r0, sp
 8020dea:	f7fe f89b 	bl	801ef24 <BuildAndSubmitCommandByte>
 8020dee:	0004      	movs	r4, r0
 8020df0:	d409      	bmi.n	8020e06 <_HCI_Write_SCO_Flow_Control_Enable+0x28>
 8020df2:	9800      	ldr	r0, [sp, #0]
 8020df4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020df6:	6989      	ldr	r1, [r1, #24]
 8020df8:	794c      	ldrb	r4, [r1, #5]
 8020dfa:	b114      	cbz	r4, 8020e02 <_HCI_Write_SCO_Flow_Control_Enable+0x24>
 8020dfc:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020e00:	4264      	negs	r4, r4
 8020e02:	f7f8 fbcf 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020e06:	4620      	mov	r0, r4
 8020e08:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Write_Scan_Enable:

08020e0a <_HCI_Write_Scan_Enable>:
 8020e0a:	b538      	push	{r3, r4, r5, lr}
 8020e0c:	460b      	mov	r3, r1
 8020e0e:	4601      	mov	r1, r0
 8020e10:	f640 421a 	movw	r2, #3098	; 0xc1a
 8020e14:	4668      	mov	r0, sp
 8020e16:	f7fe f885 	bl	801ef24 <BuildAndSubmitCommandByte>
 8020e1a:	0004      	movs	r4, r0
 8020e1c:	d409      	bmi.n	8020e32 <_HCI_Write_Scan_Enable+0x28>
 8020e1e:	9800      	ldr	r0, [sp, #0]
 8020e20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020e22:	6989      	ldr	r1, [r1, #24]
 8020e24:	794c      	ldrb	r4, [r1, #5]
 8020e26:	b114      	cbz	r4, 8020e2e <_HCI_Write_Scan_Enable+0x24>
 8020e28:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020e2c:	4264      	negs	r4, r4
 8020e2e:	f7f8 fbb9 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020e32:	4620      	mov	r0, r4
 8020e34:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i._HCI_Write_Simple_Pairing_Mode:

08020e36 <_HCI_Write_Simple_Pairing_Mode>:
 8020e36:	b538      	push	{r3, r4, r5, lr}
 8020e38:	460b      	mov	r3, r1
 8020e3a:	4601      	mov	r1, r0
 8020e3c:	f640 4256 	movw	r2, #3158	; 0xc56
 8020e40:	4668      	mov	r0, sp
 8020e42:	f7fe f86f 	bl	801ef24 <BuildAndSubmitCommandByte>
 8020e46:	0004      	movs	r4, r0
 8020e48:	d409      	bmi.n	8020e5e <_HCI_Write_Simple_Pairing_Mode+0x28>
 8020e4a:	9800      	ldr	r0, [sp, #0]
 8020e4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8020e4e:	6989      	ldr	r1, [r1, #24]
 8020e50:	794c      	ldrb	r4, [r1, #5]
 8020e52:	b114      	cbz	r4, 8020e5a <_HCI_Write_Simple_Pairing_Mode+0x24>
 8020e54:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8020e58:	4264      	negs	r4, r4
 8020e5a:	f7f8 fba3 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020e5e:	4620      	mov	r0, r4
 8020e60:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.AcquireL2CAPStackInformation:

08020e62 <AcquireL2CAPStackInformation>:
 8020e62:	b570      	push	{r4, r5, r6, lr}
 8020e64:	4605      	mov	r5, r0
 8020e66:	460c      	mov	r4, r1
 8020e68:	4610      	mov	r0, r2
 8020e6a:	f7f7 fd67 	bl	801893c <AcquireBluetoothStackInformation>
 8020e6e:	6028      	str	r0, [r5, #0]
 8020e70:	b150      	cbz	r0, 8020e88 <AcquireL2CAPStackInformation+0x26>
 8020e72:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8020e74:	6020      	str	r0, [r4, #0]
 8020e76:	b108      	cbz	r0, 8020e7c <AcquireL2CAPStackInformation+0x1a>
 8020e78:	2400      	movs	r4, #0
 8020e7a:	e007      	b.n	8020e8c <AcquireL2CAPStackInformation+0x2a>
 8020e7c:	f06f 0419 	mvn.w	r4, #25
 8020e80:	6828      	ldr	r0, [r5, #0]
 8020e82:	f7f8 fb8f 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8020e86:	e001      	b.n	8020e8c <AcquireL2CAPStackInformation+0x2a>
 8020e88:	f06f 0401 	mvn.w	r4, #1
 8020e8c:	4620      	mov	r0, r4
 8020e8e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AddConnectionInfoEntry:

08020e90 <AddConnectionInfoEntry>:
 8020e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e92:	460c      	mov	r4, r1
 8020e94:	784a      	ldrb	r2, [r1, #1]
 8020e96:	4606      	mov	r6, r0
 8020e98:	2500      	movs	r5, #0
 8020e9a:	1d49      	adds	r1, r1, #5
 8020e9c:	f002 fcd3 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 8020ea0:	b938      	cbnz	r0, 8020eb2 <AddConnectionInfoEntry+0x22>
 8020ea2:	2100      	movs	r1, #0
 8020ea4:	4633      	mov	r3, r6
 8020ea6:	2224      	movs	r2, #36	; 0x24
 8020ea8:	4608      	mov	r0, r1
 8020eaa:	9400      	str	r4, [sp, #0]
 8020eac:	f7f7 fe00 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8020eb0:	4605      	mov	r5, r0
 8020eb2:	4628      	mov	r0, r5
 8020eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08020eb6 <AddConnectionInfoEntry>:
 8020eb6:	b508      	push	{r3, lr}
 8020eb8:	4603      	mov	r3, r0
 8020eba:	9100      	str	r1, [sp, #0]
 8020ebc:	2240      	movs	r2, #64	; 0x40
 8020ebe:	2106      	movs	r1, #6
 8020ec0:	2003      	movs	r0, #3
 8020ec2:	f7f7 fdf5 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8020ec6:	bd08      	pop	{r3, pc}

Disassembly of section i.AddRegistryInfoEntry:

08020ec8 <AddRegistryInfoEntry>:
 8020ec8:	b508      	push	{r3, lr}
 8020eca:	4603      	mov	r3, r0
 8020ecc:	9100      	str	r1, [sp, #0]
 8020ece:	2210      	movs	r2, #16
 8020ed0:	2104      	movs	r1, #4
 8020ed2:	2003      	movs	r0, #3
 8020ed4:	f7f7 fdec 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8020ed8:	bd08      	pop	{r3, pc}

Disassembly of section i.CheckQueuedDataWrite:

08020eda <CheckQueuedDataWrite>:
 8020eda:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8020ede:	469a      	mov	sl, r3
 8020ee0:	4615      	mov	r5, r2
 8020ee2:	ea5f 0801 	movs.w	r8, r1
 8020ee6:	4607      	mov	r7, r0
 8020ee8:	d078      	beq.n	8020fdc <CheckQueuedDataWrite+0x102>
 8020eea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8020eee:	2800      	cmp	r0, #0
 8020ef0:	d074      	beq.n	8020fdc <CheckQueuedDataWrite+0x102>
 8020ef2:	88a9      	ldrh	r1, [r5, #4]
 8020ef4:	1c49      	adds	r1, r1, #1
 8020ef6:	b289      	uxth	r1, r1
 8020ef8:	4288      	cmp	r0, r1
 8020efa:	d227      	bcs.n	8020f4c <CheckQueuedDataWrite+0x72>
 8020efc:	88e8      	ldrh	r0, [r5, #6]
 8020efe:	07c1      	lsls	r1, r0, #31
 8020f00:	d105      	bne.n	8020f0e <CheckQueuedDataWrite+0x34>
 8020f02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8020f06:	f040 0001 	orr.w	r0, r0, #1
 8020f0a:	6029      	str	r1, [r5, #0]
 8020f0c:	80e8      	strh	r0, [r5, #6]
 8020f0e:	f898 0000 	ldrb.w	r0, [r8]
 8020f12:	0780      	lsls	r0, r0, #30
 8020f14:	d554      	bpl.n	8020fc0 <CheckQueuedDataWrite+0xe6>
 8020f16:	2400      	movs	r4, #0
 8020f18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8020f1a:	e010      	b.n	8020f3e <CheckQueuedDataWrite+0x64>
 8020f1c:	8842      	ldrh	r2, [r0, #2]
 8020f1e:	4552      	cmp	r2, sl
 8020f20:	d10b      	bne.n	8020f3a <CheckQueuedDataWrite+0x60>
 8020f22:	8802      	ldrh	r2, [r0, #0]
 8020f24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f26:	428a      	cmp	r2, r1
 8020f28:	d107      	bne.n	8020f3a <CheckQueuedDataWrite+0x60>
 8020f2a:	88c1      	ldrh	r1, [r0, #6]
 8020f2c:	f242 0211 	movw	r2, #8209	; 0x2011
 8020f30:	4011      	ands	r1, r2
 8020f32:	f5a1 5200 	sub.w	r2, r1, #8192	; 0x2000
 8020f36:	3a10      	subs	r2, #16
 8020f38:	d00c      	beq.n	8020f54 <CheckQueuedDataWrite+0x7a>
 8020f3a:	4604      	mov	r4, r0
 8020f3c:	6940      	ldr	r0, [r0, #20]
 8020f3e:	b110      	cbz	r0, 8020f46 <CheckQueuedDataWrite+0x6c>
 8020f40:	79a9      	ldrb	r1, [r5, #6]
 8020f42:	07c9      	lsls	r1, r1, #31
 8020f44:	d1ea      	bne.n	8020f1c <CheckQueuedDataWrite+0x42>
 8020f46:	f1b8 0f00 	cmp.w	r8, #0
 8020f4a:	d047      	beq.n	8020fdc <CheckQueuedDataWrite+0x102>
 8020f4c:	79a8      	ldrb	r0, [r5, #6]
 8020f4e:	07c0      	lsls	r0, r0, #31
 8020f50:	d044      	beq.n	8020fdc <CheckQueuedDataWrite+0x102>
 8020f52:	e038      	b.n	8020fc6 <CheckQueuedDataWrite+0xec>
 8020f54:	2600      	movs	r6, #0
 8020f56:	f8b0 b004 	ldrh.w	fp, [r0, #4]
 8020f5a:	e017      	b.n	8020f8c <CheckQueuedDataWrite+0xb2>
 8020f5c:	8901      	ldrh	r1, [r0, #8]
 8020f5e:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 8020f62:	4431      	add	r1, r6
 8020f64:	b28e      	uxth	r6, r1
 8020f66:	6941      	ldr	r1, [r0, #20]
 8020f68:	b10c      	cbz	r4, 8020f6e <CheckQueuedDataWrite+0x94>
 8020f6a:	6161      	str	r1, [r4, #20]
 8020f6c:	e000      	b.n	8020f70 <CheckQueuedDataWrite+0x96>
 8020f6e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8020f70:	f7f2 fa3e 	bl	80133f0 <BTPS_FreeMemory>
 8020f74:	ea5f 7049 	movs.w	r0, r9, lsl #29
 8020f78:	d504      	bpl.n	8020f84 <CheckQueuedDataWrite+0xaa>
 8020f7a:	b10c      	cbz	r4, 8020f80 <CheckQueuedDataWrite+0xa6>
 8020f7c:	6960      	ldr	r0, [r4, #20]
 8020f7e:	e010      	b.n	8020fa2 <CheckQueuedDataWrite+0xc8>
 8020f80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8020f82:	e00e      	b.n	8020fa2 <CheckQueuedDataWrite+0xc8>
 8020f84:	b10c      	cbz	r4, 8020f8a <CheckQueuedDataWrite+0xb0>
 8020f86:	6960      	ldr	r0, [r4, #20]
 8020f88:	e000      	b.n	8020f8c <CheckQueuedDataWrite+0xb2>
 8020f8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8020f8c:	b148      	cbz	r0, 8020fa2 <CheckQueuedDataWrite+0xc8>
 8020f8e:	8842      	ldrh	r2, [r0, #2]
 8020f90:	4552      	cmp	r2, sl
 8020f92:	d106      	bne.n	8020fa2 <CheckQueuedDataWrite+0xc8>
 8020f94:	8802      	ldrh	r2, [r0, #0]
 8020f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f98:	428a      	cmp	r2, r1
 8020f9a:	d102      	bne.n	8020fa2 <CheckQueuedDataWrite+0xc8>
 8020f9c:	8882      	ldrh	r2, [r0, #4]
 8020f9e:	455a      	cmp	r2, fp
 8020fa0:	d0dc      	beq.n	8020f5c <CheckQueuedDataWrite+0x82>
 8020fa2:	2e00      	cmp	r6, #0
 8020fa4:	d0cb      	beq.n	8020f3e <CheckQueuedDataWrite+0x64>
 8020fa6:	88a9      	ldrh	r1, [r5, #4]
 8020fa8:	1e49      	subs	r1, r1, #1
 8020faa:	b289      	uxth	r1, r1
 8020fac:	80a9      	strh	r1, [r5, #4]
 8020fae:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020fb2:	4291      	cmp	r1, r2
 8020fb4:	d2c3      	bcs.n	8020f3e <CheckQueuedDataWrite+0x64>
 8020fb6:	88e9      	ldrh	r1, [r5, #6]
 8020fb8:	f021 0101 	bic.w	r1, r1, #1
 8020fbc:	80e9      	strh	r1, [r5, #6]
 8020fbe:	e7be      	b.n	8020f3e <CheckQueuedDataWrite+0x64>
 8020fc0:	88e8      	ldrh	r0, [r5, #6]
 8020fc2:	07c1      	lsls	r1, r0, #31
 8020fc4:	d003      	beq.n	8020fce <CheckQueuedDataWrite+0xf4>
 8020fc6:	2000      	movs	r0, #0
 8020fc8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8020fcc:	e006      	b.n	8020fdc <CheckQueuedDataWrite+0x102>
 8020fce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8020fd2:	f040 0001 	orr.w	r0, r0, #1
 8020fd6:	6029      	str	r1, [r5, #0]
 8020fd8:	80e8      	strh	r0, [r5, #6]
 8020fda:	e7b7      	b.n	8020f4c <CheckQueuedDataWrite+0x72>
 8020fdc:	2001      	movs	r0, #1
 8020fde:	e7f3      	b.n	8020fc8 <CheckQueuedDataWrite+0xee>

Disassembly of section i.CleanupChannel:

08020fe0 <CleanupChannel>:
 8020fe0:	b570      	push	{r4, r5, r6, lr}
 8020fe2:	000c      	movs	r4, r1
 8020fe4:	4605      	mov	r5, r0
 8020fe6:	d012      	beq.n	802100e <CleanupChannel+0x2e>
 8020fe8:	7aa0      	ldrb	r0, [r4, #10]
 8020fea:	2801      	cmp	r0, #1
 8020fec:	d104      	bne.n	8020ff8 <CleanupChannel+0x18>
 8020fee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8020ff0:	b111      	cbz	r1, 8020ff8 <CleanupChannel+0x18>
 8020ff2:	6828      	ldr	r0, [r5, #0]
 8020ff4:	f7f8 fc4e 	bl	8019894 <BTPS_StopTimer>
 8020ff8:	88e1      	ldrh	r1, [r4, #6]
 8020ffa:	4628      	mov	r0, r5
 8020ffc:	f002 ff33 	bl	8023e66 <_L2CA_Flush_Channel_Data>
 8021000:	4621      	mov	r1, r4
 8021002:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8021006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802100a:	f000 b8d6 	b.w	80211ba <DeleteChannelInfoEntry>
 802100e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.CreateNewChannel:

08021010 <CreateNewChannel>:
 8021010:	b538      	push	{r3, r4, r5, lr}
 8021012:	4605      	mov	r5, r0
 8021014:	2058      	movs	r0, #88	; 0x58
 8021016:	f7f2 f9d1 	bl	80133bc <BTPS_AllocateMemory>
 802101a:	0004      	movs	r4, r0
 802101c:	d02d      	beq.n	802107a <CreateNewChannel+0x6a>
 802101e:	2258      	movs	r2, #88	; 0x58
 8021020:	2100      	movs	r1, #0
 8021022:	f7f2 fa4c 	bl	80134be <BTPS_MemInitialize>
 8021026:	4a16      	ldr	r2, [pc, #88]	; (8021080 <CreateNewChannel+0x70>)
 8021028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802102c:	8811      	ldrh	r1, [r2, #0]
 802102e:	1c48      	adds	r0, r1, #1
 8021030:	b280      	uxth	r0, r0
 8021032:	8010      	strh	r0, [r2, #0]
 8021034:	4298      	cmp	r0, r3
 8021036:	d100      	bne.n	802103a <CreateNewChannel+0x2a>
 8021038:	2040      	movs	r0, #64	; 0x40
 802103a:	8010      	strh	r0, [r2, #0]
 802103c:	80e1      	strh	r1, [r4, #6]
 802103e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8021042:	8120      	strh	r0, [r4, #8]
 8021044:	2001      	movs	r0, #1
 8021046:	72a0      	strb	r0, [r4, #10]
 8021048:	2002      	movs	r0, #2
 802104a:	72e0      	strb	r0, [r4, #11]
 802104c:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 8021050:	8560      	strh	r0, [r4, #42]	; 0x2a
 8021052:	8520      	strh	r0, [r4, #40]	; 0x28
 8021054:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8021056:	2218      	movs	r2, #24
 8021058:	490a      	ldr	r1, [pc, #40]	; (8021084 <CreateNewChannel+0x74>)
 802105a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 802105e:	f7f2 fe90 	bl	8013d82 <__aeabi_memcpy>
 8021062:	462b      	mov	r3, r5
 8021064:	2254      	movs	r2, #84	; 0x54
 8021066:	2106      	movs	r1, #6
 8021068:	2003      	movs	r0, #3
 802106a:	9400      	str	r4, [sp, #0]
 802106c:	f7f7 fd20 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8021070:	b918      	cbnz	r0, 802107a <CreateNewChannel+0x6a>
 8021072:	4620      	mov	r0, r4
 8021074:	f7f2 f9bc 	bl	80133f0 <BTPS_FreeMemory>
 8021078:	2400      	movs	r4, #0
 802107a:	4620      	mov	r0, r4
 802107c:	bd38      	pop	{r3, r4, r5, pc}
 802107e:	0000      	.short	0x0000
 8021080:	20000030 	.word	0x20000030
 8021084:	08039768 	.word	0x08039768

Disassembly of section i.CreateNewIdentifierEntry:

08021088 <CreateNewIdentifierEntry>:
 8021088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802108c:	4605      	mov	r5, r0
 802108e:	a80a      	add	r0, sp, #40	; 0x28
 8021090:	461e      	mov	r6, r3
 8021092:	e890 0e00 	ldmia.w	r0, {r9, sl, fp}
 8021096:	4617      	mov	r7, r2
 8021098:	4688      	mov	r8, r1
 802109a:	2024      	movs	r0, #36	; 0x24
 802109c:	f7f2 f98e 	bl	80133bc <BTPS_AllocateMemory>
 80210a0:	0004      	movs	r4, r0
 80210a2:	d022      	beq.n	80210ea <CreateNewIdentifierEntry+0x62>
 80210a4:	2224      	movs	r2, #36	; 0x24
 80210a6:	2100      	movs	r1, #0
 80210a8:	f7f2 fa09 	bl	80134be <BTPS_MemInitialize>
 80210ac:	4a12      	ldr	r2, [pc, #72]	; (80210f8 <CreateNewIdentifierEntry+0x70>)
 80210ae:	8851      	ldrh	r1, [r2, #2]
 80210b0:	1c48      	adds	r0, r1, #1
 80210b2:	b280      	uxth	r0, r0
 80210b4:	8050      	strh	r0, [r2, #2]
 80210b6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80210ba:	d100      	bne.n	80210be <CreateNewIdentifierEntry+0x36>
 80210bc:	2001      	movs	r0, #1
 80210be:	8050      	strh	r0, [r2, #2]
 80210c0:	80a1      	strh	r1, [r4, #4]
 80210c2:	f8a4 8006 	strh.w	r8, [r4, #6]
 80210c6:	8127      	strh	r7, [r4, #8]
 80210c8:	6828      	ldr	r0, [r5, #0]
 80210ca:	6020      	str	r0, [r4, #0]
 80210cc:	72a6      	strb	r6, [r4, #10]
 80210ce:	f8c4 9010 	str.w	r9, [r4, #16]
 80210d2:	e9c4 ab06 	strd	sl, fp, [r4, #24]
 80210d6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80210da:	2220      	movs	r2, #32
 80210dc:	2104      	movs	r1, #4
 80210de:	2003      	movs	r0, #3
 80210e0:	9400      	str	r4, [sp, #0]
 80210e2:	f7f7 fce5 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 80210e6:	b110      	cbz	r0, 80210ee <CreateNewIdentifierEntry+0x66>
 80210e8:	88a0      	ldrh	r0, [r4, #4]
 80210ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210ee:	4620      	mov	r0, r4
 80210f0:	f7f2 f97e 	bl	80133f0 <BTPS_FreeMemory>
 80210f4:	2000      	movs	r0, #0
 80210f6:	e7f8      	b.n	80210ea <CreateNewIdentifierEntry+0x62>
 80210f8:	20000030 	.word	0x20000030

Disassembly of section i.DelayedAuthenticationProcess:

080210fc <DelayedAuthenticationProcess>:
 80210fc:	b530      	push	{r4, r5, lr}
 80210fe:	b085      	sub	sp, #20
 8021100:	000c      	movs	r4, r1
 8021102:	4605      	mov	r5, r0
 8021104:	d02e      	beq.n	8021164 <DelayedAuthenticationProcess+0x68>
 8021106:	4602      	mov	r2, r0
 8021108:	4669      	mov	r1, sp
 802110a:	a804      	add	r0, sp, #16
 802110c:	f7ff fea9 	bl	8020e62 <AcquireL2CAPStackInformation>
 8021110:	2800      	cmp	r0, #0
 8021112:	d127      	bne.n	8021164 <DelayedAuthenticationProcess+0x68>
 8021114:	9800      	ldr	r0, [sp, #0]
 8021116:	b2a1      	uxth	r1, r4
 8021118:	3058      	adds	r0, #88	; 0x58
 802111a:	f002 fbb6 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 802111e:	0004      	movs	r4, r0
 8021120:	d01d      	beq.n	802115e <DelayedAuthenticationProcess+0x62>
 8021122:	f8d4 1005 	ldr.w	r1, [r4, #5]
 8021126:	9101      	str	r1, [sp, #4]
 8021128:	f8b4 0009 	ldrh.w	r0, [r4, #9]
 802112c:	f8ad 0008 	strh.w	r0, [sp, #8]
 8021130:	ab03      	add	r3, sp, #12
 8021132:	4628      	mov	r0, r5
 8021134:	9a02      	ldr	r2, [sp, #8]
 8021136:	f7f7 fcde 	bl	8018af6 <BSC_AuthenticateDevice>
 802113a:	2104      	movs	r1, #4
 802113c:	b928      	cbnz	r0, 802114a <DelayedAuthenticationProcess+0x4e>
 802113e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8021142:	2502      	movs	r5, #2
 8021144:	b180      	cbz	r0, 8021168 <DelayedAuthenticationProcess+0x6c>
 8021146:	2801      	cmp	r0, #1
 8021148:	d016      	beq.n	8021178 <DelayedAuthenticationProcess+0x7c>
 802114a:	70a1      	strb	r1, [r4, #2]
 802114c:	2200      	movs	r2, #0
 802114e:	1d61      	adds	r1, r4, #5
 8021150:	9800      	ldr	r0, [sp, #0]
 8021152:	f001 fe36 	bl	8022dc2 <LP_ConnectCfmNeg>
 8021156:	89a1      	ldrh	r1, [r4, #12]
 8021158:	9800      	ldr	r0, [sp, #0]
 802115a:	f001 ff7a 	bl	8023052 <LP_DisconnectReq>
 802115e:	9804      	ldr	r0, [sp, #16]
 8021160:	f7f8 fa20 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8021164:	b005      	add	sp, #20
 8021166:	bd30      	pop	{r4, r5, pc}
 8021168:	2003      	movs	r0, #3
 802116a:	70e0      	strb	r0, [r4, #3]
 802116c:	70a5      	strb	r5, [r4, #2]
 802116e:	4621      	mov	r1, r4
 8021170:	9800      	ldr	r0, [sp, #0]
 8021172:	f001 fd89 	bl	8022c88 <LP_ConnectCfm>
 8021176:	e7f2      	b.n	802115e <DelayedAuthenticationProcess+0x62>
 8021178:	9800      	ldr	r0, [sp, #0]
 802117a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802117e:	4a06      	ldr	r2, [pc, #24]	; (8021198 <DelayedAuthenticationProcess+0x9c>)
 8021180:	6903      	ldr	r3, [r0, #16]
 8021182:	6800      	ldr	r0, [r0, #0]
 8021184:	434b      	muls	r3, r1
 8021186:	89a1      	ldrh	r1, [r4, #12]
 8021188:	f7f8 fb3a 	bl	8019800 <BTPS_StartTimer>
 802118c:	61e0      	str	r0, [r4, #28]
 802118e:	2001      	movs	r0, #1
 8021190:	70a0      	strb	r0, [r4, #2]
 8021192:	70e5      	strb	r5, [r4, #3]
 8021194:	e7e3      	b.n	802115e <DelayedAuthenticationProcess+0x62>
 8021196:	0000      	.short	0x0000
 8021198:	080220db 	.word	0x080220db

Disassembly of section i.DeleteACLPacketEntry:

0802119c <DeleteACLPacketEntry>:
 802119c:	b538      	push	{r3, r4, r5, lr}
 802119e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80211a2:	9000      	str	r0, [sp, #0]
 80211a4:	2314      	movs	r3, #20
 80211a6:	2200      	movs	r2, #0
 80211a8:	2006      	movs	r0, #6
 80211aa:	f7f7 fce7 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80211ae:	b110      	cbz	r0, 80211b6 <DeleteACLPacketEntry+0x1a>
 80211b0:	f7f7 fd91 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80211b4:	2400      	movs	r4, #0
 80211b6:	4620      	mov	r0, r4
 80211b8:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.DeleteChannelInfoEntry:

080211ba <DeleteChannelInfoEntry>:
 80211ba:	b538      	push	{r3, r4, r5, lr}
 80211bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80211c0:	9000      	str	r0, [sp, #0]
 80211c2:	2354      	movs	r3, #84	; 0x54
 80211c4:	2200      	movs	r2, #0
 80211c6:	2006      	movs	r0, #6
 80211c8:	f7f7 fcd8 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80211cc:	0004      	movs	r4, r0
 80211ce:	d00a      	beq.n	80211e6 <DeleteChannelInfoEntry+0x2c>
 80211d0:	7aa0      	ldrb	r0, [r4, #10]
 80211d2:	2801      	cmp	r0, #1
 80211d4:	d103      	bne.n	80211de <DeleteChannelInfoEntry+0x24>
 80211d6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80211d8:	b108      	cbz	r0, 80211de <DeleteChannelInfoEntry+0x24>
 80211da:	f7f2 f909 	bl	80133f0 <BTPS_FreeMemory>
 80211de:	4620      	mov	r0, r4
 80211e0:	f7f7 fd79 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80211e4:	2500      	movs	r5, #0
 80211e6:	4628      	mov	r0, r5
 80211e8:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.DeleteConnectionInfoEntry:

080211ea <DeleteConnectionInfoEntry>:
 80211ea:	b538      	push	{r3, r4, r5, lr}
 80211ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80211f0:	9000      	str	r0, [sp, #0]
 80211f2:	2324      	movs	r3, #36	; 0x24
 80211f4:	2200      	movs	r2, #0
 80211f6:	2006      	movs	r0, #6
 80211f8:	f7f7 fcc0 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80211fc:	0004      	movs	r4, r0
 80211fe:	d009      	beq.n	8021214 <DeleteConnectionInfoEntry+0x2a>
 8021200:	6a20      	ldr	r0, [r4, #32]
 8021202:	b118      	cbz	r0, 802120c <DeleteConnectionInfoEntry+0x22>
 8021204:	f104 0020 	add.w	r0, r4, #32
 8021208:	f000 f961 	bl	80214ce <FreeFixedChannelInfoList>
 802120c:	4620      	mov	r0, r4
 802120e:	f7f7 fd62 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8021212:	2500      	movs	r5, #0
 8021214:	4628      	mov	r0, r5
 8021216:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.DeleteIdentifierInfoEntryByIdentifier:

08021218 <DeleteIdentifierInfoEntryByIdentifier>:
 8021218:	b533      	push	{r0, r1, r4, r5, lr}
 802121a:	b081      	sub	sp, #4
 802121c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8021220:	9000      	str	r0, [sp, #0]
 8021222:	2320      	movs	r3, #32
 8021224:	2204      	movs	r2, #4
 8021226:	a902      	add	r1, sp, #8
 8021228:	2003      	movs	r0, #3
 802122a:	f7f7 fca7 	bl	8018b7c <BSC_DeleteGenericListEntry>
 802122e:	0004      	movs	r4, r0
 8021230:	d007      	beq.n	8021242 <DeleteIdentifierInfoEntryByIdentifier+0x2a>
 8021232:	68e1      	ldr	r1, [r4, #12]
 8021234:	6820      	ldr	r0, [r4, #0]
 8021236:	f7f8 fb2d 	bl	8019894 <BTPS_StopTimer>
 802123a:	4620      	mov	r0, r4
 802123c:	f7f7 fd4b 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8021240:	2500      	movs	r5, #0
 8021242:	4628      	mov	r0, r5
 8021244:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i.DeleteRegistryInfoEntry:

08021246 <DeleteRegistryInfoEntry>:
 8021246:	b538      	push	{r3, r4, r5, lr}
 8021248:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 802124c:	9000      	str	r0, [sp, #0]
 802124e:	2310      	movs	r3, #16
 8021250:	2200      	movs	r2, #0
 8021252:	2006      	movs	r0, #6
 8021254:	f7f7 fc92 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8021258:	b110      	cbz	r0, 8021260 <DeleteRegistryInfoEntry+0x1a>
 802125a:	f7f7 fd3c 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 802125e:	2400      	movs	r4, #0
 8021260:	4620      	mov	r0, r4
 8021262:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.DispatchFixedChannelConnectDisconnect:

08021264 <DispatchFixedChannelConnectDisconnect>:
 8021264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021268:	4617      	mov	r7, r2
 802126a:	460e      	mov	r6, r1
 802126c:	4605      	mov	r5, r0
 802126e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8021270:	e01e      	b.n	80212b0 <DispatchFixedChannelConnectDisconnect+0x4c>
 8021272:	68a0      	ldr	r0, [r4, #8]
 8021274:	b1d8      	cbz	r0, 80212ae <DispatchFixedChannelConnectDisconnect+0x4a>
 8021276:	88a0      	ldrh	r0, [r4, #4]
 8021278:	2804      	cmp	r0, #4
 802127a:	d318      	bcc.n	80212ae <DispatchFixedChannelConnectDisconnect+0x4a>
 802127c:	2806      	cmp	r0, #6
 802127e:	d816      	bhi.n	80212ae <DispatchFixedChannelConnectDisconnect+0x4a>
 8021280:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8021282:	200a      	movs	r0, #10
 8021284:	700f      	strb	r7, [r1, #0]
 8021286:	6048      	str	r0, [r1, #4]
 8021288:	f101 000c 	add.w	r0, r1, #12
 802128c:	6088      	str	r0, [r1, #8]
 802128e:	8822      	ldrh	r2, [r4, #0]
 8021290:	818a      	strh	r2, [r1, #12]
 8021292:	f8d6 2005 	ldr.w	r2, [r6, #5]
 8021296:	f8c1 200e 	str.w	r2, [r1, #14]
 802129a:	f8b6 2009 	ldrh.w	r2, [r6, #9]
 802129e:	824a      	strh	r2, [r1, #18]
 80212a0:	688a      	ldr	r2, [r1, #8]
 80212a2:	7870      	ldrb	r0, [r6, #1]
 80212a4:	7210      	strb	r0, [r2, #8]
 80212a6:	68a3      	ldr	r3, [r4, #8]
 80212a8:	68e2      	ldr	r2, [r4, #12]
 80212aa:	6828      	ldr	r0, [r5, #0]
 80212ac:	4798      	blx	r3
 80212ae:	6924      	ldr	r4, [r4, #16]
 80212b0:	2c00      	cmp	r4, #0
 80212b2:	d1de      	bne.n	8021272 <DispatchFixedChannelConnectDisconnect+0xe>
 80212b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.EnhancedFragmentPacket:

080212b8 <EnhancedFragmentPacket>:
 80212b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80212bc:	4699      	mov	r9, r3
 80212be:	ab0c      	add	r3, sp, #48	; 0x30
 80212c0:	4607      	mov	r7, r0
 80212c2:	e893 1101 	ldmia.w	r3, {r0, r8, ip}
 80212c6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 80212ca:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80212cc:	b13d      	cbz	r5, 80212de <EnhancedFragmentPacket+0x26>
 80212ce:	686b      	ldr	r3, [r5, #4]
 80212d0:	b12b      	cbz	r3, 80212de <EnhancedFragmentPacket+0x26>
 80212d2:	88a3      	ldrh	r3, [r4, #4]
 80212d4:	f040 0010 	orr.w	r0, r0, #16
 80212d8:	1c5b      	adds	r3, r3, #1
 80212da:	80a3      	strh	r3, [r4, #4]
 80212dc:	e000      	b.n	80212e0 <EnhancedFragmentPacket+0x28>
 80212de:	2500      	movs	r5, #0
 80212e0:	9603      	str	r6, [sp, #12]
 80212e2:	e88d 1101 	stmia.w	sp, {r0, r8, ip}
 80212e6:	464b      	mov	r3, r9
 80212e8:	4638      	mov	r0, r7
 80212ea:	f000 f867 	bl	80213bc <FragmentPacket>
 80212ee:	0006      	movs	r6, r0
 80212f0:	d014      	beq.n	802131c <EnhancedFragmentPacket+0x64>
 80212f2:	374c      	adds	r7, #76	; 0x4c
 80212f4:	b15d      	cbz	r5, 802130e <EnhancedFragmentPacket+0x56>
 80212f6:	88a0      	ldrh	r0, [r4, #4]
 80212f8:	1e40      	subs	r0, r0, #1
 80212fa:	80a0      	strh	r0, [r4, #4]
 80212fc:	88e0      	ldrh	r0, [r4, #6]
 80212fe:	f040 0001 	orr.w	r0, r0, #1
 8021302:	80e0      	strh	r0, [r4, #6]
 8021304:	e003      	b.n	802130e <EnhancedFragmentPacket+0x56>
 8021306:	4601      	mov	r1, r0
 8021308:	4638      	mov	r0, r7
 802130a:	f7ff ff47 	bl	802119c <DeleteACLPacketEntry>
 802130e:	4649      	mov	r1, r9
 8021310:	4638      	mov	r0, r7
 8021312:	f002 fa84 	bl	802381e <SearchACLPacketEntryByIdentifier>
 8021316:	2800      	cmp	r0, #0
 8021318:	d1f5      	bne.n	8021306 <EnhancedFragmentPacket+0x4e>
 802131a:	b90e      	cbnz	r6, 8021320 <EnhancedFragmentPacket+0x68>
 802131c:	b105      	cbz	r5, 8021320 <EnhancedFragmentPacket+0x68>
 802131e:	88a6      	ldrh	r6, [r4, #4]
 8021320:	b004      	add	sp, #16
 8021322:	4630      	mov	r0, r6
 8021324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.FormatEventCIDOnly:

08021328 <FormatEventCIDOnly>:
 8021328:	6f00      	ldr	r0, [r0, #112]	; 0x70
 802132a:	f100 030c 	add.w	r3, r0, #12
 802132e:	7001      	strb	r1, [r0, #0]
 8021330:	2102      	movs	r1, #2
 8021332:	e9c0 1301 	strd	r1, r3, [r0, #4]
 8021336:	8182      	strh	r2, [r0, #12]
 8021338:	4770      	bx	lr

Disassembly of section i.FormatEventConfigConfirmation:

0802133a <FormatEventConfigConfirmation>:
 802133a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802133c:	460e      	mov	r6, r1
 802133e:	e9dd 5106 	ldrd	r5, r1, [sp, #24]
 8021342:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8021344:	2003      	movs	r0, #3
 8021346:	7020      	strb	r0, [r4, #0]
 8021348:	f104 000c 	add.w	r0, r4, #12
 802134c:	60a0      	str	r0, [r4, #8]
 802134e:	81a6      	strh	r6, [r4, #12]
 8021350:	81e2      	strh	r2, [r4, #14]
 8021352:	8223      	strh	r3, [r4, #16]
 8021354:	b13d      	cbz	r5, 8021366 <FormatEventConfigConfirmation+0x2c>
 8021356:	2200      	movs	r2, #0
 8021358:	68a0      	ldr	r0, [r4, #8]
 802135a:	e9cd 0200 	strd	r0, r2, [sp]
 802135e:	4613      	mov	r3, r2
 8021360:	4628      	mov	r0, r5
 8021362:	f001 ff14 	bl	802318e <ParseOptionsToAPI>
 8021366:	4620      	mov	r0, r4
 8021368:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.FormatEventConnectConfirmation:

0802136a <FormatEventConnectConfirmation>:
 802136a:	b530      	push	{r4, r5, lr}
 802136c:	4605      	mov	r5, r0
 802136e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021370:	2401      	movs	r4, #1
 8021372:	7004      	strb	r4, [r0, #0]
 8021374:	240a      	movs	r4, #10
 8021376:	6044      	str	r4, [r0, #4]
 8021378:	f100 040c 	add.w	r4, r0, #12
 802137c:	6084      	str	r4, [r0, #8]
 802137e:	8181      	strh	r1, [r0, #12]
 8021380:	4621      	mov	r1, r4
 8021382:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8021384:	f8c1 4006 	str.w	r4, [r1, #6]
 8021388:	6881      	ldr	r1, [r0, #8]
 802138a:	804a      	strh	r2, [r1, #2]
 802138c:	6881      	ldr	r1, [r0, #8]
 802138e:	808b      	strh	r3, [r1, #4]
 8021390:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.FormatEventDisconnectConfirmation:

08021392 <FormatEventDisconnectConfirmation>:
 8021392:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021394:	2305      	movs	r3, #5
 8021396:	7003      	strb	r3, [r0, #0]
 8021398:	2304      	movs	r3, #4
 802139a:	6043      	str	r3, [r0, #4]
 802139c:	f100 030c 	add.w	r3, r0, #12
 80213a0:	6083      	str	r3, [r0, #8]
 80213a2:	8182      	strh	r2, [r0, #12]
 80213a4:	81c1      	strh	r1, [r0, #14]
 80213a6:	4770      	bx	lr

Disassembly of section i.FormatEventDisconnectIndication:

080213a8 <FormatEventDisconnectIndication>:
 80213a8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80213aa:	2304      	movs	r3, #4
 80213ac:	7003      	strb	r3, [r0, #0]
 80213ae:	6043      	str	r3, [r0, #4]
 80213b0:	f100 030c 	add.w	r3, r0, #12
 80213b4:	6083      	str	r3, [r0, #8]
 80213b6:	7382      	strb	r2, [r0, #14]
 80213b8:	8181      	strh	r1, [r0, #12]
 80213ba:	4770      	bx	lr

Disassembly of section i.FragmentPacket:

080213bc <FragmentPacket>:
 80213bc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213c0:	b085      	sub	sp, #20
 80213c2:	4681      	mov	r9, r0
 80213c4:	a813      	add	r0, sp, #76	; 0x4c
 80213c6:	4693      	mov	fp, r2
 80213c8:	e890 0124 	ldmia.w	r0, {r2, r5, r8}
 80213cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80213ce:	f1bb 0f02 	cmp.w	fp, #2
 80213d2:	d006      	beq.n	80213e2 <FragmentPacket+0x26>
 80213d4:	2004      	movs	r0, #4
 80213d6:	06b9      	lsls	r1, r7, #26
 80213d8:	d505      	bpl.n	80213e6 <FragmentPacket+0x2a>
 80213da:	f8b9 6042 	ldrh.w	r6, [r9, #66]	; 0x42
 80213de:	b926      	cbnz	r6, 80213ea <FragmentPacket+0x2e>
 80213e0:	e001      	b.n	80213e6 <FragmentPacket+0x2a>
 80213e2:	2006      	movs	r0, #6
 80213e4:	e7f7      	b.n	80213d6 <FragmentPacket+0x1a>
 80213e6:	f8b9 6020 	ldrh.w	r6, [r9, #32]
 80213ea:	462c      	mov	r4, r5
 80213ec:	1a31      	subs	r1, r6, r0
 80213ee:	b28b      	uxth	r3, r1
 80213f0:	42a3      	cmp	r3, r4
 80213f2:	d201      	bcs.n	80213f8 <FragmentPacket+0x3c>
 80213f4:	b28c      	uxth	r4, r1
 80213f6:	e001      	b.n	80213fc <FragmentPacket+0x40>
 80213f8:	f047 0704 	orr.w	r7, r7, #4
 80213fc:	ab01      	add	r3, sp, #4
 80213fe:	f8cd 8010 	str.w	r8, [sp, #16]
 8021402:	9700      	str	r7, [sp, #0]
 8021404:	e883 0015 	stmia.w	r3, {r0, r2, r4}
 8021408:	465a      	mov	r2, fp
 802140a:	4648      	mov	r0, r9
 802140c:	9b08      	ldr	r3, [sp, #32]
 802140e:	9906      	ldr	r1, [sp, #24]
 8021410:	f000 fe7e 	bl	8022110 <L2CAP_DataWrite>
 8021414:	2800      	cmp	r0, #0
 8021416:	d124      	bne.n	8021462 <FragmentPacket+0xa6>
 8021418:	1b29      	subs	r1, r5, r4
 802141a:	040d      	lsls	r5, r1, #16
 802141c:	0c2d      	lsrs	r5, r5, #16
 802141e:	d020      	beq.n	8021462 <FragmentPacket+0xa6>
 8021420:	f427 5040 	bic.w	r0, r7, #12288	; 0x3000
 8021424:	44a0      	add	r8, r4
 8021426:	f440 5780 	orr.w	r7, r0, #4096	; 0x1000
 802142a:	f04f 0a00 	mov.w	sl, #0
 802142e:	462c      	mov	r4, r5
 8021430:	42b5      	cmp	r5, r6
 8021432:	d901      	bls.n	8021438 <FragmentPacket+0x7c>
 8021434:	4634      	mov	r4, r6
 8021436:	e001      	b.n	802143c <FragmentPacket+0x80>
 8021438:	f047 0704 	orr.w	r7, r7, #4
 802143c:	e9cd 7a00 	strd	r7, sl, [sp]
 8021440:	a902      	add	r1, sp, #8
 8021442:	4650      	mov	r0, sl
 8021444:	e881 0111 	stmia.w	r1, {r0, r4, r8}
 8021448:	465a      	mov	r2, fp
 802144a:	4648      	mov	r0, r9
 802144c:	9b08      	ldr	r3, [sp, #32]
 802144e:	9906      	ldr	r1, [sp, #24]
 8021450:	f000 fe5e 	bl	8022110 <L2CAP_DataWrite>
 8021454:	2800      	cmp	r0, #0
 8021456:	d104      	bne.n	8021462 <FragmentPacket+0xa6>
 8021458:	1b29      	subs	r1, r5, r4
 802145a:	040d      	lsls	r5, r1, #16
 802145c:	0c2d      	lsrs	r5, r5, #16
 802145e:	44a0      	add	r8, r4
 8021460:	d1e5      	bne.n	802142e <FragmentPacket+0x72>
 8021462:	b009      	add	sp, #36	; 0x24
 8021464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.FreeACLDataList:

08021468 <FreeACLDataList>:
 8021468:	2114      	movs	r1, #20
 802146a:	f7f7 bc25 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.FreeChannelInfoList:

0802146e <FreeChannelInfoList>:
 802146e:	b510      	push	{r4, lr}
 8021470:	0004      	movs	r4, r0
 8021472:	d005      	beq.n	8021480 <FreeChannelInfoList+0x12>
 8021474:	4620      	mov	r0, r4
 8021476:	6821      	ldr	r1, [r4, #0]
 8021478:	f7ff fe9f 	bl	80211ba <DeleteChannelInfoEntry>
 802147c:	2800      	cmp	r0, #0
 802147e:	d0f9      	beq.n	8021474 <FreeChannelInfoList+0x6>
 8021480:	bd10      	pop	{r4, pc}

Disassembly of section i.FreeConnectionInfoList:

08021482 <FreeConnectionInfoList>:
 8021482:	b570      	push	{r4, r5, r6, lr}
 8021484:	460e      	mov	r6, r1
 8021486:	680c      	ldr	r4, [r1, #0]
 8021488:	e00a      	b.n	80214a0 <FreeConnectionInfoList+0x1e>
 802148a:	4625      	mov	r5, r4
 802148c:	e9d5 0408 	ldrd	r0, r4, [r5, #32]
 8021490:	b118      	cbz	r0, 802149a <FreeConnectionInfoList+0x18>
 8021492:	f105 0020 	add.w	r0, r5, #32
 8021496:	f000 f81a 	bl	80214ce <FreeFixedChannelInfoList>
 802149a:	4628      	mov	r0, r5
 802149c:	f7f7 fc1b 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80214a0:	2c00      	cmp	r4, #0
 80214a2:	d1f2      	bne.n	802148a <FreeConnectionInfoList+0x8>
 80214a4:	2000      	movs	r0, #0
 80214a6:	6030      	str	r0, [r6, #0]
 80214a8:	bd70      	pop	{r4, r5, r6, pc}

080214aa <FreeConnectionInfoList>:
 80214aa:	b570      	push	{r4, r5, r6, lr}
 80214ac:	460e      	mov	r6, r1
 80214ae:	0005      	movs	r5, r0
 80214b0:	d00c      	beq.n	80214cc <FreeConnectionInfoList+0x22>
 80214b2:	682c      	ldr	r4, [r5, #0]
 80214b4:	e006      	b.n	80214c4 <FreeConnectionInfoList+0x1a>
 80214b6:	4621      	mov	r1, r4
 80214b8:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80214ba:	b11e      	cbz	r6, 80214c4 <FreeConnectionInfoList+0x1a>
 80214bc:	2201      	movs	r2, #1
 80214be:	4630      	mov	r0, r6
 80214c0:	f002 fffb 	bl	80244ba <CleanupSDPConnection>
 80214c4:	2c00      	cmp	r4, #0
 80214c6:	d1f6      	bne.n	80214b6 <FreeConnectionInfoList+0xc>
 80214c8:	2000      	movs	r0, #0
 80214ca:	6028      	str	r0, [r5, #0]
 80214cc:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FreeFixedChannelInfoList:

080214ce <FreeFixedChannelInfoList>:
 80214ce:	210c      	movs	r1, #12
 80214d0:	f7f7 bbf2 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.FreeIdentifierInfoList:

080214d4 <FreeIdentifierInfoList>:
 80214d4:	b570      	push	{r4, r5, r6, lr}
 80214d6:	460e      	mov	r6, r1
 80214d8:	4605      	mov	r5, r0
 80214da:	6804      	ldr	r4, [r0, #0]
 80214dc:	e009      	b.n	80214f2 <FreeIdentifierInfoList+0x1e>
 80214de:	68e1      	ldr	r1, [r4, #12]
 80214e0:	b119      	cbz	r1, 80214ea <FreeIdentifierInfoList+0x16>
 80214e2:	b116      	cbz	r6, 80214ea <FreeIdentifierInfoList+0x16>
 80214e4:	6820      	ldr	r0, [r4, #0]
 80214e6:	f7f8 f9d5 	bl	8019894 <BTPS_StopTimer>
 80214ea:	4620      	mov	r0, r4
 80214ec:	6a24      	ldr	r4, [r4, #32]
 80214ee:	f7f7 fbf2 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80214f2:	2c00      	cmp	r4, #0
 80214f4:	d1f3      	bne.n	80214de <FreeIdentifierInfoList+0xa>
 80214f6:	2000      	movs	r0, #0
 80214f8:	6028      	str	r0, [r5, #0]
 80214fa:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FreeL2CAPContextInformation:

080214fc <FreeL2CAPContextInformation>:
 80214fc:	b510      	push	{r4, lr}
 80214fe:	0004      	movs	r4, r0
 8021500:	d01a      	beq.n	8021538 <FreeL2CAPContextInformation+0x3c>
 8021502:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8021504:	2800      	cmp	r0, #0
 8021506:	d017      	beq.n	8021538 <FreeL2CAPContextInformation+0x3c>
 8021508:	6f41      	ldr	r1, [r0, #116]	; 0x74
 802150a:	6800      	ldr	r0, [r0, #0]
 802150c:	f7f8 f882 	bl	8019614 <VerifySharedBufferPointer>
 8021510:	b918      	cbnz	r0, 802151a <FreeL2CAPContextInformation+0x1e>
 8021512:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8021514:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8021516:	f7f1 ff6b 	bl	80133f0 <BTPS_FreeMemory>
 802151a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802151c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 802151e:	b108      	cbz	r0, 8021524 <FreeL2CAPContextInformation+0x28>
 8021520:	f7f1 ff66 	bl	80133f0 <BTPS_FreeMemory>
 8021524:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8021526:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8021528:	b108      	cbz	r0, 802152e <FreeL2CAPContextInformation+0x32>
 802152a:	f7f1 ff61 	bl	80133f0 <BTPS_FreeMemory>
 802152e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8021530:	f7f1 ff5e 	bl	80133f0 <BTPS_FreeMemory>
 8021534:	2000      	movs	r0, #0
 8021536:	6460      	str	r0, [r4, #68]	; 0x44
 8021538:	bd10      	pop	{r4, pc}

Disassembly of section i.FreeRegistryInfoList:

0802153a <FreeRegistryInfoList>:
 802153a:	2110      	movs	r1, #16
 802153c:	f7f7 bbbc 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.GetNextChannelInfoEntry:

08021540 <GetNextChannelInfoEntry>:
 8021540:	4603      	mov	r3, r0
 8021542:	2254      	movs	r2, #84	; 0x54
 8021544:	2006      	movs	r0, #6
 8021546:	f7f7 bbcb 	b.w	8018ce0 <BSC_GetNextGenericListEntry>

Disassembly of section i.GetNextDataIdentifier:

0802154c <GetNextDataIdentifier>:
 802154c:	4a05      	ldr	r2, [pc, #20]	; (8021564 <GetNextDataIdentifier+0x18>)
 802154e:	8890      	ldrh	r0, [r2, #4]
 8021550:	1c41      	adds	r1, r0, #1
 8021552:	0409      	lsls	r1, r1, #16
 8021554:	0c09      	lsrs	r1, r1, #16
 8021556:	8091      	strh	r1, [r2, #4]
 8021558:	d101      	bne.n	802155e <GetNextDataIdentifier+0x12>
 802155a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802155e:	8091      	strh	r1, [r2, #4]
 8021560:	4770      	bx	lr
 8021562:	0000      	.short	0x0000
 8021564:	20000030 	.word	0x20000030

Disassembly of section i.GetNextIDNumber:

08021568 <GetNextIDNumber>:
 8021568:	4903      	ldr	r1, [pc, #12]	; (8021578 <GetNextIDNumber+0x10>)
 802156a:	6888      	ldr	r0, [r1, #8]
 802156c:	1c40      	adds	r0, r0, #1
 802156e:	6088      	str	r0, [r1, #8]
 8021570:	d501      	bpl.n	8021576 <GetNextIDNumber+0xe>
 8021572:	2001      	movs	r0, #1
 8021574:	6088      	str	r0, [r1, #8]
 8021576:	4770      	bx	lr
 8021578:	20000030 	.word	0x20000030

Disassembly of section i.HCI_ACL_Data_Callback:

0802157c <HCI_ACL_Data_Callback>:
 802157c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021580:	001d      	movs	r5, r3
 8021582:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8021584:	4614      	mov	r4, r2
 8021586:	460f      	mov	r7, r1
 8021588:	4682      	mov	sl, r0
 802158a:	d07d      	beq.n	8021688 <HCI_ACL_Data_Callback+0x10c>
 802158c:	2e00      	cmp	r6, #0
 802158e:	d07b      	beq.n	8021688 <HCI_ACL_Data_Callback+0x10c>
 8021590:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8021594:	d278      	bcs.n	8021688 <HCI_ACL_Data_Callback+0x10c>
 8021596:	4602      	mov	r2, r0
 8021598:	a901      	add	r1, sp, #4
 802159a:	a802      	add	r0, sp, #8
 802159c:	f7ff fc61 	bl	8020e62 <AcquireL2CAPStackInformation>
 80215a0:	2800      	cmp	r0, #0
 80215a2:	d171      	bne.n	8021688 <HCI_ACL_Data_Callback+0x10c>
 80215a4:	f3c4 3001 	ubfx	r0, r4, #12, #2
 80215a8:	2801      	cmp	r0, #1
 80215aa:	9801      	ldr	r0, [sp, #4]
 80215ac:	f04f 0900 	mov.w	r9, #0
 80215b0:	4639      	mov	r1, r7
 80215b2:	f100 0050 	add.w	r0, r0, #80	; 0x50
 80215b6:	d04f      	beq.n	8021658 <HCI_ACL_Data_Callback+0xdc>
 80215b8:	f002 f927 	bl	802380a <SearchACLPacketEntryByConnectionHandle>
 80215bc:	0004      	movs	r4, r0
 80215be:	d008      	beq.n	80215d2 <HCI_ACL_Data_Callback+0x56>
 80215c0:	4650      	mov	r0, sl
 80215c2:	68e1      	ldr	r1, [r4, #12]
 80215c4:	f7f8 f966 	bl	8019894 <BTPS_StopTimer>
 80215c8:	2200      	movs	r2, #0
 80215ca:	4650      	mov	r0, sl
 80215cc:	68e1      	ldr	r1, [r4, #12]
 80215ce:	f001 f87c 	bl	80226ca <L2CAP_ReceiveTimeout>
 80215d2:	8834      	ldrh	r4, [r6, #0]
 80215d4:	1d20      	adds	r0, r4, #4
 80215d6:	b280      	uxth	r0, r0
 80215d8:	42a8      	cmp	r0, r5
 80215da:	d806      	bhi.n	80215ea <HCI_ACL_Data_Callback+0x6e>
 80215dc:	4633      	mov	r3, r6
 80215de:	462a      	mov	r2, r5
 80215e0:	4639      	mov	r1, r7
 80215e2:	9801      	ldr	r0, [sp, #4]
 80215e4:	f001 fe85 	bl	80232f2 <ProcessL2CAPDataPacket>
 80215e8:	e075      	b.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 80215ea:	462b      	mov	r3, r5
 80215ec:	4622      	mov	r2, r4
 80215ee:	4639      	mov	r1, r7
 80215f0:	9600      	str	r6, [sp, #0]
 80215f2:	9801      	ldr	r0, [sp, #4]
 80215f4:	f002 f997 	bl	8023926 <VerifyACLHeader>
 80215f8:	2800      	cmp	r0, #0
 80215fa:	d06c      	beq.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 80215fc:	f104 001c 	add.w	r0, r4, #28
 8021600:	f7f1 fedc 	bl	80133bc <BTPS_AllocateMemory>
 8021604:	0004      	movs	r4, r0
 8021606:	d066      	beq.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 8021608:	8027      	strh	r7, [r4, #0]
 802160a:	f8a4 9004 	strh.w	r9, [r4, #4]
 802160e:	9801      	ldr	r0, [sp, #4]
 8021610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8021614:	464f      	mov	r7, r9
 8021616:	69c3      	ldr	r3, [r0, #28]
 8021618:	6800      	ldr	r0, [r0, #0]
 802161a:	434b      	muls	r3, r1
 802161c:	4a30      	ldr	r2, [pc, #192]	; (80216e0 <HCI_ACL_Data_Callback+0x164>)
 802161e:	2100      	movs	r1, #0
 8021620:	f7f8 f8ee 	bl	8019800 <BTPS_StartTimer>
 8021624:	60e0      	str	r0, [r4, #12]
 8021626:	8125      	strh	r5, [r4, #8]
 8021628:	f104 0018 	add.w	r0, r4, #24
 802162c:	6120      	str	r0, [r4, #16]
 802162e:	80e7      	strh	r7, [r4, #6]
 8021630:	462a      	mov	r2, r5
 8021632:	4631      	mov	r1, r6
 8021634:	6167      	str	r7, [r4, #20]
 8021636:	f7f1 ff3e 	bl	80134b6 <BTPS_MemCopy>
 802163a:	9801      	ldr	r0, [sp, #4]
 802163c:	4621      	mov	r1, r4
 802163e:	3050      	adds	r0, #80	; 0x50
 8021640:	f002 f8da 	bl	80237f8 <QueueACLPacket>
 8021644:	bb98      	cbnz	r0, 80216ae <HCI_ACL_Data_Callback+0x132>
 8021646:	9801      	ldr	r0, [sp, #4]
 8021648:	68e1      	ldr	r1, [r4, #12]
 802164a:	6800      	ldr	r0, [r0, #0]
 802164c:	f7f8 f922 	bl	8019894 <BTPS_StopTimer>
 8021650:	4620      	mov	r0, r4
 8021652:	f7f1 fecd 	bl	80133f0 <BTPS_FreeMemory>
 8021656:	e03e      	b.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 8021658:	f002 f8d7 	bl	802380a <SearchACLPacketEntryByConnectionHandle>
 802165c:	0004      	movs	r4, r0
 802165e:	d03a      	beq.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 8021660:	6920      	ldr	r0, [r4, #16]
 8021662:	8921      	ldrh	r1, [r4, #8]
 8021664:	8802      	ldrh	r2, [r0, #0]
 8021666:	194b      	adds	r3, r1, r5
 8021668:	1d12      	adds	r2, r2, #4
 802166a:	fa1f f882 	uxth.w	r8, r2
 802166e:	4543      	cmp	r3, r8
 8021670:	d828      	bhi.n	80216c4 <HCI_ACL_Data_Callback+0x148>
 8021672:	4408      	add	r0, r1
 8021674:	462a      	mov	r2, r5
 8021676:	4631      	mov	r1, r6
 8021678:	f7f1 ff1d 	bl	80134b6 <BTPS_MemCopy>
 802167c:	8920      	ldrh	r0, [r4, #8]
 802167e:	4428      	add	r0, r5
 8021680:	b280      	uxth	r0, r0
 8021682:	8120      	strh	r0, [r4, #8]
 8021684:	4540      	cmp	r0, r8
 8021686:	e000      	b.n	802168a <HCI_ACL_Data_Callback+0x10e>
 8021688:	e028      	b.n	80216dc <HCI_ACL_Data_Callback+0x160>
 802168a:	d311      	bcc.n	80216b0 <HCI_ACL_Data_Callback+0x134>
 802168c:	4650      	mov	r0, sl
 802168e:	68e1      	ldr	r1, [r4, #12]
 8021690:	f7f8 f900 	bl	8019894 <BTPS_StopTimer>
 8021694:	f8c4 900c 	str.w	r9, [r4, #12]
 8021698:	8922      	ldrh	r2, [r4, #8]
 802169a:	4639      	mov	r1, r7
 802169c:	6923      	ldr	r3, [r4, #16]
 802169e:	9801      	ldr	r0, [sp, #4]
 80216a0:	f001 fe27 	bl	80232f2 <ProcessL2CAPDataPacket>
 80216a4:	9801      	ldr	r0, [sp, #4]
 80216a6:	4621      	mov	r1, r4
 80216a8:	3050      	adds	r0, #80	; 0x50
 80216aa:	f7ff fd77 	bl	802119c <DeleteACLPacketEntry>
 80216ae:	e012      	b.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 80216b0:	9801      	ldr	r0, [sp, #4]
 80216b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80216b6:	69c2      	ldr	r2, [r0, #28]
 80216b8:	6800      	ldr	r0, [r0, #0]
 80216ba:	434a      	muls	r2, r1
 80216bc:	68e1      	ldr	r1, [r4, #12]
 80216be:	f7f8 f80f 	bl	80196e0 <BTPS_ChangeTimer>
 80216c2:	e008      	b.n	80216d6 <HCI_ACL_Data_Callback+0x15a>
 80216c4:	4650      	mov	r0, sl
 80216c6:	68e1      	ldr	r1, [r4, #12]
 80216c8:	f7f8 f8e4 	bl	8019894 <BTPS_StopTimer>
 80216cc:	2200      	movs	r2, #0
 80216ce:	4650      	mov	r0, sl
 80216d0:	68e1      	ldr	r1, [r4, #12]
 80216d2:	f000 fffa 	bl	80226ca <L2CAP_ReceiveTimeout>
 80216d6:	9802      	ldr	r0, [sp, #8]
 80216d8:	f7f7 ff64 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80216dc:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80216e0:	080226cb 	.word	0x080226cb

Disassembly of section i.HandleChannelDisconnection:

080216e4 <HandleChannelDisconnection>:
 80216e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80216e8:	000c      	movs	r4, r1
 80216ea:	4605      	mov	r5, r0
 80216ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80216f0:	d05a      	beq.n	80217a8 <HandleChannelDisconnection+0xc4>
 80216f2:	7e20      	ldrb	r0, [r4, #24]
 80216f4:	8926      	ldrh	r6, [r4, #8]
 80216f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80216f8:	f000 0801 	and.w	r8, r0, #1
 80216fc:	b111      	cbz	r1, 8021704 <HandleChannelDisconnection+0x20>
 80216fe:	6828      	ldr	r0, [r5, #0]
 8021700:	f7f8 f8c8 	bl	8019894 <BTPS_StopTimer>
 8021704:	e9d4 0100 	ldrd	r0, r1, [r4]
 8021708:	e9cd 0101 	strd	r0, r1, [sp, #4]
 802170c:	4621      	mov	r1, r4
 802170e:	4628      	mov	r0, r5
 8021710:	f7ff fc66 	bl	8020fe0 <CleanupChannel>
 8021714:	f105 0458 	add.w	r4, r5, #88	; 0x58
 8021718:	f5b6 6f70 	cmp.w	r6, #3840	; 0xf00
 802171c:	d239      	bcs.n	8021792 <HandleChannelDisconnection+0xae>
 802171e:	1f20      	subs	r0, r4, #4
 8021720:	9000      	str	r0, [sp, #0]
 8021722:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021726:	2354      	movs	r3, #84	; 0x54
 8021728:	2208      	movs	r2, #8
 802172a:	a903      	add	r1, sp, #12
 802172c:	2003      	movs	r0, #3
 802172e:	f7f7 fd04 	bl	801913a <BSC_SearchGenericListEntry>
 8021732:	bb10      	cbnz	r0, 802177a <HandleChannelDisconnection+0x96>
 8021734:	4631      	mov	r1, r6
 8021736:	4620      	mov	r0, r4
 8021738:	f002 f8a7 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 802173c:	0004      	movs	r4, r0
 802173e:	d020      	beq.n	8021782 <HandleChannelDisconnection+0x9e>
 8021740:	2103      	movs	r1, #3
 8021742:	2704      	movs	r7, #4
 8021744:	f1b8 0f00 	cmp.w	r8, #0
 8021748:	d007      	beq.n	802175a <HandleChannelDisconnection+0x76>
 802174a:	6968      	ldr	r0, [r5, #20]
 802174c:	b1c0      	cbz	r0, 8021780 <HandleChannelDisconnection+0x9c>
 802174e:	70a1      	strb	r1, [r4, #2]
 8021750:	78e0      	ldrb	r0, [r4, #3]
 8021752:	b198      	cbz	r0, 802177c <HandleChannelDisconnection+0x98>
 8021754:	2803      	cmp	r0, #3
 8021756:	d011      	beq.n	802177c <HandleChannelDisconnection+0x98>
 8021758:	e004      	b.n	8021764 <HandleChannelDisconnection+0x80>
 802175a:	78e0      	ldrb	r0, [r4, #3]
 802175c:	b180      	cbz	r0, 8021780 <HandleChannelDisconnection+0x9c>
 802175e:	2803      	cmp	r0, #3
 8021760:	d00e      	beq.n	8021780 <HandleChannelDisconnection+0x9c>
 8021762:	70a1      	strb	r1, [r4, #2]
 8021764:	692b      	ldr	r3, [r5, #16]
 8021766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802176a:	4343      	muls	r3, r0
 802176c:	89a1      	ldrh	r1, [r4, #12]
 802176e:	4a0f      	ldr	r2, [pc, #60]	; (80217ac <HandleChannelDisconnection+0xc8>)
 8021770:	6828      	ldr	r0, [r5, #0]
 8021772:	f7f8 f845 	bl	8019800 <BTPS_StartTimer>
 8021776:	61e0      	str	r0, [r4, #28]
 8021778:	b110      	cbz	r0, 8021780 <HandleChannelDisconnection+0x9c>
 802177a:	e006      	b.n	802178a <HandleChannelDisconnection+0xa6>
 802177c:	696b      	ldr	r3, [r5, #20]
 802177e:	e7f2      	b.n	8021766 <HandleChannelDisconnection+0x82>
 8021780:	70a7      	strb	r7, [r4, #2]
 8021782:	4631      	mov	r1, r6
 8021784:	4628      	mov	r0, r5
 8021786:	f001 fc64 	bl	8023052 <LP_DisconnectReq>
 802178a:	2000      	movs	r0, #0
 802178c:	b004      	add	sp, #16
 802178e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021792:	2200      	movs	r2, #0
 8021794:	a901      	add	r1, sp, #4
 8021796:	4620      	mov	r0, r4
 8021798:	f002 f855 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 802179c:	0001      	movs	r1, r0
 802179e:	d003      	beq.n	80217a8 <HandleChannelDisconnection+0xc4>
 80217a0:	4620      	mov	r0, r4
 80217a2:	f7ff fd22 	bl	80211ea <DeleteConnectionInfoEntry>
 80217a6:	e7f0      	b.n	802178a <HandleChannelDisconnection+0xa6>
 80217a8:	4638      	mov	r0, r7
 80217aa:	e7ef      	b.n	802178c <HandleChannelDisconnection+0xa8>
 80217ac:	080220db 	.word	0x080220db

Disassembly of section i.HandleReadDataError:

080217b0 <HandleReadDataError>:
 80217b0:	b530      	push	{r4, r5, lr}
 80217b2:	b085      	sub	sp, #20
 80217b4:	240a      	movs	r4, #10
 80217b6:	f88d 4000 	strb.w	r4, [sp]
 80217ba:	2406      	movs	r4, #6
 80217bc:	9d08      	ldr	r5, [sp, #32]
 80217be:	9401      	str	r4, [sp, #4]
 80217c0:	ac03      	add	r4, sp, #12
 80217c2:	f8ad 200e 	strh.w	r2, [sp, #14]
 80217c6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80217ca:	9402      	str	r4, [sp, #8]
 80217cc:	462a      	mov	r2, r5
 80217ce:	4669      	mov	r1, sp
 80217d0:	4798      	blx	r3
 80217d2:	b005      	add	sp, #20
 80217d4:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.L2CAP_Cleanup:

080217d6 <L2CAP_Cleanup>:
 80217d6:	b51c      	push	{r2, r3, r4, lr}
 80217d8:	4604      	mov	r4, r0
 80217da:	4602      	mov	r2, r0
 80217dc:	4669      	mov	r1, sp
 80217de:	a801      	add	r0, sp, #4
 80217e0:	f7ff fb3f 	bl	8020e62 <AcquireL2CAPStackInformation>
 80217e4:	b120      	cbz	r0, 80217f0 <L2CAP_Cleanup+0x1a>
 80217e6:	bd1c      	pop	{r2, r3, r4, pc}
 80217e8:	4601      	mov	r1, r0
 80217ea:	9800      	ldr	r0, [sp, #0]
 80217ec:	f7ff ff7a 	bl	80216e4 <HandleChannelDisconnection>
 80217f0:	9800      	ldr	r0, [sp, #0]
 80217f2:	2100      	movs	r1, #0
 80217f4:	3054      	adds	r0, #84	; 0x54
 80217f6:	f7ff fea3 	bl	8021540 <GetNextChannelInfoEntry>
 80217fa:	2800      	cmp	r0, #0
 80217fc:	d1f4      	bne.n	80217e8 <L2CAP_Cleanup+0x12>
 80217fe:	9800      	ldr	r0, [sp, #0]
 8021800:	303c      	adds	r0, #60	; 0x3c
 8021802:	f7ff fe9a 	bl	802153a <FreeRegistryInfoList>
 8021806:	9800      	ldr	r0, [sp, #0]
 8021808:	306c      	adds	r0, #108	; 0x6c
 802180a:	f7ff fe96 	bl	802153a <FreeRegistryInfoList>
 802180e:	9800      	ldr	r0, [sp, #0]
 8021810:	304c      	adds	r0, #76	; 0x4c
 8021812:	f7ff fe29 	bl	8021468 <FreeACLDataList>
 8021816:	9800      	ldr	r0, [sp, #0]
 8021818:	3050      	adds	r0, #80	; 0x50
 802181a:	f7ff fe25 	bl	8021468 <FreeACLDataList>
 802181e:	9800      	ldr	r0, [sp, #0]
 8021820:	3054      	adds	r0, #84	; 0x54
 8021822:	f7ff fe24 	bl	802146e <FreeChannelInfoList>
 8021826:	9900      	ldr	r1, [sp, #0]
 8021828:	2201      	movs	r2, #1
 802182a:	4620      	mov	r0, r4
 802182c:	3158      	adds	r1, #88	; 0x58
 802182e:	f7ff fe28 	bl	8021482 <FreeConnectionInfoList>
 8021832:	9800      	ldr	r0, [sp, #0]
 8021834:	2101      	movs	r1, #1
 8021836:	305c      	adds	r0, #92	; 0x5c
 8021838:	f7ff fe4c 	bl	80214d4 <FreeIdentifierInfoList>
 802183c:	9801      	ldr	r0, [sp, #4]
 802183e:	f7ff fe5d 	bl	80214fc <FreeL2CAPContextInformation>
 8021842:	9801      	ldr	r0, [sp, #4]
 8021844:	f7f7 feae 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8021848:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.L2CAP_ConfigRequestEvent:

0802184c <L2CAP_ConfigRequestEvent>:
 802184c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021850:	4606      	mov	r6, r0
 8021852:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8021856:	b086      	sub	sp, #24
 8021858:	4691      	mov	r9, r2
 802185a:	3054      	adds	r0, #84	; 0x54
 802185c:	f001 ffe9 	bl	8023832 <SearchChannelInfoEntry>
 8021860:	0004      	movs	r4, r0
 8021862:	f04f 0b00 	mov.w	fp, #0
 8021866:	d017      	beq.n	8021898 <L2CAP_ConfigRequestEvent+0x4c>
 8021868:	7ae0      	ldrb	r0, [r4, #11]
 802186a:	2806      	cmp	r0, #6
 802186c:	d111      	bne.n	8021892 <L2CAP_ConfigRequestEvent+0x46>
 802186e:	2005      	movs	r0, #5
 8021870:	72e0      	strb	r0, [r4, #11]
 8021872:	f884 b051 	strb.w	fp, [r4, #81]	; 0x51
 8021876:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
 802187a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802187c:	b980      	cbnz	r0, 80218a0 <L2CAP_ConfigRequestEvent+0x54>
 802187e:	69b3      	ldr	r3, [r6, #24]
 8021880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021884:	4343      	muls	r3, r0
 8021886:	88e1      	ldrh	r1, [r4, #6]
 8021888:	4a74      	ldr	r2, [pc, #464]	; (8021a5c <L2CAP_ConfigRequestEvent+0x210>)
 802188a:	6830      	ldr	r0, [r6, #0]
 802188c:	f7f7 ffb8 	bl	8019800 <BTPS_StartTimer>
 8021890:	64e0      	str	r0, [r4, #76]	; 0x4c
 8021892:	7ae0      	ldrb	r0, [r4, #11]
 8021894:	2805      	cmp	r0, #5
 8021896:	d003      	beq.n	80218a0 <L2CAP_ConfigRequestEvent+0x54>
 8021898:	2002      	movs	r0, #2
 802189a:	f8ad 0010 	strh.w	r0, [sp, #16]
 802189e:	e0cb      	b.n	8021a38 <L2CAP_ConfigRequestEvent+0x1ec>
 80218a0:	f8b6 a064 	ldrh.w	sl, [r6, #100]	; 0x64
 80218a4:	f109 0008 	add.w	r0, r9, #8
 80218a8:	ea5f 71ca 	movs.w	r1, sl, lsl #31
 80218ac:	9002      	str	r0, [sp, #8]
 80218ae:	d008      	beq.n	80218c2 <L2CAP_ConfigRequestEvent+0x76>
 80218b0:	f8b6 0060 	ldrh.w	r0, [r6, #96]	; 0x60
 80218b4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80218b6:	1f00      	subs	r0, r0, #4
 80218b8:	b287      	uxth	r7, r0
 80218ba:	2d00      	cmp	r5, #0
 80218bc:	d07e      	beq.n	80219bc <L2CAP_ConfigRequestEvent+0x170>
 80218be:	7828      	ldrb	r0, [r5, #0]
 80218c0:	e081      	b.n	80219c6 <L2CAP_ConfigRequestEvent+0x17a>
 80218c2:	f8d6 8070 	ldr.w	r8, [r6, #112]	; 0x70
 80218c6:	2002      	movs	r0, #2
 80218c8:	f888 0000 	strb.w	r0, [r8]
 80218cc:	2040      	movs	r0, #64	; 0x40
 80218ce:	f8c8 0004 	str.w	r0, [r8, #4]
 80218d2:	f108 000c 	add.w	r0, r8, #12
 80218d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80218da:	f8b6 1062 	ldrh.w	r1, [r6, #98]	; 0x62
 80218de:	f8a8 100c 	strh.w	r1, [r8, #12]
 80218e2:	f8a8 b00e 	strh.w	fp, [r8, #14]
 80218e6:	f8ad b010 	strh.w	fp, [sp, #16]
 80218ea:	f88d b014 	strb.w	fp, [sp, #20]
 80218ee:	f8b6 0060 	ldrh.w	r0, [r6, #96]	; 0x60
 80218f2:	2804      	cmp	r0, #4
 80218f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80218f6:	d801      	bhi.n	80218fc <L2CAP_ConfigRequestEvent+0xb0>
 80218f8:	b908      	cbnz	r0, 80218fe <L2CAP_ConfigRequestEvent+0xb2>
 80218fa:	e051      	b.n	80219a0 <L2CAP_ConfigRequestEvent+0x154>
 80218fc:	b178      	cbz	r0, 802191e <L2CAP_ConfigRequestEvent+0xd2>
 80218fe:	7807      	ldrb	r7, [r0, #0]
 8021900:	1c45      	adds	r5, r0, #1
 8021902:	a905      	add	r1, sp, #20
 8021904:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8021908:	e9cd 0100 	strd	r0, r1, [sp]
 802190c:	2301      	movs	r3, #1
 802190e:	4622      	mov	r2, r4
 8021910:	4629      	mov	r1, r5
 8021912:	4638      	mov	r0, r7
 8021914:	f001 fc3b 	bl	802318e <ParseOptionsToAPI>
 8021918:	f8ad 0010 	strh.w	r0, [sp, #16]
 802191c:	b988      	cbnz	r0, 8021942 <L2CAP_ConfigRequestEvent+0xf6>
 802191e:	f8b6 0060 	ldrh.w	r0, [r6, #96]	; 0x60
 8021922:	a905      	add	r1, sp, #20
 8021924:	1f00      	subs	r0, r0, #4
 8021926:	b287      	uxth	r7, r0
 8021928:	f8d8 0008 	ldr.w	r0, [r8, #8]
 802192c:	9d02      	ldr	r5, [sp, #8]
 802192e:	e9cd 0100 	strd	r0, r1, [sp]
 8021932:	2301      	movs	r3, #1
 8021934:	4622      	mov	r2, r4
 8021936:	4629      	mov	r1, r5
 8021938:	4638      	mov	r0, r7
 802193a:	f001 fc28 	bl	802318e <ParseOptionsToAPI>
 802193e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8021942:	b280      	uxth	r0, r0
 8021944:	2803      	cmp	r0, #3
 8021946:	d12b      	bne.n	80219a0 <L2CAP_ConfigRequestEvent+0x154>
 8021948:	b33d      	cbz	r5, 802199a <L2CAP_ConfigRequestEvent+0x14e>
 802194a:	b93f      	cbnz	r7, 802195c <L2CAP_ConfigRequestEvent+0x110>
 802194c:	e025      	b.n	802199a <L2CAP_ConfigRequestEvent+0x14e>
 802194e:	7868      	ldrb	r0, [r5, #1]
 8021950:	1cad      	adds	r5, r5, #2
 8021952:	4405      	add	r5, r0
 8021954:	7868      	ldrb	r0, [r5, #1]
 8021956:	1a38      	subs	r0, r7, r0
 8021958:	1e80      	subs	r0, r0, #2
 802195a:	b287      	uxth	r7, r0
 802195c:	7828      	ldrb	r0, [r5, #0]
 802195e:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8021962:	4288      	cmp	r0, r1
 8021964:	d002      	beq.n	802196c <L2CAP_ConfigRequestEvent+0x120>
 8021966:	2f00      	cmp	r7, #0
 8021968:	d1f1      	bne.n	802194e <L2CAP_ConfigRequestEvent+0x102>
 802196a:	e016      	b.n	802199a <L2CAP_ConfigRequestEvent+0x14e>
 802196c:	2f02      	cmp	r7, #2
 802196e:	d914      	bls.n	802199a <L2CAP_ConfigRequestEvent+0x14e>
 8021970:	7868      	ldrb	r0, [r5, #1]
 8021972:	2103      	movs	r1, #3
 8021974:	1e80      	subs	r0, r0, #2
 8021976:	aa04      	add	r2, sp, #16
 8021978:	b280      	uxth	r0, r0
 802197a:	f8ad 1010 	strh.w	r1, [sp, #16]
 802197e:	1cad      	adds	r5, r5, #2
 8021980:	f8cd a000 	str.w	sl, [sp]
 8021984:	9203      	str	r2, [sp, #12]
 8021986:	e9cd 0501 	strd	r0, r5, [sp, #4]
 802198a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 802198c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021990:	4630      	mov	r0, r6
 8021992:	9907      	ldr	r1, [sp, #28]
 8021994:	f000 f864 	bl	8021a60 <L2CAP_ConfigRequestResponse>
 8021998:	e00b      	b.n	80219b2 <L2CAP_ConfigRequestEvent+0x166>
 802199a:	2001      	movs	r0, #1
 802199c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80219a0:	f899 0001 	ldrb.w	r0, [r9, #1]
 80219a4:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
 80219a8:	69e3      	ldr	r3, [r4, #28]
 80219aa:	6a22      	ldr	r2, [r4, #32]
 80219ac:	6830      	ldr	r0, [r6, #0]
 80219ae:	4641      	mov	r1, r8
 80219b0:	4798      	blx	r3
 80219b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80219b4:	b390      	cbz	r0, 8021a1c <L2CAP_ConfigRequestEvent+0x1d0>
 80219b6:	f7f1 fd1b 	bl	80133f0 <BTPS_FreeMemory>
 80219ba:	e000      	b.n	80219be <L2CAP_ConfigRequestEvent+0x172>
 80219bc:	e002      	b.n	80219c4 <L2CAP_ConfigRequestEvent+0x178>
 80219be:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80219c2:	e033      	b.n	8021a2c <L2CAP_ConfigRequestEvent+0x1e0>
 80219c4:	2000      	movs	r0, #0
 80219c6:	4438      	add	r0, r7
 80219c8:	1c40      	adds	r0, r0, #1
 80219ca:	f7f1 fcf7 	bl	80133bc <BTPS_AllocateMemory>
 80219ce:	64a0      	str	r0, [r4, #72]	; 0x48
 80219d0:	b328      	cbz	r0, 8021a1e <L2CAP_ConfigRequestEvent+0x1d2>
 80219d2:	b145      	cbz	r5, 80219e6 <L2CAP_ConfigRequestEvent+0x19a>
 80219d4:	782a      	ldrb	r2, [r5, #0]
 80219d6:	4629      	mov	r1, r5
 80219d8:	1c52      	adds	r2, r2, #1
 80219da:	f7f1 fd6c 	bl	80134b6 <BTPS_MemCopy>
 80219de:	4628      	mov	r0, r5
 80219e0:	f7f1 fd06 	bl	80133f0 <BTPS_FreeMemory>
 80219e4:	e001      	b.n	80219ea <L2CAP_ConfigRequestEvent+0x19e>
 80219e6:	f880 b000 	strb.w	fp, [r0]
 80219ea:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80219ec:	463a      	mov	r2, r7
 80219ee:	1c68      	adds	r0, r5, #1
 80219f0:	7829      	ldrb	r1, [r5, #0]
 80219f2:	4408      	add	r0, r1
 80219f4:	9902      	ldr	r1, [sp, #8]
 80219f6:	f7f1 fd5e 	bl	80134b6 <BTPS_MemCopy>
 80219fa:	7828      	ldrb	r0, [r5, #0]
 80219fc:	aa04      	add	r2, sp, #16
 80219fe:	4438      	add	r0, r7
 8021a00:	7028      	strb	r0, [r5, #0]
 8021a02:	e9cd b202 	strd	fp, r2, [sp, #8]
 8021a06:	f8ad b010 	strh.w	fp, [sp, #16]
 8021a0a:	e9cd ab00 	strd	sl, fp, [sp]
 8021a0e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8021a10:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021a14:	4630      	mov	r0, r6
 8021a16:	9907      	ldr	r1, [sp, #28]
 8021a18:	f000 f822 	bl	8021a60 <L2CAP_ConfigRequestResponse>
 8021a1c:	e006      	b.n	8021a2c <L2CAP_ConfigRequestEvent+0x1e0>
 8021a1e:	2002      	movs	r0, #2
 8021a20:	f8ad 0010 	strh.w	r0, [sp, #16]
 8021a24:	b145      	cbz	r5, 8021a38 <L2CAP_ConfigRequestEvent+0x1ec>
 8021a26:	4628      	mov	r0, r5
 8021a28:	f7f1 fce2 	bl	80133f0 <BTPS_FreeMemory>
 8021a2c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8021a30:	2800      	cmp	r0, #0
 8021a32:	d010      	beq.n	8021a56 <L2CAP_ConfigRequestEvent+0x20a>
 8021a34:	2803      	cmp	r0, #3
 8021a36:	d00e      	beq.n	8021a56 <L2CAP_ConfigRequestEvent+0x20a>
 8021a38:	f8b6 1062 	ldrh.w	r1, [r6, #98]	; 0x62
 8021a3c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021a40:	e9cd 2100 	strd	r2, r1, [sp]
 8021a44:	f8cd b008 	str.w	fp, [sp, #8]
 8021a48:	f899 3001 	ldrb.w	r3, [r9, #1]
 8021a4c:	2201      	movs	r2, #1
 8021a4e:	4630      	mov	r0, r6
 8021a50:	9907      	ldr	r1, [sp, #28]
 8021a52:	f000 fe7b 	bl	802274c <L2CAP_RejectCommand>
 8021a56:	b009      	add	sp, #36	; 0x24
 8021a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a5c:	0802291d 	.word	0x0802291d

Disassembly of section i.L2CAP_ConfigRequestResponse:

08021a60 <L2CAP_ConfigRequestResponse>:
 8021a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a64:	b085      	sub	sp, #20
 8021a66:	468b      	mov	fp, r1
 8021a68:	4692      	mov	sl, r2
 8021a6a:	4605      	mov	r5, r0
 8021a6c:	e9dd 1010 	ldrd	r1, r0, [sp, #64]	; 0x40
 8021a70:	e9dd 820e 	ldrd	r8, r2, [sp, #56]	; 0x38
 8021a74:	f5bb 6f70 	cmp.w	fp, #3840	; 0xf00
 8021a78:	d274      	bcs.n	8021b64 <L2CAP_ConfigRequestResponse+0x104>
 8021a7a:	b11a      	cbz	r2, 8021a84 <L2CAP_ConfigRequestResponse+0x24>
 8021a7c:	2900      	cmp	r1, #0
 8021a7e:	d071      	beq.n	8021b64 <L2CAP_ConfigRequestResponse+0x104>
 8021a80:	2a20      	cmp	r2, #32
 8021a82:	d86c      	bhi.n	8021b5e <L2CAP_ConfigRequestResponse+0xfe>
 8021a84:	f242 0704 	movw	r7, #8196	; 0x2004
 8021a88:	f04f 0900 	mov.w	r9, #0
 8021a8c:	2800      	cmp	r0, #0
 8021a8e:	d01e      	beq.n	8021ace <L2CAP_ConfigRequestResponse+0x6e>
 8021a90:	f04f 0402 	mov.w	r4, #2
 8021a94:	eb04 0602 	add.w	r6, r4, r2
 8021a98:	6fac      	ldr	r4, [r5, #120]	; 0x78
 8021a9a:	f106 0608 	add.w	r6, r6, #8
 8021a9e:	7026      	strb	r6, [r4, #0]
 8021aa0:	f8d5 c078 	ldr.w	ip, [r5, #120]	; 0x78
 8021aa4:	ea4f 2416 	mov.w	r4, r6, lsr #8
 8021aa8:	f88c 4001 	strb.w	r4, [ip, #1]
 8021aac:	f8d5 c078 	ldr.w	ip, [r5, #120]	; 0x78
 8021ab0:	f04f 0401 	mov.w	r4, #1
 8021ab4:	f88c 4002 	strb.w	r4, [ip, #2]
 8021ab8:	f8d5 c078 	ldr.w	ip, [r5, #120]	; 0x78
 8021abc:	f88c 9003 	strb.w	r9, [ip, #3]
 8021ac0:	6fac      	ldr	r4, [r5, #120]	; 0x78
 8021ac2:	f104 0404 	add.w	r4, r4, #4
 8021ac6:	d007      	beq.n	8021ad8 <L2CAP_ConfigRequestResponse+0x78>
 8021ac8:	f04f 0c05 	mov.w	ip, #5
 8021acc:	e006      	b.n	8021adc <L2CAP_ConfigRequestResponse+0x7c>
 8021ace:	f242 0706 	movw	r7, #8198	; 0x2006
 8021ad2:	f04f 0400 	mov.w	r4, #0
 8021ad6:	e7dd      	b.n	8021a94 <L2CAP_ConfigRequestResponse+0x34>
 8021ad8:	f04f 0c04 	mov.w	ip, #4
 8021adc:	f884 c000 	strb.w	ip, [r4]
 8021ae0:	f884 a001 	strb.w	sl, [r4, #1]
 8021ae4:	f1a6 0c04 	sub.w	ip, r6, #4
 8021ae8:	f884 c002 	strb.w	ip, [r4, #2]
 8021aec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021af0:	f884 c003 	strb.w	ip, [r4, #3]
 8021af4:	7123      	strb	r3, [r4, #4]
 8021af6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8021afa:	7163      	strb	r3, [r4, #5]
 8021afc:	f884 8006 	strb.w	r8, [r4, #6]
 8021b00:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8021b04:	71e3      	strb	r3, [r4, #7]
 8021b06:	d005      	beq.n	8021b14 <L2CAP_ConfigRequestResponse+0xb4>
 8021b08:	7803      	ldrb	r3, [r0, #0]
 8021b0a:	7223      	strb	r3, [r4, #8]
 8021b0c:	8803      	ldrh	r3, [r0, #0]
 8021b0e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8021b12:	7263      	strb	r3, [r4, #9]
 8021b14:	b182      	cbz	r2, 8021b38 <L2CAP_ConfigRequestResponse+0xd8>
 8021b16:	b110      	cbz	r0, 8021b1e <L2CAP_ConfigRequestResponse+0xbe>
 8021b18:	f04f 0302 	mov.w	r3, #2
 8021b1c:	e001      	b.n	8021b22 <L2CAP_ConfigRequestResponse+0xc2>
 8021b1e:	f04f 0300 	mov.w	r3, #0
 8021b22:	4423      	add	r3, r4
 8021b24:	f103 0308 	add.w	r3, r3, #8
 8021b28:	428b      	cmp	r3, r1
 8021b2a:	d005      	beq.n	8021b38 <L2CAP_ConfigRequestResponse+0xd8>
 8021b2c:	b100      	cbz	r0, 8021b30 <L2CAP_ConfigRequestResponse+0xd0>
 8021b2e:	2002      	movs	r0, #2
 8021b30:	4420      	add	r0, r4
 8021b32:	3008      	adds	r0, #8
 8021b34:	f7f1 fcbf 	bl	80134b6 <BTPS_MemCopy>
 8021b38:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8021b3a:	1d36      	adds	r6, r6, #4
 8021b3c:	b2b2      	uxth	r2, r6
 8021b3e:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8021b42:	e9cd 7900 	strd	r7, r9, [sp]
 8021b46:	9104      	str	r1, [sp, #16]
 8021b48:	4653      	mov	r3, sl
 8021b4a:	2201      	movs	r2, #1
 8021b4c:	4659      	mov	r1, fp
 8021b4e:	4628      	mov	r0, r5
 8021b50:	f000 fade 	bl	8022110 <L2CAP_DataWrite>
 8021b54:	b005      	add	sp, #20
 8021b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b5a:	e003      	b.n	8021b64 <L2CAP_ConfigRequestResponse+0x104>
 8021b5c:	e7ff      	b.n	8021b5e <L2CAP_ConfigRequestResponse+0xfe>
 8021b5e:	f06f 0017 	mvn.w	r0, #23
 8021b62:	e7f7      	b.n	8021b54 <L2CAP_ConfigRequestResponse+0xf4>
 8021b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021b68:	e7f4      	b.n	8021b54 <L2CAP_ConfigRequestResponse+0xf4>

Disassembly of section i.L2CAP_ConfigResponseEvent:

08021b6a <L2CAP_ConfigResponseEvent>:
 8021b6a:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021b6e:	460e      	mov	r6, r1
 8021b70:	68c9      	ldr	r1, [r1, #12]
 8021b72:	4691      	mov	r9, r2
 8021b74:	4605      	mov	r5, r0
 8021b76:	f04f 0800 	mov.w	r8, #0
 8021b7a:	b121      	cbz	r1, 8021b86 <L2CAP_ConfigResponseEvent+0x1c>
 8021b7c:	6830      	ldr	r0, [r6, #0]
 8021b7e:	f7f7 fe89 	bl	8019894 <BTPS_StopTimer>
 8021b82:	f8c6 800c 	str.w	r8, [r6, #12]
 8021b86:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8021b8a:	88b1      	ldrh	r1, [r6, #4]
 8021b8c:	4604      	mov	r4, r0
 8021b8e:	f001 fe46 	bl	802381e <SearchACLPacketEntryByIdentifier>
 8021b92:	0001      	movs	r1, r0
 8021b94:	d002      	beq.n	8021b9c <L2CAP_ConfigResponseEvent+0x32>
 8021b96:	4620      	mov	r0, r4
 8021b98:	f7ff fb00 	bl	802119c <DeleteACLPacketEntry>
 8021b9c:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
 8021ba0:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8021ba4:	f001 fe45 	bl	8023832 <SearchChannelInfoEntry>
 8021ba8:	0004      	movs	r4, r0
 8021baa:	d038      	beq.n	8021c1e <L2CAP_ConfigResponseEvent+0xb4>
 8021bac:	69e0      	ldr	r0, [r4, #28]
 8021bae:	b3b0      	cbz	r0, 8021c1e <L2CAP_ConfigResponseEvent+0xb4>
 8021bb0:	7ae0      	ldrb	r0, [r4, #11]
 8021bb2:	2805      	cmp	r0, #5
 8021bb4:	d133      	bne.n	8021c1e <L2CAP_ConfigResponseEvent+0xb4>
 8021bb6:	f8b5 0060 	ldrh.w	r0, [r5, #96]	; 0x60
 8021bba:	f8b5 7064 	ldrh.w	r7, [r5, #100]	; 0x64
 8021bbe:	2806      	cmp	r0, #6
 8021bc0:	d901      	bls.n	8021bc6 <L2CAP_ConfigResponseEvent+0x5c>
 8021bc2:	1f80      	subs	r0, r0, #6
 8021bc4:	e000      	b.n	8021bc8 <L2CAP_ConfigResponseEvent+0x5e>
 8021bc6:	2000      	movs	r0, #0
 8021bc8:	f109 010a 	add.w	r1, r9, #10
 8021bcc:	e9cd 0100 	strd	r0, r1, [sp]
 8021bd0:	07f8      	lsls	r0, r7, #31
 8021bd2:	d002      	beq.n	8021bda <L2CAP_ConfigResponseEvent+0x70>
 8021bd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021bd8:	e000      	b.n	8021bdc <L2CAP_ConfigResponseEvent+0x72>
 8021bda:	2300      	movs	r3, #0
 8021bdc:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 8021be0:	88e1      	ldrh	r1, [r4, #6]
 8021be2:	4628      	mov	r0, r5
 8021be4:	f7ff fba9 	bl	802133a <FormatEventConfigConfirmation>
 8021be8:	4681      	mov	r9, r0
 8021bea:	f8b5 0066 	ldrh.w	r0, [r5, #102]	; 0x66
 8021bee:	f007 0101 	and.w	r1, r7, #1
 8021bf2:	4308      	orrs	r0, r1
 8021bf4:	d10e      	bne.n	8021c14 <L2CAP_ConfigResponseEvent+0xaa>
 8021bf6:	2001      	movs	r0, #1
 8021bf8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 8021bfc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8021c00:	b140      	cbz	r0, 8021c14 <L2CAP_ConfigResponseEvent+0xaa>
 8021c02:	2006      	movs	r0, #6
 8021c04:	72e0      	strb	r0, [r4, #11]
 8021c06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8021c08:	b121      	cbz	r1, 8021c14 <L2CAP_ConfigResponseEvent+0xaa>
 8021c0a:	6828      	ldr	r0, [r5, #0]
 8021c0c:	f7f7 fe42 	bl	8019894 <BTPS_StopTimer>
 8021c10:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
 8021c14:	69e3      	ldr	r3, [r4, #28]
 8021c16:	6a22      	ldr	r2, [r4, #32]
 8021c18:	6828      	ldr	r0, [r5, #0]
 8021c1a:	4649      	mov	r1, r9
 8021c1c:	4798      	blx	r3
 8021c1e:	88b1      	ldrh	r1, [r6, #4]
 8021c20:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8021c24:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021c28:	f7ff baf6 	b.w	8021218 <DeleteIdentifierInfoEntryByIdentifier>

Disassembly of section i.L2CAP_ConnectRequestEvent:

08021c2c <L2CAP_ConnectRequestEvent>:
 8021c2c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8021c30:	460c      	mov	r4, r1
 8021c32:	4606      	mov	r6, r0
 8021c34:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8021c38:	4690      	mov	r8, r2
 8021c3a:	303c      	adds	r0, #60	; 0x3c
 8021c3c:	f001 fe69 	bl	8023912 <SearchRegistryByValue>
 8021c40:	0007      	movs	r7, r0
 8021c42:	f04f 0502 	mov.w	r5, #2
 8021c46:	f04f 0a01 	mov.w	sl, #1
 8021c4a:	f04f 0900 	mov.w	r9, #0
 8021c4e:	d07d      	beq.n	8021d4c <L2CAP_ConnectRequestEvent+0x120>
 8021c50:	68b8      	ldr	r0, [r7, #8]
 8021c52:	2800      	cmp	r0, #0
 8021c54:	d07a      	beq.n	8021d4c <L2CAP_ConnectRequestEvent+0x120>
 8021c56:	78a0      	ldrb	r0, [r4, #2]
 8021c58:	2803      	cmp	r0, #3
 8021c5a:	d107      	bne.n	8021c6c <L2CAP_ConnectRequestEvent+0x40>
 8021c5c:	69e1      	ldr	r1, [r4, #28]
 8021c5e:	b121      	cbz	r1, 8021c6a <L2CAP_ConnectRequestEvent+0x3e>
 8021c60:	6830      	ldr	r0, [r6, #0]
 8021c62:	f7f7 fe17 	bl	8019894 <BTPS_StopTimer>
 8021c66:	f8c4 901c 	str.w	r9, [r4, #28]
 8021c6a:	70a5      	strb	r5, [r4, #2]
 8021c6c:	1d60      	adds	r0, r4, #5
 8021c6e:	f7f7 fbe6 	bl	801943e <CompareNULLBluetoothAddress>
 8021c72:	f04f 0b03 	mov.w	fp, #3
 8021c76:	b130      	cbz	r0, 8021c86 <L2CAP_ConnectRequestEvent+0x5a>
 8021c78:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8021c7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8021c80:	e88d 0c08 	stmia.w	sp, {r3, sl, fp}
 8021c84:	e091      	b.n	8021daa <L2CAP_ConnectRequestEvent+0x17e>
 8021c86:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8021c8a:	f7ff f9c1 	bl	8021010 <CreateNewChannel>
 8021c8e:	0005      	movs	r5, r0
 8021c90:	d07e      	beq.n	8021d90 <L2CAP_ConnectRequestEvent+0x164>
 8021c92:	f8d4 0005 	ldr.w	r0, [r4, #5]
 8021c96:	6028      	str	r0, [r5, #0]
 8021c98:	f8b4 0009 	ldrh.w	r0, [r4, #9]
 8021c9c:	80a8      	strh	r0, [r5, #4]
 8021c9e:	7e28      	ldrb	r0, [r5, #24]
 8021ca0:	f040 0001 	orr.w	r0, r0, #1
 8021ca4:	7628      	strb	r0, [r5, #24]
 8021ca6:	89a0      	ldrh	r0, [r4, #12]
 8021ca8:	8128      	strh	r0, [r5, #8]
 8021caa:	68b8      	ldr	r0, [r7, #8]
 8021cac:	61e8      	str	r0, [r5, #28]
 8021cae:	68f8      	ldr	r0, [r7, #12]
 8021cb0:	6228      	str	r0, [r5, #32]
 8021cb2:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
 8021cb6:	84a8      	strh	r0, [r5, #36]	; 0x24
 8021cb8:	f8b6 1062 	ldrh.w	r1, [r6, #98]	; 0x62
 8021cbc:	84e9      	strh	r1, [r5, #38]	; 0x26
 8021cbe:	78a2      	ldrb	r2, [r4, #2]
 8021cc0:	2a02      	cmp	r2, #2
 8021cc2:	d00f      	beq.n	8021ce4 <L2CAP_ConnectRequestEvent+0xb8>
 8021cc4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021cc8:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
 8021ccc:	78e1      	ldrb	r1, [r4, #3]
 8021cce:	2900      	cmp	r1, #0
 8021cd0:	d072      	beq.n	8021db8 <L2CAP_ConnectRequestEvent+0x18c>
 8021cd2:	e9cd 0a00 	strd	r0, sl, [sp]
 8021cd6:	f8cd a008 	str.w	sl, [sp, #8]
 8021cda:	f8cd a00c 	str.w	sl, [sp, #12]
 8021cde:	88eb      	ldrh	r3, [r5, #6]
 8021ce0:	89a1      	ldrh	r1, [r4, #12]
 8021ce2:	e066      	b.n	8021db2 <L2CAP_ConnectRequestEvent+0x186>
 8021ce4:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
 8021ce8:	2801      	cmp	r0, #1
 8021cea:	d105      	bne.n	8021cf8 <L2CAP_ConnectRequestEvent+0xcc>
 8021cec:	7920      	ldrb	r0, [r4, #4]
 8021cee:	2801      	cmp	r0, #1
 8021cf0:	d102      	bne.n	8021cf8 <L2CAP_ConnectRequestEvent+0xcc>
 8021cf2:	2901      	cmp	r1, #1
 8021cf4:	d000      	beq.n	8021cf8 <L2CAP_ConnectRequestEvent+0xcc>
 8021cf6:	e000      	b.n	8021cfa <L2CAP_ConnectRequestEvent+0xce>
 8021cf8:	2000      	movs	r0, #0
 8021cfa:	b1c0      	cbz	r0, 8021d2e <L2CAP_ConnectRequestEvent+0x102>
 8021cfc:	78e0      	ldrb	r0, [r4, #3]
 8021cfe:	2803      	cmp	r0, #3
 8021d00:	d015      	beq.n	8021d2e <L2CAP_ConnectRequestEvent+0x102>
 8021d02:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8021d06:	f8cd 900c 	str.w	r9, [sp, #12]
 8021d0a:	e88d 0c08 	stmia.w	sp, {r3, sl, fp}
 8021d0e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021d12:	89a1      	ldrh	r1, [r4, #12]
 8021d14:	2300      	movs	r3, #0
 8021d16:	4630      	mov	r0, r6
 8021d18:	f000 f85a 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8021d1c:	2004      	movs	r0, #4
 8021d1e:	70a0      	strb	r0, [r4, #2]
 8021d20:	89a1      	ldrh	r1, [r4, #12]
 8021d22:	b004      	add	sp, #16
 8021d24:	4630      	mov	r0, r6
 8021d26:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8021d2a:	f001 b992 	b.w	8023052 <LP_DisconnectReq>
 8021d2e:	f885 b00b 	strb.w	fp, [r5, #11]
 8021d32:	68f0      	ldr	r0, [r6, #12]
 8021d34:	4a25      	ldr	r2, [pc, #148]	; (8021dcc <L2CAP_ConnectRequestEvent+0x1a0>)
 8021d36:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8021d3a:	ebc1 10c0 	rsb	r0, r1, r0, lsl #7
 8021d3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8021d42:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8021d46:	88e9      	ldrh	r1, [r5, #6]
 8021d48:	6830      	ldr	r0, [r6, #0]
 8021d4a:	e000      	b.n	8021d4e <L2CAP_ConnectRequestEvent+0x122>
 8021d4c:	e036      	b.n	8021dbc <L2CAP_ConnectRequestEvent+0x190>
 8021d4e:	f7f7 fd57 	bl	8019800 <BTPS_StartTimer>
 8021d52:	64e8      	str	r0, [r5, #76]	; 0x4c
 8021d54:	6f31      	ldr	r1, [r6, #112]	; 0x70
 8021d56:	2010      	movs	r0, #16
 8021d58:	f881 9000 	strb.w	r9, [r1]
 8021d5c:	6048      	str	r0, [r1, #4]
 8021d5e:	f101 000c 	add.w	r0, r1, #12
 8021d62:	6088      	str	r0, [r1, #8]
 8021d64:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8021d66:	818a      	strh	r2, [r1, #12]
 8021d68:	688a      	ldr	r2, [r1, #8]
 8021d6a:	88e8      	ldrh	r0, [r5, #6]
 8021d6c:	8050      	strh	r0, [r2, #2]
 8021d6e:	688a      	ldr	r2, [r1, #8]
 8021d70:	f898 0001 	ldrb.w	r0, [r8, #1]
 8021d74:	7110      	strb	r0, [r2, #4]
 8021d76:	6888      	ldr	r0, [r1, #8]
 8021d78:	682a      	ldr	r2, [r5, #0]
 8021d7a:	f840 2f05 	str.w	r2, [r0, #5]!
 8021d7e:	88aa      	ldrh	r2, [r5, #4]
 8021d80:	8082      	strh	r2, [r0, #4]
 8021d82:	6888      	ldr	r0, [r1, #8]
 8021d84:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8021d86:	f8c0 200b 	str.w	r2, [r0, #11]
 8021d8a:	68fa      	ldr	r2, [r7, #12]
 8021d8c:	6830      	ldr	r0, [r6, #0]
 8021d8e:	e000      	b.n	8021d92 <L2CAP_ConnectRequestEvent+0x166>
 8021d90:	e004      	b.n	8021d9c <L2CAP_ConnectRequestEvent+0x170>
 8021d92:	68bb      	ldr	r3, [r7, #8]
 8021d94:	b004      	add	sp, #16
 8021d96:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8021d9a:	4718      	bx	r3
 8021d9c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8021da0:	2104      	movs	r1, #4
 8021da2:	e9cd 1902 	strd	r1, r9, [sp, #8]
 8021da6:	e9cd 3a00 	strd	r3, sl, [sp]
 8021daa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021dae:	89a1      	ldrh	r1, [r4, #12]
 8021db0:	2300      	movs	r3, #0
 8021db2:	4630      	mov	r0, r6
 8021db4:	f000 f80c 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8021db8:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8021dbc:	f8b6 2064 	ldrh.w	r2, [r6, #100]	; 0x64
 8021dc0:	e9cd 2a00 	strd	r2, sl, [sp]
 8021dc4:	e9cd 5902 	strd	r5, r9, [sp, #8]
 8021dc8:	e7ef      	b.n	8021daa <L2CAP_ConnectRequestEvent+0x17e>
 8021dca:	0000      	.short	0x0000
 8021dcc:	0802291d 	.word	0x0802291d

Disassembly of section i.L2CAP_ConnectRequestResponse:

08021dd0 <L2CAP_ConnectRequestResponse>:
 8021dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dd4:	b086      	sub	sp, #24
 8021dd6:	461e      	mov	r6, r3
 8021dd8:	ab0f      	add	r3, sp, #60	; 0x3c
 8021dda:	4689      	mov	r9, r1
 8021ddc:	e893 0182 	ldmia.w	r3, {r1, r7, r8}
 8021de0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8021de4:	f5b9 6f70 	cmp.w	r9, #3840	; 0xf00
 8021de8:	d252      	bcs.n	8021e90 <L2CAP_ConnectRequestResponse+0xc0>
 8021dea:	b3e2      	cbz	r2, 8021e66 <L2CAP_ConnectRequestResponse+0x96>
 8021dec:	f242 0304 	movw	r3, #8196	; 0x2004
 8021df0:	f04f 0a00 	mov.w	sl, #0
 8021df4:	2900      	cmp	r1, #0
 8021df6:	d002      	beq.n	8021dfe <L2CAP_ConnectRequestResponse+0x2e>
 8021df8:	f04f 040c 	mov.w	r4, #12
 8021dfc:	e001      	b.n	8021e02 <L2CAP_ConnectRequestResponse+0x32>
 8021dfe:	f04f 0408 	mov.w	r4, #8
 8021e02:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8021e04:	700c      	strb	r4, [r1, #0]
 8021e06:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8021e08:	ea4f 2114 	mov.w	r1, r4, lsr #8
 8021e0c:	7069      	strb	r1, [r5, #1]
 8021e0e:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8021e10:	f04f 0101 	mov.w	r1, #1
 8021e14:	70a9      	strb	r1, [r5, #2]
 8021e16:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8021e18:	f885 a003 	strb.w	sl, [r5, #3]
 8021e1c:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8021e1e:	f101 0104 	add.w	r1, r1, #4
 8021e22:	d002      	beq.n	8021e2a <L2CAP_ConnectRequestResponse+0x5a>
 8021e24:	f04f 0503 	mov.w	r5, #3
 8021e28:	e001      	b.n	8021e2e <L2CAP_ConnectRequestResponse+0x5e>
 8021e2a:	f04f 0502 	mov.w	r5, #2
 8021e2e:	700d      	strb	r5, [r1, #0]
 8021e30:	704a      	strb	r2, [r1, #1]
 8021e32:	f1a4 0504 	sub.w	r5, r4, #4
 8021e36:	708d      	strb	r5, [r1, #2]
 8021e38:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8021e3c:	70cd      	strb	r5, [r1, #3]
 8021e3e:	710e      	strb	r6, [r1, #4]
 8021e40:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021e44:	714d      	strb	r5, [r1, #5]
 8021e46:	f881 c006 	strb.w	ip, [r1, #6]
 8021e4a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021e4e:	71cd      	strb	r5, [r1, #7]
 8021e50:	d00a      	beq.n	8021e68 <L2CAP_ConnectRequestResponse+0x98>
 8021e52:	720f      	strb	r7, [r1, #8]
 8021e54:	ea4f 2517 	mov.w	r5, r7, lsr #8
 8021e58:	724d      	strb	r5, [r1, #9]
 8021e5a:	f881 800a 	strb.w	r8, [r1, #10]
 8021e5e:	ea4f 2518 	mov.w	r5, r8, lsr #8
 8021e62:	72cd      	strb	r5, [r1, #11]
 8021e64:	e002      	b.n	8021e6c <L2CAP_ConnectRequestResponse+0x9c>
 8021e66:	e013      	b.n	8021e90 <L2CAP_ConnectRequestResponse+0xc0>
 8021e68:	f242 0306 	movw	r3, #8198	; 0x2006
 8021e6c:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8021e6e:	e9cd 3a00 	strd	r3, sl, [sp]
 8021e72:	ae02      	add	r6, sp, #8
 8021e74:	4651      	mov	r1, sl
 8021e76:	f104 0404 	add.w	r4, r4, #4
 8021e7a:	e886 0032 	stmia.w	r6, {r1, r4, r5}
 8021e7e:	4613      	mov	r3, r2
 8021e80:	f04f 0201 	mov.w	r2, #1
 8021e84:	4649      	mov	r1, r9
 8021e86:	f000 f943 	bl	8022110 <L2CAP_DataWrite>
 8021e8a:	b006      	add	sp, #24
 8021e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e94:	e7f9      	b.n	8021e8a <L2CAP_ConnectRequestResponse+0xba>

Disassembly of section i.L2CAP_ConnectResponseEvent:

08021e98 <L2CAP_ConnectResponseEvent>:
 8021e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e9c:	460e      	mov	r6, r1
 8021e9e:	68c9      	ldr	r1, [r1, #12]
 8021ea0:	4605      	mov	r5, r0
 8021ea2:	2700      	movs	r7, #0
 8021ea4:	b119      	cbz	r1, 8021eae <L2CAP_ConnectResponseEvent+0x16>
 8021ea6:	6830      	ldr	r0, [r6, #0]
 8021ea8:	f7f7 fcf4 	bl	8019894 <BTPS_StopTimer>
 8021eac:	60f7      	str	r7, [r6, #12]
 8021eae:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8021eb2:	88b1      	ldrh	r1, [r6, #4]
 8021eb4:	4604      	mov	r4, r0
 8021eb6:	f001 fcb2 	bl	802381e <SearchACLPacketEntryByIdentifier>
 8021eba:	0001      	movs	r1, r0
 8021ebc:	d002      	beq.n	8021ec4 <L2CAP_ConnectResponseEvent+0x2c>
 8021ebe:	4620      	mov	r0, r4
 8021ec0:	f7ff f96c 	bl	802119c <DeleteACLPacketEntry>
 8021ec4:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8021ec8:	f8b5 1064 	ldrh.w	r1, [r5, #100]	; 0x64
 8021ecc:	4682      	mov	sl, r0
 8021ece:	f001 fcb0 	bl	8023832 <SearchChannelInfoEntry>
 8021ed2:	0004      	movs	r4, r0
 8021ed4:	f105 085c 	add.w	r8, r5, #92	; 0x5c
 8021ed8:	d04f      	beq.n	8021f7a <L2CAP_ConnectResponseEvent+0xe2>
 8021eda:	69e0      	ldr	r0, [r4, #28]
 8021edc:	2102      	movs	r1, #2
 8021ede:	b110      	cbz	r0, 8021ee6 <L2CAP_ConnectResponseEvent+0x4e>
 8021ee0:	7ae0      	ldrb	r0, [r4, #11]
 8021ee2:	2804      	cmp	r0, #4
 8021ee4:	d00d      	beq.n	8021f02 <L2CAP_ConnectResponseEvent+0x6a>
 8021ee6:	72e1      	strb	r1, [r4, #11]
 8021ee8:	88b1      	ldrh	r1, [r6, #4]
 8021eea:	4640      	mov	r0, r8
 8021eec:	f7ff f994 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8021ef0:	7ae0      	ldrb	r0, [r4, #11]
 8021ef2:	2802      	cmp	r0, #2
 8021ef4:	d11b      	bne.n	8021f2e <L2CAP_ConnectResponseEvent+0x96>
 8021ef6:	4621      	mov	r1, r4
 8021ef8:	4628      	mov	r0, r5
 8021efa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021efe:	f7ff bbf1 	b.w	80216e4 <HandleChannelDisconnection>
 8021f02:	f8b5 0066 	ldrh.w	r0, [r5, #102]	; 0x66
 8021f06:	b1a0      	cbz	r0, 8021f32 <L2CAP_ConnectResponseEvent+0x9a>
 8021f08:	2801      	cmp	r0, #1
 8021f0a:	d025      	beq.n	8021f58 <L2CAP_ConnectResponseEvent+0xc0>
 8021f0c:	72e1      	strb	r1, [r4, #11]
 8021f0e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8021f12:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 8021f16:	88e1      	ldrh	r1, [r4, #6]
 8021f18:	4628      	mov	r0, r5
 8021f1a:	f7ff fa26 	bl	802136a <FormatEventConnectConfirmation>
 8021f1e:	4601      	mov	r1, r0
 8021f20:	69e3      	ldr	r3, [r4, #28]
 8021f22:	6a22      	ldr	r2, [r4, #32]
 8021f24:	6828      	ldr	r0, [r5, #0]
 8021f26:	4798      	blx	r3
 8021f28:	7ae0      	ldrb	r0, [r4, #11]
 8021f2a:	2804      	cmp	r0, #4
 8021f2c:	d1dc      	bne.n	8021ee8 <L2CAP_ConnectResponseEvent+0x50>
 8021f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f32:	2005      	movs	r0, #5
 8021f34:	72e0      	strb	r0, [r4, #11]
 8021f36:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
 8021f3a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
 8021f3e:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
 8021f42:	84a0      	strh	r0, [r4, #36]	; 0x24
 8021f44:	69ab      	ldr	r3, [r5, #24]
 8021f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021f4a:	4343      	muls	r3, r0
 8021f4c:	88e1      	ldrh	r1, [r4, #6]
 8021f4e:	4a1b      	ldr	r2, [pc, #108]	; (8021fbc <L2CAP_ConnectResponseEvent+0x124>)
 8021f50:	6828      	ldr	r0, [r5, #0]
 8021f52:	f7f7 fc55 	bl	8019800 <BTPS_StartTimer>
 8021f56:	e00e      	b.n	8021f76 <L2CAP_ConnectResponseEvent+0xde>
 8021f58:	692b      	ldr	r3, [r5, #16]
 8021f5a:	6133      	str	r3, [r6, #16]
 8021f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021f60:	4343      	muls	r3, r0
 8021f62:	88b1      	ldrh	r1, [r6, #4]
 8021f64:	4a16      	ldr	r2, [pc, #88]	; (8021fc0 <L2CAP_ConnectResponseEvent+0x128>)
 8021f66:	6828      	ldr	r0, [r5, #0]
 8021f68:	f7f7 fc4a 	bl	8019800 <BTPS_StartTimer>
 8021f6c:	60f0      	str	r0, [r6, #12]
 8021f6e:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
 8021f72:	84a0      	strh	r0, [r4, #36]	; 0x24
 8021f74:	68f0      	ldr	r0, [r6, #12]
 8021f76:	64e0      	str	r0, [r4, #76]	; 0x4c
 8021f78:	e7c9      	b.n	8021f0e <L2CAP_ConnectResponseEvent+0x76>
 8021f7a:	e9d6 4706 	ldrd	r4, r7, [r6, #24]
 8021f7e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 8021f82:	88b1      	ldrh	r1, [r6, #4]
 8021f84:	4640      	mov	r0, r8
 8021f86:	f7ff f947 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8021f8a:	4649      	mov	r1, r9
 8021f8c:	4650      	mov	r0, sl
 8021f8e:	f001 fc50 	bl	8023832 <SearchChannelInfoEntry>
 8021f92:	0001      	movs	r1, r0
 8021f94:	d002      	beq.n	8021f9c <L2CAP_ConnectResponseEvent+0x104>
 8021f96:	4628      	mov	r0, r5
 8021f98:	f7ff fba4 	bl	80216e4 <HandleChannelDisconnection>
 8021f9c:	2300      	movs	r3, #0
 8021f9e:	2203      	movs	r2, #3
 8021fa0:	4649      	mov	r1, r9
 8021fa2:	4628      	mov	r0, r5
 8021fa4:	f7ff f9e1 	bl	802136a <FormatEventConnectConfirmation>
 8021fa8:	4601      	mov	r1, r0
 8021faa:	2c00      	cmp	r4, #0
 8021fac:	d0bf      	beq.n	8021f2e <L2CAP_ConnectResponseEvent+0x96>
 8021fae:	463a      	mov	r2, r7
 8021fb0:	6828      	ldr	r0, [r5, #0]
 8021fb2:	46a4      	mov	ip, r4
 8021fb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fb8:	4760      	bx	ip
 8021fba:	0000      	.short	0x0000
 8021fbc:	0802291d 	.word	0x0802291d
 8021fc0:	080227e3 	.word	0x080227e3

Disassembly of section i.L2CAP_ConnectionParameterUpdateRequestEvent:

08021fc4 <L2CAP_ConnectionParameterUpdateRequestEvent>:
 8021fc4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8021fc6:	4604      	mov	r4, r0
 8021fc8:	7848      	ldrb	r0, [r1, #1]
 8021fca:	2700      	movs	r7, #0
 8021fcc:	4616      	mov	r6, r2
 8021fce:	460d      	mov	r5, r1
 8021fd0:	2801      	cmp	r0, #1
 8021fd2:	d13b      	bne.n	802204c <L2CAP_ConnectionParameterUpdateRequestEvent+0x88>
 8021fd4:	7828      	ldrb	r0, [r5, #0]
 8021fd6:	b380      	cbz	r0, 802203a <L2CAP_ConnectionParameterUpdateRequestEvent+0x76>
 8021fd8:	2105      	movs	r1, #5
 8021fda:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8021fde:	f001 fc98 	bl	8023912 <SearchRegistryByValue>
 8021fe2:	b358      	cbz	r0, 802203c <L2CAP_ConnectionParameterUpdateRequestEvent+0x78>
 8021fe4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8021fe6:	220e      	movs	r2, #14
 8021fe8:	700a      	strb	r2, [r1, #0]
 8021fea:	2210      	movs	r2, #16
 8021fec:	604a      	str	r2, [r1, #4]
 8021fee:	f101 020c 	add.w	r2, r1, #12
 8021ff2:	608a      	str	r2, [r1, #8]
 8021ff4:	8803      	ldrh	r3, [r0, #0]
 8021ff6:	818b      	strh	r3, [r1, #12]
 8021ff8:	f8d5 3005 	ldr.w	r3, [r5, #5]
 8021ffc:	f8c1 300e 	str.w	r3, [r1, #14]
 8022000:	f8b5 3009 	ldrh.w	r3, [r5, #9]
 8022004:	824b      	strh	r3, [r1, #18]
 8022006:	688b      	ldr	r3, [r1, #8]
 8022008:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 802200c:	811a      	strh	r2, [r3, #8]
 802200e:	688b      	ldr	r3, [r1, #8]
 8022010:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8022014:	815a      	strh	r2, [r3, #10]
 8022016:	688b      	ldr	r3, [r1, #8]
 8022018:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 802201c:	819a      	strh	r2, [r3, #12]
 802201e:	688b      	ldr	r3, [r1, #8]
 8022020:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8022024:	81da      	strh	r2, [r3, #14]
 8022026:	7872      	ldrb	r2, [r6, #1]
 8022028:	822a      	strh	r2, [r5, #16]
 802202a:	68c2      	ldr	r2, [r0, #12]
 802202c:	6824      	ldr	r4, [r4, #0]
 802202e:	6883      	ldr	r3, [r0, #8]
 8022030:	b003      	add	sp, #12
 8022032:	4620      	mov	r0, r4
 8022034:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8022038:	4718      	bx	r3
 802203a:	e007      	b.n	802204c <L2CAP_ConnectionParameterUpdateRequestEvent+0x88>
 802203c:	e7ff      	b.n	802203e <L2CAP_ConnectionParameterUpdateRequestEvent+0x7a>
 802203e:	2002      	movs	r0, #2
 8022040:	e9cd 0700 	strd	r0, r7, [sp]
 8022044:	9702      	str	r7, [sp, #8]
 8022046:	7873      	ldrb	r3, [r6, #1]
 8022048:	89a9      	ldrh	r1, [r5, #12]
 802204a:	e004      	b.n	8022056 <L2CAP_ConnectionParameterUpdateRequestEvent+0x92>
 802204c:	9700      	str	r7, [sp, #0]
 802204e:	9701      	str	r7, [sp, #4]
 8022050:	9702      	str	r7, [sp, #8]
 8022052:	7853      	ldrb	r3, [r2, #1]
 8022054:	8989      	ldrh	r1, [r1, #12]
 8022056:	2205      	movs	r2, #5
 8022058:	4620      	mov	r0, r4
 802205a:	f000 fb77 	bl	802274c <L2CAP_RejectCommand>
 802205e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

Disassembly of section i.L2CAP_ConnectionParameterUpdateResponseEvent:

08022060 <L2CAP_ConnectionParameterUpdateResponseEvent>:
 8022060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022064:	460e      	mov	r6, r1
 8022066:	68d1      	ldr	r1, [r2, #12]
 8022068:	4614      	mov	r4, r2
 802206a:	4605      	mov	r5, r0
 802206c:	b111      	cbz	r1, 8022074 <L2CAP_ConnectionParameterUpdateResponseEvent+0x14>
 802206e:	6820      	ldr	r0, [r4, #0]
 8022070:	f7f7 fc10 	bl	8019894 <BTPS_StopTimer>
 8022074:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8022078:	88a1      	ldrh	r1, [r4, #4]
 802207a:	4607      	mov	r7, r0
 802207c:	f001 fbcf 	bl	802381e <SearchACLPacketEntryByIdentifier>
 8022080:	0001      	movs	r1, r0
 8022082:	d002      	beq.n	802208a <L2CAP_ConnectionParameterUpdateResponseEvent+0x2a>
 8022084:	4638      	mov	r0, r7
 8022086:	f7ff f889 	bl	802119c <DeleteACLPacketEntry>
 802208a:	69a0      	ldr	r0, [r4, #24]
 802208c:	b1f0      	cbz	r0, 80220cc <L2CAP_ConnectionParameterUpdateResponseEvent+0x6c>
 802208e:	8921      	ldrh	r1, [r4, #8]
 8022090:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 8022094:	f001 fc3d 	bl	8023912 <SearchRegistryByValue>
 8022098:	0002      	movs	r2, r0
 802209a:	d017      	beq.n	80220cc <L2CAP_ConnectionParameterUpdateResponseEvent+0x6c>
 802209c:	6f29      	ldr	r1, [r5, #112]	; 0x70
 802209e:	200f      	movs	r0, #15
 80220a0:	7008      	strb	r0, [r1, #0]
 80220a2:	200a      	movs	r0, #10
 80220a4:	6048      	str	r0, [r1, #4]
 80220a6:	f101 000c 	add.w	r0, r1, #12
 80220aa:	6088      	str	r0, [r1, #8]
 80220ac:	8812      	ldrh	r2, [r2, #0]
 80220ae:	818a      	strh	r2, [r1, #12]
 80220b0:	f856 2f05 	ldr.w	r2, [r6, #5]!
 80220b4:	f8c1 200e 	str.w	r2, [r1, #14]
 80220b8:	88b2      	ldrh	r2, [r6, #4]
 80220ba:	824a      	strh	r2, [r1, #18]
 80220bc:	688a      	ldr	r2, [r1, #8]
 80220be:	f8b5 0062 	ldrh.w	r0, [r5, #98]	; 0x62
 80220c2:	8110      	strh	r0, [r2, #8]
 80220c4:	69a3      	ldr	r3, [r4, #24]
 80220c6:	69e2      	ldr	r2, [r4, #28]
 80220c8:	6828      	ldr	r0, [r5, #0]
 80220ca:	4798      	blx	r3
 80220cc:	88a1      	ldrh	r1, [r4, #4]
 80220ce:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80220d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80220d6:	f7ff b89f 	b.w	8021218 <DeleteIdentifierInfoEntryByIdentifier>

Disassembly of section i.L2CAP_ConnectionTimeout:

080220da <L2CAP_ConnectionTimeout>:
 80220da:	b51c      	push	{r2, r3, r4, lr}
 80220dc:	4614      	mov	r4, r2
 80220de:	4602      	mov	r2, r0
 80220e0:	4669      	mov	r1, sp
 80220e2:	a801      	add	r0, sp, #4
 80220e4:	f7fe febd 	bl	8020e62 <AcquireL2CAPStackInformation>
 80220e8:	b980      	cbnz	r0, 802210c <L2CAP_ConnectionTimeout+0x32>
 80220ea:	9800      	ldr	r0, [sp, #0]
 80220ec:	b2a1      	uxth	r1, r4
 80220ee:	3058      	adds	r0, #88	; 0x58
 80220f0:	f001 fbcb 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 80220f4:	b138      	cbz	r0, 8022106 <L2CAP_ConnectionTimeout+0x2c>
 80220f6:	2100      	movs	r1, #0
 80220f8:	61c1      	str	r1, [r0, #28]
 80220fa:	2104      	movs	r1, #4
 80220fc:	7081      	strb	r1, [r0, #2]
 80220fe:	8981      	ldrh	r1, [r0, #12]
 8022100:	9800      	ldr	r0, [sp, #0]
 8022102:	f000 ffa6 	bl	8023052 <LP_DisconnectReq>
 8022106:	9801      	ldr	r0, [sp, #4]
 8022108:	f7f7 fa4c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 802210c:	2000      	movs	r0, #0
 802210e:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.L2CAP_DataWrite:

08022110 <L2CAP_DataWrite>:
 8022110:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8022114:	469b      	mov	fp, r3
 8022116:	e9dd 590f 	ldrd	r5, r9, [sp, #60]	; 0x3c
 802211a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802211c:	4692      	mov	sl, r2
 802211e:	19a8      	adds	r0, r5, r6
 8022120:	4688      	mov	r8, r1
 8022122:	3018      	adds	r0, #24
 8022124:	f7f1 f94a 	bl	80133bc <BTPS_AllocateMemory>
 8022128:	0004      	movs	r4, r0
 802212a:	f06f 0740 	mvn.w	r7, #64	; 0x40
 802212e:	d02b      	beq.n	8022188 <L2CAP_DataWrite+0x78>
 8022130:	2100      	movs	r1, #0
 8022132:	60e1      	str	r1, [r4, #12]
 8022134:	f8a4 8000 	strh.w	r8, [r4]
 8022138:	f8a4 a002 	strh.w	sl, [r4, #2]
 802213c:	f8a4 b004 	strh.w	fp, [r4, #4]
 8022140:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022142:	80e0      	strh	r0, [r4, #6]
 8022144:	1970      	adds	r0, r6, r5
 8022146:	8120      	strh	r0, [r4, #8]
 8022148:	f104 0018 	add.w	r0, r4, #24
 802214c:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8022150:	ea5f 0109 	movs.w	r1, r9
 8022154:	d002      	beq.n	802215c <L2CAP_DataWrite+0x4c>
 8022156:	462a      	mov	r2, r5
 8022158:	f7f1 f9ad 	bl	80134b6 <BTPS_MemCopy>
 802215c:	6920      	ldr	r0, [r4, #16]
 802215e:	4632      	mov	r2, r6
 8022160:	4428      	add	r0, r5
 8022162:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022164:	f7f1 f9a7 	bl	80134b6 <BTPS_MemCopy>
 8022168:	9800      	ldr	r0, [sp, #0]
 802216a:	4621      	mov	r1, r4
 802216c:	304c      	adds	r0, #76	; 0x4c
 802216e:	f001 fb43 	bl	80237f8 <QueueACLPacket>
 8022172:	b130      	cbz	r0, 8022182 <L2CAP_DataWrite+0x72>
 8022174:	9800      	ldr	r0, [sp, #0]
 8022176:	f000 fa8d 	bl	8022694 <L2CAP_ProcessACLQueue>
 802217a:	2000      	movs	r0, #0
 802217c:	b004      	add	sp, #16
 802217e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8022182:	4620      	mov	r0, r4
 8022184:	f7f1 f934 	bl	80133f0 <BTPS_FreeMemory>
 8022188:	4638      	mov	r0, r7
 802218a:	e7f7      	b.n	802217c <L2CAP_DataWrite+0x6c>

Disassembly of section i.L2CAP_DisconnectRequestEvent:

0802218c <L2CAP_DisconnectRequestEvent>:
 802218c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 802218e:	460f      	mov	r7, r1
 8022190:	4605      	mov	r5, r0
 8022192:	f8b0 1062 	ldrh.w	r1, [r0, #98]	; 0x62
 8022196:	4616      	mov	r6, r2
 8022198:	3054      	adds	r0, #84	; 0x54
 802219a:	f001 fb4a 	bl	8023832 <SearchChannelInfoEntry>
 802219e:	0004      	movs	r4, r0
 80221a0:	d029      	beq.n	80221f6 <L2CAP_DisconnectRequestEvent+0x6a>
 80221a2:	7ae0      	ldrb	r0, [r4, #11]
 80221a4:	88e1      	ldrh	r1, [r4, #6]
 80221a6:	2804      	cmp	r0, #4
 80221a8:	d01f      	beq.n	80221ea <L2CAP_DisconnectRequestEvent+0x5e>
 80221aa:	2200      	movs	r2, #0
 80221ac:	4628      	mov	r0, r5
 80221ae:	f7ff f8fb 	bl	80213a8 <FormatEventDisconnectIndication>
 80221b2:	4601      	mov	r1, r0
 80221b4:	2007      	movs	r0, #7
 80221b6:	72e0      	strb	r0, [r4, #11]
 80221b8:	69e3      	ldr	r3, [r4, #28]
 80221ba:	6a22      	ldr	r2, [r4, #32]
 80221bc:	6828      	ldr	r0, [r5, #0]
 80221be:	4798      	blx	r3
 80221c0:	88e1      	ldrh	r1, [r4, #6]
 80221c2:	4628      	mov	r0, r5
 80221c4:	f001 fe4f 	bl	8023e66 <_L2CA_Flush_Channel_Data>
 80221c8:	88e0      	ldrh	r0, [r4, #6]
 80221ca:	2201      	movs	r2, #1
 80221cc:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80221ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80221d2:	7873      	ldrb	r3, [r6, #1]
 80221d4:	4639      	mov	r1, r7
 80221d6:	4628      	mov	r0, r5
 80221d8:	f000 f81b 	bl	8022212 <L2CAP_DisconnectRequestResponse>
 80221dc:	b003      	add	sp, #12
 80221de:	4621      	mov	r1, r4
 80221e0:	4628      	mov	r0, r5
 80221e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80221e6:	f7ff ba7d 	b.w	80216e4 <HandleChannelDisconnection>
 80221ea:	2300      	movs	r3, #0
 80221ec:	2204      	movs	r2, #4
 80221ee:	4628      	mov	r0, r5
 80221f0:	f7ff f8bb 	bl	802136a <FormatEventConnectConfirmation>
 80221f4:	e7dd      	b.n	80221b2 <L2CAP_DisconnectRequestEvent+0x26>
 80221f6:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 80221fa:	f8b5 1062 	ldrh.w	r1, [r5, #98]	; 0x62
 80221fe:	2002      	movs	r0, #2
 8022200:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8022204:	7873      	ldrb	r3, [r6, #1]
 8022206:	2201      	movs	r2, #1
 8022208:	4639      	mov	r1, r7
 802220a:	4628      	mov	r0, r5
 802220c:	f000 fa9e 	bl	802274c <L2CAP_RejectCommand>
 8022210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

Disassembly of section i.L2CAP_DisconnectRequestResponse:

08022212 <L2CAP_DisconnectRequestResponse>:
 8022212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022214:	b085      	sub	sp, #20
 8022216:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 802221a:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 802221e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022222:	d23b      	bcs.n	802229c <L2CAP_DisconnectRequestResponse+0x8a>
 8022224:	b3cb      	cbz	r3, 802229a <L2CAP_DisconnectRequestResponse+0x88>
 8022226:	f242 0404 	movw	r4, #8196	; 0x2004
 802222a:	b905      	cbnz	r5, 802222e <L2CAP_DisconnectRequestResponse+0x1c>
 802222c:	1ca4      	adds	r4, r4, #2
 802222e:	2a05      	cmp	r2, #5
 8022230:	d101      	bne.n	8022236 <L2CAP_DisconnectRequestResponse+0x24>
 8022232:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8022236:	f8d0 e078 	ldr.w	lr, [r0, #120]	; 0x78
 802223a:	2608      	movs	r6, #8
 802223c:	f88e 6000 	strb.w	r6, [lr]
 8022240:	f8d0 e078 	ldr.w	lr, [r0, #120]	; 0x78
 8022244:	2600      	movs	r6, #0
 8022246:	f88e 6001 	strb.w	r6, [lr, #1]
 802224a:	f8d0 e078 	ldr.w	lr, [r0, #120]	; 0x78
 802224e:	f88e 2002 	strb.w	r2, [lr, #2]
 8022252:	f8d0 e078 	ldr.w	lr, [r0, #120]	; 0x78
 8022256:	0a12      	lsrs	r2, r2, #8
 8022258:	f88e 2003 	strb.w	r2, [lr, #3]
 802225c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 802225e:	1d12      	adds	r2, r2, #4
 8022260:	b10d      	cbz	r5, 8022266 <L2CAP_DisconnectRequestResponse+0x54>
 8022262:	2507      	movs	r5, #7
 8022264:	e000      	b.n	8022268 <L2CAP_DisconnectRequestResponse+0x56>
 8022266:	2506      	movs	r5, #6
 8022268:	7015      	strb	r5, [r2, #0]
 802226a:	7053      	strb	r3, [r2, #1]
 802226c:	2504      	movs	r5, #4
 802226e:	7095      	strb	r5, [r2, #2]
 8022270:	70d6      	strb	r6, [r2, #3]
 8022272:	f882 c004 	strb.w	ip, [r2, #4]
 8022276:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802227a:	7155      	strb	r5, [r2, #5]
 802227c:	7197      	strb	r7, [r2, #6]
 802227e:	0a3d      	lsrs	r5, r7, #8
 8022280:	71d5      	strb	r5, [r2, #7]
 8022282:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8022284:	250c      	movs	r5, #12
 8022286:	9601      	str	r6, [sp, #4]
 8022288:	9602      	str	r6, [sp, #8]
 802228a:	9400      	str	r4, [sp, #0]
 802228c:	e9cd 5203 	strd	r5, r2, [sp, #12]
 8022290:	2201      	movs	r2, #1
 8022292:	f7ff ff3d 	bl	8022110 <L2CAP_DataWrite>
 8022296:	b005      	add	sp, #20
 8022298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802229a:	e7ff      	b.n	802229c <L2CAP_DisconnectRequestResponse+0x8a>
 802229c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80222a0:	e7f9      	b.n	8022296 <L2CAP_DisconnectRequestResponse+0x84>

Disassembly of section i.L2CAP_DisconnectResponseEvent:

080222a2 <L2CAP_DisconnectResponseEvent>:
 80222a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222a6:	460c      	mov	r4, r1
 80222a8:	68c9      	ldr	r1, [r1, #12]
 80222aa:	4605      	mov	r5, r0
 80222ac:	b121      	cbz	r1, 80222b8 <L2CAP_DisconnectResponseEvent+0x16>
 80222ae:	6820      	ldr	r0, [r4, #0]
 80222b0:	f7f7 faf0 	bl	8019894 <BTPS_StopTimer>
 80222b4:	2000      	movs	r0, #0
 80222b6:	60e0      	str	r0, [r4, #12]
 80222b8:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80222bc:	88a1      	ldrh	r1, [r4, #4]
 80222be:	4606      	mov	r6, r0
 80222c0:	f001 faad 	bl	802381e <SearchACLPacketEntryByIdentifier>
 80222c4:	0001      	movs	r1, r0
 80222c6:	d002      	beq.n	80222ce <L2CAP_DisconnectResponseEvent+0x2c>
 80222c8:	4630      	mov	r0, r6
 80222ca:	f7fe ff67 	bl	802119c <DeleteACLPacketEntry>
 80222ce:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 80222d2:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80222d6:	88a7      	ldrh	r7, [r4, #4]
 80222d8:	4631      	mov	r1, r6
 80222da:	4680      	mov	r8, r0
 80222dc:	f001 faa9 	bl	8023832 <SearchChannelInfoEntry>
 80222e0:	0004      	movs	r4, r0
 80222e2:	d00b      	beq.n	80222fc <L2CAP_DisconnectResponseEvent+0x5a>
 80222e4:	69e0      	ldr	r0, [r4, #28]
 80222e6:	b148      	cbz	r0, 80222fc <L2CAP_DisconnectResponseEvent+0x5a>
 80222e8:	88e1      	ldrh	r1, [r4, #6]
 80222ea:	2200      	movs	r2, #0
 80222ec:	4628      	mov	r0, r5
 80222ee:	f7ff f850 	bl	8021392 <FormatEventDisconnectConfirmation>
 80222f2:	4601      	mov	r1, r0
 80222f4:	69e3      	ldr	r3, [r4, #28]
 80222f6:	6a22      	ldr	r2, [r4, #32]
 80222f8:	6828      	ldr	r0, [r5, #0]
 80222fa:	4798      	blx	r3
 80222fc:	4639      	mov	r1, r7
 80222fe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8022302:	f7fe ff89 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8022306:	4631      	mov	r1, r6
 8022308:	4640      	mov	r0, r8
 802230a:	f001 fa92 	bl	8023832 <SearchChannelInfoEntry>
 802230e:	2800      	cmp	r0, #0
 8022310:	d005      	beq.n	802231e <L2CAP_DisconnectResponseEvent+0x7c>
 8022312:	4601      	mov	r1, r0
 8022314:	4628      	mov	r0, r5
 8022316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802231a:	f7ff b9e3 	b.w	80216e4 <HandleChannelDisconnection>
 802231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.L2CAP_EchoRequestResponse:

08022322 <L2CAP_EchoRequestResponse>:
 8022322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022326:	b085      	sub	sp, #20
 8022328:	4689      	mov	r9, r1
 802232a:	4605      	mov	r5, r0
 802232c:	e9dd 100c 	ldrd	r1, r0, [sp, #48]	; 0x30
 8022330:	461c      	mov	r4, r3
 8022332:	4617      	mov	r7, r2
 8022334:	f5b9 6f70 	cmp.w	r9, #3840	; 0xf00
 8022338:	d246      	bcs.n	80223c8 <L2CAP_EchoRequestResponse+0xa6>
 802233a:	b3f7      	cbz	r7, 80223ba <L2CAP_EchoRequestResponse+0x98>
 802233c:	b114      	cbz	r4, 8022344 <L2CAP_EchoRequestResponse+0x22>
 802233e:	b3e1      	cbz	r1, 80223ba <L2CAP_EchoRequestResponse+0x98>
 8022340:	2c2c      	cmp	r4, #44	; 0x2c
 8022342:	d83e      	bhi.n	80223c2 <L2CAP_EchoRequestResponse+0xa0>
 8022344:	2200      	movs	r2, #0
 8022346:	f242 0604 	movw	r6, #8196	; 0x2004
 802234a:	2800      	cmp	r0, #0
 802234c:	d101      	bne.n	8022352 <L2CAP_EchoRequestResponse+0x30>
 802234e:	f242 0606 	movw	r6, #8198	; 0x2006
 8022352:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8022354:	f104 0004 	add.w	r0, r4, #4
 8022358:	4690      	mov	r8, r2
 802235a:	7018      	strb	r0, [r3, #0]
 802235c:	6fab      	ldr	r3, [r5, #120]	; 0x78
 802235e:	ea4f 2010 	mov.w	r0, r0, lsr #8
 8022362:	7058      	strb	r0, [r3, #1]
 8022364:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8022366:	f04f 0001 	mov.w	r0, #1
 802236a:	7098      	strb	r0, [r3, #2]
 802236c:	6faa      	ldr	r2, [r5, #120]	; 0x78
 802236e:	f882 8003 	strb.w	r8, [r2, #3]
 8022372:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8022374:	f100 0004 	add.w	r0, r0, #4
 8022378:	d002      	beq.n	8022380 <L2CAP_EchoRequestResponse+0x5e>
 802237a:	f04f 0209 	mov.w	r2, #9
 802237e:	e001      	b.n	8022384 <L2CAP_EchoRequestResponse+0x62>
 8022380:	f04f 0208 	mov.w	r2, #8
 8022384:	7002      	strb	r2, [r0, #0]
 8022386:	7047      	strb	r7, [r0, #1]
 8022388:	7084      	strb	r4, [r0, #2]
 802238a:	ea4f 2214 	mov.w	r2, r4, lsr #8
 802238e:	70c2      	strb	r2, [r0, #3]
 8022390:	b124      	cbz	r4, 802239c <L2CAP_EchoRequestResponse+0x7a>
 8022392:	4622      	mov	r2, r4
 8022394:	f100 0004 	add.w	r0, r0, #4
 8022398:	f7f1 f88d 	bl	80134b6 <BTPS_MemCopy>
 802239c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 802239e:	3408      	adds	r4, #8
 80223a0:	b2a2      	uxth	r2, r4
 80223a2:	e9cd 8202 	strd	r8, r2, [sp, #8]
 80223a6:	e9cd 6800 	strd	r6, r8, [sp]
 80223aa:	9104      	str	r1, [sp, #16]
 80223ac:	463b      	mov	r3, r7
 80223ae:	2201      	movs	r2, #1
 80223b0:	4649      	mov	r1, r9
 80223b2:	4628      	mov	r0, r5
 80223b4:	f7ff feac 	bl	8022110 <L2CAP_DataWrite>
 80223b8:	e000      	b.n	80223bc <L2CAP_EchoRequestResponse+0x9a>
 80223ba:	e005      	b.n	80223c8 <L2CAP_EchoRequestResponse+0xa6>
 80223bc:	b005      	add	sp, #20
 80223be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80223c2:	f06f 0017 	mvn.w	r0, #23
 80223c6:	e7f7      	b.n	80223b8 <L2CAP_EchoRequestResponse+0x96>
 80223c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80223cc:	e7f4      	b.n	80223b8 <L2CAP_EchoRequestResponse+0x96>

Disassembly of section i.L2CAP_InformationRequestResponse:

080223ce <L2CAP_InformationRequestResponse>:
 80223ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80223d2:	b086      	sub	sp, #24
 80223d4:	0017      	movs	r7, r2
 80223d6:	468a      	mov	sl, r1
 80223d8:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80223dc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 80223e0:	4605      	mov	r5, r0
 80223e2:	d060      	beq.n	80224a6 <L2CAP_InformationRequestResponse+0xd8>
 80223e4:	b112      	cbz	r2, 80223ec <L2CAP_InformationRequestResponse+0x1e>
 80223e6:	b3f1      	cbz	r1, 8022466 <L2CAP_InformationRequestResponse+0x98>
 80223e8:	2a28      	cmp	r2, #40	; 0x28
 80223ea:	d859      	bhi.n	80224a0 <L2CAP_InformationRequestResponse+0xd2>
 80223ec:	f242 0604 	movw	r6, #8196	; 0x2004
 80223f0:	f04f 0900 	mov.w	r9, #0
 80223f4:	f1bc 0f00 	cmp.w	ip, #0
 80223f8:	d002      	beq.n	8022400 <L2CAP_InformationRequestResponse+0x32>
 80223fa:	f102 0408 	add.w	r4, r2, #8
 80223fe:	e001      	b.n	8022404 <L2CAP_InformationRequestResponse+0x36>
 8022400:	f04f 0406 	mov.w	r4, #6
 8022404:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 8022406:	7004      	strb	r4, [r0, #0]
 8022408:	f8d5 8078 	ldr.w	r8, [r5, #120]	; 0x78
 802240c:	ea4f 2014 	mov.w	r0, r4, lsr #8
 8022410:	f888 0001 	strb.w	r0, [r8, #1]
 8022414:	f8d5 8078 	ldr.w	r8, [r5, #120]	; 0x78
 8022418:	f04f 0001 	mov.w	r0, #1
 802241c:	f888 0002 	strb.w	r0, [r8, #2]
 8022420:	f8d5 8078 	ldr.w	r8, [r5, #120]	; 0x78
 8022424:	f888 9003 	strb.w	r9, [r8, #3]
 8022428:	6fa8      	ldr	r0, [r5, #120]	; 0x78
 802242a:	f100 0004 	add.w	r0, r0, #4
 802242e:	d002      	beq.n	8022436 <L2CAP_InformationRequestResponse+0x68>
 8022430:	f04f 080b 	mov.w	r8, #11
 8022434:	e001      	b.n	802243a <L2CAP_InformationRequestResponse+0x6c>
 8022436:	f04f 080a 	mov.w	r8, #10
 802243a:	f880 8000 	strb.w	r8, [r0]
 802243e:	7047      	strb	r7, [r0, #1]
 8022440:	f1a4 0804 	sub.w	r8, r4, #4
 8022444:	f880 8002 	strb.w	r8, [r0, #2]
 8022448:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802244c:	f880 8003 	strb.w	r8, [r0, #3]
 8022450:	7103      	strb	r3, [r0, #4]
 8022452:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8022456:	7143      	strb	r3, [r0, #5]
 8022458:	d00f      	beq.n	802247a <L2CAP_InformationRequestResponse+0xac>
 802245a:	f89c 3000 	ldrb.w	r3, [ip]
 802245e:	7183      	strb	r3, [r0, #6]
 8022460:	f8bc 3000 	ldrh.w	r3, [ip]
 8022464:	e000      	b.n	8022468 <L2CAP_InformationRequestResponse+0x9a>
 8022466:	e01e      	b.n	80224a6 <L2CAP_InformationRequestResponse+0xd8>
 8022468:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802246c:	71c3      	strb	r3, [r0, #7]
 802246e:	b132      	cbz	r2, 802247e <L2CAP_InformationRequestResponse+0xb0>
 8022470:	f100 0008 	add.w	r0, r0, #8
 8022474:	f7f1 f81f 	bl	80134b6 <BTPS_MemCopy>
 8022478:	e001      	b.n	802247e <L2CAP_InformationRequestResponse+0xb0>
 802247a:	f242 0606 	movw	r6, #8198	; 0x2006
 802247e:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8022480:	1d24      	adds	r4, r4, #4
 8022482:	b2a2      	uxth	r2, r4
 8022484:	e9cd 9202 	strd	r9, r2, [sp, #8]
 8022488:	e9cd 6900 	strd	r6, r9, [sp]
 802248c:	9104      	str	r1, [sp, #16]
 802248e:	463b      	mov	r3, r7
 8022490:	2201      	movs	r2, #1
 8022492:	4651      	mov	r1, sl
 8022494:	4628      	mov	r0, r5
 8022496:	f7ff fe3b 	bl	8022110 <L2CAP_DataWrite>
 802249a:	b006      	add	sp, #24
 802249c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224a0:	f06f 0017 	mvn.w	r0, #23
 80224a4:	e7f9      	b.n	802249a <L2CAP_InformationRequestResponse+0xcc>
 80224a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80224aa:	e7f6      	b.n	802249a <L2CAP_InformationRequestResponse+0xcc>

Disassembly of section i.L2CAP_Initialize:

080224ac <L2CAP_Initialize>:
 80224ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224b0:	b089      	sub	sp, #36	; 0x24
 80224b2:	4683      	mov	fp, r0
 80224b4:	f7f6 fa42 	bl	801893c <AcquireBluetoothStackInformation>
 80224b8:	0004      	movs	r4, r0
 80224ba:	d07c      	beq.n	80225b6 <L2CAP_Initialize+0x10a>
 80224bc:	207c      	movs	r0, #124	; 0x7c
 80224be:	f7f0 ff7d 	bl	80133bc <BTPS_AllocateMemory>
 80224c2:	f06f 0527 	mvn.w	r5, #39	; 0x27
 80224c6:	6460      	str	r0, [r4, #68]	; 0x44
 80224c8:	b168      	cbz	r0, 80224e6 <L2CAP_Initialize+0x3a>
 80224ca:	227c      	movs	r2, #124	; 0x7c
 80224cc:	2100      	movs	r1, #0
 80224ce:	f7f0 fff6 	bl	80134be <BTPS_MemInitialize>
 80224d2:	a903      	add	r1, sp, #12
 80224d4:	4658      	mov	r0, fp
 80224d6:	f7fd fc91 	bl	801fdfc <HCI_Version_Supported>
 80224da:	b140      	cbz	r0, 80224ee <L2CAP_Initialize+0x42>
 80224dc:	f06f 0511 	mvn.w	r5, #17
 80224e0:	4620      	mov	r0, r4
 80224e2:	f7ff f80b 	bl	80214fc <FreeL2CAPContextInformation>
 80224e6:	4620      	mov	r0, r4
 80224e8:	f7f7 f85c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80224ec:	e0ca      	b.n	8022684 <L2CAP_Initialize+0x1d8>
 80224ee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80224f2:	f884 0020 	strb.w	r0, [r4, #32]
 80224f6:	4658      	mov	r0, fp
 80224f8:	f7fd f909 	bl	801f70e <HCI_Build_ACL_Packet_Type_Mask>
 80224fc:	ea5f 0800 	movs.w	r8, r0
 8022500:	d07e      	beq.n	8022600 <L2CAP_Initialize+0x154>
 8022502:	a808      	add	r0, sp, #32
 8022504:	9000      	str	r0, [sp, #0]
 8022506:	ab06      	add	r3, sp, #24
 8022508:	aa07      	add	r2, sp, #28
 802250a:	a905      	add	r1, sp, #20
 802250c:	4658      	mov	r0, fp
 802250e:	f7fe fa5f 	bl	80209d0 <_HCI_Read_Buffer_Size>
 8022512:	b110      	cbz	r0, 802251a <L2CAP_Initialize+0x6e>
 8022514:	f06f 0513 	mvn.w	r5, #19
 8022518:	e7e2      	b.n	80224e0 <L2CAP_Initialize+0x34>
 802251a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802251e:	f04f 0a00 	mov.w	sl, #0
 8022522:	2806      	cmp	r0, #6
 8022524:	d30b      	bcc.n	802253e <L2CAP_Initialize+0x92>
 8022526:	21d1      	movs	r1, #209	; 0xd1
 8022528:	4658      	mov	r0, fp
 802252a:	f7fd f974 	bl	801f816 <HCI_Command_Supported>
 802252e:	2800      	cmp	r0, #0
 8022530:	dd05      	ble.n	802253e <L2CAP_Initialize+0x92>
 8022532:	aa02      	add	r2, sp, #8
 8022534:	a901      	add	r1, sp, #4
 8022536:	4658      	mov	r0, fp
 8022538:	f7fe f84b 	bl	80205d2 <_HCI_LE_Read_Buffer_Size>
 802253c:	b118      	cbz	r0, 8022546 <L2CAP_Initialize+0x9a>
 802253e:	f8ad a004 	strh.w	sl, [sp, #4]
 8022542:	f88d a008 	strb.w	sl, [sp, #8]
 8022546:	465a      	mov	r2, fp
 8022548:	4950      	ldr	r1, [pc, #320]	; (802268c <L2CAP_Initialize+0x1e0>)
 802254a:	4610      	mov	r0, r2
 802254c:	f7fd fb17 	bl	801fb7e <HCI_Register_Event_Callback>
 8022550:	f1b0 0900 	subs.w	r9, r0, #0
 8022554:	dd7e      	ble.n	8022654 <L2CAP_Initialize+0x1a8>
 8022556:	465a      	mov	r2, fp
 8022558:	494d      	ldr	r1, [pc, #308]	; (8022690 <L2CAP_Initialize+0x1e4>)
 802255a:	4610      	mov	r0, r2
 802255c:	f7fd fb0a 	bl	801fb74 <HCI_Register_ACL_Data_Callback>
 8022560:	1e06      	subs	r6, r0, #0
 8022562:	dd78      	ble.n	8022656 <L2CAP_Initialize+0x1aa>
 8022564:	2720      	movs	r7, #32
 8022566:	aa04      	add	r2, sp, #16
 8022568:	2101      	movs	r1, #1
 802256a:	4658      	mov	r0, fp
 802256c:	f7f6 fffc 	bl	8019568 <QuerySharedBuffer>
 8022570:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022572:	6748      	str	r0, [r1, #116]	; 0x74
 8022574:	b110      	cbz	r0, 802257c <L2CAP_Initialize+0xd0>
 8022576:	9804      	ldr	r0, [sp, #16]
 8022578:	2820      	cmp	r0, #32
 802257a:	d207      	bcs.n	802258c <L2CAP_Initialize+0xe0>
 802257c:	4638      	mov	r0, r7
 802257e:	9704      	str	r7, [sp, #16]
 8022580:	f7f0 ff1c 	bl	80133bc <BTPS_AllocateMemory>
 8022584:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022586:	2800      	cmp	r0, #0
 8022588:	6748      	str	r0, [r1, #116]	; 0x74
 802258a:	d0a9      	beq.n	80224e0 <L2CAP_Initialize+0x34>
 802258c:	2050      	movs	r0, #80	; 0x50
 802258e:	f7f0 ff15 	bl	80133bc <BTPS_AllocateMemory>
 8022592:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022594:	2800      	cmp	r0, #0
 8022596:	6708      	str	r0, [r1, #112]	; 0x70
 8022598:	d0a2      	beq.n	80224e0 <L2CAP_Initialize+0x34>
 802259a:	2034      	movs	r0, #52	; 0x34
 802259c:	f7f0 ff0e 	bl	80133bc <BTPS_AllocateMemory>
 80225a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225a2:	2800      	cmp	r0, #0
 80225a4:	6788      	str	r0, [r1, #120]	; 0x78
 80225a6:	d09b      	beq.n	80224e0 <L2CAP_Initialize+0x34>
 80225a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225aa:	f8a1 8026 	strh.w	r8, [r1, #38]	; 0x26
 80225ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80225b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225b4:	e000      	b.n	80225b8 <L2CAP_Initialize+0x10c>
 80225b6:	e063      	b.n	8022680 <L2CAP_Initialize+0x1d4>
 80225b8:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80225bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225be:	4655      	mov	r5, sl
 80225c0:	2804      	cmp	r0, #4
 80225c2:	f881 a039 	strb.w	sl, [r1, #57]	; 0x39
 80225c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225c8:	f811 2f2c 	ldrb.w	r2, [r1, #44]!
 80225cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80225d0:	700a      	strb	r2, [r1, #0]
 80225d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225d4:	f811 2f30 	ldrb.w	r2, [r1, #48]!
 80225d8:	f042 0202 	orr.w	r2, r2, #2
 80225dc:	700a      	strb	r2, [r1, #0]
 80225de:	d308      	bcc.n	80225f2 <L2CAP_Initialize+0x146>
 80225e0:	218d      	movs	r1, #141	; 0x8d
 80225e2:	4658      	mov	r0, fp
 80225e4:	f7fd f917 	bl	801f816 <HCI_Command_Supported>
 80225e8:	b118      	cbz	r0, 80225f2 <L2CAP_Initialize+0x146>
 80225ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225ec:	20ff      	movs	r0, #255	; 0xff
 80225ee:	f881 0039 	strb.w	r0, [r1, #57]	; 0x39
 80225f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225f4:	200f      	movs	r0, #15
 80225f6:	60c8      	str	r0, [r1, #12]
 80225f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80225fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80225fe:	e000      	b.n	8022602 <L2CAP_Initialize+0x156>
 8022600:	e03b      	b.n	802267a <L2CAP_Initialize+0x1ce>
 8022602:	6108      	str	r0, [r1, #16]
 8022604:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022606:	2002      	movs	r0, #2
 8022608:	6148      	str	r0, [r1, #20]
 802260a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802260c:	203c      	movs	r0, #60	; 0x3c
 802260e:	6188      	str	r0, [r1, #24]
 8022610:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022612:	61c8      	str	r0, [r1, #28]
 8022614:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022616:	9804      	ldr	r0, [sp, #16]
 8022618:	6288      	str	r0, [r1, #40]	; 0x28
 802261a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802261c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8022620:	8408      	strh	r0, [r1, #32]
 8022622:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022624:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8022628:	8448      	strh	r0, [r1, #34]	; 0x22
 802262a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802262c:	8488      	strh	r0, [r1, #36]	; 0x24
 802262e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022630:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8022634:	f8a1 0042 	strh.w	r0, [r1, #66]	; 0x42
 8022638:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802263a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 802263e:	f8a1 0044 	strh.w	r0, [r1, #68]	; 0x44
 8022642:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022644:	f8a1 0046 	strh.w	r0, [r1, #70]	; 0x46
 8022648:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802264a:	f8c1 9004 	str.w	r9, [r1, #4]
 802264e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8022650:	6086      	str	r6, [r0, #8]
 8022652:	e001      	b.n	8022658 <L2CAP_Initialize+0x1ac>
 8022654:	e00e      	b.n	8022674 <L2CAP_Initialize+0x1c8>
 8022656:	e00a      	b.n	802266e <L2CAP_Initialize+0x1c2>
 8022658:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802265a:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
 802265e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8022660:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
 8022664:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022666:	2500      	movs	r5, #0
 8022668:	f8c1 b000 	str.w	fp, [r1]
 802266c:	e73b      	b.n	80224e6 <L2CAP_Initialize+0x3a>
 802266e:	f06f 0515 	mvn.w	r5, #21
 8022672:	e735      	b.n	80224e0 <L2CAP_Initialize+0x34>
 8022674:	f06f 0514 	mvn.w	r5, #20
 8022678:	e732      	b.n	80224e0 <L2CAP_Initialize+0x34>
 802267a:	f06f 0512 	mvn.w	r5, #18
 802267e:	e72f      	b.n	80224e0 <L2CAP_Initialize+0x34>
 8022680:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8022684:	b009      	add	sp, #36	; 0x24
 8022686:	4628      	mov	r0, r5
 8022688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802268c:	0801ac71 	.word	0x0801ac71
 8022690:	0802157d 	.word	0x0802157d

Disassembly of section i.L2CAP_ProcessACLQueue:

08022694 <L2CAP_ProcessACLQueue>:
 8022694:	b538      	push	{r3, r4, r5, lr}
 8022696:	4604      	mov	r4, r0
 8022698:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 802269c:	2000      	movs	r0, #0
 802269e:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80226a2:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80226a6:	9000      	str	r0, [sp, #0]
 80226a8:	b153      	cbz	r3, 80226c0 <L2CAP_ProcessACLQueue+0x2c>
 80226aa:	2321      	movs	r3, #33	; 0x21
 80226ac:	4620      	mov	r0, r4
 80226ae:	f000 ffbb 	bl	8023628 <ProcessSendQueueData>
 80226b2:	2020      	movs	r0, #32
 80226b4:	2321      	movs	r3, #33	; 0x21
 80226b6:	f104 0248 	add.w	r2, r4, #72	; 0x48
 80226ba:	1e91      	subs	r1, r2, #2
 80226bc:	9000      	str	r0, [sp, #0]
 80226be:	e000      	b.n	80226c2 <L2CAP_ProcessACLQueue+0x2e>
 80226c0:	2301      	movs	r3, #1
 80226c2:	4620      	mov	r0, r4
 80226c4:	f000 ffb0 	bl	8023628 <ProcessSendQueueData>
 80226c8:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.L2CAP_ReceiveTimeout:

080226ca <L2CAP_ReceiveTimeout>:
 80226ca:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 80226cc:	000d      	movs	r5, r1
 80226ce:	d03b      	beq.n	8022748 <L2CAP_ReceiveTimeout+0x7e>
 80226d0:	4602      	mov	r2, r0
 80226d2:	a901      	add	r1, sp, #4
 80226d4:	a802      	add	r0, sp, #8
 80226d6:	f7fe fbc4 	bl	8020e62 <AcquireL2CAPStackInformation>
 80226da:	bba8      	cbnz	r0, 8022748 <L2CAP_ReceiveTimeout+0x7e>
 80226dc:	2400      	movs	r4, #0
 80226de:	e027      	b.n	8022730 <L2CAP_ReceiveTimeout+0x66>
 80226e0:	68e0      	ldr	r0, [r4, #12]
 80226e2:	42a8      	cmp	r0, r5
 80226e4:	d124      	bne.n	8022730 <L2CAP_ReceiveTimeout+0x66>
 80226e6:	2000      	movs	r0, #0
 80226e8:	60e0      	str	r0, [r4, #12]
 80226ea:	9801      	ldr	r0, [sp, #4]
 80226ec:	8821      	ldrh	r1, [r4, #0]
 80226ee:	3058      	adds	r0, #88	; 0x58
 80226f0:	f001 f8cb 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 80226f4:	b1b0      	cbz	r0, 8022724 <L2CAP_ReceiveTimeout+0x5a>
 80226f6:	8a40      	ldrh	r0, [r0, #18]
 80226f8:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
 80226fc:	39ff      	subs	r1, #255	; 0xff
 80226fe:	d111      	bne.n	8022724 <L2CAP_ReceiveTimeout+0x5a>
 8022700:	6920      	ldr	r0, [r4, #16]
 8022702:	8845      	ldrh	r5, [r0, #2]
 8022704:	9801      	ldr	r0, [sp, #4]
 8022706:	4629      	mov	r1, r5
 8022708:	3054      	adds	r0, #84	; 0x54
 802270a:	f001 f892 	bl	8023832 <SearchChannelInfoEntry>
 802270e:	b148      	cbz	r0, 8022724 <L2CAP_ReceiveTimeout+0x5a>
 8022710:	69c3      	ldr	r3, [r0, #28]
 8022712:	b13b      	cbz	r3, 8022724 <L2CAP_ReceiveTimeout+0x5a>
 8022714:	6a00      	ldr	r0, [r0, #32]
 8022716:	9000      	str	r0, [sp, #0]
 8022718:	9801      	ldr	r0, [sp, #4]
 802271a:	2201      	movs	r2, #1
 802271c:	4629      	mov	r1, r5
 802271e:	6800      	ldr	r0, [r0, #0]
 8022720:	f7ff f846 	bl	80217b0 <HandleReadDataError>
 8022724:	9801      	ldr	r0, [sp, #4]
 8022726:	4621      	mov	r1, r4
 8022728:	3050      	adds	r0, #80	; 0x50
 802272a:	f7fe fd37 	bl	802119c <DeleteACLPacketEntry>
 802272e:	e008      	b.n	8022742 <L2CAP_ReceiveTimeout+0x78>
 8022730:	9b01      	ldr	r3, [sp, #4]
 8022732:	4621      	mov	r1, r4
 8022734:	2214      	movs	r2, #20
 8022736:	2006      	movs	r0, #6
 8022738:	3350      	adds	r3, #80	; 0x50
 802273a:	f7f6 fad1 	bl	8018ce0 <BSC_GetNextGenericListEntry>
 802273e:	0004      	movs	r4, r0
 8022740:	d1ce      	bne.n	80226e0 <L2CAP_ReceiveTimeout+0x16>
 8022742:	9802      	ldr	r0, [sp, #8]
 8022744:	f7f6 ff2e 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022748:	2000      	movs	r0, #0
 802274a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i.L2CAP_RejectCommand:

0802274c <L2CAP_RejectCommand>:
 802274c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802274e:	b085      	sub	sp, #20
 8022750:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8022754:	e9dd 5c0a 	ldrd	r5, ip, [sp, #40]	; 0x28
 8022758:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802275a:	d240      	bcs.n	80227de <L2CAP_RejectCommand+0x92>
 802275c:	f242 0604 	movw	r6, #8196	; 0x2004
 8022760:	2a05      	cmp	r2, #5
 8022762:	d101      	bne.n	8022768 <L2CAP_RejectCommand+0x1c>
 8022764:	f242 0664 	movw	r6, #8292	; 0x2064
 8022768:	6f84      	ldr	r4, [r0, #120]	; 0x78
 802276a:	ea4f 2e15 	mov.w	lr, r5, lsr #8
 802276e:	7225      	strb	r5, [r4, #8]
 8022770:	f884 e009 	strb.w	lr, [r4, #9]
 8022774:	1d24      	adds	r4, r4, #4
 8022776:	f04f 0e00 	mov.w	lr, #0
 802277a:	2d01      	cmp	r5, #1
 802277c:	d003      	beq.n	8022786 <L2CAP_RejectCommand+0x3a>
 802277e:	2d02      	cmp	r5, #2
 8022780:	d007      	beq.n	8022792 <L2CAP_RejectCommand+0x46>
 8022782:	2506      	movs	r5, #6
 8022784:	e00f      	b.n	80227a6 <L2CAP_RejectCommand+0x5a>
 8022786:	2508      	movs	r5, #8
 8022788:	2730      	movs	r7, #48	; 0x30
 802278a:	71a7      	strb	r7, [r4, #6]
 802278c:	f884 e007 	strb.w	lr, [r4, #7]
 8022790:	e009      	b.n	80227a6 <L2CAP_RejectCommand+0x5a>
 8022792:	f884 c006 	strb.w	ip, [r4, #6]
 8022796:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802279a:	f884 c007 	strb.w	ip, [r4, #7]
 802279e:	250a      	movs	r5, #10
 80227a0:	7227      	strb	r7, [r4, #8]
 80227a2:	0a3f      	lsrs	r7, r7, #8
 80227a4:	7267      	strb	r7, [r4, #9]
 80227a6:	6f87      	ldr	r7, [r0, #120]	; 0x78
 80227a8:	703d      	strb	r5, [r7, #0]
 80227aa:	6f87      	ldr	r7, [r0, #120]	; 0x78
 80227ac:	f887 e001 	strb.w	lr, [r7, #1]
 80227b0:	6f87      	ldr	r7, [r0, #120]	; 0x78
 80227b2:	70ba      	strb	r2, [r7, #2]
 80227b4:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
 80227b8:	0a17      	lsrs	r7, r2, #8
 80227ba:	f88c 7003 	strb.w	r7, [ip, #3]
 80227be:	2701      	movs	r7, #1
 80227c0:	7027      	strb	r7, [r4, #0]
 80227c2:	1f2f      	subs	r7, r5, #4
 80227c4:	7063      	strb	r3, [r4, #1]
 80227c6:	70a7      	strb	r7, [r4, #2]
 80227c8:	0a3f      	lsrs	r7, r7, #8
 80227ca:	70e7      	strb	r7, [r4, #3]
 80227cc:	6f84      	ldr	r4, [r0, #120]	; 0x78
 80227ce:	1d2d      	adds	r5, r5, #4
 80227d0:	e9cd 6e00 	strd	r6, lr, [sp]
 80227d4:	e9cd e502 	strd	lr, r5, [sp, #8]
 80227d8:	9404      	str	r4, [sp, #16]
 80227da:	f7ff fc99 	bl	8022110 <L2CAP_DataWrite>
 80227de:	b005      	add	sp, #20
 80227e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section i.L2CAP_RequestTimeout:

080227e2 <L2CAP_RequestTimeout>:
 80227e2:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80227e6:	4692      	mov	sl, r2
 80227e8:	460e      	mov	r6, r1
 80227ea:	4602      	mov	r2, r0
 80227ec:	f04f 0b00 	mov.w	fp, #0
 80227f0:	a902      	add	r1, sp, #8
 80227f2:	a803      	add	r0, sp, #12
 80227f4:	f7fe fb35 	bl	8020e62 <AcquireL2CAPStackInformation>
 80227f8:	bba0      	cbnz	r0, 8022864 <L2CAP_RequestTimeout+0x82>
 80227fa:	9802      	ldr	r0, [sp, #8]
 80227fc:	fa1f f18a 	uxth.w	r1, sl
 8022800:	305c      	adds	r0, #92	; 0x5c
 8022802:	f001 f872 	bl	80238ea <SearchIdentifierInfoEntryByIdentifier>
 8022806:	0004      	movs	r4, r0
 8022808:	d029      	beq.n	802285e <L2CAP_RequestTimeout+0x7c>
 802280a:	9802      	ldr	r0, [sp, #8]
 802280c:	88a1      	ldrh	r1, [r4, #4]
 802280e:	304c      	adds	r0, #76	; 0x4c
 8022810:	f001 f805 	bl	802381e <SearchACLPacketEntryByIdentifier>
 8022814:	4605      	mov	r5, r0
 8022816:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 802281a:	4401      	add	r1, r0
 802281c:	0040      	lsls	r0, r0, #1
 802281e:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8022822:	9802      	ldr	r0, [sp, #8]
 8022824:	68c2      	ldr	r2, [r0, #12]
 8022826:	4291      	cmp	r1, r2
 8022828:	d220      	bcs.n	802286c <L2CAP_RequestTimeout+0x8a>
 802282a:	b1fd      	cbz	r5, 802286c <L2CAP_RequestTimeout+0x8a>
 802282c:	88e9      	ldrh	r1, [r5, #6]
 802282e:	f021 0101 	bic.w	r1, r1, #1
 8022832:	80e9      	strh	r1, [r5, #6]
 8022834:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8022838:	188b      	adds	r3, r1, r2
 802283a:	68c2      	ldr	r2, [r0, #12]
 802283c:	4293      	cmp	r3, r2
 802283e:	d301      	bcc.n	8022844 <L2CAP_RequestTimeout+0x62>
 8022840:	1a51      	subs	r1, r2, r1
 8022842:	6121      	str	r1, [r4, #16]
 8022844:	6922      	ldr	r2, [r4, #16]
 8022846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 802284a:	434a      	muls	r2, r1
 802284c:	6800      	ldr	r0, [r0, #0]
 802284e:	4631      	mov	r1, r6
 8022850:	f7f6 ff46 	bl	80196e0 <BTPS_ChangeTimer>
 8022854:	9802      	ldr	r0, [sp, #8]
 8022856:	f7ff ff1d 	bl	8022694 <L2CAP_ProcessACLQueue>
 802285a:	f04f 0b01 	mov.w	fp, #1
 802285e:	9803      	ldr	r0, [sp, #12]
 8022860:	f7f6 fea0 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022864:	b004      	add	sp, #16
 8022866:	4658      	mov	r0, fp
 8022868:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 802286c:	8921      	ldrh	r1, [r4, #8]
 802286e:	3054      	adds	r0, #84	; 0x54
 8022870:	f000 ffdf 	bl	8023832 <SearchChannelInfoEntry>
 8022874:	0007      	movs	r7, r0
 8022876:	d0f2      	beq.n	802285e <L2CAP_RequestTimeout+0x7c>
 8022878:	69a0      	ldr	r0, [r4, #24]
 802287a:	ea5f 0800 	movs.w	r8, r0
 802287e:	d007      	beq.n	8022890 <L2CAP_RequestTimeout+0xae>
 8022880:	2002      	movs	r0, #2
 8022882:	72f8      	strb	r0, [r7, #11]
 8022884:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8022888:	7aa6      	ldrb	r6, [r4, #10]
 802288a:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 802288e:	e001      	b.n	8022894 <L2CAP_RequestTimeout+0xb2>
 8022890:	f04f 0900 	mov.w	r9, #0
 8022894:	9802      	ldr	r0, [sp, #8]
 8022896:	88a1      	ldrh	r1, [r4, #4]
 8022898:	305c      	adds	r0, #92	; 0x5c
 802289a:	f7fe fcbd 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 802289e:	b125      	cbz	r5, 80228aa <L2CAP_RequestTimeout+0xc8>
 80228a0:	9802      	ldr	r0, [sp, #8]
 80228a2:	4629      	mov	r1, r5
 80228a4:	304c      	adds	r0, #76	; 0x4c
 80228a6:	f7fe fc79 	bl	802119c <DeleteACLPacketEntry>
 80228aa:	4639      	mov	r1, r7
 80228ac:	9802      	ldr	r0, [sp, #8]
 80228ae:	f7fe ff19 	bl	80216e4 <HandleChannelDisconnection>
 80228b2:	f1b8 0f00 	cmp.w	r8, #0
 80228b6:	d0d2      	beq.n	802285e <L2CAP_RequestTimeout+0x7c>
 80228b8:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80228bc:	2e02      	cmp	r6, #2
 80228be:	d008      	beq.n	80228d2 <L2CAP_RequestTimeout+0xf0>
 80228c0:	2e04      	cmp	r6, #4
 80228c2:	d00c      	beq.n	80228de <L2CAP_RequestTimeout+0xfc>
 80228c4:	2e06      	cmp	r6, #6
 80228c6:	d1ca      	bne.n	802285e <L2CAP_RequestTimeout+0x7c>
 80228c8:	4649      	mov	r1, r9
 80228ca:	9802      	ldr	r0, [sp, #8]
 80228cc:	f7fe fd61 	bl	8021392 <FormatEventDisconnectConfirmation>
 80228d0:	e00d      	b.n	80228ee <L2CAP_RequestTimeout+0x10c>
 80228d2:	2300      	movs	r3, #0
 80228d4:	4649      	mov	r1, r9
 80228d6:	9802      	ldr	r0, [sp, #8]
 80228d8:	f7fe fd47 	bl	802136a <FormatEventConnectConfirmation>
 80228dc:	e007      	b.n	80228ee <L2CAP_RequestTimeout+0x10c>
 80228de:	2000      	movs	r0, #0
 80228e0:	9000      	str	r0, [sp, #0]
 80228e2:	4603      	mov	r3, r0
 80228e4:	9001      	str	r0, [sp, #4]
 80228e6:	4649      	mov	r1, r9
 80228e8:	9802      	ldr	r0, [sp, #8]
 80228ea:	f7fe fd26 	bl	802133a <FormatEventConfigConfirmation>
 80228ee:	0001      	movs	r1, r0
 80228f0:	d004      	beq.n	80228fc <L2CAP_RequestTimeout+0x11a>
 80228f2:	9802      	ldr	r0, [sp, #8]
 80228f4:	4652      	mov	r2, sl
 80228f6:	4643      	mov	r3, r8
 80228f8:	6800      	ldr	r0, [r0, #0]
 80228fa:	4798      	blx	r3
 80228fc:	2e04      	cmp	r6, #4
 80228fe:	d001      	beq.n	8022904 <L2CAP_RequestTimeout+0x122>
 8022900:	2e06      	cmp	r6, #6
 8022902:	d1ac      	bne.n	802285e <L2CAP_RequestTimeout+0x7c>
 8022904:	2200      	movs	r2, #0
 8022906:	4649      	mov	r1, r9
 8022908:	9802      	ldr	r0, [sp, #8]
 802290a:	f7fe fd4d 	bl	80213a8 <FormatEventDisconnectIndication>
 802290e:	4601      	mov	r1, r0
 8022910:	9802      	ldr	r0, [sp, #8]
 8022912:	4652      	mov	r2, sl
 8022914:	4643      	mov	r3, r8
 8022916:	6800      	ldr	r0, [r0, #0]
 8022918:	4798      	blx	r3
 802291a:	e7a0      	b.n	802285e <L2CAP_RequestTimeout+0x7c>

Disassembly of section i.L2CAP_StateTimeout:

0802291c <L2CAP_StateTimeout>:
 802291c:	b51c      	push	{r2, r3, r4, lr}
 802291e:	4614      	mov	r4, r2
 8022920:	4602      	mov	r2, r0
 8022922:	4669      	mov	r1, sp
 8022924:	a801      	add	r0, sp, #4
 8022926:	f7fe fa9c 	bl	8020e62 <AcquireL2CAPStackInformation>
 802292a:	bb40      	cbnz	r0, 802297e <L2CAP_StateTimeout+0x62>
 802292c:	9800      	ldr	r0, [sp, #0]
 802292e:	b2a1      	uxth	r1, r4
 8022930:	3054      	adds	r0, #84	; 0x54
 8022932:	f000 ff7e 	bl	8023832 <SearchChannelInfoEntry>
 8022936:	0004      	movs	r4, r0
 8022938:	d01e      	beq.n	8022978 <L2CAP_StateTimeout+0x5c>
 802293a:	2000      	movs	r0, #0
 802293c:	64e0      	str	r0, [r4, #76]	; 0x4c
 802293e:	7e20      	ldrb	r0, [r4, #24]
 8022940:	07c0      	lsls	r0, r0, #31
 8022942:	d004      	beq.n	802294e <L2CAP_StateTimeout+0x32>
 8022944:	8921      	ldrh	r1, [r4, #8]
 8022946:	9800      	ldr	r0, [sp, #0]
 8022948:	f000 fb83 	bl	8023052 <LP_DisconnectReq>
 802294c:	e014      	b.n	8022978 <L2CAP_StateTimeout+0x5c>
 802294e:	69e0      	ldr	r0, [r4, #28]
 8022950:	b150      	cbz	r0, 8022968 <L2CAP_StateTimeout+0x4c>
 8022952:	88e1      	ldrh	r1, [r4, #6]
 8022954:	2200      	movs	r2, #0
 8022956:	9800      	ldr	r0, [sp, #0]
 8022958:	f7fe fd26 	bl	80213a8 <FormatEventDisconnectIndication>
 802295c:	4601      	mov	r1, r0
 802295e:	9800      	ldr	r0, [sp, #0]
 8022960:	69e3      	ldr	r3, [r4, #28]
 8022962:	6a22      	ldr	r2, [r4, #32]
 8022964:	6800      	ldr	r0, [r0, #0]
 8022966:	4798      	blx	r3
 8022968:	88e1      	ldrh	r1, [r4, #6]
 802296a:	9800      	ldr	r0, [sp, #0]
 802296c:	f001 f9c5 	bl	8023cfa <_L2CA_Disconnect_Request>
 8022970:	4621      	mov	r1, r4
 8022972:	9800      	ldr	r0, [sp, #0]
 8022974:	f7fe fb34 	bl	8020fe0 <CleanupChannel>
 8022978:	9801      	ldr	r0, [sp, #4]
 802297a:	f7f6 fe13 	bl	80195a4 <ReleaseBluetoothStackInformation>
 802297e:	2000      	movs	r0, #0
 8022980:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.L2CA_Enhanced_Fixed_Channel_Data_Write:

08022982 <L2CA_Enhanced_Fixed_Channel_Data_Write>:
 8022982:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022986:	b08a      	sub	sp, #40	; 0x28
 8022988:	461d      	mov	r5, r3
 802298a:	e9dd 8616 	ldrd	r8, r6, [sp, #88]	; 0x58
 802298e:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8022992:	2e00      	cmp	r6, #0
 8022994:	d06d      	beq.n	8022a72 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xf0>
 8022996:	ea5f 010a 	movs.w	r1, sl
 802299a:	d06a      	beq.n	8022a72 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xf0>
 802299c:	4602      	mov	r2, r0
 802299e:	a907      	add	r1, sp, #28
 80229a0:	a808      	add	r0, sp, #32
 80229a2:	f7fe fa5e 	bl	8020e62 <AcquireL2CAPStackInformation>
 80229a6:	0004      	movs	r4, r0
 80229a8:	d165      	bne.n	8022a76 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xf4>
 80229aa:	9807      	ldr	r0, [sp, #28]
 80229ac:	4629      	mov	r1, r5
 80229ae:	306c      	adds	r0, #108	; 0x6c
 80229b0:	f000 ffa5 	bl	80238fe <SearchRegistryByID>
 80229b4:	0004      	movs	r4, r0
 80229b6:	d056      	beq.n	8022a66 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xe4>
 80229b8:	88a0      	ldrh	r0, [r4, #4]
 80229ba:	2804      	cmp	r0, #4
 80229bc:	d046      	beq.n	8022a4c <L2CA_Enhanced_Fixed_Channel_Data_Write+0xca>
 80229be:	2805      	cmp	r0, #5
 80229c0:	d044      	beq.n	8022a4c <L2CA_Enhanced_Fixed_Channel_Data_Write+0xca>
 80229c2:	2806      	cmp	r0, #6
 80229c4:	d042      	beq.n	8022a4c <L2CA_Enhanced_Fixed_Channel_Data_Write+0xca>
 80229c6:	2200      	movs	r2, #0
 80229c8:	9807      	ldr	r0, [sp, #28]
 80229ca:	a90b      	add	r1, sp, #44	; 0x2c
 80229cc:	3058      	adds	r0, #88	; 0x58
 80229ce:	f000 ff3a 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 80229d2:	0005      	movs	r5, r0
 80229d4:	d044      	beq.n	8022a60 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xde>
 80229d6:	2700      	movs	r7, #0
 80229d8:	f1b8 0f00 	cmp.w	r8, #0
 80229dc:	d00f      	beq.n	80229fe <L2CA_Enhanced_Fixed_Channel_Data_Write+0x7c>
 80229de:	88a1      	ldrh	r1, [r4, #4]
 80229e0:	f105 0020 	add.w	r0, r5, #32
 80229e4:	f000 ff5b 	bl	802389e <SearchFixedChannelInfoEntry>
 80229e8:	0007      	movs	r7, r0
 80229ea:	d036      	beq.n	8022a5a <L2CA_Enhanced_Fixed_Channel_Data_Write+0xd8>
 80229ec:	89a8      	ldrh	r0, [r5, #12]
 80229ee:	9000      	str	r0, [sp, #0]
 80229f0:	88a3      	ldrh	r3, [r4, #4]
 80229f2:	1d3a      	adds	r2, r7, #4
 80229f4:	4641      	mov	r1, r8
 80229f6:	9807      	ldr	r0, [sp, #28]
 80229f8:	f7fe fa6f 	bl	8020eda <CheckQueuedDataWrite>
 80229fc:	b350      	cbz	r0, 8022a54 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xd2>
 80229fe:	7868      	ldrb	r0, [r5, #1]
 8022a00:	2801      	cmp	r0, #1
 8022a02:	d025      	beq.n	8022a50 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xce>
 8022a04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8022a08:	f040 0940 	orr.w	r9, r0, #64	; 0x40
 8022a0c:	f88d 6018 	strb.w	r6, [sp, #24]
 8022a10:	0a30      	lsrs	r0, r6, #8
 8022a12:	f88d 0019 	strb.w	r0, [sp, #25]
 8022a16:	7920      	ldrb	r0, [r4, #4]
 8022a18:	f88d 001a 	strb.w	r0, [sp, #26]
 8022a1c:	88a0      	ldrh	r0, [r4, #4]
 8022a1e:	0a00      	lsrs	r0, r0, #8
 8022a20:	f88d 001b 	strb.w	r0, [sp, #27]
 8022a24:	f7fe fd92 	bl	802154c <GetNextDataIdentifier>
 8022a28:	4603      	mov	r3, r0
 8022a2a:	b107      	cbz	r7, 8022a2e <L2CA_Enhanced_Fixed_Channel_Data_Write+0xac>
 8022a2c:	1d3f      	adds	r7, r7, #4
 8022a2e:	a801      	add	r0, sp, #4
 8022a30:	a906      	add	r1, sp, #24
 8022a32:	f8cd 9000 	str.w	r9, [sp]
 8022a36:	e880 0442 	stmia.w	r0, {r1, r6, sl}
 8022a3a:	e9cd 8704 	strd	r8, r7, [sp, #16]
 8022a3e:	88a2      	ldrh	r2, [r4, #4]
 8022a40:	89a9      	ldrh	r1, [r5, #12]
 8022a42:	9807      	ldr	r0, [sp, #28]
 8022a44:	f7fe fc38 	bl	80212b8 <EnhancedFragmentPacket>
 8022a48:	4604      	mov	r4, r0
 8022a4a:	e00e      	b.n	8022a6a <L2CA_Enhanced_Fixed_Channel_Data_Write+0xe8>
 8022a4c:	2201      	movs	r2, #1
 8022a4e:	e7bb      	b.n	80229c8 <L2CA_Enhanced_Fixed_Channel_Data_Write+0x46>
 8022a50:	2020      	movs	r0, #32
 8022a52:	e7d9      	b.n	8022a08 <L2CA_Enhanced_Fixed_Channel_Data_Write+0x86>
 8022a54:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8022a58:	e007      	b.n	8022a6a <L2CA_Enhanced_Fixed_Channel_Data_Write+0xe8>
 8022a5a:	f06f 0427 	mvn.w	r4, #39	; 0x27
 8022a5e:	e004      	b.n	8022a6a <L2CA_Enhanced_Fixed_Channel_Data_Write+0xe8>
 8022a60:	f06f 0461 	mvn.w	r4, #97	; 0x61
 8022a64:	e001      	b.n	8022a6a <L2CA_Enhanced_Fixed_Channel_Data_Write+0xe8>
 8022a66:	f06f 0425 	mvn.w	r4, #37	; 0x25
 8022a6a:	9808      	ldr	r0, [sp, #32]
 8022a6c:	f7f6 fd9a 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022a70:	e001      	b.n	8022a76 <L2CA_Enhanced_Fixed_Channel_Data_Write+0xf4>
 8022a72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022a76:	b00e      	add	sp, #56	; 0x38
 8022a78:	4620      	mov	r0, r4
 8022a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.L2CA_Fixed_Channel_Data_Write:

08022a7e <L2CA_Fixed_Channel_Data_Write>:
 8022a7e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8022a80:	2400      	movs	r4, #0
 8022a82:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 8022a86:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 8022a8a:	f7ff ff7a 	bl	8022982 <L2CA_Enhanced_Fixed_Channel_Data_Write>
 8022a8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

Disassembly of section i.L2CA_Get_Link_Connection_State:

08022a90 <L2CA_Get_Link_Connection_State>:
 8022a90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022a92:	b082      	sub	sp, #8
 8022a94:	461c      	mov	r4, r3
 8022a96:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8022a9a:	b971      	cbnz	r1, 8022aba <L2CA_Get_Link_Connection_State+0x2a>
 8022a9c:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8022aa0:	b959      	cbnz	r1, 8022aba <L2CA_Get_Link_Connection_State+0x2a>
 8022aa2:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8022aa6:	b941      	cbnz	r1, 8022aba <L2CA_Get_Link_Connection_State+0x2a>
 8022aa8:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8022aac:	b929      	cbnz	r1, 8022aba <L2CA_Get_Link_Connection_State+0x2a>
 8022aae:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8022ab2:	b911      	cbnz	r1, 8022aba <L2CA_Get_Link_Connection_State+0x2a>
 8022ab4:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8022ab8:	b3f1      	cbz	r1, 8022b38 <L2CA_Get_Link_Connection_State+0xa8>
 8022aba:	b3ec      	cbz	r4, 8022b38 <L2CA_Get_Link_Connection_State+0xa8>
 8022abc:	4602      	mov	r2, r0
 8022abe:	4669      	mov	r1, sp
 8022ac0:	a801      	add	r0, sp, #4
 8022ac2:	f7fe f9ce 	bl	8020e62 <AcquireL2CAPStackInformation>
 8022ac6:	0005      	movs	r5, r0
 8022ac8:	d155      	bne.n	8022b76 <L2CA_Get_Link_Connection_State+0xe6>
 8022aca:	9800      	ldr	r0, [sp, #0]
 8022acc:	2200      	movs	r2, #0
 8022ace:	a903      	add	r1, sp, #12
 8022ad0:	3058      	adds	r0, #88	; 0x58
 8022ad2:	f000 feb8 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 8022ad6:	2100      	movs	r1, #0
 8022ad8:	b148      	cbz	r0, 8022aee <L2CA_Get_Link_Connection_State+0x5e>
 8022ada:	7880      	ldrb	r0, [r0, #2]
 8022adc:	2502      	movs	r5, #2
 8022ade:	2203      	movs	r2, #3
 8022ae0:	2301      	movs	r3, #1
 8022ae2:	2801      	cmp	r0, #1
 8022ae4:	d009      	beq.n	8022afa <L2CA_Get_Link_Connection_State+0x6a>
 8022ae6:	2802      	cmp	r0, #2
 8022ae8:	d005      	beq.n	8022af6 <L2CA_Get_Link_Connection_State+0x66>
 8022aea:	2804      	cmp	r0, #4
 8022aec:	d001      	beq.n	8022af2 <L2CA_Get_Link_Connection_State+0x62>
 8022aee:	7021      	strb	r1, [r4, #0]
 8022af0:	e033      	b.n	8022b5a <L2CA_Get_Link_Connection_State+0xca>
 8022af2:	7022      	strb	r2, [r4, #0]
 8022af4:	e002      	b.n	8022afc <L2CA_Get_Link_Connection_State+0x6c>
 8022af6:	7025      	strb	r5, [r4, #0]
 8022af8:	e000      	b.n	8022afc <L2CA_Get_Link_Connection_State+0x6c>
 8022afa:	7023      	strb	r3, [r4, #0]
 8022afc:	7021      	strb	r1, [r4, #0]
 8022afe:	9800      	ldr	r0, [sp, #0]
 8022b00:	e028      	b.n	8022b54 <L2CA_Get_Link_Connection_State+0xc4>
 8022b02:	7801      	ldrb	r1, [r0, #0]
 8022b04:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8022b08:	42b1      	cmp	r1, r6
 8022b0a:	d122      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b0c:	7841      	ldrb	r1, [r0, #1]
 8022b0e:	f89d 600d 	ldrb.w	r6, [sp, #13]
 8022b12:	42b1      	cmp	r1, r6
 8022b14:	d11d      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b16:	7881      	ldrb	r1, [r0, #2]
 8022b18:	f89d 600e 	ldrb.w	r6, [sp, #14]
 8022b1c:	42b1      	cmp	r1, r6
 8022b1e:	d118      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b20:	78c1      	ldrb	r1, [r0, #3]
 8022b22:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8022b26:	42b1      	cmp	r1, r6
 8022b28:	d113      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b2a:	7901      	ldrb	r1, [r0, #4]
 8022b2c:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8022b30:	42b1      	cmp	r1, r6
 8022b32:	d10e      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b34:	7941      	ldrb	r1, [r0, #5]
 8022b36:	e000      	b.n	8022b3a <L2CA_Get_Link_Connection_State+0xaa>
 8022b38:	e01b      	b.n	8022b72 <L2CA_Get_Link_Connection_State+0xe2>
 8022b3a:	f89d 6011 	ldrb.w	r6, [sp, #17]
 8022b3e:	42b1      	cmp	r1, r6
 8022b40:	d107      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b42:	7b01      	ldrb	r1, [r0, #12]
 8022b44:	b929      	cbnz	r1, 8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b46:	7ac1      	ldrb	r1, [r0, #11]
 8022b48:	2906      	cmp	r1, #6
 8022b4a:	d010      	beq.n	8022b6e <L2CA_Get_Link_Connection_State+0xde>
 8022b4c:	2907      	cmp	r1, #7
 8022b4e:	d009      	beq.n	8022b64 <L2CA_Get_Link_Connection_State+0xd4>
 8022b50:	7023      	strb	r3, [r4, #0]
 8022b52:	b110      	cbz	r0, 8022b5a <L2CA_Get_Link_Connection_State+0xca>
 8022b54:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8022b56:	2800      	cmp	r0, #0
 8022b58:	d1d3      	bne.n	8022b02 <L2CA_Get_Link_Connection_State+0x72>
 8022b5a:	2500      	movs	r5, #0
 8022b5c:	9801      	ldr	r0, [sp, #4]
 8022b5e:	f7f6 fd21 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022b62:	e008      	b.n	8022b76 <L2CA_Get_Link_Connection_State+0xe6>
 8022b64:	7821      	ldrb	r1, [r4, #0]
 8022b66:	2900      	cmp	r1, #0
 8022b68:	d1f3      	bne.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b6a:	7022      	strb	r2, [r4, #0]
 8022b6c:	e7f1      	b.n	8022b52 <L2CA_Get_Link_Connection_State+0xc2>
 8022b6e:	7025      	strb	r5, [r4, #0]
 8022b70:	e7f3      	b.n	8022b5a <L2CA_Get_Link_Connection_State+0xca>
 8022b72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8022b76:	b006      	add	sp, #24
 8022b78:	4628      	mov	r0, r5
 8022b7a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.L2CA_Register_Fixed_Channel:

08022b7c <L2CA_Register_Fixed_Channel>:
 8022b7c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8022b80:	460d      	mov	r5, r1
 8022b82:	1ec9      	subs	r1, r1, #3
 8022b84:	9f08      	ldr	r7, [sp, #32]
 8022b86:	461e      	mov	r6, r3
 8022b88:	293d      	cmp	r1, #61	; 0x3d
 8022b8a:	d234      	bcs.n	8022bf6 <L2CA_Register_Fixed_Channel+0x7a>
 8022b8c:	b37e      	cbz	r6, 8022bee <L2CA_Register_Fixed_Channel+0x72>
 8022b8e:	4602      	mov	r2, r0
 8022b90:	4669      	mov	r1, sp
 8022b92:	a801      	add	r0, sp, #4
 8022b94:	f7fe f965 	bl	8020e62 <AcquireL2CAPStackInformation>
 8022b98:	0004      	movs	r4, r0
 8022b9a:	d12e      	bne.n	8022bfa <L2CA_Register_Fixed_Channel+0x7e>
 8022b9c:	9800      	ldr	r0, [sp, #0]
 8022b9e:	4629      	mov	r1, r5
 8022ba0:	306c      	adds	r0, #108	; 0x6c
 8022ba2:	f000 feb6 	bl	8023912 <SearchRegistryByValue>
 8022ba6:	b128      	cbz	r0, 8022bb4 <L2CA_Register_Fixed_Channel+0x38>
 8022ba8:	f06f 0414 	mvn.w	r4, #20
 8022bac:	9801      	ldr	r0, [sp, #4]
 8022bae:	f7f6 fcf9 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022bb2:	e022      	b.n	8022bfa <L2CA_Register_Fixed_Channel+0x7e>
 8022bb4:	2014      	movs	r0, #20
 8022bb6:	f7f0 fc01 	bl	80133bc <BTPS_AllocateMemory>
 8022bba:	0004      	movs	r4, r0
 8022bbc:	d018      	beq.n	8022bf0 <L2CA_Register_Fixed_Channel+0x74>
 8022bbe:	2214      	movs	r2, #20
 8022bc0:	2100      	movs	r1, #0
 8022bc2:	f7f0 fc7c 	bl	80134be <BTPS_MemInitialize>
 8022bc6:	f7fe fccf 	bl	8021568 <GetNextIDNumber>
 8022bca:	6020      	str	r0, [r4, #0]
 8022bcc:	80a5      	strh	r5, [r4, #4]
 8022bce:	e9c4 6702 	strd	r6, r7, [r4, #8]
 8022bd2:	9800      	ldr	r0, [sp, #0]
 8022bd4:	4621      	mov	r1, r4
 8022bd6:	306c      	adds	r0, #108	; 0x6c
 8022bd8:	f7fe f976 	bl	8020ec8 <AddRegistryInfoEntry>
 8022bdc:	b108      	cbz	r0, 8022be2 <L2CA_Register_Fixed_Channel+0x66>
 8022bde:	6824      	ldr	r4, [r4, #0]
 8022be0:	e7e4      	b.n	8022bac <L2CA_Register_Fixed_Channel+0x30>
 8022be2:	4620      	mov	r0, r4
 8022be4:	f7f0 fc04 	bl	80133f0 <BTPS_FreeMemory>
 8022be8:	f06f 043a 	mvn.w	r4, #58	; 0x3a
 8022bec:	e7de      	b.n	8022bac <L2CA_Register_Fixed_Channel+0x30>
 8022bee:	e002      	b.n	8022bf6 <L2CA_Register_Fixed_Channel+0x7a>
 8022bf0:	f06f 0441 	mvn.w	r4, #65	; 0x41
 8022bf4:	e7da      	b.n	8022bac <L2CA_Register_Fixed_Channel+0x30>
 8022bf6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022bfa:	4620      	mov	r0, r4
 8022bfc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.L2CA_Set_Link_Connection_Configuration:

08022c00 <L2CA_Set_Link_Connection_Configuration>:
 8022c00:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8022c02:	000c      	movs	r4, r1
 8022c04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8022c08:	d019      	beq.n	8022c3e <L2CA_Set_Link_Connection_Configuration+0x3e>
 8022c0a:	7821      	ldrb	r1, [r4, #0]
 8022c0c:	b109      	cbz	r1, 8022c12 <L2CA_Set_Link_Connection_Configuration+0x12>
 8022c0e:	2901      	cmp	r1, #1
 8022c10:	d115      	bne.n	8022c3e <L2CA_Set_Link_Connection_Configuration+0x3e>
 8022c12:	7861      	ldrb	r1, [r4, #1]
 8022c14:	b119      	cbz	r1, 8022c1e <L2CA_Set_Link_Connection_Configuration+0x1e>
 8022c16:	2901      	cmp	r1, #1
 8022c18:	d001      	beq.n	8022c1e <L2CA_Set_Link_Connection_Configuration+0x1e>
 8022c1a:	2902      	cmp	r1, #2
 8022c1c:	d10f      	bne.n	8022c3e <L2CA_Set_Link_Connection_Configuration+0x3e>
 8022c1e:	4602      	mov	r2, r0
 8022c20:	a901      	add	r1, sp, #4
 8022c22:	4668      	mov	r0, sp
 8022c24:	f7fe f91d 	bl	8020e62 <AcquireL2CAPStackInformation>
 8022c28:	0005      	movs	r5, r0
 8022c2a:	d108      	bne.n	8022c3e <L2CA_Set_Link_Connection_Configuration+0x3e>
 8022c2c:	9801      	ldr	r0, [sp, #4]
 8022c2e:	7821      	ldrb	r1, [r4, #0]
 8022c30:	f800 1f3a 	strb.w	r1, [r0, #58]!
 8022c34:	7861      	ldrb	r1, [r4, #1]
 8022c36:	7041      	strb	r1, [r0, #1]
 8022c38:	9800      	ldr	r0, [sp, #0]
 8022c3a:	f7f6 fcb3 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022c3e:	4628      	mov	r0, r5
 8022c40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.L2CA_Un_Register_Fixed_Channel:

08022c42 <L2CA_Un_Register_Fixed_Channel>:
 8022c42:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8022c44:	000d      	movs	r5, r1
 8022c46:	d01b      	beq.n	8022c80 <L2CA_Un_Register_Fixed_Channel+0x3e>
 8022c48:	4602      	mov	r2, r0
 8022c4a:	4669      	mov	r1, sp
 8022c4c:	a801      	add	r0, sp, #4
 8022c4e:	f7fe f908 	bl	8020e62 <AcquireL2CAPStackInformation>
 8022c52:	0004      	movs	r4, r0
 8022c54:	d116      	bne.n	8022c84 <L2CA_Un_Register_Fixed_Channel+0x42>
 8022c56:	9800      	ldr	r0, [sp, #0]
 8022c58:	4629      	mov	r1, r5
 8022c5a:	306c      	adds	r0, #108	; 0x6c
 8022c5c:	f000 fe4f 	bl	80238fe <SearchRegistryByID>
 8022c60:	0001      	movs	r1, r0
 8022c62:	d007      	beq.n	8022c74 <L2CA_Un_Register_Fixed_Channel+0x32>
 8022c64:	9800      	ldr	r0, [sp, #0]
 8022c66:	306c      	adds	r0, #108	; 0x6c
 8022c68:	f7fe faed 	bl	8021246 <DeleteRegistryInfoEntry>
 8022c6c:	b120      	cbz	r0, 8022c78 <L2CA_Un_Register_Fixed_Channel+0x36>
 8022c6e:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 8022c72:	e001      	b.n	8022c78 <L2CA_Un_Register_Fixed_Channel+0x36>
 8022c74:	f06f 043c 	mvn.w	r4, #60	; 0x3c
 8022c78:	9801      	ldr	r0, [sp, #4]
 8022c7a:	f7f6 fc93 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8022c7e:	e001      	b.n	8022c84 <L2CA_Un_Register_Fixed_Channel+0x42>
 8022c80:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022c84:	4620      	mov	r0, r4
 8022c86:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.LP_ConnectCfm:

08022c88 <LP_ConnectCfm>:
 8022c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022c8c:	2400      	movs	r4, #0
 8022c8e:	460d      	mov	r5, r1
 8022c90:	4606      	mov	r6, r0
 8022c92:	f04f 0901 	mov.w	r9, #1
 8022c96:	f04f 0803 	mov.w	r8, #3
 8022c9a:	4627      	mov	r7, r4
 8022c9c:	f100 0a54 	add.w	sl, r0, #84	; 0x54
 8022ca0:	e086      	b.n	8022db0 <LP_ConnectCfm+0x128>
 8022ca2:	7aa0      	ldrb	r0, [r4, #10]
 8022ca4:	2802      	cmp	r0, #2
 8022ca6:	d033      	beq.n	8022d10 <LP_ConnectCfm+0x88>
 8022ca8:	4621      	mov	r1, r4
 8022caa:	1d68      	adds	r0, r5, #5
 8022cac:	f7f6 fb86 	bl	80193bc <CompareBluetoothAddress>
 8022cb0:	2800      	cmp	r0, #0
 8022cb2:	d07d      	beq.n	8022db0 <LP_ConnectCfm+0x128>
 8022cb4:	89a8      	ldrh	r0, [r5, #12]
 8022cb6:	8120      	strh	r0, [r4, #8]
 8022cb8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8022cba:	b119      	cbz	r1, 8022cc4 <LP_ConnectCfm+0x3c>
 8022cbc:	6830      	ldr	r0, [r6, #0]
 8022cbe:	f7f6 fde9 	bl	8019894 <BTPS_StopTimer>
 8022cc2:	64e7      	str	r7, [r4, #76]	; 0x4c
 8022cc4:	7aa0      	ldrb	r0, [r4, #10]
 8022cc6:	2801      	cmp	r0, #1
 8022cc8:	d172      	bne.n	8022db0 <LP_ConnectCfm+0x128>
 8022cca:	7ae0      	ldrb	r0, [r4, #11]
 8022ccc:	2802      	cmp	r0, #2
 8022cce:	d002      	beq.n	8022cd6 <LP_ConnectCfm+0x4e>
 8022cd0:	2801      	cmp	r0, #1
 8022cd2:	d16d      	bne.n	8022db0 <LP_ConnectCfm+0x128>
 8022cd4:	e04f      	b.n	8022d76 <LP_ConnectCfm+0xee>
 8022cd6:	78e8      	ldrb	r0, [r5, #3]
 8022cd8:	2803      	cmp	r0, #3
 8022cda:	d01a      	beq.n	8022d12 <LP_ConnectCfm+0x8a>
 8022cdc:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
 8022ce0:	2801      	cmp	r0, #1
 8022ce2:	d116      	bne.n	8022d12 <LP_ConnectCfm+0x8a>
 8022ce4:	7928      	ldrb	r0, [r5, #4]
 8022ce6:	2801      	cmp	r0, #1
 8022ce8:	d113      	bne.n	8022d12 <LP_ConnectCfm+0x8a>
 8022cea:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8022cec:	2801      	cmp	r0, #1
 8022cee:	d010      	beq.n	8022d12 <LP_ConnectCfm+0x8a>
 8022cf0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8022cf2:	e9cd 2900 	strd	r2, r9, [sp]
 8022cf6:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8022cfa:	88e3      	ldrh	r3, [r4, #6]
 8022cfc:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8022d00:	89a9      	ldrh	r1, [r5, #12]
 8022d02:	4630      	mov	r0, r6
 8022d04:	f7ff f864 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8022d08:	89a9      	ldrh	r1, [r5, #12]
 8022d0a:	4630      	mov	r0, r6
 8022d0c:	f000 f9a1 	bl	8023052 <LP_DisconnectReq>
 8022d10:	e04e      	b.n	8022db0 <LP_ConnectCfm+0x128>
 8022d12:	69e0      	ldr	r0, [r4, #28]
 8022d14:	b310      	cbz	r0, 8022d5c <LP_ConnectCfm+0xd4>
 8022d16:	f884 800b 	strb.w	r8, [r4, #11]
 8022d1a:	6f31      	ldr	r1, [r6, #112]	; 0x70
 8022d1c:	2010      	movs	r0, #16
 8022d1e:	700f      	strb	r7, [r1, #0]
 8022d20:	6048      	str	r0, [r1, #4]
 8022d22:	f101 000c 	add.w	r0, r1, #12
 8022d26:	6088      	str	r0, [r1, #8]
 8022d28:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8022d2c:	740a      	strb	r2, [r1, #16]
 8022d2e:	688a      	ldr	r2, [r1, #8]
 8022d30:	88e0      	ldrh	r0, [r4, #6]
 8022d32:	8050      	strh	r0, [r2, #2]
 8022d34:	6888      	ldr	r0, [r1, #8]
 8022d36:	f8d5 2005 	ldr.w	r2, [r5, #5]
 8022d3a:	f840 2f05 	str.w	r2, [r0, #5]!
 8022d3e:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8022d42:	8082      	strh	r2, [r0, #4]
 8022d44:	688a      	ldr	r2, [r1, #8]
 8022d46:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8022d48:	8010      	strh	r0, [r2, #0]
 8022d4a:	6888      	ldr	r0, [r1, #8]
 8022d4c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8022d4e:	f8c0 200b 	str.w	r2, [r0, #11]
 8022d52:	69e3      	ldr	r3, [r4, #28]
 8022d54:	6a22      	ldr	r2, [r4, #32]
 8022d56:	6830      	ldr	r0, [r6, #0]
 8022d58:	4798      	blx	r3
 8022d5a:	e029      	b.n	8022db0 <LP_ConnectCfm+0x128>
 8022d5c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 8022d5e:	e9cd 2900 	strd	r2, r9, [sp]
 8022d62:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8022d66:	88e3      	ldrh	r3, [r4, #6]
 8022d68:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8022d6c:	89a9      	ldrh	r1, [r5, #12]
 8022d6e:	4630      	mov	r0, r6
 8022d70:	f7ff f82e 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8022d74:	e01c      	b.n	8022db0 <LP_ConnectCfm+0x128>
 8022d76:	2004      	movs	r0, #4
 8022d78:	72e0      	strb	r0, [r4, #11]
 8022d7a:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8022d7e:	696a      	ldr	r2, [r5, #20]
 8022d80:	9102      	str	r1, [sp, #8]
 8022d82:	0852      	lsrs	r2, r2, #1
 8022d84:	e9cd 2000 	strd	r2, r0, [sp]
 8022d88:	88e2      	ldrh	r2, [r4, #6]
 8022d8a:	89a9      	ldrh	r1, [r5, #12]
 8022d8c:	2302      	movs	r3, #2
 8022d8e:	4630      	mov	r0, r6
 8022d90:	f7fe f97a 	bl	8021088 <CreateNewIdentifierEntry>
 8022d94:	b160      	cbz	r0, 8022db0 <LP_ConnectCfm+0x128>
 8022d96:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8022d98:	b153      	cbz	r3, 8022db0 <LP_ConnectCfm+0x128>
 8022d9a:	88e1      	ldrh	r1, [r4, #6]
 8022d9c:	e9cd 1700 	strd	r1, r7, [sp]
 8022da0:	9702      	str	r7, [sp, #8]
 8022da2:	9703      	str	r7, [sp, #12]
 8022da4:	4602      	mov	r2, r0
 8022da6:	89a9      	ldrh	r1, [r5, #12]
 8022da8:	4630      	mov	r0, r6
 8022daa:	f7ff f811 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8022dae:	84e7      	strh	r7, [r4, #38]	; 0x26
 8022db0:	4621      	mov	r1, r4
 8022db2:	4650      	mov	r0, sl
 8022db4:	f7fe fbc4 	bl	8021540 <GetNextChannelInfoEntry>
 8022db8:	0004      	movs	r4, r0
 8022dba:	f47f af72 	bne.w	8022ca2 <LP_ConnectCfm+0x1a>
 8022dbe:	e8bd 87ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.LP_ConnectCfmNeg:

08022dc2 <LP_ConnectCfmNeg>:
 8022dc2:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8022dc6:	4606      	mov	r6, r0
 8022dc8:	4615      	mov	r5, r2
 8022dca:	468b      	mov	fp, r1
 8022dcc:	4608      	mov	r0, r1
 8022dce:	f7f6 fb36 	bl	801943e <CompareNULLBluetoothAddress>
 8022dd2:	2800      	cmp	r0, #0
 8022dd4:	d16b      	bne.n	8022eae <LP_ConnectCfmNeg+0xec>
 8022dd6:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8022dda:	2200      	movs	r2, #0
 8022ddc:	4659      	mov	r1, fp
 8022dde:	4604      	mov	r4, r0
 8022de0:	f000 fd31 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 8022de4:	4601      	mov	r1, r0
 8022de6:	4620      	mov	r0, r4
 8022de8:	f7fe f9ff 	bl	80211ea <DeleteConnectionInfoEntry>
 8022dec:	f04f 0800 	mov.w	r8, #0
 8022df0:	2707      	movs	r7, #7
 8022df2:	6d74      	ldr	r4, [r6, #84]	; 0x54
 8022df4:	e008      	b.n	8022e08 <LP_ConnectCfmNeg+0x46>
 8022df6:	4621      	mov	r1, r4
 8022df8:	4658      	mov	r0, fp
 8022dfa:	f7f6 fadf 	bl	80193bc <CompareBluetoothAddress>
 8022dfe:	b110      	cbz	r0, 8022e06 <LP_ConnectCfmNeg+0x44>
 8022e00:	72e7      	strb	r7, [r4, #11]
 8022e02:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
 8022e06:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8022e08:	2c00      	cmp	r4, #0
 8022e0a:	d1f4      	bne.n	8022df6 <LP_ConnectCfmNeg+0x34>
 8022e0c:	b195      	cbz	r5, 8022e34 <LP_ConnectCfmNeg+0x72>
 8022e0e:	2d05      	cmp	r5, #5
 8022e10:	d010      	beq.n	8022e34 <LP_ConnectCfmNeg+0x72>
 8022e12:	2d06      	cmp	r5, #6
 8022e14:	d00e      	beq.n	8022e34 <LP_ConnectCfmNeg+0x72>
 8022e16:	2d0e      	cmp	r5, #14
 8022e18:	d00c      	beq.n	8022e34 <LP_ConnectCfmNeg+0x72>
 8022e1a:	2d04      	cmp	r5, #4
 8022e1c:	d00f      	beq.n	8022e3e <LP_ConnectCfmNeg+0x7c>
 8022e1e:	2d08      	cmp	r5, #8
 8022e20:	d00d      	beq.n	8022e3e <LP_ConnectCfmNeg+0x7c>
 8022e22:	2d10      	cmp	r5, #16
 8022e24:	d00b      	beq.n	8022e3e <LP_ConnectCfmNeg+0x7c>
 8022e26:	f64e 67ef 	movw	r7, #61167	; 0xeeef
 8022e2a:	46a9      	mov	r9, r5
 8022e2c:	2500      	movs	r5, #0
 8022e2e:	f106 0a54 	add.w	sl, r6, #84	; 0x54
 8022e32:	e036      	b.n	8022ea2 <LP_ConnectCfmNeg+0xe0>
 8022e34:	f64e 67f0 	movw	r7, #61168	; 0xeef0
 8022e38:	f04f 0900 	mov.w	r9, #0
 8022e3c:	e7f6      	b.n	8022e2c <LP_ConnectCfmNeg+0x6a>
 8022e3e:	f64e 67ee 	movw	r7, #61166	; 0xeeee
 8022e42:	e7f2      	b.n	8022e2a <LP_ConnectCfmNeg+0x68>
 8022e44:	7aa0      	ldrb	r0, [r4, #10]
 8022e46:	2801      	cmp	r0, #1
 8022e48:	d129      	bne.n	8022e9e <LP_ConnectCfmNeg+0xdc>
 8022e4a:	7ae0      	ldrb	r0, [r4, #11]
 8022e4c:	2807      	cmp	r0, #7
 8022e4e:	d126      	bne.n	8022e9e <LP_ConnectCfmNeg+0xdc>
 8022e50:	4621      	mov	r1, r4
 8022e52:	4658      	mov	r0, fp
 8022e54:	f7f6 fab2 	bl	80193bc <CompareBluetoothAddress>
 8022e58:	b308      	cbz	r0, 8022e9e <LP_ConnectCfmNeg+0xdc>
 8022e5a:	7e20      	ldrb	r0, [r4, #24]
 8022e5c:	07c0      	lsls	r0, r0, #31
 8022e5e:	d00e      	beq.n	8022e7e <LP_ConnectCfmNeg+0xbc>
 8022e60:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8022e62:	2204      	movs	r2, #4
 8022e64:	2301      	movs	r3, #1
 8022e66:	e9cd 1300 	strd	r1, r3, [sp]
 8022e6a:	e9cd 2802 	strd	r2, r8, [sp, #8]
 8022e6e:	88e3      	ldrh	r3, [r4, #6]
 8022e70:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8022e74:	8921      	ldrh	r1, [r4, #8]
 8022e76:	4630      	mov	r0, r6
 8022e78:	f7fe ffaa 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8022e7c:	e00a      	b.n	8022e94 <LP_ConnectCfmNeg+0xd2>
 8022e7e:	88e1      	ldrh	r1, [r4, #6]
 8022e80:	464b      	mov	r3, r9
 8022e82:	463a      	mov	r2, r7
 8022e84:	4630      	mov	r0, r6
 8022e86:	f7fe fa70 	bl	802136a <FormatEventConnectConfirmation>
 8022e8a:	4601      	mov	r1, r0
 8022e8c:	69e3      	ldr	r3, [r4, #28]
 8022e8e:	6a22      	ldr	r2, [r4, #32]
 8022e90:	6830      	ldr	r0, [r6, #0]
 8022e92:	4798      	blx	r3
 8022e94:	4621      	mov	r1, r4
 8022e96:	4630      	mov	r0, r6
 8022e98:	f7fe f8a2 	bl	8020fe0 <CleanupChannel>
 8022e9c:	e009      	b.n	8022eb2 <LP_ConnectCfmNeg+0xf0>
 8022e9e:	b144      	cbz	r4, 8022eb2 <LP_ConnectCfmNeg+0xf0>
 8022ea0:	4625      	mov	r5, r4
 8022ea2:	4621      	mov	r1, r4
 8022ea4:	4650      	mov	r0, sl
 8022ea6:	f7fe fb4b 	bl	8021540 <GetNextChannelInfoEntry>
 8022eaa:	0004      	movs	r4, r0
 8022eac:	d1ca      	bne.n	8022e44 <LP_ConnectCfmNeg+0x82>
 8022eae:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8022eb2:	462c      	mov	r4, r5
 8022eb4:	e7f5      	b.n	8022ea2 <LP_ConnectCfmNeg+0xe0>

Disassembly of section i.LP_ConnectIndication:

08022eb6 <LP_ConnectIndication>:
 8022eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022eba:	4605      	mov	r5, r0
 8022ebc:	460e      	mov	r6, r1
 8022ebe:	4608      	mov	r0, r1
 8022ec0:	f7f6 fabd 	bl	801943e <CompareNULLBluetoothAddress>
 8022ec4:	2800      	cmp	r0, #0
 8022ec6:	d147      	bne.n	8022f58 <LP_ConnectIndication+0xa2>
 8022ec8:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8022ecc:	2200      	movs	r2, #0
 8022ece:	4631      	mov	r1, r6
 8022ed0:	4607      	mov	r7, r0
 8022ed2:	f000 fcb8 	bl	8023846 <SearchConnectionInfoEntryByBD_ADDRType>
 8022ed6:	b130      	cbz	r0, 8022ee6 <LP_ConnectIndication+0x30>
 8022ed8:	4631      	mov	r1, r6
 8022eda:	6828      	ldr	r0, [r5, #0]
 8022edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022ee0:	220b      	movs	r2, #11
 8022ee2:	f7fd be80 	b.w	8020be6 <_HCI_Reject_Connection_Request>
 8022ee6:	f895 003b 	ldrb.w	r0, [r5, #59]	; 0x3b
 8022eea:	b398      	cbz	r0, 8022f54 <LP_ConnectIndication+0x9e>
 8022eec:	2200      	movs	r2, #0
 8022eee:	4631      	mov	r1, r6
 8022ef0:	6828      	ldr	r0, [r5, #0]
 8022ef2:	f7fd f945 	bl	8020180 <_HCI_Accept_Connection_Request>
 8022ef6:	2800      	cmp	r0, #0
 8022ef8:	d12e      	bne.n	8022f58 <LP_ConnectIndication+0xa2>
 8022efa:	2028      	movs	r0, #40	; 0x28
 8022efc:	f7f0 fa5e 	bl	80133bc <BTPS_AllocateMemory>
 8022f00:	0004      	movs	r4, r0
 8022f02:	d029      	beq.n	8022f58 <LP_ConnectIndication+0xa2>
 8022f04:	2228      	movs	r2, #40	; 0x28
 8022f06:	2100      	movs	r1, #0
 8022f08:	f7f0 fad9 	bl	80134be <BTPS_MemInitialize>
 8022f0c:	2001      	movs	r0, #1
 8022f0e:	70a0      	strb	r0, [r4, #2]
 8022f10:	2000      	movs	r0, #0
 8022f12:	70e0      	strb	r0, [r4, #3]
 8022f14:	20ff      	movs	r0, #255	; 0xff
 8022f16:	7120      	strb	r0, [r4, #4]
 8022f18:	6830      	ldr	r0, [r6, #0]
 8022f1a:	f8c4 0005 	str.w	r0, [r4, #5]
 8022f1e:	88b0      	ldrh	r0, [r6, #4]
 8022f20:	f8a4 0009 	strh.w	r0, [r4, #9]
 8022f24:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8022f28:	81a0      	strh	r0, [r4, #12]
 8022f2a:	f649 70c5 	movw	r0, #40901	; 0x9fc5
 8022f2e:	8220      	strh	r0, [r4, #16]
 8022f30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8022f34:	8260      	strh	r0, [r4, #18]
 8022f36:	68e8      	ldr	r0, [r5, #12]
 8022f38:	6160      	str	r0, [r4, #20]
 8022f3a:	6928      	ldr	r0, [r5, #16]
 8022f3c:	61a0      	str	r0, [r4, #24]
 8022f3e:	4621      	mov	r1, r4
 8022f40:	4638      	mov	r0, r7
 8022f42:	f7fd ffa5 	bl	8020e90 <AddConnectionInfoEntry>
 8022f46:	2800      	cmp	r0, #0
 8022f48:	d106      	bne.n	8022f58 <LP_ConnectIndication+0xa2>
 8022f4a:	4620      	mov	r0, r4
 8022f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022f50:	f7f0 ba4e 	b.w	80133f0 <BTPS_FreeMemory>
 8022f54:	2201      	movs	r2, #1
 8022f56:	e7ca      	b.n	8022eee <LP_ConnectIndication+0x38>
 8022f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.LP_DisconnectCfm:

08022f5c <LP_DisconnectCfm>:
 8022f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f60:	4690      	mov	r8, r2
 8022f62:	460f      	mov	r7, r1
 8022f64:	4606      	mov	r6, r0
 8022f66:	2400      	movs	r4, #0
 8022f68:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8022f6c:	e01a      	b.n	8022fa4 <LP_DisconnectCfm+0x48>
 8022f6e:	7aa0      	ldrb	r0, [r4, #10]
 8022f70:	2802      	cmp	r0, #2
 8022f72:	d017      	beq.n	8022fa4 <LP_DisconnectCfm+0x48>
 8022f74:	8921      	ldrh	r1, [r4, #8]
 8022f76:	89ba      	ldrh	r2, [r7, #12]
 8022f78:	4291      	cmp	r1, r2
 8022f7a:	d113      	bne.n	8022fa4 <LP_DisconnectCfm+0x48>
 8022f7c:	69e1      	ldr	r1, [r4, #28]
 8022f7e:	b161      	cbz	r1, 8022f9a <LP_DisconnectCfm+0x3e>
 8022f80:	7ae1      	ldrb	r1, [r4, #11]
 8022f82:	2902      	cmp	r1, #2
 8022f84:	d009      	beq.n	8022f9a <LP_DisconnectCfm+0x3e>
 8022f86:	2801      	cmp	r0, #1
 8022f88:	d021      	beq.n	8022fce <LP_DisconnectCfm+0x72>
 8022f8a:	2100      	movs	r1, #0
 8022f8c:	2007      	movs	r0, #7
 8022f8e:	72e0      	strb	r0, [r4, #11]
 8022f90:	b119      	cbz	r1, 8022f9a <LP_DisconnectCfm+0x3e>
 8022f92:	69e3      	ldr	r3, [r4, #28]
 8022f94:	6a22      	ldr	r2, [r4, #32]
 8022f96:	6830      	ldr	r0, [r6, #0]
 8022f98:	4798      	blx	r3
 8022f9a:	4621      	mov	r1, r4
 8022f9c:	4630      	mov	r0, r6
 8022f9e:	f7fe f81f 	bl	8020fe0 <CleanupChannel>
 8022fa2:	2400      	movs	r4, #0
 8022fa4:	4621      	mov	r1, r4
 8022fa6:	4628      	mov	r0, r5
 8022fa8:	f7fe faca 	bl	8021540 <GetNextChannelInfoEntry>
 8022fac:	0004      	movs	r4, r0
 8022fae:	d1de      	bne.n	8022f6e <LP_DisconnectCfm+0x12>
 8022fb0:	2211      	movs	r2, #17
 8022fb2:	4639      	mov	r1, r7
 8022fb4:	4630      	mov	r0, r6
 8022fb6:	f7fe f955 	bl	8021264 <DispatchFixedChannelConnectDisconnect>
 8022fba:	2502      	movs	r5, #2
 8022fbc:	f106 094c 	add.w	r9, r6, #76	; 0x4c
 8022fc0:	f106 0850 	add.w	r8, r6, #80	; 0x50
 8022fc4:	2d02      	cmp	r5, #2
 8022fc6:	d011      	beq.n	8022fec <LP_DisconnectCfm+0x90>
 8022fc8:	4644      	mov	r4, r8
 8022fca:	6821      	ldr	r1, [r4, #0]
 8022fcc:	e01b      	b.n	8023006 <LP_DisconnectCfm+0xaa>
 8022fce:	2904      	cmp	r1, #4
 8022fd0:	88e1      	ldrh	r1, [r4, #6]
 8022fd2:	d005      	beq.n	8022fe0 <LP_DisconnectCfm+0x84>
 8022fd4:	4642      	mov	r2, r8
 8022fd6:	4630      	mov	r0, r6
 8022fd8:	f7fe f9e6 	bl	80213a8 <FormatEventDisconnectIndication>
 8022fdc:	4601      	mov	r1, r0
 8022fde:	e7d5      	b.n	8022f8c <LP_DisconnectCfm+0x30>
 8022fe0:	2300      	movs	r3, #0
 8022fe2:	2204      	movs	r2, #4
 8022fe4:	4630      	mov	r0, r6
 8022fe6:	f7fe f9c0 	bl	802136a <FormatEventConnectConfirmation>
 8022fea:	e7f7      	b.n	8022fdc <LP_DisconnectCfm+0x80>
 8022fec:	464c      	mov	r4, r9
 8022fee:	e7ec      	b.n	8022fca <LP_DisconnectCfm+0x6e>
 8022ff0:	8808      	ldrh	r0, [r1, #0]
 8022ff2:	89ba      	ldrh	r2, [r7, #12]
 8022ff4:	4290      	cmp	r0, r2
 8022ff6:	d103      	bne.n	8023000 <LP_DisconnectCfm+0xa4>
 8022ff8:	4620      	mov	r0, r4
 8022ffa:	f7fe f8cf 	bl	802119c <DeleteACLPacketEntry>
 8022ffe:	e7e4      	b.n	8022fca <LP_DisconnectCfm+0x6e>
 8023000:	f101 0414 	add.w	r4, r1, #20
 8023004:	6949      	ldr	r1, [r1, #20]
 8023006:	2900      	cmp	r1, #0
 8023008:	d1f2      	bne.n	8022ff0 <LP_DisconnectCfm+0x94>
 802300a:	1e6d      	subs	r5, r5, #1
 802300c:	d1da      	bne.n	8022fc4 <LP_DisconnectCfm+0x68>
 802300e:	f106 055c 	add.w	r5, r6, #92	; 0x5c
 8023012:	4688      	mov	r8, r1
 8023014:	6df4      	ldr	r4, [r6, #92]	; 0x5c
 8023016:	e013      	b.n	8023040 <LP_DisconnectCfm+0xe4>
 8023018:	88e0      	ldrh	r0, [r4, #6]
 802301a:	89b9      	ldrh	r1, [r7, #12]
 802301c:	4288      	cmp	r0, r1
 802301e:	d10c      	bne.n	802303a <LP_DisconnectCfm+0xde>
 8023020:	68e1      	ldr	r1, [r4, #12]
 8023022:	b121      	cbz	r1, 802302e <LP_DisconnectCfm+0xd2>
 8023024:	6820      	ldr	r0, [r4, #0]
 8023026:	f7f6 fc35 	bl	8019894 <BTPS_StopTimer>
 802302a:	f8c4 800c 	str.w	r8, [r4, #12]
 802302e:	88a1      	ldrh	r1, [r4, #4]
 8023030:	4628      	mov	r0, r5
 8023032:	f7fe f8f1 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8023036:	682c      	ldr	r4, [r5, #0]
 8023038:	e002      	b.n	8023040 <LP_DisconnectCfm+0xe4>
 802303a:	f104 0520 	add.w	r5, r4, #32
 802303e:	6a24      	ldr	r4, [r4, #32]
 8023040:	2c00      	cmp	r4, #0
 8023042:	d1e9      	bne.n	8023018 <LP_DisconnectCfm+0xbc>
 8023044:	4639      	mov	r1, r7
 8023046:	f106 0058 	add.w	r0, r6, #88	; 0x58
 802304a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802304e:	f7fe b8cc 	b.w	80211ea <DeleteConnectionInfoEntry>

Disassembly of section i.LP_DisconnectReq:

08023052 <LP_DisconnectReq>:
 8023052:	b570      	push	{r4, r5, r6, lr}
 8023054:	4604      	mov	r4, r0
 8023056:	460d      	mov	r5, r1
 8023058:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 802305c:	d22a      	bcs.n	80230b4 <LP_DisconnectReq+0x62>
 802305e:	2213      	movs	r2, #19
 8023060:	6820      	ldr	r0, [r4, #0]
 8023062:	f7fd f8bd 	bl	80201e0 <_HCI_Disconnect>
 8023066:	2800      	cmp	r0, #0
 8023068:	d024      	beq.n	80230b4 <LP_DisconnectReq+0x62>
 802306a:	4629      	mov	r1, r5
 802306c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023070:	f000 fc0b 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 8023074:	0005      	movs	r5, r0
 8023076:	d01d      	beq.n	80230b4 <LP_DisconnectReq+0x62>
 8023078:	69e9      	ldr	r1, [r5, #28]
 802307a:	b111      	cbz	r1, 8023082 <LP_DisconnectReq+0x30>
 802307c:	6820      	ldr	r0, [r4, #0]
 802307e:	f7f6 fc09 	bl	8019894 <BTPS_StopTimer>
 8023082:	7868      	ldrb	r0, [r5, #1]
 8023084:	b188      	cbz	r0, 80230aa <LP_DisconnectReq+0x58>
 8023086:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 802308a:	b170      	cbz	r0, 80230aa <LP_DisconnectReq+0x58>
 802308c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8023090:	89e9      	ldrh	r1, [r5, #14]
 8023092:	4408      	add	r0, r1
 8023094:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
 8023098:	2000      	movs	r0, #0
 802309a:	81e8      	strh	r0, [r5, #14]
 802309c:	4602      	mov	r2, r0
 802309e:	4629      	mov	r1, r5
 80230a0:	4620      	mov	r0, r4
 80230a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80230a6:	f7ff bf59 	b.w	8022f5c <LP_DisconnectCfm>
 80230aa:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80230ac:	89e9      	ldrh	r1, [r5, #14]
 80230ae:	4408      	add	r0, r1
 80230b0:	84a0      	strh	r0, [r4, #36]	; 0x24
 80230b2:	e7f1      	b.n	8023098 <LP_DisconnectReq+0x46>
 80230b4:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.ParseAPIOptions:

080230b6 <ParseAPIOptions>:
 80230b6:	b510      	push	{r4, lr}
 80230b8:	2200      	movs	r2, #0
 80230ba:	2800      	cmp	r0, #0
 80230bc:	d065      	beq.n	802318a <ParseAPIOptions+0xd4>
 80230be:	2900      	cmp	r1, #0
 80230c0:	d063      	beq.n	802318a <ParseAPIOptions+0xd4>
 80230c2:	7803      	ldrb	r3, [r0, #0]
 80230c4:	07dc      	lsls	r4, r3, #31
 80230c6:	f04f 0302 	mov.w	r3, #2
 80230ca:	d00c      	beq.n	80230e6 <ParseAPIOptions+0x30>
 80230cc:	2201      	movs	r2, #1
 80230ce:	f801 2b01 	strb.w	r2, [r1], #1
 80230d2:	f801 3b01 	strb.w	r3, [r1], #1
 80230d6:	7882      	ldrb	r2, [r0, #2]
 80230d8:	f801 2b02 	strb.w	r2, [r1], #2
 80230dc:	8842      	ldrh	r2, [r0, #2]
 80230de:	0a12      	lsrs	r2, r2, #8
 80230e0:	f801 2c01 	strb.w	r2, [r1, #-1]
 80230e4:	2204      	movs	r2, #4
 80230e6:	7804      	ldrb	r4, [r0, #0]
 80230e8:	07a4      	lsls	r4, r4, #30
 80230ea:	d50b      	bpl.n	8023104 <ParseAPIOptions+0x4e>
 80230ec:	f801 3b01 	strb.w	r3, [r1], #1
 80230f0:	f801 3b01 	strb.w	r3, [r1], #1
 80230f4:	7903      	ldrb	r3, [r0, #4]
 80230f6:	f801 3b02 	strb.w	r3, [r1], #2
 80230fa:	8883      	ldrh	r3, [r0, #4]
 80230fc:	0a1b      	lsrs	r3, r3, #8
 80230fe:	f801 3c01 	strb.w	r3, [r1, #-1]
 8023102:	1d12      	adds	r2, r2, #4
 8023104:	7803      	ldrb	r3, [r0, #0]
 8023106:	075b      	lsls	r3, r3, #29
 8023108:	d53f      	bpl.n	802318a <ParseAPIOptions+0xd4>
 802310a:	2303      	movs	r3, #3
 802310c:	700b      	strb	r3, [r1, #0]
 802310e:	2316      	movs	r3, #22
 8023110:	704b      	strb	r3, [r1, #1]
 8023112:	7a03      	ldrb	r3, [r0, #8]
 8023114:	708b      	strb	r3, [r1, #2]
 8023116:	7a43      	ldrb	r3, [r0, #9]
 8023118:	70cb      	strb	r3, [r1, #3]
 802311a:	7b03      	ldrb	r3, [r0, #12]
 802311c:	710b      	strb	r3, [r1, #4]
 802311e:	8983      	ldrh	r3, [r0, #12]
 8023120:	0a1b      	lsrs	r3, r3, #8
 8023122:	714b      	strb	r3, [r1, #5]
 8023124:	68c3      	ldr	r3, [r0, #12]
 8023126:	0c1b      	lsrs	r3, r3, #16
 8023128:	718b      	strb	r3, [r1, #6]
 802312a:	68c3      	ldr	r3, [r0, #12]
 802312c:	0e1b      	lsrs	r3, r3, #24
 802312e:	71cb      	strb	r3, [r1, #7]
 8023130:	7c03      	ldrb	r3, [r0, #16]
 8023132:	720b      	strb	r3, [r1, #8]
 8023134:	8a03      	ldrh	r3, [r0, #16]
 8023136:	0a1b      	lsrs	r3, r3, #8
 8023138:	724b      	strb	r3, [r1, #9]
 802313a:	6903      	ldr	r3, [r0, #16]
 802313c:	0c1b      	lsrs	r3, r3, #16
 802313e:	728b      	strb	r3, [r1, #10]
 8023140:	6903      	ldr	r3, [r0, #16]
 8023142:	0e1b      	lsrs	r3, r3, #24
 8023144:	72cb      	strb	r3, [r1, #11]
 8023146:	7d03      	ldrb	r3, [r0, #20]
 8023148:	730b      	strb	r3, [r1, #12]
 802314a:	8a83      	ldrh	r3, [r0, #20]
 802314c:	0a1b      	lsrs	r3, r3, #8
 802314e:	734b      	strb	r3, [r1, #13]
 8023150:	6943      	ldr	r3, [r0, #20]
 8023152:	0c1b      	lsrs	r3, r3, #16
 8023154:	738b      	strb	r3, [r1, #14]
 8023156:	6943      	ldr	r3, [r0, #20]
 8023158:	0e1b      	lsrs	r3, r3, #24
 802315a:	73cb      	strb	r3, [r1, #15]
 802315c:	7e03      	ldrb	r3, [r0, #24]
 802315e:	740b      	strb	r3, [r1, #16]
 8023160:	8b03      	ldrh	r3, [r0, #24]
 8023162:	0a1b      	lsrs	r3, r3, #8
 8023164:	744b      	strb	r3, [r1, #17]
 8023166:	6983      	ldr	r3, [r0, #24]
 8023168:	0c1b      	lsrs	r3, r3, #16
 802316a:	748b      	strb	r3, [r1, #18]
 802316c:	6983      	ldr	r3, [r0, #24]
 802316e:	0e1b      	lsrs	r3, r3, #24
 8023170:	74cb      	strb	r3, [r1, #19]
 8023172:	7f03      	ldrb	r3, [r0, #28]
 8023174:	750b      	strb	r3, [r1, #20]
 8023176:	8b83      	ldrh	r3, [r0, #28]
 8023178:	0a1b      	lsrs	r3, r3, #8
 802317a:	754b      	strb	r3, [r1, #21]
 802317c:	69c3      	ldr	r3, [r0, #28]
 802317e:	0c1b      	lsrs	r3, r3, #16
 8023180:	758b      	strb	r3, [r1, #22]
 8023182:	69c0      	ldr	r0, [r0, #28]
 8023184:	0e00      	lsrs	r0, r0, #24
 8023186:	75c8      	strb	r0, [r1, #23]
 8023188:	3218      	adds	r2, #24
 802318a:	4610      	mov	r0, r2
 802318c:	bd10      	pop	{r4, pc}

Disassembly of section i.ParseOptionsToAPI:

0802318e <ParseOptionsToAPI>:
 802318e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023192:	0006      	movs	r6, r0
 8023194:	f04f 0001 	mov.w	r0, #1
 8023198:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802319a:	469a      	mov	sl, r3
 802319c:	4691      	mov	r9, r2
 802319e:	460c      	mov	r4, r1
 80231a0:	f04f 0b02 	mov.w	fp, #2
 80231a4:	9000      	str	r0, [sp, #0]
 80231a6:	d01f      	beq.n	80231e8 <ParseOptionsToAPI+0x5a>
 80231a8:	2c00      	cmp	r4, #0
 80231aa:	d01d      	beq.n	80231e8 <ParseOptionsToAPI+0x5a>
 80231ac:	2f00      	cmp	r7, #0
 80231ae:	d01b      	beq.n	80231e8 <ParseOptionsToAPI+0x5a>
 80231b0:	f1ba 0f00 	cmp.w	sl, #0
 80231b4:	4638      	mov	r0, r7
 80231b6:	d001      	beq.n	80231bc <ParseOptionsToAPI+0x2e>
 80231b8:	1c80      	adds	r0, r0, #2
 80231ba:	e000      	b.n	80231be <ParseOptionsToAPI+0x30>
 80231bc:	1d00      	adds	r0, r0, #4
 80231be:	4680      	mov	r8, r0
 80231c0:	7821      	ldrb	r1, [r4, #0]
 80231c2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 80231c6:	2801      	cmp	r0, #1
 80231c8:	d00f      	beq.n	80231ea <ParseOptionsToAPI+0x5c>
 80231ca:	2802      	cmp	r0, #2
 80231cc:	d02a      	beq.n	8023224 <ParseOptionsToAPI+0x96>
 80231ce:	2803      	cmp	r0, #3
 80231d0:	d03f      	beq.n	8023252 <ParseOptionsToAPI+0xc4>
 80231d2:	f1ba 0f00 	cmp.w	sl, #0
 80231d6:	d07a      	beq.n	80232ce <ParseOptionsToAPI+0x140>
 80231d8:	0608      	lsls	r0, r1, #24
 80231da:	d478      	bmi.n	80232ce <ParseOptionsToAPI+0x140>
 80231dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80231de:	f04f 0b03 	mov.w	fp, #3
 80231e2:	2800      	cmp	r0, #0
 80231e4:	d000      	beq.n	80231e8 <ParseOptionsToAPI+0x5a>
 80231e6:	7001      	strb	r1, [r0, #0]
 80231e8:	e080      	b.n	80232ec <ParseOptionsToAPI+0x15e>
 80231ea:	2e04      	cmp	r6, #4
 80231ec:	d37e      	bcc.n	80232ec <ParseOptionsToAPI+0x15e>
 80231ee:	f8b8 0000 	ldrh.w	r0, [r8]
 80231f2:	f040 0101 	orr.w	r1, r0, #1
 80231f6:	f8a8 1000 	strh.w	r1, [r8]
 80231fa:	8860      	ldrh	r0, [r4, #2]
 80231fc:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8023200:	f360 050f 	bfi	r5, r0, #0, #16
 8023204:	4288      	cmp	r0, r1
 8023206:	d901      	bls.n	802320c <ParseOptionsToAPI+0x7e>
 8023208:	f361 050f 	bfi	r5, r1, #0, #16
 802320c:	f1b9 0f00 	cmp.w	r9, #0
 8023210:	d001      	beq.n	8023216 <ParseOptionsToAPI+0x88>
 8023212:	f8a9 5028 	strh.w	r5, [r9, #40]	; 0x28
 8023216:	f1ba 0f00 	cmp.w	sl, #0
 802321a:	d001      	beq.n	8023220 <ParseOptionsToAPI+0x92>
 802321c:	80bd      	strh	r5, [r7, #4]
 802321e:	e057      	b.n	80232d0 <ParseOptionsToAPI+0x142>
 8023220:	80fd      	strh	r5, [r7, #6]
 8023222:	e055      	b.n	80232d0 <ParseOptionsToAPI+0x142>
 8023224:	2e04      	cmp	r6, #4
 8023226:	d361      	bcc.n	80232ec <ParseOptionsToAPI+0x15e>
 8023228:	f8b8 0000 	ldrh.w	r0, [r8]
 802322c:	f1b9 0f00 	cmp.w	r9, #0
 8023230:	f040 0102 	orr.w	r1, r0, #2
 8023234:	f8a8 1000 	strh.w	r1, [r8]
 8023238:	8860      	ldrh	r0, [r4, #2]
 802323a:	f360 050f 	bfi	r5, r0, #0, #16
 802323e:	d001      	beq.n	8023244 <ParseOptionsToAPI+0xb6>
 8023240:	f8a9 002c 	strh.w	r0, [r9, #44]	; 0x2c
 8023244:	f1ba 0f00 	cmp.w	sl, #0
 8023248:	d001      	beq.n	802324e <ParseOptionsToAPI+0xc0>
 802324a:	80f8      	strh	r0, [r7, #6]
 802324c:	e040      	b.n	80232d0 <ParseOptionsToAPI+0x142>
 802324e:	8138      	strh	r0, [r7, #8]
 8023250:	e03e      	b.n	80232d0 <ParseOptionsToAPI+0x142>
 8023252:	2e18      	cmp	r6, #24
 8023254:	d34a      	bcc.n	80232ec <ParseOptionsToAPI+0x15e>
 8023256:	f8b8 0000 	ldrh.w	r0, [r8]
 802325a:	f1ba 0f00 	cmp.w	sl, #0
 802325e:	f040 0104 	orr.w	r1, r0, #4
 8023262:	f8a8 1000 	strh.w	r1, [r8]
 8023266:	d002      	beq.n	802326e <ParseOptionsToAPI+0xe0>
 8023268:	f107 0508 	add.w	r5, r7, #8
 802326c:	e001      	b.n	8023272 <ParseOptionsToAPI+0xe4>
 802326e:	f107 050c 	add.w	r5, r7, #12
 8023272:	78a0      	ldrb	r0, [r4, #2]
 8023274:	7028      	strb	r0, [r5, #0]
 8023276:	78e0      	ldrb	r0, [r4, #3]
 8023278:	7068      	strb	r0, [r5, #1]
 802327a:	7920      	ldrb	r0, [r4, #4]
 802327c:	f8d4 2005 	ldr.w	r2, [r4, #5]
 8023280:	4629      	mov	r1, r5
 8023282:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023286:	6068      	str	r0, [r5, #4]
 8023288:	7a20      	ldrb	r0, [r4, #8]
 802328a:	f8d4 2009 	ldr.w	r2, [r4, #9]
 802328e:	f1b9 0f00 	cmp.w	r9, #0
 8023292:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8023296:	60a8      	str	r0, [r5, #8]
 8023298:	7b20      	ldrb	r0, [r4, #12]
 802329a:	f8d4 200d 	ldr.w	r2, [r4, #13]
 802329e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80232a2:	60e8      	str	r0, [r5, #12]
 80232a4:	7c20      	ldrb	r0, [r4, #16]
 80232a6:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80232aa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80232ae:	6108      	str	r0, [r1, #16]
 80232b0:	7d20      	ldrb	r0, [r4, #20]
 80232b2:	f8d4 2015 	ldr.w	r2, [r4, #21]
 80232b6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80232ba:	6148      	str	r0, [r1, #20]
 80232bc:	d008      	beq.n	80232d0 <ParseOptionsToAPI+0x142>
 80232be:	2218      	movs	r2, #24
 80232c0:	f109 0030 	add.w	r0, r9, #48	; 0x30
 80232c4:	f7f0 fd5d 	bl	8013d82 <__aeabi_memcpy>
 80232c8:	e002      	b.n	80232d0 <ParseOptionsToAPI+0x142>
 80232ca:	e000      	b.n	80232ce <ParseOptionsToAPI+0x140>
 80232cc:	e00e      	b.n	80232ec <ParseOptionsToAPI+0x15e>
 80232ce:	b14e      	cbz	r6, 80232e4 <ParseOptionsToAPI+0x156>
 80232d0:	7860      	ldrb	r0, [r4, #1]
 80232d2:	1c81      	adds	r1, r0, #2
 80232d4:	42b1      	cmp	r1, r6
 80232d6:	d805      	bhi.n	80232e4 <ParseOptionsToAPI+0x156>
 80232d8:	1ca4      	adds	r4, r4, #2
 80232da:	1a36      	subs	r6, r6, r0
 80232dc:	4404      	add	r4, r0
 80232de:	1eb6      	subs	r6, r6, #2
 80232e0:	f47f af6e 	bne.w	80231c0 <ParseOptionsToAPI+0x32>
 80232e4:	9800      	ldr	r0, [sp, #0]
 80232e6:	b108      	cbz	r0, 80232ec <ParseOptionsToAPI+0x15e>
 80232e8:	f04f 0b00 	mov.w	fp, #0
 80232ec:	4658      	mov	r0, fp
 80232ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ProcessL2CAPDataPacket:

080232f2 <ProcessL2CAPDataPacket>:
 80232f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232f6:	4606      	mov	r6, r0
 80232f8:	b085      	sub	sp, #20
 80232fa:	461f      	mov	r7, r3
 80232fc:	4615      	mov	r5, r2
 80232fe:	3058      	adds	r0, #88	; 0x58
 8023300:	f000 fac3 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 8023304:	ea5f 0800 	movs.w	r8, r0
 8023308:	d031      	beq.n	802336e <ProcessL2CAPDataPacket+0x7c>
 802330a:	8878      	ldrh	r0, [r7, #2]
 802330c:	883c      	ldrh	r4, [r7, #0]
 802330e:	4682      	mov	sl, r0
 8023310:	2801      	cmp	r0, #1
 8023312:	d029      	beq.n	8023368 <ProcessL2CAPDataPacket+0x76>
 8023314:	2802      	cmp	r0, #2
 8023316:	d02a      	beq.n	802336e <ProcessL2CAPDataPacket+0x7c>
 8023318:	f1ba 0f05 	cmp.w	sl, #5
 802331c:	d02a      	beq.n	8023374 <ProcessL2CAPDataPacket+0x82>
 802331e:	1d3f      	adds	r7, r7, #4
 8023320:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8023324:	d36e      	bcc.n	8023404 <ProcessL2CAPDataPacket+0x112>
 8023326:	4601      	mov	r1, r0
 8023328:	f106 0054 	add.w	r0, r6, #84	; 0x54
 802332c:	f000 fa81 	bl	8023832 <SearchChannelInfoEntry>
 8023330:	2800      	cmp	r0, #0
 8023332:	d01c      	beq.n	802336e <ProcessL2CAPDataPacket+0x7c>
 8023334:	69c3      	ldr	r3, [r0, #28]
 8023336:	2b00      	cmp	r3, #0
 8023338:	d019      	beq.n	802336e <ProcessL2CAPDataPacket+0x7c>
 802333a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 802333c:	42a1      	cmp	r1, r4
 802333e:	db62      	blt.n	8023406 <ProcessL2CAPDataPacket+0x114>
 8023340:	1d21      	adds	r1, r4, #4
 8023342:	b289      	uxth	r1, r1
 8023344:	42a9      	cmp	r1, r5
 8023346:	d812      	bhi.n	802336e <ProcessL2CAPDataPacket+0x7c>
 8023348:	6f31      	ldr	r1, [r6, #112]	; 0x70
 802334a:	2209      	movs	r2, #9
 802334c:	700a      	strb	r2, [r1, #0]
 802334e:	2208      	movs	r2, #8
 8023350:	604a      	str	r2, [r1, #4]
 8023352:	f101 020c 	add.w	r2, r1, #12
 8023356:	608a      	str	r2, [r1, #8]
 8023358:	f8a1 a00c 	strh.w	sl, [r1, #12]
 802335c:	81cc      	strh	r4, [r1, #14]
 802335e:	610f      	str	r7, [r1, #16]
 8023360:	6a02      	ldr	r2, [r0, #32]
 8023362:	6834      	ldr	r4, [r6, #0]
 8023364:	69c3      	ldr	r3, [r0, #28]
 8023366:	e15a      	b.n	802361e <ProcessL2CAPDataPacket+0x32c>
 8023368:	f898 0001 	ldrb.w	r0, [r8, #1]
 802336c:	b130      	cbz	r0, 802337c <ProcessL2CAPDataPacket+0x8a>
 802336e:	b005      	add	sp, #20
 8023370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023374:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023378:	2801      	cmp	r0, #1
 802337a:	d1f8      	bne.n	802336e <ProcessL2CAPDataPacket+0x7c>
 802337c:	f240 30f9 	movw	r0, #1017	; 0x3f9
 8023380:	1d3f      	adds	r7, r7, #4
 8023382:	f04f 0b01 	mov.w	fp, #1
 8023386:	4284      	cmp	r4, r0
 8023388:	d97d      	bls.n	8023486 <ProcessL2CAPDataPacket+0x194>
 802338a:	e10c      	b.n	80235a6 <ProcessL2CAPDataPacket+0x2b4>
 802338c:	1f20      	subs	r0, r4, #4
 802338e:	eb0b 0050 	add.w	r0, fp, r0, lsr #1
 8023392:	2805      	cmp	r0, #5
 8023394:	d900      	bls.n	8023398 <ProcessL2CAPDataPacket+0xa6>
 8023396:	2005      	movs	r0, #5
 8023398:	1cb9      	adds	r1, r7, #2
 802339a:	2200      	movs	r2, #0
 802339c:	e007      	b.n	80233ae <ProcessL2CAPDataPacket+0xbc>
 802339e:	eb06 0542 	add.w	r5, r6, r2, lsl #1
 80233a2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80233a6:	1e40      	subs	r0, r0, #1
 80233a8:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
 80233ac:	1c52      	adds	r2, r2, #1
 80233ae:	2800      	cmp	r0, #0
 80233b0:	d1f5      	bne.n	802339e <ProcessL2CAPDataPacket+0xac>
 80233b2:	f897 9000 	ldrb.w	r9, [r7]
 80233b6:	f8b6 5060 	ldrh.w	r5, [r6, #96]	; 0x60
 80233ba:	2100      	movs	r1, #0
 80233bc:	4652      	mov	r2, sl
 80233be:	4648      	mov	r0, r9
 80233c0:	f1b9 0f01 	cmp.w	r9, #1
 80233c4:	d010      	beq.n	80233e8 <ProcessL2CAPDataPacket+0xf6>
 80233c6:	2806      	cmp	r0, #6
 80233c8:	d00e      	beq.n	80233e8 <ProcessL2CAPDataPacket+0xf6>
 80233ca:	2807      	cmp	r0, #7
 80233cc:	d00c      	beq.n	80233e8 <ProcessL2CAPDataPacket+0xf6>
 80233ce:	2a01      	cmp	r2, #1
 80233d0:	d003      	beq.n	80233da <ProcessL2CAPDataPacket+0xe8>
 80233d2:	f1ba 0f05 	cmp.w	sl, #5
 80233d6:	d003      	beq.n	80233e0 <ProcessL2CAPDataPacket+0xee>
 80233d8:	e0d6      	b.n	8023588 <ProcessL2CAPDataPacket+0x296>
 80233da:	2812      	cmp	r0, #18
 80233dc:	d304      	bcc.n	80233e8 <ProcessL2CAPDataPacket+0xf6>
 80233de:	e0d3      	b.n	8023588 <ProcessL2CAPDataPacket+0x296>
 80233e0:	2812      	cmp	r0, #18
 80233e2:	d37a      	bcc.n	80234da <ProcessL2CAPDataPacket+0x1e8>
 80233e4:	2813      	cmp	r0, #19
 80233e6:	d878      	bhi.n	80234da <ProcessL2CAPDataPacket+0x1e8>
 80233e8:	ea5f 70c9 	movs.w	r0, r9, lsl #31
 80233ec:	d006      	beq.n	80233fc <ProcessL2CAPDataPacket+0x10a>
 80233ee:	7879      	ldrb	r1, [r7, #1]
 80233f0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80233f4:	f000 fa79 	bl	80238ea <SearchIdentifierInfoEntryByIdentifier>
 80233f8:	0001      	movs	r1, r0
 80233fa:	d024      	beq.n	8023446 <ProcessL2CAPDataPacket+0x154>
 80233fc:	f1b9 0f14 	cmp.w	r9, #20
 8023400:	d26c      	bcs.n	80234dc <ProcessL2CAPDataPacket+0x1ea>
 8023402:	e001      	b.n	8023408 <ProcessL2CAPDataPacket+0x116>
 8023404:	e0e8      	b.n	80235d8 <ProcessL2CAPDataPacket+0x2e6>
 8023406:	e0da      	b.n	80235be <ProcessL2CAPDataPacket+0x2cc>
 8023408:	e8df f009 	tbb	[pc, r9]
 802340c:	261e0aad 	.word	0x261e0aad
 8023410:	52493e2c 	.word	0x52493e2c
 8023414:	9b699b58 	.word	0x9b699b58
 8023418:	adadadad 	.word	0xadadadad
 802341c:	a59dadad 	.word	0xa59dadad
 8023420:	2d02      	cmp	r5, #2
 8023422:	d37c      	bcc.n	802351e <ProcessL2CAPDataPacket+0x22c>
 8023424:	1ca0      	adds	r0, r4, #2
 8023426:	b280      	uxth	r0, r0
 8023428:	42a8      	cmp	r0, r5
 802342a:	d378      	bcc.n	802351e <ProcessL2CAPDataPacket+0x22c>
 802342c:	2900      	cmp	r1, #0
 802342e:	d00a      	beq.n	8023446 <ProcessL2CAPDataPacket+0x154>
 8023430:	68c8      	ldr	r0, [r1, #12]
 8023432:	2800      	cmp	r0, #0
 8023434:	d007      	beq.n	8023446 <ProcessL2CAPDataPacket+0x154>
 8023436:	68f2      	ldr	r2, [r6, #12]
 8023438:	614a      	str	r2, [r1, #20]
 802343a:	888a      	ldrh	r2, [r1, #4]
 802343c:	6833      	ldr	r3, [r6, #0]
 802343e:	4601      	mov	r1, r0
 8023440:	4618      	mov	r0, r3
 8023442:	f7ff f9ce 	bl	80227e2 <L2CAP_RequestTimeout>
 8023446:	e099      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023448:	2d04      	cmp	r5, #4
 802344a:	d37a      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 802344c:	463a      	mov	r2, r7
 802344e:	4641      	mov	r1, r8
 8023450:	4630      	mov	r0, r6
 8023452:	f7fe fbeb 	bl	8021c2c <L2CAP_ConnectRequestEvent>
 8023456:	e091      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023458:	2d08      	cmp	r5, #8
 802345a:	d372      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 802345c:	4630      	mov	r0, r6
 802345e:	f7fe fd1b 	bl	8021e98 <L2CAP_ConnectResponseEvent>
 8023462:	e08b      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023464:	f8b6 0064 	ldrh.w	r0, [r6, #100]	; 0x64
 8023468:	2801      	cmp	r0, #1
 802346a:	d86a      	bhi.n	8023542 <ProcessL2CAPDataPacket+0x250>
 802346c:	2d04      	cmp	r5, #4
 802346e:	d368      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 8023470:	1d20      	adds	r0, r4, #4
 8023472:	b280      	uxth	r0, r0
 8023474:	42a8      	cmp	r0, r5
 8023476:	d364      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 8023478:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 802347c:	463a      	mov	r2, r7
 802347e:	4630      	mov	r0, r6
 8023480:	f7fe f9e4 	bl	802184c <L2CAP_ConfigRequestEvent>
 8023484:	e07a      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023486:	e08a      	b.n	802359e <ProcessL2CAPDataPacket+0x2ac>
 8023488:	2d06      	cmp	r5, #6
 802348a:	d35a      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 802348c:	1da0      	adds	r0, r4, #6
 802348e:	b280      	uxth	r0, r0
 8023490:	42a8      	cmp	r0, r5
 8023492:	d356      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 8023494:	463a      	mov	r2, r7
 8023496:	4630      	mov	r0, r6
 8023498:	f7fe fb67 	bl	8021b6a <L2CAP_ConfigResponseEvent>
 802349c:	e06e      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 802349e:	2d04      	cmp	r5, #4
 80234a0:	d34f      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 80234a2:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80234a6:	463a      	mov	r2, r7
 80234a8:	4630      	mov	r0, r6
 80234aa:	f7fe fe6f 	bl	802218c <L2CAP_DisconnectRequestEvent>
 80234ae:	e065      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 80234b0:	2d04      	cmp	r5, #4
 80234b2:	d346      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 80234b4:	4630      	mov	r0, r6
 80234b6:	f7fe fef4 	bl	80222a2 <L2CAP_DisconnectResponseEvent>
 80234ba:	e05f      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 80234bc:	b2a0      	uxth	r0, r4
 80234be:	42a8      	cmp	r0, r5
 80234c0:	d33f      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 80234c2:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80234c6:	1d3b      	adds	r3, r7, #4
 80234c8:	e9cd 3b00 	strd	r3, fp, [sp]
 80234cc:	4630      	mov	r0, r6
 80234ce:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
 80234d2:	787a      	ldrb	r2, [r7, #1]
 80234d4:	f7fe ff25 	bl	8022322 <L2CAP_EchoRequestResponse>
 80234d8:	e050      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 80234da:	e055      	b.n	8023588 <ProcessL2CAPDataPacket+0x296>
 80234dc:	e043      	b.n	8023566 <ProcessL2CAPDataPacket+0x274>
 80234de:	2d02      	cmp	r5, #2
 80234e0:	d32f      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 80234e2:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80234e6:	2200      	movs	r2, #0
 80234e8:	f8ad 200c 	strh.w	r2, [sp, #12]
 80234ec:	f8b6 2062 	ldrh.w	r2, [r6, #98]	; 0x62
 80234f0:	4630      	mov	r0, r6
 80234f2:	2a01      	cmp	r2, #1
 80234f4:	d014      	beq.n	8023520 <ProcessL2CAPDataPacket+0x22e>
 80234f6:	2a02      	cmp	r2, #2
 80234f8:	d01b      	beq.n	8023532 <ProcessL2CAPDataPacket+0x240>
 80234fa:	2a03      	cmp	r2, #3
 80234fc:	d01d      	beq.n	802353a <ProcessL2CAPDataPacket+0x248>
 80234fe:	2300      	movs	r3, #0
 8023500:	f8ad b00c 	strh.w	fp, [sp, #12]
 8023504:	461a      	mov	r2, r3
 8023506:	f10d 0c0c 	add.w	ip, sp, #12
 802350a:	f8cd c000 	str.w	ip, [sp]
 802350e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8023512:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8023516:	787a      	ldrb	r2, [r7, #1]
 8023518:	f7fe ff59 	bl	80223ce <L2CAP_InformationRequestResponse>
 802351c:	e02e      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 802351e:	e010      	b.n	8023542 <ProcessL2CAPDataPacket+0x250>
 8023520:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
 8023524:	2302      	movs	r3, #2
 8023526:	f88d c010 	strb.w	ip, [sp, #16]
 802352a:	aa04      	add	r2, sp, #16
 802352c:	f88d 3011 	strb.w	r3, [sp, #17]
 8023530:	e7e9      	b.n	8023506 <ProcessL2CAPDataPacket+0x214>
 8023532:	2304      	movs	r3, #4
 8023534:	f100 022c 	add.w	r2, r0, #44	; 0x2c
 8023538:	e7e5      	b.n	8023506 <ProcessL2CAPDataPacket+0x214>
 802353a:	2308      	movs	r3, #8
 802353c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8023540:	e7e1      	b.n	8023506 <ProcessL2CAPDataPacket+0x214>
 8023542:	2400      	movs	r4, #0
 8023544:	e01a      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023546:	2d08      	cmp	r5, #8
 8023548:	d3fb      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 802354a:	463a      	mov	r2, r7
 802354c:	4641      	mov	r1, r8
 802354e:	4630      	mov	r0, r6
 8023550:	f7fe fd38 	bl	8021fc4 <L2CAP_ConnectionParameterUpdateRequestEvent>
 8023554:	e012      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023556:	2d02      	cmp	r5, #2
 8023558:	d3f3      	bcc.n	8023542 <ProcessL2CAPDataPacket+0x250>
 802355a:	460a      	mov	r2, r1
 802355c:	4641      	mov	r1, r8
 802355e:	4630      	mov	r0, r6
 8023560:	f7fe fd7e 	bl	8022060 <L2CAP_ConnectionParameterUpdateResponseEvent>
 8023564:	e00a      	b.n	802357c <ProcessL2CAPDataPacket+0x28a>
 8023566:	2000      	movs	r0, #0
 8023568:	9000      	str	r0, [sp, #0]
 802356a:	9001      	str	r0, [sp, #4]
 802356c:	9002      	str	r0, [sp, #8]
 802356e:	787b      	ldrb	r3, [r7, #1]
 8023570:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8023574:	4652      	mov	r2, sl
 8023576:	4630      	mov	r0, r6
 8023578:	f7ff f8e8 	bl	802274c <L2CAP_RejectCommand>
 802357c:	1d28      	adds	r0, r5, #4
 802357e:	4284      	cmp	r4, r0
 8023580:	db0a      	blt.n	8023598 <ProcessL2CAPDataPacket+0x2a6>
 8023582:	1b64      	subs	r4, r4, r5
 8023584:	1f24      	subs	r4, r4, #4
 8023586:	e008      	b.n	802359a <ProcessL2CAPDataPacket+0x2a8>
 8023588:	2000      	movs	r0, #0
 802358a:	9000      	str	r0, [sp, #0]
 802358c:	9001      	str	r0, [sp, #4]
 802358e:	9002      	str	r0, [sp, #8]
 8023590:	787b      	ldrb	r3, [r7, #1]
 8023592:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 8023596:	e7ee      	b.n	8023576 <ProcessL2CAPDataPacket+0x284>
 8023598:	2400      	movs	r4, #0
 802359a:	442f      	add	r7, r5
 802359c:	1d3f      	adds	r7, r7, #4
 802359e:	2c04      	cmp	r4, #4
 80235a0:	f4bf aef4 	bcs.w	802338c <ProcessL2CAPDataPacket+0x9a>
 80235a4:	e6e3      	b.n	802336e <ProcessL2CAPDataPacket+0x7c>
 80235a6:	2000      	movs	r0, #0
 80235a8:	e9cd b000 	strd	fp, r0, [sp]
 80235ac:	9002      	str	r0, [sp, #8]
 80235ae:	787b      	ldrb	r3, [r7, #1]
 80235b0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 80235b4:	4652      	mov	r2, sl
 80235b6:	4630      	mov	r0, r6
 80235b8:	f7ff f8c8 	bl	802274c <L2CAP_RejectCommand>
 80235bc:	e6d7      	b.n	802336e <ProcessL2CAPDataPacket+0x7c>
 80235be:	f8b8 1012 	ldrh.w	r1, [r8, #18]
 80235c2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
 80235c6:	3aff      	subs	r2, #255	; 0xff
 80235c8:	d1ec      	bne.n	80235a4 <ProcessL2CAPDataPacket+0x2b2>
 80235ca:	6a00      	ldr	r0, [r0, #32]
 80235cc:	9000      	str	r0, [sp, #0]
 80235ce:	4651      	mov	r1, sl
 80235d0:	6830      	ldr	r0, [r6, #0]
 80235d2:	f7fe f8ed 	bl	80217b0 <HandleReadDataError>
 80235d6:	e6ca      	b.n	802336e <ProcessL2CAPDataPacket+0x7c>
 80235d8:	f1ba 0f03 	cmp.w	sl, #3
 80235dc:	d3e2      	bcc.n	80235a4 <ProcessL2CAPDataPacket+0x2b2>
 80235de:	4601      	mov	r1, r0
 80235e0:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 80235e4:	f000 f995 	bl	8023912 <SearchRegistryByValue>
 80235e8:	2800      	cmp	r0, #0
 80235ea:	d0db      	beq.n	80235a4 <ProcessL2CAPDataPacket+0x2b2>
 80235ec:	6f31      	ldr	r1, [r6, #112]	; 0x70
 80235ee:	2212      	movs	r2, #18
 80235f0:	700a      	strb	r2, [r1, #0]
 80235f2:	2210      	movs	r2, #16
 80235f4:	604a      	str	r2, [r1, #4]
 80235f6:	f101 020c 	add.w	r2, r1, #12
 80235fa:	608a      	str	r2, [r1, #8]
 80235fc:	8803      	ldrh	r3, [r0, #0]
 80235fe:	818b      	strh	r3, [r1, #12]
 8023600:	4613      	mov	r3, r2
 8023602:	4642      	mov	r2, r8
 8023604:	f852 5f05 	ldr.w	r5, [r2, #5]!
 8023608:	f8c3 5002 	str.w	r5, [r3, #2]
 802360c:	8892      	ldrh	r2, [r2, #4]
 802360e:	80da      	strh	r2, [r3, #6]
 8023610:	688a      	ldr	r2, [r1, #8]
 8023612:	8114      	strh	r4, [r2, #8]
 8023614:	688a      	ldr	r2, [r1, #8]
 8023616:	60d7      	str	r7, [r2, #12]
 8023618:	68c2      	ldr	r2, [r0, #12]
 802361a:	6834      	ldr	r4, [r6, #0]
 802361c:	6883      	ldr	r3, [r0, #8]
 802361e:	b005      	add	sp, #20
 8023620:	4620      	mov	r0, r4
 8023622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023626:	4718      	bx	r3

Disassembly of section i.ProcessSendQueueData:

08023628 <ProcessSendQueueData>:
 8023628:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802362c:	b083      	sub	sp, #12
 802362e:	4605      	mov	r5, r0
 8023630:	304c      	adds	r0, #76	; 0x4c
 8023632:	9001      	str	r0, [sp, #4]
 8023634:	e0c8      	b.n	80237c8 <ProcessSendQueueData+0x1a0>
 8023636:	9805      	ldr	r0, [sp, #20]
 8023638:	2600      	movs	r6, #0
 802363a:	8801      	ldrh	r1, [r0, #0]
 802363c:	b121      	cbz	r1, 8023648 <ProcessSendQueueData+0x20>
 802363e:	9801      	ldr	r0, [sp, #4]
 8023640:	f000 f8ed 	bl	802381e <SearchACLPacketEntryByIdentifier>
 8023644:	0004      	movs	r4, r0
 8023646:	d10e      	bne.n	8023666 <ProcessSendQueueData+0x3e>
 8023648:	9805      	ldr	r0, [sp, #20]
 802364a:	2100      	movs	r1, #0
 802364c:	8001      	strh	r1, [r0, #0]
 802364e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8023650:	9806      	ldr	r0, [sp, #24]
 8023652:	6cec      	ldr	r4, [r5, #76]	; 0x4c
 8023654:	e000      	b.n	8023658 <ProcessSendQueueData+0x30>
 8023656:	6964      	ldr	r4, [r4, #20]
 8023658:	b11c      	cbz	r4, 8023662 <ProcessSendQueueData+0x3a>
 802365a:	88e2      	ldrh	r2, [r4, #6]
 802365c:	4002      	ands	r2, r0
 802365e:	428a      	cmp	r2, r1
 8023660:	d1f9      	bne.n	8023656 <ProcessSendQueueData+0x2e>
 8023662:	2c00      	cmp	r4, #0
 8023664:	d07e      	beq.n	8023764 <ProcessSendQueueData+0x13c>
 8023666:	8821      	ldrh	r1, [r4, #0]
 8023668:	f105 0058 	add.w	r0, r5, #88	; 0x58
 802366c:	f000 f90d 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 8023670:	0007      	movs	r7, r0
 8023672:	d078      	beq.n	8023766 <ProcessSendQueueData+0x13e>
 8023674:	78b8      	ldrb	r0, [r7, #2]
 8023676:	2804      	cmp	r0, #4
 8023678:	d0fb      	beq.n	8023672 <ProcessSendQueueData+0x4a>
 802367a:	6920      	ldr	r0, [r4, #16]
 802367c:	9000      	str	r0, [sp, #0]
 802367e:	88e0      	ldrh	r0, [r4, #6]
 8023680:	8923      	ldrh	r3, [r4, #8]
 8023682:	f400 4270 	and.w	r2, r0, #61440	; 0xf000
 8023686:	8821      	ldrh	r1, [r4, #0]
 8023688:	6828      	ldr	r0, [r5, #0]
 802368a:	f7fc faf1 	bl	801fc70 <HCI_Send_ACL_Data>
 802368e:	2800      	cmp	r0, #0
 8023690:	d168      	bne.n	8023764 <ProcessSendQueueData+0x13c>
 8023692:	9804      	ldr	r0, [sp, #16]
 8023694:	9904      	ldr	r1, [sp, #16]
 8023696:	8800      	ldrh	r0, [r0, #0]
 8023698:	1e40      	subs	r0, r0, #1
 802369a:	8008      	strh	r0, [r1, #0]
 802369c:	89f8      	ldrh	r0, [r7, #14]
 802369e:	1c40      	adds	r0, r0, #1
 80236a0:	81f8      	strh	r0, [r7, #14]
 80236a2:	88a1      	ldrh	r1, [r4, #4]
 80236a4:	1e48      	subs	r0, r1, #1
 80236a6:	28fe      	cmp	r0, #254	; 0xfe
 80236a8:	d821      	bhi.n	80236ee <ProcessSendQueueData+0xc6>
 80236aa:	79a0      	ldrb	r0, [r4, #6]
 80236ac:	0780      	lsls	r0, r0, #30
 80236ae:	d51e      	bpl.n	80236ee <ProcessSendQueueData+0xc6>
 80236b0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80236b4:	f000 f919 	bl	80238ea <SearchIdentifierInfoEntryByIdentifier>
 80236b8:	0006      	movs	r6, r0
 80236ba:	d01a      	beq.n	80236f2 <ProcessSendQueueData+0xca>
 80236bc:	68f1      	ldr	r1, [r6, #12]
 80236be:	b139      	cbz	r1, 80236d0 <ProcessSendQueueData+0xa8>
 80236c0:	6902      	ldr	r2, [r0, #16]
 80236c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80236c6:	4342      	muls	r2, r0
 80236c8:	6828      	ldr	r0, [r5, #0]
 80236ca:	f7f6 f809 	bl	80196e0 <BTPS_ChangeTimer>
 80236ce:	e009      	b.n	80236e4 <ProcessSendQueueData+0xbc>
 80236d0:	6933      	ldr	r3, [r6, #16]
 80236d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80236d6:	4343      	muls	r3, r0
 80236d8:	88b1      	ldrh	r1, [r6, #4]
 80236da:	4a46      	ldr	r2, [pc, #280]	; (80237f4 <ProcessSendQueueData+0x1cc>)
 80236dc:	6828      	ldr	r0, [r5, #0]
 80236de:	f7f6 f88f 	bl	8019800 <BTPS_StartTimer>
 80236e2:	60f0      	str	r0, [r6, #12]
 80236e4:	88e0      	ldrh	r0, [r4, #6]
 80236e6:	f040 0001 	orr.w	r0, r0, #1
 80236ea:	80e0      	strh	r0, [r4, #6]
 80236ec:	e06c      	b.n	80237c8 <ProcessSendQueueData+0x1a0>
 80236ee:	2e00      	cmp	r6, #0
 80236f0:	d16a      	bne.n	80237c8 <ProcessSendQueueData+0x1a0>
 80236f2:	88a0      	ldrh	r0, [r4, #4]
 80236f4:	28ff      	cmp	r0, #255	; 0xff
 80236f6:	d901      	bls.n	80236fc <ProcessSendQueueData+0xd4>
 80236f8:	9905      	ldr	r1, [sp, #20]
 80236fa:	8008      	strh	r0, [r1, #0]
 80236fc:	88e0      	ldrh	r0, [r4, #6]
 80236fe:	2114      	movs	r1, #20
 8023700:	4381      	bics	r1, r0
 8023702:	d15d      	bne.n	80237c0 <ProcessSendQueueData+0x198>
 8023704:	4688      	mov	r8, r1
 8023706:	8861      	ldrh	r1, [r4, #2]
 8023708:	4646      	mov	r6, r8
 802370a:	46c3      	mov	fp, r8
 802370c:	46c2      	mov	sl, r8
 802370e:	0640      	lsls	r0, r0, #25
 8023710:	d515      	bpl.n	802373e <ProcessSendQueueData+0x116>
 8023712:	f107 0020 	add.w	r0, r7, #32
 8023716:	f000 f8c2 	bl	802389e <SearchFixedChannelInfoEntry>
 802371a:	ea5f 0900 	movs.w	r9, r0
 802371e:	d019      	beq.n	8023754 <ProcessSendQueueData+0x12c>
 8023720:	f8b9 1000 	ldrh.w	r1, [r9]
 8023724:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 8023728:	f000 f8f3 	bl	8023912 <SearchRegistryByValue>
 802372c:	b190      	cbz	r0, 8023754 <ProcessSendQueueData+0x12c>
 802372e:	e9d0 8b02 	ldrd	r8, fp, [r0, #8]
 8023732:	8800      	ldrh	r0, [r0, #0]
 8023734:	f109 0604 	add.w	r6, r9, #4
 8023738:	fa1f fa80 	uxth.w	sl, r0
 802373c:	e00a      	b.n	8023754 <ProcessSendQueueData+0x12c>
 802373e:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8023742:	f000 f876 	bl	8023832 <SearchChannelInfoEntry>
 8023746:	b3d0      	cbz	r0, 80237be <ProcessSendQueueData+0x196>
 8023748:	e9d0 8b07 	ldrd	r8, fp, [r0, #28]
 802374c:	f8b0 a006 	ldrh.w	sl, [r0, #6]
 8023750:	f100 0610 	add.w	r6, r0, #16
 8023754:	f1b8 0f00 	cmp.w	r8, #0
 8023758:	d032      	beq.n	80237c0 <ProcessSendQueueData+0x198>
 802375a:	88b0      	ldrh	r0, [r6, #4]
 802375c:	1e40      	subs	r0, r0, #1
 802375e:	b280      	uxth	r0, r0
 8023760:	80b0      	strh	r0, [r6, #4]
 8023762:	e001      	b.n	8023768 <ProcessSendQueueData+0x140>
 8023764:	e035      	b.n	80237d2 <ProcessSendQueueData+0x1aa>
 8023766:	e037      	b.n	80237d8 <ProcessSendQueueData+0x1b0>
 8023768:	88f1      	ldrh	r1, [r6, #6]
 802376a:	07ca      	lsls	r2, r1, #31
 802376c:	d028      	beq.n	80237c0 <ProcessSendQueueData+0x198>
 802376e:	6832      	ldr	r2, [r6, #0]
 8023770:	4290      	cmp	r0, r2
 8023772:	d825      	bhi.n	80237c0 <ProcessSendQueueData+0x198>
 8023774:	f021 0001 	bic.w	r0, r1, #1
 8023778:	80f0      	strh	r0, [r6, #6]
 802377a:	79a0      	ldrb	r0, [r4, #6]
 802377c:	4652      	mov	r2, sl
 802377e:	0640      	lsls	r0, r0, #25
 8023780:	d50e      	bpl.n	80237a0 <ProcessSendQueueData+0x178>
 8023782:	2113      	movs	r1, #19
 8023784:	4628      	mov	r0, r5
 8023786:	f7fd fdcf 	bl	8021328 <FormatEventCIDOnly>
 802378a:	2108      	movs	r1, #8
 802378c:	4606      	mov	r6, r0
 802378e:	6041      	str	r1, [r0, #4]
 8023790:	6880      	ldr	r0, [r0, #8]
 8023792:	f857 1f05 	ldr.w	r1, [r7, #5]!
 8023796:	f8c0 1002 	str.w	r1, [r0, #2]
 802379a:	88b9      	ldrh	r1, [r7, #4]
 802379c:	80c1      	strh	r1, [r0, #6]
 802379e:	e004      	b.n	80237aa <ProcessSendQueueData+0x182>
 80237a0:	210d      	movs	r1, #13
 80237a2:	4628      	mov	r0, r5
 80237a4:	f7fd fdc0 	bl	8021328 <FormatEventCIDOnly>
 80237a8:	4606      	mov	r6, r0
 80237aa:	4621      	mov	r1, r4
 80237ac:	9801      	ldr	r0, [sp, #4]
 80237ae:	f7fd fcf5 	bl	802119c <DeleteACLPacketEntry>
 80237b2:	465a      	mov	r2, fp
 80237b4:	4631      	mov	r1, r6
 80237b6:	4643      	mov	r3, r8
 80237b8:	6828      	ldr	r0, [r5, #0]
 80237ba:	4798      	blx	r3
 80237bc:	e004      	b.n	80237c8 <ProcessSendQueueData+0x1a0>
 80237be:	e7ff      	b.n	80237c0 <ProcessSendQueueData+0x198>
 80237c0:	4621      	mov	r1, r4
 80237c2:	9801      	ldr	r0, [sp, #4]
 80237c4:	f7fd fcea 	bl	802119c <DeleteACLPacketEntry>
 80237c8:	9804      	ldr	r0, [sp, #16]
 80237ca:	8800      	ldrh	r0, [r0, #0]
 80237cc:	2800      	cmp	r0, #0
 80237ce:	f47f af32 	bne.w	8023636 <ProcessSendQueueData+0xe>
 80237d2:	b007      	add	sp, #28
 80237d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237d8:	88e0      	ldrh	r0, [r4, #6]
 80237da:	0b81      	lsrs	r1, r0, #14
 80237dc:	d0f0      	beq.n	80237c0 <ProcessSendQueueData+0x198>
 80237de:	6921      	ldr	r1, [r4, #16]
 80237e0:	9100      	str	r1, [sp, #0]
 80237e2:	f400 4270 	and.w	r2, r0, #61440	; 0xf000
 80237e6:	8923      	ldrh	r3, [r4, #8]
 80237e8:	8821      	ldrh	r1, [r4, #0]
 80237ea:	6828      	ldr	r0, [r5, #0]
 80237ec:	f7fc fa40 	bl	801fc70 <HCI_Send_ACL_Data>
 80237f0:	e7e6      	b.n	80237c0 <ProcessSendQueueData+0x198>
 80237f2:	0000      	.short	0x0000
 80237f4:	080227e3 	.word	0x080227e3

Disassembly of section i.QueueACLPacket:

080237f8 <QueueACLPacket>:
 80237f8:	b508      	push	{r3, lr}
 80237fa:	4603      	mov	r3, r0
 80237fc:	9100      	str	r1, [sp, #0]
 80237fe:	2100      	movs	r1, #0
 8023800:	2214      	movs	r2, #20
 8023802:	4608      	mov	r0, r1
 8023804:	f7f5 f954 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8023808:	bd08      	pop	{r3, pc}

Disassembly of section i.SearchACLPacketEntryByConnectionHandle:

0802380a <SearchACLPacketEntryByConnectionHandle>:
 802380a:	b503      	push	{r0, r1, lr}
 802380c:	b081      	sub	sp, #4
 802380e:	2314      	movs	r3, #20
 8023810:	9000      	str	r0, [sp, #0]
 8023812:	2200      	movs	r2, #0
 8023814:	a902      	add	r1, sp, #8
 8023816:	2003      	movs	r0, #3
 8023818:	f7f5 fc8f 	bl	801913a <BSC_SearchGenericListEntry>
 802381c:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchACLPacketEntryByIdentifier:

0802381e <SearchACLPacketEntryByIdentifier>:
 802381e:	b503      	push	{r0, r1, lr}
 8023820:	b081      	sub	sp, #4
 8023822:	2314      	movs	r3, #20
 8023824:	9000      	str	r0, [sp, #0]
 8023826:	2204      	movs	r2, #4
 8023828:	a902      	add	r1, sp, #8
 802382a:	2003      	movs	r0, #3
 802382c:	f7f5 fc85 	bl	801913a <BSC_SearchGenericListEntry>
 8023830:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchChannelInfoEntry:

08023832 <SearchChannelInfoEntry>:
 8023832:	b503      	push	{r0, r1, lr}
 8023834:	b081      	sub	sp, #4
 8023836:	2354      	movs	r3, #84	; 0x54
 8023838:	9000      	str	r0, [sp, #0]
 802383a:	2206      	movs	r2, #6
 802383c:	a902      	add	r1, sp, #8
 802383e:	2003      	movs	r0, #3
 8023840:	f7f5 fc7b 	bl	801913a <BSC_SearchGenericListEntry>
 8023844:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchConnectionInfoEntryByBD_ADDRType:

08023846 <SearchConnectionInfoEntryByBD_ADDRType>:
 8023846:	b510      	push	{r4, lr}
 8023848:	6800      	ldr	r0, [r0, #0]
 802384a:	e000      	b.n	802384e <SearchConnectionInfoEntryByBD_ADDRType+0x8>
 802384c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802384e:	2800      	cmp	r0, #0
 8023850:	d01a      	beq.n	8023888 <SearchConnectionInfoEntryByBD_ADDRType+0x42>
 8023852:	7943      	ldrb	r3, [r0, #5]
 8023854:	780c      	ldrb	r4, [r1, #0]
 8023856:	42a3      	cmp	r3, r4
 8023858:	d1f8      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 802385a:	7983      	ldrb	r3, [r0, #6]
 802385c:	784c      	ldrb	r4, [r1, #1]
 802385e:	42a3      	cmp	r3, r4
 8023860:	d1f4      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 8023862:	79c3      	ldrb	r3, [r0, #7]
 8023864:	788c      	ldrb	r4, [r1, #2]
 8023866:	42a3      	cmp	r3, r4
 8023868:	d1f0      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 802386a:	7a03      	ldrb	r3, [r0, #8]
 802386c:	78cc      	ldrb	r4, [r1, #3]
 802386e:	42a3      	cmp	r3, r4
 8023870:	d1ec      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 8023872:	7a43      	ldrb	r3, [r0, #9]
 8023874:	790c      	ldrb	r4, [r1, #4]
 8023876:	42a3      	cmp	r3, r4
 8023878:	d1e8      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 802387a:	7a83      	ldrb	r3, [r0, #10]
 802387c:	794c      	ldrb	r4, [r1, #5]
 802387e:	42a3      	cmp	r3, r4
 8023880:	d1e4      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 8023882:	7843      	ldrb	r3, [r0, #1]
 8023884:	4293      	cmp	r3, r2
 8023886:	d1e1      	bne.n	802384c <SearchConnectionInfoEntryByBD_ADDRType+0x6>
 8023888:	bd10      	pop	{r4, pc}

Disassembly of section i.SearchConnectionInfoEntryByConnectionHandle:

0802388a <SearchConnectionInfoEntryByConnectionHandle>:
 802388a:	b503      	push	{r0, r1, lr}
 802388c:	b081      	sub	sp, #4
 802388e:	2324      	movs	r3, #36	; 0x24
 8023890:	9000      	str	r0, [sp, #0]
 8023892:	220c      	movs	r2, #12
 8023894:	a902      	add	r1, sp, #8
 8023896:	2003      	movs	r0, #3
 8023898:	f7f5 fc4f 	bl	801913a <BSC_SearchGenericListEntry>
 802389c:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchFixedChannelInfoEntry:

0802389e <SearchFixedChannelInfoEntry>:
 802389e:	b533      	push	{r0, r1, r4, r5, lr}
 80238a0:	b081      	sub	sp, #4
 80238a2:	4605      	mov	r5, r0
 80238a4:	9000      	str	r0, [sp, #0]
 80238a6:	230c      	movs	r3, #12
 80238a8:	2200      	movs	r2, #0
 80238aa:	a902      	add	r1, sp, #8
 80238ac:	2003      	movs	r0, #3
 80238ae:	f7f5 fc44 	bl	801913a <BSC_SearchGenericListEntry>
 80238b2:	0004      	movs	r4, r0
 80238b4:	d117      	bne.n	80238e6 <SearchFixedChannelInfoEntry+0x48>
 80238b6:	2010      	movs	r0, #16
 80238b8:	f7ef fd80 	bl	80133bc <BTPS_AllocateMemory>
 80238bc:	0004      	movs	r4, r0
 80238be:	d012      	beq.n	80238e6 <SearchFixedChannelInfoEntry+0x48>
 80238c0:	2210      	movs	r2, #16
 80238c2:	2100      	movs	r1, #0
 80238c4:	f7ef fdfb 	bl	80134be <BTPS_MemInitialize>
 80238c8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80238cc:	8020      	strh	r0, [r4, #0]
 80238ce:	462b      	mov	r3, r5
 80238d0:	220c      	movs	r2, #12
 80238d2:	2100      	movs	r1, #0
 80238d4:	2003      	movs	r0, #3
 80238d6:	9400      	str	r4, [sp, #0]
 80238d8:	f7f5 f8ea 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 80238dc:	b918      	cbnz	r0, 80238e6 <SearchFixedChannelInfoEntry+0x48>
 80238de:	4620      	mov	r0, r4
 80238e0:	f7ef fd86 	bl	80133f0 <BTPS_FreeMemory>
 80238e4:	2400      	movs	r4, #0
 80238e6:	4620      	mov	r0, r4
 80238e8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i.SearchIdentifierInfoEntryByIdentifier:

080238ea <SearchIdentifierInfoEntryByIdentifier>:
 80238ea:	b503      	push	{r0, r1, lr}
 80238ec:	b081      	sub	sp, #4
 80238ee:	2320      	movs	r3, #32
 80238f0:	9000      	str	r0, [sp, #0]
 80238f2:	2204      	movs	r2, #4
 80238f4:	a902      	add	r1, sp, #8
 80238f6:	2003      	movs	r0, #3
 80238f8:	f7f5 fc1f 	bl	801913a <BSC_SearchGenericListEntry>
 80238fc:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchRegistryByID:

080238fe <SearchRegistryByID>:
 80238fe:	b503      	push	{r0, r1, lr}
 8023900:	b081      	sub	sp, #4
 8023902:	2310      	movs	r3, #16
 8023904:	9000      	str	r0, [sp, #0]
 8023906:	2200      	movs	r2, #0
 8023908:	a902      	add	r1, sp, #8
 802390a:	2007      	movs	r0, #7
 802390c:	f7f5 fc15 	bl	801913a <BSC_SearchGenericListEntry>
 8023910:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchRegistryByValue:

08023912 <SearchRegistryByValue>:
 8023912:	b503      	push	{r0, r1, lr}
 8023914:	b081      	sub	sp, #4
 8023916:	2310      	movs	r3, #16
 8023918:	9000      	str	r0, [sp, #0]
 802391a:	2204      	movs	r2, #4
 802391c:	a902      	add	r1, sp, #8
 802391e:	2003      	movs	r0, #3
 8023920:	f7f5 fc0b 	bl	801913a <BSC_SearchGenericListEntry>
 8023924:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.VerifyACLHeader:

08023926 <VerifyACLHeader>:
 8023926:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802392a:	2600      	movs	r6, #0
 802392c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8023930:	4699      	mov	r9, r3
 8023932:	4617      	mov	r7, r2
 8023934:	4680      	mov	r8, r0
 8023936:	2b04      	cmp	r3, #4
 8023938:	d33a      	bcc.n	80239b0 <VerifyACLHeader+0x8a>
 802393a:	f8ba 4002 	ldrh.w	r4, [sl, #2]
 802393e:	b31f      	cbz	r7, 8023988 <VerifyACLHeader+0x62>
 8023940:	b314      	cbz	r4, 8023988 <VerifyACLHeader+0x62>
 8023942:	f108 0058 	add.w	r0, r8, #88	; 0x58
 8023946:	f7ff ffa0 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 802394a:	0005      	movs	r5, r0
 802394c:	d030      	beq.n	80239b0 <VerifyACLHeader+0x8a>
 802394e:	78a8      	ldrb	r0, [r5, #2]
 8023950:	2804      	cmp	r0, #4
 8023952:	d02d      	beq.n	80239b0 <VerifyACLHeader+0x8a>
 8023954:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8023958:	42b8      	cmp	r0, r7
 802395a:	d316      	bcc.n	802398a <VerifyACLHeader+0x64>
 802395c:	f1a4 0040 	sub.w	r0, r4, #64	; 0x40
 8023960:	f64f 71bf 	movw	r1, #65471	; 0xffbf
 8023964:	4288      	cmp	r0, r1
 8023966:	d80e      	bhi.n	8023986 <VerifyACLHeader+0x60>
 8023968:	4621      	mov	r1, r4
 802396a:	f108 0054 	add.w	r0, r8, #84	; 0x54
 802396e:	f7ff ff60 	bl	8023832 <SearchChannelInfoEntry>
 8023972:	b148      	cbz	r0, 8023988 <VerifyACLHeader+0x62>
 8023974:	69c1      	ldr	r1, [r0, #28]
 8023976:	b139      	cbz	r1, 8023988 <VerifyACLHeader+0x62>
 8023978:	8901      	ldrh	r1, [r0, #8]
 802397a:	89aa      	ldrh	r2, [r5, #12]
 802397c:	4291      	cmp	r1, r2
 802397e:	d117      	bne.n	80239b0 <VerifyACLHeader+0x8a>
 8023980:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
 8023982:	42b8      	cmp	r0, r7
 8023984:	d314      	bcc.n	80239b0 <VerifyACLHeader+0x8a>
 8023986:	2601      	movs	r6, #1
 8023988:	e012      	b.n	80239b0 <VerifyACLHeader+0x8a>
 802398a:	2c01      	cmp	r4, #1
 802398c:	d001      	beq.n	8023992 <VerifyACLHeader+0x6c>
 802398e:	2c05      	cmp	r4, #5
 8023990:	d10e      	bne.n	80239b0 <VerifyACLHeader+0x8a>
 8023992:	f1b9 0f08 	cmp.w	r9, #8
 8023996:	d30b      	bcc.n	80239b0 <VerifyACLHeader+0x8a>
 8023998:	2000      	movs	r0, #0
 802399a:	2101      	movs	r1, #1
 802399c:	e9cd 1000 	strd	r1, r0, [sp]
 80239a0:	9002      	str	r0, [sp, #8]
 80239a2:	f89a 3005 	ldrb.w	r3, [sl, #5]
 80239a6:	89a9      	ldrh	r1, [r5, #12]
 80239a8:	4622      	mov	r2, r4
 80239aa:	4640      	mov	r0, r8
 80239ac:	f7fe fece 	bl	802274c <L2CAP_RejectCommand>
 80239b0:	4630      	mov	r0, r6
 80239b2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i._L2CA_Config_Request:

080239b8 <_L2CA_Config_Request>:
 80239b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239bc:	b085      	sub	sp, #20
 80239be:	461e      	mov	r6, r3
 80239c0:	4690      	mov	r8, r2
 80239c2:	0005      	movs	r5, r0
 80239c4:	d079      	beq.n	8023aba <_L2CA_Config_Request+0x102>
 80239c6:	f105 0054 	add.w	r0, r5, #84	; 0x54
 80239ca:	f7ff ff32 	bl	8023832 <SearchChannelInfoEntry>
 80239ce:	0004      	movs	r4, r0
 80239d0:	d074      	beq.n	8023abc <_L2CA_Config_Request+0x104>
 80239d2:	7ae0      	ldrb	r0, [r4, #11]
 80239d4:	2805      	cmp	r0, #5
 80239d6:	d004      	beq.n	80239e2 <_L2CA_Config_Request+0x2a>
 80239d8:	2806      	cmp	r0, #6
 80239da:	d002      	beq.n	80239e2 <_L2CA_Config_Request+0x2a>
 80239dc:	f06f 061f 	mvn.w	r6, #31
 80239e0:	e0ab      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 80239e2:	8921      	ldrh	r1, [r4, #8]
 80239e4:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80239e8:	f7ff ff4f 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 80239ec:	0007      	movs	r7, r0
 80239ee:	d07d      	beq.n	8023aec <_L2CA_Config_Request+0x134>
 80239f0:	8830      	ldrh	r0, [r6, #0]
 80239f2:	ea4f 3bd0 	mov.w	fp, r0, lsr #15
 80239f6:	07c1      	lsls	r1, r0, #31
 80239f8:	d00d      	beq.n	8023a16 <_L2CA_Config_Request+0x5e>
 80239fa:	8871      	ldrh	r1, [r6, #2]
 80239fc:	f64f 73cc 	movw	r3, #65484	; 0xffcc
 8023a00:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8023a04:	429a      	cmp	r2, r3
 8023a06:	d203      	bcs.n	8023a10 <_L2CA_Config_Request+0x58>
 8023a08:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8023a0c:	4291      	cmp	r1, r2
 8023a0e:	d902      	bls.n	8023a16 <_L2CA_Config_Request+0x5e>
 8023a10:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8023a14:	e091      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023a16:	0780      	lsls	r0, r0, #30
 8023a18:	d501      	bpl.n	8023a1e <_L2CA_Config_Request+0x66>
 8023a1a:	88b0      	ldrh	r0, [r6, #4]
 8023a1c:	e000      	b.n	8023a20 <_L2CA_Config_Request+0x68>
 8023a1e:	8a78      	ldrh	r0, [r7, #18]
 8023a20:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
 8023a24:	39ff      	subs	r1, #255	; 0xff
 8023a26:	d002      	beq.n	8023a2e <_L2CA_Config_Request+0x76>
 8023a28:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 8023a2c:	d27a      	bcs.n	8023b24 <_L2CA_Config_Request+0x16c>
 8023a2e:	8a79      	ldrh	r1, [r7, #18]
 8023a30:	4281      	cmp	r1, r0
 8023a32:	d377      	bcc.n	8023b24 <_L2CA_Config_Request+0x16c>
 8023a34:	d013      	beq.n	8023a5e <_L2CA_Config_Request+0xa6>
 8023a36:	8278      	strh	r0, [r7, #18]
 8023a38:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8023a3c:	fb00 f001 	mul.w	r0, r0, r1
 8023a40:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8023a44:	fbb0 f0f1 	udiv	r0, r0, r1
 8023a48:	f04f 010a 	mov.w	r1, #10
 8023a4c:	f100 0005 	add.w	r0, r0, #5
 8023a50:	fbb0 f0f1 	udiv	r0, r0, r1
 8023a54:	b282      	uxth	r2, r0
 8023a56:	8921      	ldrh	r1, [r4, #8]
 8023a58:	6828      	ldr	r0, [r5, #0]
 8023a5a:	f7fd f90e 	bl	8020c7a <_HCI_Write_Automatic_Flush_Timeout>
 8023a5e:	f8d5 9074 	ldr.w	r9, [r5, #116]	; 0x74
 8023a62:	4630      	mov	r0, r6
 8023a64:	4649      	mov	r1, r9
 8023a66:	f7ff fb26 	bl	80230b6 <ParseAPIOptions>
 8023a6a:	4682      	mov	sl, r0
 8023a6c:	7830      	ldrb	r0, [r6, #0]
 8023a6e:	07c0      	lsls	r0, r0, #31
 8023a70:	d001      	beq.n	8023a76 <_L2CA_Config_Request+0xbe>
 8023a72:	8870      	ldrh	r0, [r6, #2]
 8023a74:	8560      	strh	r0, [r4, #42]	; 0x2a
 8023a76:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8023a7a:	68ea      	ldr	r2, [r5, #12]
 8023a7c:	9102      	str	r1, [sp, #8]
 8023a7e:	0852      	lsrs	r2, r2, #1
 8023a80:	e9cd 2000 	strd	r2, r0, [sp]
 8023a84:	88e2      	ldrh	r2, [r4, #6]
 8023a86:	8921      	ldrh	r1, [r4, #8]
 8023a88:	2304      	movs	r3, #4
 8023a8a:	4628      	mov	r0, r5
 8023a8c:	f7fd fafc 	bl	8021088 <CreateNewIdentifierEntry>
 8023a90:	9004      	str	r0, [sp, #16]
 8023a92:	b360      	cbz	r0, 8023aee <_L2CA_Config_Request+0x136>
 8023a94:	2000      	movs	r0, #0
 8023a96:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8023a9a:	e9cd ba00 	strd	fp, sl, [sp]
 8023a9e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8023aa0:	8921      	ldrh	r1, [r4, #8]
 8023aa2:	4628      	mov	r0, r5
 8023aa4:	9a04      	ldr	r2, [sp, #16]
 8023aa6:	f7fd ffdb 	bl	8021a60 <L2CAP_ConfigRequestResponse>
 8023aaa:	0006      	movs	r6, r0
 8023aac:	d007      	beq.n	8023abe <_L2CA_Config_Request+0x106>
 8023aae:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8023ab2:	9904      	ldr	r1, [sp, #16]
 8023ab4:	f7fd fbb0 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8023ab8:	e03f      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023aba:	e03c      	b.n	8023b36 <_L2CA_Config_Request+0x17e>
 8023abc:	e038      	b.n	8023b30 <_L2CA_Config_Request+0x178>
 8023abe:	2000      	movs	r0, #0
 8023ac0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 8023ac4:	7ae1      	ldrb	r1, [r4, #11]
 8023ac6:	2906      	cmp	r1, #6
 8023ac8:	d10f      	bne.n	8023aea <_L2CA_Config_Request+0x132>
 8023aca:	2105      	movs	r1, #5
 8023acc:	72e1      	strb	r1, [r4, #11]
 8023ace:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 8023ad2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8023ad4:	b948      	cbnz	r0, 8023aea <_L2CA_Config_Request+0x132>
 8023ad6:	69ab      	ldr	r3, [r5, #24]
 8023ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8023adc:	4343      	muls	r3, r0
 8023ade:	4a19      	ldr	r2, [pc, #100]	; (8023b44 <_L2CA_Config_Request+0x18c>)
 8023ae0:	2100      	movs	r1, #0
 8023ae2:	6828      	ldr	r0, [r5, #0]
 8023ae4:	f7f5 fe8c 	bl	8019800 <BTPS_StartTimer>
 8023ae8:	64e0      	str	r0, [r4, #76]	; 0x4c
 8023aea:	e001      	b.n	8023af0 <_L2CA_Config_Request+0x138>
 8023aec:	e01d      	b.n	8023b2a <_L2CA_Config_Request+0x172>
 8023aee:	e016      	b.n	8023b1e <_L2CA_Config_Request+0x166>
 8023af0:	8a39      	ldrh	r1, [r7, #16]
 8023af2:	4541      	cmp	r1, r8
 8023af4:	d921      	bls.n	8023b3a <_L2CA_Config_Request+0x182>
 8023af6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8023afa:	fb08 f001 	mul.w	r0, r8, r1
 8023afe:	1109      	asrs	r1, r1, #4
 8023b00:	fbb0 f0f1 	udiv	r0, r0, r1
 8023b04:	210a      	movs	r1, #10
 8023b06:	1d40      	adds	r0, r0, #5
 8023b08:	fbb0 f0f1 	udiv	r0, r0, r1
 8023b0c:	f8a7 8010 	strh.w	r8, [r7, #16]
 8023b10:	b282      	uxth	r2, r0
 8023b12:	89b9      	ldrh	r1, [r7, #12]
 8023b14:	6828      	ldr	r0, [r5, #0]
 8023b16:	f7fd f949 	bl	8020dac <_HCI_Write_Link_Supervision_Timeout>
 8023b1a:	e00e      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023b1c:	e002      	b.n	8023b24 <_L2CA_Config_Request+0x16c>
 8023b1e:	f06f 0622 	mvn.w	r6, #34	; 0x22
 8023b22:	e00a      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023b24:	f06f 061e 	mvn.w	r6, #30
 8023b28:	e007      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023b2a:	f06f 062d 	mvn.w	r6, #45	; 0x2d
 8023b2e:	e004      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023b30:	f06f 0625 	mvn.w	r6, #37	; 0x25
 8023b34:	e001      	b.n	8023b3a <_L2CA_Config_Request+0x182>
 8023b36:	f06f 0619 	mvn.w	r6, #25
 8023b3a:	b005      	add	sp, #20
 8023b3c:	4630      	mov	r0, r6
 8023b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b42:	0000      	.short	0x0000
 8023b44:	0802291d 	.word	0x0802291d

Disassembly of section i._L2CA_Config_Response:

08023b48 <_L2CA_Config_Response>:
 8023b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023b4c:	b084      	sub	sp, #16
 8023b4e:	4698      	mov	r8, r3
 8023b50:	0005      	movs	r5, r0
 8023b52:	d036      	beq.n	8023bc2 <_L2CA_Config_Response+0x7a>
 8023b54:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8023b58:	f7ff fe6b 	bl	8023832 <SearchChannelInfoEntry>
 8023b5c:	0004      	movs	r4, r0
 8023b5e:	d02d      	beq.n	8023bbc <_L2CA_Config_Response+0x74>
 8023b60:	f8b8 0000 	ldrh.w	r0, [r8]
 8023b64:	6f6e      	ldr	r6, [r5, #116]	; 0x74
 8023b66:	0bc7      	lsrs	r7, r0, #15
 8023b68:	4631      	mov	r1, r6
 8023b6a:	4640      	mov	r0, r8
 8023b6c:	f7ff faa3 	bl	80230b6 <ParseAPIOptions>
 8023b70:	a906      	add	r1, sp, #24
 8023b72:	9700      	str	r7, [sp, #0]
 8023b74:	9103      	str	r1, [sp, #12]
 8023b76:	e9cd 0601 	strd	r0, r6, [sp, #4]
 8023b7a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8023b7c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8023b80:	8921      	ldrh	r1, [r4, #8]
 8023b82:	4628      	mov	r0, r5
 8023b84:	f7fd ff6c 	bl	8021a60 <L2CAP_ConfigRequestResponse>
 8023b88:	f04f 0800 	mov.w	r8, #0
 8023b8c:	0006      	movs	r6, r0
 8023b8e:	f884 8052 	strb.w	r8, [r4, #82]	; 0x52
 8023b92:	d118      	bne.n	8023bc6 <_L2CA_Config_Response+0x7e>
 8023b94:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8023b98:	4307      	orrs	r7, r0
 8023b9a:	d114      	bne.n	8023bc6 <_L2CA_Config_Response+0x7e>
 8023b9c:	2001      	movs	r0, #1
 8023b9e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 8023ba2:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8023ba6:	b170      	cbz	r0, 8023bc6 <_L2CA_Config_Response+0x7e>
 8023ba8:	2006      	movs	r0, #6
 8023baa:	72e0      	strb	r0, [r4, #11]
 8023bac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8023bae:	b151      	cbz	r1, 8023bc6 <_L2CA_Config_Response+0x7e>
 8023bb0:	6828      	ldr	r0, [r5, #0]
 8023bb2:	f7f5 fe6f 	bl	8019894 <BTPS_StopTimer>
 8023bb6:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
 8023bba:	e004      	b.n	8023bc6 <_L2CA_Config_Response+0x7e>
 8023bbc:	f06f 0625 	mvn.w	r6, #37	; 0x25
 8023bc0:	e001      	b.n	8023bc6 <_L2CA_Config_Response+0x7e>
 8023bc2:	f06f 0619 	mvn.w	r6, #25
 8023bc6:	b008      	add	sp, #32
 8023bc8:	4630      	mov	r0, r6
 8023bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i._L2CA_Connect_Response:

08023bd0 <_L2CA_Connect_Response>:
 8023bd0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8023bd4:	461e      	mov	r6, r3
 8023bd6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8023bda:	4691      	mov	r9, r2
 8023bdc:	468a      	mov	sl, r1
 8023bde:	0005      	movs	r5, r0
 8023be0:	d046      	beq.n	8023c70 <_L2CA_Connect_Response+0xa0>
 8023be2:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8023be6:	4611      	mov	r1, r2
 8023be8:	4683      	mov	fp, r0
 8023bea:	f7ff fe22 	bl	8023832 <SearchChannelInfoEntry>
 8023bee:	0004      	movs	r4, r0
 8023bf0:	d03b      	beq.n	8023c6a <_L2CA_Connect_Response+0x9a>
 8023bf2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8023bf4:	2700      	movs	r7, #0
 8023bf6:	b119      	cbz	r1, 8023c00 <_L2CA_Connect_Response+0x30>
 8023bf8:	6828      	ldr	r0, [r5, #0]
 8023bfa:	f7f5 fe4b 	bl	8019894 <BTPS_StopTimer>
 8023bfe:	64e7      	str	r7, [r4, #76]	; 0x4c
 8023c00:	b196      	cbz	r6, 8023c28 <_L2CA_Connect_Response+0x58>
 8023c02:	2e01      	cmp	r6, #1
 8023c04:	d021      	beq.n	8023c4a <_L2CA_Connect_Response+0x7a>
 8023c06:	2007      	movs	r0, #7
 8023c08:	72e0      	strb	r0, [r4, #11]
 8023c0a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8023c0c:	2201      	movs	r2, #1
 8023c0e:	e88d 0146 	stmia.w	sp, {r1, r2, r6, r8}
 8023c12:	8921      	ldrh	r1, [r4, #8]
 8023c14:	464b      	mov	r3, r9
 8023c16:	4652      	mov	r2, sl
 8023c18:	4628      	mov	r0, r5
 8023c1a:	f7fe f8d9 	bl	8021dd0 <L2CAP_ConnectRequestResponse>
 8023c1e:	4605      	mov	r5, r0
 8023c20:	7ae0      	ldrb	r0, [r4, #11]
 8023c22:	2807      	cmp	r0, #7
 8023c24:	d01c      	beq.n	8023c60 <_L2CA_Connect_Response+0x90>
 8023c26:	e025      	b.n	8023c74 <_L2CA_Connect_Response+0xa4>
 8023c28:	2005      	movs	r0, #5
 8023c2a:	72e0      	strb	r0, [r4, #11]
 8023c2c:	69ab      	ldr	r3, [r5, #24]
 8023c2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8023c32:	4343      	muls	r3, r0
 8023c34:	88e1      	ldrh	r1, [r4, #6]
 8023c36:	4a11      	ldr	r2, [pc, #68]	; (8023c7c <_L2CA_Connect_Response+0xac>)
 8023c38:	6828      	ldr	r0, [r5, #0]
 8023c3a:	f7f5 fde1 	bl	8019800 <BTPS_StartTimer>
 8023c3e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8023c40:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
 8023c44:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
 8023c48:	e7df      	b.n	8023c0a <_L2CA_Connect_Response+0x3a>
 8023c4a:	692b      	ldr	r3, [r5, #16]
 8023c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8023c50:	4343      	muls	r3, r0
 8023c52:	88e1      	ldrh	r1, [r4, #6]
 8023c54:	4a09      	ldr	r2, [pc, #36]	; (8023c7c <_L2CA_Connect_Response+0xac>)
 8023c56:	6828      	ldr	r0, [r5, #0]
 8023c58:	f7f5 fdd2 	bl	8019800 <BTPS_StartTimer>
 8023c5c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8023c5e:	e7d4      	b.n	8023c0a <_L2CA_Connect_Response+0x3a>
 8023c60:	4621      	mov	r1, r4
 8023c62:	4658      	mov	r0, fp
 8023c64:	f7fd faa9 	bl	80211ba <DeleteChannelInfoEntry>
 8023c68:	e004      	b.n	8023c74 <_L2CA_Connect_Response+0xa4>
 8023c6a:	f06f 0525 	mvn.w	r5, #37	; 0x25
 8023c6e:	e001      	b.n	8023c74 <_L2CA_Connect_Response+0xa4>
 8023c70:	f06f 0519 	mvn.w	r5, #25
 8023c74:	b004      	add	sp, #16
 8023c76:	4628      	mov	r0, r5
 8023c78:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8023c7c:	0802291d 	.word	0x0802291d

Disassembly of section i._L2CA_Connection_Parameter_Update_Response:

08023c80 <_L2CA_Connection_Parameter_Update_Response>:
 8023c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023c82:	b085      	sub	sp, #20
 8023c84:	4615      	mov	r5, r2
 8023c86:	0004      	movs	r4, r0
 8023c88:	d02d      	beq.n	8023ce6 <_L2CA_Connection_Parameter_Update_Response+0x66>
 8023c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023c8e:	f7ff fdfc 	bl	802388a <SearchConnectionInfoEntryByConnectionHandle>
 8023c92:	0003      	movs	r3, r0
 8023c94:	d024      	beq.n	8023ce0 <_L2CA_Connection_Parameter_Update_Response+0x60>
 8023c96:	4620      	mov	r0, r4
 8023c98:	6fa4      	ldr	r4, [r4, #120]	; 0x78
 8023c9a:	8999      	ldrh	r1, [r3, #12]
 8023c9c:	8a1b      	ldrh	r3, [r3, #16]
 8023c9e:	2206      	movs	r2, #6
 8023ca0:	7022      	strb	r2, [r4, #0]
 8023ca2:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8023ca4:	2200      	movs	r2, #0
 8023ca6:	2664      	movs	r6, #100	; 0x64
 8023ca8:	7062      	strb	r2, [r4, #1]
 8023caa:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8023cac:	2405      	movs	r4, #5
 8023cae:	70bc      	strb	r4, [r7, #2]
 8023cb0:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8023cb2:	2713      	movs	r7, #19
 8023cb4:	70e2      	strb	r2, [r4, #3]
 8023cb6:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8023cb8:	7127      	strb	r7, [r4, #4]
 8023cba:	7163      	strb	r3, [r4, #5]
 8023cbc:	2702      	movs	r7, #2
 8023cbe:	71a7      	strb	r7, [r4, #6]
 8023cc0:	71e2      	strb	r2, [r4, #7]
 8023cc2:	7225      	strb	r5, [r4, #8]
 8023cc4:	0a2d      	lsrs	r5, r5, #8
 8023cc6:	7265      	strb	r5, [r4, #9]
 8023cc8:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8023cca:	250a      	movs	r5, #10
 8023ccc:	e9cd 6200 	strd	r6, r2, [sp]
 8023cd0:	e9cd 2502 	strd	r2, r5, [sp, #8]
 8023cd4:	9404      	str	r4, [sp, #16]
 8023cd6:	2205      	movs	r2, #5
 8023cd8:	f7fe fa1a 	bl	8022110 <L2CAP_DataWrite>
 8023cdc:	b005      	add	sp, #20
 8023cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ce0:	f06f 006c 	mvn.w	r0, #108	; 0x6c
 8023ce4:	e7fa      	b.n	8023cdc <_L2CA_Connection_Parameter_Update_Response+0x5c>
 8023ce6:	f06f 0019 	mvn.w	r0, #25
 8023cea:	e7f7      	b.n	8023cdc <_L2CA_Connection_Parameter_Update_Response+0x5c>

Disassembly of section i._L2CA_Data_Write:

08023cec <_L2CA_Data_Write>:
 8023cec:	b508      	push	{r3, lr}
 8023cee:	9300      	str	r3, [sp, #0]
 8023cf0:	4613      	mov	r3, r2
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	f000 f85c 	bl	8023db0 <_L2CA_Enhanced_Data_Write>
 8023cf8:	bd08      	pop	{r3, pc}

Disassembly of section i._L2CA_Disconnect_Request:

08023cfa <_L2CA_Disconnect_Request>:
 8023cfa:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8023cfe:	0006      	movs	r6, r0
 8023d00:	460d      	mov	r5, r1
 8023d02:	d040      	beq.n	8023d86 <_L2CA_Disconnect_Request+0x8c>
 8023d04:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8023d08:	4680      	mov	r8, r0
 8023d0a:	f7ff fd92 	bl	8023832 <SearchChannelInfoEntry>
 8023d0e:	0004      	movs	r4, r0
 8023d10:	d036      	beq.n	8023d80 <_L2CA_Disconnect_Request+0x86>
 8023d12:	7aa0      	ldrb	r0, [r4, #10]
 8023d14:	2801      	cmp	r0, #1
 8023d16:	d002      	beq.n	8023d1e <_L2CA_Disconnect_Request+0x24>
 8023d18:	f06f 0562 	mvn.w	r5, #98	; 0x62
 8023d1c:	e035      	b.n	8023d8a <_L2CA_Disconnect_Request+0x90>
 8023d1e:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8023d20:	b358      	cbz	r0, 8023d7a <_L2CA_Disconnect_Request+0x80>
 8023d22:	e9d4 0107 	ldrd	r0, r1, [r4, #28]
 8023d26:	68f2      	ldr	r2, [r6, #12]
 8023d28:	9102      	str	r1, [sp, #8]
 8023d2a:	0852      	lsrs	r2, r2, #1
 8023d2c:	e9cd 2000 	strd	r2, r0, [sp]
 8023d30:	88e2      	ldrh	r2, [r4, #6]
 8023d32:	8921      	ldrh	r1, [r4, #8]
 8023d34:	2306      	movs	r3, #6
 8023d36:	4630      	mov	r0, r6
 8023d38:	f7fd f9a6 	bl	8021088 <CreateNewIdentifierEntry>
 8023d3c:	0007      	movs	r7, r0
 8023d3e:	d019      	beq.n	8023d74 <_L2CA_Disconnect_Request+0x7a>
 8023d40:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8023d42:	9000      	str	r0, [sp, #0]
 8023d44:	2100      	movs	r1, #0
 8023d46:	e9cd 5101 	strd	r5, r1, [sp, #4]
 8023d4a:	8921      	ldrh	r1, [r4, #8]
 8023d4c:	463b      	mov	r3, r7
 8023d4e:	2201      	movs	r2, #1
 8023d50:	4630      	mov	r0, r6
 8023d52:	f7fe fa5e 	bl	8022212 <L2CAP_DisconnectRequestResponse>
 8023d56:	0005      	movs	r5, r0
 8023d58:	d009      	beq.n	8023d6e <_L2CA_Disconnect_Request+0x74>
 8023d5a:	4639      	mov	r1, r7
 8023d5c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8023d60:	f7fd fa5a 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8023d64:	4621      	mov	r1, r4
 8023d66:	4640      	mov	r0, r8
 8023d68:	f7fd fa27 	bl	80211ba <DeleteChannelInfoEntry>
 8023d6c:	e00d      	b.n	8023d8a <_L2CA_Disconnect_Request+0x90>
 8023d6e:	2007      	movs	r0, #7
 8023d70:	72e0      	strb	r0, [r4, #11]
 8023d72:	e00a      	b.n	8023d8a <_L2CA_Disconnect_Request+0x90>
 8023d74:	f06f 0522 	mvn.w	r5, #34	; 0x22
 8023d78:	e007      	b.n	8023d8a <_L2CA_Disconnect_Request+0x90>
 8023d7a:	f06f 0523 	mvn.w	r5, #35	; 0x23
 8023d7e:	e004      	b.n	8023d8a <_L2CA_Disconnect_Request+0x90>
 8023d80:	f06f 0525 	mvn.w	r5, #37	; 0x25
 8023d84:	e001      	b.n	8023d8a <_L2CA_Disconnect_Request+0x90>
 8023d86:	f06f 0519 	mvn.w	r5, #25
 8023d8a:	4628      	mov	r0, r5
 8023d8c:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i._L2CA_Disconnect_Response:

08023d90 <_L2CA_Disconnect_Response>:
 8023d90:	b510      	push	{r4, lr}
 8023d92:	b150      	cbz	r0, 8023daa <_L2CA_Disconnect_Response+0x1a>
 8023d94:	3054      	adds	r0, #84	; 0x54
 8023d96:	f7ff fd4c 	bl	8023832 <SearchChannelInfoEntry>
 8023d9a:	b118      	cbz	r0, 8023da4 <_L2CA_Disconnect_Response+0x14>
 8023d9c:	2102      	movs	r1, #2
 8023d9e:	72c1      	strb	r1, [r0, #11]
 8023da0:	2000      	movs	r0, #0
 8023da2:	bd10      	pop	{r4, pc}
 8023da4:	f06f 0025 	mvn.w	r0, #37	; 0x25
 8023da8:	bd10      	pop	{r4, pc}
 8023daa:	f06f 0019 	mvn.w	r0, #25
 8023dae:	bd10      	pop	{r4, pc}

Disassembly of section i._L2CA_Enhanced_Data_Write:

08023db0 <_L2CA_Enhanced_Data_Write>:
 8023db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023db4:	b087      	sub	sp, #28
 8023db6:	461d      	mov	r5, r3
 8023db8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8023dbc:	4616      	mov	r6, r2
 8023dbe:	0007      	movs	r7, r0
 8023dc0:	d04e      	beq.n	8023e60 <_L2CA_Enhanced_Data_Write+0xb0>
 8023dc2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8023dc6:	f7ff fd34 	bl	8023832 <SearchChannelInfoEntry>
 8023dca:	0004      	movs	r4, r0
 8023dcc:	d045      	beq.n	8023e5a <_L2CA_Enhanced_Data_Write+0xaa>
 8023dce:	7aa0      	ldrb	r0, [r4, #10]
 8023dd0:	2801      	cmp	r0, #1
 8023dd2:	d004      	beq.n	8023dde <_L2CA_Enhanced_Data_Write+0x2e>
 8023dd4:	f06f 002e 	mvn.w	r0, #46	; 0x2e
 8023dd8:	b007      	add	sp, #28
 8023dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023dde:	7ae0      	ldrb	r0, [r4, #11]
 8023de0:	2806      	cmp	r0, #6
 8023de2:	d137      	bne.n	8023e54 <_L2CA_Enhanced_Data_Write+0xa4>
 8023de4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8023de6:	b370      	cbz	r0, 8023e46 <_L2CA_Enhanced_Data_Write+0x96>
 8023de8:	42a8      	cmp	r0, r5
 8023dea:	d330      	bcc.n	8023e4e <_L2CA_Enhanced_Data_Write+0x9e>
 8023dec:	b14e      	cbz	r6, 8023e02 <_L2CA_Enhanced_Data_Write+0x52>
 8023dee:	8920      	ldrh	r0, [r4, #8]
 8023df0:	9000      	str	r0, [sp, #0]
 8023df2:	88e3      	ldrh	r3, [r4, #6]
 8023df4:	f104 0210 	add.w	r2, r4, #16
 8023df8:	4631      	mov	r1, r6
 8023dfa:	4638      	mov	r0, r7
 8023dfc:	f7fd f86d 	bl	8020eda <CheckQueuedDataWrite>
 8023e00:	b310      	cbz	r0, 8023e48 <_L2CA_Enhanced_Data_Write+0x98>
 8023e02:	f88d 5018 	strb.w	r5, [sp, #24]
 8023e06:	0a28      	lsrs	r0, r5, #8
 8023e08:	f88d 0019 	strb.w	r0, [sp, #25]
 8023e0c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8023e10:	f88d 001a 	strb.w	r0, [sp, #26]
 8023e14:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8023e16:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8023e1a:	0a00      	lsrs	r0, r0, #8
 8023e1c:	f88d 001b 	strb.w	r0, [sp, #27]
 8023e20:	f7fd fb94 	bl	802154c <GetNextDataIdentifier>
 8023e24:	4603      	mov	r3, r0
 8023e26:	f104 0010 	add.w	r0, r4, #16
 8023e2a:	f8cd 8000 	str.w	r8, [sp]
 8023e2e:	e9cd 6004 	strd	r6, r0, [sp, #16]
 8023e32:	a801      	add	r0, sp, #4
 8023e34:	a906      	add	r1, sp, #24
 8023e36:	e880 0222 	stmia.w	r0, {r1, r5, r9}
 8023e3a:	88e2      	ldrh	r2, [r4, #6]
 8023e3c:	8921      	ldrh	r1, [r4, #8]
 8023e3e:	4638      	mov	r0, r7
 8023e40:	f7fd fa3a 	bl	80212b8 <EnhancedFragmentPacket>
 8023e44:	e7c8      	b.n	8023dd8 <_L2CA_Enhanced_Data_Write+0x28>
 8023e46:	e005      	b.n	8023e54 <_L2CA_Enhanced_Data_Write+0xa4>
 8023e48:	f06f 0040 	mvn.w	r0, #64	; 0x40
 8023e4c:	e7c4      	b.n	8023dd8 <_L2CA_Enhanced_Data_Write+0x28>
 8023e4e:	f06f 0028 	mvn.w	r0, #40	; 0x28
 8023e52:	e7c1      	b.n	8023dd8 <_L2CA_Enhanced_Data_Write+0x28>
 8023e54:	f06f 0024 	mvn.w	r0, #36	; 0x24
 8023e58:	e7be      	b.n	8023dd8 <_L2CA_Enhanced_Data_Write+0x28>
 8023e5a:	f06f 0025 	mvn.w	r0, #37	; 0x25
 8023e5e:	e7bb      	b.n	8023dd8 <_L2CA_Enhanced_Data_Write+0x28>
 8023e60:	f06f 0019 	mvn.w	r0, #25
 8023e64:	e7b8      	b.n	8023dd8 <_L2CA_Enhanced_Data_Write+0x28>

Disassembly of section i._L2CA_Flush_Channel_Data:

08023e66 <_L2CA_Flush_Channel_Data>:
 8023e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e6a:	0006      	movs	r6, r0
 8023e6c:	460f      	mov	r7, r1
 8023e6e:	d030      	beq.n	8023ed2 <_L2CA_Flush_Channel_Data+0x6c>
 8023e70:	f106 0054 	add.w	r0, r6, #84	; 0x54
 8023e74:	f7ff fcdd 	bl	8023832 <SearchChannelInfoEntry>
 8023e78:	b108      	cbz	r0, 8023e7e <_L2CA_Flush_Channel_Data+0x18>
 8023e7a:	2100      	movs	r1, #0
 8023e7c:	8281      	strh	r1, [r0, #20]
 8023e7e:	2502      	movs	r5, #2
 8023e80:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8023e84:	f106 0850 	add.w	r8, r6, #80	; 0x50
 8023e88:	6821      	ldr	r1, [r4, #0]
 8023e8a:	e009      	b.n	8023ea0 <_L2CA_Flush_Channel_Data+0x3a>
 8023e8c:	8848      	ldrh	r0, [r1, #2]
 8023e8e:	42b8      	cmp	r0, r7
 8023e90:	d103      	bne.n	8023e9a <_L2CA_Flush_Channel_Data+0x34>
 8023e92:	4620      	mov	r0, r4
 8023e94:	f7fd f982 	bl	802119c <DeleteACLPacketEntry>
 8023e98:	e7f6      	b.n	8023e88 <_L2CA_Flush_Channel_Data+0x22>
 8023e9a:	f101 0414 	add.w	r4, r1, #20
 8023e9e:	6949      	ldr	r1, [r1, #20]
 8023ea0:	2900      	cmp	r1, #0
 8023ea2:	d1f3      	bne.n	8023e8c <_L2CA_Flush_Channel_Data+0x26>
 8023ea4:	4644      	mov	r4, r8
 8023ea6:	1e6d      	subs	r5, r5, #1
 8023ea8:	d1ee      	bne.n	8023e88 <_L2CA_Flush_Channel_Data+0x22>
 8023eaa:	f106 045c 	add.w	r4, r6, #92	; 0x5c
 8023eae:	e006      	b.n	8023ebe <_L2CA_Flush_Channel_Data+0x58>
 8023eb0:	8930      	ldrh	r0, [r6, #8]
 8023eb2:	42b8      	cmp	r0, r7
 8023eb4:	d105      	bne.n	8023ec2 <_L2CA_Flush_Channel_Data+0x5c>
 8023eb6:	88b1      	ldrh	r1, [r6, #4]
 8023eb8:	4620      	mov	r0, r4
 8023eba:	f7fd f9ad 	bl	8021218 <DeleteIdentifierInfoEntryByIdentifier>
 8023ebe:	6826      	ldr	r6, [r4, #0]
 8023ec0:	e002      	b.n	8023ec8 <_L2CA_Flush_Channel_Data+0x62>
 8023ec2:	f106 0420 	add.w	r4, r6, #32
 8023ec6:	6a36      	ldr	r6, [r6, #32]
 8023ec8:	2e00      	cmp	r6, #0
 8023eca:	d1f1      	bne.n	8023eb0 <_L2CA_Flush_Channel_Data+0x4a>
 8023ecc:	2000      	movs	r0, #0
 8023ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ed2:	f06f 0019 	mvn.w	r0, #25
 8023ed6:	e7fa      	b.n	8023ece <_L2CA_Flush_Channel_Data+0x68>

Disassembly of section i._L2CA_Register_PSM:

08023ed8 <_L2CA_Register_PSM>:
 8023ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023edc:	4698      	mov	r8, r3
 8023ede:	4615      	mov	r5, r2
 8023ee0:	460e      	mov	r6, r1
 8023ee2:	0007      	movs	r7, r0
 8023ee4:	d020      	beq.n	8023f28 <_L2CA_Register_PSM+0x50>
 8023ee6:	2014      	movs	r0, #20
 8023ee8:	f7ef fa68 	bl	80133bc <BTPS_AllocateMemory>
 8023eec:	0004      	movs	r4, r0
 8023eee:	d018      	beq.n	8023f22 <_L2CA_Register_PSM+0x4a>
 8023ef0:	2214      	movs	r2, #20
 8023ef2:	2100      	movs	r1, #0
 8023ef4:	f7ef fae3 	bl	80134be <BTPS_MemInitialize>
 8023ef8:	f7fd fb36 	bl	8021568 <GetNextIDNumber>
 8023efc:	6020      	str	r0, [r4, #0]
 8023efe:	80a6      	strh	r6, [r4, #4]
 8023f00:	e9c4 5802 	strd	r5, r8, [r4, #8]
 8023f04:	4621      	mov	r1, r4
 8023f06:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8023f0a:	f7fc ffdd 	bl	8020ec8 <AddRegistryInfoEntry>
 8023f0e:	b110      	cbz	r0, 8023f16 <_L2CA_Register_PSM+0x3e>
 8023f10:	6820      	ldr	r0, [r4, #0]
 8023f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f16:	4620      	mov	r0, r4
 8023f18:	f7ef fa6a 	bl	80133f0 <BTPS_FreeMemory>
 8023f1c:	f06f 0018 	mvn.w	r0, #24
 8023f20:	e7f7      	b.n	8023f12 <_L2CA_Register_PSM+0x3a>
 8023f22:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8023f26:	e7f4      	b.n	8023f12 <_L2CA_Register_PSM+0x3a>
 8023f28:	f06f 0019 	mvn.w	r0, #25
 8023f2c:	e7f1      	b.n	8023f12 <_L2CA_Register_PSM+0x3a>

Disassembly of section i.OTP_Cleanup:

08023f2e <OTP_Cleanup>:
 8023f2e:	4770      	bx	lr

Disassembly of section i.OTP_Initialize:

08023f30 <OTP_Initialize>:
 8023f30:	2000      	movs	r0, #0
 8023f32:	4770      	bx	lr

Disassembly of section i.AcquireRFCOMMStackInformation:

08023f34 <AcquireRFCOMMStackInformation>:
 8023f34:	b570      	push	{r4, r5, r6, lr}
 8023f36:	4605      	mov	r5, r0
 8023f38:	460c      	mov	r4, r1
 8023f3a:	4610      	mov	r0, r2
 8023f3c:	f7f4 fcfe 	bl	801893c <AcquireBluetoothStackInformation>
 8023f40:	6028      	str	r0, [r5, #0]
 8023f42:	b150      	cbz	r0, 8023f5a <AcquireRFCOMMStackInformation+0x26>
 8023f44:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8023f46:	6020      	str	r0, [r4, #0]
 8023f48:	b108      	cbz	r0, 8023f4e <AcquireRFCOMMStackInformation+0x1a>
 8023f4a:	2400      	movs	r4, #0
 8023f4c:	e007      	b.n	8023f5e <AcquireRFCOMMStackInformation+0x2a>
 8023f4e:	f06f 0442 	mvn.w	r4, #66	; 0x42
 8023f52:	6828      	ldr	r0, [r5, #0]
 8023f54:	f7f5 fb26 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8023f58:	e001      	b.n	8023f5e <AcquireRFCOMMStackInformation+0x2a>
 8023f5a:	f06f 0401 	mvn.w	r4, #1
 8023f5e:	4620      	mov	r0, r4
 8023f60:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.RFCOMM_Cleanup:

08023f62 <RFCOMM_Cleanup>:
 8023f62:	b51c      	push	{r2, r3, r4, lr}
 8023f64:	4602      	mov	r2, r0
 8023f66:	a901      	add	r1, sp, #4
 8023f68:	4668      	mov	r0, sp
 8023f6a:	f7ff ffe3 	bl	8023f34 <AcquireRFCOMMStackInformation>
 8023f6e:	2800      	cmp	r0, #0
 8023f70:	d10c      	bne.n	8023f8c <RFCOMM_Cleanup+0x2a>
 8023f72:	9801      	ldr	r0, [sp, #4]
 8023f74:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8023f76:	b101      	cbz	r1, 8023f7a <RFCOMM_Cleanup+0x18>
 8023f78:	4788      	blx	r1
 8023f7a:	9800      	ldr	r0, [sp, #0]
 8023f7c:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8023f7e:	f7ef fa37 	bl	80133f0 <BTPS_FreeMemory>
 8023f82:	9800      	ldr	r0, [sp, #0]
 8023f84:	2100      	movs	r1, #0
 8023f86:	6581      	str	r1, [r0, #88]	; 0x58
 8023f88:	f7f5 fb0c 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8023f8c:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.RFCOMM_Initialize:

08023f90 <RFCOMM_Initialize>:
 8023f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f92:	4607      	mov	r7, r0
 8023f94:	f7f4 fcd2 	bl	801893c <AcquireBluetoothStackInformation>
 8023f98:	0004      	movs	r4, r0
 8023f9a:	d053      	beq.n	8024044 <RFCOMM_Initialize+0xb4>
 8023f9c:	2058      	movs	r0, #88	; 0x58
 8023f9e:	f7ef fa0d 	bl	80133bc <BTPS_AllocateMemory>
 8023fa2:	65a0      	str	r0, [r4, #88]	; 0x58
 8023fa4:	b3f0      	cbz	r0, 8024024 <RFCOMM_Initialize+0x94>
 8023fa6:	466a      	mov	r2, sp
 8023fa8:	2102      	movs	r1, #2
 8023faa:	4638      	mov	r0, r7
 8023fac:	f7f5 fadc 	bl	8019568 <QuerySharedBuffer>
 8023fb0:	0005      	movs	r5, r0
 8023fb2:	d041      	beq.n	8024038 <RFCOMM_Initialize+0xa8>
 8023fb4:	2258      	movs	r2, #88	; 0x58
 8023fb6:	2100      	movs	r1, #0
 8023fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023fba:	f7ef fa80 	bl	80134be <BTPS_MemInitialize>
 8023fbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023fc0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8023fc2:	2600      	movs	r6, #0
 8023fc4:	6408      	str	r0, [r1, #64]	; 0x40
 8023fc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023fc8:	6046      	str	r6, [r0, #4]
 8023fca:	9800      	ldr	r0, [sp, #0]
 8023fcc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8023fd0:	d301      	bcc.n	8023fd6 <RFCOMM_Initialize+0x46>
 8023fd2:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8023fd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023fd8:	6088      	str	r0, [r1, #8]
 8023fda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023fdc:	60c5      	str	r5, [r0, #12]
 8023fde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023fe0:	2001      	movs	r0, #1
 8023fe2:	7408      	strb	r0, [r1, #16]
 8023fe4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8023fe6:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8023fea:	8251      	strh	r1, [r2, #18]
 8023fec:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023fee:	4a17      	ldr	r2, [pc, #92]	; (802404c <RFCOMM_Initialize+0xbc>)
 8023ff0:	7508      	strb	r0, [r1, #20]
 8023ff2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023ff4:	2014      	movs	r0, #20
 8023ff6:	7588      	strb	r0, [r1, #22]
 8023ff8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023ffa:	75c8      	strb	r0, [r1, #23]
 8023ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023ffe:	6186      	str	r6, [r0, #24]
 8024000:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024002:	2006      	movs	r0, #6
 8024004:	61c8      	str	r0, [r1, #28]
 8024006:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8024008:	2002      	movs	r0, #2
 802400a:	6208      	str	r0, [r1, #32]
 802400c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802400e:	2103      	movs	r1, #3
 8024010:	6007      	str	r7, [r0, #0]
 8024012:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024014:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8024016:	f7ff ff5f 	bl	8023ed8 <_L2CA_Register_PSM>
 802401a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802401c:	2800      	cmp	r0, #0
 802401e:	6048      	str	r0, [r1, #4]
 8024020:	dd03      	ble.n	802402a <RFCOMM_Initialize+0x9a>
 8024022:	e000      	b.n	8024026 <RFCOMM_Initialize+0x96>
 8024024:	e008      	b.n	8024038 <RFCOMM_Initialize+0xa8>
 8024026:	2500      	movs	r5, #0
 8024028:	e008      	b.n	802403c <RFCOMM_Initialize+0xac>
 802402a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802402c:	f7ef f9e0 	bl	80133f0 <BTPS_FreeMemory>
 8024030:	f06f 0518 	mvn.w	r5, #24
 8024034:	65a6      	str	r6, [r4, #88]	; 0x58
 8024036:	e001      	b.n	802403c <RFCOMM_Initialize+0xac>
 8024038:	f06f 0527 	mvn.w	r5, #39	; 0x27
 802403c:	4620      	mov	r0, r4
 802403e:	f7f5 fab1 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8024042:	e001      	b.n	8024048 <RFCOMM_Initialize+0xb8>
 8024044:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8024048:	4628      	mov	r0, r5
 802404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802404c:	0801e641 	.word	0x0801e641

Disassembly of section i._RFCOMM_Set_System_Parameters:

08024050 <_RFCOMM_Set_System_Parameters>:
 8024050:	b510      	push	{r4, lr}
 8024052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024056:	b1a0      	cbz	r0, 8024082 <_RFCOMM_Set_System_Parameters+0x32>
 8024058:	b199      	cbz	r1, 8024082 <_RFCOMM_Set_System_Parameters+0x32>
 802405a:	884a      	ldrh	r2, [r1, #2]
 802405c:	f240 34e2 	movw	r4, #994	; 0x3e2
 8024060:	3a17      	subs	r2, #23
 8024062:	42a2      	cmp	r2, r4
 8024064:	d815      	bhi.n	8024092 <_RFCOMM_Set_System_Parameters+0x42>
 8024066:	798a      	ldrb	r2, [r1, #6]
 8024068:	3a0a      	subs	r2, #10
 802406a:	2a32      	cmp	r2, #50	; 0x32
 802406c:	d809      	bhi.n	8024082 <_RFCOMM_Set_System_Parameters+0x32>
 802406e:	79ca      	ldrb	r2, [r1, #7]
 8024070:	3a0a      	subs	r2, #10
 8024072:	2a32      	cmp	r2, #50	; 0x32
 8024074:	d805      	bhi.n	8024082 <_RFCOMM_Set_System_Parameters+0x32>
 8024076:	790a      	ldrb	r2, [r1, #4]
 8024078:	b12a      	cbz	r2, 8024086 <_RFCOMM_Set_System_Parameters+0x36>
 802407a:	2a01      	cmp	r2, #1
 802407c:	d003      	beq.n	8024086 <_RFCOMM_Set_System_Parameters+0x36>
 802407e:	2a02      	cmp	r2, #2
 8024080:	d001      	beq.n	8024086 <_RFCOMM_Set_System_Parameters+0x36>
 8024082:	4618      	mov	r0, r3
 8024084:	bd10      	pop	{r4, pc}
 8024086:	680a      	ldr	r2, [r1, #0]
 8024088:	6102      	str	r2, [r0, #16]
 802408a:	6849      	ldr	r1, [r1, #4]
 802408c:	6141      	str	r1, [r0, #20]
 802408e:	2000      	movs	r0, #0
 8024090:	bd10      	pop	{r4, pc}
 8024092:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8024096:	bd10      	pop	{r4, pc}

Disassembly of section i.SCO_Cleanup:

08024098 <SCO_Cleanup>:
 8024098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802409c:	4682      	mov	sl, r0
 802409e:	f7f4 fc4d 	bl	801893c <AcquireBluetoothStackInformation>
 80240a2:	0004      	movs	r4, r0
 80240a4:	d03c      	beq.n	8024120 <SCO_Cleanup+0x88>
 80240a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80240a8:	b3a8      	cbz	r0, 8024116 <SCO_Cleanup+0x7e>
 80240aa:	30dc      	adds	r0, #220	; 0xdc
 80240ac:	f7f5 fdfa 	bl	8019ca4 <FreeCallbackList>
 80240b0:	2500      	movs	r5, #0
 80240b2:	f44f 6970 	mov.w	r9, #3840	; 0xf00
 80240b6:	2728      	movs	r7, #40	; 0x28
 80240b8:	f04f 0854 	mov.w	r8, #84	; 0x54
 80240bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80240be:	ebc5 1605 	rsb	r6, r5, r5, lsl #4
 80240c2:	eb07 0186 	add.w	r1, r7, r6, lsl #2
 80240c6:	5a41      	ldrh	r1, [r0, r1]
 80240c8:	4549      	cmp	r1, r9
 80240ca:	d203      	bcs.n	80240d4 <SCO_Cleanup+0x3c>
 80240cc:	2215      	movs	r2, #21
 80240ce:	4650      	mov	r0, sl
 80240d0:	f7fc f886 	bl	80201e0 <_HCI_Disconnect>
 80240d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80240d6:	eb08 0086 	add.w	r0, r8, r6, lsl #2
 80240da:	5808      	ldr	r0, [r1, r0]
 80240dc:	b108      	cbz	r0, 80240e2 <SCO_Cleanup+0x4a>
 80240de:	f7ef f987 	bl	80133f0 <BTPS_FreeMemory>
 80240e2:	1c6d      	adds	r5, r5, #1
 80240e4:	2d03      	cmp	r5, #3
 80240e6:	d3e9      	bcc.n	80240bc <SCO_Cleanup+0x24>
 80240e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80240ea:	30d8      	adds	r0, #216	; 0xd8
 80240ec:	f7f5 fdd1 	bl	8019c92 <FreeACLLinkList>
 80240f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80240f2:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 80240f6:	2801      	cmp	r0, #1
 80240f8:	d108      	bne.n	802410c <SCO_Cleanup+0x74>
 80240fa:	2100      	movs	r1, #0
 80240fc:	4650      	mov	r0, sl
 80240fe:	f7fb fb19 	bl	801f734 <HCI_Change_SCO_Configuration>
 8024102:	2200      	movs	r2, #0
 8024104:	4611      	mov	r1, r2
 8024106:	4650      	mov	r0, sl
 8024108:	f7fb fb29 	bl	801f75e <HCI_Change_SCO_Configuration_Handles>
 802410c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802410e:	f7ef f96f 	bl	80133f0 <BTPS_FreeMemory>
 8024112:	2000      	movs	r0, #0
 8024114:	64a0      	str	r0, [r4, #72]	; 0x48
 8024116:	4620      	mov	r0, r4
 8024118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802411c:	f7f5 ba42 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 8024120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.SCO_Initialize:

08024124 <SCO_Initialize>:
 8024124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024128:	b088      	sub	sp, #32
 802412a:	4680      	mov	r8, r0
 802412c:	f7f4 fc06 	bl	801893c <AcquireBluetoothStackInformation>
 8024130:	0004      	movs	r4, r0
 8024132:	d07d      	beq.n	8024230 <SCO_Initialize+0x10c>
 8024134:	f44f 7582 	mov.w	r5, #260	; 0x104
 8024138:	4628      	mov	r0, r5
 802413a:	f7ef f93f 	bl	80133bc <BTPS_AllocateMemory>
 802413e:	64a0      	str	r0, [r4, #72]	; 0x48
 8024140:	2800      	cmp	r0, #0
 8024142:	d076      	beq.n	8024232 <SCO_Initialize+0x10e>
 8024144:	462a      	mov	r2, r5
 8024146:	2100      	movs	r1, #0
 8024148:	f7ef f9b9 	bl	80134be <BTPS_MemInitialize>
 802414c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802414e:	4640      	mov	r0, r8
 8024150:	3122      	adds	r1, #34	; 0x22
 8024152:	f7fb fe53 	bl	801fdfc <HCI_Version_Supported>
 8024156:	2600      	movs	r6, #0
 8024158:	f06f 0538 	mvn.w	r5, #56	; 0x38
 802415c:	2800      	cmp	r0, #0
 802415e:	d169      	bne.n	8024234 <SCO_Initialize+0x110>
 8024160:	a901      	add	r1, sp, #4
 8024162:	4640      	mov	r0, r8
 8024164:	f7fc fcaf 	bl	8020ac6 <_HCI_Read_Local_Supported_Features>
 8024168:	2800      	cmp	r0, #0
 802416a:	d1f8      	bne.n	802415e <SCO_Initialize+0x3a>
 802416c:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8024170:	f04f 0701 	mov.w	r7, #1
 8024174:	0701      	lsls	r1, r0, #28
 8024176:	d405      	bmi.n	8024184 <SCO_Initialize+0x60>
 8024178:	f89d 1007 	ldrb.w	r1, [sp, #7]
 802417c:	0609      	lsls	r1, r1, #24
 802417e:	d57d      	bpl.n	802427c <SCO_Initialize+0x158>
 8024180:	0700      	lsls	r0, r0, #28
 8024182:	d520      	bpl.n	80241c6 <SCO_Initialize+0xa2>
 8024184:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024186:	2020      	movs	r0, #32
 8024188:	8288      	strh	r0, [r1, #20]
 802418a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 802418c:	82c7      	strh	r7, [r0, #22]
 802418e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8024192:	06c0      	lsls	r0, r0, #27
 8024194:	d509      	bpl.n	80241aa <SCO_Initialize+0x86>
 8024196:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024198:	8a81      	ldrh	r1, [r0, #20]
 802419a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 802419e:	8281      	strh	r1, [r0, #20]
 80241a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80241a2:	8ac1      	ldrh	r1, [r0, #22]
 80241a4:	f041 0102 	orr.w	r1, r1, #2
 80241a8:	82c1      	strh	r1, [r0, #22]
 80241aa:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80241ae:	0680      	lsls	r0, r0, #26
 80241b0:	d509      	bpl.n	80241c6 <SCO_Initialize+0xa2>
 80241b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80241b4:	8a81      	ldrh	r1, [r0, #20]
 80241b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80241ba:	8281      	strh	r1, [r0, #20]
 80241bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80241be:	8ac1      	ldrh	r1, [r0, #22]
 80241c0:	f041 0104 	orr.w	r1, r1, #4
 80241c4:	82c1      	strh	r1, [r0, #22]
 80241c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80241ca:	0600      	lsls	r0, r0, #24
 80241cc:	d527      	bpl.n	802421e <SCO_Initialize+0xfa>
 80241ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80241d0:	8ac1      	ldrh	r1, [r0, #22]
 80241d2:	f041 0108 	orr.w	r1, r1, #8
 80241d6:	82c1      	strh	r1, [r0, #22]
 80241d8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80241dc:	07c0      	lsls	r0, r0, #31
 80241de:	d003      	beq.n	80241e8 <SCO_Initialize+0xc4>
 80241e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80241e2:	f041 0110 	orr.w	r1, r1, #16
 80241e6:	82c1      	strh	r1, [r0, #22]
 80241e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80241ec:	0780      	lsls	r0, r0, #30
 80241ee:	d504      	bpl.n	80241fa <SCO_Initialize+0xd6>
 80241f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80241f2:	8ac1      	ldrh	r1, [r0, #22]
 80241f4:	f041 0120 	orr.w	r1, r1, #32
 80241f8:	82c1      	strh	r1, [r0, #22]
 80241fa:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80241fe:	0680      	lsls	r0, r0, #26
 8024200:	d504      	bpl.n	802420c <SCO_Initialize+0xe8>
 8024202:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024204:	6901      	ldr	r1, [r0, #16]
 8024206:	f041 0102 	orr.w	r1, r1, #2
 802420a:	6101      	str	r1, [r0, #16]
 802420c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8024210:	0640      	lsls	r0, r0, #25
 8024212:	d504      	bpl.n	802421e <SCO_Initialize+0xfa>
 8024214:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024216:	6901      	ldr	r1, [r0, #16]
 8024218:	f041 0104 	orr.w	r1, r1, #4
 802421c:	6101      	str	r1, [r0, #16]
 802421e:	a804      	add	r0, sp, #16
 8024220:	ab06      	add	r3, sp, #24
 8024222:	9000      	str	r0, [sp, #0]
 8024224:	aa05      	add	r2, sp, #20
 8024226:	4619      	mov	r1, r3
 8024228:	4640      	mov	r0, r8
 802422a:	f7fc fbd1 	bl	80209d0 <_HCI_Read_Buffer_Size>
 802422e:	e002      	b.n	8024236 <SCO_Initialize+0x112>
 8024230:	e080      	b.n	8024334 <SCO_Initialize+0x210>
 8024232:	e079      	b.n	8024328 <SCO_Initialize+0x204>
 8024234:	e073      	b.n	802431e <SCO_Initialize+0x1fa>
 8024236:	b110      	cbz	r0, 802423e <SCO_Initialize+0x11a>
 8024238:	f06f 0513 	mvn.w	r5, #19
 802423c:	e06f      	b.n	802431e <SCO_Initialize+0x1fa>
 802423e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024240:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8024244:	8308      	strh	r0, [r1, #24]
 8024246:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8024248:	f89d 1014 	ldrb.w	r1, [sp, #20]
 802424c:	8351      	strh	r1, [r2, #26]
 802424e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024250:	8388      	strh	r0, [r1, #28]
 8024252:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024254:	83c8      	strh	r0, [r1, #30]
 8024256:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024258:	840e      	strh	r6, [r1, #32]
 802425a:	b170      	cbz	r0, 802427a <SCO_Initialize+0x156>
 802425c:	2154      	movs	r1, #84	; 0x54
 802425e:	4640      	mov	r0, r8
 8024260:	f7fb fad9 	bl	801f816 <HCI_Command_Supported>
 8024264:	2800      	cmp	r0, #0
 8024266:	dd08      	ble.n	802427a <SCO_Initialize+0x156>
 8024268:	aa03      	add	r2, sp, #12
 802426a:	2101      	movs	r1, #1
 802426c:	4640      	mov	r0, r8
 802426e:	f7fb fdeb 	bl	801fe48 <HCI_Write_SCO_Flow_Control_Enable>
 8024272:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8024276:	4308      	orrs	r0, r1
 8024278:	d03b      	beq.n	80242f2 <SCO_Initialize+0x1ce>
 802427a:	e000      	b.n	802427e <SCO_Initialize+0x15a>
 802427c:	e04a      	b.n	8024314 <SCO_Initialize+0x1f0>
 802427e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024280:	8306      	strh	r6, [r0, #24]
 8024282:	4642      	mov	r2, r8
 8024284:	492e      	ldr	r1, [pc, #184]	; (8024340 <SCO_Initialize+0x21c>)
 8024286:	4610      	mov	r0, r2
 8024288:	f7fb fc79 	bl	801fb7e <HCI_Register_Event_Callback>
 802428c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802428e:	f06f 0514 	mvn.w	r5, #20
 8024292:	2800      	cmp	r0, #0
 8024294:	6048      	str	r0, [r1, #4]
 8024296:	dd42      	ble.n	802431e <SCO_Initialize+0x1fa>
 8024298:	4642      	mov	r2, r8
 802429a:	492a      	ldr	r1, [pc, #168]	; (8024344 <SCO_Initialize+0x220>)
 802429c:	4610      	mov	r0, r2
 802429e:	f7fb fc73 	bl	801fb88 <HCI_Register_SCO_Data_Callback>
 80242a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80242a4:	2800      	cmp	r0, #0
 80242a6:	6088      	str	r0, [r1, #8]
 80242a8:	dd39      	ble.n	802431e <SCO_Initialize+0x1fa>
 80242aa:	f88d 600c 	strb.w	r6, [sp, #12]
 80242ae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80242b2:	2228      	movs	r2, #40	; 0x28
 80242b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80242b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80242ba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80242be:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80242c2:	5219      	strh	r1, [r3, r0]
 80242c4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80242c8:	1c40      	adds	r0, r0, #1
 80242ca:	b2c0      	uxtb	r0, r0
 80242cc:	f88d 000c 	strb.w	r0, [sp, #12]
 80242d0:	2803      	cmp	r0, #3
 80242d2:	d3ef      	bcc.n	80242b4 <SCO_Initialize+0x190>
 80242d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80242d6:	f880 70e0 	strb.w	r7, [r0, #224]	; 0xe0
 80242da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80242dc:	f880 6023 	strb.w	r6, [r0, #35]	; 0x23
 80242e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80242e2:	f8c1 8000 	str.w	r8, [r1]
 80242e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80242e8:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 80242ec:	2801      	cmp	r0, #1
 80242ee:	d006      	beq.n	80242fe <SCO_Initialize+0x1da>
 80242f0:	e00e      	b.n	8024310 <SCO_Initialize+0x1ec>
 80242f2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80242f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80242f8:	1e40      	subs	r0, r0, #1
 80242fa:	8408      	strh	r0, [r1, #32]
 80242fc:	e7c1      	b.n	8024282 <SCO_Initialize+0x15e>
 80242fe:	2100      	movs	r1, #0
 8024300:	4640      	mov	r0, r8
 8024302:	f7fb fa17 	bl	801f734 <HCI_Change_SCO_Configuration>
 8024306:	2200      	movs	r2, #0
 8024308:	4611      	mov	r1, r2
 802430a:	4640      	mov	r0, r8
 802430c:	f7fb fa27 	bl	801f75e <HCI_Change_SCO_Configuration_Handles>
 8024310:	2500      	movs	r5, #0
 8024312:	e00b      	b.n	802432c <SCO_Initialize+0x208>
 8024314:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024316:	f7ef f86b 	bl	80133f0 <BTPS_FreeMemory>
 802431a:	64a6      	str	r6, [r4, #72]	; 0x48
 802431c:	e7f8      	b.n	8024310 <SCO_Initialize+0x1ec>
 802431e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024320:	f7ef f866 	bl	80133f0 <BTPS_FreeMemory>
 8024324:	64a6      	str	r6, [r4, #72]	; 0x48
 8024326:	e001      	b.n	802432c <SCO_Initialize+0x208>
 8024328:	f06f 0527 	mvn.w	r5, #39	; 0x27
 802432c:	4620      	mov	r0, r4
 802432e:	f7f5 f939 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8024332:	e001      	b.n	8024338 <SCO_Initialize+0x214>
 8024334:	f06f 0501 	mvn.w	r5, #1
 8024338:	b008      	add	sp, #32
 802433a:	4628      	mov	r0, r5
 802433c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024340:	0801e51d 	.word	0x0801e51d
 8024344:	08024349 	.word	0x08024349

Disassembly of section i._HCI_SCO_Callback:

08024348 <_HCI_SCO_Callback>:
 8024348:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802434c:	001e      	movs	r6, r3
 802434e:	e9dd 570a 	ldrd	r5, r7, [sp, #40]	; 0x28
 8024352:	4690      	mov	r8, r2
 8024354:	4689      	mov	r9, r1
 8024356:	4682      	mov	sl, r0
 8024358:	d018      	beq.n	802438c <_HCI_SCO_Callback+0x44>
 802435a:	2d00      	cmp	r5, #0
 802435c:	d016      	beq.n	802438c <_HCI_SCO_Callback+0x44>
 802435e:	f7f4 faed 	bl	801893c <AcquireBluetoothStackInformation>
 8024362:	0004      	movs	r4, r0
 8024364:	d012      	beq.n	802438c <_HCI_SCO_Callback+0x44>
 8024366:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8024368:	b158      	cbz	r0, 8024382 <_HCI_SCO_Callback+0x3a>
 802436a:	f8d0 c100 	ldr.w	ip, [r0, #256]	; 0x100
 802436e:	f1bc 0f00 	cmp.w	ip, #0
 8024372:	d006      	beq.n	8024382 <_HCI_SCO_Callback+0x3a>
 8024374:	e9cd 5700 	strd	r5, r7, [sp]
 8024378:	4633      	mov	r3, r6
 802437a:	4642      	mov	r2, r8
 802437c:	4649      	mov	r1, r9
 802437e:	4650      	mov	r0, sl
 8024380:	47e0      	blx	ip
 8024382:	4620      	mov	r0, r4
 8024384:	e8bd 47fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024388:	f7f5 b90c 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 802438c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.AcquireSDPStackInformation:

08024390 <AcquireSDPStackInformation>:
 8024390:	b510      	push	{r4, lr}
 8024392:	4604      	mov	r4, r0
 8024394:	4608      	mov	r0, r1
 8024396:	f7f4 fad1 	bl	801893c <AcquireBluetoothStackInformation>
 802439a:	6020      	str	r0, [r4, #0]
 802439c:	b140      	cbz	r0, 80243b0 <AcquireSDPStackInformation+0x20>
 802439e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80243a0:	b109      	cbz	r1, 80243a6 <AcquireSDPStackInformation+0x16>
 80243a2:	2400      	movs	r4, #0
 80243a4:	e006      	b.n	80243b4 <AcquireSDPStackInformation+0x24>
 80243a6:	f06f 0431 	mvn.w	r4, #49	; 0x31
 80243aa:	f7f5 f8fb 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80243ae:	e001      	b.n	80243b4 <AcquireSDPStackInformation+0x24>
 80243b0:	f06f 0401 	mvn.w	r4, #1
 80243b4:	4620      	mov	r0, r4
 80243b6:	bd10      	pop	{r4, pc}

Disassembly of section i.AddServiceRecordEntry:

080243b8 <AddServiceRecordEntry>:
 80243b8:	b508      	push	{r3, lr}
 80243ba:	4603      	mov	r3, r0
 80243bc:	9100      	str	r1, [sp, #0]
 80243be:	2208      	movs	r2, #8
 80243c0:	2100      	movs	r1, #0
 80243c2:	2004      	movs	r0, #4
 80243c4:	f7f4 fb74 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 80243c8:	bd08      	pop	{r3, pc}

Disassembly of section i.CalculateAttributeRequestParameters:

080243ca <CalculateAttributeRequestParameters>:
 80243ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80243cc:	4606      	mov	r6, r0
 80243ce:	e9dd 5c05 	ldrd	r5, ip, [sp, #20]
 80243d2:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 80243d6:	440a      	add	r2, r1
 80243d8:	2000      	movs	r0, #0
 80243da:	3209      	adds	r2, #9
 80243dc:	802e      	strh	r6, [r5, #0]
 80243de:	4296      	cmp	r6, r2
 80243e0:	d900      	bls.n	80243e4 <CalculateAttributeRequestParameters+0x1a>
 80243e2:	802a      	strh	r2, [r5, #0]
 80243e4:	882a      	ldrh	r2, [r5, #0]
 80243e6:	3109      	adds	r1, #9
 80243e8:	b289      	uxth	r1, r1
 80243ea:	1a51      	subs	r1, r2, r1
 80243ec:	f8cc 1000 	str.w	r1, [ip]
 80243f0:	7819      	ldrb	r1, [r3, #0]
 80243f2:	b191      	cbz	r1, 802441a <CalculateAttributeRequestParameters+0x50>
 80243f4:	2908      	cmp	r1, #8
 80243f6:	d10e      	bne.n	8024416 <CalculateAttributeRequestParameters+0x4c>
 80243f8:	7859      	ldrb	r1, [r3, #1]
 80243fa:	f8d3 2002 	ldr.w	r2, [r3, #2]
 80243fe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8024402:	6021      	str	r1, [r4, #0]
 8024404:	7959      	ldrb	r1, [r3, #5]
 8024406:	f8d3 2006 	ldr.w	r2, [r3, #6]
 802440a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 802440e:	6039      	str	r1, [r7, #0]
 8024410:	6822      	ldr	r2, [r4, #0]
 8024412:	4291      	cmp	r1, r2
 8024414:	d900      	bls.n	8024418 <CalculateAttributeRequestParameters+0x4e>
 8024416:	2005      	movs	r0, #5
 8024418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802441a:	2100      	movs	r1, #0
 802441c:	6021      	str	r1, [r4, #0]
 802441e:	6039      	str	r1, [r7, #0]
 8024420:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section i.CalculateDataTypeLength:

08024422 <CalculateDataTypeLength>:
 8024422:	b510      	push	{r4, lr}
 8024424:	0002      	movs	r2, r0
 8024426:	d046      	beq.n	80244b6 <CalculateDataTypeLength+0x94>
 8024428:	b381      	cbz	r1, 802448c <CalculateDataTypeLength+0x6a>
 802442a:	780b      	ldrb	r3, [r1, #0]
 802442c:	f003 0007 	and.w	r0, r3, #7
 8024430:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024434:	10db      	asrs	r3, r3, #3
 8024436:	2b09      	cmp	r3, #9
 8024438:	d23d      	bcs.n	80244b6 <CalculateDataTypeLength+0x94>
 802443a:	e8df f003 	tbb	[pc, r3]
 802443e:	0705      	.short	0x0705
 8024440:	0d1b1307 	.word	0x0d1b1307
 8024444:	001b1b1b 	.word	0x001b1b1b
 8024448:	2001      	movs	r0, #1
 802444a:	e032      	b.n	80244b2 <CalculateDataTypeLength+0x90>
 802444c:	b120      	cbz	r0, 8024458 <CalculateDataTypeLength+0x36>
 802444e:	2801      	cmp	r0, #1
 8024450:	d004      	beq.n	802445c <CalculateDataTypeLength+0x3a>
 8024452:	2802      	cmp	r0, #2
 8024454:	d12f      	bne.n	80244b6 <CalculateDataTypeLength+0x94>
 8024456:	e003      	b.n	8024460 <CalculateDataTypeLength+0x3e>
 8024458:	2002      	movs	r0, #2
 802445a:	e02a      	b.n	80244b2 <CalculateDataTypeLength+0x90>
 802445c:	2003      	movs	r0, #3
 802445e:	e028      	b.n	80244b2 <CalculateDataTypeLength+0x90>
 8024460:	2005      	movs	r0, #5
 8024462:	e026      	b.n	80244b2 <CalculateDataTypeLength+0x90>
 8024464:	2801      	cmp	r0, #1
 8024466:	d0f9      	beq.n	802445c <CalculateDataTypeLength+0x3a>
 8024468:	2802      	cmp	r0, #2
 802446a:	d0f9      	beq.n	8024460 <CalculateDataTypeLength+0x3e>
 802446c:	2804      	cmp	r0, #4
 802446e:	d122      	bne.n	80244b6 <CalculateDataTypeLength+0x94>
 8024470:	2011      	movs	r0, #17
 8024472:	e01e      	b.n	80244b2 <CalculateDataTypeLength+0x90>
 8024474:	2805      	cmp	r0, #5
 8024476:	d004      	beq.n	8024482 <CalculateDataTypeLength+0x60>
 8024478:	2806      	cmp	r0, #6
 802447a:	d008      	beq.n	802448e <CalculateDataTypeLength+0x6c>
 802447c:	2807      	cmp	r0, #7
 802447e:	d11a      	bne.n	80244b6 <CalculateDataTypeLength+0x94>
 8024480:	e00c      	b.n	802449c <CalculateDataTypeLength+0x7a>
 8024482:	2a02      	cmp	r2, #2
 8024484:	d317      	bcc.n	80244b6 <CalculateDataTypeLength+0x94>
 8024486:	7848      	ldrb	r0, [r1, #1]
 8024488:	1c80      	adds	r0, r0, #2
 802448a:	e011      	b.n	80244b0 <CalculateDataTypeLength+0x8e>
 802448c:	e013      	b.n	80244b6 <CalculateDataTypeLength+0x94>
 802448e:	2a03      	cmp	r2, #3
 8024490:	d311      	bcc.n	80244b6 <CalculateDataTypeLength+0x94>
 8024492:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 8024496:	ba40      	rev16	r0, r0
 8024498:	1cc0      	adds	r0, r0, #3
 802449a:	e009      	b.n	80244b0 <CalculateDataTypeLength+0x8e>
 802449c:	2a05      	cmp	r2, #5
 802449e:	d30a      	bcc.n	80244b6 <CalculateDataTypeLength+0x94>
 80244a0:	f8d1 0001 	ldr.w	r0, [r1, #1]
 80244a4:	7909      	ldrb	r1, [r1, #4]
 80244a6:	ba00      	rev	r0, r0
 80244a8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80244ac:	4308      	orrs	r0, r1
 80244ae:	1d40      	adds	r0, r0, #5
 80244b0:	b108      	cbz	r0, 80244b6 <CalculateDataTypeLength+0x94>
 80244b2:	4290      	cmp	r0, r2
 80244b4:	d900      	bls.n	80244b8 <CalculateDataTypeLength+0x96>
 80244b6:	2000      	movs	r0, #0
 80244b8:	bd10      	pop	{r4, pc}

Disassembly of section i.CleanupSDPConnection:

080244ba <CleanupSDPConnection>:
 80244ba:	b570      	push	{r4, r5, r6, lr}
 80244bc:	460c      	mov	r4, r1
 80244be:	6909      	ldr	r1, [r1, #16]
 80244c0:	4616      	mov	r6, r2
 80244c2:	4605      	mov	r5, r0
 80244c4:	b111      	cbz	r1, 80244cc <CleanupSDPConnection+0x12>
 80244c6:	6828      	ldr	r0, [r5, #0]
 80244c8:	f7f5 f9e4 	bl	8019894 <BTPS_StopTimer>
 80244cc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80244d0:	b120      	cbz	r0, 80244dc <CleanupSDPConnection+0x22>
 80244d2:	b11e      	cbz	r6, 80244dc <CleanupSDPConnection+0x22>
 80244d4:	88e1      	ldrh	r1, [r4, #6]
 80244d6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80244d8:	f7ff fc0f 	bl	8023cfa <_L2CA_Disconnect_Request>
 80244dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80244de:	b118      	cbz	r0, 80244e8 <CleanupSDPConnection+0x2e>
 80244e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80244e2:	b108      	cbz	r0, 80244e8 <CleanupSDPConnection+0x2e>
 80244e4:	f7ee ff84 	bl	80133f0 <BTPS_FreeMemory>
 80244e8:	4620      	mov	r0, r4
 80244ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80244ee:	f7f4 bbf2 	b.w	8018cd6 <BSC_FreeGenericListEntryMemory>

Disassembly of section i.CompareServiceRecordWithServiceList:

080244f2 <CompareServiceRecordWithServiceList>:
 80244f2:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244f6:	b08b      	sub	sp, #44	; 0x2c
 80244f8:	4699      	mov	r9, r3
 80244fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80244fc:	4692      	mov	sl, r2
 80244fe:	2800      	cmp	r0, #0
 8024500:	d077      	beq.n	80245f2 <CompareServiceRecordWithServiceList+0x100>
 8024502:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024504:	f000 ffb4 	bl	8025470 <ServiceAttributeListValid>
 8024508:	2800      	cmp	r0, #0
 802450a:	d0f9      	beq.n	8024500 <CompareServiceRecordWithServiceList+0xe>
 802450c:	f1ba 0f00 	cmp.w	sl, #0
 8024510:	d0f6      	beq.n	8024500 <CompareServiceRecordWithServiceList+0xe>
 8024512:	f1b9 0f00 	cmp.w	r9, #0
 8024516:	d0f3      	beq.n	8024500 <CompareServiceRecordWithServiceList+0xe>
 8024518:	2700      	movs	r7, #0
 802451a:	46b8      	mov	r8, r7
 802451c:	2601      	movs	r6, #1
 802451e:	46bb      	mov	fp, r7
 8024520:	e0d9      	b.n	80246d6 <CompareServiceRecordWithServiceList+0x1e4>
 8024522:	2300      	movs	r3, #0
 8024524:	e0cd      	b.n	80246c2 <CompareServiceRecordWithServiceList+0x1d0>
 8024526:	2500      	movs	r5, #0
 8024528:	462e      	mov	r6, r5
 802452a:	e0c5      	b.n	80246b8 <CompareServiceRecordWithServiceList+0x1c6>
 802452c:	6920      	ldr	r0, [r4, #16]
 802452e:	6861      	ldr	r1, [r4, #4]
 8024530:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8024534:	4288      	cmp	r0, r1
 8024536:	d228      	bcs.n	802458a <CompareServiceRecordWithServiceList+0x98>
 8024538:	68e1      	ldr	r1, [r4, #12]
 802453a:	2210      	movs	r2, #16
 802453c:	5c08      	ldrb	r0, [r1, r0]
 802453e:	f88d b004 	strb.w	fp, [sp, #4]
 8024542:	f88d b005 	strb.w	fp, [sp, #5]
 8024546:	f88d 2006 	strb.w	r2, [sp, #6]
 802454a:	2280      	movs	r2, #128	; 0x80
 802454c:	f88d 2008 	strb.w	r2, [sp, #8]
 8024550:	f88d b009 	strb.w	fp, [sp, #9]
 8024554:	f88d b00a 	strb.w	fp, [sp, #10]
 8024558:	f88d 200b 	strb.w	r2, [sp, #11]
 802455c:	225f      	movs	r2, #95	; 0x5f
 802455e:	f88d 200c 	strb.w	r2, [sp, #12]
 8024562:	229b      	movs	r2, #155	; 0x9b
 8024564:	f88d 200d 	strb.w	r2, [sp, #13]
 8024568:	2234      	movs	r2, #52	; 0x34
 802456a:	f88d 200e 	strb.w	r2, [sp, #14]
 802456e:	22fb      	movs	r2, #251	; 0xfb
 8024570:	4659      	mov	r1, fp
 8024572:	f8cd b000 	str.w	fp, [sp]
 8024576:	f88d b007 	strb.w	fp, [sp, #7]
 802457a:	f88d 200f 	strb.w	r2, [sp, #15]
 802457e:	2819      	cmp	r0, #25
 8024580:	d004      	beq.n	802458c <CompareServiceRecordWithServiceList+0x9a>
 8024582:	281a      	cmp	r0, #26
 8024584:	d015      	beq.n	80245b2 <CompareServiceRecordWithServiceList+0xc0>
 8024586:	281c      	cmp	r0, #28
 8024588:	d034      	beq.n	80245f4 <CompareServiceRecordWithServiceList+0x102>
 802458a:	e090      	b.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 802458c:	f88d 1000 	strb.w	r1, [sp]
 8024590:	f88d 1001 	strb.w	r1, [sp, #1]
 8024594:	6920      	ldr	r0, [r4, #16]
 8024596:	68e1      	ldr	r1, [r4, #12]
 8024598:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 802459c:	4408      	add	r0, r1
 802459e:	7840      	ldrb	r0, [r0, #1]
 80245a0:	f88d 0002 	strb.w	r0, [sp, #2]
 80245a4:	6920      	ldr	r0, [r4, #16]
 80245a6:	68e1      	ldr	r1, [r4, #12]
 80245a8:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80245ac:	4408      	add	r0, r1
 80245ae:	7880      	ldrb	r0, [r0, #2]
 80245b0:	e01c      	b.n	80245ec <CompareServiceRecordWithServiceList+0xfa>
 80245b2:	6920      	ldr	r0, [r4, #16]
 80245b4:	68e2      	ldr	r2, [r4, #12]
 80245b6:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
 80245ba:	4411      	add	r1, r2
 80245bc:	7849      	ldrb	r1, [r1, #1]
 80245be:	f88d 1000 	strb.w	r1, [sp]
 80245c2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80245c6:	68e1      	ldr	r1, [r4, #12]
 80245c8:	4408      	add	r0, r1
 80245ca:	7880      	ldrb	r0, [r0, #2]
 80245cc:	f88d 0001 	strb.w	r0, [sp, #1]
 80245d0:	6920      	ldr	r0, [r4, #16]
 80245d2:	68e1      	ldr	r1, [r4, #12]
 80245d4:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80245d8:	4408      	add	r0, r1
 80245da:	78c0      	ldrb	r0, [r0, #3]
 80245dc:	f88d 0002 	strb.w	r0, [sp, #2]
 80245e0:	6920      	ldr	r0, [r4, #16]
 80245e2:	68e1      	ldr	r1, [r4, #12]
 80245e4:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80245e8:	4408      	add	r0, r1
 80245ea:	7900      	ldrb	r0, [r0, #4]
 80245ec:	f88d 0003 	strb.w	r0, [sp, #3]
 80245f0:	e00a      	b.n	8024608 <CompareServiceRecordWithServiceList+0x116>
 80245f2:	e07c      	b.n	80246ee <CompareServiceRecordWithServiceList+0x1fc>
 80245f4:	6920      	ldr	r0, [r4, #16]
 80245f6:	68e1      	ldr	r1, [r4, #12]
 80245f8:	2210      	movs	r2, #16
 80245fa:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80245fe:	4401      	add	r1, r0
 8024600:	4668      	mov	r0, sp
 8024602:	1c49      	adds	r1, r1, #1
 8024604:	f7ee ff57 	bl	80134b6 <BTPS_MemCopy>
 8024608:	eb09 1007 	add.w	r0, r9, r7, lsl #4
 802460c:	f89d 1000 	ldrb.w	r1, [sp]
 8024610:	7802      	ldrb	r2, [r0, #0]
 8024612:	4291      	cmp	r1, r2
 8024614:	d14b      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024616:	f89d 1001 	ldrb.w	r1, [sp, #1]
 802461a:	7842      	ldrb	r2, [r0, #1]
 802461c:	4291      	cmp	r1, r2
 802461e:	d146      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024620:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8024624:	7882      	ldrb	r2, [r0, #2]
 8024626:	4291      	cmp	r1, r2
 8024628:	d141      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 802462a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 802462e:	78c2      	ldrb	r2, [r0, #3]
 8024630:	4291      	cmp	r1, r2
 8024632:	d13c      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024634:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8024638:	7902      	ldrb	r2, [r0, #4]
 802463a:	4291      	cmp	r1, r2
 802463c:	d137      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 802463e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8024642:	7942      	ldrb	r2, [r0, #5]
 8024644:	4291      	cmp	r1, r2
 8024646:	d132      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024648:	f89d 1006 	ldrb.w	r1, [sp, #6]
 802464c:	7982      	ldrb	r2, [r0, #6]
 802464e:	4291      	cmp	r1, r2
 8024650:	d12d      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024652:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8024656:	79c2      	ldrb	r2, [r0, #7]
 8024658:	4291      	cmp	r1, r2
 802465a:	d128      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 802465c:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8024660:	7a02      	ldrb	r2, [r0, #8]
 8024662:	4291      	cmp	r1, r2
 8024664:	d123      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024666:	f89d 1009 	ldrb.w	r1, [sp, #9]
 802466a:	7a42      	ldrb	r2, [r0, #9]
 802466c:	4291      	cmp	r1, r2
 802466e:	d11e      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024670:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8024674:	7a82      	ldrb	r2, [r0, #10]
 8024676:	4291      	cmp	r1, r2
 8024678:	d119      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 802467a:	f89d 100b 	ldrb.w	r1, [sp, #11]
 802467e:	7ac2      	ldrb	r2, [r0, #11]
 8024680:	4291      	cmp	r1, r2
 8024682:	d114      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024684:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8024688:	7b02      	ldrb	r2, [r0, #12]
 802468a:	4291      	cmp	r1, r2
 802468c:	d10f      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 802468e:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8024692:	7b42      	ldrb	r2, [r0, #13]
 8024694:	4291      	cmp	r1, r2
 8024696:	d10a      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 8024698:	f89d 100e 	ldrb.w	r1, [sp, #14]
 802469c:	7b82      	ldrb	r2, [r0, #14]
 802469e:	4291      	cmp	r1, r2
 80246a0:	d105      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 80246a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80246a6:	7bc0      	ldrb	r0, [r0, #15]
 80246a8:	4281      	cmp	r1, r0
 80246aa:	d100      	bne.n	80246ae <CompareServiceRecordWithServiceList+0x1bc>
 80246ac:	2601      	movs	r6, #1
 80246ae:	1c6d      	adds	r5, r5, #1
 80246b0:	b116      	cbz	r6, 80246b8 <CompareServiceRecordWithServiceList+0x1c6>
 80246b2:	f108 0801 	add.w	r8, r8, #1
 80246b6:	e00c      	b.n	80246d2 <CompareServiceRecordWithServiceList+0x1e0>
 80246b8:	68a0      	ldr	r0, [r4, #8]
 80246ba:	42a8      	cmp	r0, r5
 80246bc:	f63f af36 	bhi.w	802452c <CompareServiceRecordWithServiceList+0x3a>
 80246c0:	4623      	mov	r3, r4
 80246c2:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 80246c6:	aa04      	add	r2, sp, #16
 80246c8:	f000 f87c 	bl	80247c4 <GetNextServiceAttribute>
 80246cc:	0004      	movs	r4, r0
 80246ce:	f47f af2a 	bne.w	8024526 <CompareServiceRecordWithServiceList+0x34>
 80246d2:	1c7f      	adds	r7, r7, #1
 80246d4:	b116      	cbz	r6, 80246dc <CompareServiceRecordWithServiceList+0x1ea>
 80246d6:	4557      	cmp	r7, sl
 80246d8:	f4ff af23 	bcc.w	8024522 <CompareServiceRecordWithServiceList+0x30>
 80246dc:	45d0      	cmp	r8, sl
 80246de:	d103      	bne.n	80246e8 <CompareServiceRecordWithServiceList+0x1f6>
 80246e0:	2000      	movs	r0, #0
 80246e2:	b00f      	add	sp, #60	; 0x3c
 80246e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80246e8:	f06f 0001 	mvn.w	r0, #1
 80246ec:	e7f9      	b.n	80246e2 <CompareServiceRecordWithServiceList+0x1f0>
 80246ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80246f2:	e7f6      	b.n	80246e2 <CompareServiceRecordWithServiceList+0x1f0>

Disassembly of section i.DeleteConnectionInfoEntryCID:

080246f4 <DeleteConnectionInfoEntryCID>:
 80246f4:	b503      	push	{r0, r1, lr}
 80246f6:	b081      	sub	sp, #4
 80246f8:	2340      	movs	r3, #64	; 0x40
 80246fa:	9000      	str	r0, [sp, #0]
 80246fc:	2206      	movs	r2, #6
 80246fe:	a902      	add	r1, sp, #8
 8024700:	2003      	movs	r0, #3
 8024702:	f7f4 fa3b 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8024706:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DispatchSDPConnectionEvent:

08024708 <DispatchSDPConnectionEvent>:
 8024708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802470a:	f88d 2000 	strb.w	r2, [sp]
 802470e:	2206      	movs	r2, #6
 8024710:	f8ad 2002 	strh.w	r2, [sp, #2]
 8024714:	aa02      	add	r2, sp, #8
 8024716:	9201      	str	r2, [sp, #4]
 8024718:	e9d1 2100 	ldrd	r2, r1, [r1]
 802471c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8024720:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 8024724:	6804      	ldr	r4, [r0, #0]
 8024726:	4669      	mov	r1, sp
 8024728:	4620      	mov	r0, r4
 802472a:	4798      	blx	r3
 802472c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

Disassembly of section i.FormatResponsePDUHeaderAndSend:

0802472e <FormatResponsePDUHeaderAndSend>:
 802472e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024732:	461f      	mov	r7, r3
 8024734:	e9dd 5306 	ldrd	r5, r3, [sp, #24]
 8024738:	4606      	mov	r6, r0
 802473a:	7019      	strb	r1, [r3, #0]
 802473c:	709a      	strb	r2, [r3, #2]
 802473e:	0a10      	lsrs	r0, r2, #8
 8024740:	7058      	strb	r0, [r3, #1]
 8024742:	711f      	strb	r7, [r3, #4]
 8024744:	0a38      	lsrs	r0, r7, #8
 8024746:	70d8      	strb	r0, [r3, #3]
 8024748:	1d7f      	adds	r7, r7, #5
 802474a:	2401      	movs	r4, #1
 802474c:	b2ba      	uxth	r2, r7
 802474e:	4629      	mov	r1, r5
 8024750:	4630      	mov	r0, r6
 8024752:	f7ff facb 	bl	8023cec <_L2CA_Data_Write>
 8024756:	b120      	cbz	r0, 8024762 <FormatResponsePDUHeaderAndSend+0x34>
 8024758:	4629      	mov	r1, r5
 802475a:	4630      	mov	r0, r6
 802475c:	f7ff facd 	bl	8023cfa <_L2CA_Disconnect_Request>
 8024760:	2400      	movs	r4, #0
 8024762:	4620      	mov	r0, r4
 8024764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FreeL2CAPConnectionInfoList:

08024768 <FreeL2CAPConnectionInfoList>:
 8024768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802476c:	460f      	mov	r7, r1
 802476e:	0006      	movs	r6, r0
 8024770:	d00f      	beq.n	8024792 <FreeL2CAPConnectionInfoList+0x2a>
 8024772:	6834      	ldr	r4, [r6, #0]
 8024774:	e009      	b.n	802478a <FreeL2CAPConnectionInfoList+0x22>
 8024776:	4625      	mov	r5, r4
 8024778:	68e4      	ldr	r4, [r4, #12]
 802477a:	b11f      	cbz	r7, 8024784 <FreeL2CAPConnectionInfoList+0x1c>
 802477c:	88e9      	ldrh	r1, [r5, #6]
 802477e:	4638      	mov	r0, r7
 8024780:	f7ff fabb 	bl	8023cfa <_L2CA_Disconnect_Request>
 8024784:	4628      	mov	r0, r5
 8024786:	f7f4 faa6 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 802478a:	2c00      	cmp	r4, #0
 802478c:	d1f3      	bne.n	8024776 <FreeL2CAPConnectionInfoList+0xe>
 802478e:	2000      	movs	r0, #0
 8024790:	6030      	str	r0, [r6, #0]
 8024792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FreeServiceAttributeList:

08024796 <FreeServiceAttributeList>:
 8024796:	2114      	movs	r1, #20
 8024798:	f7f4 ba8e 	b.w	8018cb8 <BSC_FreeGenericListEntryList>

Disassembly of section i.FreeServiceRecordList:

0802479c <FreeServiceRecordList>:
 802479c:	b570      	push	{r4, r5, r6, lr}
 802479e:	0006      	movs	r6, r0
 80247a0:	d00f      	beq.n	80247c2 <FreeServiceRecordList+0x26>
 80247a2:	6834      	ldr	r4, [r6, #0]
 80247a4:	e009      	b.n	80247ba <FreeServiceRecordList+0x1e>
 80247a6:	4625      	mov	r5, r4
 80247a8:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80247ac:	b110      	cbz	r0, 80247b4 <FreeServiceRecordList+0x18>
 80247ae:	1d28      	adds	r0, r5, #4
 80247b0:	f7ff fff1 	bl	8024796 <FreeServiceAttributeList>
 80247b4:	4628      	mov	r0, r5
 80247b6:	f7f4 fa8e 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80247ba:	2c00      	cmp	r4, #0
 80247bc:	d1f3      	bne.n	80247a6 <FreeServiceRecordList+0xa>
 80247be:	2000      	movs	r0, #0
 80247c0:	6030      	str	r0, [r6, #0]
 80247c2:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.GetNextServiceAttribute:

080247c4 <GetNextServiceAttribute>:
 80247c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80247c8:	461e      	mov	r6, r3
 80247ca:	4614      	mov	r4, r2
 80247cc:	460f      	mov	r7, r1
 80247ce:	2500      	movs	r5, #0
 80247d0:	b360      	cbz	r0, 802482c <GetNextServiceAttribute+0x68>
 80247d2:	4608      	mov	r0, r1
 80247d4:	f000 fe4c 	bl	8025470 <ServiceAttributeListValid>
 80247d8:	b340      	cbz	r0, 802482c <GetNextServiceAttribute+0x68>
 80247da:	b33c      	cbz	r4, 802482c <GetNextServiceAttribute+0x68>
 80247dc:	6838      	ldr	r0, [r7, #0]
 80247de:	b110      	cbz	r0, 80247e6 <GetNextServiceAttribute+0x22>
 80247e0:	b376      	cbz	r6, 8024840 <GetNextServiceAttribute+0x7c>
 80247e2:	6975      	ldr	r5, [r6, #20]
 80247e4:	e02d      	b.n	8024842 <GetNextServiceAttribute+0x7e>
 80247e6:	4f18      	ldr	r7, [pc, #96]	; (8024848 <GetNextServiceAttribute+0x84>)
 80247e8:	b156      	cbz	r6, 8024800 <GetNextServiceAttribute+0x3c>
 80247ea:	8831      	ldrh	r1, [r6, #0]
 80247ec:	2000      	movs	r0, #0
 80247ee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80247f2:	f837 2022 	ldrh.w	r2, [r7, r2, lsl #2]
 80247f6:	428a      	cmp	r2, r1
 80247f8:	d115      	bne.n	8024826 <GetNextServiceAttribute+0x62>
 80247fa:	1c46      	adds	r6, r0, #1
 80247fc:	2e03      	cmp	r6, #3
 80247fe:	d220      	bcs.n	8024842 <GetNextServiceAttribute+0x7e>
 8024800:	2218      	movs	r2, #24
 8024802:	2100      	movs	r1, #0
 8024804:	4620      	mov	r0, r4
 8024806:	f7ee fe5a 	bl	80134be <BTPS_MemInitialize>
 802480a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 802480e:	f837 0021 	ldrh.w	r0, [r7, r1, lsl #2]
 8024812:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8024816:	8020      	strh	r0, [r4, #0]
 8024818:	684a      	ldr	r2, [r1, #4]
 802481a:	6062      	str	r2, [r4, #4]
 802481c:	6889      	ldr	r1, [r1, #8]
 802481e:	60e1      	str	r1, [r4, #12]
 8024820:	2801      	cmp	r0, #1
 8024822:	d004      	beq.n	802482e <GetNextServiceAttribute+0x6a>
 8024824:	e00a      	b.n	802483c <GetNextServiceAttribute+0x78>
 8024826:	1c40      	adds	r0, r0, #1
 8024828:	2803      	cmp	r0, #3
 802482a:	d3e0      	bcc.n	80247ee <GetNextServiceAttribute+0x2a>
 802482c:	e009      	b.n	8024842 <GetNextServiceAttribute+0x7e>
 802482e:	2001      	movs	r0, #1
 8024830:	60a0      	str	r0, [r4, #8]
 8024832:	f104 0014 	add.w	r0, r4, #20
 8024836:	2102      	movs	r1, #2
 8024838:	6120      	str	r0, [r4, #16]
 802483a:	82a1      	strh	r1, [r4, #20]
 802483c:	4625      	mov	r5, r4
 802483e:	e000      	b.n	8024842 <GetNextServiceAttribute+0x7e>
 8024840:	687d      	ldr	r5, [r7, #4]
 8024842:	4628      	mov	r0, r5
 8024844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024848:	08039790 	.word	0x08039790

Disassembly of section i.NormalizeUUID:

0802484c <NormalizeUUID>:
 802484c:	b430      	push	{r4, r5}
 802484e:	4613      	mov	r3, r2
 8024850:	4602      	mov	r2, r0
 8024852:	2000      	movs	r0, #0
 8024854:	7018      	strb	r0, [r3, #0]
 8024856:	7058      	strb	r0, [r3, #1]
 8024858:	7098      	strb	r0, [r3, #2]
 802485a:	70d8      	strb	r0, [r3, #3]
 802485c:	7118      	strb	r0, [r3, #4]
 802485e:	7158      	strb	r0, [r3, #5]
 8024860:	2410      	movs	r4, #16
 8024862:	719c      	strb	r4, [r3, #6]
 8024864:	71d8      	strb	r0, [r3, #7]
 8024866:	2480      	movs	r4, #128	; 0x80
 8024868:	721c      	strb	r4, [r3, #8]
 802486a:	7258      	strb	r0, [r3, #9]
 802486c:	7298      	strb	r0, [r3, #10]
 802486e:	72dc      	strb	r4, [r3, #11]
 8024870:	205f      	movs	r0, #95	; 0x5f
 8024872:	7318      	strb	r0, [r3, #12]
 8024874:	209b      	movs	r0, #155	; 0x9b
 8024876:	7358      	strb	r0, [r3, #13]
 8024878:	2034      	movs	r0, #52	; 0x34
 802487a:	7398      	strb	r0, [r3, #14]
 802487c:	20fb      	movs	r0, #251	; 0xfb
 802487e:	73d8      	strb	r0, [r3, #15]
 8024880:	2a0f      	cmp	r2, #15
 8024882:	d006      	beq.n	8024892 <NormalizeUUID+0x46>
 8024884:	2a10      	cmp	r2, #16
 8024886:	d008      	beq.n	802489a <NormalizeUUID+0x4e>
 8024888:	bc30      	pop	{r4, r5}
 802488a:	2210      	movs	r2, #16
 802488c:	4618      	mov	r0, r3
 802488e:	f7ee be12 	b.w	80134b6 <BTPS_MemCopy>
 8024892:	7808      	ldrb	r0, [r1, #0]
 8024894:	7098      	strb	r0, [r3, #2]
 8024896:	7848      	ldrb	r0, [r1, #1]
 8024898:	e006      	b.n	80248a8 <NormalizeUUID+0x5c>
 802489a:	7808      	ldrb	r0, [r1, #0]
 802489c:	7018      	strb	r0, [r3, #0]
 802489e:	7848      	ldrb	r0, [r1, #1]
 80248a0:	7058      	strb	r0, [r3, #1]
 80248a2:	7888      	ldrb	r0, [r1, #2]
 80248a4:	7098      	strb	r0, [r3, #2]
 80248a6:	78c8      	ldrb	r0, [r1, #3]
 80248a8:	70d8      	strb	r0, [r3, #3]
 80248aa:	bc30      	pop	{r4, r5}
 80248ac:	4770      	bx	lr

080248ae <NormalizeUUID>:
 80248ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80248b0:	7801      	ldrb	r1, [r0, #0]
 80248b2:	2901      	cmp	r1, #1
 80248b4:	d031      	beq.n	802491a <NormalizeUUID+0x6c>
 80248b6:	21fb      	movs	r1, #251	; 0xfb
 80248b8:	f88d 1000 	strb.w	r1, [sp]
 80248bc:	2134      	movs	r1, #52	; 0x34
 80248be:	f88d 1001 	strb.w	r1, [sp, #1]
 80248c2:	219b      	movs	r1, #155	; 0x9b
 80248c4:	f88d 1002 	strb.w	r1, [sp, #2]
 80248c8:	215f      	movs	r1, #95	; 0x5f
 80248ca:	f88d 1003 	strb.w	r1, [sp, #3]
 80248ce:	2100      	movs	r1, #0
 80248d0:	2280      	movs	r2, #128	; 0x80
 80248d2:	f88d 2004 	strb.w	r2, [sp, #4]
 80248d6:	f88d 1005 	strb.w	r1, [sp, #5]
 80248da:	f88d 1006 	strb.w	r1, [sp, #6]
 80248de:	f88d 2007 	strb.w	r2, [sp, #7]
 80248e2:	f88d 1008 	strb.w	r1, [sp, #8]
 80248e6:	2210      	movs	r2, #16
 80248e8:	f88d 2009 	strb.w	r2, [sp, #9]
 80248ec:	f88d 100a 	strb.w	r1, [sp, #10]
 80248f0:	f88d 100b 	strb.w	r1, [sp, #11]
 80248f4:	9103      	str	r1, [sp, #12]
 80248f6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80248fa:	f88d 200c 	strb.w	r2, [sp, #12]
 80248fe:	7842      	ldrb	r2, [r0, #1]
 8024900:	f88d 200d 	strb.w	r2, [sp, #13]
 8024904:	f88d 100e 	strb.w	r1, [sp, #14]
 8024908:	f88d 100f 	strb.w	r1, [sp, #15]
 802490c:	2101      	movs	r1, #1
 802490e:	f800 1c01 	strb.w	r1, [r0, #-1]
 8024912:	2210      	movs	r2, #16
 8024914:	4669      	mov	r1, sp
 8024916:	f7ef fa34 	bl	8013d82 <__aeabi_memcpy>
 802491a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

Disassembly of section i.ParseAttributeIDList:

0802491c <ParseAttributeIDList>:
 802491c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024920:	461d      	mov	r5, r3
 8024922:	4614      	mov	r4, r2
 8024924:	4688      	mov	r8, r1
 8024926:	0007      	movs	r7, r0
 8024928:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 802492c:	d069      	beq.n	8024a02 <ParseAttributeIDList+0xe6>
 802492e:	f1b8 0f00 	cmp.w	r8, #0
 8024932:	d066      	beq.n	8024a02 <ParseAttributeIDList+0xe6>
 8024934:	b105      	cbz	r5, 8024938 <ParseAttributeIDList+0x1c>
 8024936:	b3ec      	cbz	r4, 80249b4 <ParseAttributeIDList+0x98>
 8024938:	466a      	mov	r2, sp
 802493a:	4641      	mov	r1, r8
 802493c:	4638      	mov	r0, r7
 802493e:	f000 fcb7 	bl	80252b0 <ReadDataElementSequenceLength>
 8024942:	2800      	cmp	r0, #0
 8024944:	db5a      	blt.n	80249fc <ParseAttributeIDList+0xe0>
 8024946:	9a00      	ldr	r2, [sp, #0]
 8024948:	eb00 0c02 	add.w	ip, r0, r2
 802494c:	45bc      	cmp	ip, r7
 802494e:	d852      	bhi.n	80249f6 <ParseAttributeIDList+0xda>
 8024950:	2000      	movs	r0, #0
 8024952:	4601      	mov	r1, r0
 8024954:	46b1      	mov	r9, r6
 8024956:	4637      	mov	r7, r6
 8024958:	f04f 0b01 	mov.w	fp, #1
 802495c:	f06f 0e3f 	mvn.w	lr, #63	; 0x3f
 8024960:	e042      	b.n	80249e8 <ParseAttributeIDList+0xcc>
 8024962:	f818 3002 	ldrb.w	r3, [r8, r2]
 8024966:	ebbb 0fd3 	cmp.w	fp, r3, lsr #3
 802496a:	d141      	bne.n	80249f0 <ParseAttributeIDList+0xd4>
 802496c:	f003 0307 	and.w	r3, r3, #7
 8024970:	2b01      	cmp	r3, #1
 8024972:	d004      	beq.n	802497e <ParseAttributeIDList+0x62>
 8024974:	2b02      	cmp	r3, #2
 8024976:	d004      	beq.n	8024982 <ParseAttributeIDList+0x66>
 8024978:	4670      	mov	r0, lr
 802497a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802497e:	2303      	movs	r3, #3
 8024980:	e000      	b.n	8024984 <ParseAttributeIDList+0x68>
 8024982:	2305      	movs	r3, #5
 8024984:	9300      	str	r3, [sp, #0]
 8024986:	2800      	cmp	r0, #0
 8024988:	d1f7      	bne.n	802497a <ParseAttributeIDList+0x5e>
 802498a:	461e      	mov	r6, r3
 802498c:	eb02 0a06 	add.w	sl, r2, r6
 8024990:	45e2      	cmp	sl, ip
 8024992:	d824      	bhi.n	80249de <ParseAttributeIDList+0xc2>
 8024994:	4442      	add	r2, r8
 8024996:	2e05      	cmp	r6, #5
 8024998:	f8b2 3001 	ldrh.w	r3, [r2, #1]
 802499c:	ba5b      	rev16	r3, r3
 802499e:	d012      	beq.n	80249c6 <ParseAttributeIDList+0xaa>
 80249a0:	461a      	mov	r2, r3
 80249a2:	42bb      	cmp	r3, r7
 80249a4:	dd19      	ble.n	80249da <ParseAttributeIDList+0xbe>
 80249a6:	b1b5      	cbz	r5, 80249d6 <ParseAttributeIDList+0xba>
 80249a8:	1d8f      	adds	r7, r1, #6
 80249aa:	42af      	cmp	r7, r5
 80249ac:	d812      	bhi.n	80249d4 <ParseAttributeIDList+0xb8>
 80249ae:	1867      	adds	r7, r4, r1
 80249b0:	807b      	strh	r3, [r7, #2]
 80249b2:	e000      	b.n	80249b6 <ParseAttributeIDList+0x9a>
 80249b4:	e025      	b.n	8024a02 <ParseAttributeIDList+0xe6>
 80249b6:	2e03      	cmp	r6, #3
 80249b8:	d009      	beq.n	80249ce <ParseAttributeIDList+0xb2>
 80249ba:	429a      	cmp	r2, r3
 80249bc:	d90a      	bls.n	80249d4 <ParseAttributeIDList+0xb8>
 80249be:	f804 b001 	strb.w	fp, [r4, r1]
 80249c2:	80ba      	strh	r2, [r7, #4]
 80249c4:	e007      	b.n	80249d6 <ParseAttributeIDList+0xba>
 80249c6:	f8b2 2003 	ldrh.w	r2, [r2, #3]
 80249ca:	ba52      	rev16	r2, r2
 80249cc:	e7e9      	b.n	80249a2 <ParseAttributeIDList+0x86>
 80249ce:	2300      	movs	r3, #0
 80249d0:	5463      	strb	r3, [r4, r1]
 80249d2:	e000      	b.n	80249d6 <ParseAttributeIDList+0xba>
 80249d4:	4648      	mov	r0, r9
 80249d6:	4617      	mov	r7, r2
 80249d8:	e002      	b.n	80249e0 <ParseAttributeIDList+0xc4>
 80249da:	4648      	mov	r0, r9
 80249dc:	e000      	b.n	80249e0 <ParseAttributeIDList+0xc4>
 80249de:	4670      	mov	r0, lr
 80249e0:	1d89      	adds	r1, r1, #6
 80249e2:	4652      	mov	r2, sl
 80249e4:	2800      	cmp	r0, #0
 80249e6:	d1c8      	bne.n	802497a <ParseAttributeIDList+0x5e>
 80249e8:	4562      	cmp	r2, ip
 80249ea:	d3ba      	bcc.n	8024962 <ParseAttributeIDList+0x46>
 80249ec:	4608      	mov	r0, r1
 80249ee:	e7c4      	b.n	802497a <ParseAttributeIDList+0x5e>
 80249f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
 80249f4:	e7c1      	b.n	802497a <ParseAttributeIDList+0x5e>
 80249f6:	f06f 0040 	mvn.w	r0, #64	; 0x40
 80249fa:	e7be      	b.n	802497a <ParseAttributeIDList+0x5e>
 80249fc:	f06f 0032 	mvn.w	r0, #50	; 0x32
 8024a00:	e7bb      	b.n	802497a <ParseAttributeIDList+0x5e>
 8024a02:	4630      	mov	r0, r6
 8024a04:	e7b9      	b.n	802497a <ParseAttributeIDList+0x5e>

Disassembly of section i.ParseRecordAttributes:

08024a06 <ParseRecordAttributes>:
 8024a06:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a0a:	b08b      	sub	sp, #44	; 0x2c
 8024a0c:	e9dd 7619 	ldrd	r7, r6, [sp, #100]	; 0x64
 8024a10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024a12:	2800      	cmp	r0, #0
 8024a14:	d07d      	beq.n	8024b12 <ParseRecordAttributes+0x10c>
 8024a16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8024a18:	2800      	cmp	r0, #0
 8024a1a:	d07a      	beq.n	8024b12 <ParseRecordAttributes+0x10c>
 8024a1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024a1e:	2800      	cmp	r0, #0
 8024a20:	d077      	beq.n	8024b12 <ParseRecordAttributes+0x10c>
 8024a22:	980e      	ldr	r0, [sp, #56]	; 0x38
 8024a24:	2800      	cmp	r0, #0
 8024a26:	d074      	beq.n	8024b12 <ParseRecordAttributes+0x10c>
 8024a28:	b116      	cbz	r6, 8024a30 <ParseRecordAttributes+0x2a>
 8024a2a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024a2c:	2800      	cmp	r0, #0
 8024a2e:	d070      	beq.n	8024b12 <ParseRecordAttributes+0x10c>
 8024a30:	f04f 0800 	mov.w	r8, #0
 8024a34:	4644      	mov	r4, r8
 8024a36:	46c1      	mov	r9, r8
 8024a38:	4640      	mov	r0, r8
 8024a3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8024a3e:	e076      	b.n	8024b2e <ParseRecordAttributes+0x128>
 8024a40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8024a42:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a46:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8024a4a:	884a      	ldrh	r2, [r1, #2]
 8024a4c:	9208      	str	r2, [sp, #32]
 8024a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024a50:	f812 0010 	ldrb.w	r0, [r2, r0, lsl #1]
 8024a54:	b108      	cbz	r0, 8024a5a <ParseRecordAttributes+0x54>
 8024a56:	8888      	ldrh	r0, [r1, #4]
 8024a58:	e000      	b.n	8024a5c <ParseRecordAttributes+0x56>
 8024a5a:	9808      	ldr	r0, [sp, #32]
 8024a5c:	4683      	mov	fp, r0
 8024a5e:	9808      	ldr	r0, [sp, #32]
 8024a60:	4558      	cmp	r0, fp
 8024a62:	d85b      	bhi.n	8024b1c <ParseRecordAttributes+0x116>
 8024a64:	2300      	movs	r3, #0
 8024a66:	e048      	b.n	8024afa <ParseRecordAttributes+0xf4>
 8024a68:	8828      	ldrh	r0, [r5, #0]
 8024a6a:	9908      	ldr	r1, [sp, #32]
 8024a6c:	4288      	cmp	r0, r1
 8024a6e:	d343      	bcc.n	8024af8 <ParseRecordAttributes+0xf2>
 8024a70:	4558      	cmp	r0, fp
 8024a72:	d841      	bhi.n	8024af8 <ParseRecordAttributes+0xf2>
 8024a74:	6868      	ldr	r0, [r5, #4]
 8024a76:	1cc0      	adds	r0, r0, #3
 8024a78:	9009      	str	r0, [sp, #36]	; 0x24
 8024a7a:	b386      	cbz	r6, 8024ade <ParseRecordAttributes+0xd8>
 8024a7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024a7e:	eb08 0001 	add.w	r0, r8, r1
 8024a82:	42b8      	cmp	r0, r7
 8024a84:	d936      	bls.n	8024af4 <ParseRecordAttributes+0xee>
 8024a86:	eba7 0008 	sub.w	r0, r7, r8
 8024a8a:	2803      	cmp	r0, #3
 8024a8c:	d21c      	bcs.n	8024ac8 <ParseRecordAttributes+0xc2>
 8024a8e:	2109      	movs	r1, #9
 8024a90:	f88d 101c 	strb.w	r1, [sp, #28]
 8024a94:	7829      	ldrb	r1, [r5, #0]
 8024a96:	f88d 101e 	strb.w	r1, [sp, #30]
 8024a9a:	8829      	ldrh	r1, [r5, #0]
 8024a9c:	1b32      	subs	r2, r6, r4
 8024a9e:	0a09      	lsrs	r1, r1, #8
 8024aa0:	f88d 101d 	strb.w	r1, [sp, #29]
 8024aa4:	f1c0 0103 	rsb	r1, r0, #3
 8024aa8:	4291      	cmp	r1, r2
 8024aaa:	d901      	bls.n	8024ab0 <ParseRecordAttributes+0xaa>
 8024aac:	4692      	mov	sl, r2
 8024aae:	e000      	b.n	8024ab2 <ParseRecordAttributes+0xac>
 8024ab0:	468a      	mov	sl, r1
 8024ab2:	a907      	add	r1, sp, #28
 8024ab4:	4401      	add	r1, r0
 8024ab6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024ab8:	4652      	mov	r2, sl
 8024aba:	4420      	add	r0, r4
 8024abc:	f7ee fcfb 	bl	80134b6 <BTPS_MemCopy>
 8024ac0:	4454      	add	r4, sl
 8024ac2:	4457      	add	r7, sl
 8024ac4:	2000      	movs	r0, #0
 8024ac6:	e000      	b.n	8024aca <ParseRecordAttributes+0xc4>
 8024ac8:	1ec0      	subs	r0, r0, #3
 8024aca:	6869      	ldr	r1, [r5, #4]
 8024acc:	b139      	cbz	r1, 8024ade <ParseRecordAttributes+0xd8>
 8024ace:	42a6      	cmp	r6, r4
 8024ad0:	d010      	beq.n	8024af4 <ParseRecordAttributes+0xee>
 8024ad2:	1a09      	subs	r1, r1, r0
 8024ad4:	1b32      	subs	r2, r6, r4
 8024ad6:	4291      	cmp	r1, r2
 8024ad8:	d902      	bls.n	8024ae0 <ParseRecordAttributes+0xda>
 8024ada:	4692      	mov	sl, r2
 8024adc:	e001      	b.n	8024ae2 <ParseRecordAttributes+0xdc>
 8024ade:	e009      	b.n	8024af4 <ParseRecordAttributes+0xee>
 8024ae0:	468a      	mov	sl, r1
 8024ae2:	68e9      	ldr	r1, [r5, #12]
 8024ae4:	4652      	mov	r2, sl
 8024ae6:	4401      	add	r1, r0
 8024ae8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8024aea:	4420      	add	r0, r4
 8024aec:	f7ee fce3 	bl	80134b6 <BTPS_MemCopy>
 8024af0:	4454      	add	r4, sl
 8024af2:	4457      	add	r7, sl
 8024af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024af6:	4488      	add	r8, r1
 8024af8:	462b      	mov	r3, r5
 8024afa:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 8024afe:	466a      	mov	r2, sp
 8024b00:	f7ff fe60 	bl	80247c4 <GetNextServiceAttribute>
 8024b04:	4605      	mov	r5, r0
 8024b06:	f1b9 0f00 	cmp.w	r9, #0
 8024b0a:	db09      	blt.n	8024b20 <ParseRecordAttributes+0x11a>
 8024b0c:	b145      	cbz	r5, 8024b20 <ParseRecordAttributes+0x11a>
 8024b0e:	2e00      	cmp	r6, #0
 8024b10:	e000      	b.n	8024b14 <ParseRecordAttributes+0x10e>
 8024b12:	e017      	b.n	8024b44 <ParseRecordAttributes+0x13e>
 8024b14:	d0a8      	beq.n	8024a68 <ParseRecordAttributes+0x62>
 8024b16:	42b4      	cmp	r4, r6
 8024b18:	d3a6      	bcc.n	8024a68 <ParseRecordAttributes+0x62>
 8024b1a:	e001      	b.n	8024b20 <ParseRecordAttributes+0x11a>
 8024b1c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024b20:	9806      	ldr	r0, [sp, #24]
 8024b22:	1c40      	adds	r0, r0, #1
 8024b24:	9006      	str	r0, [sp, #24]
 8024b26:	f1b9 0f00 	cmp.w	r9, #0
 8024b2a:	db0d      	blt.n	8024b48 <ParseRecordAttributes+0x142>
 8024b2c:	9806      	ldr	r0, [sp, #24]
 8024b2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024b30:	4288      	cmp	r0, r1
 8024b32:	d385      	bcc.n	8024a40 <ParseRecordAttributes+0x3a>
 8024b34:	f1b9 0f00 	cmp.w	r9, #0
 8024b38:	db06      	blt.n	8024b48 <ParseRecordAttributes+0x142>
 8024b3a:	b10e      	cbz	r6, 8024b40 <ParseRecordAttributes+0x13a>
 8024b3c:	46a1      	mov	r9, r4
 8024b3e:	e003      	b.n	8024b48 <ParseRecordAttributes+0x142>
 8024b40:	46c1      	mov	r9, r8
 8024b42:	e001      	b.n	8024b48 <ParseRecordAttributes+0x142>
 8024b44:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024b48:	b00f      	add	sp, #60	; 0x3c
 8024b4a:	4648      	mov	r0, r9
 8024b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ParseServiceSearchPattern:

08024b50 <ParseServiceSearchPattern>:
 8024b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b54:	4699      	mov	r9, r3
 8024b56:	4692      	mov	sl, r2
 8024b58:	4688      	mov	r8, r1
 8024b5a:	0004      	movs	r4, r0
 8024b5c:	d05a      	beq.n	8024c14 <ParseServiceSearchPattern+0xc4>
 8024b5e:	f1b8 0f00 	cmp.w	r8, #0
 8024b62:	d057      	beq.n	8024c14 <ParseServiceSearchPattern+0xc4>
 8024b64:	f1b9 0f00 	cmp.w	r9, #0
 8024b68:	d002      	beq.n	8024b70 <ParseServiceSearchPattern+0x20>
 8024b6a:	f1ba 0f00 	cmp.w	sl, #0
 8024b6e:	d051      	beq.n	8024c14 <ParseServiceSearchPattern+0xc4>
 8024b70:	466a      	mov	r2, sp
 8024b72:	4641      	mov	r1, r8
 8024b74:	4620      	mov	r0, r4
 8024b76:	f000 fb9b 	bl	80252b0 <ReadDataElementSequenceLength>
 8024b7a:	2800      	cmp	r0, #0
 8024b7c:	db47      	blt.n	8024c0e <ParseServiceSearchPattern+0xbe>
 8024b7e:	9900      	ldr	r1, [sp, #0]
 8024b80:	1847      	adds	r7, r0, r1
 8024b82:	42a7      	cmp	r7, r4
 8024b84:	d840      	bhi.n	8024c08 <ParseServiceSearchPattern+0xb8>
 8024b86:	2400      	movs	r4, #0
 8024b88:	4625      	mov	r5, r4
 8024b8a:	f06f 0b3f 	mvn.w	fp, #63	; 0x3f
 8024b8e:	e036      	b.n	8024bfe <ParseServiceSearchPattern+0xae>
 8024b90:	f818 0001 	ldrb.w	r0, [r8, r1]
 8024b94:	2203      	movs	r2, #3
 8024b96:	ebb2 0fd0 	cmp.w	r2, r0, lsr #3
 8024b9a:	d12d      	bne.n	8024bf8 <ParseServiceSearchPattern+0xa8>
 8024b9c:	f000 0007 	and.w	r0, r0, #7
 8024ba0:	2801      	cmp	r0, #1
 8024ba2:	d005      	beq.n	8024bb0 <ParseServiceSearchPattern+0x60>
 8024ba4:	2802      	cmp	r0, #2
 8024ba6:	d006      	beq.n	8024bb6 <ParseServiceSearchPattern+0x66>
 8024ba8:	2804      	cmp	r0, #4
 8024baa:	d007      	beq.n	8024bbc <ParseServiceSearchPattern+0x6c>
 8024bac:	465c      	mov	r4, fp
 8024bae:	e033      	b.n	8024c18 <ParseServiceSearchPattern+0xc8>
 8024bb0:	2603      	movs	r6, #3
 8024bb2:	200f      	movs	r0, #15
 8024bb4:	e004      	b.n	8024bc0 <ParseServiceSearchPattern+0x70>
 8024bb6:	2605      	movs	r6, #5
 8024bb8:	2010      	movs	r0, #16
 8024bba:	e001      	b.n	8024bc0 <ParseServiceSearchPattern+0x70>
 8024bbc:	2611      	movs	r6, #17
 8024bbe:	4630      	mov	r0, r6
 8024bc0:	bb0c      	cbnz	r4, 8024c06 <ParseServiceSearchPattern+0xb6>
 8024bc2:	198a      	adds	r2, r1, r6
 8024bc4:	42ba      	cmp	r2, r7
 8024bc6:	d810      	bhi.n	8024bea <ParseServiceSearchPattern+0x9a>
 8024bc8:	f1b9 0f00 	cmp.w	r9, #0
 8024bcc:	d00e      	beq.n	8024bec <ParseServiceSearchPattern+0x9c>
 8024bce:	f105 0210 	add.w	r2, r5, #16
 8024bd2:	454a      	cmp	r2, r9
 8024bd4:	d806      	bhi.n	8024be4 <ParseServiceSearchPattern+0x94>
 8024bd6:	4441      	add	r1, r8
 8024bd8:	eb0a 0205 	add.w	r2, sl, r5
 8024bdc:	1c49      	adds	r1, r1, #1
 8024bde:	f7ff fe35 	bl	802484c <NormalizeUUID>
 8024be2:	e003      	b.n	8024bec <ParseServiceSearchPattern+0x9c>
 8024be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8024be8:	e000      	b.n	8024bec <ParseServiceSearchPattern+0x9c>
 8024bea:	465c      	mov	r4, fp
 8024bec:	9800      	ldr	r0, [sp, #0]
 8024bee:	3510      	adds	r5, #16
 8024bf0:	4430      	add	r0, r6
 8024bf2:	9000      	str	r0, [sp, #0]
 8024bf4:	b11c      	cbz	r4, 8024bfe <ParseServiceSearchPattern+0xae>
 8024bf6:	e00f      	b.n	8024c18 <ParseServiceSearchPattern+0xc8>
 8024bf8:	f06f 0436 	mvn.w	r4, #54	; 0x36
 8024bfc:	e00c      	b.n	8024c18 <ParseServiceSearchPattern+0xc8>
 8024bfe:	9900      	ldr	r1, [sp, #0]
 8024c00:	42b9      	cmp	r1, r7
 8024c02:	d3c5      	bcc.n	8024b90 <ParseServiceSearchPattern+0x40>
 8024c04:	462c      	mov	r4, r5
 8024c06:	e007      	b.n	8024c18 <ParseServiceSearchPattern+0xc8>
 8024c08:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8024c0c:	e004      	b.n	8024c18 <ParseServiceSearchPattern+0xc8>
 8024c0e:	f06f 0432 	mvn.w	r4, #50	; 0x32
 8024c12:	e001      	b.n	8024c18 <ParseServiceSearchPattern+0xc8>
 8024c14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8024c18:	4620      	mov	r0, r4
 8024c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ProcessConnectionError:

08024c1e <ProcessConnectionError>:
 8024c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c22:	4605      	mov	r5, r0
 8024c24:	4616      	mov	r6, r2
 8024c26:	301c      	adds	r0, #28
 8024c28:	f7ff fd64 	bl	80246f4 <DeleteConnectionInfoEntryCID>
 8024c2c:	0004      	movs	r4, r0
 8024c2e:	d026      	beq.n	8024c7e <ProcessConnectionError+0x60>
 8024c30:	7d20      	ldrb	r0, [r4, #20]
 8024c32:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8024c36:	2803      	cmp	r0, #3
 8024c38:	d106      	bne.n	8024c48 <ProcessConnectionError+0x2a>
 8024c3a:	6928      	ldr	r0, [r5, #16]
 8024c3c:	b120      	cbz	r0, 8024c48 <ProcessConnectionError+0x2a>
 8024c3e:	2202      	movs	r2, #2
 8024c40:	4621      	mov	r1, r4
 8024c42:	4628      	mov	r0, r5
 8024c44:	f7ff fd60 	bl	8024708 <DispatchSDPConnectionEvent>
 8024c48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8024c4a:	b158      	cbz	r0, 8024c64 <ProcessConnectionError+0x46>
 8024c4c:	69a0      	ldr	r0, [r4, #24]
 8024c4e:	b148      	cbz	r0, 8024c64 <ProcessConnectionError+0x46>
 8024c50:	2001      	movs	r0, #1
 8024c52:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
 8024c56:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8024c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024c5a:	69a1      	ldr	r1, [r4, #24]
 8024c5c:	6828      	ldr	r0, [r5, #0]
 8024c5e:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8024c62:	47b8      	blx	r7
 8024c64:	b136      	cbz	r6, 8024c74 <ProcessConnectionError+0x56>
 8024c66:	4621      	mov	r1, r4
 8024c68:	4628      	mov	r0, r5
 8024c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c6e:	2200      	movs	r2, #0
 8024c70:	f7ff bc23 	b.w	80244ba <CleanupSDPConnection>
 8024c74:	4620      	mov	r0, r4
 8024c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c7a:	f7ee bbb9 	b.w	80133f0 <BTPS_FreeMemory>
 8024c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.ProcessSDPConnectionRequest:

08024c82 <ProcessSDPConnectionRequest>:
 8024c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024c84:	460c      	mov	r4, r1
 8024c86:	4606      	mov	r6, r0
 8024c88:	2500      	movs	r5, #0
 8024c8a:	69c2      	ldr	r2, [r0, #28]
 8024c8c:	e022      	b.n	8024cd4 <ProcessSDPConnectionRequest+0x52>
 8024c8e:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
 8024c92:	2803      	cmp	r0, #3
 8024c94:	d01d      	beq.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024c96:	42a2      	cmp	r2, r4
 8024c98:	d01b      	beq.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024c9a:	7d10      	ldrb	r0, [r2, #20]
 8024c9c:	06c0      	lsls	r0, r0, #27
 8024c9e:	d518      	bpl.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024ca0:	7810      	ldrb	r0, [r2, #0]
 8024ca2:	7821      	ldrb	r1, [r4, #0]
 8024ca4:	4288      	cmp	r0, r1
 8024ca6:	d114      	bne.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024ca8:	7850      	ldrb	r0, [r2, #1]
 8024caa:	7861      	ldrb	r1, [r4, #1]
 8024cac:	4288      	cmp	r0, r1
 8024cae:	d110      	bne.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024cb0:	7890      	ldrb	r0, [r2, #2]
 8024cb2:	78a1      	ldrb	r1, [r4, #2]
 8024cb4:	4288      	cmp	r0, r1
 8024cb6:	d10c      	bne.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024cb8:	78d0      	ldrb	r0, [r2, #3]
 8024cba:	78e1      	ldrb	r1, [r4, #3]
 8024cbc:	4288      	cmp	r0, r1
 8024cbe:	d108      	bne.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024cc0:	7910      	ldrb	r0, [r2, #4]
 8024cc2:	7921      	ldrb	r1, [r4, #4]
 8024cc4:	4288      	cmp	r0, r1
 8024cc6:	d104      	bne.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024cc8:	7950      	ldrb	r0, [r2, #5]
 8024cca:	7961      	ldrb	r1, [r4, #5]
 8024ccc:	4288      	cmp	r0, r1
 8024cce:	d100      	bne.n	8024cd2 <ProcessSDPConnectionRequest+0x50>
 8024cd0:	2501      	movs	r5, #1
 8024cd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8024cd4:	b112      	cbz	r2, 8024cdc <ProcessSDPConnectionRequest+0x5a>
 8024cd6:	2d00      	cmp	r5, #0
 8024cd8:	d0d9      	beq.n	8024c8e <ProcessSDPConnectionRequest+0xc>
 8024cda:	e011      	b.n	8024d00 <ProcessSDPConnectionRequest+0x7e>
 8024cdc:	b985      	cbnz	r5, 8024d00 <ProcessSDPConnectionRequest+0x7e>
 8024cde:	2002      	movs	r0, #2
 8024ce0:	9000      	str	r0, [sp, #0]
 8024ce2:	88e2      	ldrh	r2, [r4, #6]
 8024ce4:	7a21      	ldrb	r1, [r4, #8]
 8024ce6:	2301      	movs	r3, #1
 8024ce8:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8024cea:	f7fe ff71 	bl	8023bd0 <_L2CA_Connect_Response>
 8024cee:	b148      	cbz	r0, 8024d04 <ProcessSDPConnectionRequest+0x82>
 8024cf0:	88e1      	ldrh	r1, [r4, #6]
 8024cf2:	f106 001c 	add.w	r0, r6, #28
 8024cf6:	f7ff fcfd 	bl	80246f4 <DeleteConnectionInfoEntryCID>
 8024cfa:	b108      	cbz	r0, 8024d00 <ProcessSDPConnectionRequest+0x7e>
 8024cfc:	f7f3 ffeb 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8024d00:	4628      	mov	r0, r5
 8024d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d04:	2200      	movs	r2, #0
 8024d06:	4621      	mov	r1, r4
 8024d08:	4630      	mov	r0, r6
 8024d0a:	f7ff fcfd 	bl	8024708 <DispatchSDPConnectionEvent>
 8024d0e:	e7f7      	b.n	8024d00 <ProcessSDPConnectionRequest+0x7e>

Disassembly of section i.ProcessServiceAttributeRequest:

08024d10 <ProcessServiceAttributeRequest>:
 8024d10:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d14:	b089      	sub	sp, #36	; 0x24
 8024d16:	4693      	mov	fp, r2
 8024d18:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8024d1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8024d20:	0007      	movs	r7, r0
 8024d22:	d078      	beq.n	8024e16 <ProcessServiceAttributeRequest+0x106>
 8024d24:	2900      	cmp	r1, #0
 8024d26:	d0fc      	beq.n	8024d22 <ProcessServiceAttributeRequest+0x12>
 8024d28:	f1bb 0f00 	cmp.w	fp, #0
 8024d2c:	d0f9      	beq.n	8024d22 <ProcessServiceAttributeRequest+0x12>
 8024d2e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024d30:	2800      	cmp	r0, #0
 8024d32:	d0f6      	beq.n	8024d22 <ProcessServiceAttributeRequest+0x12>
 8024d34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024d36:	2800      	cmp	r0, #0
 8024d38:	d0f3      	beq.n	8024d22 <ProcessServiceAttributeRequest+0x12>
 8024d3a:	2a00      	cmp	r2, #0
 8024d3c:	d0f1      	beq.n	8024d22 <ProcessServiceAttributeRequest+0x12>
 8024d3e:	2b00      	cmp	r3, #0
 8024d40:	d0ef      	beq.n	8024d22 <ProcessServiceAttributeRequest+0x12>
 8024d42:	ae08      	add	r6, sp, #32
 8024d44:	ad07      	add	r5, sp, #28
 8024d46:	ac06      	add	r4, sp, #24
 8024d48:	a805      	add	r0, sp, #20
 8024d4a:	e88d 0071 	stmia.w	sp, {r0, r4, r5, r6}
 8024d4e:	8988      	ldrh	r0, [r1, #12]
 8024d50:	2107      	movs	r1, #7
 8024d52:	f7ff fb3a 	bl	80243ca <CalculateAttributeRequestParameters>
 8024d56:	0005      	movs	r5, r0
 8024d58:	d17e      	bne.n	8024e58 <ProcessServiceAttributeRequest+0x148>
 8024d5a:	4641      	mov	r1, r8
 8024d5c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8024d60:	f000 fb50 	bl	8025404 <SearchServiceRecordEntry>
 8024d64:	ea5f 0a00 	movs.w	sl, r0
 8024d68:	d077      	beq.n	8024e5a <ProcessServiceAttributeRequest+0x14a>
 8024d6a:	46a9      	mov	r9, r5
 8024d6c:	f8cd 9008 	str.w	r9, [sp, #8]
 8024d70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8024d74:	f8cd 9000 	str.w	r9, [sp]
 8024d78:	f8cd 9004 	str.w	r9, [sp, #4]
 8024d7c:	4651      	mov	r1, sl
 8024d7e:	4638      	mov	r0, r7
 8024d80:	f7ff fe41 	bl	8024a06 <ParseRecordAttributes>
 8024d84:	ea5f 0800 	movs.w	r8, r0
 8024d88:	d445      	bmi.n	8024e16 <ProcessServiceAttributeRequest+0x106>
 8024d8a:	2200      	movs	r2, #0
 8024d8c:	4611      	mov	r1, r2
 8024d8e:	f000 fba8 	bl	80254e2 <WriteDataElementSequenceHeader>
 8024d92:	4606      	mov	r6, r0
 8024d94:	9808      	ldr	r0, [sp, #32]
 8024d96:	b118      	cbz	r0, 8024da0 <ProcessServiceAttributeRequest+0x90>
 8024d98:	eb08 0106 	add.w	r1, r8, r6
 8024d9c:	4281      	cmp	r1, r0
 8024d9e:	d175      	bne.n	8024e8c <ProcessServiceAttributeRequest+0x17c>
 8024da0:	aa04      	add	r2, sp, #16
 8024da2:	2102      	movs	r1, #2
 8024da4:	6838      	ldr	r0, [r7, #0]
 8024da6:	f7f4 fbdf 	bl	8019568 <QuerySharedBuffer>
 8024daa:	0004      	movs	r4, r0
 8024dac:	d004      	beq.n	8024db8 <ProcessServiceAttributeRequest+0xa8>
 8024dae:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8024db2:	9804      	ldr	r0, [sp, #16]
 8024db4:	4288      	cmp	r0, r1
 8024db6:	d205      	bcs.n	8024dc4 <ProcessServiceAttributeRequest+0xb4>
 8024db8:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8024dbc:	f7ee fafe 	bl	80133bc <BTPS_AllocateMemory>
 8024dc0:	0004      	movs	r4, r0
 8024dc2:	d06f      	beq.n	8024ea4 <ProcessServiceAttributeRequest+0x194>
 8024dc4:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 8024dc8:	4301      	orrs	r1, r0
 8024dca:	d025      	beq.n	8024e18 <ProcessServiceAttributeRequest+0x108>
 8024dcc:	2107      	movs	r1, #7
 8024dce:	9104      	str	r1, [sp, #16]
 8024dd0:	b320      	cbz	r0, 8024e1c <ProcessServiceAttributeRequest+0x10c>
 8024dd2:	f8ad 9014 	strh.w	r9, [sp, #20]
 8024dd6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8024dda:	eb08 0906 	add.w	r9, r8, r6
 8024dde:	eb09 0102 	add.w	r1, r9, r2
 8024de2:	1a0a      	subs	r2, r1, r0
 8024de4:	9906      	ldr	r1, [sp, #24]
 8024de6:	3108      	adds	r1, #8
 8024de8:	428a      	cmp	r2, r1
 8024dea:	d800      	bhi.n	8024dee <ProcessServiceAttributeRequest+0xde>
 8024dec:	9106      	str	r1, [sp, #24]
 8024dee:	9a06      	ldr	r2, [sp, #24]
 8024df0:	b100      	cbz	r0, 8024df4 <ProcessServiceAttributeRequest+0xe4>
 8024df2:	1b80      	subs	r0, r0, r6
 8024df4:	9904      	ldr	r1, [sp, #16]
 8024df6:	9202      	str	r2, [sp, #8]
 8024df8:	4421      	add	r1, r4
 8024dfa:	e9cd 1000 	strd	r1, r0, [sp]
 8024dfe:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8024e02:	4651      	mov	r1, sl
 8024e04:	4638      	mov	r0, r7
 8024e06:	f7ff fdfe 	bl	8024a06 <ParseRecordAttributes>
 8024e0a:	ea5f 0a00 	movs.w	sl, r0
 8024e0e:	d43e      	bmi.n	8024e8e <ProcessServiceAttributeRequest+0x17e>
 8024e10:	9807      	ldr	r0, [sp, #28]
 8024e12:	b148      	cbz	r0, 8024e28 <ProcessServiceAttributeRequest+0x118>
 8024e14:	e00f      	b.n	8024e36 <ProcessServiceAttributeRequest+0x126>
 8024e16:	e049      	b.n	8024eac <ProcessServiceAttributeRequest+0x19c>
 8024e18:	210c      	movs	r1, #12
 8024e1a:	e7d8      	b.n	8024dce <ProcessServiceAttributeRequest+0xbe>
 8024e1c:	9906      	ldr	r1, [sp, #24]
 8024e1e:	f8ad 6014 	strh.w	r6, [sp, #20]
 8024e22:	1fc9      	subs	r1, r1, #7
 8024e24:	9106      	str	r1, [sp, #24]
 8024e26:	e7d6      	b.n	8024dd6 <ProcessServiceAttributeRequest+0xc6>
 8024e28:	9804      	ldr	r0, [sp, #16]
 8024e2a:	2105      	movs	r1, #5
 8024e2c:	1b80      	subs	r0, r0, r6
 8024e2e:	1902      	adds	r2, r0, r4
 8024e30:	4640      	mov	r0, r8
 8024e32:	f000 fb56 	bl	80254e2 <WriteDataElementSequenceHeader>
 8024e36:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8024e3a:	9904      	ldr	r1, [sp, #16]
 8024e3c:	464b      	mov	r3, r9
 8024e3e:	1a09      	subs	r1, r1, r0
 8024e40:	fa10 f08a 	uxtah	r0, r0, sl
 8024e44:	9006      	str	r0, [sp, #24]
 8024e46:	9104      	str	r1, [sp, #16]
 8024e48:	1860      	adds	r0, r4, r1
 8024e4a:	a906      	add	r1, sp, #24
 8024e4c:	9a07      	ldr	r2, [sp, #28]
 8024e4e:	f000 fb18 	bl	8025482 <WriteAttributeRequestContinuationInformation>
 8024e52:	4601      	mov	r1, r0
 8024e54:	9804      	ldr	r0, [sp, #16]
 8024e56:	e001      	b.n	8024e5c <ProcessServiceAttributeRequest+0x14c>
 8024e58:	e02b      	b.n	8024eb2 <ProcessServiceAttributeRequest+0x1a2>
 8024e5a:	e029      	b.n	8024eb0 <ProcessServiceAttributeRequest+0x1a0>
 8024e5c:	1fc0      	subs	r0, r0, #7
 8024e5e:	9004      	str	r0, [sp, #16]
 8024e60:	4420      	add	r0, r4
 8024e62:	9a06      	ldr	r2, [sp, #24]
 8024e64:	7182      	strb	r2, [r0, #6]
 8024e66:	9a04      	ldr	r2, [sp, #16]
 8024e68:	9806      	ldr	r0, [sp, #24]
 8024e6a:	4422      	add	r2, r4
 8024e6c:	0a00      	lsrs	r0, r0, #8
 8024e6e:	7150      	strb	r0, [r2, #5]
 8024e70:	9804      	ldr	r0, [sp, #16]
 8024e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024e74:	4420      	add	r0, r4
 8024e76:	e9cd b000 	strd	fp, r0, [sp]
 8024e7a:	9806      	ldr	r0, [sp, #24]
 8024e7c:	4408      	add	r0, r1
 8024e7e:	1cc0      	adds	r0, r0, #3
 8024e80:	b283      	uxth	r3, r0
 8024e82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8024e84:	2105      	movs	r1, #5
 8024e86:	f7ff fc52 	bl	802472e <FormatResponsePDUHeaderAndSend>
 8024e8a:	e001      	b.n	8024e90 <ProcessServiceAttributeRequest+0x180>
 8024e8c:	e00c      	b.n	8024ea8 <ProcessServiceAttributeRequest+0x198>
 8024e8e:	2503      	movs	r5, #3
 8024e90:	4621      	mov	r1, r4
 8024e92:	6838      	ldr	r0, [r7, #0]
 8024e94:	f7f4 fbbe 	bl	8019614 <VerifySharedBufferPointer>
 8024e98:	b958      	cbnz	r0, 8024eb2 <ProcessServiceAttributeRequest+0x1a2>
 8024e9a:	4620      	mov	r0, r4
 8024e9c:	f7ee faa8 	bl	80133f0 <BTPS_FreeMemory>
 8024ea0:	e007      	b.n	8024eb2 <ProcessServiceAttributeRequest+0x1a2>
 8024ea2:	e7ff      	b.n	8024ea4 <ProcessServiceAttributeRequest+0x194>
 8024ea4:	2506      	movs	r5, #6
 8024ea6:	e004      	b.n	8024eb2 <ProcessServiceAttributeRequest+0x1a2>
 8024ea8:	2505      	movs	r5, #5
 8024eaa:	e002      	b.n	8024eb2 <ProcessServiceAttributeRequest+0x1a2>
 8024eac:	2503      	movs	r5, #3
 8024eae:	e000      	b.n	8024eb2 <ProcessServiceAttributeRequest+0x1a2>
 8024eb0:	2502      	movs	r5, #2
 8024eb2:	b00d      	add	sp, #52	; 0x34
 8024eb4:	4628      	mov	r0, r5
 8024eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ProcessServiceSearchAttributeRequest:

08024eba <ProcessServiceSearchAttributeRequest>:
 8024eba:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ebe:	b08b      	sub	sp, #44	; 0x2c
 8024ec0:	ea5f 0b00 	movs.w	fp, r0
 8024ec4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8024ec8:	d070      	beq.n	8024fac <ProcessServiceSearchAttributeRequest+0xf2>
 8024eca:	2900      	cmp	r1, #0
 8024ecc:	d0fc      	beq.n	8024ec8 <ProcessServiceSearchAttributeRequest+0xe>
 8024ece:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024ed0:	2800      	cmp	r0, #0
 8024ed2:	d0f9      	beq.n	8024ec8 <ProcessServiceSearchAttributeRequest+0xe>
 8024ed4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8024ed6:	2800      	cmp	r0, #0
 8024ed8:	d0f6      	beq.n	8024ec8 <ProcessServiceSearchAttributeRequest+0xe>
 8024eda:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024edc:	2800      	cmp	r0, #0
 8024ede:	d0f3      	beq.n	8024ec8 <ProcessServiceSearchAttributeRequest+0xe>
 8024ee0:	2a00      	cmp	r2, #0
 8024ee2:	d0f1      	beq.n	8024ec8 <ProcessServiceSearchAttributeRequest+0xe>
 8024ee4:	2b00      	cmp	r3, #0
 8024ee6:	d0ef      	beq.n	8024ec8 <ProcessServiceSearchAttributeRequest+0xe>
 8024ee8:	ae09      	add	r6, sp, #36	; 0x24
 8024eea:	ad06      	add	r5, sp, #24
 8024eec:	ac07      	add	r4, sp, #28
 8024eee:	a805      	add	r0, sp, #20
 8024ef0:	e88d 0071 	stmia.w	sp, {r0, r4, r5, r6}
 8024ef4:	8988      	ldrh	r0, [r1, #12]
 8024ef6:	2107      	movs	r1, #7
 8024ef8:	f7ff fa67 	bl	80243ca <CalculateAttributeRequestParameters>
 8024efc:	ea5f 0900 	movs.w	r9, r0
 8024f00:	d16e      	bne.n	8024fe0 <ProcessServiceSearchAttributeRequest+0x126>
 8024f02:	2600      	movs	r6, #0
 8024f04:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
 8024f08:	e019      	b.n	8024f3e <ProcessServiceSearchAttributeRequest+0x84>
 8024f0a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8024f0e:	4621      	mov	r1, r4
 8024f10:	4658      	mov	r0, fp
 8024f12:	f7ff faee 	bl	80244f2 <CompareServiceRecordWithServiceList>
 8024f16:	b988      	cbnz	r0, 8024f3c <ProcessServiceSearchAttributeRequest+0x82>
 8024f18:	2000      	movs	r0, #0
 8024f1a:	9001      	str	r0, [sp, #4]
 8024f1c:	9002      	str	r0, [sp, #8]
 8024f1e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8024f22:	9000      	str	r0, [sp, #0]
 8024f24:	4621      	mov	r1, r4
 8024f26:	4658      	mov	r0, fp
 8024f28:	f7ff fd6d 	bl	8024a06 <ParseRecordAttributes>
 8024f2c:	0005      	movs	r5, r0
 8024f2e:	d005      	beq.n	8024f3c <ProcessServiceSearchAttributeRequest+0x82>
 8024f30:	2200      	movs	r2, #0
 8024f32:	4611      	mov	r1, r2
 8024f34:	f000 fad5 	bl	80254e2 <WriteDataElementSequenceHeader>
 8024f38:	4428      	add	r0, r5
 8024f3a:	4406      	add	r6, r0
 8024f3c:	68a4      	ldr	r4, [r4, #8]
 8024f3e:	2c00      	cmp	r4, #0
 8024f40:	d1e3      	bne.n	8024f0a <ProcessServiceSearchAttributeRequest+0x50>
 8024f42:	2200      	movs	r2, #0
 8024f44:	4611      	mov	r1, r2
 8024f46:	4630      	mov	r0, r6
 8024f48:	f000 facb 	bl	80254e2 <WriteDataElementSequenceHeader>
 8024f4c:	4604      	mov	r4, r0
 8024f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024f50:	b110      	cbz	r0, 8024f58 <ProcessServiceSearchAttributeRequest+0x9e>
 8024f52:	1931      	adds	r1, r6, r4
 8024f54:	4281      	cmp	r1, r0
 8024f56:	d174      	bne.n	8025042 <ProcessServiceSearchAttributeRequest+0x188>
 8024f58:	aa04      	add	r2, sp, #16
 8024f5a:	2102      	movs	r1, #2
 8024f5c:	f8db 0000 	ldr.w	r0, [fp]
 8024f60:	f7f4 fb02 	bl	8019568 <QuerySharedBuffer>
 8024f64:	0007      	movs	r7, r0
 8024f66:	d004      	beq.n	8024f72 <ProcessServiceSearchAttributeRequest+0xb8>
 8024f68:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8024f6c:	9804      	ldr	r0, [sp, #16]
 8024f6e:	4288      	cmp	r0, r1
 8024f70:	d205      	bcs.n	8024f7e <ProcessServiceSearchAttributeRequest+0xc4>
 8024f72:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8024f76:	f7ee fa21 	bl	80133bc <BTPS_AllocateMemory>
 8024f7a:	0007      	movs	r7, r0
 8024f7c:	d07d      	beq.n	802507a <ProcessServiceSearchAttributeRequest+0x1c0>
 8024f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024f80:	9806      	ldr	r0, [sp, #24]
 8024f82:	4301      	orrs	r1, r0
 8024f84:	d013      	beq.n	8024fae <ProcessServiceSearchAttributeRequest+0xf4>
 8024f86:	2507      	movs	r5, #7
 8024f88:	b198      	cbz	r0, 8024fb2 <ProcessServiceSearchAttributeRequest+0xf8>
 8024f8a:	2100      	movs	r1, #0
 8024f8c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8024f90:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8024f94:	eb06 0804 	add.w	r8, r6, r4
 8024f98:	eb08 0102 	add.w	r1, r8, r2
 8024f9c:	1a0a      	subs	r2, r1, r0
 8024f9e:	9907      	ldr	r1, [sp, #28]
 8024fa0:	3108      	adds	r1, #8
 8024fa2:	428a      	cmp	r2, r1
 8024fa4:	d800      	bhi.n	8024fa8 <ProcessServiceSearchAttributeRequest+0xee>
 8024fa6:	9107      	str	r1, [sp, #28]
 8024fa8:	b148      	cbz	r0, 8024fbe <ProcessServiceSearchAttributeRequest+0x104>
 8024faa:	e00e      	b.n	8024fca <ProcessServiceSearchAttributeRequest+0x110>
 8024fac:	e0b0      	b.n	8025110 <ProcessServiceSearchAttributeRequest+0x256>
 8024fae:	250c      	movs	r5, #12
 8024fb0:	e7ea      	b.n	8024f88 <ProcessServiceSearchAttributeRequest+0xce>
 8024fb2:	9907      	ldr	r1, [sp, #28]
 8024fb4:	f8ad 4014 	strh.w	r4, [sp, #20]
 8024fb8:	1fc9      	subs	r1, r1, #7
 8024fba:	9107      	str	r1, [sp, #28]
 8024fbc:	e7e8      	b.n	8024f90 <ProcessServiceSearchAttributeRequest+0xd6>
 8024fbe:	1b28      	subs	r0, r5, r4
 8024fc0:	19c2      	adds	r2, r0, r7
 8024fc2:	2105      	movs	r1, #5
 8024fc4:	4630      	mov	r0, r6
 8024fc6:	f000 fa8c 	bl	80254e2 <WriteDataElementSequenceHeader>
 8024fca:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8024fce:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8024fd2:	9404      	str	r4, [sp, #16]
 8024fd4:	eba5 0806 	sub.w	r8, r5, r6
 8024fd8:	9c07      	ldr	r4, [sp, #28]
 8024fda:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
 8024fde:	e059      	b.n	8025094 <ProcessServiceSearchAttributeRequest+0x1da>
 8024fe0:	e090      	b.n	8025104 <ProcessServiceSearchAttributeRequest+0x24a>
 8024fe2:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8024fe6:	4601      	mov	r1, r0
 8024fe8:	4658      	mov	r0, fp
 8024fea:	f7ff fa82 	bl	80244f2 <CompareServiceRecordWithServiceList>
 8024fee:	bb48      	cbnz	r0, 8025044 <ProcessServiceSearchAttributeRequest+0x18a>
 8024ff0:	2000      	movs	r0, #0
 8024ff2:	9001      	str	r0, [sp, #4]
 8024ff4:	9002      	str	r0, [sp, #8]
 8024ff6:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8024ffa:	9000      	str	r0, [sp, #0]
 8024ffc:	4651      	mov	r1, sl
 8024ffe:	4658      	mov	r0, fp
 8025000:	f7ff fd01 	bl	8024a06 <ParseRecordAttributes>
 8025004:	9000      	str	r0, [sp, #0]
 8025006:	b1e8      	cbz	r0, 8025044 <ProcessServiceSearchAttributeRequest+0x18a>
 8025008:	2200      	movs	r2, #0
 802500a:	4611      	mov	r1, r2
 802500c:	f000 fa69 	bl	80254e2 <WriteDataElementSequenceHeader>
 8025010:	9a04      	ldr	r2, [sp, #16]
 8025012:	4605      	mov	r5, r0
 8025014:	9900      	ldr	r1, [sp, #0]
 8025016:	1950      	adds	r0, r2, r5
 8025018:	1843      	adds	r3, r0, r1
 802501a:	9906      	ldr	r1, [sp, #24]
 802501c:	428b      	cmp	r3, r1
 802501e:	d933      	bls.n	8025088 <ProcessServiceSearchAttributeRequest+0x1ce>
 8025020:	4288      	cmp	r0, r1
 8025022:	d912      	bls.n	802504a <ProcessServiceSearchAttributeRequest+0x190>
 8025024:	42a5      	cmp	r5, r4
 8025026:	d20e      	bcs.n	8025046 <ProcessServiceSearchAttributeRequest+0x18c>
 8025028:	eb08 0006 	add.w	r0, r8, r6
 802502c:	19c2      	adds	r2, r0, r7
 802502e:	2105      	movs	r1, #5
 8025030:	9800      	ldr	r0, [sp, #0]
 8025032:	f000 fa56 	bl	80254e2 <WriteDataElementSequenceHeader>
 8025036:	9804      	ldr	r0, [sp, #16]
 8025038:	1b64      	subs	r4, r4, r5
 802503a:	4428      	add	r0, r5
 802503c:	442e      	add	r6, r5
 802503e:	9004      	str	r0, [sp, #16]
 8025040:	e004      	b.n	802504c <ProcessServiceSearchAttributeRequest+0x192>
 8025042:	e063      	b.n	802510c <ProcessServiceSearchAttributeRequest+0x252>
 8025044:	e024      	b.n	8025090 <ProcessServiceSearchAttributeRequest+0x1d6>
 8025046:	2400      	movs	r4, #0
 8025048:	e022      	b.n	8025090 <ProcessServiceSearchAttributeRequest+0x1d6>
 802504a:	9004      	str	r0, [sp, #16]
 802504c:	b304      	cbz	r4, 8025090 <ProcessServiceSearchAttributeRequest+0x1d6>
 802504e:	9906      	ldr	r1, [sp, #24]
 8025050:	4281      	cmp	r1, r0
 8025052:	d901      	bls.n	8025058 <ProcessServiceSearchAttributeRequest+0x19e>
 8025054:	1a09      	subs	r1, r1, r0
 8025056:	e000      	b.n	802505a <ProcessServiceSearchAttributeRequest+0x1a0>
 8025058:	2100      	movs	r1, #0
 802505a:	4408      	add	r0, r1
 802505c:	9004      	str	r0, [sp, #16]
 802505e:	eb08 0006 	add.w	r0, r8, r6
 8025062:	4438      	add	r0, r7
 8025064:	e88d 0013 	stmia.w	sp, {r0, r1, r4}
 8025068:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 802506c:	4651      	mov	r1, sl
 802506e:	4658      	mov	r0, fp
 8025070:	f7ff fcc9 	bl	8024a06 <ParseRecordAttributes>
 8025074:	2800      	cmp	r0, #0
 8025076:	d0e6      	beq.n	8025046 <ProcessServiceSearchAttributeRequest+0x18c>
 8025078:	e000      	b.n	802507c <ProcessServiceSearchAttributeRequest+0x1c2>
 802507a:	e041      	b.n	8025100 <ProcessServiceSearchAttributeRequest+0x246>
 802507c:	9904      	ldr	r1, [sp, #16]
 802507e:	1a24      	subs	r4, r4, r0
 8025080:	4401      	add	r1, r0
 8025082:	4406      	add	r6, r0
 8025084:	9104      	str	r1, [sp, #16]
 8025086:	e003      	b.n	8025090 <ProcessServiceSearchAttributeRequest+0x1d6>
 8025088:	9800      	ldr	r0, [sp, #0]
 802508a:	4428      	add	r0, r5
 802508c:	4410      	add	r0, r2
 802508e:	9004      	str	r0, [sp, #16]
 8025090:	f8da 0008 	ldr.w	r0, [sl, #8]
 8025094:	f1b9 0f00 	cmp.w	r9, #0
 8025098:	4682      	mov	sl, r0
 802509a:	d127      	bne.n	80250ec <ProcessServiceSearchAttributeRequest+0x232>
 802509c:	ea5f 000a 	movs.w	r0, sl
 80250a0:	d001      	beq.n	80250a6 <ProcessServiceSearchAttributeRequest+0x1ec>
 80250a2:	2c00      	cmp	r4, #0
 80250a4:	d19d      	bne.n	8024fe2 <ProcessServiceSearchAttributeRequest+0x128>
 80250a6:	9807      	ldr	r0, [sp, #28]
 80250a8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80250ac:	1b00      	subs	r0, r0, r4
 80250ae:	4408      	add	r0, r1
 80250b0:	9007      	str	r0, [sp, #28]
 80250b2:	eb07 0008 	add.w	r0, r7, r8
 80250b6:	a907      	add	r1, sp, #28
 80250b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250ba:	9a06      	ldr	r2, [sp, #24]
 80250bc:	f000 f9e1 	bl	8025482 <WriteAttributeRequestContinuationInformation>
 80250c0:	4601      	mov	r1, r0
 80250c2:	f1a8 0007 	sub.w	r0, r8, #7
 80250c6:	4438      	add	r0, r7
 80250c8:	9a07      	ldr	r2, [sp, #28]
 80250ca:	7182      	strb	r2, [r0, #6]
 80250cc:	9a07      	ldr	r2, [sp, #28]
 80250ce:	0a12      	lsrs	r2, r2, #8
 80250d0:	7142      	strb	r2, [r0, #5]
 80250d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80250d4:	e9cd 2000 	strd	r2, r0, [sp]
 80250d8:	9807      	ldr	r0, [sp, #28]
 80250da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80250dc:	4408      	add	r0, r1
 80250de:	1cc0      	adds	r0, r0, #3
 80250e0:	b283      	uxth	r3, r0
 80250e2:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 80250e6:	2107      	movs	r1, #7
 80250e8:	f7ff fb21 	bl	802472e <FormatResponsePDUHeaderAndSend>
 80250ec:	4639      	mov	r1, r7
 80250ee:	f8db 0000 	ldr.w	r0, [fp]
 80250f2:	f7f4 fa8f 	bl	8019614 <VerifySharedBufferPointer>
 80250f6:	b928      	cbnz	r0, 8025104 <ProcessServiceSearchAttributeRequest+0x24a>
 80250f8:	4638      	mov	r0, r7
 80250fa:	f7ee f979 	bl	80133f0 <BTPS_FreeMemory>
 80250fe:	e001      	b.n	8025104 <ProcessServiceSearchAttributeRequest+0x24a>
 8025100:	2006      	movs	r0, #6
 8025102:	4681      	mov	r9, r0
 8025104:	b00f      	add	sp, #60	; 0x3c
 8025106:	4648      	mov	r0, r9
 8025108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802510c:	2005      	movs	r0, #5
 802510e:	e7f8      	b.n	8025102 <ProcessServiceSearchAttributeRequest+0x248>
 8025110:	2003      	movs	r0, #3
 8025112:	e7f6      	b.n	8025102 <ProcessServiceSearchAttributeRequest+0x248>

Disassembly of section i.ProcessServiceSearchRequest:

08025114 <ProcessServiceSearchRequest>:
 8025114:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025118:	b085      	sub	sp, #20
 802511a:	ea5f 0a00 	movs.w	sl, r0
 802511e:	e9dd 8014 	ldrd	r8, r0, [sp, #80]	; 0x50
 8025122:	d07d      	beq.n	8025220 <ProcessServiceSearchRequest+0x10c>
 8025124:	2900      	cmp	r1, #0
 8025126:	d0fc      	beq.n	8025122 <ProcessServiceSearchRequest+0xe>
 8025128:	9a07      	ldr	r2, [sp, #28]
 802512a:	2a00      	cmp	r2, #0
 802512c:	d0f9      	beq.n	8025122 <ProcessServiceSearchRequest+0xe>
 802512e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025130:	2a00      	cmp	r2, #0
 8025132:	d0f6      	beq.n	8025122 <ProcessServiceSearchRequest+0xe>
 8025134:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025136:	2a00      	cmp	r2, #0
 8025138:	d0f3      	beq.n	8025122 <ProcessServiceSearchRequest+0xe>
 802513a:	ea5f 0208 	movs.w	r2, r8
 802513e:	d0f0      	beq.n	8025122 <ProcessServiceSearchRequest+0xe>
 8025140:	2800      	cmp	r0, #0
 8025142:	d0ee      	beq.n	8025122 <ProcessServiceSearchRequest+0xe>
 8025144:	2200      	movs	r2, #0
 8025146:	9202      	str	r2, [sp, #8]
 8025148:	8989      	ldrh	r1, [r1, #12]
 802514a:	4617      	mov	r7, r2
 802514c:	390e      	subs	r1, #14
 802514e:	f3c1 098f 	ubfx	r9, r1, #2, #16
 8025152:	4615      	mov	r5, r2
 8025154:	45c1      	cmp	r9, r8
 8025156:	d300      	bcc.n	802515a <ProcessServiceSearchRequest+0x46>
 8025158:	46c1      	mov	r9, r8
 802515a:	f8da 1008 	ldr.w	r1, [sl, #8]
 802515e:	b28b      	uxth	r3, r1
 8025160:	454b      	cmp	r3, r9
 8025162:	d201      	bcs.n	8025168 <ProcessServiceSearchRequest+0x54>
 8025164:	fa1f f981 	uxth.w	r9, r1
 8025168:	7801      	ldrb	r1, [r0, #0]
 802516a:	b159      	cbz	r1, 8025184 <ProcessServiceSearchRequest+0x70>
 802516c:	2904      	cmp	r1, #4
 802516e:	d107      	bne.n	8025180 <ProcessServiceSearchRequest+0x6c>
 8025170:	f830 1f01 	ldrh.w	r1, [r0, #1]!
 8025174:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8025178:	458b      	cmp	fp, r1
 802517a:	d801      	bhi.n	8025180 <ProcessServiceSearchRequest+0x6c>
 802517c:	4541      	cmp	r1, r8
 802517e:	d003      	beq.n	8025188 <ProcessServiceSearchRequest+0x74>
 8025180:	2005      	movs	r0, #5
 8025182:	e08c      	b.n	802529e <ProcessServiceSearchRequest+0x18a>
 8025184:	f04f 0b00 	mov.w	fp, #0
 8025188:	210e      	movs	r1, #14
 802518a:	eb01 0689 	add.w	r6, r1, r9, lsl #2
 802518e:	aa03      	add	r2, sp, #12
 8025190:	2102      	movs	r1, #2
 8025192:	f8da 0000 	ldr.w	r0, [sl]
 8025196:	f7f4 f9e7 	bl	8019568 <QuerySharedBuffer>
 802519a:	0004      	movs	r4, r0
 802519c:	d002      	beq.n	80251a4 <ProcessServiceSearchRequest+0x90>
 802519e:	9803      	ldr	r0, [sp, #12]
 80251a0:	42b0      	cmp	r0, r6
 80251a2:	d204      	bcs.n	80251ae <ProcessServiceSearchRequest+0x9a>
 80251a4:	4630      	mov	r0, r6
 80251a6:	f7ee f909 	bl	80133bc <BTPS_AllocateMemory>
 80251aa:	0004      	movs	r4, r0
 80251ac:	d076      	beq.n	802529c <ProcessServiceSearchRequest+0x188>
 80251ae:	f8da 6024 	ldr.w	r6, [sl, #36]	; 0x24
 80251b2:	e01c      	b.n	80251ee <ProcessServiceSearchRequest+0xda>
 80251b4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80251b8:	4631      	mov	r1, r6
 80251ba:	4650      	mov	r0, sl
 80251bc:	f7ff f999 	bl	80244f2 <CompareServiceRecordWithServiceList>
 80251c0:	b9a0      	cbnz	r0, 80251ec <ProcessServiceSearchRequest+0xd8>
 80251c2:	1c7f      	adds	r7, r7, #1
 80251c4:	b2bf      	uxth	r7, r7
 80251c6:	455f      	cmp	r7, fp
 80251c8:	d910      	bls.n	80251ec <ProcessServiceSearchRequest+0xd8>
 80251ca:	454d      	cmp	r5, r9
 80251cc:	d20e      	bcs.n	80251ec <ProcessServiceSearchRequest+0xd8>
 80251ce:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 80251d2:	7831      	ldrb	r1, [r6, #0]
 80251d4:	7301      	strb	r1, [r0, #12]
 80251d6:	8831      	ldrh	r1, [r6, #0]
 80251d8:	0a09      	lsrs	r1, r1, #8
 80251da:	72c1      	strb	r1, [r0, #11]
 80251dc:	6831      	ldr	r1, [r6, #0]
 80251de:	0c09      	lsrs	r1, r1, #16
 80251e0:	7281      	strb	r1, [r0, #10]
 80251e2:	6831      	ldr	r1, [r6, #0]
 80251e4:	0e09      	lsrs	r1, r1, #24
 80251e6:	1c6d      	adds	r5, r5, #1
 80251e8:	7241      	strb	r1, [r0, #9]
 80251ea:	b2ad      	uxth	r5, r5
 80251ec:	68b6      	ldr	r6, [r6, #8]
 80251ee:	b10e      	cbz	r6, 80251f4 <ProcessServiceSearchRequest+0xe0>
 80251f0:	4547      	cmp	r7, r8
 80251f2:	d3df      	bcc.n	80251b4 <ProcessServiceSearchRequest+0xa0>
 80251f4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80251f6:	2300      	movs	r3, #0
 80251f8:	2801      	cmp	r0, #1
 80251fa:	d118      	bne.n	802522e <ProcessServiceSearchRequest+0x11a>
 80251fc:	b9bf      	cbnz	r7, 802522e <ProcessServiceSearchRequest+0x11a>
 80251fe:	492b      	ldr	r1, [pc, #172]	; (80252ac <ProcessServiceSearchRequest+0x198>)
 8025200:	2000      	movs	r0, #0
 8025202:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8025204:	5c0e      	ldrb	r6, [r1, r0]
 8025206:	5c12      	ldrb	r2, [r2, r0]
 8025208:	f082 0253 	eor.w	r2, r2, #83	; 0x53
 802520c:	42b2      	cmp	r2, r6
 802520e:	d102      	bne.n	8025216 <ProcessServiceSearchRequest+0x102>
 8025210:	1c40      	adds	r0, r0, #1
 8025212:	2810      	cmp	r0, #16
 8025214:	d3f5      	bcc.n	8025202 <ProcessServiceSearchRequest+0xee>
 8025216:	2810      	cmp	r0, #16
 8025218:	d109      	bne.n	802522e <ProcessServiceSearchRequest+0x11a>
 802521a:	2701      	movs	r7, #1
 802521c:	463d      	mov	r5, r7
 802521e:	e000      	b.n	8025222 <ProcessServiceSearchRequest+0x10e>
 8025220:	e042      	b.n	80252a8 <ProcessServiceSearchRequest+0x194>
 8025222:	20db      	movs	r0, #219	; 0xdb
 8025224:	7320      	strb	r0, [r4, #12]
 8025226:	20f1      	movs	r0, #241	; 0xf1
 8025228:	72e0      	strb	r0, [r4, #11]
 802522a:	72a3      	strb	r3, [r4, #10]
 802522c:	7263      	strb	r3, [r4, #9]
 802522e:	eb0b 0105 	add.w	r1, fp, r5
 8025232:	42b9      	cmp	r1, r7
 8025234:	d20c      	bcs.n	8025250 <ProcessServiceSearchRequest+0x13c>
 8025236:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 802523a:	2204      	movs	r2, #4
 802523c:	7242      	strb	r2, [r0, #9]
 802523e:	f880 800a 	strb.w	r8, [r0, #10]
 8025242:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8025246:	72c2      	strb	r2, [r0, #11]
 8025248:	7301      	strb	r1, [r0, #12]
 802524a:	0a09      	lsrs	r1, r1, #8
 802524c:	7341      	strb	r1, [r0, #13]
 802524e:	e002      	b.n	8025256 <ProcessServiceSearchRequest+0x142>
 8025250:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8025254:	7243      	strb	r3, [r0, #9]
 8025256:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 802525a:	0a39      	lsrs	r1, r7, #8
 802525c:	7a40      	ldrb	r0, [r0, #9]
 802525e:	71a7      	strb	r7, [r4, #6]
 8025260:	7161      	strb	r1, [r4, #5]
 8025262:	7225      	strb	r5, [r4, #8]
 8025264:	0a29      	lsrs	r1, r5, #8
 8025266:	71e1      	strb	r1, [r4, #7]
 8025268:	1c40      	adds	r0, r0, #1
 802526a:	9907      	ldr	r1, [sp, #28]
 802526c:	b2c0      	uxtb	r0, r0
 802526e:	e9cd 1400 	strd	r1, r4, [sp]
 8025272:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8025276:	1d00      	adds	r0, r0, #4
 8025278:	b283      	uxth	r3, r0
 802527a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 802527e:	2103      	movs	r1, #3
 8025280:	9a08      	ldr	r2, [sp, #32]
 8025282:	f7ff fa54 	bl	802472e <FormatResponsePDUHeaderAndSend>
 8025286:	4621      	mov	r1, r4
 8025288:	f8da 0000 	ldr.w	r0, [sl]
 802528c:	f7f4 f9c2 	bl	8019614 <VerifySharedBufferPointer>
 8025290:	b930      	cbnz	r0, 80252a0 <ProcessServiceSearchRequest+0x18c>
 8025292:	4620      	mov	r0, r4
 8025294:	f7ee f8ac 	bl	80133f0 <BTPS_FreeMemory>
 8025298:	e002      	b.n	80252a0 <ProcessServiceSearchRequest+0x18c>
 802529a:	e7ff      	b.n	802529c <ProcessServiceSearchRequest+0x188>
 802529c:	2006      	movs	r0, #6
 802529e:	9002      	str	r0, [sp, #8]
 80252a0:	9802      	ldr	r0, [sp, #8]
 80252a2:	b009      	add	sp, #36	; 0x24
 80252a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252a8:	2003      	movs	r0, #3
 80252aa:	e7f8      	b.n	802529e <ProcessServiceSearchRequest+0x18a>
 80252ac:	08039780 	.word	0x08039780

Disassembly of section i.ReadDataElementSequenceLength:

080252b0 <ReadDataElementSequenceLength>:
 80252b0:	b530      	push	{r4, r5, lr}
 80252b2:	4604      	mov	r4, r0
 80252b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80252b8:	2c02      	cmp	r4, #2
 80252ba:	d317      	bcc.n	80252ec <ReadDataElementSequenceLength+0x3c>
 80252bc:	780b      	ldrb	r3, [r1, #0]
 80252be:	2506      	movs	r5, #6
 80252c0:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 80252c4:	d112      	bne.n	80252ec <ReadDataElementSequenceLength+0x3c>
 80252c6:	f003 0307 	and.w	r3, r3, #7
 80252ca:	2b05      	cmp	r3, #5
 80252cc:	d00f      	beq.n	80252ee <ReadDataElementSequenceLength+0x3e>
 80252ce:	2b06      	cmp	r3, #6
 80252d0:	d010      	beq.n	80252f4 <ReadDataElementSequenceLength+0x44>
 80252d2:	2b07      	cmp	r3, #7
 80252d4:	d10a      	bne.n	80252ec <ReadDataElementSequenceLength+0x3c>
 80252d6:	2c05      	cmp	r4, #5
 80252d8:	d308      	bcc.n	80252ec <ReadDataElementSequenceLength+0x3c>
 80252da:	f8d1 0001 	ldr.w	r0, [r1, #1]
 80252de:	7909      	ldrb	r1, [r1, #4]
 80252e0:	ba00      	rev	r0, r0
 80252e2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80252e6:	4308      	orrs	r0, r1
 80252e8:	2105      	movs	r1, #5
 80252ea:	6011      	str	r1, [r2, #0]
 80252ec:	bd30      	pop	{r4, r5, pc}
 80252ee:	7848      	ldrb	r0, [r1, #1]
 80252f0:	2102      	movs	r1, #2
 80252f2:	e7fa      	b.n	80252ea <ReadDataElementSequenceLength+0x3a>
 80252f4:	2c03      	cmp	r4, #3
 80252f6:	d3f9      	bcc.n	80252ec <ReadDataElementSequenceLength+0x3c>
 80252f8:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 80252fc:	2103      	movs	r1, #3
 80252fe:	ba40      	rev16	r0, r0
 8025300:	e7f3      	b.n	80252ea <ReadDataElementSequenceLength+0x3a>

Disassembly of section i.SDP_Cleanup:

08025302 <SDP_Cleanup>:
 8025302:	b508      	push	{r3, lr}
 8025304:	4601      	mov	r1, r0
 8025306:	4668      	mov	r0, sp
 8025308:	f7ff f842 	bl	8024390 <AcquireSDPStackInformation>
 802530c:	2800      	cmp	r0, #0
 802530e:	d119      	bne.n	8025344 <SDP_Cleanup+0x42>
 8025310:	9800      	ldr	r0, [sp, #0]
 8025312:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8025314:	f101 001c 	add.w	r0, r1, #28
 8025318:	f7fc f8c7 	bl	80214aa <FreeConnectionInfoList>
 802531c:	9800      	ldr	r0, [sp, #0]
 802531e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8025320:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8025322:	3020      	adds	r0, #32
 8025324:	f7ff fa20 	bl	8024768 <FreeL2CAPConnectionInfoList>
 8025328:	9800      	ldr	r0, [sp, #0]
 802532a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 802532c:	3024      	adds	r0, #36	; 0x24
 802532e:	f7ff fa35 	bl	802479c <FreeServiceRecordList>
 8025332:	9800      	ldr	r0, [sp, #0]
 8025334:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8025336:	f7ee f85b 	bl	80133f0 <BTPS_FreeMemory>
 802533a:	9800      	ldr	r0, [sp, #0]
 802533c:	2100      	movs	r1, #0
 802533e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8025340:	f7f4 f930 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8025344:	bd08      	pop	{r3, pc}

Disassembly of section i.SDP_Initialize:

08025348 <SDP_Initialize>:
 8025348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802534c:	4605      	mov	r5, r0
 802534e:	f7f3 faf5 	bl	801893c <AcquireBluetoothStackInformation>
 8025352:	0004      	movs	r4, r0
 8025354:	d044      	beq.n	80253e0 <SDP_Initialize+0x98>
 8025356:	2050      	movs	r0, #80	; 0x50
 8025358:	f7ee f830 	bl	80133bc <BTPS_AllocateMemory>
 802535c:	64e0      	str	r0, [r4, #76]	; 0x4c
 802535e:	b370      	cbz	r0, 80253be <SDP_Initialize+0x76>
 8025360:	2250      	movs	r2, #80	; 0x50
 8025362:	2100      	movs	r1, #0
 8025364:	f7ee f8ab 	bl	80134be <BTPS_MemInitialize>
 8025368:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 802536a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 802536c:	2700      	movs	r7, #0
 802536e:	6388      	str	r0, [r1, #56]	; 0x38
 8025370:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8025372:	7607      	strb	r7, [r0, #24]
 8025374:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8025376:	7307      	strb	r7, [r0, #12]
 8025378:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802537a:	6107      	str	r7, [r0, #16]
 802537c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802537e:	6005      	str	r5, [r0, #0]
 8025380:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8025382:	2001      	movs	r0, #1
 8025384:	6088      	str	r0, [r1, #8]
 8025386:	200c      	movs	r0, #12
 8025388:	f7ee f818 	bl	80133bc <BTPS_AllocateMemory>
 802538c:	0006      	movs	r6, r0
 802538e:	f06f 0541 	mvn.w	r5, #65	; 0x41
 8025392:	d01a      	beq.n	80253ca <SDP_Initialize+0x82>
 8025394:	6037      	str	r7, [r6, #0]
 8025396:	6077      	str	r7, [r6, #4]
 8025398:	60b7      	str	r7, [r6, #8]
 802539a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 802539c:	4631      	mov	r1, r6
 802539e:	3024      	adds	r0, #36	; 0x24
 80253a0:	f7ff f80a 	bl	80243b8 <AddServiceRecordEntry>
 80253a4:	b170      	cbz	r0, 80253c4 <SDP_Initialize+0x7c>
 80253a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80253a8:	4a10      	ldr	r2, [pc, #64]	; (80253ec <SDP_Initialize+0xa4>)
 80253aa:	2101      	movs	r1, #1
 80253ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80253ae:	f7fe fd93 	bl	8023ed8 <_L2CA_Register_PSM>
 80253b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80253b4:	2800      	cmp	r0, #0
 80253b6:	6048      	str	r0, [r1, #4]
 80253b8:	dd02      	ble.n	80253c0 <SDP_Initialize+0x78>
 80253ba:	2500      	movs	r5, #0
 80253bc:	e00c      	b.n	80253d8 <SDP_Initialize+0x90>
 80253be:	e009      	b.n	80253d4 <SDP_Initialize+0x8c>
 80253c0:	f06f 0534 	mvn.w	r5, #52	; 0x34
 80253c4:	4630      	mov	r0, r6
 80253c6:	f7ee f813 	bl	80133f0 <BTPS_FreeMemory>
 80253ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80253cc:	f7ee f810 	bl	80133f0 <BTPS_FreeMemory>
 80253d0:	64e7      	str	r7, [r4, #76]	; 0x4c
 80253d2:	e001      	b.n	80253d8 <SDP_Initialize+0x90>
 80253d4:	f06f 0527 	mvn.w	r5, #39	; 0x27
 80253d8:	4620      	mov	r0, r4
 80253da:	f7f4 f8e3 	bl	80195a4 <ReleaseBluetoothStackInformation>
 80253de:	e001      	b.n	80253e4 <SDP_Initialize+0x9c>
 80253e0:	f06f 0501 	mvn.w	r5, #1
 80253e4:	4628      	mov	r0, r5
 80253e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80253ea:	0000      	.short	0x0000
 80253ec:	0801d5c9 	.word	0x0801d5c9

Disassembly of section i.SearchConnectionInfoEntry:

080253f0 <SearchConnectionInfoEntry>:
 80253f0:	b503      	push	{r0, r1, lr}
 80253f2:	b081      	sub	sp, #4
 80253f4:	2340      	movs	r3, #64	; 0x40
 80253f6:	9000      	str	r0, [sp, #0]
 80253f8:	2206      	movs	r2, #6
 80253fa:	a902      	add	r1, sp, #8
 80253fc:	2003      	movs	r0, #3
 80253fe:	f7f3 fe9c 	bl	801913a <BSC_SearchGenericListEntry>
 8025402:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchServiceRecordEntry:

08025404 <SearchServiceRecordEntry>:
 8025404:	b503      	push	{r0, r1, lr}
 8025406:	b081      	sub	sp, #4
 8025408:	2308      	movs	r3, #8
 802540a:	9000      	str	r0, [sp, #0]
 802540c:	2200      	movs	r2, #0
 802540e:	a902      	add	r1, sp, #8
 8025410:	2004      	movs	r0, #4
 8025412:	f7f3 fe92 	bl	801913a <BSC_SearchGenericListEntry>
 8025416:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SendConnectionResponse:

08025418 <SendConnectionResponse>:
 8025418:	b5f0      	push	{r4, r5, r6, r7, lr}
 802541a:	b091      	sub	sp, #68	; 0x44
 802541c:	4605      	mov	r5, r0
 802541e:	2000      	movs	r0, #0
 8025420:	9000      	str	r0, [sp, #0]
 8025422:	460c      	mov	r4, r1
 8025424:	88ca      	ldrh	r2, [r1, #6]
 8025426:	7a09      	ldrb	r1, [r1, #8]
 8025428:	2300      	movs	r3, #0
 802542a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 802542c:	f7fe fbd0 	bl	8023bd0 <_L2CA_Connect_Response>
 8025430:	0006      	movs	r6, r0
 8025432:	f105 071c 	add.w	r7, r5, #28
 8025436:	d111      	bne.n	802545c <SendConnectionResponse+0x44>
 8025438:	2001      	movs	r0, #1
 802543a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
 802543e:	f8ad 0004 	strh.w	r0, [sp, #4]
 8025442:	f240 30f9 	movw	r0, #1017	; 0x3f9
 8025446:	f8ad 0006 	strh.w	r0, [sp, #6]
 802544a:	88e1      	ldrh	r1, [r4, #6]
 802544c:	ab01      	add	r3, sp, #4
 802544e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8025452:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8025454:	f7fe fab0 	bl	80239b8 <_L2CA_Config_Request>
 8025458:	0006      	movs	r6, r0
 802545a:	d006      	beq.n	802546a <SendConnectionResponse+0x52>
 802545c:	88e1      	ldrh	r1, [r4, #6]
 802545e:	4638      	mov	r0, r7
 8025460:	f7ff f948 	bl	80246f4 <DeleteConnectionInfoEntryCID>
 8025464:	b108      	cbz	r0, 802546a <SendConnectionResponse+0x52>
 8025466:	f7f3 fc36 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 802546a:	b011      	add	sp, #68	; 0x44
 802546c:	4630      	mov	r0, r6
 802546e:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section i.ServiceAttributeListValid:

08025470 <ServiceAttributeListValid>:
 8025470:	b118      	cbz	r0, 802547a <ServiceAttributeListValid+0xa>
 8025472:	6841      	ldr	r1, [r0, #4]
 8025474:	b919      	cbnz	r1, 802547e <ServiceAttributeListValid+0xe>
 8025476:	6800      	ldr	r0, [r0, #0]
 8025478:	b108      	cbz	r0, 802547e <ServiceAttributeListValid+0xe>
 802547a:	2000      	movs	r0, #0
 802547c:	4770      	bx	lr
 802547e:	2001      	movs	r0, #1
 8025480:	4770      	bx	lr

Disassembly of section i.WriteAttributeRequestContinuationInformation:

08025482 <WriteAttributeRequestContinuationInformation>:
 8025482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025484:	680d      	ldr	r5, [r1, #0]
 8025486:	18ac      	adds	r4, r5, r2
 8025488:	429c      	cmp	r4, r3
 802548a:	d304      	bcc.n	8025496 <WriteAttributeRequestContinuationInformation+0x14>
 802548c:	1a9a      	subs	r2, r3, r2
 802548e:	2400      	movs	r4, #0
 8025490:	600a      	str	r2, [r1, #0]
 8025492:	5484      	strb	r4, [r0, r2]
 8025494:	e023      	b.n	80254de <WriteAttributeRequestContinuationInformation+0x5c>
 8025496:	2408      	movs	r4, #8
 8025498:	5544      	strb	r4, [r0, r5]
 802549a:	680e      	ldr	r6, [r1, #0]
 802549c:	1c45      	adds	r5, r0, #1
 802549e:	5573      	strb	r3, [r6, r5]
 80254a0:	680f      	ldr	r7, [r1, #0]
 80254a2:	1c85      	adds	r5, r0, #2
 80254a4:	0a1e      	lsrs	r6, r3, #8
 80254a6:	557e      	strb	r6, [r7, r5]
 80254a8:	680f      	ldr	r7, [r1, #0]
 80254aa:	1cc5      	adds	r5, r0, #3
 80254ac:	0c1e      	lsrs	r6, r3, #16
 80254ae:	557e      	strb	r6, [r7, r5]
 80254b0:	0e1d      	lsrs	r5, r3, #24
 80254b2:	680e      	ldr	r6, [r1, #0]
 80254b4:	1d03      	adds	r3, r0, #4
 80254b6:	54f5      	strb	r5, [r6, r3]
 80254b8:	680b      	ldr	r3, [r1, #0]
 80254ba:	1d46      	adds	r6, r0, #5
 80254bc:	189d      	adds	r5, r3, r2
 80254be:	559d      	strb	r5, [r3, r6]
 80254c0:	680b      	ldr	r3, [r1, #0]
 80254c2:	189d      	adds	r5, r3, r2
 80254c4:	0a2e      	lsrs	r6, r5, #8
 80254c6:	1d85      	adds	r5, r0, #6
 80254c8:	555e      	strb	r6, [r3, r5]
 80254ca:	680b      	ldr	r3, [r1, #0]
 80254cc:	189d      	adds	r5, r3, r2
 80254ce:	0c2e      	lsrs	r6, r5, #16
 80254d0:	1dc5      	adds	r5, r0, #7
 80254d2:	555e      	strb	r6, [r3, r5]
 80254d4:	6809      	ldr	r1, [r1, #0]
 80254d6:	440a      	add	r2, r1
 80254d8:	0e12      	lsrs	r2, r2, #24
 80254da:	3008      	adds	r0, #8
 80254dc:	540a      	strb	r2, [r1, r0]
 80254de:	4620      	mov	r0, r4
 80254e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section i.WriteDataElementSequenceHeader:

080254e2 <WriteDataElementSequenceHeader>:
 80254e2:	b530      	push	{r4, r5, lr}
 80254e4:	4603      	mov	r3, r0
 80254e6:	b2c4      	uxtb	r4, r0
 80254e8:	28ff      	cmp	r0, #255	; 0xff
 80254ea:	d80a      	bhi.n	8025502 <WriteDataElementSequenceHeader+0x20>
 80254ec:	2002      	movs	r0, #2
 80254ee:	2900      	cmp	r1, #0
 80254f0:	d004      	beq.n	80254fc <WriteDataElementSequenceHeader+0x1a>
 80254f2:	2902      	cmp	r1, #2
 80254f4:	d303      	bcc.n	80254fe <WriteDataElementSequenceHeader+0x1c>
 80254f6:	2135      	movs	r1, #53	; 0x35
 80254f8:	7011      	strb	r1, [r2, #0]
 80254fa:	7054      	strb	r4, [r2, #1]
 80254fc:	bd30      	pop	{r4, r5, pc}
 80254fe:	2000      	movs	r0, #0
 8025500:	bd30      	pop	{r4, r5, pc}
 8025502:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8025506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802550a:	d209      	bcs.n	8025520 <WriteDataElementSequenceHeader+0x3e>
 802550c:	2003      	movs	r0, #3
 802550e:	2900      	cmp	r1, #0
 8025510:	d0f6      	beq.n	8025500 <WriteDataElementSequenceHeader+0x1e>
 8025512:	2903      	cmp	r1, #3
 8025514:	d3f3      	bcc.n	80254fe <WriteDataElementSequenceHeader+0x1c>
 8025516:	2136      	movs	r1, #54	; 0x36
 8025518:	7011      	strb	r1, [r2, #0]
 802551a:	7094      	strb	r4, [r2, #2]
 802551c:	7055      	strb	r5, [r2, #1]
 802551e:	bd30      	pop	{r4, r5, pc}
 8025520:	2005      	movs	r0, #5
 8025522:	2900      	cmp	r1, #0
 8025524:	d0fb      	beq.n	802551e <WriteDataElementSequenceHeader+0x3c>
 8025526:	2905      	cmp	r1, #5
 8025528:	d3e9      	bcc.n	80254fe <WriteDataElementSequenceHeader+0x1c>
 802552a:	2107      	movs	r1, #7
 802552c:	7011      	strb	r1, [r2, #0]
 802552e:	7114      	strb	r4, [r2, #4]
 8025530:	70d5      	strb	r5, [r2, #3]
 8025532:	0c19      	lsrs	r1, r3, #16
 8025534:	7091      	strb	r1, [r2, #2]
 8025536:	0e19      	lsrs	r1, r3, #24
 8025538:	7051      	strb	r1, [r2, #1]
 802553a:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.FreePortInformationEntryMemory:

0802553c <FreePortInformationEntryMemory>:
 802553c:	b510      	push	{r4, lr}
 802553e:	0004      	movs	r4, r0
 8025540:	d010      	beq.n	8025564 <FreePortInformationEntryMemory+0x28>
 8025542:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8025544:	b118      	cbz	r0, 802554e <FreePortInformationEntryMemory+0x12>
 8025546:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8025548:	b108      	cbz	r0, 802554e <FreePortInformationEntryMemory+0x12>
 802554a:	f7ed ff51 	bl	80133f0 <BTPS_FreeMemory>
 802554e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025550:	b118      	cbz	r0, 802555a <FreePortInformationEntryMemory+0x1e>
 8025552:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8025554:	b108      	cbz	r0, 802555a <FreePortInformationEntryMemory+0x1e>
 8025556:	f7ed ff4b 	bl	80133f0 <BTPS_FreeMemory>
 802555a:	4620      	mov	r0, r4
 802555c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025560:	f7ed bf46 	b.w	80133f0 <BTPS_FreeMemory>
 8025564:	bd10      	pop	{r4, pc}

Disassembly of section i.FreePortInformationList:

08025566 <FreePortInformationList>:
 8025566:	b570      	push	{r4, r5, r6, lr}
 8025568:	0005      	movs	r5, r0
 802556a:	d009      	beq.n	8025580 <FreePortInformationList+0x1a>
 802556c:	682c      	ldr	r4, [r5, #0]
 802556e:	e003      	b.n	8025578 <FreePortInformationList+0x12>
 8025570:	4620      	mov	r0, r4
 8025572:	6f24      	ldr	r4, [r4, #112]	; 0x70
 8025574:	f7ff ffe2 	bl	802553c <FreePortInformationEntryMemory>
 8025578:	2c00      	cmp	r4, #0
 802557a:	d1f9      	bne.n	8025570 <FreePortInformationList+0xa>
 802557c:	2000      	movs	r0, #0
 802557e:	6028      	str	r0, [r5, #0]
 8025580:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.SPP_Cleanup:

08025582 <SPP_Cleanup>:
 8025582:	b510      	push	{r4, lr}
 8025584:	f7f3 f9da 	bl	801893c <AcquireBluetoothStackInformation>
 8025588:	0004      	movs	r4, r0
 802558a:	d00e      	beq.n	80255aa <SPP_Cleanup+0x28>
 802558c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802558e:	b138      	cbz	r0, 80255a0 <SPP_Cleanup+0x1e>
 8025590:	3010      	adds	r0, #16
 8025592:	f7ff ffe8 	bl	8025566 <FreePortInformationList>
 8025596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025598:	f7ed ff2a 	bl	80133f0 <BTPS_FreeMemory>
 802559c:	2000      	movs	r0, #0
 802559e:	6560      	str	r0, [r4, #84]	; 0x54
 80255a0:	4620      	mov	r0, r4
 80255a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80255a6:	f7f3 bffd 	b.w	80195a4 <ReleaseBluetoothStackInformation>
 80255aa:	bd10      	pop	{r4, pc}

Disassembly of section i.SPP_Initialize:

080255ac <SPP_Initialize>:
 80255ac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80255b0:	4606      	mov	r6, r0
 80255b2:	f7f3 f9c3 	bl	801893c <AcquireBluetoothStackInformation>
 80255b6:	0004      	movs	r4, r0
 80255b8:	d037      	beq.n	802562a <SPP_Initialize+0x7e>
 80255ba:	2028      	movs	r0, #40	; 0x28
 80255bc:	f7ed fefe 	bl	80133bc <BTPS_AllocateMemory>
 80255c0:	6560      	str	r0, [r4, #84]	; 0x54
 80255c2:	b360      	cbz	r0, 802561e <SPP_Initialize+0x72>
 80255c4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80255c6:	6141      	str	r1, [r0, #20]
 80255c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80255ca:	f240 1049 	movw	r0, #329	; 0x149
 80255ce:	2700      	movs	r7, #0
 80255d0:	8088      	strh	r0, [r1, #4]
 80255d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80255d4:	6088      	str	r0, [r1, #8]
 80255d6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80255d8:	f240 30db 	movw	r0, #987	; 0x3db
 80255dc:	60c8      	str	r0, [r1, #12]
 80255de:	2001      	movs	r0, #1
 80255e0:	f88d 0000 	strb.w	r0, [sp]
 80255e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80255e6:	8889      	ldrh	r1, [r1, #4]
 80255e8:	f88d 0004 	strb.w	r0, [sp, #4]
 80255ec:	f88d 7005 	strb.w	r7, [sp, #5]
 80255f0:	2014      	movs	r0, #20
 80255f2:	f8ad 1002 	strh.w	r1, [sp, #2]
 80255f6:	f88d 0006 	strb.w	r0, [sp, #6]
 80255fa:	f88d 0007 	strb.w	r0, [sp, #7]
 80255fe:	4669      	mov	r1, sp
 8025600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025602:	f7fe fd25 	bl	8024050 <_RFCOMM_Set_System_Parameters>
 8025606:	0005      	movs	r5, r0
 8025608:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802560a:	d404      	bmi.n	8025616 <SPP_Initialize+0x6a>
 802560c:	6107      	str	r7, [r0, #16]
 802560e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025610:	2500      	movs	r5, #0
 8025612:	6006      	str	r6, [r0, #0]
 8025614:	e005      	b.n	8025622 <SPP_Initialize+0x76>
 8025616:	f7ed feeb 	bl	80133f0 <BTPS_FreeMemory>
 802561a:	6567      	str	r7, [r4, #84]	; 0x54
 802561c:	e001      	b.n	8025622 <SPP_Initialize+0x76>
 802561e:	f06f 0527 	mvn.w	r5, #39	; 0x27
 8025622:	4620      	mov	r0, r4
 8025624:	f7f3 ffbe 	bl	80195a4 <ReleaseBluetoothStackInformation>
 8025628:	e001      	b.n	802562e <SPP_Initialize+0x82>
 802562a:	f06f 0501 	mvn.w	r5, #1
 802562e:	4628      	mov	r0, r5
 8025630:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.CleanupCertificateModule:

08025634 <CleanupCertificateModule>:
 8025634:	4770      	bx	lr

Disassembly of section i.GetAccess:

08025636 <GetAccess>:
 8025636:	b510      	push	{r4, lr}
 8025638:	f06f 0009 	mvn.w	r0, #9
 802563c:	9c05      	ldr	r4, [sp, #20]
 802563e:	2c00      	cmp	r4, #0
 8025640:	d009      	beq.n	8025656 <GetAccess+0x20>
 8025642:	2218      	movs	r2, #24
 8025644:	2100      	movs	r1, #0
 8025646:	4620      	mov	r0, r4
 8025648:	f7ed ff39 	bl	80134be <BTPS_MemInitialize>
 802564c:	2000      	movs	r0, #0
 802564e:	6020      	str	r0, [r4, #0]
 8025650:	2030      	movs	r0, #48	; 0x30
 8025652:	81a0      	strh	r0, [r4, #12]
 8025654:	2000      	movs	r0, #0
 8025656:	bd10      	pop	{r4, pc}

Disassembly of section i.GetCertCurrentDate:

08025658 <GetCertCurrentDate>:
 8025658:	2000      	movs	r0, #0
 802565a:	4770      	bx	lr

Disassembly of section i.GetCertLength:

0802565c <GetCertLength>:
 802565c:	2001      	movs	r0, #1
 802565e:	4770      	bx	lr

Disassembly of section i.GetCertPtr:

08025660 <GetCertPtr>:
 8025660:	a000      	add	r0, pc, #0	; (adr r0, 8025664 <GetCertPtr+0x4>)
 8025662:	4770      	bx	lr
 8025664:	00000000 	.word	0x00000000

Disassembly of section i.InitializeCertificateModule:

08025668 <InitializeCertificateModule>:
 8025668:	2000      	movs	r0, #0
 802566a:	4770      	bx	lr

Disassembly of section i.AcquireDriverEntry:

0802566c <AcquireDriverEntry>:
 802566c:	b570      	push	{r4, r5, r6, lr}
 802566e:	4615      	mov	r5, r2
 8025670:	460e      	mov	r6, r1
 8025672:	0004      	movs	r4, r0
 8025674:	d023      	beq.n	80256be <AcquireDriverEntry+0x52>
 8025676:	b316      	cbz	r6, 80256be <AcquireDriverEntry+0x52>
 8025678:	b30d      	cbz	r5, 80256be <AcquireDriverEntry+0x52>
 802567a:	f7f3 f9d7 	bl	8018a2c <BSC_AcquireListLock>
 802567e:	b1f0      	cbz	r0, 80256be <AcquireDriverEntry+0x52>
 8025680:	4631      	mov	r1, r6
 8025682:	4620      	mov	r0, r4
 8025684:	f000 fbc4 	bl	8025e10 <SearchDriverEntry>
 8025688:	0004      	movs	r4, r0
 802568a:	d015      	beq.n	80256b8 <AcquireDriverEntry+0x4c>
 802568c:	68e6      	ldr	r6, [r4, #12]
 802568e:	f7f3 fd31 	bl	80190f4 <BSC_ReleaseListLock>
 8025692:	6920      	ldr	r0, [r4, #16]
 8025694:	b130      	cbz	r0, 80256a4 <AcquireDriverEntry+0x38>
 8025696:	f7ed ffd1 	bl	801363c <BTPS_CurrentThreadHandle>
 802569a:	6921      	ldr	r1, [r4, #16]
 802569c:	4288      	cmp	r0, r1
 802569e:	d101      	bne.n	80256a4 <AcquireDriverEntry+0x38>
 80256a0:	2000      	movs	r0, #0
 80256a2:	e007      	b.n	80256b4 <AcquireDriverEntry+0x48>
 80256a4:	b15e      	cbz	r6, 80256be <AcquireDriverEntry+0x52>
 80256a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80256aa:	4630      	mov	r0, r6
 80256ac:	f7ed fdfd 	bl	80132aa <BTPS_WaitMutex>
 80256b0:	b128      	cbz	r0, 80256be <AcquireDriverEntry+0x52>
 80256b2:	2001      	movs	r0, #1
 80256b4:	7028      	strb	r0, [r5, #0]
 80256b6:	e003      	b.n	80256c0 <AcquireDriverEntry+0x54>
 80256b8:	f7f3 fd1c 	bl	80190f4 <BSC_ReleaseListLock>
 80256bc:	e000      	b.n	80256c0 <AcquireDriverEntry+0x54>
 80256be:	2400      	movs	r4, #0
 80256c0:	4620      	mov	r0, r4
 80256c2:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.AddPacketQueueEntry:

080256c4 <AddPacketQueueEntry>:
 80256c4:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 80256c6:	000c      	movs	r4, r1
 80256c8:	d029      	beq.n	802571e <AddPacketQueueEntry+0x5a>
 80256ca:	6821      	ldr	r1, [r4, #0]
 80256cc:	b339      	cbz	r1, 802571e <AddPacketQueueEntry+0x5a>
 80256ce:	2118      	movs	r1, #24
 80256d0:	e9cd 1000 	strd	r1, r0, [sp]
 80256d4:	9402      	str	r4, [sp, #8]
 80256d6:	68a0      	ldr	r0, [r4, #8]
 80256d8:	231c      	movs	r3, #28
 80256da:	2200      	movs	r2, #0
 80256dc:	6840      	ldr	r0, [r0, #4]
 80256de:	2107      	movs	r1, #7
 80256e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80256e4:	3027      	adds	r0, #39	; 0x27
 80256e6:	f7f3 f9ad 	bl	8018a44 <BSC_AddGenericListEntry>
 80256ea:	0005      	movs	r5, r0
 80256ec:	d018      	beq.n	8025720 <AddPacketQueueEntry+0x5c>
 80256ee:	f105 001c 	add.w	r0, r5, #28
 80256f2:	60a8      	str	r0, [r5, #8]
 80256f4:	68a1      	ldr	r1, [r4, #8]
 80256f6:	7809      	ldrb	r1, [r1, #0]
 80256f8:	7729      	strb	r1, [r5, #28]
 80256fa:	68a0      	ldr	r0, [r4, #8]
 80256fc:	6840      	ldr	r0, [r0, #4]
 80256fe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8025702:	68a8      	ldr	r0, [r5, #8]
 8025704:	6042      	str	r2, [r0, #4]
 8025706:	68a1      	ldr	r1, [r4, #8]
 8025708:	68a8      	ldr	r0, [r5, #8]
 802570a:	684b      	ldr	r3, [r1, #4]
 802570c:	2b00      	cmp	r3, #0
 802570e:	da01      	bge.n	8025714 <AddPacketQueueEntry+0x50>
 8025710:	6889      	ldr	r1, [r1, #8]
 8025712:	e000      	b.n	8025716 <AddPacketQueueEntry+0x52>
 8025714:	3108      	adds	r1, #8
 8025716:	3008      	adds	r0, #8
 8025718:	f7ed fecd 	bl	80134b6 <BTPS_MemCopy>
 802571c:	e000      	b.n	8025720 <AddPacketQueueEntry+0x5c>
 802571e:	2500      	movs	r5, #0
 8025720:	4628      	mov	r0, r5
 8025722:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

Disassembly of section i.DeletePacketQueueEntry:

08025724 <DeletePacketQueueEntry>:
 8025724:	b503      	push	{r0, r1, lr}
 8025726:	b081      	sub	sp, #4
 8025728:	2318      	movs	r3, #24
 802572a:	9000      	str	r0, [sp, #0]
 802572c:	2200      	movs	r2, #0
 802572e:	a902      	add	r1, sp, #8
 8025730:	2007      	movs	r0, #7
 8025732:	f7f3 fa23 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8025736:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DispatchDebugPacketCallbacks:

08025738 <DispatchDebugPacketCallbacks>:
 8025738:	b430      	push	{r4, r5}
 802573a:	2800      	cmp	r0, #0
 802573c:	d009      	beq.n	8025752 <DispatchDebugPacketCallbacks+0x1a>
 802573e:	2a00      	cmp	r2, #0
 8025740:	d007      	beq.n	8025752 <DispatchDebugPacketCallbacks+0x1a>
 8025742:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8025744:	2c00      	cmp	r4, #0
 8025746:	d004      	beq.n	8025752 <DispatchDebugPacketCallbacks+0x1a>
 8025748:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 802574a:	6800      	ldr	r0, [r0, #0]
 802574c:	46a4      	mov	ip, r4
 802574e:	bc30      	pop	{r4, r5}
 8025750:	4760      	bx	ip
 8025752:	bc30      	pop	{r4, r5}
 8025754:	4770      	bx	lr

Disassembly of section i.FreeDriverStructureResources:

08025758 <FreeDriverStructureResources>:
 8025758:	b510      	push	{r4, lr}
 802575a:	0004      	movs	r4, r0
 802575c:	d012      	beq.n	8025784 <FreeDriverStructureResources+0x2c>
 802575e:	7920      	ldrb	r0, [r4, #4]
 8025760:	b930      	cbnz	r0, 8025770 <FreeDriverStructureResources+0x18>
 8025762:	4809      	ldr	r0, [pc, #36]	; (8025788 <FreeDriverStructureResources+0x30>)
 8025764:	7840      	ldrb	r0, [r0, #1]
 8025766:	b118      	cbz	r0, 8025770 <FreeDriverStructureResources+0x18>
 8025768:	68a0      	ldr	r0, [r4, #8]
 802576a:	b108      	cbz	r0, 8025770 <FreeDriverStructureResources+0x18>
 802576c:	f000 fc0a 	bl	8025f84 <CloseComm>
 8025770:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025774:	2118      	movs	r1, #24
 8025776:	f7f3 fa9f 	bl	8018cb8 <BSC_FreeGenericListEntryList>
 802577a:	68e0      	ldr	r0, [r4, #12]
 802577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025780:	f7ed bdb5 	b.w	80132ee <BTPS_CloseMutex>
 8025784:	bd10      	pop	{r4, pc}
 8025786:	0000      	.short	0x0000
 8025788:	2000003c 	.word	0x2000003c

Disassembly of section i.GetNextCallbackPacketID:

0802578c <GetNextCallbackPacketID>:
 802578c:	4903      	ldr	r1, [pc, #12]	; (802579c <GetNextCallbackPacketID+0x10>)
 802578e:	6848      	ldr	r0, [r1, #4]
 8025790:	1c40      	adds	r0, r0, #1
 8025792:	6048      	str	r0, [r1, #4]
 8025794:	d501      	bpl.n	802579a <GetNextCallbackPacketID+0xe>
 8025796:	2001      	movs	r0, #1
 8025798:	6048      	str	r0, [r1, #4]
 802579a:	4770      	bx	lr
 802579c:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_CancelPacket:

080257a0 <HCI_CancelPacket>:
 80257a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80257a2:	460c      	mov	r4, r1
 80257a4:	491a      	ldr	r1, [pc, #104]	; (8025810 <HCI_CancelPacket+0x70>)
 80257a6:	7809      	ldrb	r1, [r1, #0]
 80257a8:	b369      	cbz	r1, 8025806 <HCI_CancelPacket+0x66>
 80257aa:	b360      	cbz	r0, 8025806 <HCI_CancelPacket+0x66>
 80257ac:	f06f 0607 	mvn.w	r6, #7
 80257b0:	b33c      	cbz	r4, 8025802 <HCI_CancelPacket+0x62>
 80257b2:	4601      	mov	r1, r0
 80257b4:	4816      	ldr	r0, [pc, #88]	; (8025810 <HCI_CancelPacket+0x70>)
 80257b6:	466a      	mov	r2, sp
 80257b8:	3008      	adds	r0, #8
 80257ba:	f7ff ff57 	bl	802566c <AcquireDriverEntry>
 80257be:	0005      	movs	r5, r0
 80257c0:	d01c      	beq.n	80257fc <HCI_CancelPacket+0x5c>
 80257c2:	4621      	mov	r1, r4
 80257c4:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80257c8:	f7ff ffac 	bl	8025724 <DeletePacketQueueEntry>
 80257cc:	b1a0      	cbz	r0, 80257f8 <HCI_CancelPacket+0x58>
 80257ce:	7906      	ldrb	r6, [r0, #4]
 80257d0:	69a9      	ldr	r1, [r5, #24]
 80257d2:	b119      	cbz	r1, 80257dc <HCI_CancelPacket+0x3c>
 80257d4:	6902      	ldr	r2, [r0, #16]
 80257d6:	b10a      	cbz	r2, 80257dc <HCI_CancelPacket+0x3c>
 80257d8:	1e49      	subs	r1, r1, #1
 80257da:	61a9      	str	r1, [r5, #24]
 80257dc:	f7f3 fa7b 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 80257e0:	b11e      	cbz	r6, 80257ea <HCI_CancelPacket+0x4a>
 80257e2:	2100      	movs	r1, #0
 80257e4:	4628      	mov	r0, r5
 80257e6:	f000 fb1d 	bl	8025e24 <SendHCIPacketToLowerDriver>
 80257ea:	f89d 0000 	ldrb.w	r0, [sp]
 80257ee:	b160      	cbz	r0, 802580a <HCI_CancelPacket+0x6a>
 80257f0:	68e8      	ldr	r0, [r5, #12]
 80257f2:	f7ed fd76 	bl	80132e2 <BTPS_ReleaseMutex>
 80257f6:	e008      	b.n	802580a <HCI_CancelPacket+0x6a>
 80257f8:	4634      	mov	r4, r6
 80257fa:	e7f6      	b.n	80257ea <HCI_CancelPacket+0x4a>
 80257fc:	f06f 0409 	mvn.w	r4, #9
 8025800:	e003      	b.n	802580a <HCI_CancelPacket+0x6a>
 8025802:	4634      	mov	r4, r6
 8025804:	e001      	b.n	802580a <HCI_CancelPacket+0x6a>
 8025806:	f06f 0404 	mvn.w	r4, #4
 802580a:	4620      	mov	r0, r4
 802580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802580e:	0000      	.short	0x0000
 8025810:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_ChangeSCOConfiguration:

08025814 <HCI_ChangeSCOConfiguration>:
 8025814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025816:	4f16      	ldr	r7, [pc, #88]	; (8025870 <HCI_ChangeSCOConfiguration+0x5c>)
 8025818:	460e      	mov	r6, r1
 802581a:	f06f 0404 	mvn.w	r4, #4
 802581e:	7839      	ldrb	r1, [r7, #0]
 8025820:	b321      	cbz	r1, 802586c <HCI_ChangeSCOConfiguration+0x58>
 8025822:	b318      	cbz	r0, 802586c <HCI_ChangeSCOConfiguration+0x58>
 8025824:	4601      	mov	r1, r0
 8025826:	466a      	mov	r2, sp
 8025828:	f107 0008 	add.w	r0, r7, #8
 802582c:	f7ff ff1e 	bl	802566c <AcquireDriverEntry>
 8025830:	0005      	movs	r5, r0
 8025832:	f06f 0109 	mvn.w	r1, #9
 8025836:	d018      	beq.n	802586a <HCI_ChangeSCOConfiguration+0x56>
 8025838:	7928      	ldrb	r0, [r5, #4]
 802583a:	b138      	cbz	r0, 802584c <HCI_ChangeSCOConfiguration+0x38>
 802583c:	460c      	mov	r4, r1
 802583e:	f89d 0000 	ldrb.w	r0, [sp]
 8025842:	b198      	cbz	r0, 802586c <HCI_ChangeSCOConfiguration+0x58>
 8025844:	68e8      	ldr	r0, [r5, #12]
 8025846:	f7ed fd4c 	bl	80132e2 <BTPS_ReleaseMutex>
 802584a:	e00f      	b.n	802586c <HCI_ChangeSCOConfiguration+0x58>
 802584c:	7878      	ldrb	r0, [r7, #1]
 802584e:	2800      	cmp	r0, #0
 8025850:	d0f5      	beq.n	802583e <HCI_ChangeSCOConfiguration+0x2a>
 8025852:	68a8      	ldr	r0, [r5, #8]
 8025854:	2800      	cmp	r0, #0
 8025856:	d0f2      	beq.n	802583e <HCI_ChangeSCOConfiguration+0x2a>
 8025858:	4631      	mov	r1, r6
 802585a:	f000 fb57 	bl	8025f0c <ChangeCommSCOConfiguration>
 802585e:	b110      	cbz	r0, 8025866 <HCI_ChangeSCOConfiguration+0x52>
 8025860:	f06f 0408 	mvn.w	r4, #8
 8025864:	e7eb      	b.n	802583e <HCI_ChangeSCOConfiguration+0x2a>
 8025866:	2400      	movs	r4, #0
 8025868:	e7e9      	b.n	802583e <HCI_ChangeSCOConfiguration+0x2a>
 802586a:	460c      	mov	r4, r1
 802586c:	4620      	mov	r0, r4
 802586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025870:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_ChangeSCOConfigurationHandles:

08025874 <HCI_ChangeSCOConfigurationHandles>:
 8025874:	b538      	push	{r3, r4, r5, lr}
 8025876:	490d      	ldr	r1, [pc, #52]	; (80258ac <HCI_ChangeSCOConfigurationHandles+0x38>)
 8025878:	7809      	ldrb	r1, [r1, #0]
 802587a:	b199      	cbz	r1, 80258a4 <HCI_ChangeSCOConfigurationHandles+0x30>
 802587c:	b190      	cbz	r0, 80258a4 <HCI_ChangeSCOConfigurationHandles+0x30>
 802587e:	4601      	mov	r1, r0
 8025880:	480a      	ldr	r0, [pc, #40]	; (80258ac <HCI_ChangeSCOConfigurationHandles+0x38>)
 8025882:	466a      	mov	r2, sp
 8025884:	3008      	adds	r0, #8
 8025886:	f7ff fef1 	bl	802566c <AcquireDriverEntry>
 802588a:	f06f 0409 	mvn.w	r4, #9
 802588e:	b158      	cbz	r0, 80258a8 <HCI_ChangeSCOConfigurationHandles+0x34>
 8025890:	7901      	ldrb	r1, [r0, #4]
 8025892:	b901      	cbnz	r1, 8025896 <HCI_ChangeSCOConfigurationHandles+0x22>
 8025894:	2400      	movs	r4, #0
 8025896:	f89d 1000 	ldrb.w	r1, [sp]
 802589a:	b129      	cbz	r1, 80258a8 <HCI_ChangeSCOConfigurationHandles+0x34>
 802589c:	68c0      	ldr	r0, [r0, #12]
 802589e:	f7ed fd20 	bl	80132e2 <BTPS_ReleaseMutex>
 80258a2:	e001      	b.n	80258a8 <HCI_ChangeSCOConfigurationHandles+0x34>
 80258a4:	f06f 0404 	mvn.w	r4, #4
 80258a8:	4620      	mov	r0, r4
 80258aa:	bd38      	pop	{r3, r4, r5, pc}
 80258ac:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_CloseDriver:

080258b0 <HCI_CloseDriver>:
 80258b0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80258b4:	4e2c      	ldr	r6, [pc, #176]	; (8025968 <HCI_CloseDriver+0xb8>)
 80258b6:	4605      	mov	r5, r0
 80258b8:	7830      	ldrb	r0, [r6, #0]
 80258ba:	b350      	cbz	r0, 8025912 <HCI_CloseDriver+0x62>
 80258bc:	b34d      	cbz	r5, 8025912 <HCI_CloseDriver+0x62>
 80258be:	f7f3 f8b5 	bl	8018a2c <BSC_AcquireListLock>
 80258c2:	b330      	cbz	r0, 8025912 <HCI_CloseDriver+0x62>
 80258c4:	4629      	mov	r1, r5
 80258c6:	f106 0008 	add.w	r0, r6, #8
 80258ca:	f000 faa1 	bl	8025e10 <SearchDriverEntry>
 80258ce:	0004      	movs	r4, r0
 80258d0:	d020      	beq.n	8025914 <HCI_CloseDriver+0x64>
 80258d2:	6920      	ldr	r0, [r4, #16]
 80258d4:	b148      	cbz	r0, 80258ea <HCI_CloseDriver+0x3a>
 80258d6:	f7ed feb1 	bl	801363c <BTPS_CurrentThreadHandle>
 80258da:	6921      	ldr	r1, [r4, #16]
 80258dc:	4288      	cmp	r0, r1
 80258de:	d104      	bne.n	80258ea <HCI_CloseDriver+0x3a>
 80258e0:	6960      	ldr	r0, [r4, #20]
 80258e2:	f040 0002 	orr.w	r0, r0, #2
 80258e6:	6160      	str	r0, [r4, #20]
 80258e8:	e014      	b.n	8025914 <HCI_CloseDriver+0x64>
 80258ea:	481f      	ldr	r0, [pc, #124]	; (8025968 <HCI_CloseDriver+0xb8>)
 80258ec:	2370      	movs	r3, #112	; 0x70
 80258ee:	3008      	adds	r0, #8
 80258f0:	e9cd 0500 	strd	r0, r5, [sp]
 80258f4:	2200      	movs	r2, #0
 80258f6:	a901      	add	r1, sp, #4
 80258f8:	2007      	movs	r0, #7
 80258fa:	f7f3 f93f 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80258fe:	0004      	movs	r4, r0
 8025900:	d008      	beq.n	8025914 <HCI_CloseDriver+0x64>
 8025902:	f7f3 fbf7 	bl	80190f4 <BSC_ReleaseListLock>
 8025906:	4620      	mov	r0, r4
 8025908:	f7ff ff26 	bl	8025758 <FreeDriverStructureResources>
 802590c:	4620      	mov	r0, r4
 802590e:	f7ed fd6f 	bl	80133f0 <BTPS_FreeMemory>
 8025912:	e001      	b.n	8025918 <HCI_CloseDriver+0x68>
 8025914:	f7f3 fbee 	bl	80190f4 <BSC_ReleaseListLock>
 8025918:	68b0      	ldr	r0, [r6, #8]
 802591a:	2800      	cmp	r0, #0
 802591c:	d122      	bne.n	8025964 <HCI_CloseDriver+0xb4>
 802591e:	7830      	ldrb	r0, [r6, #0]
 8025920:	f04f 0800 	mov.w	r8, #0
 8025924:	b1a0      	cbz	r0, 8025950 <HCI_CloseDriver+0xa0>
 8025926:	f7f3 f881 	bl	8018a2c <BSC_AcquireListLock>
 802592a:	b188      	cbz	r0, 8025950 <HCI_CloseDriver+0xa0>
 802592c:	4f0e      	ldr	r7, [pc, #56]	; (8025968 <HCI_CloseDriver+0xb8>)
 802592e:	3708      	adds	r7, #8
 8025930:	683c      	ldr	r4, [r7, #0]
 8025932:	e007      	b.n	8025944 <HCI_CloseDriver+0x94>
 8025934:	4625      	mov	r5, r4
 8025936:	6f24      	ldr	r4, [r4, #112]	; 0x70
 8025938:	4628      	mov	r0, r5
 802593a:	f7ff ff0d 	bl	8025758 <FreeDriverStructureResources>
 802593e:	4628      	mov	r0, r5
 8025940:	f7ed fd56 	bl	80133f0 <BTPS_FreeMemory>
 8025944:	2c00      	cmp	r4, #0
 8025946:	d1f5      	bne.n	8025934 <HCI_CloseDriver+0x84>
 8025948:	f8c7 8000 	str.w	r8, [r7]
 802594c:	f7f3 fbd2 	bl	80190f4 <BSC_ReleaseListLock>
 8025950:	f8c6 8008 	str.w	r8, [r6, #8]
 8025954:	f886 8001 	strb.w	r8, [r6, #1]
 8025958:	f886 8000 	strb.w	r8, [r6]
 802595c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8025960:	f000 baec 	b.w	8025f3c <CleanupCOMMList>
 8025964:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8025968:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_DriverCallback:

0802596c <HCI_DriverCallback>:
 802596c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025970:	2600      	movs	r6, #0
 8025972:	b084      	sub	sp, #16
 8025974:	460f      	mov	r7, r1
 8025976:	2800      	cmp	r0, #0
 8025978:	d079      	beq.n	8025a6e <HCI_DriverCallback+0x102>
 802597a:	2f00      	cmp	r7, #0
 802597c:	d078      	beq.n	8025a70 <HCI_DriverCallback+0x104>
 802597e:	f7f3 f855 	bl	8018a2c <BSC_AcquireListLock>
 8025982:	2800      	cmp	r0, #0
 8025984:	d075      	beq.n	8025a72 <HCI_DriverCallback+0x106>
 8025986:	487f      	ldr	r0, [pc, #508]	; (8025b84 <HCI_DriverCallback+0x218>)
 8025988:	9906      	ldr	r1, [sp, #24]
 802598a:	f000 fa41 	bl	8025e10 <SearchDriverEntry>
 802598e:	0005      	movs	r5, r0
 8025990:	d070      	beq.n	8025a74 <HCI_DriverCallback+0x108>
 8025992:	68ec      	ldr	r4, [r5, #12]
 8025994:	f7f3 fbae 	bl	80190f4 <BSC_ReleaseListLock>
 8025998:	2c00      	cmp	r4, #0
 802599a:	d0f3      	beq.n	8025984 <HCI_DriverCallback+0x18>
 802599c:	1e71      	subs	r1, r6, #1
 802599e:	4620      	mov	r0, r4
 80259a0:	f7ed fc83 	bl	80132aa <BTPS_WaitMutex>
 80259a4:	2800      	cmp	r0, #0
 80259a6:	d0ed      	beq.n	8025984 <HCI_DriverCallback+0x18>
 80259a8:	463a      	mov	r2, r7
 80259aa:	2100      	movs	r1, #0
 80259ac:	4628      	mov	r0, r5
 80259ae:	f7ff fec3 	bl	8025738 <DispatchDebugPacketCallbacks>
 80259b2:	46b2      	mov	sl, r6
 80259b4:	46d1      	mov	r9, sl
 80259b6:	f7ed fe41 	bl	801363c <BTPS_CurrentThreadHandle>
 80259ba:	6128      	str	r0, [r5, #16]
 80259bc:	7838      	ldrb	r0, [r7, #0]
 80259be:	f020 0b80 	bic.w	fp, r0, #128	; 0x80
 80259c2:	f1bb 0f04 	cmp.w	fp, #4
 80259c6:	d175      	bne.n	8025ab4 <HCI_DriverCallback+0x148>
 80259c8:	6878      	ldr	r0, [r7, #4]
 80259ca:	2802      	cmp	r0, #2
 80259cc:	d372      	bcc.n	8025ab4 <HCI_DriverCallback+0x148>
 80259ce:	f897 8008 	ldrb.w	r8, [r7, #8]
 80259d2:	f1b8 0f0e 	cmp.w	r8, #14
 80259d6:	d006      	beq.n	80259e6 <HCI_DriverCallback+0x7a>
 80259d8:	f1b8 0f0f 	cmp.w	r8, #15
 80259dc:	d00a      	beq.n	80259f4 <HCI_DriverCallback+0x88>
 80259de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80259e2:	d00d      	beq.n	8025a00 <HCI_DriverCallback+0x94>
 80259e4:	e00d      	b.n	8025a02 <HCI_DriverCallback+0x96>
 80259e6:	2805      	cmp	r0, #5
 80259e8:	d30b      	bcc.n	8025a02 <HCI_DriverCallback+0x96>
 80259ea:	f897 900a 	ldrb.w	r9, [r7, #10]
 80259ee:	f8b7 000b 	ldrh.w	r0, [r7, #11]
 80259f2:	e004      	b.n	80259fe <HCI_DriverCallback+0x92>
 80259f4:	2806      	cmp	r0, #6
 80259f6:	d304      	bcc.n	8025a02 <HCI_DriverCallback+0x96>
 80259f8:	f897 900b 	ldrb.w	r9, [r7, #11]
 80259fc:	89b8      	ldrh	r0, [r7, #12]
 80259fe:	4682      	mov	sl, r0
 8025a00:	2608      	movs	r6, #8
 8025a02:	0730      	lsls	r0, r6, #28
 8025a04:	d556      	bpl.n	8025ab4 <HCI_DriverCallback+0x148>
 8025a06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a0a:	d001      	beq.n	8025a10 <HCI_DriverCallback+0xa4>
 8025a0c:	f8c5 901c 	str.w	r9, [r5, #28]
 8025a10:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8025a12:	e041      	b.n	8025a98 <HCI_DriverCallback+0x12c>
 8025a14:	68a0      	ldr	r0, [r4, #8]
 8025a16:	7801      	ldrb	r1, [r0, #0]
 8025a18:	2901      	cmp	r1, #1
 8025a1a:	d11b      	bne.n	8025a54 <HCI_DriverCallback+0xe8>
 8025a1c:	6841      	ldr	r1, [r0, #4]
 8025a1e:	2903      	cmp	r1, #3
 8025a20:	d30e      	bcc.n	8025a40 <HCI_DriverCallback+0xd4>
 8025a22:	8900      	ldrh	r0, [r0, #8]
 8025a24:	4582      	cmp	sl, r0
 8025a26:	d006      	beq.n	8025a36 <HCI_DriverCallback+0xca>
 8025a28:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a2c:	d106      	bne.n	8025a3c <HCI_DriverCallback+0xd0>
 8025a2e:	213f      	movs	r1, #63	; 0x3f
 8025a30:	ebb1 2f90 	cmp.w	r1, r0, lsr #10
 8025a34:	d102      	bne.n	8025a3c <HCI_DriverCallback+0xd0>
 8025a36:	f046 0604 	orr.w	r6, r6, #4
 8025a3a:	e00b      	b.n	8025a54 <HCI_DriverCallback+0xe8>
 8025a3c:	69a4      	ldr	r4, [r4, #24]
 8025a3e:	e009      	b.n	8025a54 <HCI_DriverCallback+0xe8>
 8025a40:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8025a44:	6821      	ldr	r1, [r4, #0]
 8025a46:	f7ff fe6d 	bl	8025724 <DeletePacketQueueEntry>
 8025a4a:	0004      	movs	r4, r0
 8025a4c:	d002      	beq.n	8025a54 <HCI_DriverCallback+0xe8>
 8025a4e:	f7f3 f942 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8025a52:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 8025a54:	0770      	lsls	r0, r6, #29
 8025a56:	d51d      	bpl.n	8025a94 <HCI_DriverCallback+0x128>
 8025a58:	69a8      	ldr	r0, [r5, #24]
 8025a5a:	b108      	cbz	r0, 8025a60 <HCI_DriverCallback+0xf4>
 8025a5c:	1e40      	subs	r0, r0, #1
 8025a5e:	61a8      	str	r0, [r5, #24]
 8025a60:	6923      	ldr	r3, [r4, #16]
 8025a62:	b143      	cbz	r3, 8025a76 <HCI_DriverCallback+0x10a>
 8025a64:	6962      	ldr	r2, [r4, #20]
 8025a66:	4639      	mov	r1, r7
 8025a68:	6828      	ldr	r0, [r5, #0]
 8025a6a:	4798      	blx	r3
 8025a6c:	e007      	b.n	8025a7e <HCI_DriverCallback+0x112>
 8025a6e:	e07c      	b.n	8025b6a <HCI_DriverCallback+0x1fe>
 8025a70:	e082      	b.n	8025b78 <HCI_DriverCallback+0x20c>
 8025a72:	e07c      	b.n	8025b6e <HCI_DriverCallback+0x202>
 8025a74:	e083      	b.n	8025b7e <HCI_DriverCallback+0x212>
 8025a76:	4638      	mov	r0, r7
 8025a78:	f7ed fcba 	bl	80133f0 <BTPS_FreeMemory>
 8025a7c:	2700      	movs	r7, #0
 8025a7e:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8025a82:	6821      	ldr	r1, [r4, #0]
 8025a84:	f7ff fe4e 	bl	8025724 <DeletePacketQueueEntry>
 8025a88:	b108      	cbz	r0, 8025a8e <HCI_DriverCallback+0x122>
 8025a8a:	f7f3 f924 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8025a8e:	f046 0602 	orr.w	r6, r6, #2
 8025a92:	e003      	b.n	8025a9c <HCI_DriverCallback+0x130>
 8025a94:	b114      	cbz	r4, 8025a9c <HCI_DriverCallback+0x130>
 8025a96:	69a4      	ldr	r4, [r4, #24]
 8025a98:	2c00      	cmp	r4, #0
 8025a9a:	d1bb      	bne.n	8025a14 <HCI_DriverCallback+0xa8>
 8025a9c:	07b0      	lsls	r0, r6, #30
 8025a9e:	d50b      	bpl.n	8025ab8 <HCI_DriverCallback+0x14c>
 8025aa0:	7d28      	ldrb	r0, [r5, #20]
 8025aa2:	0780      	lsls	r0, r0, #30
 8025aa4:	d501      	bpl.n	8025aaa <HCI_DriverCallback+0x13e>
 8025aa6:	f046 0601 	orr.w	r6, r6, #1
 8025aaa:	2000      	movs	r0, #0
 8025aac:	6128      	str	r0, [r5, #16]
 8025aae:	68e8      	ldr	r0, [r5, #12]
 8025ab0:	f7ed fc17 	bl	80132e2 <BTPS_ReleaseMutex>
 8025ab4:	07b0      	lsls	r0, r6, #30
 8025ab6:	d42f      	bmi.n	8025b18 <HCI_DriverCallback+0x1ac>
 8025ab8:	4658      	mov	r0, fp
 8025aba:	f1bb 0f02 	cmp.w	fp, #2
 8025abe:	d01d      	beq.n	8025afc <HCI_DriverCallback+0x190>
 8025ac0:	2803      	cmp	r0, #3
 8025ac2:	d021      	beq.n	8025b08 <HCI_DriverCallback+0x19c>
 8025ac4:	f1bb 0f04 	cmp.w	fp, #4
 8025ac8:	d015      	beq.n	8025af6 <HCI_DriverCallback+0x18a>
 8025aca:	220c      	movs	r2, #12
 8025acc:	2100      	movs	r1, #0
 8025ace:	4668      	mov	r0, sp
 8025ad0:	f7ed fcf5 	bl	80134be <BTPS_MemInitialize>
 8025ad4:	9801      	ldr	r0, [sp, #4]
 8025ad6:	b328      	cbz	r0, 8025b24 <HCI_DriverCallback+0x1b8>
 8025ad8:	9b01      	ldr	r3, [sp, #4]
 8025ada:	9a02      	ldr	r2, [sp, #8]
 8025adc:	6828      	ldr	r0, [r5, #0]
 8025ade:	4639      	mov	r1, r7
 8025ae0:	4798      	blx	r3
 8025ae2:	2100      	movs	r1, #0
 8025ae4:	6129      	str	r1, [r5, #16]
 8025ae6:	7d29      	ldrb	r1, [r5, #20]
 8025ae8:	f046 0002 	orr.w	r0, r6, #2
 8025aec:	0789      	lsls	r1, r1, #30
 8025aee:	d50e      	bpl.n	8025b0e <HCI_DriverCallback+0x1a2>
 8025af0:	f040 0601 	orr.w	r6, r0, #1
 8025af4:	e00d      	b.n	8025b12 <HCI_DriverCallback+0x1a6>
 8025af6:	f105 0020 	add.w	r0, r5, #32
 8025afa:	e001      	b.n	8025b00 <HCI_DriverCallback+0x194>
 8025afc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8025b00:	c807      	ldmia	r0, {r0, r1, r2}
 8025b02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8025b06:	e7e5      	b.n	8025ad4 <HCI_DriverCallback+0x168>
 8025b08:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8025b0c:	e7f8      	b.n	8025b00 <HCI_DriverCallback+0x194>
 8025b0e:	f020 0601 	bic.w	r6, r0, #1
 8025b12:	68e8      	ldr	r0, [r5, #12]
 8025b14:	f7ed fbe5 	bl	80132e2 <BTPS_ReleaseMutex>
 8025b18:	07f0      	lsls	r0, r6, #31
 8025b1a:	d006      	beq.n	8025b2a <HCI_DriverCallback+0x1be>
 8025b1c:	9806      	ldr	r0, [sp, #24]
 8025b1e:	f7ff fec7 	bl	80258b0 <HCI_CloseDriver>
 8025b22:	e022      	b.n	8025b6a <HCI_DriverCallback+0x1fe>
 8025b24:	2000      	movs	r0, #0
 8025b26:	6128      	str	r0, [r5, #16]
 8025b28:	e7f3      	b.n	8025b12 <HCI_DriverCallback+0x1a6>
 8025b2a:	f1b9 0f00 	cmp.w	r9, #0
 8025b2e:	d01c      	beq.n	8025b6a <HCI_DriverCallback+0x1fe>
 8025b30:	f7f2 ff7c 	bl	8018a2c <BSC_AcquireListLock>
 8025b34:	b1c8      	cbz	r0, 8025b6a <HCI_DriverCallback+0x1fe>
 8025b36:	4813      	ldr	r0, [pc, #76]	; (8025b84 <HCI_DriverCallback+0x218>)
 8025b38:	9906      	ldr	r1, [sp, #24]
 8025b3a:	f000 f969 	bl	8025e10 <SearchDriverEntry>
 8025b3e:	0004      	movs	r4, r0
 8025b40:	d011      	beq.n	8025b66 <HCI_DriverCallback+0x1fa>
 8025b42:	68e5      	ldr	r5, [r4, #12]
 8025b44:	f7f3 fad6 	bl	80190f4 <BSC_ReleaseListLock>
 8025b48:	b17d      	cbz	r5, 8025b6a <HCI_DriverCallback+0x1fe>
 8025b4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025b4e:	4628      	mov	r0, r5
 8025b50:	f7ed fbab 	bl	80132aa <BTPS_WaitMutex>
 8025b54:	b148      	cbz	r0, 8025b6a <HCI_DriverCallback+0x1fe>
 8025b56:	2100      	movs	r1, #0
 8025b58:	4620      	mov	r0, r4
 8025b5a:	f000 f963 	bl	8025e24 <SendHCIPacketToLowerDriver>
 8025b5e:	68e0      	ldr	r0, [r4, #12]
 8025b60:	f7ed fbbf 	bl	80132e2 <BTPS_ReleaseMutex>
 8025b64:	e001      	b.n	8025b6a <HCI_DriverCallback+0x1fe>
 8025b66:	f7f3 fac5 	bl	80190f4 <BSC_ReleaseListLock>
 8025b6a:	2f00      	cmp	r7, #0
 8025b6c:	d004      	beq.n	8025b78 <HCI_DriverCallback+0x20c>
 8025b6e:	07b0      	lsls	r0, r6, #30
 8025b70:	d402      	bmi.n	8025b78 <HCI_DriverCallback+0x20c>
 8025b72:	4638      	mov	r0, r7
 8025b74:	f7ed fc3c 	bl	80133f0 <BTPS_FreeMemory>
 8025b78:	b007      	add	sp, #28
 8025b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b7e:	f7f3 fab9 	bl	80190f4 <BSC_ReleaseListLock>
 8025b82:	e7f4      	b.n	8025b6e <HCI_DriverCallback+0x202>
 8025b84:	20000044 	.word	0x20000044

Disassembly of section i.HCI_OpenDriver:

08025b88 <HCI_OpenDriver>:
 8025b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025b8c:	4e32      	ldr	r6, [pc, #200]	; (8025c58 <HCI_OpenDriver+0xd0>)
 8025b8e:	4605      	mov	r5, r0
 8025b90:	f04f 0801 	mov.w	r8, #1
 8025b94:	7830      	ldrb	r0, [r6, #0]
 8025b96:	b950      	cbnz	r0, 8025bae <HCI_OpenDriver+0x26>
 8025b98:	2000      	movs	r0, #0
 8025b9a:	60b0      	str	r0, [r6, #8]
 8025b9c:	f000 fb30 	bl	8026200 <InitializeCOMMList>
 8025ba0:	b118      	cbz	r0, 8025baa <HCI_OpenDriver+0x22>
 8025ba2:	f886 8001 	strb.w	r8, [r6, #1]
 8025ba6:	f886 8000 	strb.w	r8, [r6]
 8025baa:	7830      	ldrb	r0, [r6, #0]
 8025bac:	b3e0      	cbz	r0, 8025c28 <HCI_OpenDriver+0xa0>
 8025bae:	b3dd      	cbz	r5, 8025c28 <HCI_OpenDriver+0xa0>
 8025bb0:	f7f2 ff3c 	bl	8018a2c <BSC_AcquireListLock>
 8025bb4:	f06f 0709 	mvn.w	r7, #9
 8025bb8:	b3b8      	cbz	r0, 8025c2a <HCI_OpenDriver+0xa2>
 8025bba:	2074      	movs	r0, #116	; 0x74
 8025bbc:	f7ed fbfe 	bl	80133bc <BTPS_AllocateMemory>
 8025bc0:	0004      	movs	r4, r0
 8025bc2:	d03d      	beq.n	8025c40 <HCI_OpenDriver+0xb8>
 8025bc4:	2274      	movs	r2, #116	; 0x74
 8025bc6:	2100      	movs	r1, #0
 8025bc8:	f7ed fc79 	bl	80134be <BTPS_MemInitialize>
 8025bcc:	7828      	ldrb	r0, [r5, #0]
 8025bce:	7120      	strb	r0, [r4, #4]
 8025bd0:	f7ff fddc 	bl	802578c <GetNextCallbackPacketID>
 8025bd4:	f8c4 801c 	str.w	r8, [r4, #28]
 8025bd8:	6020      	str	r0, [r4, #0]
 8025bda:	2000      	movs	r0, #0
 8025bdc:	f7ed fb51 	bl	8013282 <BTPS_CreateMutex>
 8025be0:	60e0      	str	r0, [r4, #12]
 8025be2:	b340      	cbz	r0, 8025c36 <HCI_OpenDriver+0xae>
 8025be4:	7920      	ldrb	r0, [r4, #4]
 8025be6:	b130      	cbz	r0, 8025bf6 <HCI_OpenDriver+0x6e>
 8025be8:	10fd      	asrs	r5, r7, #3
 8025bea:	68e0      	ldr	r0, [r4, #12]
 8025bec:	f7ed fb7f 	bl	80132ee <BTPS_CloseMutex>
 8025bf0:	2d00      	cmp	r5, #0
 8025bf2:	db21      	blt.n	8025c38 <HCI_OpenDriver+0xb0>
 8025bf4:	e025      	b.n	8025c42 <HCI_OpenDriver+0xba>
 8025bf6:	7870      	ldrb	r0, [r6, #1]
 8025bf8:	f06f 0603 	mvn.w	r6, #3
 8025bfc:	b1c8      	cbz	r0, 8025c32 <HCI_OpenDriver+0xaa>
 8025bfe:	4917      	ldr	r1, [pc, #92]	; (8025c5c <HCI_OpenDriver+0xd4>)
 8025c00:	1d28      	adds	r0, r5, #4
 8025c02:	6822      	ldr	r2, [r4, #0]
 8025c04:	f000 fb32 	bl	802626c <OpenComm>
 8025c08:	2800      	cmp	r0, #0
 8025c0a:	dd12      	ble.n	8025c32 <HCI_OpenDriver+0xaa>
 8025c0c:	4b12      	ldr	r3, [pc, #72]	; (8025c58 <HCI_OpenDriver+0xd0>)
 8025c0e:	60a0      	str	r0, [r4, #8]
 8025c10:	3308      	adds	r3, #8
 8025c12:	2270      	movs	r2, #112	; 0x70
 8025c14:	2100      	movs	r1, #0
 8025c16:	2007      	movs	r0, #7
 8025c18:	9400      	str	r4, [sp, #0]
 8025c1a:	f7f2 ff49 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8025c1e:	b128      	cbz	r0, 8025c2c <HCI_OpenDriver+0xa4>
 8025c20:	6825      	ldr	r5, [r4, #0]
 8025c22:	2d00      	cmp	r5, #0
 8025c24:	dbe1      	blt.n	8025bea <HCI_OpenDriver+0x62>
 8025c26:	e00c      	b.n	8025c42 <HCI_OpenDriver+0xba>
 8025c28:	e010      	b.n	8025c4c <HCI_OpenDriver+0xc4>
 8025c2a:	e00d      	b.n	8025c48 <HCI_OpenDriver+0xc0>
 8025c2c:	68a0      	ldr	r0, [r4, #8]
 8025c2e:	f000 f9a9 	bl	8025f84 <CloseComm>
 8025c32:	4635      	mov	r5, r6
 8025c34:	e7d9      	b.n	8025bea <HCI_OpenDriver+0x62>
 8025c36:	463d      	mov	r5, r7
 8025c38:	4620      	mov	r0, r4
 8025c3a:	f7ed fbd9 	bl	80133f0 <BTPS_FreeMemory>
 8025c3e:	e000      	b.n	8025c42 <HCI_OpenDriver+0xba>
 8025c40:	463d      	mov	r5, r7
 8025c42:	f7f3 fa57 	bl	80190f4 <BSC_ReleaseListLock>
 8025c46:	e003      	b.n	8025c50 <HCI_OpenDriver+0xc8>
 8025c48:	463d      	mov	r5, r7
 8025c4a:	e001      	b.n	8025c50 <HCI_OpenDriver+0xc8>
 8025c4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8025c50:	4628      	mov	r0, r5
 8025c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025c56:	0000      	.short	0x0000
 8025c58:	2000003c 	.word	0x2000003c
 8025c5c:	0802596d 	.word	0x0802596d

Disassembly of section i.HCI_ReconfigureDriver:

08025c60 <HCI_ReconfigureDriver>:
 8025c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c62:	4f19      	ldr	r7, [pc, #100]	; (8025cc8 <HCI_ReconfigureDriver+0x68>)
 8025c64:	460c      	mov	r4, r1
 8025c66:	4616      	mov	r6, r2
 8025c68:	7839      	ldrb	r1, [r7, #0]
 8025c6a:	b349      	cbz	r1, 8025cc0 <HCI_ReconfigureDriver+0x60>
 8025c6c:	b340      	cbz	r0, 8025cc0 <HCI_ReconfigureDriver+0x60>
 8025c6e:	4601      	mov	r1, r0
 8025c70:	466a      	mov	r2, sp
 8025c72:	f107 0008 	add.w	r0, r7, #8
 8025c76:	f7ff fcf9 	bl	802566c <AcquireDriverEntry>
 8025c7a:	0005      	movs	r5, r0
 8025c7c:	f06f 0109 	mvn.w	r1, #9
 8025c80:	d01c      	beq.n	8025cbc <HCI_ReconfigureDriver+0x5c>
 8025c82:	b196      	cbz	r6, 8025caa <HCI_ReconfigureDriver+0x4a>
 8025c84:	6832      	ldr	r2, [r6, #0]
 8025c86:	1e48      	subs	r0, r1, #1
 8025c88:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8025c8c:	d309      	bcc.n	8025ca2 <HCI_ReconfigureDriver+0x42>
 8025c8e:	792a      	ldrb	r2, [r5, #4]
 8025c90:	b93a      	cbnz	r2, 8025ca2 <HCI_ReconfigureDriver+0x42>
 8025c92:	7878      	ldrb	r0, [r7, #1]
 8025c94:	b138      	cbz	r0, 8025ca6 <HCI_ReconfigureDriver+0x46>
 8025c96:	68a8      	ldr	r0, [r5, #8]
 8025c98:	b128      	cbz	r0, 8025ca6 <HCI_ReconfigureDriver+0x46>
 8025c9a:	4632      	mov	r2, r6
 8025c9c:	4621      	mov	r1, r4
 8025c9e:	f000 fc7d 	bl	802659c <ReconfigureComm>
 8025ca2:	4604      	mov	r4, r0
 8025ca4:	e003      	b.n	8025cae <HCI_ReconfigureDriver+0x4e>
 8025ca6:	460c      	mov	r4, r1
 8025ca8:	e001      	b.n	8025cae <HCI_ReconfigureDriver+0x4e>
 8025caa:	f06f 0406 	mvn.w	r4, #6
 8025cae:	f89d 0000 	ldrb.w	r0, [sp]
 8025cb2:	b138      	cbz	r0, 8025cc4 <HCI_ReconfigureDriver+0x64>
 8025cb4:	68e8      	ldr	r0, [r5, #12]
 8025cb6:	f7ed fb14 	bl	80132e2 <BTPS_ReleaseMutex>
 8025cba:	e003      	b.n	8025cc4 <HCI_ReconfigureDriver+0x64>
 8025cbc:	460c      	mov	r4, r1
 8025cbe:	e001      	b.n	8025cc4 <HCI_ReconfigureDriver+0x64>
 8025cc0:	f06f 0404 	mvn.w	r4, #4
 8025cc4:	4620      	mov	r0, r4
 8025cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025cc8:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_RegisterACLDataCallback:

08025ccc <HCI_RegisterACLDataCallback>:
 8025ccc:	4613      	mov	r3, r2
 8025cce:	460a      	mov	r2, r1
 8025cd0:	2102      	movs	r1, #2
 8025cd2:	f7fa b933 	b.w	801ff3c <RegisterCallback>

Disassembly of section i.HCI_RegisterEventCallback:

08025cd6 <HCI_RegisterEventCallback>:
 8025cd6:	4613      	mov	r3, r2
 8025cd8:	460a      	mov	r2, r1
 8025cda:	2101      	movs	r1, #1
 8025cdc:	f7fa b92e 	b.w	801ff3c <RegisterCallback>

Disassembly of section i.HCI_RegisterSCODataCallback:

08025ce0 <HCI_RegisterSCODataCallback>:
 8025ce0:	4613      	mov	r3, r2
 8025ce2:	460a      	mov	r2, r1
 8025ce4:	2103      	movs	r1, #3
 8025ce6:	f7fa b929 	b.w	801ff3c <RegisterCallback>

Disassembly of section i.HCI_SendPacket:

08025cec <HCI_SendPacket>:
 8025cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025cf0:	460d      	mov	r5, r1
 8025cf2:	492a      	ldr	r1, [pc, #168]	; (8025d9c <HCI_SendPacket+0xb0>)
 8025cf4:	4698      	mov	r8, r3
 8025cf6:	4617      	mov	r7, r2
 8025cf8:	7809      	ldrb	r1, [r1, #0]
 8025cfa:	b391      	cbz	r1, 8025d62 <HCI_SendPacket+0x76>
 8025cfc:	b388      	cbz	r0, 8025d62 <HCI_SendPacket+0x76>
 8025cfe:	b38d      	cbz	r5, 8025d64 <HCI_SendPacket+0x78>
 8025d00:	6869      	ldr	r1, [r5, #4]
 8025d02:	0049      	lsls	r1, r1, #1
 8025d04:	d041      	beq.n	8025d8a <HCI_SendPacket+0x9e>
 8025d06:	4601      	mov	r1, r0
 8025d08:	4824      	ldr	r0, [pc, #144]	; (8025d9c <HCI_SendPacket+0xb0>)
 8025d0a:	466a      	mov	r2, sp
 8025d0c:	3008      	adds	r0, #8
 8025d0e:	f7ff fcad 	bl	802566c <AcquireDriverEntry>
 8025d12:	0004      	movs	r4, r0
 8025d14:	f06f 0609 	mvn.w	r6, #9
 8025d18:	d035      	beq.n	8025d86 <HCI_SendPacket+0x9a>
 8025d1a:	f7ff fd37 	bl	802578c <GetNextCallbackPacketID>
 8025d1e:	2100      	movs	r1, #0
 8025d20:	6560      	str	r0, [r4, #84]	; 0x54
 8025d22:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
 8025d26:	e9c4 5117 	strd	r5, r1, [r4, #92]	; 0x5c
 8025d2a:	782a      	ldrb	r2, [r5, #0]
 8025d2c:	2a01      	cmp	r2, #1
 8025d2e:	d000      	beq.n	8025d32 <HCI_SendPacket+0x46>
 8025d30:	2700      	movs	r7, #0
 8025d32:	6667      	str	r7, [r4, #100]	; 0x64
 8025d34:	e9c4 811a 	strd	r8, r1, [r4, #104]	; 0x68
 8025d38:	7829      	ldrb	r1, [r5, #0]
 8025d3a:	2901      	cmp	r1, #1
 8025d3c:	d00a      	beq.n	8025d54 <HCI_SendPacket+0x68>
 8025d3e:	b1d0      	cbz	r0, 8025d76 <HCI_SendPacket+0x8a>
 8025d40:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8025d44:	b1b9      	cbz	r1, 8025d76 <HCI_SendPacket+0x8a>
 8025d46:	4620      	mov	r0, r4
 8025d48:	f000 f86c 	bl	8025e24 <SendHCIPacketToLowerDriver>
 8025d4c:	2800      	cmp	r0, #0
 8025d4e:	dd0a      	ble.n	8025d66 <HCI_SendPacket+0x7a>
 8025d50:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8025d52:	e011      	b.n	8025d78 <HCI_SendPacket+0x8c>
 8025d54:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8025d58:	1f08      	subs	r0, r1, #4
 8025d5a:	f7ff fcb3 	bl	80256c4 <AddPacketQueueEntry>
 8025d5e:	4601      	mov	r1, r0
 8025d60:	e7f0      	b.n	8025d44 <HCI_SendPacket+0x58>
 8025d62:	e015      	b.n	8025d90 <HCI_SendPacket+0xa4>
 8025d64:	e011      	b.n	8025d8a <HCI_SendPacket+0x9e>
 8025d66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8025d6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8025d6c:	f7ff fcda 	bl	8025724 <DeletePacketQueueEntry>
 8025d70:	b108      	cbz	r0, 8025d76 <HCI_SendPacket+0x8a>
 8025d72:	f7f2 ffb0 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8025d76:	4635      	mov	r5, r6
 8025d78:	f89d 0000 	ldrb.w	r0, [sp]
 8025d7c:	b150      	cbz	r0, 8025d94 <HCI_SendPacket+0xa8>
 8025d7e:	68e0      	ldr	r0, [r4, #12]
 8025d80:	f7ed faaf 	bl	80132e2 <BTPS_ReleaseMutex>
 8025d84:	e006      	b.n	8025d94 <HCI_SendPacket+0xa8>
 8025d86:	4635      	mov	r5, r6
 8025d88:	e004      	b.n	8025d94 <HCI_SendPacket+0xa8>
 8025d8a:	f06f 0506 	mvn.w	r5, #6
 8025d8e:	e001      	b.n	8025d94 <HCI_SendPacket+0xa8>
 8025d90:	f06f 0504 	mvn.w	r5, #4
 8025d94:	4628      	mov	r0, r5
 8025d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d9a:	0000      	.short	0x0000
 8025d9c:	2000003c 	.word	0x2000003c

Disassembly of section i.HCI_UnRegisterCallback:

08025da0 <HCI_UnRegisterCallback>:
 8025da0:	b538      	push	{r3, r4, r5, lr}
 8025da2:	460c      	mov	r4, r1
 8025da4:	4919      	ldr	r1, [pc, #100]	; (8025e0c <HCI_UnRegisterCallback+0x6c>)
 8025da6:	7809      	ldrb	r1, [r1, #0]
 8025da8:	2900      	cmp	r1, #0
 8025daa:	d02e      	beq.n	8025e0a <HCI_UnRegisterCallback+0x6a>
 8025dac:	2800      	cmp	r0, #0
 8025dae:	d02c      	beq.n	8025e0a <HCI_UnRegisterCallback+0x6a>
 8025db0:	2c00      	cmp	r4, #0
 8025db2:	d02a      	beq.n	8025e0a <HCI_UnRegisterCallback+0x6a>
 8025db4:	4601      	mov	r1, r0
 8025db6:	4815      	ldr	r0, [pc, #84]	; (8025e0c <HCI_UnRegisterCallback+0x6c>)
 8025db8:	466a      	mov	r2, sp
 8025dba:	3008      	adds	r0, #8
 8025dbc:	f7ff fc56 	bl	802566c <AcquireDriverEntry>
 8025dc0:	2800      	cmp	r0, #0
 8025dc2:	d022      	beq.n	8025e0a <HCI_UnRegisterCallback+0x6a>
 8025dc4:	6a01      	ldr	r1, [r0, #32]
 8025dc6:	42a1      	cmp	r1, r4
 8025dc8:	d102      	bne.n	8025dd0 <HCI_UnRegisterCallback+0x30>
 8025dca:	f100 0120 	add.w	r1, r0, #32
 8025dce:	e010      	b.n	8025df2 <HCI_UnRegisterCallback+0x52>
 8025dd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8025dd2:	42a1      	cmp	r1, r4
 8025dd4:	d102      	bne.n	8025ddc <HCI_UnRegisterCallback+0x3c>
 8025dd6:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 8025dda:	e00a      	b.n	8025df2 <HCI_UnRegisterCallback+0x52>
 8025ddc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8025dde:	42a1      	cmp	r1, r4
 8025de0:	d102      	bne.n	8025de8 <HCI_UnRegisterCallback+0x48>
 8025de2:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8025de6:	e004      	b.n	8025df2 <HCI_UnRegisterCallback+0x52>
 8025de8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8025dea:	42a1      	cmp	r1, r4
 8025dec:	d106      	bne.n	8025dfc <HCI_UnRegisterCallback+0x5c>
 8025dee:	f100 0144 	add.w	r1, r0, #68	; 0x44
 8025df2:	b119      	cbz	r1, 8025dfc <HCI_UnRegisterCallback+0x5c>
 8025df4:	2200      	movs	r2, #0
 8025df6:	600a      	str	r2, [r1, #0]
 8025df8:	604a      	str	r2, [r1, #4]
 8025dfa:	608a      	str	r2, [r1, #8]
 8025dfc:	f89d 1000 	ldrb.w	r1, [sp]
 8025e00:	2900      	cmp	r1, #0
 8025e02:	d002      	beq.n	8025e0a <HCI_UnRegisterCallback+0x6a>
 8025e04:	68c0      	ldr	r0, [r0, #12]
 8025e06:	f7ed fa6c 	bl	80132e2 <BTPS_ReleaseMutex>
 8025e0a:	bd38      	pop	{r3, r4, r5, pc}
 8025e0c:	2000003c 	.word	0x2000003c

Disassembly of section i.SearchDriverEntry:

08025e10 <SearchDriverEntry>:
 8025e10:	b503      	push	{r0, r1, lr}
 8025e12:	b081      	sub	sp, #4
 8025e14:	2370      	movs	r3, #112	; 0x70
 8025e16:	9000      	str	r0, [sp, #0]
 8025e18:	2200      	movs	r2, #0
 8025e1a:	a902      	add	r1, sp, #8
 8025e1c:	2007      	movs	r0, #7
 8025e1e:	f7f3 f98c 	bl	801913a <BSC_SearchGenericListEntry>
 8025e22:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SendHCIPacketToLowerDriver:

08025e24 <SendHCIPacketToLowerDriver>:
 8025e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e28:	0004      	movs	r4, r0
 8025e2a:	f06f 0609 	mvn.w	r6, #9
 8025e2e:	d067      	beq.n	8025f00 <SendHCIPacketToLowerDriver+0xdc>
 8025e30:	2201      	movs	r2, #1
 8025e32:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8025e36:	b179      	cbz	r1, 8025e58 <SendHCIPacketToLowerDriver+0x34>
 8025e38:	6888      	ldr	r0, [r1, #8]
 8025e3a:	7800      	ldrb	r0, [r0, #0]
 8025e3c:	2801      	cmp	r0, #1
 8025e3e:	d001      	beq.n	8025e44 <SendHCIPacketToLowerDriver+0x20>
 8025e40:	460d      	mov	r5, r1
 8025e42:	e022      	b.n	8025e8a <SendHCIPacketToLowerDriver+0x66>
 8025e44:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8025e48:	4298      	cmp	r0, r3
 8025e4a:	d258      	bcs.n	8025efe <SendHCIPacketToLowerDriver+0xda>
 8025e4c:	690b      	ldr	r3, [r1, #16]
 8025e4e:	b10b      	cbz	r3, 8025e54 <SendHCIPacketToLowerDriver+0x30>
 8025e50:	1c40      	adds	r0, r0, #1
 8025e52:	61a0      	str	r0, [r4, #24]
 8025e54:	460d      	mov	r5, r1
 8025e56:	e017      	b.n	8025e88 <SendHCIPacketToLowerDriver+0x64>
 8025e58:	2000      	movs	r0, #0
 8025e5a:	4605      	mov	r5, r0
 8025e5c:	b15f      	cbz	r7, 8025e76 <SendHCIPacketToLowerDriver+0x52>
 8025e5e:	683d      	ldr	r5, [r7, #0]
 8025e60:	e000      	b.n	8025e64 <SendHCIPacketToLowerDriver+0x40>
 8025e62:	69ad      	ldr	r5, [r5, #24]
 8025e64:	b13d      	cbz	r5, 8025e76 <SendHCIPacketToLowerDriver+0x52>
 8025e66:	b118      	cbz	r0, 8025e70 <SendHCIPacketToLowerDriver+0x4c>
 8025e68:	6829      	ldr	r1, [r5, #0]
 8025e6a:	4281      	cmp	r1, r0
 8025e6c:	d1f9      	bne.n	8025e62 <SendHCIPacketToLowerDriver+0x3e>
 8025e6e:	e002      	b.n	8025e76 <SendHCIPacketToLowerDriver+0x52>
 8025e70:	7929      	ldrb	r1, [r5, #4]
 8025e72:	2900      	cmp	r1, #0
 8025e74:	d1f5      	bne.n	8025e62 <SendHCIPacketToLowerDriver+0x3e>
 8025e76:	b375      	cbz	r5, 8025ed6 <SendHCIPacketToLowerDriver+0xb2>
 8025e78:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8025e7c:	4288      	cmp	r0, r1
 8025e7e:	d23e      	bcs.n	8025efe <SendHCIPacketToLowerDriver+0xda>
 8025e80:	6929      	ldr	r1, [r5, #16]
 8025e82:	b109      	cbz	r1, 8025e88 <SendHCIPacketToLowerDriver+0x64>
 8025e84:	1c40      	adds	r0, r0, #1
 8025e86:	61a0      	str	r0, [r4, #24]
 8025e88:	712a      	strb	r2, [r5, #4]
 8025e8a:	2101      	movs	r1, #1
 8025e8c:	4620      	mov	r0, r4
 8025e8e:	68aa      	ldr	r2, [r5, #8]
 8025e90:	f7ff fc52 	bl	8025738 <DispatchDebugPacketCallbacks>
 8025e94:	7920      	ldrb	r0, [r4, #4]
 8025e96:	bb88      	cbnz	r0, 8025efc <SendHCIPacketToLowerDriver+0xd8>
 8025e98:	481b      	ldr	r0, [pc, #108]	; (8025f08 <SendHCIPacketToLowerDriver+0xe4>)
 8025e9a:	7840      	ldrb	r0, [r0, #1]
 8025e9c:	b370      	cbz	r0, 8025efc <SendHCIPacketToLowerDriver+0xd8>
 8025e9e:	68a0      	ldr	r0, [r4, #8]
 8025ea0:	b360      	cbz	r0, 8025efc <SendHCIPacketToLowerDriver+0xd8>
 8025ea2:	2200      	movs	r2, #0
 8025ea4:	68a9      	ldr	r1, [r5, #8]
 8025ea6:	f000 fbf5 	bl	8026694 <SendCommPacket>
 8025eaa:	4606      	mov	r6, r0
 8025eac:	68a8      	ldr	r0, [r5, #8]
 8025eae:	7800      	ldrb	r0, [r0, #0]
 8025eb0:	2801      	cmp	r0, #1
 8025eb2:	d111      	bne.n	8025ed8 <SendHCIPacketToLowerDriver+0xb4>
 8025eb4:	6928      	ldr	r0, [r5, #16]
 8025eb6:	b178      	cbz	r0, 8025ed8 <SendHCIPacketToLowerDriver+0xb4>
 8025eb8:	2e00      	cmp	r6, #0
 8025eba:	da21      	bge.n	8025f00 <SendHCIPacketToLowerDriver+0xdc>
 8025ebc:	4638      	mov	r0, r7
 8025ebe:	6829      	ldr	r1, [r5, #0]
 8025ec0:	f7ff fc30 	bl	8025724 <DeletePacketQueueEntry>
 8025ec4:	b190      	cbz	r0, 8025eec <SendHCIPacketToLowerDriver+0xc8>
 8025ec6:	6901      	ldr	r1, [r0, #16]
 8025ec8:	b111      	cbz	r1, 8025ed0 <SendHCIPacketToLowerDriver+0xac>
 8025eca:	69a1      	ldr	r1, [r4, #24]
 8025ecc:	1e49      	subs	r1, r1, #1
 8025ece:	61a1      	str	r1, [r4, #24]
 8025ed0:	f7f2 ff01 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8025ed4:	e014      	b.n	8025f00 <SendHCIPacketToLowerDriver+0xdc>
 8025ed6:	e012      	b.n	8025efe <SendHCIPacketToLowerDriver+0xda>
 8025ed8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8025edc:	4285      	cmp	r5, r0
 8025ede:	d00f      	beq.n	8025f00 <SendHCIPacketToLowerDriver+0xdc>
 8025ee0:	4638      	mov	r0, r7
 8025ee2:	6829      	ldr	r1, [r5, #0]
 8025ee4:	f7ff fc1e 	bl	8025724 <DeletePacketQueueEntry>
 8025ee8:	2800      	cmp	r0, #0
 8025eea:	d1f1      	bne.n	8025ed0 <SendHCIPacketToLowerDriver+0xac>
 8025eec:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8025ef0:	4288      	cmp	r0, r1
 8025ef2:	d205      	bcs.n	8025f00 <SendHCIPacketToLowerDriver+0xdc>
 8025ef4:	2100      	movs	r1, #0
 8025ef6:	4620      	mov	r0, r4
 8025ef8:	f7ff ff94 	bl	8025e24 <SendHCIPacketToLowerDriver>
 8025efc:	e000      	b.n	8025f00 <SendHCIPacketToLowerDriver+0xdc>
 8025efe:	2601      	movs	r6, #1
 8025f00:	4630      	mov	r0, r6
 8025f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f06:	0000      	.short	0x0000
 8025f08:	2000003c 	.word	0x2000003c

Disassembly of section i.ChangeCommSCOConfiguration:

08025f0c <ChangeCommSCOConfiguration>:
 8025f0c:	b570      	push	{r4, r5, r6, lr}
 8025f0e:	4605      	mov	r5, r0
 8025f10:	4809      	ldr	r0, [pc, #36]	; (8025f38 <ChangeCommSCOConfiguration+0x2c>)
 8025f12:	f06f 0405 	mvn.w	r4, #5
 8025f16:	7800      	ldrb	r0, [r0, #0]
 8025f18:	b160      	cbz	r0, 8025f34 <ChangeCommSCOConfiguration+0x28>
 8025f1a:	b15d      	cbz	r5, 8025f34 <ChangeCommSCOConfiguration+0x28>
 8025f1c:	f7f2 fd86 	bl	8018a2c <BSC_AcquireListLock>
 8025f20:	b140      	cbz	r0, 8025f34 <ChangeCommSCOConfiguration+0x28>
 8025f22:	4805      	ldr	r0, [pc, #20]	; (8025f38 <ChangeCommSCOConfiguration+0x2c>)
 8025f24:	4629      	mov	r1, r5
 8025f26:	3008      	adds	r0, #8
 8025f28:	f000 fbaa 	bl	8026680 <SearchCOMEntry>
 8025f2c:	b100      	cbz	r0, 8025f30 <ChangeCommSCOConfiguration+0x24>
 8025f2e:	2400      	movs	r4, #0
 8025f30:	f7f3 f8e0 	bl	80190f4 <BSC_ReleaseListLock>
 8025f34:	4620      	mov	r0, r4
 8025f36:	bd70      	pop	{r4, r5, r6, pc}
 8025f38:	20000048 	.word	0x20000048

Disassembly of section i.CleanupCOMMList:

08025f3c <CleanupCOMMList>:
 8025f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025f40:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8025f80 <CleanupCOMMList+0x44>
 8025f44:	2700      	movs	r7, #0
 8025f46:	f898 0000 	ldrb.w	r0, [r8]
 8025f4a:	b198      	cbz	r0, 8025f74 <CleanupCOMMList+0x38>
 8025f4c:	f7f2 fd6e 	bl	8018a2c <BSC_AcquireListLock>
 8025f50:	b180      	cbz	r0, 8025f74 <CleanupCOMMList+0x38>
 8025f52:	f108 0608 	add.w	r6, r8, #8
 8025f56:	6834      	ldr	r4, [r6, #0]
 8025f58:	e007      	b.n	8025f6a <CleanupCOMMList+0x2e>
 8025f5a:	4625      	mov	r5, r4
 8025f5c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8025f5e:	4628      	mov	r0, r5
 8025f60:	f000 f83c 	bl	8025fdc <FreeCOMStructureResources>
 8025f64:	4628      	mov	r0, r5
 8025f66:	f7ed fa43 	bl	80133f0 <BTPS_FreeMemory>
 8025f6a:	2c00      	cmp	r4, #0
 8025f6c:	d1f5      	bne.n	8025f5a <CleanupCOMMList+0x1e>
 8025f6e:	6037      	str	r7, [r6, #0]
 8025f70:	f7f3 f8c0 	bl	80190f4 <BSC_ReleaseListLock>
 8025f74:	f8c8 7008 	str.w	r7, [r8, #8]
 8025f78:	f888 7000 	strb.w	r7, [r8]
 8025f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f80:	20000048 	.word	0x20000048

Disassembly of section i.CloseComm:

08025f84 <CloseComm>:
 8025f84:	b510      	push	{r4, lr}
 8025f86:	4604      	mov	r4, r0
 8025f88:	480e      	ldr	r0, [pc, #56]	; (8025fc4 <CloseComm+0x40>)
 8025f8a:	7800      	ldrb	r0, [r0, #0]
 8025f8c:	2800      	cmp	r0, #0
 8025f8e:	d017      	beq.n	8025fc0 <CloseComm+0x3c>
 8025f90:	2c00      	cmp	r4, #0
 8025f92:	d015      	beq.n	8025fc0 <CloseComm+0x3c>
 8025f94:	f7f2 fd4a 	bl	8018a2c <BSC_AcquireListLock>
 8025f98:	2800      	cmp	r0, #0
 8025f9a:	d011      	beq.n	8025fc0 <CloseComm+0x3c>
 8025f9c:	4809      	ldr	r0, [pc, #36]	; (8025fc4 <CloseComm+0x40>)
 8025f9e:	4621      	mov	r1, r4
 8025fa0:	3008      	adds	r0, #8
 8025fa2:	f000 f811 	bl	8025fc8 <DeleteCOMEntry>
 8025fa6:	4604      	mov	r4, r0
 8025fa8:	f7f3 f8a4 	bl	80190f4 <BSC_ReleaseListLock>
 8025fac:	2c00      	cmp	r4, #0
 8025fae:	d007      	beq.n	8025fc0 <CloseComm+0x3c>
 8025fb0:	4620      	mov	r0, r4
 8025fb2:	f000 f813 	bl	8025fdc <FreeCOMStructureResources>
 8025fb6:	4620      	mov	r0, r4
 8025fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025fbc:	f7ed ba18 	b.w	80133f0 <BTPS_FreeMemory>
 8025fc0:	bd10      	pop	{r4, pc}
 8025fc2:	0000      	.short	0x0000
 8025fc4:	20000048 	.word	0x20000048

Disassembly of section i.DeleteCOMEntry:

08025fc8 <DeleteCOMEntry>:
 8025fc8:	b503      	push	{r0, r1, lr}
 8025fca:	b081      	sub	sp, #4
 8025fcc:	2338      	movs	r3, #56	; 0x38
 8025fce:	9000      	str	r0, [sp, #0]
 8025fd0:	2200      	movs	r2, #0
 8025fd2:	a902      	add	r1, sp, #8
 8025fd4:	2007      	movs	r0, #7
 8025fd6:	f7f2 fdd1 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8025fda:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.FreeCOMStructureResources:

08025fdc <FreeCOMStructureResources>:
 8025fdc:	b570      	push	{r4, r5, r6, lr}
 8025fde:	0004      	movs	r4, r0
 8025fe0:	d01b      	beq.n	802601a <FreeCOMStructureResources+0x3e>
 8025fe2:	6860      	ldr	r0, [r4, #4]
 8025fe4:	b138      	cbz	r0, 8025ff6 <FreeCOMStructureResources+0x1a>
 8025fe6:	f7db fde5 	bl	8001bb4 <HCITR_COMClose>
 8025fea:	68e0      	ldr	r0, [r4, #12]
 8025fec:	b118      	cbz	r0, 8025ff6 <FreeCOMStructureResources+0x1a>
 8025fee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8025ff2:	f7ed f982 	bl	80132fa <BTPS_WaitEvent>
 8025ff6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8025ff8:	2500      	movs	r5, #0
 8025ffa:	b128      	cbz	r0, 8026008 <FreeCOMStructureResources+0x2c>
 8025ffc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8025ffe:	6841      	ldr	r1, [r0, #4]
 8026000:	4610      	mov	r0, r2
 8026002:	4788      	blx	r1
 8026004:	62a5      	str	r5, [r4, #40]	; 0x28
 8026006:	62e5      	str	r5, [r4, #44]	; 0x2c
 8026008:	6065      	str	r5, [r4, #4]
 802600a:	61a5      	str	r5, [r4, #24]
 802600c:	7725      	strb	r5, [r4, #28]
 802600e:	7225      	strb	r5, [r4, #8]
 8026010:	68e0      	ldr	r0, [r4, #12]
 8026012:	b108      	cbz	r0, 8026018 <FreeCOMStructureResources+0x3c>
 8026014:	f7ed fa36 	bl	8013484 <BTPS_CloseEvent>
 8026018:	60e5      	str	r5, [r4, #12]
 802601a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCITR_COMDataCallback_UART:

0802601c <HCITR_COMDataCallback_UART>:
 802601c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8026020:	4616      	mov	r6, r2
 8026022:	460f      	mov	r7, r1
 8026024:	2b00      	cmp	r3, #0
 8026026:	d075      	beq.n	8026114 <HCITR_COMDataCallback_UART+0xf8>
 8026028:	2001      	movs	r0, #1
 802602a:	461c      	mov	r4, r3
 802602c:	7258      	strb	r0, [r3, #9]
 802602e:	f04f 0900 	mov.w	r9, #0
 8026032:	2f00      	cmp	r7, #0
 8026034:	d06f      	beq.n	8026116 <HCITR_COMDataCallback_UART+0xfa>
 8026036:	2e00      	cmp	r6, #0
 8026038:	d0fc      	beq.n	8026034 <HCITR_COMDataCallback_UART+0x18>
 802603a:	7a20      	ldrb	r0, [r4, #8]
 802603c:	2800      	cmp	r0, #0
 802603e:	d00e      	beq.n	802605e <HCITR_COMDataCallback_UART+0x42>
 8026040:	7aa0      	ldrb	r0, [r4, #10]
 8026042:	2800      	cmp	r0, #0
 8026044:	d10b      	bne.n	802605e <HCITR_COMDataCallback_UART+0x42>
 8026046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8026048:	b111      	cbz	r1, 8026050 <HCITR_COMDataCallback_UART+0x34>
 802604a:	7808      	ldrb	r0, [r1, #0]
 802604c:	07c0      	lsls	r0, r0, #31
 802604e:	d002      	beq.n	8026056 <HCITR_COMDataCallback_UART+0x3a>
 8026050:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026052:	b12d      	cbz	r5, 8026060 <HCITR_COMDataCallback_UART+0x44>
 8026054:	e005      	b.n	8026062 <HCITR_COMDataCallback_UART+0x46>
 8026056:	694b      	ldr	r3, [r1, #20]
 8026058:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802605a:	4639      	mov	r1, r7
 802605c:	4798      	blx	r3
 802605e:	e0ca      	b.n	80261f6 <HCITR_COMDataCallback_UART+0x1da>
 8026060:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8026062:	f04f 0a07 	mov.w	sl, #7
 8026066:	f04f 0b08 	mov.w	fp, #8
 802606a:	69a0      	ldr	r0, [r4, #24]
 802606c:	7832      	ldrb	r2, [r6, #0]
 802606e:	1c41      	adds	r1, r0, #1
 8026070:	61a1      	str	r1, [r4, #24]
 8026072:	542a      	strb	r2, [r5, r0]
 8026074:	7f20      	ldrb	r0, [r4, #28]
 8026076:	2808      	cmp	r0, #8
 8026078:	d21c      	bcs.n	80260b4 <HCITR_COMDataCallback_UART+0x98>
 802607a:	e8df f000 	tbb	[pc, r0]
 802607e:	5c04      	.short	0x5c04
 8026080:	5e5c5a26 	.word	0x5e5c5a26
 8026084:	ab7b      	.short	0xab7b
 8026086:	7830      	ldrb	r0, [r6, #0]
 8026088:	7028      	strb	r0, [r5, #0]
 802608a:	7830      	ldrb	r0, [r6, #0]
 802608c:	2804      	cmp	r0, #4
 802608e:	d012      	beq.n	80260b6 <HCITR_COMDataCallback_UART+0x9a>
 8026090:	2802      	cmp	r0, #2
 8026092:	d014      	beq.n	80260be <HCITR_COMDataCallback_UART+0xa2>
 8026094:	2803      	cmp	r0, #3
 8026096:	d012      	beq.n	80260be <HCITR_COMDataCallback_UART+0xa2>
 8026098:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 802609a:	b149      	cbz	r1, 80260b0 <HCITR_COMDataCallback_UART+0x94>
 802609c:	694b      	ldr	r3, [r1, #20]
 802609e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80260a0:	4632      	mov	r2, r6
 80260a2:	4639      	mov	r1, r7
 80260a4:	4798      	blx	r3
 80260a6:	2800      	cmp	r0, #0
 80260a8:	dd02      	ble.n	80260b0 <HCITR_COMDataCallback_UART+0x94>
 80260aa:	1e40      	subs	r0, r0, #1
 80260ac:	4406      	add	r6, r0
 80260ae:	1a3f      	subs	r7, r7, r0
 80260b0:	f8c4 9018 	str.w	r9, [r4, #24]
 80260b4:	e096      	b.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 80260b6:	2001      	movs	r0, #1
 80260b8:	f8c4 b018 	str.w	fp, [r4, #24]
 80260bc:	e002      	b.n	80260c4 <HCITR_COMDataCallback_UART+0xa8>
 80260be:	2003      	movs	r0, #3
 80260c0:	f8c4 b018 	str.w	fp, [r4, #24]
 80260c4:	7720      	strb	r0, [r4, #28]
 80260c6:	7830      	ldrb	r0, [r6, #0]
 80260c8:	e02f      	b.n	802612a <HCITR_COMDataCallback_UART+0x10e>
 80260ca:	7830      	ldrb	r0, [r6, #0]
 80260cc:	6220      	str	r0, [r4, #32]
 80260ce:	7829      	ldrb	r1, [r5, #0]
 80260d0:	2902      	cmp	r1, #2
 80260d2:	d012      	beq.n	80260fa <HCITR_COMDataCallback_UART+0xde>
 80260d4:	b358      	cbz	r0, 802612e <HCITR_COMDataCallback_UART+0x112>
 80260d6:	2904      	cmp	r1, #4
 80260d8:	d011      	beq.n	80260fe <HCITR_COMDataCallback_UART+0xe2>
 80260da:	1cc0      	adds	r0, r0, #3
 80260dc:	6068      	str	r0, [r5, #4]
 80260de:	2006      	movs	r0, #6
 80260e0:	7720      	strb	r0, [r4, #28]
 80260e2:	6868      	ldr	r0, [r5, #4]
 80260e4:	300b      	adds	r0, #11
 80260e6:	f7ed f969 	bl	80133bc <BTPS_AllocateMemory>
 80260ea:	6260      	str	r0, [r4, #36]	; 0x24
 80260ec:	b148      	cbz	r0, 8026102 <HCITR_COMDataCallback_UART+0xe6>
 80260ee:	4629      	mov	r1, r5
 80260f0:	69a2      	ldr	r2, [r4, #24]
 80260f2:	f7ed f9e0 	bl	80134b6 <BTPS_MemCopy>
 80260f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80260f8:	e074      	b.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 80260fa:	2005      	movs	r0, #5
 80260fc:	e068      	b.n	80261d0 <HCITR_COMDataCallback_UART+0x1b4>
 80260fe:	1c80      	adds	r0, r0, #2
 8026100:	e7ec      	b.n	80260dc <HCITR_COMDataCallback_UART+0xc0>
 8026102:	7828      	ldrb	r0, [r5, #0]
 8026104:	2804      	cmp	r0, #4
 8026106:	d130      	bne.n	802616a <HCITR_COMDataCallback_UART+0x14e>
 8026108:	7a28      	ldrb	r0, [r5, #8]
 802610a:	280e      	cmp	r0, #14
 802610c:	d004      	beq.n	8026118 <HCITR_COMDataCallback_UART+0xfc>
 802610e:	280f      	cmp	r0, #15
 8026110:	d004      	beq.n	802611c <HCITR_COMDataCallback_UART+0x100>
 8026112:	e02a      	b.n	802616a <HCITR_COMDataCallback_UART+0x14e>
 8026114:	e071      	b.n	80261fa <HCITR_COMDataCallback_UART+0x1de>
 8026116:	e06a      	b.n	80261ee <HCITR_COMDataCallback_UART+0x1d2>
 8026118:	2003      	movs	r0, #3
 802611a:	e000      	b.n	802611e <HCITR_COMDataCallback_UART+0x102>
 802611c:	2004      	movs	r0, #4
 802611e:	6220      	str	r0, [r4, #32]
 8026120:	1c80      	adds	r0, r0, #2
 8026122:	6068      	str	r0, [r5, #4]
 8026124:	7828      	ldrb	r0, [r5, #0]
 8026126:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 802612a:	7028      	strb	r0, [r5, #0]
 802612c:	e05a      	b.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 802612e:	4648      	mov	r0, r9
 8026130:	e04d      	b.n	80261ce <HCITR_COMDataCallback_UART+0x1b2>
 8026132:	2004      	movs	r0, #4
 8026134:	e04c      	b.n	80261d0 <HCITR_COMDataCallback_UART+0x1b4>
 8026136:	2002      	movs	r0, #2
 8026138:	e04a      	b.n	80261d0 <HCITR_COMDataCallback_UART+0x1b4>
 802613a:	7831      	ldrb	r1, [r6, #0]
 802613c:	6a20      	ldr	r0, [r4, #32]
 802613e:	eb10 2001 	adds.w	r0, r0, r1, lsl #8
 8026142:	6220      	str	r0, [r4, #32]
 8026144:	d0f3      	beq.n	802612e <HCITR_COMDataCallback_UART+0x112>
 8026146:	1d00      	adds	r0, r0, #4
 8026148:	6068      	str	r0, [r5, #4]
 802614a:	6a21      	ldr	r1, [r4, #32]
 802614c:	f5b1 6f81 	cmp.w	r1, #1032	; 0x408
 8026150:	d80b      	bhi.n	802616a <HCITR_COMDataCallback_UART+0x14e>
 8026152:	300b      	adds	r0, #11
 8026154:	f7ed f932 	bl	80133bc <BTPS_AllocateMemory>
 8026158:	6260      	str	r0, [r4, #36]	; 0x24
 802615a:	b130      	cbz	r0, 802616a <HCITR_COMDataCallback_UART+0x14e>
 802615c:	4629      	mov	r1, r5
 802615e:	69a2      	ldr	r2, [r4, #24]
 8026160:	f7ed f9a9 	bl	80134b6 <BTPS_MemCopy>
 8026164:	2006      	movs	r0, #6
 8026166:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8026168:	e032      	b.n	80261d0 <HCITR_COMDataCallback_UART+0x1b4>
 802616a:	f8c4 9018 	str.w	r9, [r4, #24]
 802616e:	f884 a01c 	strb.w	sl, [r4, #28]
 8026172:	e037      	b.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 8026174:	6a20      	ldr	r0, [r4, #32]
 8026176:	1e40      	subs	r0, r0, #1
 8026178:	6220      	str	r0, [r4, #32]
 802617a:	d01a      	beq.n	80261b2 <HCITR_COMDataCallback_UART+0x196>
 802617c:	2f01      	cmp	r7, #1
 802617e:	d931      	bls.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 8026180:	1e79      	subs	r1, r7, #1
 8026182:	4288      	cmp	r0, r1
 8026184:	d900      	bls.n	8026188 <HCITR_COMDataCallback_UART+0x16c>
 8026186:	1e78      	subs	r0, r7, #1
 8026188:	ea5f 0800 	movs.w	r8, r0
 802618c:	d02a      	beq.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 802618e:	69a0      	ldr	r0, [r4, #24]
 8026190:	4642      	mov	r2, r8
 8026192:	4428      	add	r0, r5
 8026194:	1c71      	adds	r1, r6, #1
 8026196:	f7ed f98e 	bl	80134b6 <BTPS_MemCopy>
 802619a:	69a1      	ldr	r1, [r4, #24]
 802619c:	4446      	add	r6, r8
 802619e:	eb01 0008 	add.w	r0, r1, r8
 80261a2:	61a0      	str	r0, [r4, #24]
 80261a4:	6a21      	ldr	r1, [r4, #32]
 80261a6:	eba7 0708 	sub.w	r7, r7, r8
 80261aa:	ebb1 0008 	subs.w	r0, r1, r8
 80261ae:	6220      	str	r0, [r4, #32]
 80261b0:	d118      	bne.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 80261b2:	6923      	ldr	r3, [r4, #16]
 80261b4:	b123      	cbz	r3, 80261c0 <HCITR_COMDataCallback_UART+0x1a4>
 80261b6:	4629      	mov	r1, r5
 80261b8:	6962      	ldr	r2, [r4, #20]
 80261ba:	6820      	ldr	r0, [r4, #0]
 80261bc:	4798      	blx	r3
 80261be:	e002      	b.n	80261c6 <HCITR_COMDataCallback_UART+0x1aa>
 80261c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80261c2:	f7ed f915 	bl	80133f0 <BTPS_FreeMemory>
 80261c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80261ca:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80261cc:	4648      	mov	r0, r9
 80261ce:	61a0      	str	r0, [r4, #24]
 80261d0:	7720      	strb	r0, [r4, #28]
 80261d2:	e007      	b.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 80261d4:	6a20      	ldr	r0, [r4, #32]
 80261d6:	f8c4 b018 	str.w	fp, [r4, #24]
 80261da:	1e40      	subs	r0, r0, #1
 80261dc:	6220      	str	r0, [r4, #32]
 80261de:	d101      	bne.n	80261e4 <HCITR_COMDataCallback_UART+0x1c8>
 80261e0:	f884 901c 	strb.w	r9, [r4, #28]
 80261e4:	1c76      	adds	r6, r6, #1
 80261e6:	1e7f      	subs	r7, r7, #1
 80261e8:	f47f af3f 	bne.w	802606a <HCITR_COMDataCallback_UART+0x4e>
 80261ec:	e003      	b.n	80261f6 <HCITR_COMDataCallback_UART+0x1da>
 80261ee:	68e0      	ldr	r0, [r4, #12]
 80261f0:	b108      	cbz	r0, 80261f6 <HCITR_COMDataCallback_UART+0x1da>
 80261f2:	f7ed f8ca 	bl	801338a <BTPS_SetEvent>
 80261f6:	f884 9009 	strb.w	r9, [r4, #9]
 80261fa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

Disassembly of section i.InitializeCOMMList:

08026200 <InitializeCOMMList>:
 8026200:	4804      	ldr	r0, [pc, #16]	; (8026214 <InitializeCOMMList+0x14>)
 8026202:	7801      	ldrb	r1, [r0, #0]
 8026204:	b919      	cbnz	r1, 802620e <InitializeCOMMList+0xe>
 8026206:	2100      	movs	r1, #0
 8026208:	6081      	str	r1, [r0, #8]
 802620a:	2101      	movs	r1, #1
 802620c:	7001      	strb	r1, [r0, #0]
 802620e:	b2c8      	uxtb	r0, r1
 8026210:	4770      	bx	lr
 8026212:	0000      	.short	0x0000
 8026214:	20000048 	.word	0x20000048

Disassembly of section i.InitializeProtocol:

08026218 <InitializeProtocol>:
 8026218:	b570      	push	{r4, r5, r6, lr}
 802621a:	4604      	mov	r4, r0
 802621c:	2000      	movs	r0, #0
 802621e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8026220:	4605      	mov	r5, r0
 8026222:	62a0      	str	r0, [r4, #40]	; 0x28
 8026224:	290a      	cmp	r1, #10
 8026226:	d21a      	bcs.n	802625e <InitializeProtocol+0x46>
 8026228:	e8df f001 	tbb	[pc, r1]
 802622c:	19190505 	.word	0x19190505
 8026230:	07071919 	.word	0x07071919
 8026234:	0f0f      	.short	0x0f0f
 8026236:	2501      	movs	r5, #1
 8026238:	e011      	b.n	802625e <InitializeProtocol+0x46>
 802623a:	4621      	mov	r1, r4
 802623c:	4809      	ldr	r0, [pc, #36]	; (8026264 <InitializeProtocol+0x4c>)
 802623e:	f000 fa96 	bl	802676e <HCILL_Initialize>
 8026242:	62e0      	str	r0, [r4, #44]	; 0x2c
 8026244:	b158      	cbz	r0, 802625e <InitializeProtocol+0x46>
 8026246:	4808      	ldr	r0, [pc, #32]	; (8026268 <InitializeProtocol+0x50>)
 8026248:	e007      	b.n	802625a <InitializeProtocol+0x42>
 802624a:	4621      	mov	r1, r4
 802624c:	4805      	ldr	r0, [pc, #20]	; (8026264 <InitializeProtocol+0x4c>)
 802624e:	f000 fffb 	bl	8027248 <TWUART_Initialize>
 8026252:	62e0      	str	r0, [r4, #44]	; 0x2c
 8026254:	b118      	cbz	r0, 802625e <InitializeProtocol+0x46>
 8026256:	4804      	ldr	r0, [pc, #16]	; (8026268 <InitializeProtocol+0x50>)
 8026258:	3018      	adds	r0, #24
 802625a:	62a0      	str	r0, [r4, #40]	; 0x28
 802625c:	e7eb      	b.n	8026236 <InitializeProtocol+0x1e>
 802625e:	4628      	mov	r0, r5
 8026260:	bd70      	pop	{r4, r5, r6, pc}
 8026262:	0000      	.short	0x0000
 8026264:	08026375 	.word	0x08026375
 8026268:	080397c4 	.word	0x080397c4

Disassembly of section i.OpenComm:

0802626c <OpenComm>:
 802626c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026270:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 802636c <OpenComm+0x100>
 8026274:	4606      	mov	r6, r0
 8026276:	4691      	mov	r9, r2
 8026278:	f898 0000 	ldrb.w	r0, [r8]
 802627c:	460f      	mov	r7, r1
 802627e:	f06f 0504 	mvn.w	r5, #4
 8026282:	b188      	cbz	r0, 80262a8 <OpenComm+0x3c>
 8026284:	b186      	cbz	r6, 80262a8 <OpenComm+0x3c>
 8026286:	6830      	ldr	r0, [r6, #0]
 8026288:	281c      	cmp	r0, #28
 802628a:	d30d      	bcc.n	80262a8 <OpenComm+0x3c>
 802628c:	b167      	cbz	r7, 80262a8 <OpenComm+0x3c>
 802628e:	7b30      	ldrb	r0, [r6, #12]
 8026290:	b168      	cbz	r0, 80262ae <OpenComm+0x42>
 8026292:	2801      	cmp	r0, #1
 8026294:	d00b      	beq.n	80262ae <OpenComm+0x42>
 8026296:	2806      	cmp	r0, #6
 8026298:	d009      	beq.n	80262ae <OpenComm+0x42>
 802629a:	2807      	cmp	r0, #7
 802629c:	d007      	beq.n	80262ae <OpenComm+0x42>
 802629e:	2808      	cmp	r0, #8
 80262a0:	d005      	beq.n	80262ae <OpenComm+0x42>
 80262a2:	2809      	cmp	r0, #9
 80262a4:	d003      	beq.n	80262ae <OpenComm+0x42>
 80262a6:	1eed      	subs	r5, r5, #3
 80262a8:	4628      	mov	r0, r5
 80262aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80262ae:	f7f2 fbbd 	bl	8018a2c <BSC_AcquireListLock>
 80262b2:	b3e8      	cbz	r0, 8026330 <OpenComm+0xc4>
 80262b4:	204d      	movs	r0, #77	; 0x4d
 80262b6:	f7ed f881 	bl	80133bc <BTPS_AllocateMemory>
 80262ba:	0004      	movs	r4, r0
 80262bc:	d04e      	beq.n	802635c <OpenComm+0xf0>
 80262be:	223c      	movs	r2, #60	; 0x3c
 80262c0:	2100      	movs	r1, #0
 80262c2:	f7ed f8fc 	bl	80134be <BTPS_MemInitialize>
 80262c6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80262ca:	4641      	mov	r1, r8
 80262cc:	1c40      	adds	r0, r0, #1
 80262ce:	f8c8 0004 	str.w	r0, [r8, #4]
 80262d2:	d501      	bpl.n	80262d8 <OpenComm+0x6c>
 80262d4:	2001      	movs	r0, #1
 80262d6:	6048      	str	r0, [r1, #4]
 80262d8:	6020      	str	r0, [r4, #0]
 80262da:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80262de:	6360      	str	r0, [r4, #52]	; 0x34
 80262e0:	e9c4 7904 	strd	r7, r9, [r4, #16]
 80262e4:	2700      	movs	r7, #0
 80262e6:	7227      	strb	r7, [r4, #8]
 80262e8:	4638      	mov	r0, r7
 80262ea:	f7ed f899 	bl	8013420 <BTPS_CreateEvent>
 80262ee:	60e0      	str	r0, [r4, #12]
 80262f0:	b330      	cbz	r0, 8026340 <OpenComm+0xd4>
 80262f2:	4b1e      	ldr	r3, [pc, #120]	; (802636c <OpenComm+0x100>)
 80262f4:	2238      	movs	r2, #56	; 0x38
 80262f6:	3308      	adds	r3, #8
 80262f8:	2100      	movs	r1, #0
 80262fa:	2007      	movs	r0, #7
 80262fc:	9400      	str	r4, [sp, #0]
 80262fe:	f7f2 fbd7 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8026302:	b1e8      	cbz	r0, 8026340 <OpenComm+0xd4>
 8026304:	7727      	strb	r7, [r4, #28]
 8026306:	4622      	mov	r2, r4
 8026308:	4919      	ldr	r1, [pc, #100]	; (8026370 <OpenComm+0x104>)
 802630a:	4630      	mov	r0, r6
 802630c:	f7db fbbe 	bl	8001a8c <HCITR_COMOpen>
 8026310:	6060      	str	r0, [r4, #4]
 8026312:	2800      	cmp	r0, #0
 8026314:	dd15      	ble.n	8026342 <OpenComm+0xd6>
 8026316:	6830      	ldr	r0, [r6, #0]
 8026318:	281c      	cmp	r0, #28
 802631a:	d106      	bne.n	802632a <OpenComm+0xbe>
 802631c:	6930      	ldr	r0, [r6, #16]
 802631e:	f241 3188 	movw	r1, #5000	; 0x1388
 8026322:	4288      	cmp	r0, r1
 8026324:	d801      	bhi.n	802632a <OpenComm+0xbe>
 8026326:	f7ec ffa0 	bl	801326a <BTPS_Delay>
 802632a:	7b31      	ldrb	r1, [r6, #12]
 802632c:	4620      	mov	r0, r4
 802632e:	e000      	b.n	8026332 <OpenComm+0xc6>
 8026330:	e014      	b.n	802635c <OpenComm+0xf0>
 8026332:	f7ff ff71 	bl	8026218 <InitializeProtocol>
 8026336:	7220      	strb	r0, [r4, #8]
 8026338:	b120      	cbz	r0, 8026344 <OpenComm+0xd8>
 802633a:	6825      	ldr	r5, [r4, #0]
 802633c:	2d00      	cmp	r5, #0
 802633e:	db01      	blt.n	8026344 <OpenComm+0xd8>
 8026340:	e005      	b.n	802634e <OpenComm+0xe2>
 8026342:	6067      	str	r7, [r4, #4]
 8026344:	4809      	ldr	r0, [pc, #36]	; (802636c <OpenComm+0x100>)
 8026346:	6821      	ldr	r1, [r4, #0]
 8026348:	3008      	adds	r0, #8
 802634a:	f7ff fe3d 	bl	8025fc8 <DeleteCOMEntry>
 802634e:	1d68      	adds	r0, r5, #5
 8026350:	d007      	beq.n	8026362 <OpenComm+0xf6>
 8026352:	2d00      	cmp	r5, #0
 8026354:	da02      	bge.n	802635c <OpenComm+0xf0>
 8026356:	4620      	mov	r0, r4
 8026358:	f7ed f84a 	bl	80133f0 <BTPS_FreeMemory>
 802635c:	f7f2 feca 	bl	80190f4 <BSC_ReleaseListLock>
 8026360:	e7a2      	b.n	80262a8 <OpenComm+0x3c>
 8026362:	4620      	mov	r0, r4
 8026364:	f7ff fe3a 	bl	8025fdc <FreeCOMStructureResources>
 8026368:	e7f5      	b.n	8026356 <OpenComm+0xea>
 802636a:	0000      	.short	0x0000
 802636c:	20000048 	.word	0x20000048
 8026370:	0802601d 	.word	0x0802601d

Disassembly of section i.ProtocolEventCallback:

08026374 <ProtocolEventCallback>:
 8026374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026378:	b087      	sub	sp, #28
 802637a:	0004      	movs	r4, r0
 802637c:	f06f 0801 	mvn.w	r8, #1
 8026380:	d047      	beq.n	8026412 <ProtocolEventCallback+0x9e>
 8026382:	2900      	cmp	r1, #0
 8026384:	d0fc      	beq.n	8026380 <ProtocolEventCallback+0xc>
 8026386:	7820      	ldrb	r0, [r4, #0]
 8026388:	2704      	movs	r7, #4
 802638a:	260c      	movs	r6, #12
 802638c:	460d      	mov	r5, r1
 802638e:	f04f 0900 	mov.w	r9, #0
 8026392:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8026396:	2807      	cmp	r0, #7
 8026398:	d27a      	bcs.n	8026490 <ProtocolEventCallback+0x11c>
 802639a:	e8df f000 	tbb	[pc, r0]
 802639e:	3b04      	.short	0x3b04
 80263a0:	998c7a54 	.word	0x998c7a54
 80263a4:	00d8      	.short	0x00d8
 80263a6:	6860      	ldr	r0, [r4, #4]
 80263a8:	2800      	cmp	r0, #0
 80263aa:	d0e9      	beq.n	8026380 <ProtocolEventCallback+0xc>
 80263ac:	68a1      	ldr	r1, [r4, #8]
 80263ae:	2900      	cmp	r1, #0
 80263b0:	d0e6      	beq.n	8026380 <ProtocolEventCallback+0xc>
 80263b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80263b6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80263ba:	f7ec ffff 	bl	80133bc <BTPS_AllocateMemory>
 80263be:	6328      	str	r0, [r5, #48]	; 0x30
 80263c0:	2800      	cmp	r0, #0
 80263c2:	d077      	beq.n	80264b4 <ProtocolEventCallback+0x140>
 80263c4:	6861      	ldr	r1, [r4, #4]
 80263c6:	6001      	str	r1, [r0, #0]
 80263c8:	46c8      	mov	r8, r9
 80263ca:	2000      	movs	r0, #0
 80263cc:	f04f 0908 	mov.w	r9, #8
 80263d0:	e019      	b.n	8026406 <ProtocolEventCallback+0x92>
 80263d2:	68a3      	ldr	r3, [r4, #8]
 80263d4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80263d8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80263dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80263e0:	f842 300c 	str.w	r3, [r2, ip]
 80263e4:	68a2      	ldr	r2, [r4, #8]
 80263e6:	f852 300c 	ldr.w	r3, [r2, ip]
 80263ea:	f8d5 c030 	ldr.w	ip, [r5, #48]	; 0x30
 80263ee:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 80263f2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80263f6:	f84c 3002 	str.w	r3, [ip, r2]
 80263fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80263fc:	f843 8001 	str.w	r8, [r3, r1]
 8026400:	68a1      	ldr	r1, [r4, #8]
 8026402:	5088      	str	r0, [r1, r2]
 8026404:	1c40      	adds	r0, r0, #1
 8026406:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8026408:	6811      	ldr	r1, [r2, #0]
 802640a:	4281      	cmp	r1, r0
 802640c:	d8e1      	bhi.n	80263d2 <ProtocolEventCallback+0x5e>
 802640e:	f04f 0800 	mov.w	r8, #0
 8026412:	e0b1      	b.n	8026578 <ProtocolEventCallback+0x204>
 8026414:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8026416:	2800      	cmp	r0, #0
 8026418:	d07c      	beq.n	8026514 <ProtocolEventCallback+0x1a0>
 802641a:	2400      	movs	r4, #0
 802641c:	4657      	mov	r7, sl
 802641e:	e009      	b.n	8026434 <ProtocolEventCallback+0xc0>
 8026420:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8026424:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8026428:	5841      	ldr	r1, [r0, r1]
 802642a:	b111      	cbz	r1, 8026432 <ProtocolEventCallback+0xbe>
 802642c:	4638      	mov	r0, r7
 802642e:	f7f3 fa31 	bl	8019894 <BTPS_StopTimer>
 8026432:	1c64      	adds	r4, r4, #1
 8026434:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8026436:	6801      	ldr	r1, [r0, #0]
 8026438:	42a1      	cmp	r1, r4
 802643a:	d8f1      	bhi.n	8026420 <ProtocolEventCallback+0xac>
 802643c:	f7ec ffd8 	bl	80133f0 <BTPS_FreeMemory>
 8026440:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
 8026444:	e7e3      	b.n	802640e <ProtocolEventCallback+0x9a>
 8026446:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8026448:	2800      	cmp	r0, #0
 802644a:	d063      	beq.n	8026514 <ProtocolEventCallback+0x1a0>
 802644c:	6861      	ldr	r1, [r4, #4]
 802644e:	6802      	ldr	r2, [r0, #0]
 8026450:	4291      	cmp	r1, r2
 8026452:	d25f      	bcs.n	8026514 <ProtocolEventCallback+0x1a0>
 8026454:	68a2      	ldr	r2, [r4, #8]
 8026456:	2a00      	cmp	r2, #0
 8026458:	d05c      	beq.n	8026514 <ProtocolEventCallback+0x1a0>
 802645a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 802645e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8026462:	46b0      	mov	r8, r6
 8026464:	5841      	ldr	r1, [r0, r1]
 8026466:	b111      	cbz	r1, 802646e <ProtocolEventCallback+0xfa>
 8026468:	4650      	mov	r0, sl
 802646a:	f7f3 fa13 	bl	8019894 <BTPS_StopTimer>
 802646e:	6860      	ldr	r0, [r4, #4]
 8026470:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8026472:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8026476:	eb07 0086 	add.w	r0, r7, r6, lsl #2
 802647a:	4401      	add	r1, r0
 802647c:	4a40      	ldr	r2, [pc, #256]	; (8026580 <ProtocolEventCallback+0x20c>)
 802647e:	4650      	mov	r0, sl
 8026480:	68a3      	ldr	r3, [r4, #8]
 8026482:	f7f3 f9bd 	bl	8019800 <BTPS_StartTimer>
 8026486:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8026488:	eb08 0186 	add.w	r1, r8, r6, lsl #2
 802648c:	5050      	str	r0, [r2, r1]
 802648e:	e7be      	b.n	802640e <ProtocolEventCallback+0x9a>
 8026490:	e070      	b.n	8026574 <ProtocolEventCallback+0x200>
 8026492:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8026494:	b3f0      	cbz	r0, 8026514 <ProtocolEventCallback+0x1a0>
 8026496:	6861      	ldr	r1, [r4, #4]
 8026498:	6802      	ldr	r2, [r0, #0]
 802649a:	4291      	cmp	r1, r2
 802649c:	d26c      	bcs.n	8026578 <ProtocolEventCallback+0x204>
 802649e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80264a2:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80264a6:	5841      	ldr	r1, [r0, r1]
 80264a8:	2900      	cmp	r1, #0
 80264aa:	d0b0      	beq.n	802640e <ProtocolEventCallback+0x9a>
 80264ac:	4650      	mov	r0, sl
 80264ae:	f7f3 f9f1 	bl	8019894 <BTPS_StopTimer>
 80264b2:	e7ac      	b.n	802640e <ProtocolEventCallback+0x9a>
 80264b4:	e045      	b.n	8026542 <ProtocolEventCallback+0x1ce>
 80264b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80264ba:	b359      	cbz	r1, 8026514 <ProtocolEventCallback+0x1a0>
 80264bc:	b352      	cbz	r2, 8026514 <ProtocolEventCallback+0x1a0>
 80264be:	6868      	ldr	r0, [r5, #4]
 80264c0:	f7db fbf6 	bl	8001cb0 <HCITR_COMWrite>
 80264c4:	ea5f 0800 	movs.w	r8, r0
 80264c8:	d056      	beq.n	8026578 <ProtocolEventCallback+0x204>
 80264ca:	f06f 0806 	mvn.w	r8, #6
 80264ce:	e053      	b.n	8026578 <ProtocolEventCallback+0x204>
 80264d0:	7920      	ldrb	r0, [r4, #4]
 80264d2:	e9d4 9a03 	ldrd	r9, sl, [r4, #12]
 80264d6:	1e40      	subs	r0, r0, #1
 80264d8:	68a7      	ldr	r7, [r4, #8]
 80264da:	f04f 0b00 	mov.w	fp, #0
 80264de:	2804      	cmp	r0, #4
 80264e0:	d232      	bcs.n	8026548 <ProtocolEventCallback+0x1d4>
 80264e2:	b377      	cbz	r7, 8026542 <ProtocolEventCallback+0x1ce>
 80264e4:	ea5f 0009 	movs.w	r0, r9
 80264e8:	d02e      	beq.n	8026548 <ProtocolEventCallback+0x1d4>
 80264ea:	f240 4004 	movw	r0, #1028	; 0x404
 80264ee:	4287      	cmp	r7, r0
 80264f0:	d82a      	bhi.n	8026548 <ProtocolEventCallback+0x1d4>
 80264f2:	f1ba 0f08 	cmp.w	sl, #8
 80264f6:	d025      	beq.n	8026544 <ProtocolEventCallback+0x1d0>
 80264f8:	f107 000b 	add.w	r0, r7, #11
 80264fc:	f7ec ff5e 	bl	80133bc <BTPS_AllocateMemory>
 8026500:	0006      	movs	r6, r0
 8026502:	d021      	beq.n	8026548 <ProtocolEventCallback+0x1d4>
 8026504:	f04f 0b01 	mov.w	fp, #1
 8026508:	eb09 010a 	add.w	r1, r9, sl
 802650c:	463a      	mov	r2, r7
 802650e:	f106 0008 	add.w	r0, r6, #8
 8026512:	e000      	b.n	8026516 <ProtocolEventCallback+0x1a2>
 8026514:	e014      	b.n	8026540 <ProtocolEventCallback+0x1cc>
 8026516:	f7ec ffce 	bl	80134b6 <BTPS_MemCopy>
 802651a:	7920      	ldrb	r0, [r4, #4]
 802651c:	7030      	strb	r0, [r6, #0]
 802651e:	6077      	str	r7, [r6, #4]
 8026520:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8026524:	4631      	mov	r1, r6
 8026526:	6828      	ldr	r0, [r5, #0]
 8026528:	4798      	blx	r3
 802652a:	f04f 0800 	mov.w	r8, #0
 802652e:	f1bb 0f00 	cmp.w	fp, #0
 8026532:	d021      	beq.n	8026578 <ProtocolEventCallback+0x204>
 8026534:	f1ba 0f00 	cmp.w	sl, #0
 8026538:	d01e      	beq.n	8026578 <ProtocolEventCallback+0x204>
 802653a:	4648      	mov	r0, r9
 802653c:	f7ec ff58 	bl	80133f0 <BTPS_FreeMemory>
 8026540:	e01a      	b.n	8026578 <ProtocolEventCallback+0x204>
 8026542:	e001      	b.n	8026548 <ProtocolEventCallback+0x1d4>
 8026544:	464e      	mov	r6, r9
 8026546:	e7e8      	b.n	802651a <ProtocolEventCallback+0x1a6>
 8026548:	f06f 0809 	mvn.w	r8, #9
 802654c:	e014      	b.n	8026578 <ProtocolEventCallback+0x204>
 802654e:	480d      	ldr	r0, [pc, #52]	; (8026584 <ProtocolEventCallback+0x210>)
 8026550:	9005      	str	r0, [sp, #20]
 8026552:	a801      	add	r0, sp, #4
 8026554:	9701      	str	r7, [sp, #4]
 8026556:	9006      	str	r0, [sp, #24]
 8026558:	7920      	ldrb	r0, [r4, #4]
 802655a:	f88d 0010 	strb.w	r0, [sp, #16]
 802655e:	79a0      	ldrb	r0, [r4, #6]
 8026560:	f88d 0012 	strb.w	r0, [sp, #18]
 8026564:	7960      	ldrb	r0, [r4, #5]
 8026566:	f88d 0011 	strb.w	r0, [sp, #17]
 802656a:	a905      	add	r1, sp, #20
 802656c:	6868      	ldr	r0, [r5, #4]
 802656e:	f7db fb7f 	bl	8001c70 <HCITR_COMReconfigure>
 8026572:	e74c      	b.n	802640e <ProtocolEventCallback+0x9a>
 8026574:	f06f 080a 	mvn.w	r8, #10
 8026578:	b007      	add	sp, #28
 802657a:	4640      	mov	r0, r8
 802657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026580:	08026589 	.word	0x08026589
 8026584:	00010004 	.word	0x00010004

Disassembly of section i.ProtocolTimerCallback:

08026588 <ProtocolTimerCallback>:
 8026588:	b510      	push	{r4, lr}
 802658a:	1c40      	adds	r0, r0, #1
 802658c:	d104      	bne.n	8026598 <ProtocolTimerCallback+0x10>
 802658e:	b11a      	cbz	r2, 8026598 <ProtocolTimerCallback+0x10>
 8026590:	6090      	str	r0, [r2, #8]
 8026592:	e9d2 1000 	ldrd	r1, r0, [r2]
 8026596:	4788      	blx	r1
 8026598:	2000      	movs	r0, #0
 802659a:	bd10      	pop	{r4, pc}

Disassembly of section i.ReconfigureComm:

0802659c <ReconfigureComm>:
 802659c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80265a0:	4604      	mov	r4, r0
 80265a2:	4836      	ldr	r0, [pc, #216]	; (802667c <ReconfigureComm+0xe0>)
 80265a4:	4616      	mov	r6, r2
 80265a6:	460f      	mov	r7, r1
 80265a8:	7800      	ldrb	r0, [r0, #0]
 80265aa:	2800      	cmp	r0, #0
 80265ac:	d061      	beq.n	8026672 <ReconfigureComm+0xd6>
 80265ae:	2c00      	cmp	r4, #0
 80265b0:	d05f      	beq.n	8026672 <ReconfigureComm+0xd6>
 80265b2:	f7f2 fa3b 	bl	8018a2c <BSC_AcquireListLock>
 80265b6:	b3c8      	cbz	r0, 802662c <ReconfigureComm+0x90>
 80265b8:	4830      	ldr	r0, [pc, #192]	; (802667c <ReconfigureComm+0xe0>)
 80265ba:	4621      	mov	r1, r4
 80265bc:	3008      	adds	r0, #8
 80265be:	f000 f85f 	bl	8026680 <SearchCOMEntry>
 80265c2:	0004      	movs	r4, r0
 80265c4:	d04d      	beq.n	8026662 <ReconfigureComm+0xc6>
 80265c6:	6860      	ldr	r0, [r4, #4]
 80265c8:	b388      	cbz	r0, 802662e <ReconfigureComm+0x92>
 80265ca:	6831      	ldr	r1, [r6, #0]
 80265cc:	f5a1 3180 	sub.w	r1, r1, #65536	; 0x10000
 80265d0:	2906      	cmp	r1, #6
 80265d2:	d23c      	bcs.n	802664e <ReconfigureComm+0xb2>
 80265d4:	e8df f001 	tbb	[pc, r1]
 80265d8:	2f2f2f03 	.word	0x2f2f2f03
 80265dc:	2f08      	.short	0x2f08
 80265de:	4631      	mov	r1, r6
 80265e0:	f7db fb46 	bl	8001c70 <HCITR_COMReconfigure>
 80265e4:	2500      	movs	r5, #0
 80265e6:	e034      	b.n	8026652 <ReconfigureComm+0xb6>
 80265e8:	6870      	ldr	r0, [r6, #4]
 80265ea:	7800      	ldrb	r0, [r0, #0]
 80265ec:	07c0      	lsls	r0, r0, #31
 80265ee:	d017      	beq.n	8026620 <ReconfigureComm+0x84>
 80265f0:	2001      	movs	r0, #1
 80265f2:	72a0      	strb	r0, [r4, #10]
 80265f4:	e002      	b.n	80265fc <ReconfigureComm+0x60>
 80265f6:	2001      	movs	r0, #1
 80265f8:	f7ec fe37 	bl	801326a <BTPS_Delay>
 80265fc:	7a60      	ldrb	r0, [r4, #9]
 80265fe:	2800      	cmp	r0, #0
 8026600:	d1f9      	bne.n	80265f6 <ReconfigureComm+0x5a>
 8026602:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026604:	2500      	movs	r5, #0
 8026606:	b120      	cbz	r0, 8026612 <ReconfigureComm+0x76>
 8026608:	6841      	ldr	r1, [r0, #4]
 802660a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 802660c:	62a5      	str	r5, [r4, #40]	; 0x28
 802660e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8026610:	4788      	blx	r1
 8026612:	72a5      	strb	r5, [r4, #10]
 8026614:	6870      	ldr	r0, [r6, #4]
 8026616:	7901      	ldrb	r1, [r0, #4]
 8026618:	4620      	mov	r0, r4
 802661a:	f7ff fdfd 	bl	8026218 <InitializeProtocol>
 802661e:	b138      	cbz	r0, 8026630 <ReconfigureComm+0x94>
 8026620:	2500      	movs	r5, #0
 8026622:	4631      	mov	r1, r6
 8026624:	6860      	ldr	r0, [r4, #4]
 8026626:	f7db fb23 	bl	8001c70 <HCITR_COMReconfigure>
 802662a:	e012      	b.n	8026652 <ReconfigureComm+0xb6>
 802662c:	e01e      	b.n	802666c <ReconfigureComm+0xd0>
 802662e:	e018      	b.n	8026662 <ReconfigureComm+0xc6>
 8026630:	f06f 0509 	mvn.w	r5, #9
 8026634:	e00d      	b.n	8026652 <ReconfigureComm+0xb6>
 8026636:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026638:	b130      	cbz	r0, 8026648 <ReconfigureComm+0xac>
 802663a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 802663c:	6882      	ldr	r2, [r0, #8]
 802663e:	6871      	ldr	r1, [r6, #4]
 8026640:	4618      	mov	r0, r3
 8026642:	4790      	blx	r2
 8026644:	4605      	mov	r5, r0
 8026646:	e004      	b.n	8026652 <ReconfigureComm+0xb6>
 8026648:	f06f 0508 	mvn.w	r5, #8
 802664c:	e001      	b.n	8026652 <ReconfigureComm+0xb6>
 802664e:	f06f 050a 	mvn.w	r5, #10
 8026652:	b147      	cbz	r7, 8026666 <ReconfigureComm+0xca>
 8026654:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026656:	b130      	cbz	r0, 8026666 <ReconfigureComm+0xca>
 8026658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802665a:	68c1      	ldr	r1, [r0, #12]
 802665c:	4610      	mov	r0, r2
 802665e:	4788      	blx	r1
 8026660:	e001      	b.n	8026666 <ReconfigureComm+0xca>
 8026662:	f06f 0502 	mvn.w	r5, #2
 8026666:	f7f2 fd45 	bl	80190f4 <BSC_ReleaseListLock>
 802666a:	e004      	b.n	8026676 <ReconfigureComm+0xda>
 802666c:	f06f 0504 	mvn.w	r5, #4
 8026670:	e001      	b.n	8026676 <ReconfigureComm+0xda>
 8026672:	f06f 0505 	mvn.w	r5, #5
 8026676:	4628      	mov	r0, r5
 8026678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802667c:	20000048 	.word	0x20000048

Disassembly of section i.SearchCOMEntry:

08026680 <SearchCOMEntry>:
 8026680:	b503      	push	{r0, r1, lr}
 8026682:	b081      	sub	sp, #4
 8026684:	2338      	movs	r3, #56	; 0x38
 8026686:	9000      	str	r0, [sp, #0]
 8026688:	2200      	movs	r2, #0
 802668a:	a902      	add	r1, sp, #8
 802668c:	2007      	movs	r0, #7
 802668e:	f7f2 fd54 	bl	801913a <BSC_SearchGenericListEntry>
 8026692:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SendCommPacket:

08026694 <SendCommPacket>:
 8026694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026698:	4605      	mov	r5, r0
 802669a:	482c      	ldr	r0, [pc, #176]	; (802674c <SendCommPacket+0xb8>)
 802669c:	460c      	mov	r4, r1
 802669e:	7800      	ldrb	r0, [r0, #0]
 80266a0:	b3c0      	cbz	r0, 8026714 <SendCommPacket+0x80>
 80266a2:	b3bd      	cbz	r5, 8026714 <SendCommPacket+0x80>
 80266a4:	b134      	cbz	r4, 80266b4 <SendCommPacket+0x20>
 80266a6:	7820      	ldrb	r0, [r4, #0]
 80266a8:	2801      	cmp	r0, #1
 80266aa:	d006      	beq.n	80266ba <SendCommPacket+0x26>
 80266ac:	2802      	cmp	r0, #2
 80266ae:	d004      	beq.n	80266ba <SendCommPacket+0x26>
 80266b0:	2803      	cmp	r0, #3
 80266b2:	d002      	beq.n	80266ba <SendCommPacket+0x26>
 80266b4:	f06f 0608 	mvn.w	r6, #8
 80266b8:	e044      	b.n	8026744 <SendCommPacket+0xb0>
 80266ba:	f06f 0806 	mvn.w	r8, #6
 80266be:	4646      	mov	r6, r8
 80266c0:	f7f2 f9b4 	bl	8018a2c <BSC_AcquireListLock>
 80266c4:	b338      	cbz	r0, 8026716 <SendCommPacket+0x82>
 80266c6:	4821      	ldr	r0, [pc, #132]	; (802674c <SendCommPacket+0xb8>)
 80266c8:	4629      	mov	r1, r5
 80266ca:	3008      	adds	r0, #8
 80266cc:	f7ff ffd8 	bl	8026680 <SearchCOMEntry>
 80266d0:	b388      	cbz	r0, 8026736 <SendCommPacket+0xa2>
 80266d2:	6841      	ldr	r1, [r0, #4]
 80266d4:	b379      	cbz	r1, 8026736 <SendCommPacket+0xa2>
 80266d6:	6861      	ldr	r1, [r4, #4]
 80266d8:	f031 4500 	bics.w	r5, r1, #2147483648	; 0x80000000
 80266dc:	d02b      	beq.n	8026736 <SendCommPacket+0xa2>
 80266de:	2900      	cmp	r1, #0
 80266e0:	da01      	bge.n	80266e6 <SendCommPacket+0x52>
 80266e2:	68a3      	ldr	r3, [r4, #8]
 80266e4:	e001      	b.n	80266ea <SendCommPacket+0x56>
 80266e6:	f104 0308 	add.w	r3, r4, #8
 80266ea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80266ec:	b111      	cbz	r1, 80266f4 <SendCommPacket+0x60>
 80266ee:	780a      	ldrb	r2, [r1, #0]
 80266f0:	07d2      	lsls	r2, r2, #31
 80266f2:	d011      	beq.n	8026718 <SendCommPacket+0x84>
 80266f4:	1e5e      	subs	r6, r3, #1
 80266f6:	7821      	ldrb	r1, [r4, #0]
 80266f8:	7837      	ldrb	r7, [r6, #0]
 80266fa:	7031      	strb	r1, [r6, #0]
 80266fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80266fe:	1c6d      	adds	r5, r5, #1
 8026700:	b189      	cbz	r1, 8026726 <SendCommPacket+0x92>
 8026702:	f894 c000 	ldrb.w	ip, [r4]
 8026706:	690c      	ldr	r4, [r1, #16]
 8026708:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802670a:	4633      	mov	r3, r6
 802670c:	462a      	mov	r2, r5
 802670e:	4661      	mov	r1, ip
 8026710:	47a0      	blx	r4
 8026712:	e00d      	b.n	8026730 <SendCommPacket+0x9c>
 8026714:	e014      	b.n	8026740 <SendCommPacket+0xac>
 8026716:	e015      	b.n	8026744 <SendCommPacket+0xb0>
 8026718:	7826      	ldrb	r6, [r4, #0]
 802671a:	690c      	ldr	r4, [r1, #16]
 802671c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802671e:	462a      	mov	r2, r5
 8026720:	4631      	mov	r1, r6
 8026722:	47a0      	blx	r4
 8026724:	e005      	b.n	8026732 <SendCommPacket+0x9e>
 8026726:	6840      	ldr	r0, [r0, #4]
 8026728:	4632      	mov	r2, r6
 802672a:	4629      	mov	r1, r5
 802672c:	f7db fac0 	bl	8001cb0 <HCITR_COMWrite>
 8026730:	7037      	strb	r7, [r6, #0]
 8026732:	b118      	cbz	r0, 802673c <SendCommPacket+0xa8>
 8026734:	4646      	mov	r6, r8
 8026736:	f7f2 fcdd 	bl	80190f4 <BSC_ReleaseListLock>
 802673a:	e003      	b.n	8026744 <SendCommPacket+0xb0>
 802673c:	462e      	mov	r6, r5
 802673e:	e7fa      	b.n	8026736 <SendCommPacket+0xa2>
 8026740:	f06f 0605 	mvn.w	r6, #5
 8026744:	4630      	mov	r0, r6
 8026746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802674a:	0000      	.short	0x0000
 802674c:	20000048 	.word	0x20000048

Disassembly of section i.FreeTransmitBufferListHead:

08026750 <FreeTransmitBufferListHead>:
 8026750:	b510      	push	{r4, lr}
 8026752:	0004      	movs	r4, r0
 8026754:	d00a      	beq.n	802676c <FreeTransmitBufferListHead+0x1c>
 8026756:	68a0      	ldr	r0, [r4, #8]
 8026758:	2800      	cmp	r0, #0
 802675a:	d007      	beq.n	802676c <FreeTransmitBufferListHead+0x1c>
 802675c:	6801      	ldr	r1, [r0, #0]
 802675e:	60a1      	str	r1, [r4, #8]
 8026760:	f7ec fe46 	bl	80133f0 <BTPS_FreeMemory>
 8026764:	68a0      	ldr	r0, [r4, #8]
 8026766:	2800      	cmp	r0, #0
 8026768:	d100      	bne.n	802676c <FreeTransmitBufferListHead+0x1c>
 802676a:	60e0      	str	r0, [r4, #12]
 802676c:	bd10      	pop	{r4, pc}

Disassembly of section i.HCILL_Initialize:

0802676e <HCILL_Initialize>:
 802676e:	b570      	push	{r4, r5, r6, lr}
 8026770:	460e      	mov	r6, r1
 8026772:	0005      	movs	r5, r0
 8026774:	d020      	beq.n	80267b8 <HCILL_Initialize+0x4a>
 8026776:	2020      	movs	r0, #32
 8026778:	f7ec fe20 	bl	80133bc <BTPS_AllocateMemory>
 802677c:	0004      	movs	r4, r0
 802677e:	d01c      	beq.n	80267ba <HCILL_Initialize+0x4c>
 8026780:	2220      	movs	r2, #32
 8026782:	2100      	movs	r1, #0
 8026784:	f7ec fe9b 	bl	80134be <BTPS_MemInitialize>
 8026788:	2000      	movs	r0, #0
 802678a:	f7ec fd7a 	bl	8013282 <BTPS_CreateMutex>
 802678e:	6020      	str	r0, [r4, #0]
 8026790:	b178      	cbz	r0, 80267b2 <HCILL_Initialize+0x44>
 8026792:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026796:	f7ec fd88 	bl	80132aa <BTPS_WaitMutex>
 802679a:	b138      	cbz	r0, 80267ac <HCILL_Initialize+0x3e>
 802679c:	2001      	movs	r0, #1
 802679e:	7120      	strb	r0, [r4, #4]
 80267a0:	e9c4 5604 	strd	r5, r6, [r4, #16]
 80267a4:	6820      	ldr	r0, [r4, #0]
 80267a6:	f7ec fd9c 	bl	80132e2 <BTPS_ReleaseMutex>
 80267aa:	e006      	b.n	80267ba <HCILL_Initialize+0x4c>
 80267ac:	6820      	ldr	r0, [r4, #0]
 80267ae:	f7ec fd9e 	bl	80132ee <BTPS_CloseMutex>
 80267b2:	4620      	mov	r0, r4
 80267b4:	f7ec fe1c 	bl	80133f0 <BTPS_FreeMemory>
 80267b8:	2400      	movs	r4, #0
 80267ba:	4620      	mov	r0, r4
 80267bc:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCILL_ReceiveBytes:

080267c0 <HCILL_ReceiveBytes>:
 80267c0:	b570      	push	{r4, r5, r6, lr}
 80267c2:	4616      	mov	r6, r2
 80267c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80267c8:	b3b8      	cbz	r0, 802683a <HCILL_ReceiveBytes+0x7a>
 80267ca:	b3b1      	cbz	r1, 802683a <HCILL_ReceiveBytes+0x7a>
 80267cc:	b3ae      	cbz	r6, 802683a <HCILL_ReceiveBytes+0x7a>
 80267ce:	4604      	mov	r4, r0
 80267d0:	6800      	ldr	r0, [r0, #0]
 80267d2:	4629      	mov	r1, r5
 80267d4:	f7ec fd69 	bl	80132aa <BTPS_WaitMutex>
 80267d8:	b380      	cbz	r0, 802683c <HCILL_ReceiveBytes+0x7c>
 80267da:	7830      	ldrb	r0, [r6, #0]
 80267dc:	3830      	subs	r0, #48	; 0x30
 80267de:	2803      	cmp	r0, #3
 80267e0:	d830      	bhi.n	8026844 <HCILL_ReceiveBytes+0x84>
 80267e2:	4e1d      	ldr	r6, [pc, #116]	; (8026858 <HCILL_ReceiveBytes+0x98>)
 80267e4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80267e8:	d005      	beq.n	80267f6 <HCILL_ReceiveBytes+0x36>
 80267ea:	2501      	movs	r5, #1
 80267ec:	2802      	cmp	r0, #2
 80267ee:	d011      	beq.n	8026814 <HCILL_ReceiveBytes+0x54>
 80267f0:	2803      	cmp	r0, #3
 80267f2:	d127      	bne.n	8026844 <HCILL_ReceiveBytes+0x84>
 80267f4:	e023      	b.n	802683e <HCILL_ReceiveBytes+0x7e>
 80267f6:	7920      	ldrb	r0, [r4, #4]
 80267f8:	2801      	cmp	r0, #1
 80267fa:	d123      	bne.n	8026844 <HCILL_ReceiveBytes+0x84>
 80267fc:	1c72      	adds	r2, r6, #1
 80267fe:	2101      	movs	r1, #1
 8026800:	4620      	mov	r0, r4
 8026802:	f000 f915 	bl	8026a30 <TransmitData>
 8026806:	2101      	movs	r1, #1
 8026808:	4620      	mov	r0, r4
 802680a:	f000 f901 	bl	8026a10 <SendSleepIndication>
 802680e:	2000      	movs	r0, #0
 8026810:	7120      	strb	r0, [r4, #4]
 8026812:	e017      	b.n	8026844 <HCILL_ReceiveBytes+0x84>
 8026814:	7920      	ldrb	r0, [r4, #4]
 8026816:	2801      	cmp	r0, #1
 8026818:	d014      	beq.n	8026844 <HCILL_ReceiveBytes+0x84>
 802681a:	2100      	movs	r1, #0
 802681c:	4620      	mov	r0, r4
 802681e:	f000 f8f7 	bl	8026a10 <SendSleepIndication>
 8026822:	7920      	ldrb	r0, [r4, #4]
 8026824:	b920      	cbnz	r0, 8026830 <HCILL_ReceiveBytes+0x70>
 8026826:	1cf2      	adds	r2, r6, #3
 8026828:	2101      	movs	r1, #1
 802682a:	4620      	mov	r0, r4
 802682c:	f000 f900 	bl	8026a30 <TransmitData>
 8026830:	7125      	strb	r5, [r4, #4]
 8026832:	4620      	mov	r0, r4
 8026834:	f000 f8ae 	bl	8026994 <SendQueuedPackets>
 8026838:	e004      	b.n	8026844 <HCILL_ReceiveBytes+0x84>
 802683a:	e00a      	b.n	8026852 <HCILL_ReceiveBytes+0x92>
 802683c:	e007      	b.n	802684e <HCILL_ReceiveBytes+0x8e>
 802683e:	7920      	ldrb	r0, [r4, #4]
 8026840:	2801      	cmp	r0, #1
 8026842:	d1f5      	bne.n	8026830 <HCILL_ReceiveBytes+0x70>
 8026844:	2501      	movs	r5, #1
 8026846:	6820      	ldr	r0, [r4, #0]
 8026848:	f7ec fd4b 	bl	80132e2 <BTPS_ReleaseMutex>
 802684c:	e001      	b.n	8026852 <HCILL_ReceiveBytes+0x92>
 802684e:	f06f 0502 	mvn.w	r5, #2
 8026852:	4628      	mov	r0, r5
 8026854:	bd70      	pop	{r4, r5, r6, pc}
 8026856:	0000      	.short	0x0000
 8026858:	080397f4 	.word	0x080397f4

Disassembly of section i.HCILL_Reconfigure:

0802685c <HCILL_Reconfigure>:
 802685c:	b570      	push	{r4, r5, r6, lr}
 802685e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8026862:	b1b0      	cbz	r0, 8026892 <HCILL_Reconfigure+0x36>
 8026864:	b1a9      	cbz	r1, 8026892 <HCILL_Reconfigure+0x36>
 8026866:	4604      	mov	r4, r0
 8026868:	460e      	mov	r6, r1
 802686a:	6800      	ldr	r0, [r0, #0]
 802686c:	4629      	mov	r1, r5
 802686e:	f7ec fd1c 	bl	80132aa <BTPS_WaitMutex>
 8026872:	b160      	cbz	r0, 802688e <HCILL_Reconfigure+0x32>
 8026874:	7920      	ldrb	r0, [r4, #4]
 8026876:	b140      	cbz	r0, 802688a <HCILL_Reconfigure+0x2e>
 8026878:	2500      	movs	r5, #0
 802687a:	6830      	ldr	r0, [r6, #0]
 802687c:	61a0      	str	r0, [r4, #24]
 802687e:	6870      	ldr	r0, [r6, #4]
 8026880:	61e0      	str	r0, [r4, #28]
 8026882:	6820      	ldr	r0, [r4, #0]
 8026884:	f7ec fd2d 	bl	80132e2 <BTPS_ReleaseMutex>
 8026888:	e003      	b.n	8026892 <HCILL_Reconfigure+0x36>
 802688a:	2501      	movs	r5, #1
 802688c:	e7f5      	b.n	802687a <HCILL_Reconfigure+0x1e>
 802688e:	f06f 0502 	mvn.w	r5, #2
 8026892:	4628      	mov	r0, r5
 8026894:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.HCILL_Resynchronize:

08026896 <HCILL_Resynchronize>:
 8026896:	b510      	push	{r4, lr}
 8026898:	2800      	cmp	r0, #0
 802689a:	d00e      	beq.n	80268ba <HCILL_Resynchronize+0x24>
 802689c:	4604      	mov	r4, r0
 802689e:	6800      	ldr	r0, [r0, #0]
 80268a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80268a4:	f7ec fd01 	bl	80132aa <BTPS_WaitMutex>
 80268a8:	2800      	cmp	r0, #0
 80268aa:	d006      	beq.n	80268ba <HCILL_Resynchronize+0x24>
 80268ac:	2000      	movs	r0, #0
 80268ae:	7120      	strb	r0, [r4, #4]
 80268b0:	6820      	ldr	r0, [r4, #0]
 80268b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268b6:	f7ec bd14 	b.w	80132e2 <BTPS_ReleaseMutex>
 80268ba:	bd10      	pop	{r4, pc}

Disassembly of section i.HCILL_Shutdown:

080268bc <HCILL_Shutdown>:
 80268bc:	b510      	push	{r4, lr}
 80268be:	2800      	cmp	r0, #0
 80268c0:	d017      	beq.n	80268f2 <HCILL_Shutdown+0x36>
 80268c2:	4604      	mov	r4, r0
 80268c4:	6800      	ldr	r0, [r0, #0]
 80268c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80268ca:	f7ec fcee 	bl	80132aa <BTPS_WaitMutex>
 80268ce:	e002      	b.n	80268d6 <HCILL_Shutdown+0x1a>
 80268d0:	4620      	mov	r0, r4
 80268d2:	f7ff ff3d 	bl	8026750 <FreeTransmitBufferListHead>
 80268d6:	68a0      	ldr	r0, [r4, #8]
 80268d8:	2800      	cmp	r0, #0
 80268da:	d1f9      	bne.n	80268d0 <HCILL_Shutdown+0x14>
 80268dc:	6820      	ldr	r0, [r4, #0]
 80268de:	f7ec fd00 	bl	80132e2 <BTPS_ReleaseMutex>
 80268e2:	6820      	ldr	r0, [r4, #0]
 80268e4:	f7ec fd03 	bl	80132ee <BTPS_CloseMutex>
 80268e8:	4620      	mov	r0, r4
 80268ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80268ee:	f7ec bd7f 	b.w	80133f0 <BTPS_FreeMemory>
 80268f2:	bd10      	pop	{r4, pc}

Disassembly of section i.HCILL_TransmitBytes:

080268f4 <HCILL_TransmitBytes>:
 80268f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80268f8:	461f      	mov	r7, r3
 80268fa:	4616      	mov	r6, r2
 80268fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026900:	b3e0      	cbz	r0, 802697c <HCILL_TransmitBytes+0x88>
 8026902:	b3de      	cbz	r6, 802697c <HCILL_TransmitBytes+0x88>
 8026904:	b3d7      	cbz	r7, 802697c <HCILL_TransmitBytes+0x88>
 8026906:	4604      	mov	r4, r0
 8026908:	6800      	ldr	r0, [r0, #0]
 802690a:	f7ec fcce 	bl	80132aa <BTPS_WaitMutex>
 802690e:	b3b0      	cbz	r0, 802697e <HCILL_TransmitBytes+0x8a>
 8026910:	7920      	ldrb	r0, [r4, #4]
 8026912:	2801      	cmp	r0, #1
 8026914:	d015      	beq.n	8026942 <HCILL_TransmitBytes+0x4e>
 8026916:	f106 0008 	add.w	r0, r6, #8
 802691a:	f7ec fd4f 	bl	80133bc <BTPS_AllocateMemory>
 802691e:	0005      	movs	r5, r0
 8026920:	d018      	beq.n	8026954 <HCILL_TransmitBytes+0x60>
 8026922:	4632      	mov	r2, r6
 8026924:	4639      	mov	r1, r7
 8026926:	f105 0008 	add.w	r0, r5, #8
 802692a:	606e      	str	r6, [r5, #4]
 802692c:	f7ec fdc3 	bl	80134b6 <BTPS_MemCopy>
 8026930:	2000      	movs	r0, #0
 8026932:	6028      	str	r0, [r5, #0]
 8026934:	68a0      	ldr	r0, [r4, #8]
 8026936:	b158      	cbz	r0, 8026950 <HCILL_TransmitBytes+0x5c>
 8026938:	68e0      	ldr	r0, [r4, #12]
 802693a:	6005      	str	r5, [r0, #0]
 802693c:	60e5      	str	r5, [r4, #12]
 802693e:	2500      	movs	r5, #0
 8026940:	e00a      	b.n	8026958 <HCILL_TransmitBytes+0x64>
 8026942:	463a      	mov	r2, r7
 8026944:	4631      	mov	r1, r6
 8026946:	4620      	mov	r0, r4
 8026948:	f000 f872 	bl	8026a30 <TransmitData>
 802694c:	2500      	movs	r5, #0
 802694e:	e011      	b.n	8026974 <HCILL_TransmitBytes+0x80>
 8026950:	60a5      	str	r5, [r4, #8]
 8026952:	e7f3      	b.n	802693c <HCILL_TransmitBytes+0x48>
 8026954:	f06f 0501 	mvn.w	r5, #1
 8026958:	b965      	cbnz	r5, 8026974 <HCILL_TransmitBytes+0x80>
 802695a:	7920      	ldrb	r0, [r4, #4]
 802695c:	b950      	cbnz	r0, 8026974 <HCILL_TransmitBytes+0x80>
 802695e:	2100      	movs	r1, #0
 8026960:	4620      	mov	r0, r4
 8026962:	f000 f855 	bl	8026a10 <SendSleepIndication>
 8026966:	4a0a      	ldr	r2, [pc, #40]	; (8026990 <HCILL_TransmitBytes+0x9c>)
 8026968:	2101      	movs	r1, #1
 802696a:	4620      	mov	r0, r4
 802696c:	f000 f860 	bl	8026a30 <TransmitData>
 8026970:	2002      	movs	r0, #2
 8026972:	7120      	strb	r0, [r4, #4]
 8026974:	6820      	ldr	r0, [r4, #0]
 8026976:	f7ec fcb4 	bl	80132e2 <BTPS_ReleaseMutex>
 802697a:	e005      	b.n	8026988 <HCILL_TransmitBytes+0x94>
 802697c:	e003      	b.n	8026986 <HCILL_TransmitBytes+0x92>
 802697e:	e7ff      	b.n	8026980 <HCILL_TransmitBytes+0x8c>
 8026980:	f06f 0502 	mvn.w	r5, #2
 8026984:	e000      	b.n	8026988 <HCILL_TransmitBytes+0x94>
 8026986:	460d      	mov	r5, r1
 8026988:	4628      	mov	r0, r5
 802698a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802698e:	0000      	.short	0x0000
 8026990:	080397f6 	.word	0x080397f6

Disassembly of section i.SendQueuedPackets:

08026994 <SendQueuedPackets>:
 8026994:	b510      	push	{r4, lr}
 8026996:	4604      	mov	r4, r0
 8026998:	e008      	b.n	80269ac <SendQueuedPackets+0x18>
 802699a:	4620      	mov	r0, r4
 802699c:	f103 0208 	add.w	r2, r3, #8
 80269a0:	6859      	ldr	r1, [r3, #4]
 80269a2:	f000 f845 	bl	8026a30 <TransmitData>
 80269a6:	4620      	mov	r0, r4
 80269a8:	f7ff fed2 	bl	8026750 <FreeTransmitBufferListHead>
 80269ac:	68a3      	ldr	r3, [r4, #8]
 80269ae:	2b00      	cmp	r3, #0
 80269b0:	d1f3      	bne.n	802699a <SendQueuedPackets+0x6>
 80269b2:	bd10      	pop	{r4, pc}

080269b4 <SendQueuedPackets>:
 80269b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80269b8:	4606      	mov	r6, r0
 80269ba:	7a00      	ldrb	r0, [r0, #8]
 80269bc:	2803      	cmp	r0, #3
 80269be:	d002      	beq.n	80269c6 <SendQueuedPackets+0x12>
 80269c0:	2000      	movs	r0, #0
 80269c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80269c6:	2500      	movs	r5, #0
 80269c8:	7f30      	ldrb	r0, [r6, #28]
 80269ca:	6b34      	ldr	r4, [r6, #48]	; 0x30
 80269cc:	e001      	b.n	80269d2 <SendQueuedPackets+0x1e>
 80269ce:	6824      	ldr	r4, [r4, #0]
 80269d0:	1c6d      	adds	r5, r5, #1
 80269d2:	42a8      	cmp	r0, r5
 80269d4:	dd03      	ble.n	80269de <SendQueuedPackets+0x2a>
 80269d6:	b114      	cbz	r4, 80269de <SendQueuedPackets+0x2a>
 80269d8:	7921      	ldrb	r1, [r4, #4]
 80269da:	2900      	cmp	r1, #0
 80269dc:	d1f7      	bne.n	80269ce <SendQueuedPackets+0x1a>
 80269de:	2000      	movs	r0, #0
 80269e0:	2701      	movs	r7, #1
 80269e2:	e00f      	b.n	8026a04 <SendQueuedPackets+0x50>
 80269e4:	7127      	strb	r7, [r4, #4]
 80269e6:	7f70      	ldrb	r0, [r6, #29]
 80269e8:	1c41      	adds	r1, r0, #1
 80269ea:	f001 0107 	and.w	r1, r1, #7
 80269ee:	7771      	strb	r1, [r6, #29]
 80269f0:	68a1      	ldr	r1, [r4, #8]
 80269f2:	4308      	orrs	r0, r1
 80269f4:	60a0      	str	r0, [r4, #8]
 80269f6:	f104 0108 	add.w	r1, r4, #8
 80269fa:	4630      	mov	r0, r6
 80269fc:	f000 fb14 	bl	8027028 <SendSLIPPacket>
 8026a00:	6824      	ldr	r4, [r4, #0]
 8026a02:	1c6d      	adds	r5, r5, #1
 8026a04:	7f31      	ldrb	r1, [r6, #28]
 8026a06:	42a9      	cmp	r1, r5
 8026a08:	dddb      	ble.n	80269c2 <SendQueuedPackets+0xe>
 8026a0a:	2c00      	cmp	r4, #0
 8026a0c:	d1ea      	bne.n	80269e4 <SendQueuedPackets+0x30>
 8026a0e:	e7d8      	b.n	80269c2 <SendQueuedPackets+0xe>

Disassembly of section i.SendSleepIndication:

08026a10 <SendSleepIndication>:
 8026a10:	6982      	ldr	r2, [r0, #24]
 8026a12:	460b      	mov	r3, r1
 8026a14:	2a00      	cmp	r2, #0
 8026a16:	d002      	beq.n	8026a1e <SendSleepIndication+0xe>
 8026a18:	69c1      	ldr	r1, [r0, #28]
 8026a1a:	4618      	mov	r0, r3
 8026a1c:	4710      	bx	r2
 8026a1e:	4770      	bx	lr

08026a20 <SendSleepIndication>:
 8026a20:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8026a22:	460b      	mov	r3, r1
 8026a24:	2a00      	cmp	r2, #0
 8026a26:	d002      	beq.n	8026a2e <SendSleepIndication+0xe>
 8026a28:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8026a2a:	4618      	mov	r0, r3
 8026a2c:	4710      	bx	r2
 8026a2e:	4770      	bx	lr

Disassembly of section i.TransmitData:

08026a30 <TransmitData>:
 8026a30:	b500      	push	{lr}
 8026a32:	b085      	sub	sp, #20
 8026a34:	2800      	cmp	r0, #0
 8026a36:	d00c      	beq.n	8026a52 <TransmitData+0x22>
 8026a38:	2900      	cmp	r1, #0
 8026a3a:	d00a      	beq.n	8026a52 <TransmitData+0x22>
 8026a3c:	2a00      	cmp	r2, #0
 8026a3e:	d008      	beq.n	8026a52 <TransmitData+0x22>
 8026a40:	2304      	movs	r3, #4
 8026a42:	f88d 3000 	strb.w	r3, [sp]
 8026a46:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8026a4a:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
 8026a4e:	4668      	mov	r0, sp
 8026a50:	4790      	blx	r2
 8026a52:	b005      	add	sp, #20
 8026a54:	bd00      	pop	{pc}

08026a56 <TransmitData>:
 8026a56:	b500      	push	{lr}
 8026a58:	b085      	sub	sp, #20
 8026a5a:	2304      	movs	r3, #4
 8026a5c:	f88d 3000 	strb.w	r3, [sp]
 8026a60:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8026a64:	e9d0 210e 	ldrd	r2, r1, [r0, #56]	; 0x38
 8026a68:	4668      	mov	r0, sp
 8026a6a:	4790      	blx	r2
 8026a6c:	b005      	add	sp, #20
 8026a6e:	bd00      	pop	{pc}

Disassembly of section i.AcknowledgeTimerExpired:

08026a70 <AcknowledgeTimerExpired>:
 8026a70:	b510      	push	{r4, lr}
 8026a72:	2800      	cmp	r0, #0
 8026a74:	d01a      	beq.n	8026aac <AcknowledgeTimerExpired+0x3c>
 8026a76:	4604      	mov	r4, r0
 8026a78:	6800      	ldr	r0, [r0, #0]
 8026a7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026a7e:	f7ec fc14 	bl	80132aa <BTPS_WaitMutex>
 8026a82:	2800      	cmp	r0, #0
 8026a84:	d012      	beq.n	8026aac <AcknowledgeTimerExpired+0x3c>
 8026a86:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8026a8a:	0741      	lsls	r1, r0, #29
 8026a8c:	d506      	bpl.n	8026a9c <AcknowledgeTimerExpired+0x2c>
 8026a8e:	f020 0004 	bic.w	r0, r0, #4
 8026a92:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 8026a96:	4620      	mov	r0, r4
 8026a98:	f000 fa79 	bl	8026f8e <SendNullPacket>
 8026a9c:	4620      	mov	r0, r4
 8026a9e:	f000 f81e 	bl	8026ade <CheckIdle>
 8026aa2:	6820      	ldr	r0, [r4, #0]
 8026aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026aa8:	f7ec bc1b 	b.w	80132e2 <BTPS_ReleaseMutex>
 8026aac:	bd10      	pop	{r4, pc}

Disassembly of section i.CalculateCRC:

08026aae <CalculateCRC>:
 8026aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026ab0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8026ab4:	f241 0721 	movw	r7, #4129	; 0x1021
 8026ab8:	e00e      	b.n	8026ad8 <CalculateCRC+0x2a>
 8026aba:	f812 4b01 	ldrb.w	r4, [r2], #1
 8026abe:	2300      	movs	r3, #0
 8026ac0:	f004 0501 	and.w	r5, r4, #1
 8026ac4:	ea95 35d0 	eors.w	r5, r5, r0, lsr #15
 8026ac8:	ea06 0040 	and.w	r0, r6, r0, lsl #1
 8026acc:	d000      	beq.n	8026ad0 <CalculateCRC+0x22>
 8026ace:	4078      	eors	r0, r7
 8026ad0:	0864      	lsrs	r4, r4, #1
 8026ad2:	1c5b      	adds	r3, r3, #1
 8026ad4:	2b08      	cmp	r3, #8
 8026ad6:	d3f3      	bcc.n	8026ac0 <CalculateCRC+0x12>
 8026ad8:	1e49      	subs	r1, r1, #1
 8026ada:	d2ee      	bcs.n	8026aba <CalculateCRC+0xc>
 8026adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section i.CheckIdle:

08026ade <CheckIdle>:
 8026ade:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
 8026ae2:	f011 0f06 	tst.w	r1, #6
 8026ae6:	d106      	bne.n	8026af6 <CheckIdle+0x18>
 8026ae8:	7a02      	ldrb	r2, [r0, #8]
 8026aea:	2a03      	cmp	r2, #3
 8026aec:	d103      	bne.n	8026af6 <CheckIdle+0x18>
 8026aee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8026af0:	b90a      	cbnz	r2, 8026af6 <CheckIdle+0x18>
 8026af2:	7a82      	ldrb	r2, [r0, #10]
 8026af4:	b10a      	cbz	r2, 8026afa <CheckIdle+0x1c>
 8026af6:	2200      	movs	r2, #0
 8026af8:	e004      	b.n	8026b04 <CheckIdle+0x26>
 8026afa:	07c9      	lsls	r1, r1, #31
 8026afc:	d001      	beq.n	8026b02 <CheckIdle+0x24>
 8026afe:	2000      	movs	r0, #0
 8026b00:	4770      	bx	lr
 8026b02:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8026b04:	2100      	movs	r1, #0
 8026b06:	f000 bb61 	b.w	80271cc <SetTWUARTTimer>

Disassembly of section i.EncodeAndSend:

08026b0c <EncodeAndSend>:
 8026b0c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8026b10:	4683      	mov	fp, r0
 8026b12:	7a40      	ldrb	r0, [r0, #9]
 8026b14:	4617      	mov	r7, r2
 8026b16:	468a      	mov	sl, r1
 8026b18:	0780      	lsls	r0, r0, #30
 8026b1a:	d501      	bpl.n	8026b20 <EncodeAndSend+0x14>
 8026b1c:	2004      	movs	r0, #4
 8026b1e:	e000      	b.n	8026b22 <EncodeAndSend+0x16>
 8026b20:	2002      	movs	r0, #2
 8026b22:	4680      	mov	r8, r0
 8026b24:	2000      	movs	r0, #0
 8026b26:	4606      	mov	r6, r0
 8026b28:	4605      	mov	r5, r0
 8026b2a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8026b94 <EncodeAndSend+0x88>
 8026b2e:	e020      	b.n	8026b72 <EncodeAndSend+0x66>
 8026b30:	2400      	movs	r4, #0
 8026b32:	e019      	b.n	8026b68 <EncodeAndSend+0x5c>
 8026b34:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8026b38:	5d7a      	ldrb	r2, [r7, r5]
 8026b3a:	f819 1003 	ldrb.w	r1, [r9, r3]
 8026b3e:	428a      	cmp	r2, r1
 8026b40:	d111      	bne.n	8026b66 <EncodeAndSend+0x5a>
 8026b42:	1ba9      	subs	r1, r5, r6
 8026b44:	d004      	beq.n	8026b50 <EncodeAndSend+0x44>
 8026b46:	19ba      	adds	r2, r7, r6
 8026b48:	4658      	mov	r0, fp
 8026b4a:	f7ff ff84 	bl	8026a56 <TransmitData>
 8026b4e:	b978      	cbnz	r0, 8026b70 <EncodeAndSend+0x64>
 8026b50:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8026b54:	eb01 0209 	add.w	r2, r1, r9
 8026b58:	2102      	movs	r1, #2
 8026b5a:	4658      	mov	r0, fp
 8026b5c:	1c52      	adds	r2, r2, #1
 8026b5e:	f7ff ff7a 	bl	8026a56 <TransmitData>
 8026b62:	1c6e      	adds	r6, r5, #1
 8026b64:	e004      	b.n	8026b70 <EncodeAndSend+0x64>
 8026b66:	1c64      	adds	r4, r4, #1
 8026b68:	4544      	cmp	r4, r8
 8026b6a:	d201      	bcs.n	8026b70 <EncodeAndSend+0x64>
 8026b6c:	2800      	cmp	r0, #0
 8026b6e:	d0e1      	beq.n	8026b34 <EncodeAndSend+0x28>
 8026b70:	1c6d      	adds	r5, r5, #1
 8026b72:	4555      	cmp	r5, sl
 8026b74:	d203      	bcs.n	8026b7e <EncodeAndSend+0x72>
 8026b76:	2800      	cmp	r0, #0
 8026b78:	d0da      	beq.n	8026b30 <EncodeAndSend+0x24>
 8026b7a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8026b7e:	2800      	cmp	r0, #0
 8026b80:	d1fb      	bne.n	8026b7a <EncodeAndSend+0x6e>
 8026b82:	1ba9      	subs	r1, r5, r6
 8026b84:	d0f9      	beq.n	8026b7a <EncodeAndSend+0x6e>
 8026b86:	19ba      	adds	r2, r7, r6
 8026b88:	4658      	mov	r0, fp
 8026b8a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8026b8e:	f7ff bf62 	b.w	8026a56 <TransmitData>
 8026b92:	0000      	.short	0x0000
 8026b94:	080397f9 	.word	0x080397f9

Disassembly of section i.FreeBufferListHead:

08026b98 <FreeBufferListHead>:
 8026b98:	b510      	push	{r4, lr}
 8026b9a:	4604      	mov	r4, r0
 8026b9c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8026b9e:	2800      	cmp	r0, #0
 8026ba0:	d007      	beq.n	8026bb2 <FreeBufferListHead+0x1a>
 8026ba2:	6801      	ldr	r1, [r0, #0]
 8026ba4:	6321      	str	r1, [r4, #48]	; 0x30
 8026ba6:	f7ec fc23 	bl	80133f0 <BTPS_FreeMemory>
 8026baa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026bac:	2800      	cmp	r0, #0
 8026bae:	d100      	bne.n	8026bb2 <FreeBufferListHead+0x1a>
 8026bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8026bb2:	bd10      	pop	{r4, pc}

Disassembly of section i.IdleTimerExpired:

08026bb4 <IdleTimerExpired>:
 8026bb4:	b510      	push	{r4, lr}
 8026bb6:	2800      	cmp	r0, #0
 8026bb8:	d01b      	beq.n	8026bf2 <IdleTimerExpired+0x3e>
 8026bba:	4604      	mov	r4, r0
 8026bbc:	6800      	ldr	r0, [r0, #0]
 8026bbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026bc2:	f7ec fb72 	bl	80132aa <BTPS_WaitMutex>
 8026bc6:	2800      	cmp	r0, #0
 8026bc8:	d013      	beq.n	8026bf2 <IdleTimerExpired+0x3e>
 8026bca:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8026bce:	07c1      	lsls	r1, r0, #31
 8026bd0:	d00a      	beq.n	8026be8 <IdleTimerExpired+0x34>
 8026bd2:	f020 0001 	bic.w	r0, r0, #1
 8026bd6:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 8026bda:	7a20      	ldrb	r0, [r4, #8]
 8026bdc:	2803      	cmp	r0, #3
 8026bde:	d103      	bne.n	8026be8 <IdleTimerExpired+0x34>
 8026be0:	2104      	movs	r1, #4
 8026be2:	4620      	mov	r0, r4
 8026be4:	f000 fab2 	bl	802714c <SetTWUARTState>
 8026be8:	6820      	ldr	r0, [r4, #0]
 8026bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026bee:	f7ec bb78 	b.w	80132e2 <BTPS_ReleaseMutex>
 8026bf2:	bd10      	pop	{r4, pc}

Disassembly of section i.ParseConfigurationField:

08026bf4 <ParseConfigurationField>:
 8026bf4:	b570      	push	{r4, r5, r6, lr}
 8026bf6:	4615      	mov	r5, r2
 8026bf8:	4604      	mov	r4, r0
 8026bfa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8026bfe:	b181      	cbz	r1, 8026c22 <ParseConfigurationField+0x2e>
 8026c00:	7828      	ldrb	r0, [r5, #0]
 8026c02:	0700      	lsls	r0, r0, #28
 8026c04:	d50f      	bpl.n	8026c26 <ParseConfigurationField+0x32>
 8026c06:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8026c0a:	b150      	cbz	r0, 8026c22 <ParseConfigurationField+0x2e>
 8026c0c:	7a60      	ldrb	r0, [r4, #9]
 8026c0e:	2101      	movs	r1, #1
 8026c10:	f040 0002 	orr.w	r0, r0, #2
 8026c14:	7260      	strb	r0, [r4, #9]
 8026c16:	4620      	mov	r0, r4
 8026c18:	f000 fb02 	bl	8027220 <SetTransportConfiguration>
 8026c1c:	0001      	movs	r1, r0
 8026c1e:	d007      	beq.n	8026c30 <ParseConfigurationField+0x3c>
 8026c20:	e031      	b.n	8026c86 <ParseConfigurationField+0x92>
 8026c22:	4631      	mov	r1, r6
 8026c24:	e02f      	b.n	8026c86 <ParseConfigurationField+0x92>
 8026c26:	7a60      	ldrb	r0, [r4, #9]
 8026c28:	2100      	movs	r1, #0
 8026c2a:	f020 0002 	bic.w	r0, r0, #2
 8026c2e:	7260      	strb	r0, [r4, #9]
 8026c30:	7828      	ldrb	r0, [r5, #0]
 8026c32:	06c0      	lsls	r0, r0, #27
 8026c34:	d511      	bpl.n	8026c5a <ParseConfigurationField+0x66>
 8026c36:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8026c3a:	2800      	cmp	r0, #0
 8026c3c:	d0f1      	beq.n	8026c22 <ParseConfigurationField+0x2e>
 8026c3e:	7a60      	ldrb	r0, [r4, #9]
 8026c40:	f040 0001 	orr.w	r0, r0, #1
 8026c44:	7260      	strb	r0, [r4, #9]
 8026c46:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026c48:	e004      	b.n	8026c54 <ParseConfigurationField+0x60>
 8026c4a:	6882      	ldr	r2, [r0, #8]
 8026c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8026c50:	6082      	str	r2, [r0, #8]
 8026c52:	6800      	ldr	r0, [r0, #0]
 8026c54:	2800      	cmp	r0, #0
 8026c56:	d1f8      	bne.n	8026c4a <ParseConfigurationField+0x56>
 8026c58:	e00c      	b.n	8026c74 <ParseConfigurationField+0x80>
 8026c5a:	7a60      	ldrb	r0, [r4, #9]
 8026c5c:	f020 0001 	bic.w	r0, r0, #1
 8026c60:	7260      	strb	r0, [r4, #9]
 8026c62:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026c64:	e004      	b.n	8026c70 <ParseConfigurationField+0x7c>
 8026c66:	6882      	ldr	r2, [r0, #8]
 8026c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026c6c:	6082      	str	r2, [r0, #8]
 8026c6e:	6800      	ldr	r0, [r0, #0]
 8026c70:	2800      	cmp	r0, #0
 8026c72:	d1f8      	bne.n	8026c66 <ParseConfigurationField+0x72>
 8026c74:	b939      	cbnz	r1, 8026c86 <ParseConfigurationField+0x92>
 8026c76:	7828      	ldrb	r0, [r5, #0]
 8026c78:	f000 0007 	and.w	r0, r0, #7
 8026c7c:	7720      	strb	r0, [r4, #28]
 8026c7e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8026c82:	4290      	cmp	r0, r2
 8026c84:	d8cd      	bhi.n	8026c22 <ParseConfigurationField+0x2e>
 8026c86:	4608      	mov	r0, r1
 8026c88:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.ProcessReceivedPacket:

08026c8a <ProcessReceivedPacket>:
 8026c8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026c8e:	6942      	ldr	r2, [r0, #20]
 8026c90:	4604      	mov	r4, r0
 8026c92:	6900      	ldr	r0, [r0, #16]
 8026c94:	f04f 0800 	mov.w	r8, #0
 8026c98:	f100 0908 	add.w	r9, r0, #8
 8026c9c:	b085      	sub	sp, #20
 8026c9e:	f3c2 360b 	ubfx	r6, r2, #12, #12
 8026ca2:	4641      	mov	r1, r8
 8026ca4:	4640      	mov	r0, r8
 8026ca6:	1823      	adds	r3, r4, r0
 8026ca8:	1c40      	adds	r0, r0, #1
 8026caa:	7d1b      	ldrb	r3, [r3, #20]
 8026cac:	2804      	cmp	r0, #4
 8026cae:	4419      	add	r1, r3
 8026cb0:	b2c9      	uxtb	r1, r1
 8026cb2:	d3f8      	bcc.n	8026ca6 <ProcessReceivedPacket+0x1c>
 8026cb4:	29ff      	cmp	r1, #255	; 0xff
 8026cb6:	d11f      	bne.n	8026cf8 <ProcessReceivedPacket+0x6e>
 8026cb8:	0610      	lsls	r0, r2, #24
 8026cba:	d506      	bpl.n	8026cca <ProcessReceivedPacket+0x40>
 8026cbc:	7fe1      	ldrb	r1, [r4, #31]
 8026cbe:	f002 0007 	and.w	r0, r2, #7
 8026cc2:	f04f 0801 	mov.w	r8, #1
 8026cc6:	4281      	cmp	r1, r0
 8026cc8:	d124      	bne.n	8026d14 <ProcessReceivedPacket+0x8a>
 8026cca:	2701      	movs	r7, #1
 8026ccc:	0650      	lsls	r0, r2, #25
 8026cce:	d514      	bpl.n	8026cfa <ProcessReceivedPacket+0x70>
 8026cd0:	7a60      	ldrb	r0, [r4, #9]
 8026cd2:	07c0      	lsls	r0, r0, #31
 8026cd4:	d010      	beq.n	8026cf8 <ProcessReceivedPacket+0x6e>
 8026cd6:	f104 0214 	add.w	r2, r4, #20
 8026cda:	2104      	movs	r1, #4
 8026cdc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8026ce0:	f7ff fee5 	bl	8026aae <CalculateCRC>
 8026ce4:	464a      	mov	r2, r9
 8026ce6:	4631      	mov	r1, r6
 8026ce8:	f7ff fee1 	bl	8026aae <CalculateCRC>
 8026cec:	eb09 0106 	add.w	r1, r9, r6
 8026cf0:	8809      	ldrh	r1, [r1, #0]
 8026cf2:	ba49      	rev16	r1, r1
 8026cf4:	4281      	cmp	r1, r0
 8026cf6:	d000      	beq.n	8026cfa <ProcessReceivedPacket+0x70>
 8026cf8:	2700      	movs	r7, #0
 8026cfa:	2500      	movs	r5, #0
 8026cfc:	2f00      	cmp	r7, #0
 8026cfe:	d07c      	beq.n	8026dfa <ProcessReceivedPacket+0x170>
 8026d00:	7d20      	ldrb	r0, [r4, #20]
 8026d02:	f3c0 07c2 	ubfx	r7, r0, #3, #3
 8026d06:	7f60      	ldrb	r0, [r4, #29]
 8026d08:	0600      	lsls	r0, r0, #24
 8026d0a:	d508      	bpl.n	8026d1e <ProcessReceivedPacket+0x94>
 8026d0c:	f047 0080 	orr.w	r0, r7, #128	; 0x80
 8026d10:	7760      	strb	r0, [r4, #29]
 8026d12:	e01a      	b.n	8026d4a <ProcessReceivedPacket+0xc0>
 8026d14:	2700      	movs	r7, #0
 8026d16:	4620      	mov	r0, r4
 8026d18:	f000 f939 	bl	8026f8e <SendNullPacket>
 8026d1c:	e7ed      	b.n	8026cfa <ProcessReceivedPacket+0x70>
 8026d1e:	7fa0      	ldrb	r0, [r4, #30]
 8026d20:	42b8      	cmp	r0, r7
 8026d22:	d010      	beq.n	8026d46 <ProcessReceivedPacket+0xbc>
 8026d24:	77a7      	strb	r7, [r4, #30]
 8026d26:	e002      	b.n	8026d2e <ProcessReceivedPacket+0xa4>
 8026d28:	4620      	mov	r0, r4
 8026d2a:	f7ff ff35 	bl	8026b98 <FreeBufferListHead>
 8026d2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026d30:	b130      	cbz	r0, 8026d40 <ProcessReceivedPacket+0xb6>
 8026d32:	7901      	ldrb	r1, [r0, #4]
 8026d34:	b121      	cbz	r1, 8026d40 <ProcessReceivedPacket+0xb6>
 8026d36:	7a00      	ldrb	r0, [r0, #8]
 8026d38:	f000 0007 	and.w	r0, r0, #7
 8026d3c:	42b8      	cmp	r0, r7
 8026d3e:	d1f3      	bne.n	8026d28 <ProcessReceivedPacket+0x9e>
 8026d40:	7a20      	ldrb	r0, [r4, #8]
 8026d42:	2803      	cmp	r0, #3
 8026d44:	d006      	beq.n	8026d54 <ProcessReceivedPacket+0xca>
 8026d46:	2000      	movs	r0, #0
 8026d48:	4605      	mov	r5, r0
 8026d4a:	f1b8 0f00 	cmp.w	r8, #0
 8026d4e:	d02a      	beq.n	8026da6 <ProcessReceivedPacket+0x11c>
 8026d50:	b165      	cbz	r5, 8026d6c <ProcessReceivedPacket+0xe2>
 8026d52:	e052      	b.n	8026dfa <ProcessReceivedPacket+0x170>
 8026d54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026d56:	b118      	cbz	r0, 8026d60 <ProcessReceivedPacket+0xd6>
 8026d58:	4620      	mov	r0, r4
 8026d5a:	f7ff fe2b 	bl	80269b4 <SendQueuedPackets>
 8026d5e:	e7f3      	b.n	8026d48 <ProcessReceivedPacket+0xbe>
 8026d60:	2200      	movs	r2, #0
 8026d62:	2101      	movs	r1, #1
 8026d64:	4620      	mov	r0, r4
 8026d66:	f000 fa31 	bl	80271cc <SetTWUARTTimer>
 8026d6a:	e7ed      	b.n	8026d48 <ProcessReceivedPacket+0xbe>
 8026d6c:	7fe0      	ldrb	r0, [r4, #31]
 8026d6e:	1c40      	adds	r0, r0, #1
 8026d70:	f000 0007 	and.w	r0, r0, #7
 8026d74:	77e0      	strb	r0, [r4, #31]
 8026d76:	f894 0020 	ldrb.w	r0, [r4, #32]
 8026d7a:	1c40      	adds	r0, r0, #1
 8026d7c:	b2c0      	uxtb	r0, r0
 8026d7e:	f884 0020 	strb.w	r0, [r4, #32]
 8026d82:	7f21      	ldrb	r1, [r4, #28]
 8026d84:	1e49      	subs	r1, r1, #1
 8026d86:	4288      	cmp	r0, r1
 8026d88:	db03      	blt.n	8026d92 <ProcessReceivedPacket+0x108>
 8026d8a:	4620      	mov	r0, r4
 8026d8c:	f000 f8ff 	bl	8026f8e <SendNullPacket>
 8026d90:	e008      	b.n	8026da4 <ProcessReceivedPacket+0x11a>
 8026d92:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8026d96:	0740      	lsls	r0, r0, #29
 8026d98:	d406      	bmi.n	8026da8 <ProcessReceivedPacket+0x11e>
 8026d9a:	2102      	movs	r1, #2
 8026d9c:	4620      	mov	r0, r4
 8026d9e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8026da0:	f000 fa14 	bl	80271cc <SetTWUARTTimer>
 8026da4:	4605      	mov	r5, r0
 8026da6:	bb1d      	cbnz	r5, 8026df0 <ProcessReceivedPacket+0x166>
 8026da8:	8aa0      	ldrh	r0, [r4, #20]
 8026daa:	f3c0 2703 	ubfx	r7, r0, #8, #4
 8026dae:	2f0f      	cmp	r7, #15
 8026db0:	d019      	beq.n	8026de6 <ProcessReceivedPacket+0x15c>
 8026db2:	b1ef      	cbz	r7, 8026df0 <ProcessReceivedPacket+0x166>
 8026db4:	6820      	ldr	r0, [r4, #0]
 8026db6:	f7ec fa94 	bl	80132e2 <BTPS_ReleaseMutex>
 8026dba:	6920      	ldr	r0, [r4, #16]
 8026dbc:	2105      	movs	r1, #5
 8026dbe:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8026dc2:	2008      	movs	r0, #8
 8026dc4:	9004      	str	r0, [sp, #16]
 8026dc6:	f88d 1000 	strb.w	r1, [sp]
 8026dca:	f88d 7004 	strb.w	r7, [sp, #4]
 8026dce:	e9d4 210e 	ldrd	r2, r1, [r4, #56]	; 0x38
 8026dd2:	4668      	mov	r0, sp
 8026dd4:	4790      	blx	r2
 8026dd6:	4605      	mov	r5, r0
 8026dd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026ddc:	6820      	ldr	r0, [r4, #0]
 8026dde:	f7ec fa64 	bl	80132aa <BTPS_WaitMutex>
 8026de2:	b130      	cbz	r0, 8026df2 <ProcessReceivedPacket+0x168>
 8026de4:	e007      	b.n	8026df6 <ProcessReceivedPacket+0x16c>
 8026de6:	464a      	mov	r2, r9
 8026de8:	4631      	mov	r1, r6
 8026dea:	4620      	mov	r0, r4
 8026dec:	f000 f80a 	bl	8026e04 <ProcessTWUARTMessage>
 8026df0:	e003      	b.n	8026dfa <ProcessReceivedPacket+0x170>
 8026df2:	f06f 0502 	mvn.w	r5, #2
 8026df6:	2000      	movs	r0, #0
 8026df8:	6120      	str	r0, [r4, #16]
 8026dfa:	b005      	add	sp, #20
 8026dfc:	4628      	mov	r0, r5
 8026dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i.ProcessTWUARTMessage:

08026e04 <ProcessTWUARTMessage>:
 8026e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e08:	4691      	mov	r9, r2
 8026e0a:	460f      	mov	r7, r1
 8026e0c:	4605      	mov	r5, r0
 8026e0e:	2902      	cmp	r1, #2
 8026e10:	d35a      	bcc.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e12:	2607      	movs	r6, #7
 8026e14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8026ee8 <ProcessTWUARTMessage+0xe4>
 8026e18:	2400      	movs	r4, #0
 8026e1a:	eb08 0144 	add.w	r1, r8, r4, lsl #1
 8026e1e:	2202      	movs	r2, #2
 8026e20:	4648      	mov	r0, r9
 8026e22:	f7ec fbbc 	bl	801359e <BTPS_MemCompare>
 8026e26:	b900      	cbnz	r0, 8026e2a <ProcessTWUARTMessage+0x26>
 8026e28:	b2e6      	uxtb	r6, r4
 8026e2a:	1c64      	adds	r4, r4, #1
 8026e2c:	2c07      	cmp	r4, #7
 8026e2e:	d202      	bcs.n	8026e36 <ProcessTWUARTMessage+0x32>
 8026e30:	2e07      	cmp	r6, #7
 8026e32:	d0f2      	beq.n	8026e1a <ProcessTWUARTMessage+0x16>
 8026e34:	e001      	b.n	8026e3a <ProcessTWUARTMessage+0x36>
 8026e36:	2e07      	cmp	r6, #7
 8026e38:	d046      	beq.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e3a:	2e07      	cmp	r6, #7
 8026e3c:	d244      	bcs.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e3e:	e8df f006 	tbb	[pc, r6]
 8026e42:	1204      	.short	0x1204
 8026e44:	4f3c1e17 	.word	0x4f3c1e17
 8026e48:	002b      	.short	0x002b
 8026e4a:	7a28      	ldrb	r0, [r5, #8]
 8026e4c:	2801      	cmp	r0, #1
 8026e4e:	d004      	beq.n	8026e5a <ProcessTWUARTMessage+0x56>
 8026e50:	2802      	cmp	r0, #2
 8026e52:	d002      	beq.n	8026e5a <ProcessTWUARTMessage+0x56>
 8026e54:	4628      	mov	r0, r5
 8026e56:	f000 fb96 	bl	8027586 <TWUART_Resynchronize>
 8026e5a:	2100      	movs	r1, #0
 8026e5c:	4628      	mov	r0, r5
 8026e5e:	f000 f947 	bl	80270f0 <SendTWUARTMessage>
 8026e62:	2101      	movs	r1, #1
 8026e64:	e037      	b.n	8026ed6 <ProcessTWUARTMessage+0xd2>
 8026e66:	7a28      	ldrb	r0, [r5, #8]
 8026e68:	2801      	cmp	r0, #1
 8026e6a:	d12d      	bne.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e6c:	2102      	movs	r1, #2
 8026e6e:	e01f      	b.n	8026eb0 <ProcessTWUARTMessage+0xac>
 8026e70:	7a28      	ldrb	r0, [r5, #8]
 8026e72:	2802      	cmp	r0, #2
 8026e74:	d001      	beq.n	8026e7a <ProcessTWUARTMessage+0x76>
 8026e76:	2803      	cmp	r0, #3
 8026e78:	d126      	bne.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e7a:	2103      	movs	r1, #3
 8026e7c:	e02b      	b.n	8026ed6 <ProcessTWUARTMessage+0xd2>
 8026e7e:	7a28      	ldrb	r0, [r5, #8]
 8026e80:	2802      	cmp	r0, #2
 8026e82:	d121      	bne.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e84:	f109 0202 	add.w	r2, r9, #2
 8026e88:	1eb9      	subs	r1, r7, #2
 8026e8a:	4628      	mov	r0, r5
 8026e8c:	f7ff feb2 	bl	8026bf4 <ParseConfigurationField>
 8026e90:	2800      	cmp	r0, #0
 8026e92:	d119      	bne.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026e94:	2103      	movs	r1, #3
 8026e96:	e00b      	b.n	8026eb0 <ProcessTWUARTMessage+0xac>
 8026e98:	7a28      	ldrb	r0, [r5, #8]
 8026e9a:	2803      	cmp	r0, #3
 8026e9c:	d001      	beq.n	8026ea2 <ProcessTWUARTMessage+0x9e>
 8026e9e:	2805      	cmp	r0, #5
 8026ea0:	d112      	bne.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026ea2:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 8026ea6:	07c0      	lsls	r0, r0, #31
 8026ea8:	d001      	beq.n	8026eae <ProcessTWUARTMessage+0xaa>
 8026eaa:	2104      	movs	r1, #4
 8026eac:	e000      	b.n	8026eb0 <ProcessTWUARTMessage+0xac>
 8026eae:	2105      	movs	r1, #5
 8026eb0:	4628      	mov	r0, r5
 8026eb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026eb6:	f000 b949 	b.w	802714c <SetTWUARTState>
 8026eba:	7a28      	ldrb	r0, [r5, #8]
 8026ebc:	2803      	cmp	r0, #3
 8026ebe:	d009      	beq.n	8026ed4 <ProcessTWUARTMessage+0xd0>
 8026ec0:	2804      	cmp	r0, #4
 8026ec2:	d003      	beq.n	8026ecc <ProcessTWUARTMessage+0xc8>
 8026ec4:	2805      	cmp	r0, #5
 8026ec6:	d005      	beq.n	8026ed4 <ProcessTWUARTMessage+0xd0>
 8026ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ecc:	2105      	movs	r1, #5
 8026ece:	4628      	mov	r0, r5
 8026ed0:	f000 f93c 	bl	802714c <SetTWUARTState>
 8026ed4:	2105      	movs	r1, #5
 8026ed6:	4628      	mov	r0, r5
 8026ed8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026edc:	f000 b908 	b.w	80270f0 <SendTWUARTMessage>
 8026ee0:	7a28      	ldrb	r0, [r5, #8]
 8026ee2:	2805      	cmp	r0, #5
 8026ee4:	d0d6      	beq.n	8026e94 <ProcessTWUARTMessage+0x90>
 8026ee6:	e7ef      	b.n	8026ec8 <ProcessTWUARTMessage+0xc4>
 8026ee8:	08039805 	.word	0x08039805

Disassembly of section i.RestartPacketizer:

08026eec <RestartPacketizer>:
 8026eec:	b570      	push	{r4, r5, r6, lr}
 8026eee:	2500      	movs	r5, #0
 8026ef0:	4604      	mov	r4, r0
 8026ef2:	60c5      	str	r5, [r0, #12]
 8026ef4:	2204      	movs	r2, #4
 8026ef6:	4629      	mov	r1, r5
 8026ef8:	3014      	adds	r0, #20
 8026efa:	f7ec fae0 	bl	80134be <BTPS_MemInitialize>
 8026efe:	6920      	ldr	r0, [r4, #16]
 8026f00:	2800      	cmp	r0, #0
 8026f02:	d002      	beq.n	8026f0a <RestartPacketizer+0x1e>
 8026f04:	f7ec fa74 	bl	80133f0 <BTPS_FreeMemory>
 8026f08:	6125      	str	r5, [r4, #16]
 8026f0a:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.RetransmitTimerExpired:

08026f0c <RetransmitTimerExpired>:
 8026f0c:	b570      	push	{r4, r5, r6, lr}
 8026f0e:	2800      	cmp	r0, #0
 8026f10:	d03c      	beq.n	8026f8c <RetransmitTimerExpired+0x80>
 8026f12:	4605      	mov	r5, r0
 8026f14:	6800      	ldr	r0, [r0, #0]
 8026f16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8026f1a:	f7ec f9c6 	bl	80132aa <BTPS_WaitMutex>
 8026f1e:	2800      	cmp	r0, #0
 8026f20:	d034      	beq.n	8026f8c <RetransmitTimerExpired+0x80>
 8026f22:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 8026f26:	0781      	lsls	r1, r0, #30
 8026f28:	d528      	bpl.n	8026f7c <RetransmitTimerExpired+0x70>
 8026f2a:	f020 0002 	bic.w	r0, r0, #2
 8026f2e:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
 8026f32:	7a28      	ldrb	r0, [r5, #8]
 8026f34:	2801      	cmp	r0, #1
 8026f36:	d006      	beq.n	8026f46 <RetransmitTimerExpired+0x3a>
 8026f38:	2802      	cmp	r0, #2
 8026f3a:	d006      	beq.n	8026f4a <RetransmitTimerExpired+0x3e>
 8026f3c:	2803      	cmp	r0, #3
 8026f3e:	d009      	beq.n	8026f54 <RetransmitTimerExpired+0x48>
 8026f40:	2805      	cmp	r0, #5
 8026f42:	d113      	bne.n	8026f6c <RetransmitTimerExpired+0x60>
 8026f44:	e018      	b.n	8026f78 <RetransmitTimerExpired+0x6c>
 8026f46:	2100      	movs	r1, #0
 8026f48:	e000      	b.n	8026f4c <RetransmitTimerExpired+0x40>
 8026f4a:	2102      	movs	r1, #2
 8026f4c:	4628      	mov	r0, r5
 8026f4e:	f000 f8cf 	bl	80270f0 <SendTWUARTMessage>
 8026f52:	e00b      	b.n	8026f6c <RetransmitTimerExpired+0x60>
 8026f54:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8026f56:	e005      	b.n	8026f64 <RetransmitTimerExpired+0x58>
 8026f58:	f104 0108 	add.w	r1, r4, #8
 8026f5c:	4628      	mov	r0, r5
 8026f5e:	f000 f863 	bl	8027028 <SendSLIPPacket>
 8026f62:	6824      	ldr	r4, [r4, #0]
 8026f64:	b114      	cbz	r4, 8026f6c <RetransmitTimerExpired+0x60>
 8026f66:	7920      	ldrb	r0, [r4, #4]
 8026f68:	2800      	cmp	r0, #0
 8026f6a:	d1f5      	bne.n	8026f58 <RetransmitTimerExpired+0x4c>
 8026f6c:	2101      	movs	r1, #1
 8026f6e:	4628      	mov	r0, r5
 8026f70:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8026f72:	f000 f92b 	bl	80271cc <SetTWUARTTimer>
 8026f76:	e004      	b.n	8026f82 <RetransmitTimerExpired+0x76>
 8026f78:	2104      	movs	r1, #4
 8026f7a:	e7e7      	b.n	8026f4c <RetransmitTimerExpired+0x40>
 8026f7c:	4628      	mov	r0, r5
 8026f7e:	f7ff fdae 	bl	8026ade <CheckIdle>
 8026f82:	6828      	ldr	r0, [r5, #0]
 8026f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026f88:	f7ec b9ab 	b.w	80132e2 <BTPS_ReleaseMutex>
 8026f8c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.SendNullPacket:

08026f8e <SendNullPacket>:
 8026f8e:	b51c      	push	{r2, r3, r4, lr}
 8026f90:	2100      	movs	r1, #0
 8026f92:	9100      	str	r1, [sp, #0]
 8026f94:	7a41      	ldrb	r1, [r0, #9]
 8026f96:	07c9      	lsls	r1, r1, #31
 8026f98:	d001      	beq.n	8026f9e <SendNullPacket+0x10>
 8026f9a:	2140      	movs	r1, #64	; 0x40
 8026f9c:	9100      	str	r1, [sp, #0]
 8026f9e:	4669      	mov	r1, sp
 8026fa0:	f000 f842 	bl	8027028 <SendSLIPPacket>
 8026fa4:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.SendReliablePacket:

08026fa6 <SendReliablePacket>:
 8026fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026faa:	4604      	mov	r4, r0
 8026fac:	4698      	mov	r8, r3
 8026fae:	4616      	mov	r6, r2
 8026fb0:	460f      	mov	r7, r1
 8026fb2:	f102 000c 	add.w	r0, r2, #12
 8026fb6:	f7ec fa01 	bl	80133bc <BTPS_AllocateMemory>
 8026fba:	0005      	movs	r5, r0
 8026fbc:	d008      	beq.n	8026fd0 <SendReliablePacket+0x2a>
 8026fbe:	2210      	movs	r2, #16
 8026fc0:	2100      	movs	r1, #0
 8026fc2:	f7ec fa7c 	bl	80134be <BTPS_MemInitialize>
 8026fc6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8026fc8:	b340      	cbz	r0, 802701c <SendReliablePacket+0x76>
 8026fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8026fcc:	6005      	str	r5, [r0, #0]
 8026fce:	6365      	str	r5, [r4, #52]	; 0x34
 8026fd0:	b335      	cbz	r5, 8027020 <SendReliablePacket+0x7a>
 8026fd2:	0330      	lsls	r0, r6, #12
 8026fd4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8026fd8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
 8026fdc:	60a8      	str	r0, [r5, #8]
 8026fde:	7a61      	ldrb	r1, [r4, #9]
 8026fe0:	07c9      	lsls	r1, r1, #31
 8026fe2:	d002      	beq.n	8026fea <SendReliablePacket+0x44>
 8026fe4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8026fe8:	60a8      	str	r0, [r5, #8]
 8026fea:	4632      	mov	r2, r6
 8026fec:	4641      	mov	r1, r8
 8026fee:	f105 000c 	add.w	r0, r5, #12
 8026ff2:	f7ec fa60 	bl	80134b6 <BTPS_MemCopy>
 8026ff6:	4620      	mov	r0, r4
 8026ff8:	f7ff fcdc 	bl	80269b4 <SendQueuedPackets>
 8026ffc:	2800      	cmp	r0, #0
 8026ffe:	d111      	bne.n	8027024 <SendReliablePacket+0x7e>
 8027000:	7929      	ldrb	r1, [r5, #4]
 8027002:	2900      	cmp	r1, #0
 8027004:	d00e      	beq.n	8027024 <SendReliablePacket+0x7e>
 8027006:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
 802700a:	0789      	lsls	r1, r1, #30
 802700c:	d40a      	bmi.n	8027024 <SendReliablePacket+0x7e>
 802700e:	4620      	mov	r0, r4
 8027010:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8027012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027016:	2101      	movs	r1, #1
 8027018:	f000 b8d8 	b.w	80271cc <SetTWUARTTimer>
 802701c:	6325      	str	r5, [r4, #48]	; 0x30
 802701e:	e7d6      	b.n	8026fce <SendReliablePacket+0x28>
 8027020:	f06f 0001 	mvn.w	r0, #1
 8027024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.SendSLIPPacket:

08027028 <SendSLIPPacket>:
 8027028:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802702a:	4605      	mov	r5, r0
 802702c:	460c      	mov	r4, r1
 802702e:	6808      	ldr	r0, [r1, #0]
 8027030:	7fe9      	ldrb	r1, [r5, #31]
 8027032:	f020 0038 	bic.w	r0, r0, #56	; 0x38
 8027036:	ea40 00c1 	orr.w	r0, r0, r1, lsl #3
 802703a:	6020      	str	r0, [r4, #0]
 802703c:	f88d 0000 	strb.w	r0, [sp]
 8027040:	8820      	ldrh	r0, [r4, #0]
 8027042:	4669      	mov	r1, sp
 8027044:	0a00      	lsrs	r0, r0, #8
 8027046:	f88d 0001 	strb.w	r0, [sp, #1]
 802704a:	6820      	ldr	r0, [r4, #0]
 802704c:	0c00      	lsrs	r0, r0, #16
 802704e:	f88d 0002 	strb.w	r0, [sp, #2]
 8027052:	20ff      	movs	r0, #255	; 0xff
 8027054:	f88d 0003 	strb.w	r0, [sp, #3]
 8027058:	2000      	movs	r0, #0
 802705a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 802705e:	5c0b      	ldrb	r3, [r1, r0]
 8027060:	1c40      	adds	r0, r0, #1
 8027062:	1ad2      	subs	r2, r2, r3
 8027064:	f88d 2003 	strb.w	r2, [sp, #3]
 8027068:	2803      	cmp	r0, #3
 802706a:	d3f6      	bcc.n	802705a <SendSLIPPacket+0x32>
 802706c:	6820      	ldr	r0, [r4, #0]
 802706e:	4a1f      	ldr	r2, [pc, #124]	; (80270ec <SendSLIPPacket+0xc4>)
 8027070:	f3c0 360b 	ubfx	r6, r0, #12, #12
 8027074:	2101      	movs	r1, #1
 8027076:	4628      	mov	r0, r5
 8027078:	f7ff fced 	bl	8026a56 <TransmitData>
 802707c:	2800      	cmp	r0, #0
 802707e:	d134      	bne.n	80270ea <SendSLIPPacket+0xc2>
 8027080:	466a      	mov	r2, sp
 8027082:	2104      	movs	r1, #4
 8027084:	4628      	mov	r0, r5
 8027086:	f7ff fd41 	bl	8026b0c <EncodeAndSend>
 802708a:	2800      	cmp	r0, #0
 802708c:	d12d      	bne.n	80270ea <SendSLIPPacket+0xc2>
 802708e:	1d22      	adds	r2, r4, #4
 8027090:	4631      	mov	r1, r6
 8027092:	4628      	mov	r0, r5
 8027094:	f7ff fd3a 	bl	8026b0c <EncodeAndSend>
 8027098:	2800      	cmp	r0, #0
 802709a:	d126      	bne.n	80270ea <SendSLIPPacket+0xc2>
 802709c:	7820      	ldrb	r0, [r4, #0]
 802709e:	0640      	lsls	r0, r0, #25
 80270a0:	d515      	bpl.n	80270ce <SendSLIPPacket+0xa6>
 80270a2:	466a      	mov	r2, sp
 80270a4:	2104      	movs	r1, #4
 80270a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80270aa:	f7ff fd00 	bl	8026aae <CalculateCRC>
 80270ae:	1d22      	adds	r2, r4, #4
 80270b0:	4631      	mov	r1, r6
 80270b2:	f7ff fcfc 	bl	8026aae <CalculateCRC>
 80270b6:	f88d 0001 	strb.w	r0, [sp, #1]
 80270ba:	0a00      	lsrs	r0, r0, #8
 80270bc:	f88d 0000 	strb.w	r0, [sp]
 80270c0:	466a      	mov	r2, sp
 80270c2:	2102      	movs	r1, #2
 80270c4:	4628      	mov	r0, r5
 80270c6:	f7ff fd21 	bl	8026b0c <EncodeAndSend>
 80270ca:	2800      	cmp	r0, #0
 80270cc:	d10d      	bne.n	80270ea <SendSLIPPacket+0xc2>
 80270ce:	4a07      	ldr	r2, [pc, #28]	; (80270ec <SendSLIPPacket+0xc4>)
 80270d0:	2101      	movs	r1, #1
 80270d2:	4628      	mov	r0, r5
 80270d4:	f7ff fcbf 	bl	8026a56 <TransmitData>
 80270d8:	2800      	cmp	r0, #0
 80270da:	d106      	bne.n	80270ea <SendSLIPPacket+0xc2>
 80270dc:	f885 0020 	strb.w	r0, [r5, #32]
 80270e0:	4602      	mov	r2, r0
 80270e2:	2102      	movs	r1, #2
 80270e4:	4628      	mov	r0, r5
 80270e6:	f000 f871 	bl	80271cc <SetTWUARTTimer>
 80270ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80270ec:	080397f8 	.word	0x080397f8

Disassembly of section i.SendTWUARTMessage:

080270f0 <SendTWUARTMessage>:
 80270f0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80270f2:	460e      	mov	r6, r1
 80270f4:	4914      	ldr	r1, [pc, #80]	; (8027148 <SendTWUARTMessage+0x58>)
 80270f6:	4604      	mov	r4, r0
 80270f8:	466d      	mov	r5, sp
 80270fa:	a801      	add	r0, sp, #4
 80270fc:	eb01 0146 	add.w	r1, r1, r6, lsl #1
 8027100:	2202      	movs	r2, #2
 8027102:	f7ec f9d8 	bl	80134b6 <BTPS_MemCopy>
 8027106:	2002      	movs	r0, #2
 8027108:	2e02      	cmp	r6, #2
 802710a:	d113      	bne.n	8027134 <SendTWUARTMessage+0x44>
 802710c:	2000      	movs	r0, #0
 802710e:	f88d 0006 	strb.w	r0, [sp, #6]
 8027112:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8027116:	00c0      	lsls	r0, r0, #3
 8027118:	f88d 0006 	strb.w	r0, [sp, #6]
 802711c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 8027120:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8027124:	f88d 0006 	strb.w	r0, [sp, #6]
 8027128:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 802712c:	4308      	orrs	r0, r1
 802712e:	f88d 0006 	strb.w	r0, [sp, #6]
 8027132:	2003      	movs	r0, #3
 8027134:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8027138:	ea41 3000 	orr.w	r0, r1, r0, lsl #12
 802713c:	9000      	str	r0, [sp, #0]
 802713e:	4629      	mov	r1, r5
 8027140:	4620      	mov	r0, r4
 8027142:	f7ff ff71 	bl	8027028 <SendSLIPPacket>
 8027146:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027148:	08039805 	.word	0x08039805

Disassembly of section i.SetTWUARTState:

0802714c <SetTWUARTState>:
 802714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027150:	7a07      	ldrb	r7, [r0, #8]
 8027152:	460e      	mov	r6, r1
 8027154:	4604      	mov	r4, r0
 8027156:	7201      	strb	r1, [r0, #8]
 8027158:	2904      	cmp	r1, #4
 802715a:	d004      	beq.n	8027166 <SetTWUARTState+0x1a>
 802715c:	2f04      	cmp	r7, #4
 802715e:	d102      	bne.n	8027166 <SetTWUARTState+0x1a>
 8027160:	2100      	movs	r1, #0
 8027162:	f7ff fc5d 	bl	8026a20 <SendSleepIndication>
 8027166:	2e06      	cmp	r6, #6
 8027168:	d220      	bcs.n	80271ac <SetTWUARTState+0x60>
 802716a:	e8df f006 	tbb	[pc, r6]
 802716e:	031f      	.short	0x031f
 8027170:	1d170a05 	.word	0x1d170a05
 8027174:	2100      	movs	r1, #0
 8027176:	e000      	b.n	802717a <SetTWUARTState+0x2e>
 8027178:	2102      	movs	r1, #2
 802717a:	4620      	mov	r0, r4
 802717c:	f7ff ffb8 	bl	80270f0 <SendTWUARTMessage>
 8027180:	e008      	b.n	8027194 <SetTWUARTState+0x48>
 8027182:	7f60      	ldrb	r0, [r4, #29]
 8027184:	f000 0007 	and.w	r0, r0, #7
 8027188:	7760      	strb	r0, [r4, #29]
 802718a:	4620      	mov	r0, r4
 802718c:	f7ff fc12 	bl	80269b4 <SendQueuedPackets>
 8027190:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8027192:	b108      	cbz	r0, 8027198 <SetTWUARTState+0x4c>
 8027194:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8027196:	e012      	b.n	80271be <SetTWUARTState+0x72>
 8027198:	2500      	movs	r5, #0
 802719a:	e010      	b.n	80271be <SetTWUARTState+0x72>
 802719c:	2106      	movs	r1, #6
 802719e:	4620      	mov	r0, r4
 80271a0:	f7ff ffa6 	bl	80270f0 <SendTWUARTMessage>
 80271a4:	2500      	movs	r5, #0
 80271a6:	e004      	b.n	80271b2 <SetTWUARTState+0x66>
 80271a8:	2104      	movs	r1, #4
 80271aa:	e7e6      	b.n	802717a <SetTWUARTState+0x2e>
 80271ac:	2500      	movs	r5, #0
 80271ae:	2e04      	cmp	r6, #4
 80271b0:	d105      	bne.n	80271be <SetTWUARTState+0x72>
 80271b2:	2f04      	cmp	r7, #4
 80271b4:	d003      	beq.n	80271be <SetTWUARTState+0x72>
 80271b6:	2101      	movs	r1, #1
 80271b8:	4620      	mov	r0, r4
 80271ba:	f7ff fc31 	bl	8026a20 <SendSleepIndication>
 80271be:	462a      	mov	r2, r5
 80271c0:	4620      	mov	r0, r4
 80271c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80271c6:	2101      	movs	r1, #1
 80271c8:	f000 b800 	b.w	80271cc <SetTWUARTTimer>

Disassembly of section i.SetTWUARTTimer:

080271cc <SetTWUARTTimer>:
 80271cc:	b530      	push	{r4, r5, lr}
 80271ce:	2301      	movs	r3, #1
 80271d0:	b085      	sub	sp, #20
 80271d2:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80271d6:	408b      	lsls	r3, r1
 80271d8:	b152      	cbz	r2, 80271f0 <SetTWUARTTimer+0x24>
 80271da:	2502      	movs	r5, #2
 80271dc:	f88d 5000 	strb.w	r5, [sp]
 80271e0:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80271e2:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80271e6:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80271ea:	2101      	movs	r1, #1
 80271ec:	431a      	orrs	r2, r3
 80271ee:	e00b      	b.n	8027208 <SetTWUARTTimer+0x3c>
 80271f0:	2103      	movs	r1, #3
 80271f2:	f88d 1000 	strb.w	r1, [sp]
 80271f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80271f8:	9101      	str	r1, [sp, #4]
 80271fa:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80271fe:	ea12 0103 	ands.w	r1, r2, r3
 8027202:	d003      	beq.n	802720c <SetTWUARTTimer+0x40>
 8027204:	2101      	movs	r1, #1
 8027206:	439a      	bics	r2, r3
 8027208:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
 802720c:	2200      	movs	r2, #0
 802720e:	b121      	cbz	r1, 802721a <SetTWUARTTimer+0x4e>
 8027210:	e9d0 210e 	ldrd	r2, r1, [r0, #56]	; 0x38
 8027214:	4668      	mov	r0, sp
 8027216:	4790      	blx	r2
 8027218:	4602      	mov	r2, r0
 802721a:	b005      	add	sp, #20
 802721c:	4610      	mov	r0, r2
 802721e:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.SetTransportConfiguration:

08027220 <SetTransportConfiguration>:
 8027220:	b500      	push	{lr}
 8027222:	b085      	sub	sp, #20
 8027224:	2206      	movs	r2, #6
 8027226:	f88d 1004 	strb.w	r1, [sp, #4]
 802722a:	2111      	movs	r1, #17
 802722c:	f88d 1005 	strb.w	r1, [sp, #5]
 8027230:	2113      	movs	r1, #19
 8027232:	f88d 2000 	strb.w	r2, [sp]
 8027236:	f88d 1006 	strb.w	r1, [sp, #6]
 802723a:	e9d0 210e 	ldrd	r2, r1, [r0, #56]	; 0x38
 802723e:	4668      	mov	r0, sp
 8027240:	4790      	blx	r2
 8027242:	b005      	add	sp, #20
 8027244:	bd00      	pop	{pc}

Disassembly of section i.TWUART_Initialize:

08027248 <TWUART_Initialize>:
 8027248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802724c:	b08f      	sub	sp, #60	; 0x3c
 802724e:	4689      	mov	r9, r1
 8027250:	0006      	movs	r6, r0
 8027252:	d06a      	beq.n	802732a <TWUART_Initialize+0xe2>
 8027254:	2060      	movs	r0, #96	; 0x60
 8027256:	f7ec f8b1 	bl	80133bc <BTPS_AllocateMemory>
 802725a:	0004      	movs	r4, r0
 802725c:	d066      	beq.n	802732c <TWUART_Initialize+0xe4>
 802725e:	2260      	movs	r2, #96	; 0x60
 8027260:	2100      	movs	r1, #0
 8027262:	f7ec f92c 	bl	80134be <BTPS_MemInitialize>
 8027266:	2000      	movs	r0, #0
 8027268:	f7ec f80b 	bl	8013282 <BTPS_CreateMutex>
 802726c:	6020      	str	r0, [r4, #0]
 802726e:	b3e8      	cbz	r0, 80272ec <TWUART_Initialize+0xa4>
 8027270:	2000      	movs	r0, #0
 8027272:	f7ec f806 	bl	8013282 <BTPS_CreateMutex>
 8027276:	6060      	str	r0, [r4, #4]
 8027278:	b3c8      	cbz	r0, 80272ee <TWUART_Initialize+0xa6>
 802727a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802727e:	6820      	ldr	r0, [r4, #0]
 8027280:	f7ec f813 	bl	80132aa <BTPS_WaitMutex>
 8027284:	b390      	cbz	r0, 80272ec <TWUART_Initialize+0xa4>
 8027286:	f04f 0800 	mov.w	r8, #0
 802728a:	f88d 8000 	strb.w	r8, [sp]
 802728e:	2003      	movs	r0, #3
 8027290:	ad05      	add	r5, sp, #20
 8027292:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8027296:	4b27      	ldr	r3, [pc, #156]	; (8027334 <TWUART_Initialize+0xec>)
 8027298:	4640      	mov	r0, r8
 802729a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 802729e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80272a2:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
 80272a6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80272aa:	1c40      	adds	r0, r0, #1
 80272ac:	604c      	str	r4, [r1, #4]
 80272ae:	2803      	cmp	r0, #3
 80272b0:	dbf3      	blt.n	802729a <TWUART_Initialize+0x52>
 80272b2:	4649      	mov	r1, r9
 80272b4:	4668      	mov	r0, sp
 80272b6:	47b0      	blx	r6
 80272b8:	0007      	movs	r7, r0
 80272ba:	d127      	bne.n	802730c <TWUART_Initialize+0xc4>
 80272bc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80272c0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80272c4:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80272c8:	6889      	ldr	r1, [r1, #8]
 80272ca:	1c40      	adds	r0, r0, #1
 80272cc:	6251      	str	r1, [r2, #36]	; 0x24
 80272ce:	2803      	cmp	r0, #3
 80272d0:	dbf4      	blt.n	80272bc <TWUART_Initialize+0x74>
 80272d2:	e9c4 690e 	strd	r6, r9, [r4, #56]	; 0x38
 80272d6:	f884 8008 	strb.w	r8, [r4, #8]
 80272da:	f884 800a 	strb.w	r8, [r4, #10]
 80272de:	2180      	movs	r1, #128	; 0x80
 80272e0:	7761      	strb	r1, [r4, #29]
 80272e2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80272e6:	64a1      	str	r1, [r4, #72]	; 0x48
 80272e8:	21fa      	movs	r1, #250	; 0xfa
 80272ea:	e001      	b.n	80272f0 <TWUART_Initialize+0xa8>
 80272ec:	e012      	b.n	8027314 <TWUART_Initialize+0xcc>
 80272ee:	e015      	b.n	802731c <TWUART_Initialize+0xd4>
 80272f0:	64e1      	str	r1, [r4, #76]	; 0x4c
 80272f2:	6521      	str	r1, [r4, #80]	; 0x50
 80272f4:	2104      	movs	r1, #4
 80272f6:	6421      	str	r1, [r4, #64]	; 0x40
 80272f8:	2101      	movs	r1, #1
 80272fa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80272fe:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8027302:	2100      	movs	r1, #0
 8027304:	4620      	mov	r0, r4
 8027306:	f7ff ff8b 	bl	8027220 <SetTransportConfiguration>
 802730a:	4607      	mov	r7, r0
 802730c:	6820      	ldr	r0, [r4, #0]
 802730e:	f7eb ffe8 	bl	80132e2 <BTPS_ReleaseMutex>
 8027312:	b15f      	cbz	r7, 802732c <TWUART_Initialize+0xe4>
 8027314:	6860      	ldr	r0, [r4, #4]
 8027316:	b108      	cbz	r0, 802731c <TWUART_Initialize+0xd4>
 8027318:	f7eb ffe9 	bl	80132ee <BTPS_CloseMutex>
 802731c:	6820      	ldr	r0, [r4, #0]
 802731e:	b108      	cbz	r0, 8027324 <TWUART_Initialize+0xdc>
 8027320:	f7eb ffe5 	bl	80132ee <BTPS_CloseMutex>
 8027324:	4620      	mov	r0, r4
 8027326:	f7ec f863 	bl	80133f0 <BTPS_FreeMemory>
 802732a:	2400      	movs	r4, #0
 802732c:	b00f      	add	sp, #60	; 0x3c
 802732e:	4620      	mov	r0, r4
 8027330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027334:	08039814 	.word	0x08039814

Disassembly of section i.TWUART_ReceiveBytes:

08027338 <TWUART_ReceiveBytes>:
 8027338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802733c:	4691      	mov	r9, r2
 802733e:	468a      	mov	sl, r1
 8027340:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8027344:	2800      	cmp	r0, #0
 8027346:	d070      	beq.n	802742a <TWUART_ReceiveBytes+0xf2>
 8027348:	f1ba 0f00 	cmp.w	sl, #0
 802734c:	d0fb      	beq.n	8027346 <TWUART_ReceiveBytes+0xe>
 802734e:	f1b9 0f00 	cmp.w	r9, #0
 8027352:	d0f8      	beq.n	8027346 <TWUART_ReceiveBytes+0xe>
 8027354:	4604      	mov	r4, r0
 8027356:	6840      	ldr	r0, [r0, #4]
 8027358:	4631      	mov	r1, r6
 802735a:	f7eb ffa6 	bl	80132aa <BTPS_WaitMutex>
 802735e:	1eb5      	subs	r5, r6, #2
 8027360:	2800      	cmp	r0, #0
 8027362:	d07d      	beq.n	8027460 <TWUART_ReceiveBytes+0x128>
 8027364:	4631      	mov	r1, r6
 8027366:	6820      	ldr	r0, [r4, #0]
 8027368:	f7eb ff9f 	bl	80132aa <BTPS_WaitMutex>
 802736c:	2800      	cmp	r0, #0
 802736e:	d078      	beq.n	8027462 <TWUART_ReceiveBytes+0x12a>
 8027370:	2200      	movs	r2, #0
 8027372:	4611      	mov	r1, r2
 8027374:	4620      	mov	r0, r4
 8027376:	f7ff ff29 	bl	80271cc <SetTWUARTTimer>
 802737a:	0006      	movs	r6, r0
 802737c:	d172      	bne.n	8027464 <TWUART_ReceiveBytes+0x12c>
 802737e:	7a61      	ldrb	r1, [r4, #9]
 8027380:	7aa0      	ldrb	r0, [r4, #10]
 8027382:	f3c1 0780 	ubfx	r7, r1, #2, #1
 8027386:	0789      	lsls	r1, r1, #30
 8027388:	d501      	bpl.n	802738e <TWUART_ReceiveBytes+0x56>
 802738a:	2104      	movs	r1, #4
 802738c:	e000      	b.n	8027390 <TWUART_ReceiveBytes+0x58>
 802738e:	2102      	movs	r1, #2
 8027390:	9100      	str	r1, [sp, #0]
 8027392:	2104      	movs	r1, #4
 8027394:	72a1      	strb	r1, [r4, #10]
 8027396:	2802      	cmp	r0, #2
 8027398:	d00d      	beq.n	80273b6 <TWUART_ReceiveBytes+0x7e>
 802739a:	2500      	movs	r5, #0
 802739c:	f8df b134 	ldr.w	fp, [pc, #308]	; 80274d4 <TWUART_ReceiveBytes+0x19c>
 80273a0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80273a4:	f1aa 0a01 	sub.w	sl, sl, #1
 80273a8:	29c0      	cmp	r1, #192	; 0xc0
 80273aa:	d00b      	beq.n	80273c4 <TWUART_ReceiveBytes+0x8c>
 80273ac:	b37f      	cbz	r7, 802740e <TWUART_ReceiveBytes+0xd6>
 80273ae:	2700      	movs	r7, #0
 80273b0:	463b      	mov	r3, r7
 80273b2:	463a      	mov	r2, r7
 80273b4:	e01e      	b.n	80273f4 <TWUART_ReceiveBytes+0xbc>
 80273b6:	6961      	ldr	r1, [r4, #20]
 80273b8:	f3c1 350b 	ubfx	r5, r1, #12, #12
 80273bc:	0649      	lsls	r1, r1, #25
 80273be:	d5ed      	bpl.n	802739c <TWUART_ReceiveBytes+0x64>
 80273c0:	1cad      	adds	r5, r5, #2
 80273c2:	e7eb      	b.n	802739c <TWUART_ReceiveBytes+0x64>
 80273c4:	2700      	movs	r7, #0
 80273c6:	2803      	cmp	r0, #3
 80273c8:	4620      	mov	r0, r4
 80273ca:	d003      	beq.n	80273d4 <TWUART_ReceiveBytes+0x9c>
 80273cc:	f7ff fd8e 	bl	8026eec <RestartPacketizer>
 80273d0:	2001      	movs	r0, #1
 80273d2:	e05e      	b.n	8027492 <TWUART_ReceiveBytes+0x15a>
 80273d4:	f7ff fc59 	bl	8026c8a <ProcessReceivedPacket>
 80273d8:	4606      	mov	r6, r0
 80273da:	e013      	b.n	8027404 <TWUART_ReceiveBytes+0xcc>
 80273dc:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80273e0:	eb0c 080b 	add.w	r8, ip, fp
 80273e4:	f898 8002 	ldrb.w	r8, [r8, #2]
 80273e8:	4588      	cmp	r8, r1
 80273ea:	d102      	bne.n	80273f2 <TWUART_ReceiveBytes+0xba>
 80273ec:	f81b 100c 	ldrb.w	r1, [fp, ip]
 80273f0:	2301      	movs	r3, #1
 80273f2:	1c52      	adds	r2, r2, #1
 80273f4:	f8dd c000 	ldr.w	ip, [sp]
 80273f8:	4562      	cmp	r2, ip
 80273fa:	d202      	bcs.n	8027402 <TWUART_ReceiveBytes+0xca>
 80273fc:	2b00      	cmp	r3, #0
 80273fe:	d0ed      	beq.n	80273dc <TWUART_ReceiveBytes+0xa4>
 8027400:	e008      	b.n	8027414 <TWUART_ReceiveBytes+0xdc>
 8027402:	b93b      	cbnz	r3, 8027414 <TWUART_ReceiveBytes+0xdc>
 8027404:	4620      	mov	r0, r4
 8027406:	f7ff fd71 	bl	8026eec <RestartPacketizer>
 802740a:	2000      	movs	r0, #0
 802740c:	e041      	b.n	8027492 <TWUART_ReceiveBytes+0x15a>
 802740e:	e7ff      	b.n	8027410 <TWUART_ReceiveBytes+0xd8>
 8027410:	29db      	cmp	r1, #219	; 0xdb
 8027412:	d001      	beq.n	8027418 <TWUART_ReceiveBytes+0xe0>
 8027414:	b116      	cbz	r6, 802741c <TWUART_ReceiveBytes+0xe4>
 8027416:	e03c      	b.n	8027492 <TWUART_ReceiveBytes+0x15a>
 8027418:	2701      	movs	r7, #1
 802741a:	e03a      	b.n	8027492 <TWUART_ReceiveBytes+0x15a>
 802741c:	2801      	cmp	r0, #1
 802741e:	d005      	beq.n	802742c <TWUART_ReceiveBytes+0xf4>
 8027420:	2802      	cmp	r0, #2
 8027422:	d02c      	beq.n	802747e <TWUART_ReceiveBytes+0x146>
 8027424:	2803      	cmp	r0, #3
 8027426:	d134      	bne.n	8027492 <TWUART_ReceiveBytes+0x15a>
 8027428:	e7ec      	b.n	8027404 <TWUART_ReceiveBytes+0xcc>
 802742a:	e04f      	b.n	80274cc <TWUART_ReceiveBytes+0x194>
 802742c:	68e3      	ldr	r3, [r4, #12]
 802742e:	6962      	ldr	r2, [r4, #20]
 8027430:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8027434:	fa01 f10c 	lsl.w	r1, r1, ip
 8027438:	1c5b      	adds	r3, r3, #1
 802743a:	430a      	orrs	r2, r1
 802743c:	60e3      	str	r3, [r4, #12]
 802743e:	6162      	str	r2, [r4, #20]
 8027440:	2b04      	cmp	r3, #4
 8027442:	d126      	bne.n	8027492 <TWUART_ReceiveBytes+0x15a>
 8027444:	f3c2 350b 	ubfx	r5, r2, #12, #12
 8027448:	f240 4001 	movw	r0, #1025	; 0x401
 802744c:	4285      	cmp	r5, r0
 802744e:	d8d9      	bhi.n	8027404 <TWUART_ReceiveBytes+0xcc>
 8027450:	0650      	lsls	r0, r2, #25
 8027452:	d500      	bpl.n	8027456 <TWUART_ReceiveBytes+0x11e>
 8027454:	1cad      	adds	r5, r5, #2
 8027456:	f105 0008 	add.w	r0, r5, #8
 802745a:	f7eb ffaf 	bl	80133bc <BTPS_AllocateMemory>
 802745e:	e002      	b.n	8027466 <TWUART_ReceiveBytes+0x12e>
 8027460:	e033      	b.n	80274ca <TWUART_ReceiveBytes+0x192>
 8027462:	e02d      	b.n	80274c0 <TWUART_ReceiveBytes+0x188>
 8027464:	e02d      	b.n	80274c2 <TWUART_ReceiveBytes+0x18a>
 8027466:	6120      	str	r0, [r4, #16]
 8027468:	b118      	cbz	r0, 8027472 <TWUART_ReceiveBytes+0x13a>
 802746a:	2002      	movs	r0, #2
 802746c:	2100      	movs	r1, #0
 802746e:	60e1      	str	r1, [r4, #12]
 8027470:	e00f      	b.n	8027492 <TWUART_ReceiveBytes+0x15a>
 8027472:	4620      	mov	r0, r4
 8027474:	f7ff fd3a 	bl	8026eec <RestartPacketizer>
 8027478:	2000      	movs	r0, #0
 802747a:	1e86      	subs	r6, r0, #2
 802747c:	e009      	b.n	8027492 <TWUART_ReceiveBytes+0x15a>
 802747e:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 8027482:	441a      	add	r2, r3
 8027484:	7211      	strb	r1, [r2, #8]
 8027486:	68e1      	ldr	r1, [r4, #12]
 8027488:	1c49      	adds	r1, r1, #1
 802748a:	60e1      	str	r1, [r4, #12]
 802748c:	42a9      	cmp	r1, r5
 802748e:	d100      	bne.n	8027492 <TWUART_ReceiveBytes+0x15a>
 8027490:	2003      	movs	r0, #3
 8027492:	f1ba 0f00 	cmp.w	sl, #0
 8027496:	d001      	beq.n	802749c <TWUART_ReceiveBytes+0x164>
 8027498:	2e00      	cmp	r6, #0
 802749a:	d081      	beq.n	80273a0 <TWUART_ReceiveBytes+0x68>
 802749c:	72a0      	strb	r0, [r4, #10]
 802749e:	7a60      	ldrb	r0, [r4, #9]
 80274a0:	b117      	cbz	r7, 80274a8 <TWUART_ReceiveBytes+0x170>
 80274a2:	f040 0004 	orr.w	r0, r0, #4
 80274a6:	e001      	b.n	80274ac <TWUART_ReceiveBytes+0x174>
 80274a8:	f020 0004 	bic.w	r0, r0, #4
 80274ac:	7260      	strb	r0, [r4, #9]
 80274ae:	b91e      	cbnz	r6, 80274b8 <TWUART_ReceiveBytes+0x180>
 80274b0:	4620      	mov	r0, r4
 80274b2:	f7ff fb14 	bl	8026ade <CheckIdle>
 80274b6:	4606      	mov	r6, r0
 80274b8:	6820      	ldr	r0, [r4, #0]
 80274ba:	f7eb ff12 	bl	80132e2 <BTPS_ReleaseMutex>
 80274be:	e000      	b.n	80274c2 <TWUART_ReceiveBytes+0x18a>
 80274c0:	462e      	mov	r6, r5
 80274c2:	6860      	ldr	r0, [r4, #4]
 80274c4:	f7eb ff0d 	bl	80132e2 <BTPS_ReleaseMutex>
 80274c8:	e000      	b.n	80274cc <TWUART_ReceiveBytes+0x194>
 80274ca:	462e      	mov	r6, r5
 80274cc:	4630      	mov	r0, r6
 80274ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80274d2:	0000      	.short	0x0000
 80274d4:	080397f9 	.word	0x080397f9

Disassembly of section i.TWUART_Reconfigure:

080274d8 <TWUART_Reconfigure>:
 80274d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80274dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80274e0:	b3a8      	cbz	r0, 802754e <TWUART_Reconfigure+0x76>
 80274e2:	b3a1      	cbz	r1, 802754e <TWUART_Reconfigure+0x76>
 80274e4:	4604      	mov	r4, r0
 80274e6:	460d      	mov	r5, r1
 80274e8:	6800      	ldr	r0, [r0, #0]
 80274ea:	4637      	mov	r7, r6
 80274ec:	4631      	mov	r1, r6
 80274ee:	f7eb fedc 	bl	80132aa <BTPS_WaitMutex>
 80274f2:	b368      	cbz	r0, 8027550 <TWUART_Reconfigure+0x78>
 80274f4:	7a20      	ldrb	r0, [r4, #8]
 80274f6:	2804      	cmp	r0, #4
 80274f8:	d011      	beq.n	802751e <TWUART_Reconfigure+0x46>
 80274fa:	2600      	movs	r6, #0
 80274fc:	6828      	ldr	r0, [r5, #0]
 80274fe:	b188      	cbz	r0, 8027524 <TWUART_Reconfigure+0x4c>
 8027500:	1e41      	subs	r1, r0, #1
 8027502:	2906      	cmp	r1, #6
 8027504:	d80d      	bhi.n	8027522 <TWUART_Reconfigure+0x4a>
 8027506:	6420      	str	r0, [r4, #64]	; 0x40
 8027508:	7928      	ldrb	r0, [r5, #4]
 802750a:	b100      	cbz	r0, 802750e <TWUART_Reconfigure+0x36>
 802750c:	2001      	movs	r0, #1
 802750e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8027512:	7968      	ldrb	r0, [r5, #5]
 8027514:	b100      	cbz	r0, 8027518 <TWUART_Reconfigure+0x40>
 8027516:	2001      	movs	r0, #1
 8027518:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 802751c:	e002      	b.n	8027524 <TWUART_Reconfigure+0x4c>
 802751e:	2601      	movs	r6, #1
 8027520:	e7ec      	b.n	80274fc <TWUART_Reconfigure+0x24>
 8027522:	463e      	mov	r6, r7
 8027524:	68a8      	ldr	r0, [r5, #8]
 8027526:	b140      	cbz	r0, 802753a <TWUART_Reconfigure+0x62>
 8027528:	f1a0 0132 	sub.w	r1, r0, #50	; 0x32
 802752c:	f247 42fe 	movw	r2, #29950	; 0x74fe
 8027530:	4291      	cmp	r1, r2
 8027532:	d801      	bhi.n	8027538 <TWUART_Reconfigure+0x60>
 8027534:	64a0      	str	r0, [r4, #72]	; 0x48
 8027536:	e000      	b.n	802753a <TWUART_Reconfigure+0x62>
 8027538:	463e      	mov	r6, r7
 802753a:	68e8      	ldr	r0, [r5, #12]
 802753c:	b150      	cbz	r0, 8027554 <TWUART_Reconfigure+0x7c>
 802753e:	f1a0 0132 	sub.w	r1, r0, #50	; 0x32
 8027542:	f240 32b6 	movw	r2, #950	; 0x3b6
 8027546:	4291      	cmp	r1, r2
 8027548:	d803      	bhi.n	8027552 <TWUART_Reconfigure+0x7a>
 802754a:	64e0      	str	r0, [r4, #76]	; 0x4c
 802754c:	e002      	b.n	8027554 <TWUART_Reconfigure+0x7c>
 802754e:	e017      	b.n	8027580 <TWUART_Reconfigure+0xa8>
 8027550:	e014      	b.n	802757c <TWUART_Reconfigure+0xa4>
 8027552:	463e      	mov	r6, r7
 8027554:	6928      	ldr	r0, [r5, #16]
 8027556:	b138      	cbz	r0, 8027568 <TWUART_Reconfigure+0x90>
 8027558:	f1a0 0132 	sub.w	r1, r0, #50	; 0x32
 802755c:	f5b1 7fe1 	cmp.w	r1, #450	; 0x1c2
 8027560:	d801      	bhi.n	8027566 <TWUART_Reconfigure+0x8e>
 8027562:	6520      	str	r0, [r4, #80]	; 0x50
 8027564:	e000      	b.n	8027568 <TWUART_Reconfigure+0x90>
 8027566:	463e      	mov	r6, r7
 8027568:	69e8      	ldr	r0, [r5, #28]
 802756a:	65e0      	str	r0, [r4, #92]	; 0x5c
 802756c:	6968      	ldr	r0, [r5, #20]
 802756e:	6560      	str	r0, [r4, #84]	; 0x54
 8027570:	69a8      	ldr	r0, [r5, #24]
 8027572:	65a0      	str	r0, [r4, #88]	; 0x58
 8027574:	6820      	ldr	r0, [r4, #0]
 8027576:	f7eb feb4 	bl	80132e2 <BTPS_ReleaseMutex>
 802757a:	e001      	b.n	8027580 <TWUART_Reconfigure+0xa8>
 802757c:	f06f 0602 	mvn.w	r6, #2
 8027580:	4630      	mov	r0, r6
 8027582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.TWUART_Resynchronize:

08027586 <TWUART_Resynchronize>:
 8027586:	b570      	push	{r4, r5, r6, lr}
 8027588:	2800      	cmp	r0, #0
 802758a:	d032      	beq.n	80275f2 <TWUART_Resynchronize+0x6c>
 802758c:	4604      	mov	r4, r0
 802758e:	6800      	ldr	r0, [r0, #0]
 8027590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8027594:	f7eb fe89 	bl	80132aa <BTPS_WaitMutex>
 8027598:	2800      	cmp	r0, #0
 802759a:	d02a      	beq.n	80275f2 <TWUART_Resynchronize+0x6c>
 802759c:	2500      	movs	r5, #0
 802759e:	b2e9      	uxtb	r1, r5
 80275a0:	2200      	movs	r2, #0
 80275a2:	4620      	mov	r0, r4
 80275a4:	f7ff fe12 	bl	80271cc <SetTWUARTTimer>
 80275a8:	1c6d      	adds	r5, r5, #1
 80275aa:	2d03      	cmp	r5, #3
 80275ac:	dbf7      	blt.n	802759e <TWUART_Resynchronize+0x18>
 80275ae:	e002      	b.n	80275b6 <TWUART_Resynchronize+0x30>
 80275b0:	4620      	mov	r0, r4
 80275b2:	f7ff faf1 	bl	8026b98 <FreeBufferListHead>
 80275b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80275b8:	2800      	cmp	r0, #0
 80275ba:	d1f9      	bne.n	80275b0 <TWUART_Resynchronize+0x2a>
 80275bc:	7a60      	ldrb	r0, [r4, #9]
 80275be:	0780      	lsls	r0, r0, #30
 80275c0:	d503      	bpl.n	80275ca <TWUART_Resynchronize+0x44>
 80275c2:	2100      	movs	r1, #0
 80275c4:	4620      	mov	r0, r4
 80275c6:	f7ff fe2b 	bl	8027220 <SetTransportConfiguration>
 80275ca:	2080      	movs	r0, #128	; 0x80
 80275cc:	7760      	strb	r0, [r4, #29]
 80275ce:	2000      	movs	r0, #0
 80275d0:	77a0      	strb	r0, [r4, #30]
 80275d2:	77e0      	strb	r0, [r4, #31]
 80275d4:	f884 0020 	strb.w	r0, [r4, #32]
 80275d8:	7a60      	ldrb	r0, [r4, #9]
 80275da:	2101      	movs	r1, #1
 80275dc:	f020 0003 	bic.w	r0, r0, #3
 80275e0:	7260      	strb	r0, [r4, #9]
 80275e2:	4620      	mov	r0, r4
 80275e4:	f7ff fdb2 	bl	802714c <SetTWUARTState>
 80275e8:	6820      	ldr	r0, [r4, #0]
 80275ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80275ee:	f7eb be78 	b.w	80132e2 <BTPS_ReleaseMutex>
 80275f2:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.TWUART_Shutdown:

080275f4 <TWUART_Shutdown>:
 80275f4:	b530      	push	{r4, r5, lr}
 80275f6:	b085      	sub	sp, #20
 80275f8:	2800      	cmp	r0, #0
 80275fa:	d027      	beq.n	802764c <TWUART_Shutdown+0x58>
 80275fc:	4604      	mov	r4, r0
 80275fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8027602:	6840      	ldr	r0, [r0, #4]
 8027604:	4629      	mov	r1, r5
 8027606:	f7eb fe50 	bl	80132aa <BTPS_WaitMutex>
 802760a:	4629      	mov	r1, r5
 802760c:	6820      	ldr	r0, [r4, #0]
 802760e:	f7eb fe4c 	bl	80132aa <BTPS_WaitMutex>
 8027612:	2001      	movs	r0, #1
 8027614:	f88d 0000 	strb.w	r0, [sp]
 8027618:	e9d4 210e 	ldrd	r2, r1, [r4, #56]	; 0x38
 802761c:	4668      	mov	r0, sp
 802761e:	4790      	blx	r2
 8027620:	e002      	b.n	8027628 <TWUART_Shutdown+0x34>
 8027622:	4620      	mov	r0, r4
 8027624:	f7ff fab8 	bl	8026b98 <FreeBufferListHead>
 8027628:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802762a:	2800      	cmp	r0, #0
 802762c:	d1f9      	bne.n	8027622 <TWUART_Shutdown+0x2e>
 802762e:	6820      	ldr	r0, [r4, #0]
 8027630:	f7eb fe57 	bl	80132e2 <BTPS_ReleaseMutex>
 8027634:	6860      	ldr	r0, [r4, #4]
 8027636:	f7eb fe54 	bl	80132e2 <BTPS_ReleaseMutex>
 802763a:	6820      	ldr	r0, [r4, #0]
 802763c:	f7eb fe57 	bl	80132ee <BTPS_CloseMutex>
 8027640:	6860      	ldr	r0, [r4, #4]
 8027642:	f7eb fe54 	bl	80132ee <BTPS_CloseMutex>
 8027646:	4620      	mov	r0, r4
 8027648:	f7eb fed2 	bl	80133f0 <BTPS_FreeMemory>
 802764c:	b005      	add	sp, #20
 802764e:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.TWUART_TransmitBytes:

08027650 <TWUART_TransmitBytes>:
 8027650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027654:	4688      	mov	r8, r1
 8027656:	461f      	mov	r7, r3
 8027658:	4616      	mov	r6, r2
 802765a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802765e:	b3e8      	cbz	r0, 80276dc <TWUART_TransmitBytes+0x8c>
 8027660:	b3e6      	cbz	r6, 80276dc <TWUART_TransmitBytes+0x8c>
 8027662:	b3df      	cbz	r7, 80276dc <TWUART_TransmitBytes+0x8c>
 8027664:	4604      	mov	r4, r0
 8027666:	6800      	ldr	r0, [r0, #0]
 8027668:	f7eb fe1f 	bl	80132aa <BTPS_WaitMutex>
 802766c:	b3b8      	cbz	r0, 80276de <TWUART_TransmitBytes+0x8e>
 802766e:	7a20      	ldrb	r0, [r4, #8]
 8027670:	2804      	cmp	r0, #4
 8027672:	d001      	beq.n	8027678 <TWUART_TransmitBytes+0x28>
 8027674:	b110      	cbz	r0, 802767c <TWUART_TransmitBytes+0x2c>
 8027676:	e007      	b.n	8027688 <TWUART_TransmitBytes+0x38>
 8027678:	2105      	movs	r1, #5
 802767a:	e000      	b.n	802767e <TWUART_TransmitBytes+0x2e>
 802767c:	2101      	movs	r1, #1
 802767e:	4620      	mov	r0, r4
 8027680:	f7ff fd64 	bl	802714c <SetTWUARTState>
 8027684:	0005      	movs	r5, r0
 8027686:	d136      	bne.n	80276f6 <TWUART_TransmitBytes+0xa6>
 8027688:	f1b8 0f03 	cmp.w	r8, #3
 802768c:	d103      	bne.n	8027696 <TWUART_TransmitBytes+0x46>
 802768e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8027692:	07c0      	lsls	r0, r0, #31
 8027694:	d007      	beq.n	80276a6 <TWUART_TransmitBytes+0x56>
 8027696:	463b      	mov	r3, r7
 8027698:	4632      	mov	r2, r6
 802769a:	4641      	mov	r1, r8
 802769c:	4620      	mov	r0, r4
 802769e:	f7ff fc82 	bl	8026fa6 <SendReliablePacket>
 80276a2:	4605      	mov	r5, r0
 80276a4:	e022      	b.n	80276ec <TWUART_TransmitBytes+0x9c>
 80276a6:	1d30      	adds	r0, r6, #4
 80276a8:	f7eb fe88 	bl	80133bc <BTPS_AllocateMemory>
 80276ac:	0005      	movs	r5, r0
 80276ae:	d01a      	beq.n	80276e6 <TWUART_TransmitBytes+0x96>
 80276b0:	0330      	lsls	r0, r6, #12
 80276b2:	f440 7040 	orr.w	r0, r0, #768	; 0x300
 80276b6:	6028      	str	r0, [r5, #0]
 80276b8:	7a61      	ldrb	r1, [r4, #9]
 80276ba:	07c9      	lsls	r1, r1, #31
 80276bc:	d002      	beq.n	80276c4 <TWUART_TransmitBytes+0x74>
 80276be:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80276c2:	6028      	str	r0, [r5, #0]
 80276c4:	4632      	mov	r2, r6
 80276c6:	4639      	mov	r1, r7
 80276c8:	1d28      	adds	r0, r5, #4
 80276ca:	f7eb fef4 	bl	80134b6 <BTPS_MemCopy>
 80276ce:	4629      	mov	r1, r5
 80276d0:	4620      	mov	r0, r4
 80276d2:	f7ff fca9 	bl	8027028 <SendSLIPPacket>
 80276d6:	4606      	mov	r6, r0
 80276d8:	4628      	mov	r0, r5
 80276da:	e001      	b.n	80276e0 <TWUART_TransmitBytes+0x90>
 80276dc:	e012      	b.n	8027704 <TWUART_TransmitBytes+0xb4>
 80276de:	e00e      	b.n	80276fe <TWUART_TransmitBytes+0xae>
 80276e0:	f7eb fe86 	bl	80133f0 <BTPS_FreeMemory>
 80276e4:	e001      	b.n	80276ea <TWUART_TransmitBytes+0x9a>
 80276e6:	f06f 0601 	mvn.w	r6, #1
 80276ea:	4635      	mov	r5, r6
 80276ec:	b91d      	cbnz	r5, 80276f6 <TWUART_TransmitBytes+0xa6>
 80276ee:	4620      	mov	r0, r4
 80276f0:	f7ff f9f5 	bl	8026ade <CheckIdle>
 80276f4:	4605      	mov	r5, r0
 80276f6:	6820      	ldr	r0, [r4, #0]
 80276f8:	f7eb fdf3 	bl	80132e2 <BTPS_ReleaseMutex>
 80276fc:	e003      	b.n	8027706 <TWUART_TransmitBytes+0xb6>
 80276fe:	f06f 0502 	mvn.w	r5, #2
 8027702:	e000      	b.n	8027706 <TWUART_TransmitBytes+0xb6>
 8027704:	460d      	mov	r5, r1
 8027706:	4628      	mov	r0, r5
 8027708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.ATT_PDU_Event:

0802770c <ATT_PDU_Event>:
 802770c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027710:	4680      	mov	r8, r0
 8027712:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027714:	461e      	mov	r6, r3
 8027716:	4615      	mov	r5, r2
 8027718:	460f      	mov	r7, r1
 802771a:	07d0      	lsls	r0, r2, #31
 802771c:	f04f 0a00 	mov.w	sl, #0
 8027720:	d048      	beq.n	80277b4 <ATT_PDU_Event+0xa8>
 8027722:	2d1b      	cmp	r5, #27
 8027724:	d246      	bcs.n	80277b4 <ATT_PDU_Event+0xa8>
 8027726:	4608      	mov	r0, r1
 8027728:	f002 fcea 	bl	802a100 <ObtainOutstandingClientTransaction>
 802772c:	2800      	cmp	r0, #0
 802772e:	d072      	beq.n	8027816 <ATT_PDU_Event+0x10a>
 8027730:	7a41      	ldrb	r1, [r0, #9]
 8027732:	2d01      	cmp	r5, #1
 8027734:	d003      	beq.n	802773e <ATT_PDU_Event+0x32>
 8027736:	f041 0101 	orr.w	r1, r1, #1
 802773a:	42a9      	cmp	r1, r5
 802773c:	d179      	bne.n	8027832 <ATT_PDU_Event+0x126>
 802773e:	6801      	ldr	r1, [r0, #0]
 8027740:	f107 0014 	add.w	r0, r7, #20
 8027744:	f000 fd5e 	bl	8028204 <DeleteTransactionInfoEntry>
 8027748:	ea5f 0900 	movs.w	r9, r0
 802774c:	d01e      	beq.n	802778c <ATT_PDU_Event+0x80>
 802774e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8027752:	b129      	cbz	r1, 8027760 <ATT_PDU_Event+0x54>
 8027754:	f8d8 0000 	ldr.w	r0, [r8]
 8027758:	f7f1 fdce 	bl	80192f8 <BSC_StopTimer>
 802775c:	f8c9 a004 	str.w	sl, [r9, #4]
 8027760:	89b8      	ldrh	r0, [r7, #12]
 8027762:	42b0      	cmp	r0, r6
 8027764:	d30f      	bcc.n	8027786 <ATT_PDU_Event+0x7a>
 8027766:	f899 000a 	ldrb.w	r0, [r9, #10]
 802776a:	07c0      	lsls	r0, r0, #31
 802776c:	d10b      	bne.n	8027786 <ATT_PDU_Event+0x7a>
 802776e:	2d01      	cmp	r5, #1
 8027770:	d013      	beq.n	802779a <ATT_PDU_Event+0x8e>
 8027772:	f8d9 501c 	ldr.w	r5, [r9, #28]
 8027776:	4648      	mov	r0, r9
 8027778:	b12d      	cbz	r5, 8027786 <ATT_PDU_Event+0x7a>
 802777a:	4602      	mov	r2, r0
 802777c:	4633      	mov	r3, r6
 802777e:	4639      	mov	r1, r7
 8027780:	4640      	mov	r0, r8
 8027782:	9400      	str	r4, [sp, #0]
 8027784:	47a8      	blx	r5
 8027786:	4648      	mov	r0, r9
 8027788:	f001 fb8e 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 802778c:	b004      	add	sp, #16
 802778e:	4639      	mov	r1, r7
 8027790:	4640      	mov	r0, r8
 8027792:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027796:	f003 b8ea 	b.w	802a96e <SendNextQueuedClientRequest>
 802779a:	4640      	mov	r0, r8
 802779c:	4639      	mov	r1, r7
 802779e:	464a      	mov	r2, r9
 80277a0:	2e05      	cmp	r6, #5
 80277a2:	d1f0      	bne.n	8027786 <ATT_PDU_Event+0x7a>
 80277a4:	8863      	ldrh	r3, [r4, #2]
 80277a6:	7924      	ldrb	r4, [r4, #4]
 80277a8:	e9cd 3400 	strd	r3, r4, [sp]
 80277ac:	2300      	movs	r3, #0
 80277ae:	f000 fdf9 	bl	80283a4 <DispatchClientRequestErrorEvent>
 80277b2:	e7e8      	b.n	8027786 <ATT_PDU_Event+0x7a>
 80277b4:	89b8      	ldrh	r0, [r7, #12]
 80277b6:	42b0      	cmp	r0, r6
 80277b8:	d33b      	bcc.n	8027832 <ATT_PDU_Event+0x126>
 80277ba:	07e8      	lsls	r0, r5, #31
 80277bc:	d17e      	bne.n	80278bc <ATT_PDU_Event+0x1b0>
 80277be:	2d1b      	cmp	r5, #27
 80277c0:	d27c      	bcs.n	80278bc <ATT_PDU_Event+0x1b0>
 80277c2:	0668      	lsls	r0, r5, #25
 80277c4:	d47a      	bmi.n	80278bc <ATT_PDU_Event+0x1b0>
 80277c6:	2206      	movs	r2, #6
 80277c8:	2004      	movs	r0, #4
 80277ca:	2d0c      	cmp	r5, #12
 80277cc:	d04d      	beq.n	802786a <ATT_PDU_Event+0x15e>
 80277ce:	dc0a      	bgt.n	80277e6 <ATT_PDU_Event+0xda>
 80277d0:	f1a5 0102 	sub.w	r1, r5, #2
 80277d4:	2909      	cmp	r1, #9
 80277d6:	d212      	bcs.n	80277fe <ATT_PDU_Event+0xf2>
 80277d8:	e8df f001 	tbb	[pc, r1]
 80277dc:	11151187 	.word	0x11151187
 80277e0:	11221117 	.word	0x11221117
 80277e4:	002d      	.short	0x002d
 80277e6:	2d12      	cmp	r5, #18
 80277e8:	d065      	beq.n	80278b6 <ATT_PDU_Event+0x1aa>
 80277ea:	dc04      	bgt.n	80277f6 <ATT_PDU_Event+0xea>
 80277ec:	2d0e      	cmp	r5, #14
 80277ee:	d05a      	beq.n	80278a6 <ATT_PDU_Event+0x19a>
 80277f0:	2d10      	cmp	r5, #16
 80277f2:	d104      	bne.n	80277fe <ATT_PDU_Event+0xf2>
 80277f4:	e010      	b.n	8027818 <ATT_PDU_Event+0x10c>
 80277f6:	2d16      	cmp	r5, #22
 80277f8:	d067      	beq.n	80278ca <ATT_PDU_Event+0x1be>
 80277fa:	2d18      	cmp	r5, #24
 80277fc:	d06d      	beq.n	80278da <ATT_PDU_Event+0x1ce>
 80277fe:	9200      	str	r2, [sp, #0]
 8027800:	2300      	movs	r3, #0
 8027802:	462a      	mov	r2, r5
 8027804:	e01d      	b.n	8027842 <ATT_PDU_Event+0x136>
 8027806:	2304      	movs	r3, #4
 8027808:	e00c      	b.n	8027824 <ATT_PDU_Event+0x118>
 802780a:	e9cd 2400 	strd	r2, r4, [sp]
 802780e:	2301      	movs	r3, #1
 8027810:	4632      	mov	r2, r6
 8027812:	4639      	mov	r1, r7
 8027814:	e00a      	b.n	802782c <ATT_PDU_Event+0x120>
 8027816:	e00c      	b.n	8027832 <ATT_PDU_Event+0x126>
 8027818:	2010      	movs	r0, #16
 802781a:	2300      	movs	r3, #0
 802781c:	4632      	mov	r2, r6
 802781e:	e003      	b.n	8027828 <ATT_PDU_Event+0x11c>
 8027820:	2008      	movs	r0, #8
 8027822:	2306      	movs	r3, #6
 8027824:	4632      	mov	r2, r6
 8027826:	4639      	mov	r1, r7
 8027828:	e9cd 0400 	strd	r0, r4, [sp]
 802782c:	4640      	mov	r0, r8
 802782e:	f002 fd85 	bl	802a33c <ReadByUUIDRequestEvent>
 8027832:	e8bd 87ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 8027836:	4645      	mov	r5, r8
 8027838:	2e03      	cmp	r6, #3
 802783a:	d007      	beq.n	802784c <ATT_PDU_Event+0x140>
 802783c:	2300      	movs	r3, #0
 802783e:	220a      	movs	r2, #10
 8027840:	9000      	str	r0, [sp, #0]
 8027842:	4639      	mov	r1, r7
 8027844:	4640      	mov	r0, r8
 8027846:	f001 fb4c 	bl	8028ee2 <GATTErrorResponsePDU>
 802784a:	e7f2      	b.n	8027832 <ATT_PDU_Event+0x126>
 802784c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
 8027850:	2205      	movs	r2, #5
 8027852:	e88d 0405 	stmia.w	sp, {r0, r2, sl}
 8027856:	230a      	movs	r3, #10
 8027858:	2200      	movs	r2, #0
 802785a:	4639      	mov	r1, r7
 802785c:	4640      	mov	r0, r8
 802785e:	f002 f9bd 	bl	8029bdc <GenericReadRequestEvent>
 8027862:	2800      	cmp	r0, #0
 8027864:	d0e5      	beq.n	8027832 <ATT_PDU_Event+0x126>
 8027866:	2300      	movs	r3, #0
 8027868:	e015      	b.n	8027896 <ATT_PDU_Event+0x18a>
 802786a:	4645      	mov	r5, r8
 802786c:	2b05      	cmp	r3, #5
 802786e:	d003      	beq.n	8027878 <ATT_PDU_Event+0x16c>
 8027870:	2300      	movs	r3, #0
 8027872:	220c      	movs	r2, #12
 8027874:	9000      	str	r0, [sp, #0]
 8027876:	e7e5      	b.n	8027844 <ATT_PDU_Event+0x138>
 8027878:	f834 0f01 	ldrh.w	r0, [r4, #1]!
 802787c:	2207      	movs	r2, #7
 802787e:	8864      	ldrh	r4, [r4, #2]
 8027880:	e88d 0405 	stmia.w	sp, {r0, r2, sl}
 8027884:	230c      	movs	r3, #12
 8027886:	2200      	movs	r2, #0
 8027888:	4639      	mov	r1, r7
 802788a:	4640      	mov	r0, r8
 802788c:	f002 f9a6 	bl	8029bdc <GenericReadRequestEvent>
 8027890:	2800      	cmp	r0, #0
 8027892:	d0ce      	beq.n	8027832 <ATT_PDU_Event+0x126>
 8027894:	4623      	mov	r3, r4
 8027896:	4602      	mov	r2, r0
 8027898:	b004      	add	sp, #16
 802789a:	4639      	mov	r1, r7
 802789c:	4628      	mov	r0, r5
 802789e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278a2:	f000 bdda 	b.w	802845a <DispatchServerReadRequestEvent>
 80278a6:	b004      	add	sp, #16
 80278a8:	4623      	mov	r3, r4
 80278aa:	4632      	mov	r2, r6
 80278ac:	4640      	mov	r0, r8
 80278ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278b2:	f002 bef5 	b.w	802a6a0 <ReadMultipleRequestEvent>
 80278b6:	4623      	mov	r3, r4
 80278b8:	4632      	mov	r2, r6
 80278ba:	e000      	b.n	80278be <ATT_PDU_Event+0x1b2>
 80278bc:	e01e      	b.n	80278fc <ATT_PDU_Event+0x1f0>
 80278be:	b004      	add	sp, #16
 80278c0:	4640      	mov	r0, r8
 80278c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278c6:	f003 ba3e 	b.w	802ad46 <WriteRequestEvent>
 80278ca:	b004      	add	sp, #16
 80278cc:	4623      	mov	r3, r4
 80278ce:	4632      	mov	r2, r6
 80278d0:	4640      	mov	r0, r8
 80278d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278d6:	f002 bc77 	b.w	802a1c8 <PreprareWriteRequestEvent>
 80278da:	b004      	add	sp, #16
 80278dc:	4623      	mov	r3, r4
 80278de:	4632      	mov	r2, r6
 80278e0:	4640      	mov	r0, r8
 80278e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278e6:	f000 befd 	b.w	80286e4 <ExecuteWriteRequestEvent>
 80278ea:	b004      	add	sp, #16
 80278ec:	4623      	mov	r3, r4
 80278ee:	4632      	mov	r2, r6
 80278f0:	4639      	mov	r1, r7
 80278f2:	4640      	mov	r0, r8
 80278f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80278f8:	f000 be2a 	b.w	8028550 <ExchangeMtuRequestEvent>
 80278fc:	1ef0      	subs	r0, r6, #3
 80278fe:	2d1e      	cmp	r5, #30
 8027900:	d039      	beq.n	8027976 <ATT_PDU_Event+0x26a>
 8027902:	dc0b      	bgt.n	802791c <ATT_PDU_Event+0x210>
 8027904:	2d1b      	cmp	r5, #27
 8027906:	d061      	beq.n	80279cc <ATT_PDU_Event+0x2c0>
 8027908:	2a1d      	cmp	r2, #29
 802790a:	d192      	bne.n	8027832 <ATT_PDU_Event+0x126>
 802790c:	b004      	add	sp, #16
 802790e:	4623      	mov	r3, r4
 8027910:	4632      	mov	r2, r6
 8027912:	4640      	mov	r0, r8
 8027914:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027918:	f002 bb86 	b.w	802a028 <IndicationEvent>
 802791c:	2d52      	cmp	r5, #82	; 0x52
 802791e:	d009      	beq.n	8027934 <ATT_PDU_Event+0x228>
 8027920:	2ad2      	cmp	r2, #210	; 0xd2
 8027922:	d186      	bne.n	8027832 <ATT_PDU_Event+0x126>
 8027924:	b004      	add	sp, #16
 8027926:	4623      	mov	r3, r4
 8027928:	4632      	mov	r2, r6
 802792a:	4640      	mov	r0, r8
 802792c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027930:	f003 b8a0 	b.w	802aa74 <SignedWriteCommandEvent>
 8027934:	2e04      	cmp	r6, #4
 8027936:	d388      	bcc.n	802784a <ATT_PDU_Event+0x13e>
 8027938:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 802793c:	b285      	uxth	r5, r0
 802793e:	2b00      	cmp	r3, #0
 8027940:	d090      	beq.n	8027864 <ATT_PDU_Event+0x158>
 8027942:	2052      	movs	r0, #82	; 0x52
 8027944:	210a      	movs	r1, #10
 8027946:	e9cd 1000 	strd	r1, r0, [sp]
 802794a:	4656      	mov	r6, sl
 802794c:	2200      	movs	r2, #0
 802794e:	f8cd a008 	str.w	sl, [sp, #8]
 8027952:	4639      	mov	r1, r7
 8027954:	4640      	mov	r0, r8
 8027956:	f002 f99e 	bl	8029c96 <GenericWriteRequestEvent>
 802795a:	2800      	cmp	r0, #0
 802795c:	d099      	beq.n	8027892 <ATT_PDU_Event+0x186>
 802795e:	1ce4      	adds	r4, r4, #3
 8027960:	e9cd 6500 	strd	r6, r5, [sp]
 8027964:	e9cd 4602 	strd	r4, r6, [sp, #8]
 8027968:	4602      	mov	r2, r0
 802796a:	2300      	movs	r3, #0
 802796c:	4639      	mov	r1, r7
 802796e:	4640      	mov	r0, r8
 8027970:	f000 fdb0 	bl	80284d4 <DispatchServerWriteRequestEvent>
 8027974:	e75d      	b.n	8027832 <ATT_PDU_Event+0x126>
 8027976:	4645      	mov	r5, r8
 8027978:	2e01      	cmp	r6, #1
 802797a:	d1fb      	bne.n	8027974 <ATT_PDU_Event+0x268>
 802797c:	f107 0010 	add.w	r0, r7, #16
 8027980:	210f      	movs	r1, #15
 8027982:	4604      	mov	r4, r0
 8027984:	f002 ffea 	bl	802a95c <SearchTransactionInfoEntryByType>
 8027988:	2800      	cmp	r0, #0
 802798a:	d0f3      	beq.n	8027974 <ATT_PDU_Event+0x268>
 802798c:	6801      	ldr	r1, [r0, #0]
 802798e:	4620      	mov	r0, r4
 8027990:	f000 fc38 	bl	8028204 <DeleteTransactionInfoEntry>
 8027994:	0004      	movs	r4, r0
 8027996:	d012      	beq.n	80279be <ATT_PDU_Event+0x2b2>
 8027998:	6861      	ldr	r1, [r4, #4]
 802799a:	b121      	cbz	r1, 80279a6 <ATT_PDU_Event+0x29a>
 802799c:	6828      	ldr	r0, [r5, #0]
 802799e:	f7f1 fcab 	bl	80192f8 <BSC_StopTimer>
 80279a2:	f8c4 a004 	str.w	sl, [r4, #4]
 80279a6:	7aa0      	ldrb	r0, [r4, #10]
 80279a8:	07c0      	lsls	r0, r0, #31
 80279aa:	d105      	bne.n	80279b8 <ATT_PDU_Event+0x2ac>
 80279ac:	2300      	movs	r3, #0
 80279ae:	4622      	mov	r2, r4
 80279b0:	4639      	mov	r1, r7
 80279b2:	4628      	mov	r0, r5
 80279b4:	f000 fd38 	bl	8028428 <DispatchServerConfirmationEvent>
 80279b8:	4620      	mov	r0, r4
 80279ba:	f001 fa75 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 80279be:	b004      	add	sp, #16
 80279c0:	4639      	mov	r1, r7
 80279c2:	4628      	mov	r0, r5
 80279c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80279c8:	f002 bfeb 	b.w	802a9a2 <SendNextQueuedServerIndication>
 80279cc:	4645      	mov	r5, r8
 80279ce:	2e03      	cmp	r6, #3
 80279d0:	d3d0      	bcc.n	8027974 <ATT_PDU_Event+0x268>
 80279d2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80279d6:	b286      	uxth	r6, r0
 80279d8:	f8ad 3000 	strh.w	r3, [sp]
 80279dc:	4640      	mov	r0, r8
 80279de:	2206      	movs	r2, #6
 80279e0:	466b      	mov	r3, sp
 80279e2:	1ce4      	adds	r4, r4, #3
 80279e4:	f001 f93c 	bl	8028c60 <FormatConnectionEventWord>
 80279e8:	b128      	cbz	r0, 80279f6 <ATT_PDU_Event+0x2ea>
 80279ea:	2114      	movs	r1, #20
 80279ec:	8041      	strh	r1, [r0, #2]
 80279ee:	6841      	ldr	r1, [r0, #4]
 80279f0:	81ce      	strh	r6, [r1, #14]
 80279f2:	6841      	ldr	r1, [r0, #4]
 80279f4:	610c      	str	r4, [r1, #16]
 80279f6:	4601      	mov	r1, r0
 80279f8:	b004      	add	sp, #16
 80279fa:	4628      	mov	r0, r5
 80279fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027a00:	f000 bcf4 	b.w	80283ec <DispatchConnectionEvent>

Disassembly of section i.AcquireGATTStackConnectionInformationByConnectionID:

08027a04 <AcquireGATTStackConnectionInformationByConnectionID>:
 8027a04:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8027a08:	460d      	mov	r5, r1
 8027a0a:	461c      	mov	r4, r3
 8027a0c:	4690      	mov	r8, r2
 8027a0e:	4606      	mov	r6, r0
 8027a10:	4611      	mov	r1, r2
 8027a12:	f000 f843 	bl	8027a9c <AcquireGATTStackInformation>
 8027a16:	0007      	movs	r7, r0
 8027a18:	d110      	bne.n	8027a3c <AcquireGATTStackConnectionInformationByConnectionID+0x38>
 8027a1a:	6830      	ldr	r0, [r6, #0]
 8027a1c:	2318      	movs	r3, #24
 8027a1e:	3014      	adds	r0, #20
 8027a20:	e9cd 0400 	strd	r0, r4, [sp]
 8027a24:	2200      	movs	r2, #0
 8027a26:	a901      	add	r1, sp, #4
 8027a28:	2007      	movs	r0, #7
 8027a2a:	f7f1 fb86 	bl	801913a <BSC_SearchGenericListEntry>
 8027a2e:	6028      	str	r0, [r5, #0]
 8027a30:	b920      	cbnz	r0, 8027a3c <AcquireGATTStackConnectionInformationByConnectionID+0x38>
 8027a32:	4640      	mov	r0, r8
 8027a34:	f7f1 fc86 	bl	8019344 <BSC_UnLockBluetoothStack>
 8027a38:	f46f 777c 	mvn.w	r7, #1008	; 0x3f0
 8027a3c:	4638      	mov	r0, r7
 8027a3e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

Disassembly of section i.AcquireGATTStackConnectionInformationByServerTransactionID:

08027a44 <AcquireGATTStackConnectionInformationByServerTransactionID>:
 8027a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027a48:	460c      	mov	r4, r1
 8027a4a:	461f      	mov	r7, r3
 8027a4c:	4615      	mov	r5, r2
 8027a4e:	4606      	mov	r6, r0
 8027a50:	4619      	mov	r1, r3
 8027a52:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8027a56:	f000 f821 	bl	8027a9c <AcquireGATTStackInformation>
 8027a5a:	2800      	cmp	r0, #0
 8027a5c:	d10d      	bne.n	8027a7a <AcquireGATTStackConnectionInformationByServerTransactionID+0x36>
 8027a5e:	6020      	str	r0, [r4, #0]
 8027a60:	6028      	str	r0, [r5, #0]
 8027a62:	e00c      	b.n	8027a7e <AcquireGATTStackConnectionInformationByServerTransactionID+0x3a>
 8027a64:	4641      	mov	r1, r8
 8027a66:	3010      	adds	r0, #16
 8027a68:	f002 ff6e 	bl	802a948 <SearchTransactionInfoEntry>
 8027a6c:	6028      	str	r0, [r5, #0]
 8027a6e:	b130      	cbz	r0, 8027a7e <AcquireGATTStackConnectionInformationByServerTransactionID+0x3a>
 8027a70:	6820      	ldr	r0, [r4, #0]
 8027a72:	b160      	cbz	r0, 8027a8e <AcquireGATTStackConnectionInformationByServerTransactionID+0x4a>
 8027a74:	6828      	ldr	r0, [r5, #0]
 8027a76:	b150      	cbz	r0, 8027a8e <AcquireGATTStackConnectionInformationByServerTransactionID+0x4a>
 8027a78:	2000      	movs	r0, #0
 8027a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027a7e:	6830      	ldr	r0, [r6, #0]
 8027a80:	6821      	ldr	r1, [r4, #0]
 8027a82:	3014      	adds	r0, #20
 8027a84:	f002 f9af 	bl	8029de6 <GetNextConnectionInfoEntry>
 8027a88:	6020      	str	r0, [r4, #0]
 8027a8a:	2800      	cmp	r0, #0
 8027a8c:	d1ea      	bne.n	8027a64 <AcquireGATTStackConnectionInformationByServerTransactionID+0x20>
 8027a8e:	4638      	mov	r0, r7
 8027a90:	f7f1 fc58 	bl	8019344 <BSC_UnLockBluetoothStack>
 8027a94:	4800      	ldr	r0, [pc, #0]	; (8027a98 <AcquireGATTStackConnectionInformationByServerTransactionID+0x54>)
 8027a96:	e7f0      	b.n	8027a7a <AcquireGATTStackConnectionInformationByServerTransactionID+0x36>
 8027a98:	fffffc0c 	.word	0xfffffc0c

Disassembly of section i.AcquireGATTStackInformation:

08027a9c <AcquireGATTStackInformation>:
 8027a9c:	b570      	push	{r4, r5, r6, lr}
 8027a9e:	4606      	mov	r6, r0
 8027aa0:	460d      	mov	r5, r1
 8027aa2:	4608      	mov	r0, r1
 8027aa4:	f7f1 fae8 	bl	8019078 <BSC_LockBluetoothStack>
 8027aa8:	b110      	cbz	r0, 8027ab0 <AcquireGATTStackInformation+0x14>
 8027aaa:	4c0b      	ldr	r4, [pc, #44]	; (8027ad8 <AcquireGATTStackInformation+0x3c>)
 8027aac:	4620      	mov	r0, r4
 8027aae:	bd70      	pop	{r4, r5, r6, pc}
 8027ab0:	f7f0 ffbc 	bl	8018a2c <BSC_AcquireListLock>
 8027ab4:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 8027ab8:	b150      	cbz	r0, 8027ad0 <AcquireGATTStackInformation+0x34>
 8027aba:	4629      	mov	r1, r5
 8027abc:	4807      	ldr	r0, [pc, #28]	; (8027adc <AcquireGATTStackInformation+0x40>)
 8027abe:	f002 ff01 	bl	802a8c4 <SearchGATTContextInfoEntry>
 8027ac2:	6030      	str	r0, [r6, #0]
 8027ac4:	b100      	cbz	r0, 8027ac8 <AcquireGATTStackInformation+0x2c>
 8027ac6:	2400      	movs	r4, #0
 8027ac8:	f7f1 fb14 	bl	80190f4 <BSC_ReleaseListLock>
 8027acc:	2c00      	cmp	r4, #0
 8027ace:	d0ed      	beq.n	8027aac <AcquireGATTStackInformation+0x10>
 8027ad0:	4628      	mov	r0, r5
 8027ad2:	f7f1 fc37 	bl	8019344 <BSC_UnLockBluetoothStack>
 8027ad6:	e7e9      	b.n	8027aac <AcquireGATTStackInformation+0x10>
 8027ad8:	fffffc14 	.word	0xfffffc14
 8027adc:	20000068 	.word	0x20000068

Disassembly of section i.AddDiscoveredServiceInfoEntry:

08027ae0 <AddDiscoveredServiceInfoEntry>:
 8027ae0:	b50e      	push	{r1, r2, r3, lr}
 8027ae2:	222c      	movs	r2, #44	; 0x2c
 8027ae4:	e9cd 2000 	strd	r2, r0, [sp]
 8027ae8:	2330      	movs	r3, #48	; 0x30
 8027aea:	9102      	str	r1, [sp, #8]
 8027aec:	2212      	movs	r2, #18
 8027aee:	2103      	movs	r1, #3
 8027af0:	4618      	mov	r0, r3
 8027af2:	f7f0 ffa7 	bl	8018a44 <BSC_AddGenericListEntry>
 8027af6:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.AddServiceInfoEntry:

08027af8 <AddServiceInfoEntry>:
 8027af8:	b508      	push	{r3, lr}
 8027afa:	4603      	mov	r3, r0
 8027afc:	9100      	str	r1, [sp, #0]
 8027afe:	2220      	movs	r2, #32
 8027b00:	2100      	movs	r1, #0
 8027b02:	2007      	movs	r0, #7
 8027b04:	f7f0 ffd4 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8027b08:	bd08      	pop	{r3, pc}

Disassembly of section i.AddServiceInformation:

08027b0a <AddServiceInformation>:
 8027b0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b0e:	4615      	mov	r5, r2
 8027b10:	4681      	mov	r9, r0
 8027b12:	f850 2f34 	ldr.w	r2, [r0, #52]!
 8027b16:	460c      	mov	r4, r1
 8027b18:	f46f 777d 	mvn.w	r7, #1012	; 0x3f4
 8027b1c:	2601      	movs	r6, #1
 8027b1e:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8027b22:	f46f 7b7b 	mvn.w	fp, #1004	; 0x3ec
 8027b26:	9000      	str	r0, [sp, #0]
 8027b28:	b3ca      	cbz	r2, 8027b9e <AddServiceInformation+0x94>
 8027b2a:	f04f 0800 	mov.w	r8, #0
 8027b2e:	4641      	mov	r1, r8
 8027b30:	e023      	b.n	8027b7a <AddServiceInformation+0x70>
 8027b32:	8988      	ldrh	r0, [r1, #12]
 8027b34:	8aa3      	ldrh	r3, [r4, #20]
 8027b36:	1b82      	subs	r2, r0, r6
 8027b38:	b29b      	uxth	r3, r3
 8027b3a:	429a      	cmp	r2, r3
 8027b3c:	db19      	blt.n	8027b72 <AddServiceInformation+0x68>
 8027b3e:	b17d      	cbz	r5, 8027b60 <AddServiceInformation+0x56>
 8027b40:	882a      	ldrh	r2, [r5, #0]
 8027b42:	42b2      	cmp	r2, r6
 8027b44:	d315      	bcc.n	8027b72 <AddServiceInformation+0x68>
 8027b46:	886a      	ldrh	r2, [r5, #2]
 8027b48:	4282      	cmp	r2, r0
 8027b4a:	d212      	bcs.n	8027b72 <AddServiceInformation+0x68>
 8027b4c:	8828      	ldrh	r0, [r5, #0]
 8027b4e:	81a0      	strh	r0, [r4, #12]
 8027b50:	8868      	ldrh	r0, [r5, #2]
 8027b52:	81e0      	strh	r0, [r4, #14]
 8027b54:	f1b8 0f00 	cmp.w	r8, #0
 8027b58:	d007      	beq.n	8027b6a <AddServiceInformation+0x60>
 8027b5a:	f8c8 4020 	str.w	r4, [r8, #32]
 8027b5e:	e006      	b.n	8027b6e <AddServiceInformation+0x64>
 8027b60:	81a6      	strh	r6, [r4, #12]
 8027b62:	8aa0      	ldrh	r0, [r4, #20]
 8027b64:	1e76      	subs	r6, r6, #1
 8027b66:	4430      	add	r0, r6
 8027b68:	e7f3      	b.n	8027b52 <AddServiceInformation+0x48>
 8027b6a:	f8c9 4034 	str.w	r4, [r9, #52]	; 0x34
 8027b6e:	6221      	str	r1, [r4, #32]
 8027b70:	e032      	b.n	8027bd8 <AddServiceInformation+0xce>
 8027b72:	89c8      	ldrh	r0, [r1, #14]
 8027b74:	4688      	mov	r8, r1
 8027b76:	1c40      	adds	r0, r0, #1
 8027b78:	b286      	uxth	r6, r0
 8027b7a:	9800      	ldr	r0, [sp, #0]
 8027b7c:	f002 f93d 	bl	8029dfa <GetNextServiceInfoEntry>
 8027b80:	0001      	movs	r1, r0
 8027b82:	d1d6      	bne.n	8027b32 <AddServiceInformation+0x28>
 8027b84:	42bf      	cmp	r7, r7
 8027b86:	d12a      	bne.n	8027bde <AddServiceInformation+0xd4>
 8027b88:	6960      	ldr	r0, [r4, #20]
 8027b8a:	ebaa 0206 	sub.w	r2, sl, r6
 8027b8e:	b283      	uxth	r3, r0
 8027b90:	429a      	cmp	r2, r3
 8027b92:	db24      	blt.n	8027bde <AddServiceInformation+0xd4>
 8027b94:	b125      	cbz	r5, 8027ba0 <AddServiceInformation+0x96>
 8027b96:	8828      	ldrh	r0, [r5, #0]
 8027b98:	42b0      	cmp	r0, r6
 8027b9a:	d212      	bcs.n	8027bc2 <AddServiceInformation+0xb8>
 8027b9c:	e01f      	b.n	8027bde <AddServiceInformation+0xd4>
 8027b9e:	e006      	b.n	8027bae <AddServiceInformation+0xa4>
 8027ba0:	81a6      	strh	r6, [r4, #12]
 8027ba2:	1e76      	subs	r6, r6, #1
 8027ba4:	4430      	add	r0, r6
 8027ba6:	e011      	b.n	8027bcc <AddServiceInformation+0xc2>
 8027ba8:	81a0      	strh	r0, [r4, #12]
 8027baa:	8868      	ldrh	r0, [r5, #2]
 8027bac:	e00e      	b.n	8027bcc <AddServiceInformation+0xc2>
 8027bae:	8aa0      	ldrh	r0, [r4, #20]
 8027bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8027bb4:	b280      	uxth	r0, r0
 8027bb6:	4290      	cmp	r0, r2
 8027bb8:	dc11      	bgt.n	8027bde <AddServiceInformation+0xd4>
 8027bba:	b135      	cbz	r5, 8027bca <AddServiceInformation+0xc0>
 8027bbc:	8828      	ldrh	r0, [r5, #0]
 8027bbe:	2801      	cmp	r0, #1
 8027bc0:	d30d      	bcc.n	8027bde <AddServiceInformation+0xd4>
 8027bc2:	886a      	ldrh	r2, [r5, #2]
 8027bc4:	4552      	cmp	r2, sl
 8027bc6:	d9ef      	bls.n	8027ba8 <AddServiceInformation+0x9e>
 8027bc8:	e009      	b.n	8027bde <AddServiceInformation+0xd4>
 8027bca:	81a6      	strh	r6, [r4, #12]
 8027bcc:	81e0      	strh	r0, [r4, #14]
 8027bce:	4621      	mov	r1, r4
 8027bd0:	9800      	ldr	r0, [sp, #0]
 8027bd2:	f7ff ff91 	bl	8027af8 <AddServiceInfoEntry>
 8027bd6:	b108      	cbz	r0, 8027bdc <AddServiceInformation+0xd2>
 8027bd8:	2700      	movs	r7, #0
 8027bda:	e000      	b.n	8027bde <AddServiceInformation+0xd4>
 8027bdc:	465f      	mov	r7, fp
 8027bde:	4638      	mov	r0, r7
 8027be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.AsynchronousCallback:

08027be4 <AsynchronousCallback>:
 8027be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8027be6:	000c      	movs	r4, r1
 8027be8:	4601      	mov	r1, r0
 8027bea:	d042      	beq.n	8027c72 <AsynchronousCallback+0x8e>
 8027bec:	7820      	ldrb	r0, [r4, #0]
 8027bee:	2804      	cmp	r0, #4
 8027bf0:	d00b      	beq.n	8027c0a <AsynchronousCallback+0x26>
 8027bf2:	2803      	cmp	r0, #3
 8027bf4:	d010      	beq.n	8027c18 <AsynchronousCallback+0x34>
 8027bf6:	6860      	ldr	r0, [r4, #4]
 8027bf8:	460b      	mov	r3, r1
 8027bfa:	9000      	str	r0, [sp, #0]
 8027bfc:	aa01      	add	r2, sp, #4
 8027bfe:	a902      	add	r1, sp, #8
 8027c00:	a803      	add	r0, sp, #12
 8027c02:	f7ff ff1f 	bl	8027a44 <AcquireGATTStackConnectionInformationByServerTransactionID>
 8027c06:	b158      	cbz	r0, 8027c20 <AsynchronousCallback+0x3c>
 8027c08:	e030      	b.n	8027c6c <AsynchronousCallback+0x88>
 8027c0a:	460a      	mov	r2, r1
 8027c0c:	a902      	add	r1, sp, #8
 8027c0e:	a803      	add	r0, sp, #12
 8027c10:	6863      	ldr	r3, [r4, #4]
 8027c12:	f7ff fef7 	bl	8027a04 <AcquireGATTStackConnectionInformationByConnectionID>
 8027c16:	e7f6      	b.n	8027c06 <AsynchronousCallback+0x22>
 8027c18:	a803      	add	r0, sp, #12
 8027c1a:	f7ff ff3f 	bl	8027a9c <AcquireGATTStackInformation>
 8027c1e:	e7f2      	b.n	8027c06 <AsynchronousCallback+0x22>
 8027c20:	7820      	ldrb	r0, [r4, #0]
 8027c22:	b130      	cbz	r0, 8027c32 <AsynchronousCallback+0x4e>
 8027c24:	2801      	cmp	r0, #1
 8027c26:	d00b      	beq.n	8027c40 <AsynchronousCallback+0x5c>
 8027c28:	2802      	cmp	r0, #2
 8027c2a:	d00f      	beq.n	8027c4c <AsynchronousCallback+0x68>
 8027c2c:	2804      	cmp	r0, #4
 8027c2e:	d119      	bne.n	8027c64 <AsynchronousCallback+0x80>
 8027c30:	e012      	b.n	8027c58 <AsynchronousCallback+0x74>
 8027c32:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8027c36:	2300      	movs	r3, #0
 8027c38:	9a01      	ldr	r2, [sp, #4]
 8027c3a:	f000 fc0e 	bl	802845a <DispatchServerReadRequestEvent>
 8027c3e:	e011      	b.n	8027c64 <AsynchronousCallback+0x80>
 8027c40:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8027c44:	7a22      	ldrb	r2, [r4, #8]
 8027c46:	f000 fd91 	bl	802876c <ExecuteWriteRequestEventHandler>
 8027c4a:	e00b      	b.n	8027c64 <AsynchronousCallback+0x80>
 8027c4c:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8027c50:	6862      	ldr	r2, [r4, #4]
 8027c52:	f000 fcde 	bl	8028612 <ExecuteWriteConfirmationEventHandler>
 8027c56:	e005      	b.n	8027c64 <AsynchronousCallback+0x80>
 8027c58:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8027c5c:	2300      	movs	r3, #0
 8027c5e:	2201      	movs	r2, #1
 8027c60:	f000 fe9d 	bl	802899e <FormatAndDispatchConnectionEvent>
 8027c64:	9803      	ldr	r0, [sp, #12]
 8027c66:	6800      	ldr	r0, [r0, #0]
 8027c68:	f7f1 fb6c 	bl	8019344 <BSC_UnLockBluetoothStack>
 8027c6c:	4620      	mov	r0, r4
 8027c6e:	f7eb fbbf 	bl	80133f0 <BTPS_FreeMemory>
 8027c72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

Disassembly of section i.BuildPacketByteTwoWordsVariable:

08027c74 <BuildPacketByteTwoWordsVariable>:
 8027c74:	b430      	push	{r4, r5}
 8027c76:	4614      	mov	r4, r2
 8027c78:	460d      	mov	r5, r1
 8027c7a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8027c7e:	7005      	strb	r5, [r0, #0]
 8027c80:	7044      	strb	r4, [r0, #1]
 8027c82:	0a24      	lsrs	r4, r4, #8
 8027c84:	7084      	strb	r4, [r0, #2]
 8027c86:	b153      	cbz	r3, 8027c9e <BuildPacketByteTwoWordsVariable+0x2a>
 8027c88:	781c      	ldrb	r4, [r3, #0]
 8027c8a:	70c4      	strb	r4, [r0, #3]
 8027c8c:	881b      	ldrh	r3, [r3, #0]
 8027c8e:	0a1b      	lsrs	r3, r3, #8
 8027c90:	7103      	strb	r3, [r0, #4]
 8027c92:	2a00      	cmp	r2, #0
 8027c94:	d00b      	beq.n	8027cae <BuildPacketByteTwoWordsVariable+0x3a>
 8027c96:	2900      	cmp	r1, #0
 8027c98:	d009      	beq.n	8027cae <BuildPacketByteTwoWordsVariable+0x3a>
 8027c9a:	1d40      	adds	r0, r0, #5
 8027c9c:	e004      	b.n	8027ca8 <BuildPacketByteTwoWordsVariable+0x34>
 8027c9e:	2a00      	cmp	r2, #0
 8027ca0:	d005      	beq.n	8027cae <BuildPacketByteTwoWordsVariable+0x3a>
 8027ca2:	2900      	cmp	r1, #0
 8027ca4:	d003      	beq.n	8027cae <BuildPacketByteTwoWordsVariable+0x3a>
 8027ca6:	1cc0      	adds	r0, r0, #3
 8027ca8:	bc30      	pop	{r4, r5}
 8027caa:	f7eb bc04 	b.w	80134b6 <BTPS_MemCopy>
 8027cae:	bc30      	pop	{r4, r5}
 8027cb0:	4770      	bx	lr

Disassembly of section i.BuildRecordTwoWordsVariable:

08027cb2 <BuildRecordTwoWordsVariable>:
 8027cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027cb6:	4605      	mov	r5, r0
 8027cb8:	6847      	ldr	r7, [r0, #4]
 8027cba:	468c      	mov	ip, r1
 8027cbc:	300d      	adds	r0, #13
 8027cbe:	9906      	ldr	r1, [sp, #24]
 8027cc0:	4438      	add	r0, r7
 8027cc2:	2601      	movs	r6, #1
 8027cc4:	b12a      	cbz	r2, 8027cd2 <BuildRecordTwoWordsVariable+0x20>
 8027cc6:	b113      	cbz	r3, 8027cce <BuildRecordTwoWordsVariable+0x1c>
 8027cc8:	b109      	cbz	r1, 8027cce <BuildRecordTwoWordsVariable+0x1c>
 8027cca:	1d1c      	adds	r4, r3, #4
 8027ccc:	e006      	b.n	8027cdc <BuildRecordTwoWordsVariable+0x2a>
 8027cce:	2404      	movs	r4, #4
 8027cd0:	e004      	b.n	8027cdc <BuildRecordTwoWordsVariable+0x2a>
 8027cd2:	b113      	cbz	r3, 8027cda <BuildRecordTwoWordsVariable+0x28>
 8027cd4:	b109      	cbz	r1, 8027cda <BuildRecordTwoWordsVariable+0x28>
 8027cd6:	1c9c      	adds	r4, r3, #2
 8027cd8:	e000      	b.n	8027cdc <BuildRecordTwoWordsVariable+0x2a>
 8027cda:	2402      	movs	r4, #2
 8027cdc:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8027ce0:	4427      	add	r7, r4
 8027ce2:	4577      	cmp	r7, lr
 8027ce4:	d81c      	bhi.n	8027d20 <BuildRecordTwoWordsVariable+0x6e>
 8027ce6:	f880 c000 	strb.w	ip, [r0]
 8027cea:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8027cee:	7047      	strb	r7, [r0, #1]
 8027cf0:	b14a      	cbz	r2, 8027d06 <BuildRecordTwoWordsVariable+0x54>
 8027cf2:	7817      	ldrb	r7, [r2, #0]
 8027cf4:	7087      	strb	r7, [r0, #2]
 8027cf6:	8812      	ldrh	r2, [r2, #0]
 8027cf8:	0a12      	lsrs	r2, r2, #8
 8027cfa:	70c2      	strb	r2, [r0, #3]
 8027cfc:	b14b      	cbz	r3, 8027d12 <BuildRecordTwoWordsVariable+0x60>
 8027cfe:	b141      	cbz	r1, 8027d12 <BuildRecordTwoWordsVariable+0x60>
 8027d00:	461a      	mov	r2, r3
 8027d02:	1d00      	adds	r0, r0, #4
 8027d04:	e003      	b.n	8027d0e <BuildRecordTwoWordsVariable+0x5c>
 8027d06:	b123      	cbz	r3, 8027d12 <BuildRecordTwoWordsVariable+0x60>
 8027d08:	b119      	cbz	r1, 8027d12 <BuildRecordTwoWordsVariable+0x60>
 8027d0a:	461a      	mov	r2, r3
 8027d0c:	1c80      	adds	r0, r0, #2
 8027d0e:	f7eb fbd2 	bl	80134b6 <BTPS_MemCopy>
 8027d12:	6868      	ldr	r0, [r5, #4]
 8027d14:	4420      	add	r0, r4
 8027d16:	6068      	str	r0, [r5, #4]
 8027d18:	68a9      	ldr	r1, [r5, #8]
 8027d1a:	4420      	add	r0, r4
 8027d1c:	4288      	cmp	r0, r1
 8027d1e:	d900      	bls.n	8027d22 <BuildRecordTwoWordsVariable+0x70>
 8027d20:	2600      	movs	r6, #0
 8027d22:	4630      	mov	r0, r6
 8027d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.CharacteristicDescriptorDiscoveryRequest:

08027d28 <CharacteristicDescriptorDiscoveryRequest>:
 8027d28:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027d2c:	4616      	mov	r6, r2
 8027d2e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8027db8 <CharacteristicDescriptorDiscoveryRequest+0x90>
 8027d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027d34:	001c      	movs	r4, r3
 8027d36:	460f      	mov	r7, r1
 8027d38:	4682      	mov	sl, r0
 8027d3a:	f04f 0800 	mov.w	r8, #0
 8027d3e:	d01b      	beq.n	8027d78 <CharacteristicDescriptorDiscoveryRequest+0x50>
 8027d40:	b1e2      	cbz	r2, 8027d7c <CharacteristicDescriptorDiscoveryRequest+0x54>
 8027d42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8027d46:	4282      	cmp	r2, r0
 8027d48:	d218      	bcs.n	8027d7c <CharacteristicDescriptorDiscoveryRequest+0x54>
 8027d4a:	6a20      	ldr	r0, [r4, #32]
 8027d4c:	b118      	cbz	r0, 8027d56 <CharacteristicDescriptorDiscoveryRequest+0x2e>
 8027d4e:	8a40      	ldrh	r0, [r0, #18]
 8027d50:	1e40      	subs	r0, r0, #1
 8027d52:	b283      	uxth	r3, r0
 8027d54:	e000      	b.n	8027d58 <CharacteristicDescriptorDiscoveryRequest+0x30>
 8027d56:	8ab3      	ldrh	r3, [r6, #20]
 8027d58:	4293      	cmp	r3, r2
 8027d5a:	d30f      	bcc.n	8027d7c <CharacteristicDescriptorDiscoveryRequest+0x54>
 8027d5c:	6839      	ldr	r1, [r7, #0]
 8027d5e:	4650      	mov	r0, sl
 8027d60:	e9cd 9100 	strd	r9, r1, [sp]
 8027d64:	f001 fb32 	bl	80293cc <GATT_Discover_Characteristic_Descriptors>
 8027d68:	2800      	cmp	r0, #0
 8027d6a:	dd07      	ble.n	8027d7c <CharacteristicDescriptorDiscoveryRequest+0x54>
 8027d6c:	6078      	str	r0, [r7, #4]
 8027d6e:	8aa0      	ldrh	r0, [r4, #20]
 8027d70:	82f0      	strh	r0, [r6, #22]
 8027d72:	f04f 0801 	mov.w	r8, #1
 8027d76:	e01b      	b.n	8027db0 <CharacteristicDescriptorDiscoveryRequest+0x88>
 8027d78:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8027d7a:	e017      	b.n	8027dac <CharacteristicDescriptorDiscoveryRequest+0x84>
 8027d7c:	6a24      	ldr	r4, [r4, #32]
 8027d7e:	e015      	b.n	8027dac <CharacteristicDescriptorDiscoveryRequest+0x84>
 8027d80:	6a25      	ldr	r5, [r4, #32]
 8027d82:	b11d      	cbz	r5, 8027d8c <CharacteristicDescriptorDiscoveryRequest+0x64>
 8027d84:	8a68      	ldrh	r0, [r5, #18]
 8027d86:	1e40      	subs	r0, r0, #1
 8027d88:	b283      	uxth	r3, r0
 8027d8a:	e000      	b.n	8027d8e <CharacteristicDescriptorDiscoveryRequest+0x66>
 8027d8c:	8ab3      	ldrh	r3, [r6, #20]
 8027d8e:	8aa0      	ldrh	r0, [r4, #20]
 8027d90:	1c40      	adds	r0, r0, #1
 8027d92:	b281      	uxth	r1, r0
 8027d94:	4299      	cmp	r1, r3
 8027d96:	d808      	bhi.n	8027daa <CharacteristicDescriptorDiscoveryRequest+0x82>
 8027d98:	6839      	ldr	r1, [r7, #0]
 8027d9a:	b282      	uxth	r2, r0
 8027d9c:	e9cd 9100 	strd	r9, r1, [sp]
 8027da0:	4650      	mov	r0, sl
 8027da2:	f001 fb13 	bl	80293cc <GATT_Discover_Characteristic_Descriptors>
 8027da6:	2800      	cmp	r0, #0
 8027da8:	dce0      	bgt.n	8027d6c <CharacteristicDescriptorDiscoveryRequest+0x44>
 8027daa:	462c      	mov	r4, r5
 8027dac:	2c00      	cmp	r4, #0
 8027dae:	d1e7      	bne.n	8027d80 <CharacteristicDescriptorDiscoveryRequest+0x58>
 8027db0:	4640      	mov	r0, r8
 8027db2:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 8027db6:	0000      	.short	0x0000
 8027db8:	08028fe1 	.word	0x08028fe1

Disassembly of section i.CharacteristicDiscoveryRequest:

08027dbc <CharacteristicDiscoveryRequest>:
 8027dbc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8027dbe:	460c      	mov	r4, r1
 8027dc0:	461d      	mov	r5, r3
 8027dc2:	6809      	ldr	r1, [r1, #0]
 8027dc4:	4b05      	ldr	r3, [pc, #20]	; (8027ddc <CharacteristicDiscoveryRequest+0x20>)
 8027dc6:	e9cd 3100 	strd	r3, r1, [sp]
 8027dca:	8a93      	ldrh	r3, [r2, #20]
 8027dcc:	462a      	mov	r2, r5
 8027dce:	f001 fb13 	bl	80293f8 <GATT_Discover_Characteristics>
 8027dd2:	2800      	cmp	r0, #0
 8027dd4:	dd01      	ble.n	8027dda <CharacteristicDiscoveryRequest+0x1e>
 8027dd6:	6060      	str	r0, [r4, #4]
 8027dd8:	2000      	movs	r0, #0
 8027dda:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8027ddc:	08028fe1 	.word	0x08028fe1

Disassembly of section i.CharacteristicDiscoveryResponseEvent:

08027de0 <CharacteristicDiscoveryResponseEvent>:
 8027de0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027de4:	b083      	sub	sp, #12
 8027de6:	460c      	mov	r4, r1
 8027de8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8027dea:	4692      	mov	sl, r2
 8027dec:	7878      	ldrb	r0, [r7, #1]
 8027dee:	1c81      	adds	r1, r0, #2
 8027df0:	4299      	cmp	r1, r3
 8027df2:	d84c      	bhi.n	8027e8e <CharacteristicDiscoveryResponseEvent+0xae>
 8027df4:	1e9b      	subs	r3, r3, #2
 8027df6:	fbb3 f1f0 	udiv	r1, r3, r0
 8027dfa:	fb00 3111 	mls	r1, r0, r1, r3
 8027dfe:	2900      	cmp	r1, #0
 8027e00:	d145      	bne.n	8027e8e <CharacteristicDiscoveryResponseEvent+0xae>
 8027e02:	fbb3 f6f0 	udiv	r6, r3, r0
 8027e06:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8027e0a:	00c0      	lsls	r0, r0, #3
 8027e0c:	f7eb fad6 	bl	80133bc <BTPS_AllocateMemory>
 8027e10:	ea5f 0800 	movs.w	r8, r0
 8027e14:	d03b      	beq.n	8027e8e <CharacteristicDiscoveryResponseEvent+0xae>
 8027e16:	b2b1      	uxth	r1, r6
 8027e18:	e9cd 1800 	strd	r1, r8, [sp]
 8027e1c:	2304      	movs	r3, #4
 8027e1e:	4652      	mov	r2, sl
 8027e20:	4621      	mov	r1, r4
 8027e22:	9803      	ldr	r0, [sp, #12]
 8027e24:	f000 fefc 	bl	8028c20 <FormatClientEventWordPointer>
 8027e28:	ea5f 0900 	movs.w	r9, r0
 8027e2c:	d029      	beq.n	8027e82 <CharacteristicDiscoveryResponseEvent+0xa2>
 8027e2e:	4644      	mov	r4, r8
 8027e30:	1cbd      	adds	r5, r7, #2
 8027e32:	f04f 0b00 	mov.w	fp, #0
 8027e36:	e01a      	b.n	8027e6e <CharacteristicDiscoveryResponseEvent+0x8e>
 8027e38:	8828      	ldrh	r0, [r5, #0]
 8027e3a:	8020      	strh	r0, [r4, #0]
 8027e3c:	f8b5 0003 	ldrh.w	r0, [r5, #3]
 8027e40:	80a0      	strh	r0, [r4, #4]
 8027e42:	78a8      	ldrb	r0, [r5, #2]
 8027e44:	70a0      	strb	r0, [r4, #2]
 8027e46:	7878      	ldrb	r0, [r7, #1]
 8027e48:	2807      	cmp	r0, #7
 8027e4a:	d002      	beq.n	8027e52 <CharacteristicDiscoveryResponseEvent+0x72>
 8027e4c:	2815      	cmp	r0, #21
 8027e4e:	d004      	beq.n	8027e5a <CharacteristicDiscoveryResponseEvent+0x7a>
 8027e50:	e00a      	b.n	8027e68 <CharacteristicDiscoveryResponseEvent+0x88>
 8027e52:	f884 b006 	strb.w	fp, [r4, #6]
 8027e56:	2202      	movs	r2, #2
 8027e58:	e002      	b.n	8027e60 <CharacteristicDiscoveryResponseEvent+0x80>
 8027e5a:	2001      	movs	r0, #1
 8027e5c:	71a0      	strb	r0, [r4, #6]
 8027e5e:	2210      	movs	r2, #16
 8027e60:	1d69      	adds	r1, r5, #5
 8027e62:	1de0      	adds	r0, r4, #7
 8027e64:	f7eb fb27 	bl	80134b6 <BTPS_MemCopy>
 8027e68:	7878      	ldrb	r0, [r7, #1]
 8027e6a:	3418      	adds	r4, #24
 8027e6c:	4405      	add	r5, r0
 8027e6e:	1e76      	subs	r6, r6, #1
 8027e70:	d2e2      	bcs.n	8027e38 <CharacteristicDiscoveryResponseEvent+0x58>
 8027e72:	9803      	ldr	r0, [sp, #12]
 8027e74:	f8da 3018 	ldr.w	r3, [sl, #24]
 8027e78:	f8da 2020 	ldr.w	r2, [sl, #32]
 8027e7c:	6800      	ldr	r0, [r0, #0]
 8027e7e:	4649      	mov	r1, r9
 8027e80:	4798      	blx	r3
 8027e82:	b007      	add	sp, #28
 8027e84:	4640      	mov	r0, r8
 8027e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e8a:	f7eb bab1 	b.w	80133f0 <BTPS_FreeMemory>
 8027e8e:	b007      	add	sp, #28
 8027e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ClientRequestWithData:

08027e94 <ClientRequestWithData>:
 8027e94:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e98:	b085      	sub	sp, #20
 8027e9a:	ea5f 0802 	movs.w	r8, r2
 8027e9e:	aa12      	add	r2, sp, #72	; 0x48
 8027ea0:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8027ea4:	e892 02e0 	ldmia.w	r2, {r5, r6, r7, r9}
 8027ea8:	469a      	mov	sl, r3
 8027eaa:	d05b      	beq.n	8027f64 <ClientRequestWithData+0xd0>
 8027eac:	0038      	movs	r0, r7
 8027eae:	d059      	beq.n	8027f64 <ClientRequestWithData+0xd0>
 8027eb0:	460b      	mov	r3, r1
 8027eb2:	a903      	add	r1, sp, #12
 8027eb4:	a802      	add	r0, sp, #8
 8027eb6:	9a05      	ldr	r2, [sp, #20]
 8027eb8:	f7ff fda4 	bl	8027a04 <AcquireGATTStackConnectionInformationByConnectionID>
 8027ebc:	0004      	movs	r4, r0
 8027ebe:	d152      	bne.n	8027f66 <ClientRequestWithData+0xd2>
 8027ec0:	2403      	movs	r4, #3
 8027ec2:	f1ba 0f00 	cmp.w	sl, #0
 8027ec6:	d000      	beq.n	8027eca <ClientRequestWithData+0x36>
 8027ec8:	2405      	movs	r4, #5
 8027eca:	b145      	cbz	r5, 8027ede <ClientRequestWithData+0x4a>
 8027ecc:	b13e      	cbz	r6, 8027ede <ClientRequestWithData+0x4a>
 8027ece:	9803      	ldr	r0, [sp, #12]
 8027ed0:	8980      	ldrh	r0, [r0, #12]
 8027ed2:	1ec0      	subs	r0, r0, #3
 8027ed4:	b280      	uxth	r0, r0
 8027ed6:	4285      	cmp	r5, r0
 8027ed8:	d900      	bls.n	8027edc <ClientRequestWithData+0x48>
 8027eda:	4605      	mov	r5, r0
 8027edc:	442c      	add	r4, r5
 8027ede:	9803      	ldr	r0, [sp, #12]
 8027ee0:	f000 f9a4 	bl	802822c <DetermineClientRequestStatus>
 8027ee4:	b108      	cbz	r0, 8027eea <ClientRequestWithData+0x56>
 8027ee6:	2300      	movs	r3, #0
 8027ee8:	e000      	b.n	8027eec <ClientRequestWithData+0x58>
 8027eea:	4623      	mov	r3, r4
 8027eec:	e9dd 1216 	ldrd	r1, r2, [sp, #88]	; 0x58
 8027ef0:	9803      	ldr	r0, [sp, #12]
 8027ef2:	3014      	adds	r0, #20
 8027ef4:	f000 f924 	bl	8028140 <CreateNewTransactionInfoEntry>
 8027ef8:	b370      	cbz	r0, 8027f58 <ClientRequestWithData+0xc4>
 8027efa:	6104      	str	r4, [r0, #16]
 8027efc:	f8a0 800c 	strh.w	r8, [r0, #12]
 8027f00:	f8c0 9020 	str.w	r9, [r0, #32]
 8027f04:	e9c0 7b06 	strd	r7, fp, [r0, #24]
 8027f08:	e9dd 7102 	ldrd	r7, r1, [sp, #8]
 8027f0c:	4689      	mov	r9, r1
 8027f0e:	4631      	mov	r1, r6
 8027f10:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8027f12:	4604      	mov	r4, r0
 8027f14:	4642      	mov	r2, r8
 8027f16:	4653      	mov	r3, sl
 8027f18:	b90e      	cbnz	r6, 8027f1e <ClientRequestWithData+0x8a>
 8027f1a:	68fe      	ldr	r6, [r7, #12]
 8027f1c:	360c      	adds	r6, #12
 8027f1e:	e9cd 5100 	strd	r5, r1, [sp]
 8027f22:	7a61      	ldrb	r1, [r4, #9]
 8027f24:	4630      	mov	r0, r6
 8027f26:	f7ff fea5 	bl	8027c74 <BuildPacketByteTwoWordsVariable>
 8027f2a:	68f8      	ldr	r0, [r7, #12]
 8027f2c:	300c      	adds	r0, #12
 8027f2e:	42b0      	cmp	r0, r6
 8027f30:	d10f      	bne.n	8027f52 <ClientRequestWithData+0xbe>
 8027f32:	9600      	str	r6, [sp, #0]
 8027f34:	8a20      	ldrh	r0, [r4, #16]
 8027f36:	4622      	mov	r2, r4
 8027f38:	b283      	uxth	r3, r0
 8027f3a:	4649      	mov	r1, r9
 8027f3c:	4638      	mov	r0, r7
 8027f3e:	f002 fe6f 	bl	802ac20 <StartTimerAndSendPDU>
 8027f42:	0005      	movs	r5, r0
 8027f44:	d005      	beq.n	8027f52 <ClientRequestWithData+0xbe>
 8027f46:	f109 0014 	add.w	r0, r9, #20
 8027f4a:	6821      	ldr	r1, [r4, #0]
 8027f4c:	f000 f934 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 8027f50:	e000      	b.n	8027f54 <ClientRequestWithData+0xc0>
 8027f52:	6825      	ldr	r5, [r4, #0]
 8027f54:	462c      	mov	r4, r5
 8027f56:	e001      	b.n	8027f5c <ClientRequestWithData+0xc8>
 8027f58:	f46f 747b 	mvn.w	r4, #1004	; 0x3ec
 8027f5c:	9805      	ldr	r0, [sp, #20]
 8027f5e:	f7f1 f9f1 	bl	8019344 <BSC_UnLockBluetoothStack>
 8027f62:	e000      	b.n	8027f66 <ClientRequestWithData+0xd2>
 8027f64:	4c02      	ldr	r4, [pc, #8]	; (8027f70 <ClientRequestWithData+0xdc>)
 8027f66:	b009      	add	sp, #36	; 0x24
 8027f68:	4620      	mov	r0, r4
 8027f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f6e:	0000      	.short	0x0000
 8027f70:	fffffc18 	.word	0xfffffc18

Disassembly of section i.ClientRequestWithUUID:

08027f74 <ClientRequestWithUUID>:
 8027f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027f78:	b087      	sub	sp, #28
 8027f7a:	461d      	mov	r5, r3
 8027f7c:	4681      	mov	r9, r0
 8027f7e:	e9dd 6312 	ldrd	r6, r3, [sp, #72]	; 0x48
 8027f82:	e9dd c710 	ldrd	ip, r7, [sp, #64]	; 0x40
 8027f86:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8027f8a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8027f8e:	b1e0      	cbz	r0, 8027fca <ClientRequestWithUUID+0x56>
 8027f90:	4285      	cmp	r5, r0
 8027f92:	d818      	bhi.n	8027fc6 <ClientRequestWithUUID+0x52>
 8027f94:	2000      	movs	r0, #0
 8027f96:	4604      	mov	r4, r0
 8027f98:	b11a      	cbz	r2, 8027fa2 <ClientRequestWithUUID+0x2e>
 8027f9a:	7810      	ldrb	r0, [r2, #0]
 8027f9c:	b188      	cbz	r0, 8027fc2 <ClientRequestWithUUID+0x4e>
 8027f9e:	2410      	movs	r4, #16
 8027fa0:	1c50      	adds	r0, r2, #1
 8027fa2:	9704      	str	r7, [sp, #16]
 8027fa4:	9400      	str	r4, [sp, #0]
 8027fa6:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8027faa:	f10d 0e04 	add.w	lr, sp, #4
 8027fae:	ab0e      	add	r3, sp, #56	; 0x38
 8027fb0:	e88e 1101 	stmia.w	lr, {r0, r8, ip}
 8027fb4:	462a      	mov	r2, r5
 8027fb6:	4648      	mov	r0, r9
 8027fb8:	f7ff ff6c 	bl	8027e94 <ClientRequestWithData>
 8027fbc:	b007      	add	sp, #28
 8027fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027fc2:	2402      	movs	r4, #2
 8027fc4:	e7ec      	b.n	8027fa0 <ClientRequestWithUUID+0x2c>
 8027fc6:	4802      	ldr	r0, [pc, #8]	; (8027fd0 <ClientRequestWithUUID+0x5c>)
 8027fc8:	e7f8      	b.n	8027fbc <ClientRequestWithUUID+0x48>
 8027fca:	4801      	ldr	r0, [pc, #4]	; (8027fd0 <ClientRequestWithUUID+0x5c>)
 8027fcc:	3008      	adds	r0, #8
 8027fce:	e7f5      	b.n	8027fbc <ClientRequestWithUUID+0x48>
 8027fd0:	fffffc10 	.word	0xfffffc10

Disassembly of section i.CompareServiceToServiceList:

08027fd4 <CompareServiceToServiceList>:
 8027fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027fd8:	4605      	mov	r5, r0
 8027fda:	6980      	ldr	r0, [r0, #24]
 8027fdc:	460f      	mov	r7, r1
 8027fde:	2600      	movs	r6, #0
 8027fe0:	b158      	cbz	r0, 8027ffa <CompareServiceToServiceList+0x26>
 8027fe2:	69e8      	ldr	r0, [r5, #28]
 8027fe4:	b148      	cbz	r0, 8027ffa <CompareServiceToServiceList+0x26>
 8027fe6:	2400      	movs	r4, #0
 8027fe8:	e00a      	b.n	8028000 <CompareServiceToServiceList+0x2c>
 8027fea:	69e8      	ldr	r0, [r5, #28]
 8027fec:	eb04 1104 	add.w	r1, r4, r4, lsl #4
 8027ff0:	4408      	add	r0, r1
 8027ff2:	4639      	mov	r1, r7
 8027ff4:	f000 f80a 	bl	802800c <CompareUUID>
 8027ff8:	b108      	cbz	r0, 8027ffe <CompareServiceToServiceList+0x2a>
 8027ffa:	2601      	movs	r6, #1
 8027ffc:	e003      	b.n	8028006 <CompareServiceToServiceList+0x32>
 8027ffe:	1c64      	adds	r4, r4, #1
 8028000:	69a8      	ldr	r0, [r5, #24]
 8028002:	42a0      	cmp	r0, r4
 8028004:	d8f1      	bhi.n	8027fea <CompareServiceToServiceList+0x16>
 8028006:	4630      	mov	r0, r6
 8028008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.CompareUUID:

0802800c <CompareUUID>:
 802800c:	b570      	push	{r4, r5, r6, lr}
 802800e:	460c      	mov	r4, r1
 8028010:	4605      	mov	r5, r0
 8028012:	f7fc fc4c 	bl	80248ae <NormalizeUUID>
 8028016:	4620      	mov	r0, r4
 8028018:	f7fc fc49 	bl	80248ae <NormalizeUUID>
 802801c:	7868      	ldrb	r0, [r5, #1]
 802801e:	7861      	ldrb	r1, [r4, #1]
 8028020:	4288      	cmp	r0, r1
 8028022:	d13d      	bne.n	80280a0 <CompareUUID+0x94>
 8028024:	78a8      	ldrb	r0, [r5, #2]
 8028026:	78a1      	ldrb	r1, [r4, #2]
 8028028:	4288      	cmp	r0, r1
 802802a:	d139      	bne.n	80280a0 <CompareUUID+0x94>
 802802c:	78e8      	ldrb	r0, [r5, #3]
 802802e:	78e1      	ldrb	r1, [r4, #3]
 8028030:	4288      	cmp	r0, r1
 8028032:	d135      	bne.n	80280a0 <CompareUUID+0x94>
 8028034:	7928      	ldrb	r0, [r5, #4]
 8028036:	7921      	ldrb	r1, [r4, #4]
 8028038:	4288      	cmp	r0, r1
 802803a:	d131      	bne.n	80280a0 <CompareUUID+0x94>
 802803c:	7968      	ldrb	r0, [r5, #5]
 802803e:	7961      	ldrb	r1, [r4, #5]
 8028040:	4288      	cmp	r0, r1
 8028042:	d12d      	bne.n	80280a0 <CompareUUID+0x94>
 8028044:	79a8      	ldrb	r0, [r5, #6]
 8028046:	79a1      	ldrb	r1, [r4, #6]
 8028048:	4288      	cmp	r0, r1
 802804a:	d129      	bne.n	80280a0 <CompareUUID+0x94>
 802804c:	79e8      	ldrb	r0, [r5, #7]
 802804e:	79e1      	ldrb	r1, [r4, #7]
 8028050:	4288      	cmp	r0, r1
 8028052:	d125      	bne.n	80280a0 <CompareUUID+0x94>
 8028054:	7a28      	ldrb	r0, [r5, #8]
 8028056:	7a21      	ldrb	r1, [r4, #8]
 8028058:	4288      	cmp	r0, r1
 802805a:	d121      	bne.n	80280a0 <CompareUUID+0x94>
 802805c:	7a68      	ldrb	r0, [r5, #9]
 802805e:	7a61      	ldrb	r1, [r4, #9]
 8028060:	4288      	cmp	r0, r1
 8028062:	d11d      	bne.n	80280a0 <CompareUUID+0x94>
 8028064:	7aa8      	ldrb	r0, [r5, #10]
 8028066:	7aa1      	ldrb	r1, [r4, #10]
 8028068:	4288      	cmp	r0, r1
 802806a:	d119      	bne.n	80280a0 <CompareUUID+0x94>
 802806c:	7ae8      	ldrb	r0, [r5, #11]
 802806e:	7ae1      	ldrb	r1, [r4, #11]
 8028070:	4288      	cmp	r0, r1
 8028072:	d115      	bne.n	80280a0 <CompareUUID+0x94>
 8028074:	7b28      	ldrb	r0, [r5, #12]
 8028076:	7b21      	ldrb	r1, [r4, #12]
 8028078:	4288      	cmp	r0, r1
 802807a:	d111      	bne.n	80280a0 <CompareUUID+0x94>
 802807c:	7b68      	ldrb	r0, [r5, #13]
 802807e:	7b61      	ldrb	r1, [r4, #13]
 8028080:	4288      	cmp	r0, r1
 8028082:	d10d      	bne.n	80280a0 <CompareUUID+0x94>
 8028084:	7ba8      	ldrb	r0, [r5, #14]
 8028086:	7ba1      	ldrb	r1, [r4, #14]
 8028088:	4288      	cmp	r0, r1
 802808a:	d109      	bne.n	80280a0 <CompareUUID+0x94>
 802808c:	7be8      	ldrb	r0, [r5, #15]
 802808e:	7be1      	ldrb	r1, [r4, #15]
 8028090:	4288      	cmp	r0, r1
 8028092:	d105      	bne.n	80280a0 <CompareUUID+0x94>
 8028094:	7c28      	ldrb	r0, [r5, #16]
 8028096:	7c21      	ldrb	r1, [r4, #16]
 8028098:	4288      	cmp	r0, r1
 802809a:	d101      	bne.n	80280a0 <CompareUUID+0x94>
 802809c:	2001      	movs	r0, #1
 802809e:	bd70      	pop	{r4, r5, r6, pc}
 80280a0:	2000      	movs	r0, #0
 80280a2:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.CreateNewConnectionCallbackInfoEntry:

080280a4 <CreateNewConnectionCallbackInfoEntry>:
 80280a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80280a6:	460d      	mov	r5, r1
 80280a8:	4606      	mov	r6, r0
 80280aa:	2901      	cmp	r1, #1
 80280ac:	d01b      	beq.n	80280e6 <CreateNewConnectionCallbackInfoEntry+0x42>
 80280ae:	2714      	movs	r7, #20
 80280b0:	4638      	mov	r0, r7
 80280b2:	f7eb f983 	bl	80133bc <BTPS_AllocateMemory>
 80280b6:	0004      	movs	r4, r0
 80280b8:	d01b      	beq.n	80280f2 <CreateNewConnectionCallbackInfoEntry+0x4e>
 80280ba:	463a      	mov	r2, r7
 80280bc:	2100      	movs	r1, #0
 80280be:	f7eb f9fe 	bl	80134be <BTPS_MemInitialize>
 80280c2:	490d      	ldr	r1, [pc, #52]	; (80280f8 <CreateNewConnectionCallbackInfoEntry+0x54>)
 80280c4:	6888      	ldr	r0, [r1, #8]
 80280c6:	1c40      	adds	r0, r0, #1
 80280c8:	6088      	str	r0, [r1, #8]
 80280ca:	d501      	bpl.n	80280d0 <CreateNewConnectionCallbackInfoEntry+0x2c>
 80280cc:	2001      	movs	r0, #1
 80280ce:	6088      	str	r0, [r1, #8]
 80280d0:	6020      	str	r0, [r4, #0]
 80280d2:	7125      	strb	r5, [r4, #4]
 80280d4:	4633      	mov	r3, r6
 80280d6:	2210      	movs	r2, #16
 80280d8:	2100      	movs	r1, #0
 80280da:	2007      	movs	r0, #7
 80280dc:	9400      	str	r4, [sp, #0]
 80280de:	f7f0 fce7 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 80280e2:	b110      	cbz	r0, 80280ea <CreateNewConnectionCallbackInfoEntry+0x46>
 80280e4:	e005      	b.n	80280f2 <CreateNewConnectionCallbackInfoEntry+0x4e>
 80280e6:	271c      	movs	r7, #28
 80280e8:	e7e2      	b.n	80280b0 <CreateNewConnectionCallbackInfoEntry+0xc>
 80280ea:	4620      	mov	r0, r4
 80280ec:	f7eb f980 	bl	80133f0 <BTPS_FreeMemory>
 80280f0:	2400      	movs	r4, #0
 80280f2:	4620      	mov	r0, r4
 80280f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80280f6:	0000      	.short	0x0000
 80280f8:	20000054 	.word	0x20000054

Disassembly of section i.CreateNewHandleInfoEntry:

080280fc <CreateNewHandleInfoEntry>:
 80280fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80280fe:	460e      	mov	r6, r1
 8028100:	4615      	mov	r5, r2
 8028102:	4607      	mov	r7, r0
 8028104:	4611      	mov	r1, r2
 8028106:	f002 fbe7 	bl	802a8d8 <SearchHandleInfoEntry>
 802810a:	0004      	movs	r4, r0
 802810c:	d116      	bne.n	802813c <CreateNewHandleInfoEntry+0x40>
 802810e:	2014      	movs	r0, #20
 8028110:	f7eb f954 	bl	80133bc <BTPS_AllocateMemory>
 8028114:	0004      	movs	r4, r0
 8028116:	d011      	beq.n	802813c <CreateNewHandleInfoEntry+0x40>
 8028118:	2214      	movs	r2, #20
 802811a:	2100      	movs	r1, #0
 802811c:	f7eb f9cf 	bl	80134be <BTPS_MemInitialize>
 8028120:	60a6      	str	r6, [r4, #8]
 8028122:	81a5      	strh	r5, [r4, #12]
 8028124:	463b      	mov	r3, r7
 8028126:	2210      	movs	r2, #16
 8028128:	210c      	movs	r1, #12
 802812a:	2003      	movs	r0, #3
 802812c:	9400      	str	r4, [sp, #0]
 802812e:	f7f0 fcbf 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 8028132:	b918      	cbnz	r0, 802813c <CreateNewHandleInfoEntry+0x40>
 8028134:	4620      	mov	r0, r4
 8028136:	f7eb f95b 	bl	80133f0 <BTPS_FreeMemory>
 802813a:	2400      	movs	r4, #0
 802813c:	4620      	mov	r0, r4
 802813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i.CreateNewTransactionInfoEntry:

08028140 <CreateNewTransactionInfoEntry>:
 8028140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028144:	4680      	mov	r8, r0
 8028146:	461d      	mov	r5, r3
 8028148:	4616      	mov	r6, r2
 802814a:	460f      	mov	r7, r1
 802814c:	2030      	movs	r0, #48	; 0x30
 802814e:	f7eb f935 	bl	80133bc <BTPS_AllocateMemory>
 8028152:	0004      	movs	r4, r0
 8028154:	d02b      	beq.n	80281ae <CreateNewTransactionInfoEntry+0x6e>
 8028156:	2230      	movs	r2, #48	; 0x30
 8028158:	2100      	movs	r1, #0
 802815a:	f7eb f9b0 	bl	80134be <BTPS_MemInitialize>
 802815e:	4915      	ldr	r1, [pc, #84]	; (80281b4 <CreateNewTransactionInfoEntry+0x74>)
 8028160:	68c8      	ldr	r0, [r1, #12]
 8028162:	1c40      	adds	r0, r0, #1
 8028164:	60c8      	str	r0, [r1, #12]
 8028166:	d501      	bpl.n	802816c <CreateNewTransactionInfoEntry+0x2c>
 8028168:	2001      	movs	r0, #1
 802816a:	60c8      	str	r0, [r1, #12]
 802816c:	6020      	str	r0, [r4, #0]
 802816e:	7227      	strb	r7, [r4, #8]
 8028170:	7266      	strb	r6, [r4, #9]
 8028172:	6265      	str	r5, [r4, #36]	; 0x24
 8028174:	b12d      	cbz	r5, 8028182 <CreateNewTransactionInfoEntry+0x42>
 8028176:	4628      	mov	r0, r5
 8028178:	f7eb f920 	bl	80133bc <BTPS_AllocateMemory>
 802817c:	62a0      	str	r0, [r4, #40]	; 0x28
 802817e:	b910      	cbnz	r0, 8028186 <CreateNewTransactionInfoEntry+0x46>
 8028180:	e011      	b.n	80281a6 <CreateNewTransactionInfoEntry+0x66>
 8028182:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8028184:	b118      	cbz	r0, 802818e <CreateNewTransactionInfoEntry+0x4e>
 8028186:	462a      	mov	r2, r5
 8028188:	2100      	movs	r1, #0
 802818a:	f7eb f998 	bl	80134be <BTPS_MemInitialize>
 802818e:	4643      	mov	r3, r8
 8028190:	222c      	movs	r2, #44	; 0x2c
 8028192:	2100      	movs	r1, #0
 8028194:	2007      	movs	r0, #7
 8028196:	9400      	str	r4, [sp, #0]
 8028198:	f7f0 fc8a 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 802819c:	b938      	cbnz	r0, 80281ae <CreateNewTransactionInfoEntry+0x6e>
 802819e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80281a0:	b108      	cbz	r0, 80281a6 <CreateNewTransactionInfoEntry+0x66>
 80281a2:	f7eb f925 	bl	80133f0 <BTPS_FreeMemory>
 80281a6:	4620      	mov	r0, r4
 80281a8:	f7eb f922 	bl	80133f0 <BTPS_FreeMemory>
 80281ac:	2400      	movs	r4, #0
 80281ae:	4620      	mov	r0, r4
 80281b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80281b4:	20000054 	.word	0x20000054

Disassembly of section i.DeleteFreeTransactionInfoEntry:

080281b8 <DeleteFreeTransactionInfoEntry>:
 80281b8:	b510      	push	{r4, lr}
 80281ba:	f000 f823 	bl	8028204 <DeleteTransactionInfoEntry>
 80281be:	2800      	cmp	r0, #0
 80281c0:	d003      	beq.n	80281ca <DeleteFreeTransactionInfoEntry+0x12>
 80281c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80281c6:	f000 be6f 	b.w	8028ea8 <FreeTransactionInfoEntryMemory>
 80281ca:	bd10      	pop	{r4, pc}

Disassembly of section i.DeleteGATTContextInfoEntry:

080281cc <DeleteGATTContextInfoEntry>:
 80281cc:	b503      	push	{r0, r1, lr}
 80281ce:	b081      	sub	sp, #4
 80281d0:	2338      	movs	r3, #56	; 0x38
 80281d2:	9000      	str	r0, [sp, #0]
 80281d4:	2200      	movs	r2, #0
 80281d6:	a902      	add	r1, sp, #8
 80281d8:	2007      	movs	r0, #7
 80281da:	f7f0 fccf 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80281de:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DeleteHandleInfoEntryByEntryPointer:

080281e0 <DeleteHandleInfoEntryByEntryPointer>:
 80281e0:	b508      	push	{r3, lr}
 80281e2:	2310      	movs	r3, #16
 80281e4:	9000      	str	r0, [sp, #0]
 80281e6:	2200      	movs	r2, #0
 80281e8:	2006      	movs	r0, #6
 80281ea:	f7f0 fcc7 	bl	8018b7c <BSC_DeleteGenericListEntry>
 80281ee:	bd08      	pop	{r3, pc}

Disassembly of section i.DeleteServiceDiscoveryInfoEntry:

080281f0 <DeleteServiceDiscoveryInfoEntry>:
 80281f0:	b503      	push	{r0, r1, lr}
 80281f2:	b081      	sub	sp, #4
 80281f4:	2328      	movs	r3, #40	; 0x28
 80281f6:	9000      	str	r0, [sp, #0]
 80281f8:	2200      	movs	r2, #0
 80281fa:	a902      	add	r1, sp, #8
 80281fc:	2007      	movs	r0, #7
 80281fe:	f7f0 fcbd 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8028202:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DeleteTransactionInfoEntry:

08028204 <DeleteTransactionInfoEntry>:
 8028204:	b503      	push	{r0, r1, lr}
 8028206:	b081      	sub	sp, #4
 8028208:	232c      	movs	r3, #44	; 0x2c
 802820a:	9000      	str	r0, [sp, #0]
 802820c:	2200      	movs	r2, #0
 802820e:	a902      	add	r1, sp, #8
 8028210:	2007      	movs	r0, #7
 8028212:	f7f0 fcb3 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8028216:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DeleteTransactionInfoEntryByTimerID:

08028218 <DeleteTransactionInfoEntryByTimerID>:
 8028218:	b503      	push	{r0, r1, lr}
 802821a:	b081      	sub	sp, #4
 802821c:	232c      	movs	r3, #44	; 0x2c
 802821e:	9000      	str	r0, [sp, #0]
 8028220:	2204      	movs	r2, #4
 8028222:	a902      	add	r1, sp, #8
 8028224:	2007      	movs	r0, #7
 8028226:	f7f0 fca9 	bl	8018b7c <BSC_DeleteGenericListEntry>
 802822a:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.DetermineClientRequestStatus:

0802822c <DetermineClientRequestStatus>:
 802822c:	b570      	push	{r4, r5, r6, lr}
 802822e:	2401      	movs	r4, #1
 8028230:	2100      	movs	r1, #0
 8028232:	f100 0514 	add.w	r5, r0, #20
 8028236:	e003      	b.n	8028240 <DetermineClientRequestStatus+0x14>
 8028238:	7a08      	ldrb	r0, [r1, #8]
 802823a:	280f      	cmp	r0, #15
 802823c:	d000      	beq.n	8028240 <DetermineClientRequestStatus+0x14>
 802823e:	2400      	movs	r4, #0
 8028240:	4628      	mov	r0, r5
 8028242:	f001 fddf 	bl	8029e04 <GetNextTransactionInfoEntry>
 8028246:	0001      	movs	r1, r0
 8028248:	d1f6      	bne.n	8028238 <DetermineClientRequestStatus+0xc>
 802824a:	4620      	mov	r0, r4
 802824c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.DiscoverAllCharactisticDescriptorsResponseEvent:

0802824e <DiscoverAllCharactisticDescriptorsResponseEvent>:
 802824e:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028252:	b083      	sub	sp, #12
 8028254:	4692      	mov	sl, r2
 8028256:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028258:	460c      	mov	r4, r1
 802825a:	2b06      	cmp	r3, #6
 802825c:	d349      	bcc.n	80282f2 <DiscoverAllCharactisticDescriptorsResponseEvent+0xa4>
 802825e:	7868      	ldrb	r0, [r5, #1]
 8028260:	2801      	cmp	r0, #1
 8028262:	d022      	beq.n	80282aa <DiscoverAllCharactisticDescriptorsResponseEvent+0x5c>
 8028264:	2710      	movs	r7, #16
 8028266:	1cb8      	adds	r0, r7, #2
 8028268:	1e9b      	subs	r3, r3, #2
 802826a:	fbb3 f1f0 	udiv	r1, r3, r0
 802826e:	fb00 3111 	mls	r1, r0, r1, r3
 8028272:	2900      	cmp	r1, #0
 8028274:	d13d      	bne.n	80282f2 <DiscoverAllCharactisticDescriptorsResponseEvent+0xa4>
 8028276:	fbb3 f6f0 	udiv	r6, r3, r0
 802827a:	eb06 0086 	add.w	r0, r6, r6, lsl #2
 802827e:	0080      	lsls	r0, r0, #2
 8028280:	f7eb f89c 	bl	80133bc <BTPS_AllocateMemory>
 8028284:	ea5f 0800 	movs.w	r8, r0
 8028288:	d033      	beq.n	80282f2 <DiscoverAllCharactisticDescriptorsResponseEvent+0xa4>
 802828a:	b2b1      	uxth	r1, r6
 802828c:	e9cd 1800 	strd	r1, r8, [sp]
 8028290:	2305      	movs	r3, #5
 8028292:	4652      	mov	r2, sl
 8028294:	4621      	mov	r1, r4
 8028296:	9803      	ldr	r0, [sp, #12]
 8028298:	f000 fcc2 	bl	8028c20 <FormatClientEventWordPointer>
 802829c:	ea5f 0900 	movs.w	r9, r0
 80282a0:	d01d      	beq.n	80282de <DiscoverAllCharactisticDescriptorsResponseEvent+0x90>
 80282a2:	4644      	mov	r4, r8
 80282a4:	f04f 0b01 	mov.w	fp, #1
 80282a8:	e00e      	b.n	80282c8 <DiscoverAllCharactisticDescriptorsResponseEvent+0x7a>
 80282aa:	2702      	movs	r7, #2
 80282ac:	e7db      	b.n	8028266 <DiscoverAllCharactisticDescriptorsResponseEvent+0x18>
 80282ae:	8828      	ldrh	r0, [r5, #0]
 80282b0:	8020      	strh	r0, [r4, #0]
 80282b2:	2f10      	cmp	r7, #16
 80282b4:	d019      	beq.n	80282ea <DiscoverAllCharactisticDescriptorsResponseEvent+0x9c>
 80282b6:	2000      	movs	r0, #0
 80282b8:	70a0      	strb	r0, [r4, #2]
 80282ba:	2202      	movs	r2, #2
 80282bc:	1ca9      	adds	r1, r5, #2
 80282be:	1ce0      	adds	r0, r4, #3
 80282c0:	f7eb f8f9 	bl	80134b6 <BTPS_MemCopy>
 80282c4:	443d      	add	r5, r7
 80282c6:	3414      	adds	r4, #20
 80282c8:	1cad      	adds	r5, r5, #2
 80282ca:	1e76      	subs	r6, r6, #1
 80282cc:	d2ef      	bcs.n	80282ae <DiscoverAllCharactisticDescriptorsResponseEvent+0x60>
 80282ce:	9803      	ldr	r0, [sp, #12]
 80282d0:	f8da 3018 	ldr.w	r3, [sl, #24]
 80282d4:	f8da 2020 	ldr.w	r2, [sl, #32]
 80282d8:	6800      	ldr	r0, [r0, #0]
 80282da:	4649      	mov	r1, r9
 80282dc:	4798      	blx	r3
 80282de:	b007      	add	sp, #28
 80282e0:	4640      	mov	r0, r8
 80282e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282e6:	f7eb b883 	b.w	80133f0 <BTPS_FreeMemory>
 80282ea:	f884 b002 	strb.w	fp, [r4, #2]
 80282ee:	2210      	movs	r2, #16
 80282f0:	e7e4      	b.n	80282bc <DiscoverAllCharactisticDescriptorsResponseEvent+0x6e>
 80282f2:	b007      	add	sp, #28
 80282f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.DiscoverAllPrimaryServicesResponseEvent:

080282f8 <DiscoverAllPrimaryServicesResponseEvent>:
 80282f8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282fc:	b083      	sub	sp, #12
 80282fe:	4692      	mov	sl, r2
 8028300:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8028302:	460c      	mov	r4, r1
 8028304:	2b02      	cmp	r3, #2
 8028306:	d34a      	bcc.n	802839e <DiscoverAllPrimaryServicesResponseEvent+0xa6>
 8028308:	7878      	ldrb	r0, [r7, #1]
 802830a:	1e81      	subs	r1, r0, #2
 802830c:	b289      	uxth	r1, r1
 802830e:	4299      	cmp	r1, r3
 8028310:	d845      	bhi.n	802839e <DiscoverAllPrimaryServicesResponseEvent+0xa6>
 8028312:	1e9b      	subs	r3, r3, #2
 8028314:	fbb3 f1f0 	udiv	r1, r3, r0
 8028318:	fb00 3111 	mls	r1, r0, r1, r3
 802831c:	2900      	cmp	r1, #0
 802831e:	d13e      	bne.n	802839e <DiscoverAllPrimaryServicesResponseEvent+0xa6>
 8028320:	fbb3 f6f0 	udiv	r6, r3, r0
 8028324:	2016      	movs	r0, #22
 8028326:	4370      	muls	r0, r6
 8028328:	f7eb f848 	bl	80133bc <BTPS_AllocateMemory>
 802832c:	ea5f 0800 	movs.w	r8, r0
 8028330:	d035      	beq.n	802839e <DiscoverAllPrimaryServicesResponseEvent+0xa6>
 8028332:	b2b1      	uxth	r1, r6
 8028334:	e9cd 1800 	strd	r1, r8, [sp]
 8028338:	2301      	movs	r3, #1
 802833a:	4652      	mov	r2, sl
 802833c:	4621      	mov	r1, r4
 802833e:	9803      	ldr	r0, [sp, #12]
 8028340:	f000 fc6e 	bl	8028c20 <FormatClientEventWordPointer>
 8028344:	ea5f 0900 	movs.w	r9, r0
 8028348:	d01f      	beq.n	802838a <DiscoverAllPrimaryServicesResponseEvent+0x92>
 802834a:	4644      	mov	r4, r8
 802834c:	1cbd      	adds	r5, r7, #2
 802834e:	f04f 0b01 	mov.w	fp, #1
 8028352:	e010      	b.n	8028376 <DiscoverAllPrimaryServicesResponseEvent+0x7e>
 8028354:	8828      	ldrh	r0, [r5, #0]
 8028356:	8020      	strh	r0, [r4, #0]
 8028358:	8868      	ldrh	r0, [r5, #2]
 802835a:	8060      	strh	r0, [r4, #2]
 802835c:	7878      	ldrb	r0, [r7, #1]
 802835e:	2814      	cmp	r0, #20
 8028360:	d019      	beq.n	8028396 <DiscoverAllPrimaryServicesResponseEvent+0x9e>
 8028362:	2000      	movs	r0, #0
 8028364:	7120      	strb	r0, [r4, #4]
 8028366:	2202      	movs	r2, #2
 8028368:	1d29      	adds	r1, r5, #4
 802836a:	1d60      	adds	r0, r4, #5
 802836c:	f7eb f8a3 	bl	80134b6 <BTPS_MemCopy>
 8028370:	7878      	ldrb	r0, [r7, #1]
 8028372:	3416      	adds	r4, #22
 8028374:	4405      	add	r5, r0
 8028376:	1e76      	subs	r6, r6, #1
 8028378:	d2ec      	bcs.n	8028354 <DiscoverAllPrimaryServicesResponseEvent+0x5c>
 802837a:	9803      	ldr	r0, [sp, #12]
 802837c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8028380:	f8da 2020 	ldr.w	r2, [sl, #32]
 8028384:	6800      	ldr	r0, [r0, #0]
 8028386:	4649      	mov	r1, r9
 8028388:	4798      	blx	r3
 802838a:	b007      	add	sp, #28
 802838c:	4640      	mov	r0, r8
 802838e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028392:	f7eb b82d 	b.w	80133f0 <BTPS_FreeMemory>
 8028396:	f884 b004 	strb.w	fp, [r4, #4]
 802839a:	2210      	movs	r2, #16
 802839c:	e7e4      	b.n	8028368 <DiscoverAllPrimaryServicesResponseEvent+0x70>
 802839e:	b007      	add	sp, #28
 80283a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.DispatchClientRequestErrorEvent:

080283a4 <DispatchClientRequestErrorEvent>:
 80283a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80283a8:	4605      	mov	r5, r0
 80283aa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80283ae:	6900      	ldr	r0, [r0, #16]
 80283b0:	4616      	mov	r6, r2
 80283b2:	2200      	movs	r2, #0
 80283b4:	7002      	strb	r2, [r0, #0]
 80283b6:	692a      	ldr	r2, [r5, #16]
 80283b8:	f100 0408 	add.w	r4, r0, #8
 80283bc:	2018      	movs	r0, #24
 80283be:	8050      	strh	r0, [r2, #2]
 80283c0:	6928      	ldr	r0, [r5, #16]
 80283c2:	461f      	mov	r7, r3
 80283c4:	6044      	str	r4, [r0, #4]
 80283c6:	6833      	ldr	r3, [r6, #0]
 80283c8:	4620      	mov	r0, r4
 80283ca:	680a      	ldr	r2, [r1, #0]
 80283cc:	f000 fcc3 	bl	8028d56 <FormatTwoIntegersAddress>
 80283d0:	73e7      	strb	r7, [r4, #15]
 80283d2:	7a70      	ldrb	r0, [r6, #9]
 80283d4:	7420      	strb	r0, [r4, #16]
 80283d6:	f8a4 8012 	strh.w	r8, [r4, #18]
 80283da:	f884 9014 	strb.w	r9, [r4, #20]
 80283de:	6a32      	ldr	r2, [r6, #32]
 80283e0:	6929      	ldr	r1, [r5, #16]
 80283e2:	6828      	ldr	r0, [r5, #0]
 80283e4:	69b3      	ldr	r3, [r6, #24]
 80283e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80283ea:	4718      	bx	r3

Disassembly of section i.DispatchConnectionEvent:

080283ec <DispatchConnectionEvent>:
 80283ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80283f0:	460f      	mov	r7, r1
 80283f2:	4605      	mov	r5, r0
 80283f4:	2400      	movs	r4, #0
 80283f6:	f100 0618 	add.w	r6, r0, #24
 80283fa:	e00b      	b.n	8028414 <DispatchConnectionEvent+0x28>
 80283fc:	7920      	ldrb	r0, [r4, #4]
 80283fe:	b120      	cbz	r0, 802840a <DispatchConnectionEvent+0x1e>
 8028400:	2802      	cmp	r0, #2
 8028402:	d107      	bne.n	8028414 <DispatchConnectionEvent+0x28>
 8028404:	7838      	ldrb	r0, [r7, #0]
 8028406:	2808      	cmp	r0, #8
 8028408:	d004      	beq.n	8028414 <DispatchConnectionEvent+0x28>
 802840a:	68a3      	ldr	r3, [r4, #8]
 802840c:	68e2      	ldr	r2, [r4, #12]
 802840e:	6828      	ldr	r0, [r5, #0]
 8028410:	4639      	mov	r1, r7
 8028412:	4798      	blx	r3
 8028414:	4633      	mov	r3, r6
 8028416:	4621      	mov	r1, r4
 8028418:	2210      	movs	r2, #16
 802841a:	2006      	movs	r0, #6
 802841c:	f7f0 fc60 	bl	8018ce0 <BSC_GetNextGenericListEntry>
 8028420:	0004      	movs	r4, r0
 8028422:	d1eb      	bne.n	80283fc <DispatchConnectionEvent+0x10>
 8028424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.DispatchServerConfirmationEvent:

08028428 <DispatchServerConfirmationEvent>:
 8028428:	b53f      	push	{r0, r1, r2, r3, r4, r5, lr}
 802842a:	b083      	sub	sp, #12
 802842c:	4614      	mov	r4, r2
 802842e:	4605      	mov	r5, r0
 8028430:	aa06      	add	r2, sp, #24
 8028432:	2000      	movs	r0, #0
 8028434:	e9cd 0200 	strd	r0, r2, [sp]
 8028438:	2307      	movs	r3, #7
 802843a:	4622      	mov	r2, r4
 802843c:	4628      	mov	r0, r5
 802843e:	f000 fc40 	bl	8028cc2 <FormatServerEventIntegerByte>
 8028442:	0001      	movs	r1, r0
 8028444:	d007      	beq.n	8028456 <DispatchServerConfirmationEvent+0x2e>
 8028446:	8a20      	ldrh	r0, [r4, #16]
 8028448:	684a      	ldr	r2, [r1, #4]
 802844a:	1ec0      	subs	r0, r0, #3
 802844c:	8210      	strh	r0, [r2, #16]
 802844e:	69a3      	ldr	r3, [r4, #24]
 8028450:	6a22      	ldr	r2, [r4, #32]
 8028452:	6828      	ldr	r0, [r5, #0]
 8028454:	4798      	blx	r3
 8028456:	b007      	add	sp, #28
 8028458:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.DispatchServerReadRequestEvent:

0802845a <DispatchServerReadRequestEvent>:
 802845a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802845e:	4689      	mov	r9, r1
 8028460:	4606      	mov	r6, r0
 8028462:	b085      	sub	sp, #20
 8028464:	461f      	mov	r7, r3
 8028466:	4690      	mov	r8, r2
 8028468:	2100      	movs	r1, #0
 802846a:	f102 0014 	add.w	r0, r2, #20
 802846e:	f001 fcbf 	bl	8029df0 <GetNextHandleInfoEntry>
 8028472:	0005      	movs	r5, r0
 8028474:	d02b      	beq.n	80284ce <DispatchServerReadRequestEvent+0x74>
 8028476:	f106 0034 	add.w	r0, r6, #52	; 0x34
 802847a:	68a9      	ldr	r1, [r5, #8]
 802847c:	f002 fa4a 	bl	802a914 <SearchServiceInfoEntry>
 8028480:	0004      	movs	r4, r0
 8028482:	d024      	beq.n	80284ce <DispatchServerReadRequestEvent+0x74>
 8028484:	9700      	str	r7, [sp, #0]
 8028486:	89a8      	ldrh	r0, [r5, #12]
 8028488:	89a1      	ldrh	r1, [r4, #12]
 802848a:	4622      	mov	r2, r4
 802848c:	1a40      	subs	r0, r0, r1
 802848e:	b283      	uxth	r3, r0
 8028490:	4641      	mov	r1, r8
 8028492:	4630      	mov	r0, r6
 8028494:	f001 fcde 	bl	8029e54 <HandleReadRequestEvent>
 8028498:	2800      	cmp	r0, #0
 802849a:	d118      	bne.n	80284ce <DispatchServerReadRequestEvent+0x74>
 802849c:	89a9      	ldrh	r1, [r5, #12]
 802849e:	89a2      	ldrh	r2, [r4, #12]
 80284a0:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80284a4:	1a89      	subs	r1, r1, r2
 80284a6:	b289      	uxth	r1, r1
 80284a8:	9101      	str	r1, [sp, #4]
 80284aa:	9004      	str	r0, [sp, #16]
 80284ac:	68a8      	ldr	r0, [r5, #8]
 80284ae:	9000      	str	r0, [sp, #0]
 80284b0:	2302      	movs	r3, #2
 80284b2:	4642      	mov	r2, r8
 80284b4:	4649      	mov	r1, r9
 80284b6:	4630      	mov	r0, r6
 80284b8:	f000 fc28 	bl	8028d0c <FormatServerEventIntegerThreeWordsPointer>
 80284bc:	0001      	movs	r1, r0
 80284be:	d006      	beq.n	80284ce <DispatchServerReadRequestEvent+0x74>
 80284c0:	69e2      	ldr	r2, [r4, #28]
 80284c2:	6830      	ldr	r0, [r6, #0]
 80284c4:	69a3      	ldr	r3, [r4, #24]
 80284c6:	b005      	add	sp, #20
 80284c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80284cc:	4718      	bx	r3
 80284ce:	b005      	add	sp, #20
 80284d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i.DispatchServerWriteRequestEvent:

080284d4 <DispatchServerWriteRequestEvent>:
 80284d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284d8:	b085      	sub	sp, #20
 80284da:	001c      	movs	r4, r3
 80284dc:	e9dd 980f 	ldrd	r9, r8, [sp, #60]	; 0x3c
 80284e0:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80284e4:	4617      	mov	r7, r2
 80284e6:	468b      	mov	fp, r1
 80284e8:	4606      	mov	r6, r0
 80284ea:	d106      	bne.n	80284fa <DispatchServerWriteRequestEvent+0x26>
 80284ec:	2100      	movs	r1, #0
 80284ee:	f107 0014 	add.w	r0, r7, #20
 80284f2:	f001 fc7d 	bl	8029df0 <GetNextHandleInfoEntry>
 80284f6:	0004      	movs	r4, r0
 80284f8:	d027      	beq.n	802854a <DispatchServerWriteRequestEvent+0x76>
 80284fa:	f106 0034 	add.w	r0, r6, #52	; 0x34
 80284fe:	68a1      	ldr	r1, [r4, #8]
 8028500:	f002 fa08 	bl	802a914 <SearchServiceInfoEntry>
 8028504:	0005      	movs	r5, r0
 8028506:	d020      	beq.n	802854a <DispatchServerWriteRequestEvent+0x76>
 8028508:	89a2      	ldrh	r2, [r4, #12]
 802850a:	f8b5 c00c 	ldrh.w	ip, [r5, #12]
 802850e:	ab0e      	add	r3, sp, #56	; 0x38
 8028510:	eba2 020c 	sub.w	r2, r2, ip
 8028514:	b292      	uxth	r2, r2
 8028516:	e9cd 2901 	strd	r2, r9, [sp, #4]
 802851a:	e9cd 3803 	strd	r3, r8, [sp, #12]
 802851e:	68a0      	ldr	r0, [r4, #8]
 8028520:	9000      	str	r0, [sp, #0]
 8028522:	2303      	movs	r3, #3
 8028524:	463a      	mov	r2, r7
 8028526:	4659      	mov	r1, fp
 8028528:	4630      	mov	r0, r6
 802852a:	f000 fbef 	bl	8028d0c <FormatServerEventIntegerThreeWordsPointer>
 802852e:	0001      	movs	r1, r0
 8028530:	d00b      	beq.n	802854a <DispatchServerWriteRequestEvent+0x76>
 8028532:	2024      	movs	r0, #36	; 0x24
 8028534:	8048      	strh	r0, [r1, #2]
 8028536:	684a      	ldr	r2, [r1, #4]
 8028538:	f882 a020 	strb.w	sl, [r2, #32]
 802853c:	69ea      	ldr	r2, [r5, #28]
 802853e:	6830      	ldr	r0, [r6, #0]
 8028540:	69ab      	ldr	r3, [r5, #24]
 8028542:	b005      	add	sp, #20
 8028544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028548:	4718      	bx	r3
 802854a:	b005      	add	sp, #20
 802854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ExchangeMtuRequestEvent:

08028550 <ExchangeMtuRequestEvent>:
 8028550:	b538      	push	{r3, r4, r5, lr}
 8028552:	4605      	mov	r5, r0
 8028554:	2004      	movs	r0, #4
 8028556:	460c      	mov	r4, r1
 8028558:	2a03      	cmp	r2, #3
 802855a:	d006      	beq.n	802856a <ExchangeMtuRequestEvent+0x1a>
 802855c:	2300      	movs	r3, #0
 802855e:	2202      	movs	r2, #2
 8028560:	9000      	str	r0, [sp, #0]
 8028562:	4628      	mov	r0, r5
 8028564:	f000 fcbd 	bl	8028ee2 <GATTErrorResponsePDU>
 8028568:	bd38      	pop	{r3, r4, r5, pc}
 802856a:	7921      	ldrb	r1, [r4, #4]
 802856c:	bb19      	cbnz	r1, 80285b6 <ExchangeMtuRequestEvent+0x66>
 802856e:	8968      	ldrh	r0, [r5, #10]
 8028570:	2817      	cmp	r0, #23
 8028572:	d91f      	bls.n	80285b4 <ExchangeMtuRequestEvent+0x64>
 8028574:	f8b3 0001 	ldrh.w	r0, [r3, #1]
 8028578:	81a0      	strh	r0, [r4, #12]
 802857a:	8969      	ldrh	r1, [r5, #10]
 802857c:	4288      	cmp	r0, r1
 802857e:	d900      	bls.n	8028582 <ExchangeMtuRequestEvent+0x32>
 8028580:	81a1      	strh	r1, [r4, #12]
 8028582:	68e9      	ldr	r1, [r5, #12]
 8028584:	2003      	movs	r0, #3
 8028586:	2303      	movs	r3, #3
 8028588:	f801 0f0c 	strb.w	r0, [r1, #12]!
 802858c:	7b20      	ldrb	r0, [r4, #12]
 802858e:	7048      	strb	r0, [r1, #1]
 8028590:	89a0      	ldrh	r0, [r4, #12]
 8028592:	2200      	movs	r2, #0
 8028594:	0a00      	lsrs	r0, r0, #8
 8028596:	7088      	strb	r0, [r1, #2]
 8028598:	9100      	str	r1, [sp, #0]
 802859a:	4621      	mov	r1, r4
 802859c:	4628      	mov	r0, r5
 802859e:	f001 fd8b 	bl	802a0b8 <L2CAPSendPDU>
 80285a2:	b001      	add	sp, #4
 80285a4:	4621      	mov	r1, r4
 80285a6:	4628      	mov	r0, r5
 80285a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80285ac:	2300      	movs	r3, #0
 80285ae:	2204      	movs	r2, #4
 80285b0:	f000 b9f5 	b.w	802899e <FormatAndDispatchConnectionEvent>
 80285b4:	2006      	movs	r0, #6
 80285b6:	2300      	movs	r3, #0
 80285b8:	2202      	movs	r2, #2
 80285ba:	4621      	mov	r1, r4
 80285bc:	9000      	str	r0, [sp, #0]
 80285be:	e7d0      	b.n	8028562 <ExchangeMtuRequestEvent+0x12>

Disassembly of section i.ExchangeMtuRequestResponseEvent:

080285c0 <ExchangeMtuRequestResponseEvent>:
 80285c0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80285c2:	4606      	mov	r6, r0
 80285c4:	9806      	ldr	r0, [sp, #24]
 80285c6:	4614      	mov	r4, r2
 80285c8:	460d      	mov	r5, r1
 80285ca:	2b03      	cmp	r3, #3
 80285cc:	d120      	bne.n	8028610 <ExchangeMtuRequestResponseEvent+0x50>
 80285ce:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 80285d2:	2817      	cmp	r0, #23
 80285d4:	d913      	bls.n	80285fe <ExchangeMtuRequestResponseEvent+0x3e>
 80285d6:	89a1      	ldrh	r1, [r4, #12]
 80285d8:	81a9      	strh	r1, [r5, #12]
 80285da:	4281      	cmp	r1, r0
 80285dc:	d900      	bls.n	80285e0 <ExchangeMtuRequestResponseEvent+0x20>
 80285de:	81a8      	strh	r0, [r5, #12]
 80285e0:	2100      	movs	r1, #0
 80285e2:	89a8      	ldrh	r0, [r5, #12]
 80285e4:	e9cd 0100 	strd	r0, r1, [sp]
 80285e8:	230d      	movs	r3, #13
 80285ea:	4629      	mov	r1, r5
 80285ec:	4630      	mov	r0, r6
 80285ee:	f000 fb17 	bl	8028c20 <FormatClientEventWordPointer>
 80285f2:	0001      	movs	r1, r0
 80285f4:	d003      	beq.n	80285fe <ExchangeMtuRequestResponseEvent+0x3e>
 80285f6:	69a3      	ldr	r3, [r4, #24]
 80285f8:	6a22      	ldr	r2, [r4, #32]
 80285fa:	6830      	ldr	r0, [r6, #0]
 80285fc:	4798      	blx	r3
 80285fe:	b002      	add	sp, #8
 8028600:	4629      	mov	r1, r5
 8028602:	4630      	mov	r0, r6
 8028604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028608:	2300      	movs	r3, #0
 802860a:	2204      	movs	r2, #4
 802860c:	f000 b9c7 	b.w	802899e <FormatAndDispatchConnectionEvent>
 8028610:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.ExecuteWriteConfirmationEventHandler:

08028612 <ExecuteWriteConfirmationEventHandler>:
 8028612:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028616:	b084      	sub	sp, #16
 8028618:	4606      	mov	r6, r0
 802861a:	9805      	ldr	r0, [sp, #20]
 802861c:	4611      	mov	r1, r2
 802861e:	3010      	adds	r0, #16
 8028620:	f7ff fdf0 	bl	8028204 <DeleteTransactionInfoEntry>
 8028624:	ea5f 0800 	movs.w	r8, r0
 8028628:	d059      	beq.n	80286de <ExecuteWriteConfirmationEventHandler+0xcc>
 802862a:	2500      	movs	r5, #0
 802862c:	462c      	mov	r4, r5
 802862e:	462f      	mov	r7, r5
 8028630:	f106 0b34 	add.w	fp, r6, #52	; 0x34
 8028634:	46a9      	mov	r9, r5
 8028636:	f108 0a14 	add.w	sl, r8, #20
 802863a:	e00e      	b.n	802865a <ExecuteWriteConfirmationEventHandler+0x48>
 802863c:	4658      	mov	r0, fp
 802863e:	68a9      	ldr	r1, [r5, #8]
 8028640:	f002 f968 	bl	802a914 <SearchServiceInfoEntry>
 8028644:	b130      	cbz	r0, 8028654 <ExecuteWriteConfirmationEventHandler+0x42>
 8028646:	f8c0 9010 	str.w	r9, [r0, #16]
 802864a:	7868      	ldrb	r0, [r5, #1]
 802864c:	b128      	cbz	r0, 802865a <ExecuteWriteConfirmationEventHandler+0x48>
 802864e:	b924      	cbnz	r4, 802865a <ExecuteWriteConfirmationEventHandler+0x48>
 8028650:	4604      	mov	r4, r0
 8028652:	e001      	b.n	8028658 <ExecuteWriteConfirmationEventHandler+0x46>
 8028654:	b90c      	cbnz	r4, 802865a <ExecuteWriteConfirmationEventHandler+0x48>
 8028656:	240e      	movs	r4, #14
 8028658:	89af      	ldrh	r7, [r5, #12]
 802865a:	4629      	mov	r1, r5
 802865c:	4650      	mov	r0, sl
 802865e:	f001 fbc7 	bl	8029df0 <GetNextHandleInfoEntry>
 8028662:	0005      	movs	r5, r0
 8028664:	d1ea      	bne.n	802863c <ExecuteWriteConfirmationEventHandler+0x2a>
 8028666:	b154      	cbz	r4, 802867e <ExecuteWriteConfirmationEventHandler+0x6c>
 8028668:	9400      	str	r4, [sp, #0]
 802866a:	463b      	mov	r3, r7
 802866c:	2218      	movs	r2, #24
 802866e:	4630      	mov	r0, r6
 8028670:	9905      	ldr	r1, [sp, #20]
 8028672:	f000 fc36 	bl	8028ee2 <GATTErrorResponsePDU>
 8028676:	2001      	movs	r0, #1
 8028678:	f88d 0008 	strb.w	r0, [sp, #8]
 802867c:	e026      	b.n	80286cc <ExecuteWriteConfirmationEventHandler+0xba>
 802867e:	68f1      	ldr	r1, [r6, #12]
 8028680:	2019      	movs	r0, #25
 8028682:	2301      	movs	r3, #1
 8028684:	7308      	strb	r0, [r1, #12]
 8028686:	68f0      	ldr	r0, [r6, #12]
 8028688:	2200      	movs	r2, #0
 802868a:	300c      	adds	r0, #12
 802868c:	9000      	str	r0, [sp, #0]
 802868e:	4630      	mov	r0, r6
 8028690:	9905      	ldr	r1, [sp, #20]
 8028692:	f001 fd11 	bl	802a0b8 <L2CAPSendPDU>
 8028696:	2000      	movs	r0, #0
 8028698:	e7ee      	b.n	8028678 <ExecuteWriteConfirmationEventHandler+0x66>
 802869a:	4658      	mov	r0, fp
 802869c:	68a9      	ldr	r1, [r5, #8]
 802869e:	f002 f939 	bl	802a914 <SearchServiceInfoEntry>
 80286a2:	0004      	movs	r4, r0
 80286a4:	d012      	beq.n	80286cc <ExecuteWriteConfirmationEventHandler+0xba>
 80286a6:	6920      	ldr	r0, [r4, #16]
 80286a8:	b980      	cbnz	r0, 80286cc <ExecuteWriteConfirmationEventHandler+0xba>
 80286aa:	2001      	movs	r0, #1
 80286ac:	6120      	str	r0, [r4, #16]
 80286ae:	a802      	add	r0, sp, #8
 80286b0:	e9cd 4000 	strd	r4, r0, [sp]
 80286b4:	2306      	movs	r3, #6
 80286b6:	4642      	mov	r2, r8
 80286b8:	4630      	mov	r0, r6
 80286ba:	9905      	ldr	r1, [sp, #20]
 80286bc:	f000 fb01 	bl	8028cc2 <FormatServerEventIntegerByte>
 80286c0:	0001      	movs	r1, r0
 80286c2:	d003      	beq.n	80286cc <ExecuteWriteConfirmationEventHandler+0xba>
 80286c4:	69a3      	ldr	r3, [r4, #24]
 80286c6:	69e2      	ldr	r2, [r4, #28]
 80286c8:	6830      	ldr	r0, [r6, #0]
 80286ca:	4798      	blx	r3
 80286cc:	4629      	mov	r1, r5
 80286ce:	4650      	mov	r0, sl
 80286d0:	f001 fb8e 	bl	8029df0 <GetNextHandleInfoEntry>
 80286d4:	0005      	movs	r5, r0
 80286d6:	d1e0      	bne.n	802869a <ExecuteWriteConfirmationEventHandler+0x88>
 80286d8:	4640      	mov	r0, r8
 80286da:	f000 fbe5 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 80286de:	b007      	add	sp, #28
 80286e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ExecuteWriteRequestEvent:

080286e4 <ExecuteWriteRequestEvent>:
 80286e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286e8:	2404      	movs	r4, #4
 80286ea:	4699      	mov	r9, r3
 80286ec:	4688      	mov	r8, r1
 80286ee:	4682      	mov	sl, r0
 80286f0:	2a02      	cmp	r2, #2
 80286f2:	d003      	beq.n	80286fc <ExecuteWriteRequestEvent+0x18>
 80286f4:	2300      	movs	r3, #0
 80286f6:	2218      	movs	r2, #24
 80286f8:	9400      	str	r4, [sp, #0]
 80286fa:	e033      	b.n	8028764 <ExecuteWriteRequestEvent+0x80>
 80286fc:	4608      	mov	r0, r1
 80286fe:	f002 fb0a 	bl	802ad16 <VerifyNoOutstandingServerRequests>
 8028702:	b348      	cbz	r0, 8028758 <ExecuteWriteRequestEvent+0x74>
 8028704:	210e      	movs	r1, #14
 8028706:	f108 0010 	add.w	r0, r8, #16
 802870a:	f002 f927 	bl	802a95c <SearchTransactionInfoEntryByType>
 802870e:	b308      	cbz	r0, 8028754 <ExecuteWriteRequestEvent+0x70>
 8028710:	210d      	movs	r1, #13
 8028712:	2400      	movs	r4, #0
 8028714:	7201      	strb	r1, [r0, #8]
 8028716:	f10a 0734 	add.w	r7, sl, #52	; 0x34
 802871a:	4625      	mov	r5, r4
 802871c:	f100 0614 	add.w	r6, r0, #20
 8028720:	e005      	b.n	802872e <ExecuteWriteRequestEvent+0x4a>
 8028722:	4638      	mov	r0, r7
 8028724:	68a1      	ldr	r1, [r4, #8]
 8028726:	f002 f8f5 	bl	802a914 <SearchServiceInfoEntry>
 802872a:	b100      	cbz	r0, 802872e <ExecuteWriteRequestEvent+0x4a>
 802872c:	6105      	str	r5, [r0, #16]
 802872e:	4621      	mov	r1, r4
 8028730:	4630      	mov	r0, r6
 8028732:	f001 fb5d 	bl	8029df0 <GetNextHandleInfoEntry>
 8028736:	0004      	movs	r4, r0
 8028738:	d1f3      	bne.n	8028722 <ExecuteWriteRequestEvent+0x3e>
 802873a:	f899 0001 	ldrb.w	r0, [r9, #1]
 802873e:	07c0      	lsls	r0, r0, #31
 8028740:	d006      	beq.n	8028750 <ExecuteWriteRequestEvent+0x6c>
 8028742:	2200      	movs	r2, #0
 8028744:	4641      	mov	r1, r8
 8028746:	4650      	mov	r0, sl
 8028748:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802874c:	f000 b80e 	b.w	802876c <ExecuteWriteRequestEventHandler>
 8028750:	2201      	movs	r2, #1
 8028752:	e7f7      	b.n	8028744 <ExecuteWriteRequestEvent+0x60>
 8028754:	9400      	str	r4, [sp, #0]
 8028756:	e001      	b.n	802875c <ExecuteWriteRequestEvent+0x78>
 8028758:	200e      	movs	r0, #14
 802875a:	9000      	str	r0, [sp, #0]
 802875c:	2300      	movs	r3, #0
 802875e:	2218      	movs	r2, #24
 8028760:	4641      	mov	r1, r8
 8028762:	4650      	mov	r0, sl
 8028764:	f000 fbbd 	bl	8028ee2 <GATTErrorResponsePDU>
 8028768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ExecuteWriteRequestEventHandler:

0802876c <ExecuteWriteRequestEventHandler>:
 802876c:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8028770:	468b      	mov	fp, r1
 8028772:	4681      	mov	r9, r0
 8028774:	f10b 0010 	add.w	r0, fp, #16
 8028778:	4690      	mov	r8, r2
 802877a:	210d      	movs	r1, #13
 802877c:	4604      	mov	r4, r0
 802877e:	f002 f8ed 	bl	802a95c <SearchTransactionInfoEntryByType>
 8028782:	0007      	movs	r7, r0
 8028784:	d05c      	beq.n	8028840 <ExecuteWriteRequestEventHandler+0xd4>
 8028786:	f1b8 0f00 	cmp.w	r8, #0
 802878a:	d005      	beq.n	8028798 <ExecuteWriteRequestEventHandler+0x2c>
 802878c:	4620      	mov	r0, r4
 802878e:	6839      	ldr	r1, [r7, #0]
 8028790:	f7ff fd38 	bl	8028204 <DeleteTransactionInfoEntry>
 8028794:	0007      	movs	r7, r0
 8028796:	d01a      	beq.n	80287ce <ExecuteWriteRequestEventHandler+0x62>
 8028798:	2400      	movs	r4, #0
 802879a:	4626      	mov	r6, r4
 802879c:	f107 0a14 	add.w	sl, r7, #20
 80287a0:	e00f      	b.n	80287c2 <ExecuteWriteRequestEventHandler+0x56>
 80287a2:	7820      	ldrb	r0, [r4, #0]
 80287a4:	0780      	lsls	r0, r0, #30
 80287a6:	d40c      	bmi.n	80287c2 <ExecuteWriteRequestEventHandler+0x56>
 80287a8:	f109 0034 	add.w	r0, r9, #52	; 0x34
 80287ac:	68a1      	ldr	r1, [r4, #8]
 80287ae:	f002 f8b1 	bl	802a914 <SearchServiceInfoEntry>
 80287b2:	0005      	movs	r5, r0
 80287b4:	d005      	beq.n	80287c2 <ExecuteWriteRequestEventHandler+0x56>
 80287b6:	6928      	ldr	r0, [r5, #16]
 80287b8:	b308      	cbz	r0, 80287fe <ExecuteWriteRequestEventHandler+0x92>
 80287ba:	7820      	ldrb	r0, [r4, #0]
 80287bc:	f040 0002 	orr.w	r0, r0, #2
 80287c0:	7020      	strb	r0, [r4, #0]
 80287c2:	4621      	mov	r1, r4
 80287c4:	4650      	mov	r0, sl
 80287c6:	f001 fb13 	bl	8029df0 <GetNextHandleInfoEntry>
 80287ca:	0004      	movs	r4, r0
 80287cc:	d1e9      	bne.n	80287a2 <ExecuteWriteRequestEventHandler+0x36>
 80287ce:	f1b8 0f00 	cmp.w	r8, #0
 80287d2:	d035      	beq.n	8028840 <ExecuteWriteRequestEventHandler+0xd4>
 80287d4:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80287d8:	2119      	movs	r1, #25
 80287da:	2301      	movs	r3, #1
 80287dc:	7301      	strb	r1, [r0, #12]
 80287de:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80287e2:	2200      	movs	r2, #0
 80287e4:	300c      	adds	r0, #12
 80287e6:	9000      	str	r0, [sp, #0]
 80287e8:	4659      	mov	r1, fp
 80287ea:	4648      	mov	r0, r9
 80287ec:	f001 fc64 	bl	802a0b8 <L2CAPSendPDU>
 80287f0:	2f00      	cmp	r7, #0
 80287f2:	d025      	beq.n	8028840 <ExecuteWriteRequestEventHandler+0xd4>
 80287f4:	4638      	mov	r0, r7
 80287f6:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80287fa:	f000 bb55 	b.w	8028ea8 <FreeTransactionInfoEntryMemory>
 80287fe:	b116      	cbz	r6, 8028806 <ExecuteWriteRequestEventHandler+0x9a>
 8028800:	f1b8 0f00 	cmp.w	r8, #0
 8028804:	d0dd      	beq.n	80287c2 <ExecuteWriteRequestEventHandler+0x56>
 8028806:	2001      	movs	r0, #1
 8028808:	6128      	str	r0, [r5, #16]
 802880a:	7820      	ldrb	r0, [r4, #0]
 802880c:	2305      	movs	r3, #5
 802880e:	f040 0002 	orr.w	r0, r0, #2
 8028812:	7020      	strb	r0, [r4, #0]
 8028814:	2000      	movs	r0, #0
 8028816:	e9cd 5000 	strd	r5, r0, [sp]
 802881a:	463a      	mov	r2, r7
 802881c:	4659      	mov	r1, fp
 802881e:	4648      	mov	r0, r9
 8028820:	1c76      	adds	r6, r6, #1
 8028822:	f000 fa4e 	bl	8028cc2 <FormatServerEventIntegerByte>
 8028826:	0001      	movs	r1, r0
 8028828:	d0cb      	beq.n	80287c2 <ExecuteWriteRequestEventHandler+0x56>
 802882a:	2018      	movs	r0, #24
 802882c:	8048      	strh	r0, [r1, #2]
 802882e:	684a      	ldr	r2, [r1, #4]
 8028830:	f882 8014 	strb.w	r8, [r2, #20]
 8028834:	69ab      	ldr	r3, [r5, #24]
 8028836:	69ea      	ldr	r2, [r5, #28]
 8028838:	f8d9 0000 	ldr.w	r0, [r9]
 802883c:	4798      	blx	r3
 802883e:	e7c0      	b.n	80287c2 <ExecuteWriteRequestEventHandler+0x56>
 8028840:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

Disassembly of section i.ExecuteWriteRequestResponse:

08028844 <ExecuteWriteRequestResponse>:
 8028844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028848:	468b      	mov	fp, r1
 802884a:	2100      	movs	r1, #0
 802884c:	4699      	mov	r9, r3
 802884e:	4616      	mov	r6, r2
 8028850:	4682      	mov	sl, r0
 8028852:	460c      	mov	r4, r1
 8028854:	460d      	mov	r5, r1
 8028856:	f102 0814 	add.w	r8, r2, #20
 802885a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802885c:	e00f      	b.n	802887e <ExecuteWriteRequestResponse+0x3a>
 802885e:	7808      	ldrb	r0, [r1, #0]
 8028860:	07c2      	lsls	r2, r0, #31
 8028862:	d10c      	bne.n	802887e <ExecuteWriteRequestResponse+0x3a>
 8028864:	ea54 0205 	orrs.w	r2, r4, r5
 8028868:	f104 0401 	add.w	r4, r4, #1
 802886c:	d01f      	beq.n	80288ae <ExecuteWriteRequestResponse+0x6a>
 802886e:	68aa      	ldr	r2, [r5, #8]
 8028870:	688b      	ldr	r3, [r1, #8]
 8028872:	429a      	cmp	r2, r3
 8028874:	d103      	bne.n	802887e <ExecuteWriteRequestResponse+0x3a>
 8028876:	f040 0001 	orr.w	r0, r0, #1
 802887a:	7008      	strb	r0, [r1, #0]
 802887c:	1e64      	subs	r4, r4, #1
 802887e:	4640      	mov	r0, r8
 8028880:	f001 fab6 	bl	8029df0 <GetNextHandleInfoEntry>
 8028884:	0001      	movs	r1, r0
 8028886:	d1ea      	bne.n	802885e <ExecuteWriteRequestResponse+0x1a>
 8028888:	b355      	cbz	r5, 80288e0 <ExecuteWriteRequestResponse+0x9c>
 802888a:	f10a 0034 	add.w	r0, sl, #52	; 0x34
 802888e:	68a9      	ldr	r1, [r5, #8]
 8028890:	f002 f840 	bl	802a914 <SearchServiceInfoEntry>
 8028894:	b310      	cbz	r0, 80288dc <ExecuteWriteRequestResponse+0x98>
 8028896:	2500      	movs	r5, #0
 8028898:	b15f      	cbz	r7, 80288b2 <ExecuteWriteRequestResponse+0x6e>
 802889a:	8981      	ldrh	r1, [r0, #12]
 802889c:	eb01 0009 	add.w	r0, r1, r9
 80288a0:	b281      	uxth	r1, r0
 80288a2:	4640      	mov	r0, r8
 80288a4:	f002 f818 	bl	802a8d8 <SearchHandleInfoEntry>
 80288a8:	b118      	cbz	r0, 80288b2 <ExecuteWriteRequestResponse+0x6e>
 80288aa:	7047      	strb	r7, [r0, #1]
 80288ac:	e007      	b.n	80288be <ExecuteWriteRequestResponse+0x7a>
 80288ae:	460d      	mov	r5, r1
 80288b0:	e7e1      	b.n	8028876 <ExecuteWriteRequestResponse+0x32>
 80288b2:	b124      	cbz	r4, 80288be <ExecuteWriteRequestResponse+0x7a>
 80288b4:	9500      	str	r5, [sp, #0]
 80288b6:	2300      	movs	r3, #0
 80288b8:	2201      	movs	r2, #1
 80288ba:	6831      	ldr	r1, [r6, #0]
 80288bc:	e003      	b.n	80288c6 <ExecuteWriteRequestResponse+0x82>
 80288be:	9500      	str	r5, [sp, #0]
 80288c0:	2300      	movs	r3, #0
 80288c2:	6831      	ldr	r1, [r6, #0]
 80288c4:	2202      	movs	r2, #2
 80288c6:	4650      	mov	r0, sl
 80288c8:	f001 ffa2 	bl	802a810 <ScheduleAsynchronousDispatch>
 80288cc:	0004      	movs	r4, r0
 80288ce:	d009      	beq.n	80288e4 <ExecuteWriteRequestResponse+0xa0>
 80288d0:	f10b 0010 	add.w	r0, fp, #16
 80288d4:	6831      	ldr	r1, [r6, #0]
 80288d6:	f7ff fc6f 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 80288da:	e003      	b.n	80288e4 <ExecuteWriteRequestResponse+0xa0>
 80288dc:	4c03      	ldr	r4, [pc, #12]	; (80288ec <ExecuteWriteRequestResponse+0xa8>)
 80288de:	e001      	b.n	80288e4 <ExecuteWriteRequestResponse+0xa0>
 80288e0:	4c02      	ldr	r4, [pc, #8]	; (80288ec <ExecuteWriteRequestResponse+0xa8>)
 80288e2:	1fa4      	subs	r4, r4, #6
 80288e4:	4620      	mov	r0, r4
 80288e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288ea:	0000      	.short	0x0000
 80288ec:	fffffc18 	.word	0xfffffc18

Disassembly of section i.FindIncludedServicesResponseEvent:

080288f0 <FindIncludedServicesResponseEvent>:
 80288f0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288f4:	b083      	sub	sp, #12
 80288f6:	460c      	mov	r4, r1
 80288f8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80288fa:	4692      	mov	sl, r2
 80288fc:	7878      	ldrb	r0, [r7, #1]
 80288fe:	1c81      	adds	r1, r0, #2
 8028900:	4299      	cmp	r1, r3
 8028902:	d849      	bhi.n	8028998 <FindIncludedServicesResponseEvent+0xa8>
 8028904:	1e9b      	subs	r3, r3, #2
 8028906:	fbb3 f1f0 	udiv	r1, r3, r0
 802890a:	fb00 3111 	mls	r1, r0, r1, r3
 802890e:	2900      	cmp	r1, #0
 8028910:	d142      	bne.n	8028998 <FindIncludedServicesResponseEvent+0xa8>
 8028912:	fbb3 f6f0 	udiv	r6, r3, r0
 8028916:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 802891a:	00c0      	lsls	r0, r0, #3
 802891c:	f7ea fd4e 	bl	80133bc <BTPS_AllocateMemory>
 8028920:	ea5f 0800 	movs.w	r8, r0
 8028924:	d038      	beq.n	8028998 <FindIncludedServicesResponseEvent+0xa8>
 8028926:	b2b1      	uxth	r1, r6
 8028928:	e9cd 1800 	strd	r1, r8, [sp]
 802892c:	2303      	movs	r3, #3
 802892e:	4652      	mov	r2, sl
 8028930:	4621      	mov	r1, r4
 8028932:	9803      	ldr	r0, [sp, #12]
 8028934:	f000 f974 	bl	8028c20 <FormatClientEventWordPointer>
 8028938:	ea5f 0900 	movs.w	r9, r0
 802893c:	d026      	beq.n	802898c <FindIncludedServicesResponseEvent+0x9c>
 802893e:	4644      	mov	r4, r8
 8028940:	1cbd      	adds	r5, r7, #2
 8028942:	f04f 0b00 	mov.w	fp, #0
 8028946:	e017      	b.n	8028978 <FindIncludedServicesResponseEvent+0x88>
 8028948:	8828      	ldrh	r0, [r5, #0]
 802894a:	8020      	strh	r0, [r4, #0]
 802894c:	8868      	ldrh	r0, [r5, #2]
 802894e:	8060      	strh	r0, [r4, #2]
 8028950:	88a8      	ldrh	r0, [r5, #4]
 8028952:	80a0      	strh	r0, [r4, #4]
 8028954:	f884 b006 	strb.w	fp, [r4, #6]
 8028958:	7879      	ldrb	r1, [r7, #1]
 802895a:	4658      	mov	r0, fp
 802895c:	2908      	cmp	r1, #8
 802895e:	d108      	bne.n	8028972 <FindIncludedServicesResponseEvent+0x82>
 8028960:	2101      	movs	r1, #1
 8028962:	71a1      	strb	r1, [r4, #6]
 8028964:	71e0      	strb	r0, [r4, #7]
 8028966:	2202      	movs	r2, #2
 8028968:	1da9      	adds	r1, r5, #6
 802896a:	f104 0008 	add.w	r0, r4, #8
 802896e:	f7ea fda2 	bl	80134b6 <BTPS_MemCopy>
 8028972:	7878      	ldrb	r0, [r7, #1]
 8028974:	3418      	adds	r4, #24
 8028976:	4405      	add	r5, r0
 8028978:	1e76      	subs	r6, r6, #1
 802897a:	d2e5      	bcs.n	8028948 <FindIncludedServicesResponseEvent+0x58>
 802897c:	9803      	ldr	r0, [sp, #12]
 802897e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8028982:	f8da 2020 	ldr.w	r2, [sl, #32]
 8028986:	6800      	ldr	r0, [r0, #0]
 8028988:	4649      	mov	r1, r9
 802898a:	4798      	blx	r3
 802898c:	b007      	add	sp, #28
 802898e:	4640      	mov	r0, r8
 8028990:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028994:	f7ea bd2c 	b.w	80133f0 <BTPS_FreeMemory>
 8028998:	b007      	add	sp, #28
 802899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.FormatAndDispatchConnectionEvent:

0802899e <FormatAndDispatchConnectionEvent>:
 802899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80289a2:	2700      	movs	r7, #0
 80289a4:	460e      	mov	r6, r1
 80289a6:	4605      	mov	r5, r0
 80289a8:	f101 030c 	add.w	r3, r1, #12
 80289ac:	2a01      	cmp	r2, #1
 80289ae:	d00f      	beq.n	80289d0 <FormatAndDispatchConnectionEvent+0x32>
 80289b0:	2a03      	cmp	r2, #3
 80289b2:	d017      	beq.n	80289e4 <FormatAndDispatchConnectionEvent+0x46>
 80289b4:	2a04      	cmp	r2, #4
 80289b6:	d038      	beq.n	8028a2a <FormatAndDispatchConnectionEvent+0x8c>
 80289b8:	2a0a      	cmp	r2, #10
 80289ba:	d140      	bne.n	8028a3e <FormatAndDispatchConnectionEvent+0xa0>
 80289bc:	2300      	movs	r3, #0
 80289be:	f000 f94f 	bl	8028c60 <FormatConnectionEventWord>
 80289c2:	4604      	mov	r4, r0
 80289c4:	4601      	mov	r1, r0
 80289c6:	4628      	mov	r0, r5
 80289c8:	f7ff fd10 	bl	80283ec <DispatchConnectionEvent>
 80289cc:	2009      	movs	r0, #9
 80289ce:	e01b      	b.n	8028a08 <FormatAndDispatchConnectionEvent+0x6a>
 80289d0:	2201      	movs	r2, #1
 80289d2:	f000 f945 	bl	8028c60 <FormatConnectionEventWord>
 80289d6:	4604      	mov	r4, r0
 80289d8:	4601      	mov	r1, r0
 80289da:	4628      	mov	r0, r5
 80289dc:	f7ff fd06 	bl	80283ec <DispatchConnectionEvent>
 80289e0:	2000      	movs	r0, #0
 80289e2:	e011      	b.n	8028a08 <FormatAndDispatchConnectionEvent+0x6a>
 80289e4:	2300      	movs	r3, #0
 80289e6:	2203      	movs	r2, #3
 80289e8:	f000 f93a 	bl	8028c60 <FormatConnectionEventWord>
 80289ec:	4604      	mov	r4, r0
 80289ee:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80289f2:	6831      	ldr	r1, [r6, #0]
 80289f4:	f7ff fbfc 	bl	80281f0 <DeleteServiceDiscoveryInfoEntry>
 80289f8:	b108      	cbz	r0, 80289fe <FormatAndDispatchConnectionEvent+0x60>
 80289fa:	f000 fa34 	bl	8028e66 <FreeServiceDiscoveryInfoEntryMemory>
 80289fe:	4621      	mov	r1, r4
 8028a00:	4628      	mov	r0, r5
 8028a02:	f7ff fcf3 	bl	80283ec <DispatchConnectionEvent>
 8028a06:	2001      	movs	r0, #1
 8028a08:	7020      	strb	r0, [r4, #0]
 8028a0a:	2c00      	cmp	r4, #0
 8028a0c:	d017      	beq.n	8028a3e <FormatAndDispatchConnectionEvent+0xa0>
 8028a0e:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8028a12:	4639      	mov	r1, r7
 8028a14:	4630      	mov	r0, r6
 8028a16:	f001 f9f0 	bl	8029dfa <GetNextServiceInfoEntry>
 8028a1a:	0007      	movs	r7, r0
 8028a1c:	d00f      	beq.n	8028a3e <FormatAndDispatchConnectionEvent+0xa0>
 8028a1e:	69bb      	ldr	r3, [r7, #24]
 8028a20:	69fa      	ldr	r2, [r7, #28]
 8028a22:	6828      	ldr	r0, [r5, #0]
 8028a24:	4621      	mov	r1, r4
 8028a26:	4798      	blx	r3
 8028a28:	e7f3      	b.n	8028a12 <FormatAndDispatchConnectionEvent+0x74>
 8028a2a:	2204      	movs	r2, #4
 8028a2c:	f000 f918 	bl	8028c60 <FormatConnectionEventWord>
 8028a30:	4604      	mov	r4, r0
 8028a32:	4601      	mov	r1, r0
 8028a34:	4628      	mov	r0, r5
 8028a36:	f7ff fcd9 	bl	80283ec <DispatchConnectionEvent>
 8028a3a:	2008      	movs	r0, #8
 8028a3c:	e7e4      	b.n	8028a08 <FormatAndDispatchConnectionEvent+0x6a>
 8028a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FormatAndDispatchDiscoveryCallback:

08028a42 <FormatAndDispatchDiscoveryCallback>:
 8028a42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a46:	4689      	mov	r9, r1
 8028a48:	f101 0014 	add.w	r0, r1, #20
 8028a4c:	b092      	sub	sp, #72	; 0x48
 8028a4e:	8a51      	ldrh	r1, [r2, #18]
 8028a50:	f8ad 1004 	strh.w	r1, [sp, #4]
 8028a54:	9000      	str	r0, [sp, #0]
 8028a56:	232c      	movs	r3, #44	; 0x2c
 8028a58:	2212      	movs	r2, #18
 8028a5a:	a901      	add	r1, sp, #4
 8028a5c:	2003      	movs	r0, #3
 8028a5e:	f7f0 f88d 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8028a62:	0007      	movs	r7, r0
 8028a64:	d075      	beq.n	8028b52 <FormatAndDispatchDiscoveryCallback+0x110>
 8028a66:	8a78      	ldrh	r0, [r7, #18]
 8028a68:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8028a6c:	f04f 0a00 	mov.w	sl, #0
 8028a70:	f109 0110 	add.w	r1, r9, #16
 8028a74:	2204      	movs	r2, #4
 8028a76:	e9cd 2100 	strd	r2, r1, [sp]
 8028a7a:	a810      	add	r0, sp, #64	; 0x40
 8028a7c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8028a80:	2308      	movs	r3, #8
 8028a82:	9002      	str	r0, [sp, #8]
 8028a84:	4654      	mov	r4, sl
 8028a86:	4652      	mov	r2, sl
 8028a88:	2103      	movs	r1, #3
 8028a8a:	4618      	mov	r0, r3
 8028a8c:	f7ef ffda 	bl	8018a44 <BSC_AddGenericListEntry>
 8028a90:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
 8028a94:	202c      	movs	r0, #44	; 0x2c
 8028a96:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8028a9a:	a803      	add	r0, sp, #12
 8028a9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8028a9e:	f8d9 0000 	ldr.w	r0, [r9]
 8028aa2:	9003      	str	r0, [sp, #12]
 8028aa4:	2211      	movs	r2, #17
 8028aa6:	4639      	mov	r1, r7
 8028aa8:	a805      	add	r0, sp, #20
 8028aaa:	f7eb f96a 	bl	8013d82 <__aeabi_memcpy>
 8028aae:	8a78      	ldrh	r0, [r7, #18]
 8028ab0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8028ab4:	8ab8      	ldrh	r0, [r7, #20]
 8028ab6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8028aba:	6a38      	ldr	r0, [r7, #32]
 8028abc:	e9cd 040c 	strd	r0, r4, [sp, #48]	; 0x30
 8028ac0:	69b8      	ldr	r0, [r7, #24]
 8028ac2:	e9cd 040a 	strd	r0, r4, [sp, #40]	; 0x28
 8028ac6:	69b8      	ldr	r0, [r7, #24]
 8028ac8:	2116      	movs	r1, #22
 8028aca:	4348      	muls	r0, r1
 8028acc:	6a39      	ldr	r1, [r7, #32]
 8028ace:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8028ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8028ad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8028ad8:	eb11 0080 	adds.w	r0, r1, r0, lsl #2
 8028adc:	d05b      	beq.n	8028b96 <FormatAndDispatchDiscoveryCallback+0x154>
 8028ade:	f7ea fc6d 	bl	80133bc <BTPS_AllocateMemory>
 8028ae2:	ea5f 0b00 	movs.w	fp, r0
 8028ae6:	d056      	beq.n	8028b96 <FormatAndDispatchDiscoveryCallback+0x154>
 8028ae8:	4606      	mov	r6, r0
 8028aea:	69b8      	ldr	r0, [r7, #24]
 8028aec:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8028af0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8028af4:	eb06 0441 	add.w	r4, r6, r1, lsl #1
 8028af8:	6a39      	ldr	r1, [r7, #32]
 8028afa:	eb04 1541 	add.w	r5, r4, r1, lsl #5
 8028afe:	b100      	cbz	r0, 8028b02 <FormatAndDispatchDiscoveryCallback+0xc0>
 8028b00:	4658      	mov	r0, fp
 8028b02:	940d      	str	r4, [sp, #52]	; 0x34
 8028b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8028b06:	69f8      	ldr	r0, [r7, #28]
 8028b08:	e00e      	b.n	8028b28 <FormatAndDispatchDiscoveryCallback+0xe6>
 8028b0a:	4601      	mov	r1, r0
 8028b0c:	2211      	movs	r2, #17
 8028b0e:	1d30      	adds	r0, r6, #4
 8028b10:	f7eb f937 	bl	8013d82 <__aeabi_memcpy>
 8028b14:	f8b8 0014 	ldrh.w	r0, [r8, #20]
 8028b18:	f826 0b02 	strh.w	r0, [r6], #2
 8028b1c:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 8028b20:	f826 0b14 	strh.w	r0, [r6], #20
 8028b24:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8028b28:	ea5f 0800 	movs.w	r8, r0
 8028b2c:	4640      	mov	r0, r8
 8028b2e:	d1ec      	bne.n	8028b0a <FormatAndDispatchDiscoveryCallback+0xc8>
 8028b30:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8028b32:	e022      	b.n	8028b7a <FormatAndDispatchDiscoveryCallback+0x138>
 8028b34:	2211      	movs	r2, #17
 8028b36:	4631      	mov	r1, r6
 8028b38:	4620      	mov	r0, r4
 8028b3a:	f7eb f922 	bl	8013d82 <__aeabi_memcpy>
 8028b3e:	8ab0      	ldrh	r0, [r6, #20]
 8028b40:	8260      	strh	r0, [r4, #18]
 8028b42:	7db0      	ldrb	r0, [r6, #22]
 8028b44:	7520      	strb	r0, [r4, #20]
 8028b46:	69b0      	ldr	r0, [r6, #24]
 8028b48:	e9c4 0a06 	strd	r0, sl, [r4, #24]
 8028b4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8028b50:	e00e      	b.n	8028b70 <FormatAndDispatchDiscoveryCallback+0x12e>
 8028b52:	e02b      	b.n	8028bac <FormatAndDispatchDiscoveryCallback+0x16a>
 8028b54:	4601      	mov	r1, r0
 8028b56:	2211      	movs	r2, #17
 8028b58:	1ca8      	adds	r0, r5, #2
 8028b5a:	f7eb f912 	bl	8013d82 <__aeabi_memcpy>
 8028b5e:	f8b8 0012 	ldrh.w	r0, [r8, #18]
 8028b62:	8028      	strh	r0, [r5, #0]
 8028b64:	69e0      	ldr	r0, [r4, #28]
 8028b66:	b900      	cbnz	r0, 8028b6a <FormatAndDispatchDiscoveryCallback+0x128>
 8028b68:	61e5      	str	r5, [r4, #28]
 8028b6a:	f8d8 8014 	ldr.w	r8, [r8, #20]
 8028b6e:	3514      	adds	r5, #20
 8028b70:	ea5f 0008 	movs.w	r0, r8
 8028b74:	d1ee      	bne.n	8028b54 <FormatAndDispatchDiscoveryCallback+0x112>
 8028b76:	6a36      	ldr	r6, [r6, #32]
 8028b78:	3420      	adds	r4, #32
 8028b7a:	2e00      	cmp	r6, #0
 8028b7c:	d1da      	bne.n	8028b34 <FormatAndDispatchDiscoveryCallback+0xf2>
 8028b7e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8028b80:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8028b84:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8028b88:	6800      	ldr	r0, [r0, #0]
 8028b8a:	a90e      	add	r1, sp, #56	; 0x38
 8028b8c:	4798      	blx	r3
 8028b8e:	4658      	mov	r0, fp
 8028b90:	f7ea fc2e 	bl	80133f0 <BTPS_FreeMemory>
 8028b94:	e007      	b.n	8028ba6 <FormatAndDispatchDiscoveryCallback+0x164>
 8028b96:	9812      	ldr	r0, [sp, #72]	; 0x48
 8028b98:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8028b9c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8028ba0:	6800      	ldr	r0, [r0, #0]
 8028ba2:	a90e      	add	r1, sp, #56	; 0x38
 8028ba4:	4798      	blx	r3
 8028ba6:	4638      	mov	r0, r7
 8028ba8:	f000 f8f5 	bl	8028d96 <FreeDiscoveredServiceInfoEntryMemory>
 8028bac:	b015      	add	sp, #84	; 0x54
 8028bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.FormatAndDispatchDiscoveryCompleteCallback:

08028bb2 <FormatAndDispatchDiscoveryCompleteCallback>:
 8028bb2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8028bb4:	4605      	mov	r5, r0
 8028bb6:	4616      	mov	r6, r2
 8028bb8:	302c      	adds	r0, #44	; 0x2c
 8028bba:	f7ff fb19 	bl	80281f0 <DeleteServiceDiscoveryInfoEntry>
 8028bbe:	0004      	movs	r4, r0
 8028bc0:	d013      	beq.n	8028bea <FormatAndDispatchDiscoveryCompleteCallback+0x38>
 8028bc2:	2001      	movs	r0, #1
 8028bc4:	f88d 0000 	strb.w	r0, [sp]
 8028bc8:	2008      	movs	r0, #8
 8028bca:	f8ad 0002 	strh.w	r0, [sp, #2]
 8028bce:	a802      	add	r0, sp, #8
 8028bd0:	9001      	str	r0, [sp, #4]
 8028bd2:	6820      	ldr	r0, [r4, #0]
 8028bd4:	9002      	str	r0, [sp, #8]
 8028bd6:	f88d 600c 	strb.w	r6, [sp, #12]
 8028bda:	6a23      	ldr	r3, [r4, #32]
 8028bdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8028bde:	6828      	ldr	r0, [r5, #0]
 8028be0:	4669      	mov	r1, sp
 8028be2:	4798      	blx	r3
 8028be4:	4620      	mov	r0, r4
 8028be6:	f000 f93e 	bl	8028e66 <FreeServiceDiscoveryInfoEntryMemory>
 8028bea:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

Disassembly of section i.FormatClientEventInteger:

08028bec <FormatClientEventInteger>:
 8028bec:	b570      	push	{r4, r5, r6, lr}
 8028bee:	4604      	mov	r4, r0
 8028bf0:	6900      	ldr	r0, [r0, #16]
 8028bf2:	9e04      	ldr	r6, [sp, #16]
 8028bf4:	f100 0508 	add.w	r5, r0, #8
 8028bf8:	7003      	strb	r3, [r0, #0]
 8028bfa:	6920      	ldr	r0, [r4, #16]
 8028bfc:	6045      	str	r5, [r0, #4]
 8028bfe:	6813      	ldr	r3, [r2, #0]
 8028c00:	4628      	mov	r0, r5
 8028c02:	680a      	ldr	r2, [r1, #0]
 8028c04:	f000 f8a7 	bl	8028d56 <FormatTwoIntegersAddress>
 8028c08:	b12e      	cbz	r6, 8028c16 <FormatClientEventInteger+0x2a>
 8028c0a:	6921      	ldr	r1, [r4, #16]
 8028c0c:	2014      	movs	r0, #20
 8028c0e:	8048      	strh	r0, [r1, #2]
 8028c10:	6830      	ldr	r0, [r6, #0]
 8028c12:	6128      	str	r0, [r5, #16]
 8028c14:	e002      	b.n	8028c1c <FormatClientEventInteger+0x30>
 8028c16:	6921      	ldr	r1, [r4, #16]
 8028c18:	2010      	movs	r0, #16
 8028c1a:	8048      	strh	r0, [r1, #2]
 8028c1c:	6920      	ldr	r0, [r4, #16]
 8028c1e:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FormatClientEventWordPointer:

08028c20 <FormatClientEventWordPointer>:
 8028c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c24:	4604      	mov	r4, r0
 8028c26:	e9dd 8606 	ldrd	r8, r6, [sp, #24]
 8028c2a:	6900      	ldr	r0, [r0, #16]
 8028c2c:	2718      	movs	r7, #24
 8028c2e:	f100 0508 	add.w	r5, r0, #8
 8028c32:	7003      	strb	r3, [r0, #0]
 8028c34:	6920      	ldr	r0, [r4, #16]
 8028c36:	8047      	strh	r7, [r0, #2]
 8028c38:	6920      	ldr	r0, [r4, #16]
 8028c3a:	6045      	str	r5, [r0, #4]
 8028c3c:	6813      	ldr	r3, [r2, #0]
 8028c3e:	4628      	mov	r0, r5
 8028c40:	680a      	ldr	r2, [r1, #0]
 8028c42:	f000 f888 	bl	8028d56 <FormatTwoIntegersAddress>
 8028c46:	f8a5 8010 	strh.w	r8, [r5, #16]
 8028c4a:	b11e      	cbz	r6, 8028c54 <FormatClientEventWordPointer+0x34>
 8028c4c:	6920      	ldr	r0, [r4, #16]
 8028c4e:	8047      	strh	r7, [r0, #2]
 8028c50:	616e      	str	r6, [r5, #20]
 8028c52:	e002      	b.n	8028c5a <FormatClientEventWordPointer+0x3a>
 8028c54:	6921      	ldr	r1, [r4, #16]
 8028c56:	2014      	movs	r0, #20
 8028c58:	8048      	strh	r0, [r1, #2]
 8028c5a:	6920      	ldr	r0, [r4, #16]
 8028c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FormatConnectionEventWord:

08028c60 <FormatConnectionEventWord>:
 8028c60:	b530      	push	{r4, r5, lr}
 8028c62:	6905      	ldr	r5, [r0, #16]
 8028c64:	f105 0408 	add.w	r4, r5, #8
 8028c68:	702a      	strb	r2, [r5, #0]
 8028c6a:	6902      	ldr	r2, [r0, #16]
 8028c6c:	6054      	str	r4, [r2, #4]
 8028c6e:	680a      	ldr	r2, [r1, #0]
 8028c70:	60aa      	str	r2, [r5, #8]
 8028c72:	790a      	ldrb	r2, [r1, #4]
 8028c74:	732a      	strb	r2, [r5, #12]
 8028c76:	f8d1 2005 	ldr.w	r2, [r1, #5]
 8028c7a:	f8c5 200d 	str.w	r2, [r5, #13]
 8028c7e:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 8028c82:	f8a5 1011 	strh.w	r1, [r5, #17]
 8028c86:	b12b      	cbz	r3, 8028c94 <FormatConnectionEventWord+0x34>
 8028c88:	6902      	ldr	r2, [r0, #16]
 8028c8a:	2110      	movs	r1, #16
 8028c8c:	8051      	strh	r1, [r2, #2]
 8028c8e:	8819      	ldrh	r1, [r3, #0]
 8028c90:	81a1      	strh	r1, [r4, #12]
 8028c92:	e002      	b.n	8028c9a <FormatConnectionEventWord+0x3a>
 8028c94:	6902      	ldr	r2, [r0, #16]
 8028c96:	210c      	movs	r1, #12
 8028c98:	8051      	strh	r1, [r2, #2]
 8028c9a:	6900      	ldr	r0, [r0, #16]
 8028c9c:	bd30      	pop	{r4, r5, pc}

Disassembly of section i.FormatContextPduHeader:

08028c9e <FormatContextPduHeader>:
 8028c9e:	b570      	push	{r4, r5, r6, lr}
 8028ca0:	4616      	mov	r6, r2
 8028ca2:	898a      	ldrh	r2, [r1, #12]
 8028ca4:	460d      	mov	r5, r1
 8028ca6:	4604      	mov	r4, r0
 8028ca8:	68c0      	ldr	r0, [r0, #12]
 8028caa:	2100      	movs	r1, #0
 8028cac:	320c      	adds	r2, #12
 8028cae:	f7ea fc06 	bl	80134be <BTPS_MemInitialize>
 8028cb2:	89a8      	ldrh	r0, [r5, #12]
 8028cb4:	68e1      	ldr	r1, [r4, #12]
 8028cb6:	1e40      	subs	r0, r0, #1
 8028cb8:	6088      	str	r0, [r1, #8]
 8028cba:	68e0      	ldr	r0, [r4, #12]
 8028cbc:	f800 6f0c 	strb.w	r6, [r0, #12]!
 8028cc0:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FormatServerEventIntegerByte:

08028cc2 <FormatServerEventIntegerByte>:
 8028cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cc6:	4604      	mov	r4, r0
 8028cc8:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
 8028ccc:	6900      	ldr	r0, [r0, #16]
 8028cce:	f100 0508 	add.w	r5, r0, #8
 8028cd2:	7003      	strb	r3, [r0, #0]
 8028cd4:	6920      	ldr	r0, [r4, #16]
 8028cd6:	6045      	str	r5, [r0, #4]
 8028cd8:	6813      	ldr	r3, [r2, #0]
 8028cda:	4628      	mov	r0, r5
 8028cdc:	680a      	ldr	r2, [r1, #0]
 8028cde:	f000 f83a 	bl	8028d56 <FormatTwoIntegersAddress>
 8028ce2:	b157      	cbz	r7, 8028cfa <FormatServerEventIntegerByte+0x38>
 8028ce4:	6921      	ldr	r1, [r4, #16]
 8028ce6:	2018      	movs	r0, #24
 8028ce8:	8048      	strh	r0, [r1, #2]
 8028cea:	6839      	ldr	r1, [r7, #0]
 8028cec:	6129      	str	r1, [r5, #16]
 8028cee:	b156      	cbz	r6, 8028d06 <FormatServerEventIntegerByte+0x44>
 8028cf0:	6921      	ldr	r1, [r4, #16]
 8028cf2:	8048      	strh	r0, [r1, #2]
 8028cf4:	7830      	ldrb	r0, [r6, #0]
 8028cf6:	7528      	strb	r0, [r5, #20]
 8028cf8:	e005      	b.n	8028d06 <FormatServerEventIntegerByte+0x44>
 8028cfa:	b126      	cbz	r6, 8028d06 <FormatServerEventIntegerByte+0x44>
 8028cfc:	6921      	ldr	r1, [r4, #16]
 8028cfe:	2014      	movs	r0, #20
 8028d00:	8048      	strh	r0, [r1, #2]
 8028d02:	7830      	ldrb	r0, [r6, #0]
 8028d04:	73e8      	strb	r0, [r5, #15]
 8028d06:	6920      	ldr	r0, [r4, #16]
 8028d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FormatServerEventIntegerThreeWordsPointer:

08028d0c <FormatServerEventIntegerThreeWordsPointer>:
 8028d0c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8028d10:	f04f 0e00 	mov.w	lr, #0
 8028d14:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8028d18:	e9dd 6709 	ldrd	r6, r7, [sp, #36]	; 0x24
 8028d1c:	f10d 0c20 	add.w	ip, sp, #32
 8028d20:	e9cd ce00 	strd	ip, lr, [sp]
 8028d24:	f7ff ffcd 	bl	8028cc2 <FormatServerEventIntegerByte>
 8028d28:	2800      	cmp	r0, #0
 8028d2a:	d00d      	beq.n	8028d48 <FormatServerEventIntegerThreeWordsPointer+0x3c>
 8028d2c:	2118      	movs	r1, #24
 8028d2e:	8041      	strh	r1, [r0, #2]
 8028d30:	6841      	ldr	r1, [r0, #4]
 8028d32:	828e      	strh	r6, [r1, #20]
 8028d34:	6841      	ldr	r1, [r0, #4]
 8028d36:	82cf      	strh	r7, [r1, #22]
 8028d38:	b145      	cbz	r5, 8028d4c <FormatServerEventIntegerThreeWordsPointer+0x40>
 8028d3a:	6842      	ldr	r2, [r0, #4]
 8028d3c:	8829      	ldrh	r1, [r5, #0]
 8028d3e:	2c00      	cmp	r4, #0
 8028d40:	8311      	strh	r1, [r2, #24]
 8028d42:	d001      	beq.n	8028d48 <FormatServerEventIntegerThreeWordsPointer+0x3c>
 8028d44:	6841      	ldr	r1, [r0, #4]
 8028d46:	61cc      	str	r4, [r1, #28]
 8028d48:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 8028d4c:	2c00      	cmp	r4, #0
 8028d4e:	d0fb      	beq.n	8028d48 <FormatServerEventIntegerThreeWordsPointer+0x3c>
 8028d50:	6841      	ldr	r1, [r0, #4]
 8028d52:	618c      	str	r4, [r1, #24]
 8028d54:	e7f8      	b.n	8028d48 <FormatServerEventIntegerThreeWordsPointer+0x3c>

Disassembly of section i.FormatTwoIntegersAddress:

08028d56 <FormatTwoIntegersAddress>:
 8028d56:	e9c0 2300 	strd	r2, r3, [r0]
 8028d5a:	790a      	ldrb	r2, [r1, #4]
 8028d5c:	7202      	strb	r2, [r0, #8]
 8028d5e:	f8d1 2005 	ldr.w	r2, [r1, #5]
 8028d62:	f8c0 2009 	str.w	r2, [r0, #9]
 8028d66:	f8b1 1009 	ldrh.w	r1, [r1, #9]
 8028d6a:	f8a0 100d 	strh.w	r1, [r0, #13]
 8028d6e:	4770      	bx	lr

Disassembly of section i.FreeConnectionInfoEntryMemory:

08028d70 <FreeConnectionInfoEntryMemory>:
 8028d70:	b510      	push	{r4, lr}
 8028d72:	4604      	mov	r4, r0
 8028d74:	6900      	ldr	r0, [r0, #16]
 8028d76:	b118      	cbz	r0, 8028d80 <FreeConnectionInfoEntryMemory+0x10>
 8028d78:	f104 0010 	add.w	r0, r4, #16
 8028d7c:	f000 f8a6 	bl	8028ecc <FreeTransactionInfoList>
 8028d80:	6960      	ldr	r0, [r4, #20]
 8028d82:	b118      	cbz	r0, 8028d8c <FreeConnectionInfoEntryMemory+0x1c>
 8028d84:	f104 0014 	add.w	r0, r4, #20
 8028d88:	f000 f8a0 	bl	8028ecc <FreeTransactionInfoList>
 8028d8c:	4620      	mov	r0, r4
 8028d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028d92:	f7ea bb2d 	b.w	80133f0 <BTPS_FreeMemory>

Disassembly of section i.FreeDiscoveredServiceInfoEntryMemory:

08028d96 <FreeDiscoveredServiceInfoEntryMemory>:
 8028d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d9a:	0006      	movs	r6, r0
 8028d9c:	d02a      	beq.n	8028df4 <FreeDiscoveredServiceInfoEntryMemory+0x5e>
 8028d9e:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8028da0:	f04f 0800 	mov.w	r8, #0
 8028da4:	b19c      	cbz	r4, 8028dce <FreeDiscoveredServiceInfoEntryMemory+0x38>
 8028da6:	f116 0728 	adds.w	r7, r6, #40	; 0x28
 8028daa:	d010      	beq.n	8028dce <FreeDiscoveredServiceInfoEntryMemory+0x38>
 8028dac:	0025      	movs	r5, r4
 8028dae:	6a2c      	ldr	r4, [r5, #32]
 8028db0:	d009      	beq.n	8028dc6 <FreeDiscoveredServiceInfoEntryMemory+0x30>
 8028db2:	69e8      	ldr	r0, [r5, #28]
 8028db4:	b120      	cbz	r0, 8028dc0 <FreeDiscoveredServiceInfoEntryMemory+0x2a>
 8028db6:	f105 001c 	add.w	r0, r5, #28
 8028dba:	2114      	movs	r1, #20
 8028dbc:	f7ef ff7c 	bl	8018cb8 <BSC_FreeGenericListEntryList>
 8028dc0:	4628      	mov	r0, r5
 8028dc2:	f7ea fb15 	bl	80133f0 <BTPS_FreeMemory>
 8028dc6:	2c00      	cmp	r4, #0
 8028dc8:	d1f0      	bne.n	8028dac <FreeDiscoveredServiceInfoEntryMemory+0x16>
 8028dca:	f8c7 8000 	str.w	r8, [r7]
 8028dce:	69f4      	ldr	r4, [r6, #28]
 8028dd0:	b15c      	cbz	r4, 8028dea <FreeDiscoveredServiceInfoEntryMemory+0x54>
 8028dd2:	f116 051c 	adds.w	r5, r6, #28
 8028dd6:	d008      	beq.n	8028dea <FreeDiscoveredServiceInfoEntryMemory+0x54>
 8028dd8:	0020      	movs	r0, r4
 8028dda:	6984      	ldr	r4, [r0, #24]
 8028ddc:	d001      	beq.n	8028de2 <FreeDiscoveredServiceInfoEntryMemory+0x4c>
 8028dde:	f7ea fb07 	bl	80133f0 <BTPS_FreeMemory>
 8028de2:	2c00      	cmp	r4, #0
 8028de4:	d1f8      	bne.n	8028dd8 <FreeDiscoveredServiceInfoEntryMemory+0x42>
 8028de6:	f8c5 8000 	str.w	r8, [r5]
 8028dea:	4630      	mov	r0, r6
 8028dec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028df0:	f7ea bafe 	b.w	80133f0 <BTPS_FreeMemory>
 8028df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.FreeGATTContextInfoEntryMemory:

08028df8 <FreeGATTContextInfoEntryMemory>:
 8028df8:	b570      	push	{r4, r5, r6, lr}
 8028dfa:	4604      	mov	r4, r0
 8028dfc:	6840      	ldr	r0, [r0, #4]
 8028dfe:	b118      	cbz	r0, 8028e08 <FreeGATTContextInfoEntryMemory+0x10>
 8028e00:	b281      	uxth	r1, r0
 8028e02:	6820      	ldr	r0, [r4, #0]
 8028e04:	f7f9 ff1d 	bl	8022c42 <L2CA_Un_Register_Fixed_Channel>
 8028e08:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8028e0a:	b120      	cbz	r0, 8028e16 <FreeGATTContextInfoEntryMemory+0x1e>
 8028e0c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8028e10:	2120      	movs	r1, #32
 8028e12:	f7ef ff51 	bl	8018cb8 <BSC_FreeGenericListEntryList>
 8028e16:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8028e18:	b155      	cbz	r5, 8028e30 <FreeGATTContextInfoEntryMemory+0x38>
 8028e1a:	f114 062c 	adds.w	r6, r4, #44	; 0x2c
 8028e1e:	d007      	beq.n	8028e30 <FreeGATTContextInfoEntryMemory+0x38>
 8028e20:	4628      	mov	r0, r5
 8028e22:	6aad      	ldr	r5, [r5, #40]	; 0x28
 8028e24:	f000 f81f 	bl	8028e66 <FreeServiceDiscoveryInfoEntryMemory>
 8028e28:	2d00      	cmp	r5, #0
 8028e2a:	d1f9      	bne.n	8028e20 <FreeGATTContextInfoEntryMemory+0x28>
 8028e2c:	2000      	movs	r0, #0
 8028e2e:	6030      	str	r0, [r6, #0]
 8028e30:	6960      	ldr	r0, [r4, #20]
 8028e32:	b120      	cbz	r0, 8028e3e <FreeGATTContextInfoEntryMemory+0x46>
 8028e34:	6981      	ldr	r1, [r0, #24]
 8028e36:	6161      	str	r1, [r4, #20]
 8028e38:	f7ff ff9a 	bl	8028d70 <FreeConnectionInfoEntryMemory>
 8028e3c:	e7f8      	b.n	8028e30 <FreeGATTContextInfoEntryMemory+0x38>
 8028e3e:	69a0      	ldr	r0, [r4, #24]
 8028e40:	b120      	cbz	r0, 8028e4c <FreeGATTContextInfoEntryMemory+0x54>
 8028e42:	f104 0018 	add.w	r0, r4, #24
 8028e46:	2110      	movs	r1, #16
 8028e48:	f7ef ff36 	bl	8018cb8 <BSC_FreeGenericListEntryList>
 8028e4c:	68e0      	ldr	r0, [r4, #12]
 8028e4e:	b108      	cbz	r0, 8028e54 <FreeGATTContextInfoEntryMemory+0x5c>
 8028e50:	f7ea face 	bl	80133f0 <BTPS_FreeMemory>
 8028e54:	6920      	ldr	r0, [r4, #16]
 8028e56:	b108      	cbz	r0, 8028e5c <FreeGATTContextInfoEntryMemory+0x64>
 8028e58:	f7ea faca 	bl	80133f0 <BTPS_FreeMemory>
 8028e5c:	4620      	mov	r0, r4
 8028e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028e62:	f7ea bac5 	b.w	80133f0 <BTPS_FreeMemory>

Disassembly of section i.FreeServiceDiscoveryInfoEntryMemory:

08028e66 <FreeServiceDiscoveryInfoEntryMemory>:
 8028e66:	b570      	push	{r4, r5, r6, lr}
 8028e68:	0005      	movs	r5, r0
 8028e6a:	d01c      	beq.n	8028ea6 <FreeServiceDiscoveryInfoEntryMemory+0x40>
 8028e6c:	696c      	ldr	r4, [r5, #20]
 8028e6e:	b154      	cbz	r4, 8028e86 <FreeServiceDiscoveryInfoEntryMemory+0x20>
 8028e70:	f115 0614 	adds.w	r6, r5, #20
 8028e74:	d007      	beq.n	8028e86 <FreeServiceDiscoveryInfoEntryMemory+0x20>
 8028e76:	4620      	mov	r0, r4
 8028e78:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8028e7a:	f7ff ff8c 	bl	8028d96 <FreeDiscoveredServiceInfoEntryMemory>
 8028e7e:	2c00      	cmp	r4, #0
 8028e80:	d1f9      	bne.n	8028e76 <FreeServiceDiscoveryInfoEntryMemory+0x10>
 8028e82:	2000      	movs	r0, #0
 8028e84:	6030      	str	r0, [r6, #0]
 8028e86:	6928      	ldr	r0, [r5, #16]
 8028e88:	b120      	cbz	r0, 8028e94 <FreeServiceDiscoveryInfoEntryMemory+0x2e>
 8028e8a:	f105 0010 	add.w	r0, r5, #16
 8028e8e:	2104      	movs	r1, #4
 8028e90:	f7ef ff12 	bl	8018cb8 <BSC_FreeGenericListEntryList>
 8028e94:	69e8      	ldr	r0, [r5, #28]
 8028e96:	b108      	cbz	r0, 8028e9c <FreeServiceDiscoveryInfoEntryMemory+0x36>
 8028e98:	f7ea faaa 	bl	80133f0 <BTPS_FreeMemory>
 8028e9c:	4628      	mov	r0, r5
 8028e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028ea2:	f7ea baa5 	b.w	80133f0 <BTPS_FreeMemory>
 8028ea6:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.FreeTransactionInfoEntryMemory:

08028ea8 <FreeTransactionInfoEntryMemory>:
 8028ea8:	b510      	push	{r4, lr}
 8028eaa:	4604      	mov	r4, r0
 8028eac:	6940      	ldr	r0, [r0, #20]
 8028eae:	b120      	cbz	r0, 8028eba <FreeTransactionInfoEntryMemory+0x12>
 8028eb0:	f104 0014 	add.w	r0, r4, #20
 8028eb4:	2110      	movs	r1, #16
 8028eb6:	f7ef feff 	bl	8018cb8 <BSC_FreeGenericListEntryList>
 8028eba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8028ebc:	b108      	cbz	r0, 8028ec2 <FreeTransactionInfoEntryMemory+0x1a>
 8028ebe:	f7ea fa97 	bl	80133f0 <BTPS_FreeMemory>
 8028ec2:	4620      	mov	r0, r4
 8028ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028ec8:	f7ea ba92 	b.w	80133f0 <BTPS_FreeMemory>

Disassembly of section i.FreeTransactionInfoList:

08028ecc <FreeTransactionInfoList>:
 8028ecc:	b510      	push	{r4, lr}
 8028ece:	4604      	mov	r4, r0
 8028ed0:	e003      	b.n	8028eda <FreeTransactionInfoList+0xe>
 8028ed2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8028ed4:	6021      	str	r1, [r4, #0]
 8028ed6:	f7ff ffe7 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 8028eda:	6820      	ldr	r0, [r4, #0]
 8028edc:	2800      	cmp	r0, #0
 8028ede:	d1f8      	bne.n	8028ed2 <FreeTransactionInfoList+0x6>
 8028ee0:	bd10      	pop	{r4, pc}

Disassembly of section i.GATTErrorResponsePDU:

08028ee2 <GATTErrorResponsePDU>:
 8028ee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028ee6:	4615      	mov	r5, r2
 8028ee8:	461c      	mov	r4, r3
 8028eea:	460f      	mov	r7, r1
 8028eec:	4680      	mov	r8, r0
 8028eee:	2201      	movs	r2, #1
 8028ef0:	9e08      	ldr	r6, [sp, #32]
 8028ef2:	f7ff fed4 	bl	8028c9e <FormatContextPduHeader>
 8028ef6:	7045      	strb	r5, [r0, #1]
 8028ef8:	7084      	strb	r4, [r0, #2]
 8028efa:	0a21      	lsrs	r1, r4, #8
 8028efc:	70c1      	strb	r1, [r0, #3]
 8028efe:	7106      	strb	r6, [r0, #4]
 8028f00:	9000      	str	r0, [sp, #0]
 8028f02:	2305      	movs	r3, #5
 8028f04:	2200      	movs	r2, #0
 8028f06:	4639      	mov	r1, r7
 8028f08:	4640      	mov	r0, r8
 8028f0a:	f001 f8d5 	bl	802a0b8 <L2CAPSendPDU>
 8028f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

Disassembly of section i.GATT_Cancel_Transaction:

08028f14 <GATT_Cancel_Transaction>:
 8028f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028f16:	000e      	movs	r6, r1
 8028f18:	4607      	mov	r7, r0
 8028f1a:	d02d      	beq.n	8028f78 <GATT_Cancel_Transaction+0x64>
 8028f1c:	4601      	mov	r1, r0
 8028f1e:	4668      	mov	r0, sp
 8028f20:	f7fe fdbc 	bl	8027a9c <AcquireGATTStackInformation>
 8028f24:	0005      	movs	r5, r0
 8028f26:	d128      	bne.n	8028f7a <GATT_Cancel_Transaction+0x66>
 8028f28:	2400      	movs	r4, #0
 8028f2a:	e01a      	b.n	8028f62 <GATT_Cancel_Transaction+0x4e>
 8028f2c:	4631      	mov	r1, r6
 8028f2e:	f104 0014 	add.w	r0, r4, #20
 8028f32:	f001 fd09 	bl	802a948 <SearchTransactionInfoEntry>
 8028f36:	b108      	cbz	r0, 8028f3c <GATT_Cancel_Transaction+0x28>
 8028f38:	3414      	adds	r4, #20
 8028f3a:	e006      	b.n	8028f4a <GATT_Cancel_Transaction+0x36>
 8028f3c:	4631      	mov	r1, r6
 8028f3e:	f104 0010 	add.w	r0, r4, #16
 8028f42:	f001 fd01 	bl	802a948 <SearchTransactionInfoEntry>
 8028f46:	b160      	cbz	r0, 8028f62 <GATT_Cancel_Transaction+0x4e>
 8028f48:	3410      	adds	r4, #16
 8028f4a:	7a81      	ldrb	r1, [r0, #10]
 8028f4c:	078a      	lsls	r2, r1, #30
 8028f4e:	d404      	bmi.n	8028f5a <GATT_Cancel_Transaction+0x46>
 8028f50:	6801      	ldr	r1, [r0, #0]
 8028f52:	4620      	mov	r0, r4
 8028f54:	f7ff f930 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 8028f58:	e00a      	b.n	8028f70 <GATT_Cancel_Transaction+0x5c>
 8028f5a:	f041 0101 	orr.w	r1, r1, #1
 8028f5e:	7281      	strb	r1, [r0, #10]
 8028f60:	e006      	b.n	8028f70 <GATT_Cancel_Transaction+0x5c>
 8028f62:	9800      	ldr	r0, [sp, #0]
 8028f64:	4621      	mov	r1, r4
 8028f66:	3014      	adds	r0, #20
 8028f68:	f000 ff3d 	bl	8029de6 <GetNextConnectionInfoEntry>
 8028f6c:	0004      	movs	r4, r0
 8028f6e:	d1dd      	bne.n	8028f2c <GATT_Cancel_Transaction+0x18>
 8028f70:	4638      	mov	r0, r7
 8028f72:	f7f0 f9e7 	bl	8019344 <BSC_UnLockBluetoothStack>
 8028f76:	e000      	b.n	8028f7a <GATT_Cancel_Transaction+0x66>
 8028f78:	4d01      	ldr	r5, [pc, #4]	; (8028f80 <GATT_Cancel_Transaction+0x6c>)
 8028f7a:	4628      	mov	r0, r5
 8028f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028f7e:	0000      	.short	0x0000
 8028f80:	fffffc18 	.word	0xfffffc18

Disassembly of section i.GATT_Cleanup:

08028f84 <GATT_Cleanup>:
 8028f84:	b570      	push	{r4, r5, r6, lr}
 8028f86:	4605      	mov	r5, r0
 8028f88:	4813      	ldr	r0, [pc, #76]	; (8028fd8 <GATT_Cleanup+0x54>)
 8028f8a:	7800      	ldrb	r0, [r0, #0]
 8028f8c:	b1f8      	cbz	r0, 8028fce <GATT_Cleanup+0x4a>
 8028f8e:	4628      	mov	r0, r5
 8028f90:	f7f0 f872 	bl	8019078 <BSC_LockBluetoothStack>
 8028f94:	b108      	cbz	r0, 8028f9a <GATT_Cleanup+0x16>
 8028f96:	4c11      	ldr	r4, [pc, #68]	; (8028fdc <GATT_Cleanup+0x58>)
 8028f98:	e01b      	b.n	8028fd2 <GATT_Cleanup+0x4e>
 8028f9a:	f7ef fd47 	bl	8018a2c <BSC_AcquireListLock>
 8028f9e:	f46f 767a 	mvn.w	r6, #1000	; 0x3e8
 8028fa2:	b178      	cbz	r0, 8028fc4 <GATT_Cleanup+0x40>
 8028fa4:	480c      	ldr	r0, [pc, #48]	; (8028fd8 <GATT_Cleanup+0x54>)
 8028fa6:	4629      	mov	r1, r5
 8028fa8:	3014      	adds	r0, #20
 8028faa:	f7ff f90f 	bl	80281cc <DeleteGATTContextInfoEntry>
 8028fae:	0004      	movs	r4, r0
 8028fb0:	d006      	beq.n	8028fc0 <GATT_Cleanup+0x3c>
 8028fb2:	f7f0 f89f 	bl	80190f4 <BSC_ReleaseListLock>
 8028fb6:	4620      	mov	r0, r4
 8028fb8:	f7ff ff1e 	bl	8028df8 <FreeGATTContextInfoEntryMemory>
 8028fbc:	2400      	movs	r4, #0
 8028fbe:	e002      	b.n	8028fc6 <GATT_Cleanup+0x42>
 8028fc0:	f7f0 f898 	bl	80190f4 <BSC_ReleaseListLock>
 8028fc4:	4634      	mov	r4, r6
 8028fc6:	4628      	mov	r0, r5
 8028fc8:	f7f0 f9bc 	bl	8019344 <BSC_UnLockBluetoothStack>
 8028fcc:	e001      	b.n	8028fd2 <GATT_Cleanup+0x4e>
 8028fce:	4c03      	ldr	r4, [pc, #12]	; (8028fdc <GATT_Cleanup+0x58>)
 8028fd0:	1d24      	adds	r4, r4, #4
 8028fd2:	4620      	mov	r0, r4
 8028fd4:	bd70      	pop	{r4, r5, r6, pc}
 8028fd6:	0000      	.short	0x0000
 8028fd8:	20000054 	.word	0x20000054
 8028fdc:	fffffc14 	.word	0xfffffc14

Disassembly of section i.GATT_ClientEventCallback:

08028fe0 <GATT_ClientEventCallback>:
 8028fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fe4:	b091      	sub	sp, #68	; 0x44
 8028fe6:	4614      	mov	r4, r2
 8028fe8:	000e      	movs	r6, r1
 8028fea:	d07d      	beq.n	80290e8 <GATT_ClientEventCallback+0x108>
 8028fec:	2c00      	cmp	r4, #0
 8028fee:	d07b      	beq.n	80290e8 <GATT_ClientEventCallback+0x108>
 8028ff0:	4601      	mov	r1, r0
 8028ff2:	a80f      	add	r0, sp, #60	; 0x3c
 8028ff4:	f7fe fd52 	bl	8027a9c <AcquireGATTStackInformation>
 8028ff8:	2800      	cmp	r0, #0
 8028ffa:	d175      	bne.n	80290e8 <GATT_ClientEventCallback+0x108>
 8028ffc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028ffe:	4621      	mov	r1, r4
 8029000:	302c      	adds	r0, #44	; 0x2c
 8029002:	f001 fc73 	bl	802a8ec <SearchServiceDiscoveryInfoEntry>
 8029006:	0005      	movs	r5, r0
 8029008:	d02d      	beq.n	8029066 <GATT_ClientEventCallback+0x86>
 802900a:	7830      	ldrb	r0, [r6, #0]
 802900c:	2100      	movs	r1, #0
 802900e:	f04f 0a01 	mov.w	sl, #1
 8029012:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8029016:	2807      	cmp	r0, #7
 8029018:	d225      	bcs.n	8029066 <GATT_ClientEventCallback+0x86>
 802901a:	e8df f000 	tbb	[pc, r0]
 802901e:	e804      	.short	0xe804
 8029020:	f0f12a24 	.word	0xf0f12a24
 8029024:	00a6      	.short	0x00a6
 8029026:	6870      	ldr	r0, [r6, #4]
 8029028:	2800      	cmp	r0, #0
 802902a:	d0ed      	beq.n	8029008 <GATT_ClientEventCallback+0x28>
 802902c:	6968      	ldr	r0, [r5, #20]
 802902e:	b160      	cbz	r0, 802904a <GATT_ClientEventCallback+0x6a>
 8029030:	69c0      	ldr	r0, [r0, #28]
 8029032:	e008      	b.n	8029046 <GATT_ClientEventCallback+0x66>
 8029034:	6873      	ldr	r3, [r6, #4]
 8029036:	8a42      	ldrh	r2, [r0, #18]
 8029038:	8a5b      	ldrh	r3, [r3, #18]
 802903a:	429a      	cmp	r2, r3
 802903c:	d102      	bne.n	8029044 <GATT_ClientEventCallback+0x64>
 802903e:	7c42      	ldrb	r2, [r0, #17]
 8029040:	b102      	cbz	r2, 8029044 <GATT_ClientEventCallback+0x64>
 8029042:	7441      	strb	r1, [r0, #17]
 8029044:	6980      	ldr	r0, [r0, #24]
 8029046:	2800      	cmp	r0, #0
 8029048:	d1f4      	bne.n	8029034 <GATT_ClientEventCallback+0x54>
 802904a:	6870      	ldr	r0, [r6, #4]
 802904c:	7bc1      	ldrb	r1, [r0, #15]
 802904e:	b111      	cbz	r1, 8029056 <GATT_ClientEventCallback+0x76>
 8029050:	2202      	movs	r2, #2
 8029052:	6829      	ldr	r1, [r5, #0]
 8029054:	e004      	b.n	8029060 <GATT_ClientEventCallback+0x80>
 8029056:	7d00      	ldrb	r0, [r0, #20]
 8029058:	280a      	cmp	r0, #10
 802905a:	d005      	beq.n	8029068 <GATT_ClientEventCallback+0x88>
 802905c:	6829      	ldr	r1, [r5, #0]
 802905e:	2201      	movs	r2, #1
 8029060:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8029062:	f7ff fda6 	bl	8028bb2 <FormatAndDispatchDiscoveryCompleteCallback>
 8029066:	e1a7      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029068:	4629      	mov	r1, r5
 802906a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802906c:	f001 fcb1 	bl	802a9d2 <ServiceDiscoveryStateMachine>
 8029070:	e1a2      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029072:	6870      	ldr	r0, [r6, #4]
 8029074:	2800      	cmp	r0, #0
 8029076:	d0f6      	beq.n	8029066 <GATT_ClientEventCallback+0x86>
 8029078:	696f      	ldr	r7, [r5, #20]
 802907a:	2f00      	cmp	r7, #0
 802907c:	d0f3      	beq.n	8029066 <GATT_ClientEventCallback+0x86>
 802907e:	46d9      	mov	r9, fp
 8029080:	f04f 0800 	mov.w	r8, #0
 8029084:	6944      	ldr	r4, [r0, #20]
 8029086:	e061      	b.n	802914c <GATT_ClientEventCallback+0x16c>
 8029088:	221c      	movs	r2, #28
 802908a:	2100      	movs	r1, #0
 802908c:	a803      	add	r0, sp, #12
 802908e:	f7ea fa16 	bl	80134be <BTPS_MemInitialize>
 8029092:	79a0      	ldrb	r0, [r4, #6]
 8029094:	b128      	cbz	r0, 80290a2 <GATT_ClientEventCallback+0xc2>
 8029096:	2211      	movs	r2, #17
 8029098:	1de1      	adds	r1, r4, #7
 802909a:	a803      	add	r0, sp, #12
 802909c:	f7ea fe71 	bl	8013d82 <__aeabi_memcpy>
 80290a0:	e00d      	b.n	80290be <GATT_ClientEventCallback+0xde>
 80290a2:	6828      	ldr	r0, [r5, #0]
 80290a4:	9000      	str	r0, [sp, #0]
 80290a6:	6870      	ldr	r0, [r6, #4]
 80290a8:	8862      	ldrh	r2, [r4, #2]
 80290aa:	4bc7      	ldr	r3, [pc, #796]	; (80293c8 <GATT_ClientEventCallback+0x3e8>)
 80290ac:	6801      	ldr	r1, [r0, #0]
 80290ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80290b0:	6800      	ldr	r0, [r0, #0]
 80290b2:	f000 fc07 	bl	80298c4 <GATT_Read_Value_Request>
 80290b6:	2800      	cmp	r0, #0
 80290b8:	dd01      	ble.n	80290be <GATT_ClientEventCallback+0xde>
 80290ba:	f88d a01d 	strb.w	sl, [sp, #29]
 80290be:	8860      	ldrh	r0, [r4, #2]
 80290c0:	f8ad 0020 	strh.w	r0, [sp, #32]
 80290c4:	88a0      	ldrh	r0, [r4, #4]
 80290c6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80290ca:	8820      	ldrh	r0, [r4, #0]
 80290cc:	f8ad 001e 	strh.w	r0, [sp, #30]
 80290d0:	8820      	ldrh	r0, [r4, #0]
 80290d2:	4558      	cmp	r0, fp
 80290d4:	d002      	beq.n	80290dc <GATT_ClientEventCallback+0xfc>
 80290d6:	1c40      	adds	r0, r0, #1
 80290d8:	fa1f f980 	uxth.w	r9, r0
 80290dc:	2018      	movs	r0, #24
 80290de:	f107 011c 	add.w	r1, r7, #28
 80290e2:	aa03      	add	r2, sp, #12
 80290e4:	231c      	movs	r3, #28
 80290e6:	e000      	b.n	80290ea <GATT_ClientEventCallback+0x10a>
 80290e8:	e16a      	b.n	80293c0 <GATT_ClientEventCallback+0x3e0>
 80290ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80290ee:	2214      	movs	r2, #20
 80290f0:	2103      	movs	r1, #3
 80290f2:	4618      	mov	r0, r3
 80290f4:	f7ef fca6 	bl	8018a44 <BSC_AddGenericListEntry>
 80290f8:	b328      	cbz	r0, 8029146 <GATT_ClientEventCallback+0x166>
 80290fa:	69b8      	ldr	r0, [r7, #24]
 80290fc:	1c40      	adds	r0, r0, #1
 80290fe:	61b8      	str	r0, [r7, #24]
 8029100:	79a0      	ldrb	r0, [r4, #6]
 8029102:	b300      	cbz	r0, 8029146 <GATT_ClientEventCallback+0x166>
 8029104:	2230      	movs	r2, #48	; 0x30
 8029106:	2100      	movs	r1, #0
 8029108:	a803      	add	r0, sp, #12
 802910a:	f7ea f9d8 	bl	80134be <BTPS_MemInitialize>
 802910e:	2211      	movs	r2, #17
 8029110:	1de1      	adds	r1, r4, #7
 8029112:	a803      	add	r0, sp, #12
 8029114:	f7ea fe35 	bl	8013d82 <__aeabi_memcpy>
 8029118:	8860      	ldrh	r0, [r4, #2]
 802911a:	f8ad 001e 	strh.w	r0, [sp, #30]
 802911e:	88a0      	ldrh	r0, [r4, #4]
 8029120:	f8ad 0020 	strh.w	r0, [sp, #32]
 8029124:	1de1      	adds	r1, r4, #7
 8029126:	4628      	mov	r0, r5
 8029128:	f7fe ff54 	bl	8027fd4 <CompareServiceToServiceList>
 802912c:	b158      	cbz	r0, 8029146 <GATT_ClientEventCallback+0x166>
 802912e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8029132:	f105 0010 	add.w	r0, r5, #16
 8029136:	f001 fbe3 	bl	802a900 <SearchServiceHandleInfoEntry>
 802913a:	b920      	cbnz	r0, 8029146 <GATT_ClientEventCallback+0x166>
 802913c:	a903      	add	r1, sp, #12
 802913e:	f105 0014 	add.w	r0, r5, #20
 8029142:	f7fe fccd 	bl	8027ae0 <AddDiscoveredServiceInfoEntry>
 8029146:	f108 0801 	add.w	r8, r8, #1
 802914a:	3418      	adds	r4, #24
 802914c:	6870      	ldr	r0, [r6, #4]
 802914e:	8a01      	ldrh	r1, [r0, #16]
 8029150:	4541      	cmp	r1, r8
 8029152:	d899      	bhi.n	8029088 <GATT_ClientEventCallback+0xa8>
 8029154:	8ab9      	ldrh	r1, [r7, #20]
 8029156:	4549      	cmp	r1, r9
 8029158:	d986      	bls.n	8029068 <GATT_ClientEventCallback+0x88>
 802915a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802915c:	464b      	mov	r3, r9
 802915e:	463a      	mov	r2, r7
 8029160:	6800      	ldr	r0, [r0, #0]
 8029162:	4629      	mov	r1, r5
 8029164:	f000 ff4e 	bl	802a004 <IncludeDiscoveryRequest>
 8029168:	e126      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 802916a:	6870      	ldr	r0, [r6, #4]
 802916c:	2800      	cmp	r0, #0
 802916e:	d0fb      	beq.n	8029168 <GATT_ClientEventCallback+0x188>
 8029170:	6968      	ldr	r0, [r5, #20]
 8029172:	2800      	cmp	r0, #0
 8029174:	d0f8      	beq.n	8029168 <GATT_ClientEventCallback+0x188>
 8029176:	69c4      	ldr	r4, [r0, #28]
 8029178:	e00a      	b.n	8029190 <GATT_ClientEventCallback+0x1b0>
 802917a:	7c60      	ldrb	r0, [r4, #17]
 802917c:	b138      	cbz	r0, 802918e <GATT_ClientEventCallback+0x1ae>
 802917e:	2c00      	cmp	r4, #0
 8029180:	d0f2      	beq.n	8029168 <GATT_ClientEventCallback+0x188>
 8029182:	7461      	strb	r1, [r4, #17]
 8029184:	6870      	ldr	r0, [r6, #4]
 8029186:	8a00      	ldrh	r0, [r0, #16]
 8029188:	2810      	cmp	r0, #16
 802918a:	d004      	beq.n	8029196 <GATT_ClientEventCallback+0x1b6>
 802918c:	e114      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 802918e:	69a4      	ldr	r4, [r4, #24]
 8029190:	2c00      	cmp	r4, #0
 8029192:	d1f2      	bne.n	802917a <GATT_ClientEventCallback+0x19a>
 8029194:	e110      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029196:	f884 a000 	strb.w	sl, [r4]
 802919a:	6870      	ldr	r0, [r6, #4]
 802919c:	8a02      	ldrh	r2, [r0, #16]
 802919e:	6941      	ldr	r1, [r0, #20]
 80291a0:	1c60      	adds	r0, r4, #1
 80291a2:	f7ea f988 	bl	80134b6 <BTPS_MemCopy>
 80291a6:	2230      	movs	r2, #48	; 0x30
 80291a8:	2100      	movs	r1, #0
 80291aa:	a803      	add	r0, sp, #12
 80291ac:	f7ea f987 	bl	80134be <BTPS_MemInitialize>
 80291b0:	2211      	movs	r2, #17
 80291b2:	4621      	mov	r1, r4
 80291b4:	a803      	add	r0, sp, #12
 80291b6:	f7ea fde4 	bl	8013d82 <__aeabi_memcpy>
 80291ba:	8aa0      	ldrh	r0, [r4, #20]
 80291bc:	f8ad 001e 	strh.w	r0, [sp, #30]
 80291c0:	8ae0      	ldrh	r0, [r4, #22]
 80291c2:	f8ad 0020 	strh.w	r0, [sp, #32]
 80291c6:	4621      	mov	r1, r4
 80291c8:	4628      	mov	r0, r5
 80291ca:	f7fe ff03 	bl	8027fd4 <CompareServiceToServiceList>
 80291ce:	2800      	cmp	r0, #0
 80291d0:	d0ca      	beq.n	8029168 <GATT_ClientEventCallback+0x188>
 80291d2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80291d6:	f105 0010 	add.w	r0, r5, #16
 80291da:	f001 fb91 	bl	802a900 <SearchServiceHandleInfoEntry>
 80291de:	2800      	cmp	r0, #0
 80291e0:	d1c2      	bne.n	8029168 <GATT_ClientEventCallback+0x188>
 80291e2:	a903      	add	r1, sp, #12
 80291e4:	f105 0014 	add.w	r0, r5, #20
 80291e8:	f7fe fc7a 	bl	8027ae0 <AddDiscoveredServiceInfoEntry>
 80291ec:	e0e4      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 80291ee:	6870      	ldr	r0, [r6, #4]
 80291f0:	2800      	cmp	r0, #0
 80291f2:	d0b9      	beq.n	8029168 <GATT_ClientEventCallback+0x188>
 80291f4:	46d8      	mov	r8, fp
 80291f6:	2700      	movs	r7, #0
 80291f8:	46c1      	mov	r9, r8
 80291fa:	6944      	ldr	r4, [r0, #20]
 80291fc:	e02a      	b.n	8029254 <GATT_ClientEventCallback+0x274>
 80291fe:	e08a      	b.n	8029316 <GATT_ClientEventCallback+0x336>
 8029200:	e043      	b.n	802928a <GATT_ClientEventCallback+0x2aa>
 8029202:	2230      	movs	r2, #48	; 0x30
 8029204:	2100      	movs	r1, #0
 8029206:	a803      	add	r0, sp, #12
 8029208:	f7ea f959 	bl	80134be <BTPS_MemInitialize>
 802920c:	2211      	movs	r2, #17
 802920e:	1d21      	adds	r1, r4, #4
 8029210:	a803      	add	r0, sp, #12
 8029212:	f7ea fdb6 	bl	8013d82 <__aeabi_memcpy>
 8029216:	8820      	ldrh	r0, [r4, #0]
 8029218:	f8ad 001e 	strh.w	r0, [sp, #30]
 802921c:	8860      	ldrh	r0, [r4, #2]
 802921e:	f8ad 0020 	strh.w	r0, [sp, #32]
 8029222:	8860      	ldrh	r0, [r4, #2]
 8029224:	4548      	cmp	r0, r9
 8029226:	d002      	beq.n	802922e <GATT_ClientEventCallback+0x24e>
 8029228:	1c40      	adds	r0, r0, #1
 802922a:	fa1f f880 	uxth.w	r8, r0
 802922e:	1d21      	adds	r1, r4, #4
 8029230:	4628      	mov	r0, r5
 8029232:	f7fe fecf 	bl	8027fd4 <CompareServiceToServiceList>
 8029236:	b158      	cbz	r0, 8029250 <GATT_ClientEventCallback+0x270>
 8029238:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802923c:	f105 0010 	add.w	r0, r5, #16
 8029240:	f001 fb5e 	bl	802a900 <SearchServiceHandleInfoEntry>
 8029244:	b920      	cbnz	r0, 8029250 <GATT_ClientEventCallback+0x270>
 8029246:	a903      	add	r1, sp, #12
 8029248:	f105 0014 	add.w	r0, r5, #20
 802924c:	f7fe fc48 	bl	8027ae0 <AddDiscoveredServiceInfoEntry>
 8029250:	3416      	adds	r4, #22
 8029252:	1c7f      	adds	r7, r7, #1
 8029254:	6870      	ldr	r0, [r6, #4]
 8029256:	8a00      	ldrh	r0, [r0, #16]
 8029258:	42b8      	cmp	r0, r7
 802925a:	d8d2      	bhi.n	8029202 <GATT_ClientEventCallback+0x222>
 802925c:	45c8      	cmp	r8, r9
 802925e:	f43f af03 	beq.w	8029068 <GATT_ClientEventCallback+0x88>
 8029262:	896b      	ldrh	r3, [r5, #10]
 8029264:	4543      	cmp	r3, r8
 8029266:	f4ff aeff 	bcc.w	8029068 <GATT_ClientEventCallback+0x88>
 802926a:	6829      	ldr	r1, [r5, #0]
 802926c:	4856      	ldr	r0, [pc, #344]	; (80293c8 <GATT_ClientEventCallback+0x3e8>)
 802926e:	e9cd 0100 	strd	r0, r1, [sp]
 8029272:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8029274:	4642      	mov	r2, r8
 8029276:	6800      	ldr	r0, [r0, #0]
 8029278:	f000 f8fe 	bl	8029478 <GATT_Discover_Services>
 802927c:	2800      	cmp	r0, #0
 802927e:	dd01      	ble.n	8029284 <GATT_ClientEventCallback+0x2a4>
 8029280:	6068      	str	r0, [r5, #4]
 8029282:	e099      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029284:	2203      	movs	r2, #3
 8029286:	6829      	ldr	r1, [r5, #0]
 8029288:	e6ea      	b.n	8029060 <GATT_ClientEventCallback+0x80>
 802928a:	6870      	ldr	r0, [r6, #4]
 802928c:	2800      	cmp	r0, #0
 802928e:	d03e      	beq.n	802930e <GATT_ClientEventCallback+0x32e>
 8029290:	696f      	ldr	r7, [r5, #20]
 8029292:	b3e7      	cbz	r7, 802930e <GATT_ClientEventCallback+0x32e>
 8029294:	f8b7 9014 	ldrh.w	r9, [r7, #20]
 8029298:	f04f 0800 	mov.w	r8, #0
 802929c:	6944      	ldr	r4, [r0, #20]
 802929e:	e026      	b.n	80292ee <GATT_ClientEventCallback+0x30e>
 80292a0:	2224      	movs	r2, #36	; 0x24
 80292a2:	2100      	movs	r1, #0
 80292a4:	a803      	add	r0, sp, #12
 80292a6:	f7ea f90a 	bl	80134be <BTPS_MemInitialize>
 80292aa:	8820      	ldrh	r0, [r4, #0]
 80292ac:	f8ad 001e 	strh.w	r0, [sp, #30]
 80292b0:	2211      	movs	r2, #17
 80292b2:	1da1      	adds	r1, r4, #6
 80292b4:	a803      	add	r0, sp, #12
 80292b6:	f7ea fd64 	bl	8013d82 <__aeabi_memcpy>
 80292ba:	88a0      	ldrh	r0, [r4, #4]
 80292bc:	f8ad 0020 	strh.w	r0, [sp, #32]
 80292c0:	78a1      	ldrb	r1, [r4, #2]
 80292c2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 80292c6:	4681      	mov	r9, r0
 80292c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80292cc:	aa03      	add	r2, sp, #12
 80292ce:	2020      	movs	r0, #32
 80292d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80292d4:	2324      	movs	r3, #36	; 0x24
 80292d6:	2214      	movs	r2, #20
 80292d8:	2103      	movs	r1, #3
 80292da:	4618      	mov	r0, r3
 80292dc:	f7ef fbb2 	bl	8018a44 <BSC_AddGenericListEntry>
 80292e0:	b110      	cbz	r0, 80292e8 <GATT_ClientEventCallback+0x308>
 80292e2:	6a38      	ldr	r0, [r7, #32]
 80292e4:	1c40      	adds	r0, r0, #1
 80292e6:	6238      	str	r0, [r7, #32]
 80292e8:	f108 0801 	add.w	r8, r8, #1
 80292ec:	3418      	adds	r4, #24
 80292ee:	6870      	ldr	r0, [r6, #4]
 80292f0:	8a01      	ldrh	r1, [r0, #16]
 80292f2:	4541      	cmp	r1, r8
 80292f4:	d8d4      	bhi.n	80292a0 <GATT_ClientEventCallback+0x2c0>
 80292f6:	8ab9      	ldrh	r1, [r7, #20]
 80292f8:	4549      	cmp	r1, r9
 80292fa:	f67f aeb5 	bls.w	8029068 <GATT_ClientEventCallback+0x88>
 80292fe:	f109 0001 	add.w	r0, r9, #1
 8029302:	b283      	uxth	r3, r0
 8029304:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8029306:	463a      	mov	r2, r7
 8029308:	4629      	mov	r1, r5
 802930a:	6800      	ldr	r0, [r0, #0]
 802930c:	e000      	b.n	8029310 <GATT_ClientEventCallback+0x330>
 802930e:	e043      	b.n	8029398 <GATT_ClientEventCallback+0x3b8>
 8029310:	f7fe fd54 	bl	8027dbc <CharacteristicDiscoveryRequest>
 8029314:	e050      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029316:	6870      	ldr	r0, [r6, #4]
 8029318:	b3f0      	cbz	r0, 8029398 <GATT_ClientEventCallback+0x3b8>
 802931a:	f8d5 9014 	ldr.w	r9, [r5, #20]
 802931e:	ea5f 0009 	movs.w	r0, r9
 8029322:	d049      	beq.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029324:	f8b9 1016 	ldrh.w	r1, [r9, #22]
 8029328:	3028      	adds	r0, #40	; 0x28
 802932a:	f001 fa9f 	bl	802a86c <SearchCharacteristicInfoEntry>
 802932e:	ea5f 0800 	movs.w	r8, r0
 8029332:	d041      	beq.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 8029334:	6870      	ldr	r0, [r6, #4]
 8029336:	2700      	movs	r7, #0
 8029338:	46ba      	mov	sl, r7
 802933a:	6944      	ldr	r4, [r0, #20]
 802933c:	e02b      	b.n	8029396 <GATT_ClientEventCallback+0x3b6>
 802933e:	2218      	movs	r2, #24
 8029340:	2100      	movs	r1, #0
 8029342:	a803      	add	r0, sp, #12
 8029344:	f7ea f8bb 	bl	80134be <BTPS_MemInitialize>
 8029348:	2211      	movs	r2, #17
 802934a:	1ca1      	adds	r1, r4, #2
 802934c:	a803      	add	r0, sp, #12
 802934e:	f7ea fd18 	bl	8013d82 <__aeabi_memcpy>
 8029352:	8820      	ldrh	r0, [r4, #0]
 8029354:	f8ad 001e 	strh.w	r0, [sp, #30]
 8029358:	8827      	ldrh	r7, [r4, #0]
 802935a:	455f      	cmp	r7, fp
 802935c:	d201      	bcs.n	8029362 <GATT_ClientEventCallback+0x382>
 802935e:	1c7f      	adds	r7, r7, #1
 8029360:	b2bf      	uxth	r7, r7
 8029362:	f108 011c 	add.w	r1, r8, #28
 8029366:	aa03      	add	r2, sp, #12
 8029368:	2014      	movs	r0, #20
 802936a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802936e:	2318      	movs	r3, #24
 8029370:	2212      	movs	r2, #18
 8029372:	2103      	movs	r1, #3
 8029374:	4618      	mov	r0, r3
 8029376:	f7ef fb65 	bl	8018a44 <BSC_AddGenericListEntry>
 802937a:	b148      	cbz	r0, 8029390 <GATT_ClientEventCallback+0x3b0>
 802937c:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8029380:	1c40      	adds	r0, r0, #1
 8029382:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
 8029386:	f8d8 0018 	ldr.w	r0, [r8, #24]
 802938a:	1c40      	adds	r0, r0, #1
 802938c:	f8c8 0018 	str.w	r0, [r8, #24]
 8029390:	f10a 0a01 	add.w	sl, sl, #1
 8029394:	3414      	adds	r4, #20
 8029396:	e000      	b.n	802939a <GATT_ClientEventCallback+0x3ba>
 8029398:	e00e      	b.n	80293b8 <GATT_ClientEventCallback+0x3d8>
 802939a:	6870      	ldr	r0, [r6, #4]
 802939c:	8a01      	ldrh	r1, [r0, #16]
 802939e:	4551      	cmp	r1, sl
 80293a0:	d8cd      	bhi.n	802933e <GATT_ClientEventCallback+0x35e>
 80293a2:	9700      	str	r7, [sp, #0]
 80293a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80293a6:	4643      	mov	r3, r8
 80293a8:	464a      	mov	r2, r9
 80293aa:	6800      	ldr	r0, [r0, #0]
 80293ac:	4629      	mov	r1, r5
 80293ae:	f7fe fcbb 	bl	8027d28 <CharacteristicDescriptorDiscoveryRequest>
 80293b2:	2800      	cmp	r0, #0
 80293b4:	f43f ae58 	beq.w	8029068 <GATT_ClientEventCallback+0x88>
 80293b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80293ba:	6800      	ldr	r0, [r0, #0]
 80293bc:	f7ef ffc2 	bl	8019344 <BSC_UnLockBluetoothStack>
 80293c0:	b011      	add	sp, #68	; 0x44
 80293c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293c6:	0000      	.short	0x0000
 80293c8:	08028fe1 	.word	0x08028fe1

Disassembly of section i.GATT_Discover_Characteristic_Descriptors:

080293cc <GATT_Discover_Characteristic_Descriptors>:
 80293cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80293ce:	b087      	sub	sp, #28
 80293d0:	461c      	mov	r4, r3
 80293d2:	2304      	movs	r3, #4
 80293d4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 80293d8:	4f06      	ldr	r7, [pc, #24]	; (80293f4 <GATT_Discover_Characteristic_Descriptors+0x28>)
 80293da:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80293de:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80293e2:	e9cd 4600 	strd	r4, r6, [sp]
 80293e6:	4613      	mov	r3, r2
 80293e8:	2200      	movs	r2, #0
 80293ea:	f7fe fdc3 	bl	8027f74 <ClientRequestWithUUID>
 80293ee:	b007      	add	sp, #28
 80293f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80293f2:	0000      	.short	0x0000
 80293f4:	0802824f 	.word	0x0802824f

Disassembly of section i.GATT_Discover_Characteristics:

080293f8 <GATT_Discover_Characteristics>:
 80293f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80293fa:	b08b      	sub	sp, #44	; 0x2c
 80293fc:	461c      	mov	r4, r3
 80293fe:	e9dd 6510 	ldrd	r6, r5, [sp, #64]	; 0x40
 8029402:	2300      	movs	r3, #0
 8029404:	f88d 3018 	strb.w	r3, [sp, #24]
 8029408:	2303      	movs	r3, #3
 802940a:	f88d 3019 	strb.w	r3, [sp, #25]
 802940e:	2728      	movs	r7, #40	; 0x28
 8029410:	f88d 701a 	strb.w	r7, [sp, #26]
 8029414:	4f07      	ldr	r7, [pc, #28]	; (8029434 <GATT_Discover_Characteristics+0x3c>)
 8029416:	f04f 0c08 	mov.w	ip, #8
 802941a:	e9cd c704 	strd	ip, r7, [sp, #16]
 802941e:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8029422:	e9cd 4600 	strd	r4, r6, [sp]
 8029426:	4613      	mov	r3, r2
 8029428:	aa06      	add	r2, sp, #24
 802942a:	f7fe fda3 	bl	8027f74 <ClientRequestWithUUID>
 802942e:	b00b      	add	sp, #44	; 0x2c
 8029430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029432:	0000      	.short	0x0000
 8029434:	08027de1 	.word	0x08027de1

Disassembly of section i.GATT_Discover_Included_Services:

08029438 <GATT_Discover_Included_Services>:
 8029438:	b5f0      	push	{r4, r5, r6, r7, lr}
 802943a:	b08b      	sub	sp, #44	; 0x2c
 802943c:	461c      	mov	r4, r3
 802943e:	e9dd 6510 	ldrd	r6, r5, [sp, #64]	; 0x40
 8029442:	2300      	movs	r3, #0
 8029444:	f88d 3018 	strb.w	r3, [sp, #24]
 8029448:	2302      	movs	r3, #2
 802944a:	f88d 3019 	strb.w	r3, [sp, #25]
 802944e:	2728      	movs	r7, #40	; 0x28
 8029450:	f88d 701a 	strb.w	r7, [sp, #26]
 8029454:	4f07      	ldr	r7, [pc, #28]	; (8029474 <GATT_Discover_Included_Services+0x3c>)
 8029456:	f04f 0c08 	mov.w	ip, #8
 802945a:	e9cd c704 	strd	ip, r7, [sp, #16]
 802945e:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8029462:	e9cd 4600 	strd	r4, r6, [sp]
 8029466:	4613      	mov	r3, r2
 8029468:	aa06      	add	r2, sp, #24
 802946a:	f7fe fd83 	bl	8027f74 <ClientRequestWithUUID>
 802946e:	b00b      	add	sp, #44	; 0x2c
 8029470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029472:	0000      	.short	0x0000
 8029474:	080288f1 	.word	0x080288f1

Disassembly of section i.GATT_Discover_Services:

08029478 <GATT_Discover_Services>:
 8029478:	b5f0      	push	{r4, r5, r6, r7, lr}
 802947a:	b08b      	sub	sp, #44	; 0x2c
 802947c:	461e      	mov	r6, r3
 802947e:	e9dd 4c10 	ldrd	r4, ip, [sp, #64]	; 0x40
 8029482:	2300      	movs	r3, #0
 8029484:	f88d 3018 	strb.w	r3, [sp, #24]
 8029488:	f88d 3019 	strb.w	r3, [sp, #25]
 802948c:	2528      	movs	r5, #40	; 0x28
 802948e:	f88d 501a 	strb.w	r5, [sp, #26]
 8029492:	4d07      	ldr	r5, [pc, #28]	; (80294b0 <GATT_Discover_Services+0x38>)
 8029494:	9600      	str	r6, [sp, #0]
 8029496:	2710      	movs	r7, #16
 8029498:	9505      	str	r5, [sp, #20]
 802949a:	e9cd 3703 	strd	r3, r7, [sp, #12]
 802949e:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 80294a2:	4613      	mov	r3, r2
 80294a4:	aa06      	add	r2, sp, #24
 80294a6:	f7fe fd65 	bl	8027f74 <ClientRequestWithUUID>
 80294aa:	b00b      	add	sp, #44	; 0x2c
 80294ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80294ae:	0000      	.short	0x0000
 80294b0:	080282f9 	.word	0x080282f9

Disassembly of section i.GATT_Error_Response:

080294b4 <GATT_Error_Response>:
 80294b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80294b8:	001d      	movs	r5, r3
 80294ba:	4616      	mov	r6, r2
 80294bc:	4680      	mov	r8, r0
 80294be:	d04b      	beq.n	8029558 <GATT_Error_Response+0xa4>
 80294c0:	4603      	mov	r3, r0
 80294c2:	9100      	str	r1, [sp, #0]
 80294c4:	aa03      	add	r2, sp, #12
 80294c6:	a901      	add	r1, sp, #4
 80294c8:	a802      	add	r0, sp, #8
 80294ca:	f7fe fabb 	bl	8027a44 <AcquireGATTStackConnectionInformationByServerTransactionID>
 80294ce:	0004      	movs	r4, r0
 80294d0:	d144      	bne.n	802955c <GATT_Error_Response+0xa8>
 80294d2:	9a03      	ldr	r2, [sp, #12]
 80294d4:	7a10      	ldrb	r0, [r2, #8]
 80294d6:	280e      	cmp	r0, #14
 80294d8:	d23b      	bcs.n	8029552 <GATT_Error_Response+0x9e>
 80294da:	e8df f000 	tbb	[pc, r0]
 80294de:	3a07      	.short	0x3a07
 80294e0:	073a3a3a 	.word	0x073a3a3a
 80294e4:	07070707 	.word	0x07070707
 80294e8:	322b2121 	.word	0x322b2121
 80294ec:	7a54      	ldrb	r4, [r2, #9]
 80294ee:	2100      	movs	r1, #0
 80294f0:	f102 0014 	add.w	r0, r2, #20
 80294f4:	f000 fc7c 	bl	8029df0 <GetNextHandleInfoEntry>
 80294f8:	4f1a      	ldr	r7, [pc, #104]	; (8029564 <GATT_Error_Response+0xb0>)
 80294fa:	b180      	cbz	r0, 802951e <GATT_Error_Response+0x6a>
 80294fc:	6881      	ldr	r1, [r0, #8]
 80294fe:	9802      	ldr	r0, [sp, #8]
 8029500:	3034      	adds	r0, #52	; 0x34
 8029502:	f001 fa07 	bl	802a914 <SearchServiceInfoEntry>
 8029506:	b150      	cbz	r0, 802951e <GATT_Error_Response+0x6a>
 8029508:	8980      	ldrh	r0, [r0, #12]
 802950a:	9500      	str	r5, [sp, #0]
 802950c:	4430      	add	r0, r6
 802950e:	b283      	uxth	r3, r0
 8029510:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8029514:	4622      	mov	r2, r4
 8029516:	f7ff fce4 	bl	8028ee2 <GATTErrorResponsePDU>
 802951a:	4604      	mov	r4, r0
 802951c:	e000      	b.n	8029520 <GATT_Error_Response+0x6c>
 802951e:	463c      	mov	r4, r7
 8029520:	9803      	ldr	r0, [sp, #12]
 8029522:	6801      	ldr	r1, [r0, #0]
 8029524:	9801      	ldr	r0, [sp, #4]
 8029526:	3010      	adds	r0, #16
 8029528:	f7fe fe46 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802952c:	4640      	mov	r0, r8
 802952e:	f7ef ff09 	bl	8019344 <BSC_UnLockBluetoothStack>
 8029532:	e013      	b.n	802955c <GATT_Error_Response+0xa8>
 8029534:	9500      	str	r5, [sp, #0]
 8029536:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 802953a:	4633      	mov	r3, r6
 802953c:	f000 fdf0 	bl	802a120 <PrepareWriteRequestResponse>
 8029540:	e005      	b.n	802954e <GATT_Error_Response+0x9a>
 8029542:	9500      	str	r5, [sp, #0]
 8029544:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8029548:	4633      	mov	r3, r6
 802954a:	f7ff f97b 	bl	8028844 <ExecuteWriteRequestResponse>
 802954e:	4604      	mov	r4, r0
 8029550:	e7ec      	b.n	802952c <GATT_Error_Response+0x78>
 8029552:	4c04      	ldr	r4, [pc, #16]	; (8029564 <GATT_Error_Response+0xb0>)
 8029554:	1c64      	adds	r4, r4, #1
 8029556:	e7e9      	b.n	802952c <GATT_Error_Response+0x78>
 8029558:	4c02      	ldr	r4, [pc, #8]	; (8029564 <GATT_Error_Response+0xb0>)
 802955a:	3408      	adds	r4, #8
 802955c:	b004      	add	sp, #16
 802955e:	4620      	mov	r0, r4
 8029560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029564:	fffffc10 	.word	0xfffffc10

Disassembly of section i.GATT_Exchange_MTU_Request:

08029568 <GATT_Exchange_MTU_Request>:
 8029568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802956c:	b08a      	sub	sp, #40	; 0x28
 802956e:	4682      	mov	sl, r0
 8029570:	f1a2 0018 	sub.w	r0, r2, #24
 8029574:	4e1a      	ldr	r6, [pc, #104]	; (80295e0 <GATT_Exchange_MTU_Request+0x78>)
 8029576:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 802957a:	461f      	mov	r7, r3
 802957c:	4615      	mov	r5, r2
 802957e:	4689      	mov	r9, r1
 8029580:	f5b0 7ff7 	cmp.w	r0, #494	; 0x1ee
 8029584:	d226      	bcs.n	80295d4 <GATT_Exchange_MTU_Request+0x6c>
 8029586:	460b      	mov	r3, r1
 8029588:	4652      	mov	r2, sl
 802958a:	a908      	add	r1, sp, #32
 802958c:	a807      	add	r0, sp, #28
 802958e:	f7fe fa39 	bl	8027a04 <AcquireGATTStackConnectionInformationByConnectionID>
 8029592:	0004      	movs	r4, r0
 8029594:	d11f      	bne.n	80295d6 <GATT_Exchange_MTU_Request+0x6e>
 8029596:	9808      	ldr	r0, [sp, #32]
 8029598:	7900      	ldrb	r0, [r0, #4]
 802959a:	b9b0      	cbnz	r0, 80295ca <GATT_Exchange_MTU_Request+0x62>
 802959c:	9807      	ldr	r0, [sp, #28]
 802959e:	8940      	ldrh	r0, [r0, #10]
 80295a0:	42a8      	cmp	r0, r5
 80295a2:	d312      	bcc.n	80295ca <GATT_Exchange_MTU_Request+0x62>
 80295a4:	2000      	movs	r0, #0
 80295a6:	2202      	movs	r2, #2
 80295a8:	2310      	movs	r3, #16
 80295aa:	9000      	str	r0, [sp, #0]
 80295ac:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80295b0:	490c      	ldr	r1, [pc, #48]	; (80295e4 <GATT_Exchange_MTU_Request+0x7c>)
 80295b2:	9106      	str	r1, [sp, #24]
 80295b4:	ac01      	add	r4, sp, #4
 80295b6:	4603      	mov	r3, r0
 80295b8:	e884 0181 	stmia.w	r4, {r0, r7, r8}
 80295bc:	462a      	mov	r2, r5
 80295be:	4649      	mov	r1, r9
 80295c0:	4650      	mov	r0, sl
 80295c2:	f7fe fc67 	bl	8027e94 <ClientRequestWithData>
 80295c6:	4604      	mov	r4, r0
 80295c8:	e000      	b.n	80295cc <GATT_Exchange_MTU_Request+0x64>
 80295ca:	4634      	mov	r4, r6
 80295cc:	4650      	mov	r0, sl
 80295ce:	f7ef feb9 	bl	8019344 <BSC_UnLockBluetoothStack>
 80295d2:	e000      	b.n	80295d6 <GATT_Exchange_MTU_Request+0x6e>
 80295d4:	4634      	mov	r4, r6
 80295d6:	b00a      	add	sp, #40	; 0x28
 80295d8:	4620      	mov	r0, r4
 80295da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80295de:	0000      	.short	0x0000
 80295e0:	fffffc18 	.word	0xfffffc18
 80295e4:	080285c1 	.word	0x080285c1

Disassembly of section i.GATT_Handle_Value_Notification:

080295e8 <GATT_Handle_Value_Notification>:
 80295e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80295ec:	461f      	mov	r7, r3
 80295ee:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80295f2:	4689      	mov	r9, r1
 80295f4:	4680      	mov	r8, r0
 80295f6:	b105      	cbz	r5, 80295fa <GATT_Handle_Value_Notification+0x12>
 80295f8:	b3a6      	cbz	r6, 8029664 <GATT_Handle_Value_Notification+0x7c>
 80295fa:	4613      	mov	r3, r2
 80295fc:	4602      	mov	r2, r0
 80295fe:	a903      	add	r1, sp, #12
 8029600:	a802      	add	r0, sp, #8
 8029602:	f7fe f9ff 	bl	8027a04 <AcquireGATTStackConnectionInformationByConnectionID>
 8029606:	0004      	movs	r4, r0
 8029608:	d12f      	bne.n	802966a <GATT_Handle_Value_Notification+0x82>
 802960a:	9802      	ldr	r0, [sp, #8]
 802960c:	4649      	mov	r1, r9
 802960e:	3034      	adds	r0, #52	; 0x34
 8029610:	f001 f980 	bl	802a914 <SearchServiceInfoEntry>
 8029614:	4c17      	ldr	r4, [pc, #92]	; (8029674 <GATT_Handle_Value_Notification+0x8c>)
 8029616:	b308      	cbz	r0, 802965c <GATT_Handle_Value_Notification+0x74>
 8029618:	8981      	ldrh	r1, [r0, #12]
 802961a:	89c0      	ldrh	r0, [r0, #14]
 802961c:	4439      	add	r1, r7
 802961e:	b28a      	uxth	r2, r1
 8029620:	4290      	cmp	r0, r2
 8029622:	d31b      	bcc.n	802965c <GATT_Handle_Value_Notification+0x74>
 8029624:	9802      	ldr	r0, [sp, #8]
 8029626:	68c4      	ldr	r4, [r0, #12]
 8029628:	9803      	ldr	r0, [sp, #12]
 802962a:	340c      	adds	r4, #12
 802962c:	8980      	ldrh	r0, [r0, #12]
 802962e:	1ec0      	subs	r0, r0, #3
 8029630:	b280      	uxth	r0, r0
 8029632:	4285      	cmp	r5, r0
 8029634:	d900      	bls.n	8029638 <GATT_Handle_Value_Notification+0x50>
 8029636:	4605      	mov	r5, r0
 8029638:	e9cd 5600 	strd	r5, r6, [sp]
 802963c:	2300      	movs	r3, #0
 802963e:	211b      	movs	r1, #27
 8029640:	4620      	mov	r0, r4
 8029642:	f7fe fb17 	bl	8027c74 <BuildPacketByteTwoWordsVariable>
 8029646:	9a02      	ldr	r2, [sp, #8]
 8029648:	1ceb      	adds	r3, r5, #3
 802964a:	4610      	mov	r0, r2
 802964c:	9400      	str	r4, [sp, #0]
 802964e:	3220      	adds	r2, #32
 8029650:	9903      	ldr	r1, [sp, #12]
 8029652:	f000 fd31 	bl	802a0b8 <L2CAPSendPDU>
 8029656:	0004      	movs	r4, r0
 8029658:	d100      	bne.n	802965c <GATT_Handle_Value_Notification+0x74>
 802965a:	462c      	mov	r4, r5
 802965c:	4640      	mov	r0, r8
 802965e:	f7ef fe71 	bl	8019344 <BSC_UnLockBluetoothStack>
 8029662:	e002      	b.n	802966a <GATT_Handle_Value_Notification+0x82>
 8029664:	e7ff      	b.n	8029666 <GATT_Handle_Value_Notification+0x7e>
 8029666:	4c03      	ldr	r4, [pc, #12]	; (8029674 <GATT_Handle_Value_Notification+0x8c>)
 8029668:	3408      	adds	r4, #8
 802966a:	b004      	add	sp, #16
 802966c:	4620      	mov	r0, r4
 802966e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029672:	0000      	.short	0x0000
 8029674:	fffffc10 	.word	0xfffffc10

Disassembly of section i.GATT_Initialize:

08029678 <GATT_Initialize>:
 8029678:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802967c:	4690      	mov	r8, r2
 802967e:	4a4b      	ldr	r2, [pc, #300]	; (80297ac <GATT_Initialize+0x134>)
 8029680:	4681      	mov	r9, r0
 8029682:	4c4b      	ldr	r4, [pc, #300]	; (80297b0 <GATT_Initialize+0x138>)
 8029684:	7810      	ldrb	r0, [r2, #0]
 8029686:	469a      	mov	sl, r3
 8029688:	460e      	mov	r6, r1
 802968a:	b918      	cbnz	r0, 8029694 <GATT_Initialize+0x1c>
 802968c:	f000 fd08 	bl	802a0a0 <InitializeGATTModule>
 8029690:	7810      	ldrb	r0, [r2, #0]
 8029692:	b158      	cbz	r0, 80296ac <GATT_Initialize+0x34>
 8029694:	b156      	cbz	r6, 80296ac <GATT_Initialize+0x34>
 8029696:	f1b8 0f00 	cmp.w	r8, #0
 802969a:	d007      	beq.n	80296ac <GATT_Initialize+0x34>
 802969c:	07b0      	lsls	r0, r6, #30
 802969e:	d405      	bmi.n	80296ac <GATT_Initialize+0x34>
 80296a0:	4648      	mov	r0, r9
 80296a2:	f7ef fce9 	bl	8019078 <BSC_LockBluetoothStack>
 80296a6:	b120      	cbz	r0, 80296b2 <GATT_Initialize+0x3a>
 80296a8:	4c41      	ldr	r4, [pc, #260]	; (80297b0 <GATT_Initialize+0x138>)
 80296aa:	1f24      	subs	r4, r4, #4
 80296ac:	4620      	mov	r0, r4
 80296ae:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296b2:	f7ef f9bb 	bl	8018a2c <BSC_AcquireListLock>
 80296b6:	2800      	cmp	r0, #0
 80296b8:	d072      	beq.n	80297a0 <GATT_Initialize+0x128>
 80296ba:	4f3c      	ldr	r7, [pc, #240]	; (80297ac <GATT_Initialize+0x134>)
 80296bc:	464d      	mov	r5, r9
 80296be:	3714      	adds	r7, #20
 80296c0:	203c      	movs	r0, #60	; 0x3c
 80296c2:	f7e9 fe7b 	bl	80133bc <BTPS_AllocateMemory>
 80296c6:	0004      	movs	r4, r0
 80296c8:	d052      	beq.n	8029770 <GATT_Initialize+0xf8>
 80296ca:	223c      	movs	r2, #60	; 0x3c
 80296cc:	2100      	movs	r1, #0
 80296ce:	f7e9 fef6 	bl	80134be <BTPS_MemInitialize>
 80296d2:	6025      	str	r5, [r4, #0]
 80296d4:	463b      	mov	r3, r7
 80296d6:	2238      	movs	r2, #56	; 0x38
 80296d8:	2100      	movs	r1, #0
 80296da:	2007      	movs	r0, #7
 80296dc:	9400      	str	r4, [sp, #0]
 80296de:	f7ef f9e7 	bl	8018ab0 <BSC_AddGenericListEntry_Actual>
 80296e2:	b3e8      	cbz	r0, 8029760 <GATT_Initialize+0xe8>
 80296e4:	4649      	mov	r1, r9
 80296e6:	4638      	mov	r0, r7
 80296e8:	f001 f8ec 	bl	802a8c4 <SearchGATTContextInfoEntry>
 80296ec:	0005      	movs	r5, r0
 80296ee:	f46f 747b 	mvn.w	r4, #1004	; 0x3ec
 80296f2:	d042      	beq.n	802977a <GATT_Initialize+0x102>
 80296f4:	f7ef fcfe 	bl	80190f4 <BSC_ReleaseListLock>
 80296f8:	2700      	movs	r7, #0
 80296fa:	622f      	str	r7, [r5, #32]
 80296fc:	626f      	str	r7, [r5, #36]	; 0x24
 80296fe:	2083      	movs	r0, #131	; 0x83
 8029700:	62af      	str	r7, [r5, #40]	; 0x28
 8029702:	8168      	strh	r0, [r5, #10]
 8029704:	2090      	movs	r0, #144	; 0x90
 8029706:	f7e9 fe59 	bl	80133bc <BTPS_AllocateMemory>
 802970a:	60e8      	str	r0, [r5, #12]
 802970c:	b348      	cbz	r0, 8029762 <GATT_Initialize+0xea>
 802970e:	2030      	movs	r0, #48	; 0x30
 8029710:	f7e9 fe54 	bl	80133bc <BTPS_AllocateMemory>
 8029714:	6128      	str	r0, [r5, #16]
 8029716:	b320      	cbz	r0, 8029762 <GATT_Initialize+0xea>
 8029718:	2100      	movs	r1, #0
 802971a:	f105 0018 	add.w	r0, r5, #24
 802971e:	f7fe fcc1 	bl	80280a4 <CreateNewConnectionCallbackInfoEntry>
 8029722:	b1f0      	cbz	r0, 8029762 <GATT_Initialize+0xea>
 8029724:	e9c0 8a02 	strd	r8, sl, [r0, #8]
 8029728:	07f0      	lsls	r0, r6, #31
 802972a:	d009      	beq.n	8029740 <GATT_Initialize+0xc8>
 802972c:	4b21      	ldr	r3, [pc, #132]	; (80297b4 <GATT_Initialize+0x13c>)
 802972e:	2200      	movs	r2, #0
 8029730:	2104      	movs	r1, #4
 8029732:	4648      	mov	r0, r9
 8029734:	9700      	str	r7, [sp, #0]
 8029736:	f7f9 fa21 	bl	8022b7c <L2CA_Register_Fixed_Channel>
 802973a:	2800      	cmp	r0, #0
 802973c:	dd21      	ble.n	8029782 <GATT_Initialize+0x10a>
 802973e:	6068      	str	r0, [r5, #4]
 8029740:	83af      	strh	r7, [r5, #28]
 8029742:	83ef      	strh	r7, [r5, #30]
 8029744:	491c      	ldr	r1, [pc, #112]	; (80297b8 <GATT_Initialize+0x140>)
 8029746:	f105 001c 	add.w	r0, r5, #28
 802974a:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
 802974e:	4b1b      	ldr	r3, [pc, #108]	; (80297bc <GATT_Initialize+0x144>)
 8029750:	2201      	movs	r2, #1
 8029752:	2103      	movs	r1, #3
 8029754:	4648      	mov	r0, r9
 8029756:	f000 f8cb 	bl	80298f0 <GATT_Register_Service>
 802975a:	1e04      	subs	r4, r0, #0
 802975c:	dd10      	ble.n	8029780 <GATT_Initialize+0x108>
 802975e:	e001      	b.n	8029764 <GATT_Initialize+0xec>
 8029760:	e003      	b.n	802976a <GATT_Initialize+0xf2>
 8029762:	e00e      	b.n	8029782 <GATT_Initialize+0x10a>
 8029764:	2400      	movs	r4, #0
 8029766:	6328      	str	r0, [r5, #48]	; 0x30
 8029768:	e01c      	b.n	80297a4 <GATT_Initialize+0x12c>
 802976a:	4620      	mov	r0, r4
 802976c:	f7e9 fe40 	bl	80133f0 <BTPS_FreeMemory>
 8029770:	f7ef fcc0 	bl	80190f4 <BSC_ReleaseListLock>
 8029774:	4c0e      	ldr	r4, [pc, #56]	; (80297b0 <GATT_Initialize+0x138>)
 8029776:	1ea4      	subs	r4, r4, #2
 8029778:	e014      	b.n	80297a4 <GATT_Initialize+0x12c>
 802977a:	f7ef fcbb 	bl	80190f4 <BSC_ReleaseListLock>
 802977e:	e000      	b.n	8029782 <GATT_Initialize+0x10a>
 8029780:	d010      	beq.n	80297a4 <GATT_Initialize+0x12c>
 8029782:	f7ef f953 	bl	8018a2c <BSC_AcquireListLock>
 8029786:	b168      	cbz	r0, 80297a4 <GATT_Initialize+0x12c>
 8029788:	4808      	ldr	r0, [pc, #32]	; (80297ac <GATT_Initialize+0x134>)
 802978a:	4649      	mov	r1, r9
 802978c:	3014      	adds	r0, #20
 802978e:	f7fe fd1d 	bl	80281cc <DeleteGATTContextInfoEntry>
 8029792:	b108      	cbz	r0, 8029798 <GATT_Initialize+0x120>
 8029794:	f7ff fb30 	bl	8028df8 <FreeGATTContextInfoEntryMemory>
 8029798:	f7ef fcac 	bl	80190f4 <BSC_ReleaseListLock>
 802979c:	e002      	b.n	80297a4 <GATT_Initialize+0x12c>
 802979e:	e7ff      	b.n	80297a0 <GATT_Initialize+0x128>
 80297a0:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 80297a4:	4648      	mov	r0, r9
 80297a6:	f7ef fdcd 	bl	8019344 <BSC_UnLockBluetoothStack>
 80297aa:	e77f      	b.n	80296ac <GATT_Initialize+0x34>
 80297ac:	20000054 	.word	0x20000054
 80297b0:	fffffc18 	.word	0xfffffc18
 80297b4:	0801dcb1 	.word	0x0801dcb1
 80297b8:	08029a49 	.word	0x08029a49
 80297bc:	08039824 	.word	0x08039824

Disassembly of section i.GATT_Query_Connection_MTU:

080297c0 <GATT_Query_Connection_MTU>:
 80297c0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80297c2:	0014      	movs	r4, r2
 80297c4:	4606      	mov	r6, r0
 80297c6:	d00e      	beq.n	80297e6 <GATT_Query_Connection_MTU+0x26>
 80297c8:	460b      	mov	r3, r1
 80297ca:	4602      	mov	r2, r0
 80297cc:	4669      	mov	r1, sp
 80297ce:	a801      	add	r0, sp, #4
 80297d0:	f7fe f918 	bl	8027a04 <AcquireGATTStackConnectionInformationByConnectionID>
 80297d4:	0005      	movs	r5, r0
 80297d6:	d107      	bne.n	80297e8 <GATT_Query_Connection_MTU+0x28>
 80297d8:	9800      	ldr	r0, [sp, #0]
 80297da:	8980      	ldrh	r0, [r0, #12]
 80297dc:	8020      	strh	r0, [r4, #0]
 80297de:	4630      	mov	r0, r6
 80297e0:	f7ef fdb0 	bl	8019344 <BSC_UnLockBluetoothStack>
 80297e4:	e000      	b.n	80297e8 <GATT_Query_Connection_MTU+0x28>
 80297e6:	4d01      	ldr	r5, [pc, #4]	; (80297ec <GATT_Query_Connection_MTU+0x2c>)
 80297e8:	4628      	mov	r0, r5
 80297ea:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 80297ec:	fffffc18 	.word	0xfffffc18

Disassembly of section i.GATT_Read_Response:

080297f0 <GATT_Read_Response>:
 80297f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80297f4:	4e32      	ldr	r6, [pc, #200]	; (80298c0 <GATT_Read_Response+0xd0>)
 80297f6:	461d      	mov	r5, r3
 80297f8:	0017      	movs	r7, r2
 80297fa:	4682      	mov	sl, r0
 80297fc:	d001      	beq.n	8029802 <GATT_Read_Response+0x12>
 80297fe:	2d00      	cmp	r5, #0
 8029800:	d058      	beq.n	80298b4 <GATT_Read_Response+0xc4>
 8029802:	4603      	mov	r3, r0
 8029804:	9100      	str	r1, [sp, #0]
 8029806:	aa03      	add	r2, sp, #12
 8029808:	a901      	add	r1, sp, #4
 802980a:	a802      	add	r0, sp, #8
 802980c:	f7fe f91a 	bl	8027a44 <AcquireGATTStackConnectionInformationByServerTransactionID>
 8029810:	0004      	movs	r4, r0
 8029812:	d150      	bne.n	80298b6 <GATT_Read_Response+0xc6>
 8029814:	9a03      	ldr	r2, [sp, #12]
 8029816:	7a10      	ldrb	r0, [r2, #8]
 8029818:	2809      	cmp	r0, #9
 802981a:	d246      	bcs.n	80298aa <GATT_Read_Response+0xba>
 802981c:	e8df f000 	tbb	[pc, r0]
 8029820:	45453636 	.word	0x45453636
 8029824:	05360536 	.word	0x05360536
 8029828:	003d      	.short	0x003d
 802982a:	e9dd 6901 	ldrd	r6, r9, [sp, #4]
 802982e:	463c      	mov	r4, r7
 8029830:	f106 0010 	add.w	r0, r6, #16
 8029834:	6811      	ldr	r1, [r2, #0]
 8029836:	f7fe fce5 	bl	8028204 <DeleteTransactionInfoEntry>
 802983a:	ea5f 0800 	movs.w	r8, r0
 802983e:	d022      	beq.n	8029886 <GATT_Read_Response+0x96>
 8029840:	89b0      	ldrh	r0, [r6, #12]
 8029842:	1e40      	subs	r0, r0, #1
 8029844:	4284      	cmp	r4, r0
 8029846:	d900      	bls.n	802984a <GATT_Read_Response+0x5a>
 8029848:	4604      	mov	r4, r0
 802984a:	f898 0009 	ldrb.w	r0, [r8, #9]
 802984e:	4631      	mov	r1, r6
 8029850:	f040 0201 	orr.w	r2, r0, #1
 8029854:	4648      	mov	r0, r9
 8029856:	f7ff fa22 	bl	8028c9e <FormatContextPduHeader>
 802985a:	4607      	mov	r7, r0
 802985c:	b134      	cbz	r4, 802986c <GATT_Read_Response+0x7c>
 802985e:	b12d      	cbz	r5, 802986c <GATT_Read_Response+0x7c>
 8029860:	4622      	mov	r2, r4
 8029862:	4629      	mov	r1, r5
 8029864:	1c78      	adds	r0, r7, #1
 8029866:	f7e9 fe26 	bl	80134b6 <BTPS_MemCopy>
 802986a:	e000      	b.n	802986e <GATT_Read_Response+0x7e>
 802986c:	2400      	movs	r4, #0
 802986e:	1c63      	adds	r3, r4, #1
 8029870:	2200      	movs	r2, #0
 8029872:	4631      	mov	r1, r6
 8029874:	4648      	mov	r0, r9
 8029876:	9700      	str	r7, [sp, #0]
 8029878:	f000 fc1e 	bl	802a0b8 <L2CAPSendPDU>
 802987c:	4604      	mov	r4, r0
 802987e:	4640      	mov	r0, r8
 8029880:	f7ff fb12 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 8029884:	e012      	b.n	80298ac <GATT_Read_Response+0xbc>
 8029886:	4c0e      	ldr	r4, [pc, #56]	; (80298c0 <GATT_Read_Response+0xd0>)
 8029888:	3c0c      	subs	r4, #12
 802988a:	e00f      	b.n	80298ac <GATT_Read_Response+0xbc>
 802988c:	9500      	str	r5, [sp, #0]
 802988e:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8029892:	463b      	mov	r3, r7
 8029894:	f000 fe72 	bl	802a57c <ReadByUUIDRequestResponse>
 8029898:	e005      	b.n	80298a6 <GATT_Read_Response+0xb6>
 802989a:	9500      	str	r5, [sp, #0]
 802989c:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 80298a0:	463b      	mov	r3, r7
 80298a2:	f000 ff3d 	bl	802a720 <ReadMultipleRequestResponse>
 80298a6:	4604      	mov	r4, r0
 80298a8:	e000      	b.n	80298ac <GATT_Read_Response+0xbc>
 80298aa:	4634      	mov	r4, r6
 80298ac:	4650      	mov	r0, sl
 80298ae:	f7ef fd49 	bl	8019344 <BSC_UnLockBluetoothStack>
 80298b2:	e000      	b.n	80298b6 <GATT_Read_Response+0xc6>
 80298b4:	4634      	mov	r4, r6
 80298b6:	b004      	add	sp, #16
 80298b8:	4620      	mov	r0, r4
 80298ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80298be:	0000      	.short	0x0000
 80298c0:	fffffc18 	.word	0xfffffc18

Disassembly of section i.GATT_Read_Value_Request:

080298c4 <GATT_Read_Value_Request>:
 80298c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80298c6:	b087      	sub	sp, #28
 80298c8:	f10d 0c0c 	add.w	ip, sp, #12
 80298cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80298ce:	4f07      	ldr	r7, [pc, #28]	; (80298ec <GATT_Read_Value_Request+0x28>)
 80298d0:	260a      	movs	r6, #10
 80298d2:	2505      	movs	r5, #5
 80298d4:	e88c 00f0 	stmia.w	ip, {r4, r5, r6, r7}
 80298d8:	2400      	movs	r4, #0
 80298da:	9400      	str	r4, [sp, #0]
 80298dc:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80298e0:	4623      	mov	r3, r4
 80298e2:	f7fe fad7 	bl	8027e94 <ClientRequestWithData>
 80298e6:	b007      	add	sp, #28
 80298e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80298ea:	0000      	.short	0x0000
 80298ec:	0802a7cd 	.word	0x0802a7cd

Disassembly of section i.GATT_Register_Service:

080298f0 <GATT_Register_Service>:
 80298f0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298f4:	b081      	sub	sp, #4
 80298f6:	ea5f 0901 	movs.w	r9, r1
 80298fa:	a90e      	add	r1, sp, #56	; 0x38
 80298fc:	4698      	mov	r8, r3
 80298fe:	e891 0c20 	ldmia.w	r1, {r5, sl, fp}
 8029902:	4617      	mov	r7, r2
 8029904:	d051      	beq.n	80299aa <GATT_Register_Service+0xba>
 8029906:	b3af      	cbz	r7, 8029974 <GATT_Register_Service+0x84>
 8029908:	f1b8 0f00 	cmp.w	r8, #0
 802990c:	d04d      	beq.n	80299aa <GATT_Register_Service+0xba>
 802990e:	b38d      	cbz	r5, 8029974 <GATT_Register_Service+0x84>
 8029910:	ea5f 000a 	movs.w	r0, sl
 8029914:	d049      	beq.n	80299aa <GATT_Register_Service+0xba>
 8029916:	4641      	mov	r1, r8
 8029918:	4610      	mov	r0, r2
 802991a:	f001 f9ad 	bl	802ac78 <ValidateServiceArray>
 802991e:	b350      	cbz	r0, 8029976 <GATT_Register_Service+0x86>
 8029920:	4668      	mov	r0, sp
 8029922:	9901      	ldr	r1, [sp, #4]
 8029924:	f7fe f8ba 	bl	8027a9c <AcquireGATTStackInformation>
 8029928:	0006      	movs	r6, r0
 802992a:	d140      	bne.n	80299ae <GATT_Register_Service+0xbe>
 802992c:	2024      	movs	r0, #36	; 0x24
 802992e:	f7e9 fd45 	bl	80133bc <BTPS_AllocateMemory>
 8029932:	0004      	movs	r4, r0
 8029934:	d031      	beq.n	802999a <GATT_Register_Service+0xaa>
 8029936:	2224      	movs	r2, #36	; 0x24
 8029938:	2100      	movs	r1, #0
 802993a:	f7e9 fdc0 	bl	80134be <BTPS_MemInitialize>
 802993e:	491e      	ldr	r1, [pc, #120]	; (80299b8 <GATT_Register_Service+0xc8>)
 8029940:	6848      	ldr	r0, [r1, #4]
 8029942:	1c40      	adds	r0, r0, #1
 8029944:	6048      	str	r0, [r1, #4]
 8029946:	d501      	bpl.n	802994c <GATT_Register_Service+0x5c>
 8029948:	2001      	movs	r0, #1
 802994a:	6048      	str	r0, [r1, #4]
 802994c:	f8c4 8008 	str.w	r8, [r4, #8]
 8029950:	6020      	str	r0, [r4, #0]
 8029952:	f104 0110 	add.w	r1, r4, #16
 8029956:	f884 9004 	strb.w	r9, [r4, #4]
 802995a:	2000      	movs	r0, #0
 802995c:	e881 0c81 	stmia.w	r1, {r0, r7, sl, fp}
 8029960:	8829      	ldrh	r1, [r5, #0]
 8029962:	b149      	cbz	r1, 8029978 <GATT_Register_Service+0x88>
 8029964:	8868      	ldrh	r0, [r5, #2]
 8029966:	b138      	cbz	r0, 8029978 <GATT_Register_Service+0x88>
 8029968:	1e7f      	subs	r7, r7, #1
 802996a:	4439      	add	r1, r7
 802996c:	4288      	cmp	r0, r1
 802996e:	d103      	bne.n	8029978 <GATT_Register_Service+0x88>
 8029970:	462a      	mov	r2, r5
 8029972:	e002      	b.n	802997a <GATT_Register_Service+0x8a>
 8029974:	e019      	b.n	80299aa <GATT_Register_Service+0xba>
 8029976:	e016      	b.n	80299a6 <GATT_Register_Service+0xb6>
 8029978:	2200      	movs	r2, #0
 802997a:	4621      	mov	r1, r4
 802997c:	9800      	ldr	r0, [sp, #0]
 802997e:	f7fe f8c4 	bl	8027b0a <AddServiceInformation>
 8029982:	0006      	movs	r6, r0
 8029984:	d003      	beq.n	802998e <GATT_Register_Service+0x9e>
 8029986:	4620      	mov	r0, r4
 8029988:	f7e9 fd32 	bl	80133f0 <BTPS_FreeMemory>
 802998c:	e007      	b.n	802999e <GATT_Register_Service+0xae>
 802998e:	89a0      	ldrh	r0, [r4, #12]
 8029990:	8028      	strh	r0, [r5, #0]
 8029992:	89e0      	ldrh	r0, [r4, #14]
 8029994:	8068      	strh	r0, [r5, #2]
 8029996:	6826      	ldr	r6, [r4, #0]
 8029998:	e001      	b.n	802999e <GATT_Register_Service+0xae>
 802999a:	f46f 767b 	mvn.w	r6, #1004	; 0x3ec
 802999e:	9801      	ldr	r0, [sp, #4]
 80299a0:	f7ef fcd0 	bl	8019344 <BSC_UnLockBluetoothStack>
 80299a4:	e003      	b.n	80299ae <GATT_Register_Service+0xbe>
 80299a6:	4e05      	ldr	r6, [pc, #20]	; (80299bc <GATT_Register_Service+0xcc>)
 80299a8:	e001      	b.n	80299ae <GATT_Register_Service+0xbe>
 80299aa:	4e04      	ldr	r6, [pc, #16]	; (80299bc <GATT_Register_Service+0xcc>)
 80299ac:	360b      	adds	r6, #11
 80299ae:	b005      	add	sp, #20
 80299b0:	4630      	mov	r0, r6
 80299b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299b6:	0000      	.short	0x0000
 80299b8:	20000054 	.word	0x20000054
 80299bc:	fffffc0d 	.word	0xfffffc0d

Disassembly of section i.GATT_Request_Timeout:

080299c0 <GATT_Request_Timeout>:
 80299c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80299c2:	000d      	movs	r5, r1
 80299c4:	d03f      	beq.n	8029a46 <GATT_Request_Timeout+0x86>
 80299c6:	4613      	mov	r3, r2
 80299c8:	4602      	mov	r2, r0
 80299ca:	a902      	add	r1, sp, #8
 80299cc:	a803      	add	r0, sp, #12
 80299ce:	f7fe f819 	bl	8027a04 <AcquireGATTStackConnectionInformationByConnectionID>
 80299d2:	2800      	cmp	r0, #0
 80299d4:	d137      	bne.n	8029a46 <GATT_Request_Timeout+0x86>
 80299d6:	9802      	ldr	r0, [sp, #8]
 80299d8:	4629      	mov	r1, r5
 80299da:	3014      	adds	r0, #20
 80299dc:	f7fe fc1c 	bl	8028218 <DeleteTransactionInfoEntryByTimerID>
 80299e0:	0004      	movs	r4, r0
 80299e2:	d012      	beq.n	8029a0a <GATT_Request_Timeout+0x4a>
 80299e4:	7aa0      	ldrb	r0, [r4, #10]
 80299e6:	07c0      	lsls	r0, r0, #31
 80299e8:	d107      	bne.n	80299fa <GATT_Request_Timeout+0x3a>
 80299ea:	9000      	str	r0, [sp, #0]
 80299ec:	9001      	str	r0, [sp, #4]
 80299ee:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 80299f2:	2301      	movs	r3, #1
 80299f4:	4622      	mov	r2, r4
 80299f6:	f7fe fcd5 	bl	80283a4 <DispatchClientRequestErrorEvent>
 80299fa:	4620      	mov	r0, r4
 80299fc:	f7ff fa54 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 8029a00:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8029a04:	f000 ffb3 	bl	802a96e <SendNextQueuedClientRequest>
 8029a08:	e019      	b.n	8029a3e <GATT_Request_Timeout+0x7e>
 8029a0a:	9802      	ldr	r0, [sp, #8]
 8029a0c:	4629      	mov	r1, r5
 8029a0e:	3010      	adds	r0, #16
 8029a10:	f7fe fc02 	bl	8028218 <DeleteTransactionInfoEntryByTimerID>
 8029a14:	0004      	movs	r4, r0
 8029a16:	d012      	beq.n	8029a3e <GATT_Request_Timeout+0x7e>
 8029a18:	7a20      	ldrb	r0, [r4, #8]
 8029a1a:	280f      	cmp	r0, #15
 8029a1c:	d10c      	bne.n	8029a38 <GATT_Request_Timeout+0x78>
 8029a1e:	7aa0      	ldrb	r0, [r4, #10]
 8029a20:	07c0      	lsls	r0, r0, #31
 8029a22:	d105      	bne.n	8029a30 <GATT_Request_Timeout+0x70>
 8029a24:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8029a28:	2301      	movs	r3, #1
 8029a2a:	4622      	mov	r2, r4
 8029a2c:	f7fe fcfc 	bl	8028428 <DispatchServerConfirmationEvent>
 8029a30:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
 8029a34:	f000 ffb5 	bl	802a9a2 <SendNextQueuedServerIndication>
 8029a38:	4620      	mov	r0, r4
 8029a3a:	f7ff fa35 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 8029a3e:	9803      	ldr	r0, [sp, #12]
 8029a40:	6800      	ldr	r0, [r0, #0]
 8029a42:	f7ef fc7f 	bl	8019344 <BSC_UnLockBluetoothStack>
 8029a46:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

Disassembly of section i.GATT_ServerEventCallback:

08029a48 <GATT_ServerEventCallback>:
 8029a48:	4770      	bx	lr

Disassembly of section i.GATT_Start_Service_Discovery:

08029a4c <GATT_Start_Service_Discovery>:
 8029a4c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8029a4e:	461d      	mov	r5, r3
 8029a50:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8029a54:	b141      	cbz	r1, 8029a68 <GATT_Start_Service_Discovery+0x1c>
 8029a56:	b13b      	cbz	r3, 8029a68 <GATT_Start_Service_Discovery+0x1c>
 8029a58:	9500      	str	r5, [sp, #0]
 8029a5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029a5e:	4613      	mov	r3, r2
 8029a60:	2200      	movs	r2, #0
 8029a62:	f001 f85b 	bl	802ab1c <StartServiceDiscovery>
 8029a66:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8029a68:	4800      	ldr	r0, [pc, #0]	; (8029a6c <GATT_Start_Service_Discovery+0x20>)
 8029a6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8029a6c:	fffffc18 	.word	0xfffffc18

Disassembly of section i.GATT_Un_Register_Service:

08029a70 <GATT_Un_Register_Service>:
 8029a70:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a74:	4689      	mov	r9, r1
 8029a76:	4682      	mov	sl, r0
 8029a78:	4601      	mov	r1, r0
 8029a7a:	a801      	add	r0, sp, #4
 8029a7c:	f7fe f80e 	bl	8027a9c <AcquireGATTStackInformation>
 8029a80:	2800      	cmp	r0, #0
 8029a82:	d144      	bne.n	8029b0e <GATT_Un_Register_Service+0x9e>
 8029a84:	9801      	ldr	r0, [sp, #4]
 8029a86:	4649      	mov	r1, r9
 8029a88:	3034      	adds	r0, #52	; 0x34
 8029a8a:	f000 ff43 	bl	802a914 <SearchServiceInfoEntry>
 8029a8e:	0005      	movs	r5, r0
 8029a90:	d03a      	beq.n	8029b08 <GATT_Un_Register_Service+0x98>
 8029a92:	2700      	movs	r7, #0
 8029a94:	e023      	b.n	8029ade <GATT_Un_Register_Service+0x6e>
 8029a96:	2400      	movs	r4, #0
 8029a98:	f107 0810 	add.w	r8, r7, #16
 8029a9c:	e019      	b.n	8029ad2 <GATT_Un_Register_Service+0x62>
 8029a9e:	2100      	movs	r1, #0
 8029aa0:	f104 0614 	add.w	r6, r4, #20
 8029aa4:	e00f      	b.n	8029ac6 <GATT_Un_Register_Service+0x56>
 8029aa6:	6828      	ldr	r0, [r5, #0]
 8029aa8:	688a      	ldr	r2, [r1, #8]
 8029aaa:	4290      	cmp	r0, r2
 8029aac:	d10b      	bne.n	8029ac6 <GATT_Un_Register_Service+0x56>
 8029aae:	8988      	ldrh	r0, [r1, #12]
 8029ab0:	89a9      	ldrh	r1, [r5, #12]
 8029ab2:	230e      	movs	r3, #14
 8029ab4:	1a40      	subs	r0, r0, r1
 8029ab6:	b282      	uxth	r2, r0
 8029ab8:	4650      	mov	r0, sl
 8029aba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029abc:	6821      	ldr	r1, [r4, #0]
 8029abe:	f7ff fcf9 	bl	80294b4 <GATT_Error_Response>
 8029ac2:	4634      	mov	r4, r6
 8029ac4:	e004      	b.n	8029ad0 <GATT_Un_Register_Service+0x60>
 8029ac6:	4630      	mov	r0, r6
 8029ac8:	f000 f992 	bl	8029df0 <GetNextHandleInfoEntry>
 8029acc:	0001      	movs	r1, r0
 8029ace:	d1ea      	bne.n	8029aa6 <GATT_Un_Register_Service+0x36>
 8029ad0:	b12c      	cbz	r4, 8029ade <GATT_Un_Register_Service+0x6e>
 8029ad2:	4621      	mov	r1, r4
 8029ad4:	4640      	mov	r0, r8
 8029ad6:	f000 f995 	bl	8029e04 <GetNextTransactionInfoEntry>
 8029ada:	0004      	movs	r4, r0
 8029adc:	d1df      	bne.n	8029a9e <GATT_Un_Register_Service+0x2e>
 8029ade:	9801      	ldr	r0, [sp, #4]
 8029ae0:	4639      	mov	r1, r7
 8029ae2:	3014      	adds	r0, #20
 8029ae4:	f000 f97f 	bl	8029de6 <GetNextConnectionInfoEntry>
 8029ae8:	0007      	movs	r7, r0
 8029aea:	d1d4      	bne.n	8029a96 <GATT_Un_Register_Service+0x26>
 8029aec:	9801      	ldr	r0, [sp, #4]
 8029aee:	2320      	movs	r3, #32
 8029af0:	3034      	adds	r0, #52	; 0x34
 8029af2:	9000      	str	r0, [sp, #0]
 8029af4:	2200      	movs	r2, #0
 8029af6:	a902      	add	r1, sp, #8
 8029af8:	f8cd 9008 	str.w	r9, [sp, #8]
 8029afc:	2007      	movs	r0, #7
 8029afe:	f7ef f83d 	bl	8018b7c <BSC_DeleteGenericListEntry>
 8029b02:	b108      	cbz	r0, 8029b08 <GATT_Un_Register_Service+0x98>
 8029b04:	f7ef f8e7 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 8029b08:	4650      	mov	r0, sl
 8029b0a:	f7ef fc1b 	bl	8019344 <BSC_UnLockBluetoothStack>
 8029b0e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.GATT_Write_Request:

08029b14 <GATT_Write_Request>:
 8029b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029b16:	b087      	sub	sp, #28
 8029b18:	af0c      	add	r7, sp, #48	; 0x30
 8029b1a:	f04f 0e09 	mov.w	lr, #9
 8029b1e:	e897 0070 	ldmia.w	r7, {r4, r5, r6}
 8029b22:	e88d 4078 	stmia.w	sp, {r3, r4, r5, r6, lr}
 8029b26:	f8df c014 	ldr.w	ip, [pc, #20]	; 8029b3c <GATT_Write_Request+0x28>
 8029b2a:	2712      	movs	r7, #18
 8029b2c:	e9cd 7c05 	strd	r7, ip, [sp, #20]
 8029b30:	2300      	movs	r3, #0
 8029b32:	f7fe f9af 	bl	8027e94 <ClientRequestWithData>
 8029b36:	b007      	add	sp, #28
 8029b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029b3a:	0000      	.short	0x0000
 8029b3c:	0802ada9 	.word	0x0802ada9

Disassembly of section i.GATT_Write_Response:

08029b40 <GATT_Write_Response>:
 8029b40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029b44:	4680      	mov	r8, r0
 8029b46:	4603      	mov	r3, r0
 8029b48:	9100      	str	r1, [sp, #0]
 8029b4a:	aa03      	add	r2, sp, #12
 8029b4c:	a902      	add	r1, sp, #8
 8029b4e:	a801      	add	r0, sp, #4
 8029b50:	f7fd ff78 	bl	8027a44 <AcquireGATTStackConnectionInformationByServerTransactionID>
 8029b54:	0004      	movs	r4, r0
 8029b56:	d13a      	bne.n	8029bce <GATT_Write_Response+0x8e>
 8029b58:	9a03      	ldr	r2, [sp, #12]
 8029b5a:	4d1f      	ldr	r5, [pc, #124]	; (8029bd8 <GATT_Write_Response+0x98>)
 8029b5c:	7a10      	ldrb	r0, [r2, #8]
 8029b5e:	2809      	cmp	r0, #9
 8029b60:	d00c      	beq.n	8029b7c <GATT_Write_Response+0x3c>
 8029b62:	280a      	cmp	r0, #10
 8029b64:	d004      	beq.n	8029b70 <GATT_Write_Response+0x30>
 8029b66:	280b      	cmp	r0, #11
 8029b68:	d002      	beq.n	8029b70 <GATT_Write_Response+0x30>
 8029b6a:	280c      	cmp	r0, #12
 8029b6c:	d122      	bne.n	8029bb4 <GATT_Write_Response+0x74>
 8029b6e:	e023      	b.n	8029bb8 <GATT_Write_Response+0x78>
 8029b70:	9802      	ldr	r0, [sp, #8]
 8029b72:	6811      	ldr	r1, [r2, #0]
 8029b74:	3010      	adds	r0, #16
 8029b76:	f7fe fb1f 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 8029b7a:	e025      	b.n	8029bc8 <GATT_Write_Response+0x88>
 8029b7c:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
 8029b80:	f104 0010 	add.w	r0, r4, #16
 8029b84:	6811      	ldr	r1, [r2, #0]
 8029b86:	f7fe fb3d 	bl	8028204 <DeleteTransactionInfoEntry>
 8029b8a:	0007      	movs	r7, r0
 8029b8c:	d012      	beq.n	8029bb4 <GATT_Write_Response+0x74>
 8029b8e:	2213      	movs	r2, #19
 8029b90:	4621      	mov	r1, r4
 8029b92:	4630      	mov	r0, r6
 8029b94:	f7ff f883 	bl	8028c9e <FormatContextPduHeader>
 8029b98:	68f0      	ldr	r0, [r6, #12]
 8029b9a:	2301      	movs	r3, #1
 8029b9c:	300c      	adds	r0, #12
 8029b9e:	9000      	str	r0, [sp, #0]
 8029ba0:	2200      	movs	r2, #0
 8029ba2:	4621      	mov	r1, r4
 8029ba4:	4630      	mov	r0, r6
 8029ba6:	f000 fa87 	bl	802a0b8 <L2CAPSendPDU>
 8029baa:	4604      	mov	r4, r0
 8029bac:	4638      	mov	r0, r7
 8029bae:	f7ff f97b 	bl	8028ea8 <FreeTransactionInfoEntryMemory>
 8029bb2:	e009      	b.n	8029bc8 <GATT_Write_Response+0x88>
 8029bb4:	462c      	mov	r4, r5
 8029bb6:	e007      	b.n	8029bc8 <GATT_Write_Response+0x88>
 8029bb8:	2000      	movs	r0, #0
 8029bba:	4603      	mov	r3, r0
 8029bbc:	9000      	str	r0, [sp, #0]
 8029bbe:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 8029bc2:	f000 faad 	bl	802a120 <PrepareWriteRequestResponse>
 8029bc6:	4604      	mov	r4, r0
 8029bc8:	4640      	mov	r0, r8
 8029bca:	f7ef fbbb 	bl	8019344 <BSC_UnLockBluetoothStack>
 8029bce:	b004      	add	sp, #16
 8029bd0:	4620      	mov	r0, r4
 8029bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029bd6:	0000      	.short	0x0000
 8029bd8:	fffffc18 	.word	0xfffffc18

Disassembly of section i.GenericReadRequestEvent:

08029bdc <GenericReadRequestEvent>:
 8029bdc:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029be0:	b081      	sub	sp, #4
 8029be2:	4689      	mov	r9, r1
 8029be4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8029be8:	9801      	ldr	r0, [sp, #4]
 8029bea:	469a      	mov	sl, r3
 8029bec:	4616      	mov	r6, r2
 8029bee:	2400      	movs	r4, #0
 8029bf0:	4659      	mov	r1, fp
 8029bf2:	3034      	adds	r0, #52	; 0x34
 8029bf4:	f000 fe98 	bl	802a928 <SearchServiceInfoEntryByHandle>
 8029bf8:	0005      	movs	r5, r0
 8029bfa:	f04f 0801 	mov.w	r8, #1
 8029bfe:	d047      	beq.n	8029c90 <GenericReadRequestEvent+0xb4>
 8029c00:	89a9      	ldrh	r1, [r5, #12]
 8029c02:	ebab 0001 	sub.w	r0, fp, r1
 8029c06:	b287      	uxth	r7, r0
 8029c08:	4649      	mov	r1, r9
 8029c0a:	4628      	mov	r0, r5
 8029c0c:	f001 f874 	bl	802acf8 <ValidateServiceConnectionType>
 8029c10:	b3c0      	cbz	r0, 8029c84 <GenericReadRequestEvent+0xa8>
 8029c12:	68a8      	ldr	r0, [r5, #8]
 8029c14:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
 8029c18:	0741      	lsls	r1, r0, #29
 8029c1a:	d439      	bmi.n	8029c90 <GenericReadRequestEvent+0xb4>
 8029c1c:	4651      	mov	r1, sl
 8029c1e:	f1ba 0f04 	cmp.w	sl, #4
 8029c22:	d001      	beq.n	8029c28 <GenericReadRequestEvent+0x4c>
 8029c24:	07c0      	lsls	r0, r0, #31
 8029c26:	d02e      	beq.n	8029c86 <GenericReadRequestEvent+0xaa>
 8029c28:	2711      	movs	r7, #17
 8029c2a:	f109 0810 	add.w	r8, r9, #16
 8029c2e:	b146      	cbz	r6, 8029c42 <GenericReadRequestEvent+0x66>
 8029c30:	4634      	mov	r4, r6
 8029c32:	465a      	mov	r2, fp
 8029c34:	f104 0014 	add.w	r0, r4, #20
 8029c38:	6829      	ldr	r1, [r5, #0]
 8029c3a:	f7fe fa5f 	bl	80280fc <CreateNewHandleInfoEntry>
 8029c3e:	b168      	cbz	r0, 8029c5c <GenericReadRequestEvent+0x80>
 8029c40:	e01c      	b.n	8029c7c <GenericReadRequestEvent+0xa0>
 8029c42:	4648      	mov	r0, r9
 8029c44:	f001 f867 	bl	802ad16 <VerifyNoOutstandingServerRequests>
 8029c48:	b180      	cbz	r0, 8029c6c <GenericReadRequestEvent+0x90>
 8029c4a:	e9dd 130f 	ldrd	r1, r3, [sp, #60]	; 0x3c
 8029c4e:	4652      	mov	r2, sl
 8029c50:	4640      	mov	r0, r8
 8029c52:	f7fe fa75 	bl	8028140 <CreateNewTransactionInfoEntry>
 8029c56:	0004      	movs	r4, r0
 8029c58:	d1eb      	bne.n	8029c32 <GenericReadRequestEvent+0x56>
 8029c5a:	e005      	b.n	8029c68 <GenericReadRequestEvent+0x8c>
 8029c5c:	b926      	cbnz	r6, 8029c68 <GenericReadRequestEvent+0x8c>
 8029c5e:	4640      	mov	r0, r8
 8029c60:	6821      	ldr	r1, [r4, #0]
 8029c62:	f7fe faa9 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 8029c66:	2400      	movs	r4, #0
 8029c68:	9700      	str	r7, [sp, #0]
 8029c6a:	e001      	b.n	8029c70 <GenericReadRequestEvent+0x94>
 8029c6c:	200e      	movs	r0, #14
 8029c6e:	9000      	str	r0, [sp, #0]
 8029c70:	465b      	mov	r3, fp
 8029c72:	4652      	mov	r2, sl
 8029c74:	4649      	mov	r1, r9
 8029c76:	9801      	ldr	r0, [sp, #4]
 8029c78:	f7ff f933 	bl	8028ee2 <GATTErrorResponsePDU>
 8029c7c:	b005      	add	sp, #20
 8029c7e:	4620      	mov	r0, r4
 8029c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029c84:	e004      	b.n	8029c90 <GenericReadRequestEvent+0xb4>
 8029c86:	2002      	movs	r0, #2
 8029c88:	465b      	mov	r3, fp
 8029c8a:	460a      	mov	r2, r1
 8029c8c:	9000      	str	r0, [sp, #0]
 8029c8e:	e7f1      	b.n	8029c74 <GenericReadRequestEvent+0x98>
 8029c90:	f8cd 8000 	str.w	r8, [sp]
 8029c94:	e7ec      	b.n	8029c70 <GenericReadRequestEvent+0x94>

Disassembly of section i.GenericWriteRequestEvent:

08029c96 <GenericWriteRequestEvent>:
 8029c96:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029c9a:	b081      	sub	sp, #4
 8029c9c:	2400      	movs	r4, #0
 8029c9e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8029ca0:	469b      	mov	fp, r3
 8029ca2:	4617      	mov	r7, r2
 8029ca4:	468a      	mov	sl, r1
 8029ca6:	2e0a      	cmp	r6, #10
 8029ca8:	d003      	beq.n	8029cb2 <GenericWriteRequestEvent+0x1c>
 8029caa:	2e0b      	cmp	r6, #11
 8029cac:	d001      	beq.n	8029cb2 <GenericWriteRequestEvent+0x1c>
 8029cae:	2001      	movs	r0, #1
 8029cb0:	e000      	b.n	8029cb4 <GenericWriteRequestEvent+0x1e>
 8029cb2:	2000      	movs	r0, #0
 8029cb4:	4681      	mov	r9, r0
 8029cb6:	9801      	ldr	r0, [sp, #4]
 8029cb8:	4619      	mov	r1, r3
 8029cba:	3034      	adds	r0, #52	; 0x34
 8029cbc:	f000 fe34 	bl	802a928 <SearchServiceInfoEntryByHandle>
 8029cc0:	0005      	movs	r5, r0
 8029cc2:	d040      	beq.n	8029d46 <GenericWriteRequestEvent+0xb0>
 8029cc4:	89a9      	ldrh	r1, [r5, #12]
 8029cc6:	ebab 0001 	sub.w	r0, fp, r1
 8029cca:	fa1f f880 	uxth.w	r8, r0
 8029cce:	4651      	mov	r1, sl
 8029cd0:	4628      	mov	r0, r5
 8029cd2:	f001 f811 	bl	802acf8 <ValidateServiceConnectionType>
 8029cd6:	b398      	cbz	r0, 8029d40 <GenericWriteRequestEvent+0xaa>
 8029cd8:	68a9      	ldr	r1, [r5, #8]
 8029cda:	f811 0038 	ldrb.w	r0, [r1, r8, lsl #3]
 8029cde:	0741      	lsls	r1, r0, #29
 8029ce0:	d431      	bmi.n	8029d46 <GenericWriteRequestEvent+0xb0>
 8029ce2:	0780      	lsls	r0, r0, #30
 8029ce4:	d52d      	bpl.n	8029d42 <GenericWriteRequestEvent+0xac>
 8029ce6:	4650      	mov	r0, sl
 8029ce8:	f001 f815 	bl	802ad16 <VerifyNoOutstandingServerRequests>
 8029cec:	b928      	cbnz	r0, 8029cfa <GenericWriteRequestEvent+0x64>
 8029cee:	2e0a      	cmp	r6, #10
 8029cf0:	d003      	beq.n	8029cfa <GenericWriteRequestEvent+0x64>
 8029cf2:	2e0b      	cmp	r6, #11
 8029cf4:	d001      	beq.n	8029cfa <GenericWriteRequestEvent+0x64>
 8029cf6:	210e      	movs	r1, #14
 8029cf8:	e026      	b.n	8029d48 <GenericWriteRequestEvent+0xb2>
 8029cfa:	f10a 0010 	add.w	r0, sl, #16
 8029cfe:	4680      	mov	r8, r0
 8029d00:	b147      	cbz	r7, 8029d14 <GenericWriteRequestEvent+0x7e>
 8029d02:	463c      	mov	r4, r7
 8029d04:	f104 0014 	add.w	r0, r4, #20
 8029d08:	4659      	mov	r1, fp
 8029d0a:	4606      	mov	r6, r0
 8029d0c:	f000 fde4 	bl	802a8d8 <SearchHandleInfoEntry>
 8029d10:	b140      	cbz	r0, 8029d24 <GenericWriteRequestEvent+0x8e>
 8029d12:	e023      	b.n	8029d5c <GenericWriteRequestEvent+0xc6>
 8029d14:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 8029d18:	4631      	mov	r1, r6
 8029d1a:	f7fe fa11 	bl	8028140 <CreateNewTransactionInfoEntry>
 8029d1e:	0004      	movs	r4, r0
 8029d20:	d1f0      	bne.n	8029d04 <GenericWriteRequestEvent+0x6e>
 8029d22:	e00b      	b.n	8029d3c <GenericWriteRequestEvent+0xa6>
 8029d24:	465a      	mov	r2, fp
 8029d26:	4630      	mov	r0, r6
 8029d28:	6829      	ldr	r1, [r5, #0]
 8029d2a:	f7fe f9e7 	bl	80280fc <CreateNewHandleInfoEntry>
 8029d2e:	b9a8      	cbnz	r0, 8029d5c <GenericWriteRequestEvent+0xc6>
 8029d30:	b91f      	cbnz	r7, 8029d3a <GenericWriteRequestEvent+0xa4>
 8029d32:	4640      	mov	r0, r8
 8029d34:	6821      	ldr	r1, [r4, #0]
 8029d36:	f7fe fa3f 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 8029d3a:	2400      	movs	r4, #0
 8029d3c:	2111      	movs	r1, #17
 8029d3e:	e003      	b.n	8029d48 <GenericWriteRequestEvent+0xb2>
 8029d40:	e001      	b.n	8029d46 <GenericWriteRequestEvent+0xb0>
 8029d42:	2103      	movs	r1, #3
 8029d44:	e000      	b.n	8029d48 <GenericWriteRequestEvent+0xb2>
 8029d46:	2101      	movs	r1, #1
 8029d48:	f1b9 0f00 	cmp.w	r9, #0
 8029d4c:	d006      	beq.n	8029d5c <GenericWriteRequestEvent+0xc6>
 8029d4e:	9100      	str	r1, [sp, #0]
 8029d50:	465b      	mov	r3, fp
 8029d52:	4651      	mov	r1, sl
 8029d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029d56:	9801      	ldr	r0, [sp, #4]
 8029d58:	f7ff f8c3 	bl	8028ee2 <GATTErrorResponsePDU>
 8029d5c:	b005      	add	sp, #20
 8029d5e:	4620      	mov	r0, r4
 8029d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.GetNextCharacteristicDiscoveryService:

08029d64 <GetNextCharacteristicDiscoveryService>:
 8029d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029d68:	4690      	mov	r8, r2
 8029d6a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8029d6e:	460c      	mov	r4, r1
 8029d70:	4681      	mov	r9, r0
 8029d72:	461d      	mov	r5, r3
 8029d74:	220c      	movs	r2, #12
 8029d76:	2100      	movs	r1, #0
 8029d78:	4630      	mov	r0, r6
 8029d7a:	f7e9 fba0 	bl	80134be <BTPS_MemInitialize>
 8029d7e:	e029      	b.n	8029dd4 <GetNextCharacteristicDiscoveryService+0x70>
 8029d80:	89a0      	ldrh	r0, [r4, #12]
 8029d82:	42a8      	cmp	r0, r5
 8029d84:	d802      	bhi.n	8029d8c <GetNextCharacteristicDiscoveryService+0x28>
 8029d86:	89e2      	ldrh	r2, [r4, #14]
 8029d88:	42aa      	cmp	r2, r5
 8029d8a:	d203      	bcs.n	8029d94 <GetNextCharacteristicDiscoveryService+0x30>
 8029d8c:	42a8      	cmp	r0, r5
 8029d8e:	d921      	bls.n	8029dd4 <GetNextCharacteristicDiscoveryService+0x70>
 8029d90:	42b8      	cmp	r0, r7
 8029d92:	d81f      	bhi.n	8029dd4 <GetNextCharacteristicDiscoveryService+0x70>
 8029d94:	4641      	mov	r1, r8
 8029d96:	4620      	mov	r0, r4
 8029d98:	f000 ffae 	bl	802acf8 <ValidateServiceConnectionType>
 8029d9c:	b1d0      	cbz	r0, 8029dd4 <GetNextCharacteristicDiscoveryService+0x70>
 8029d9e:	89a0      	ldrh	r0, [r4, #12]
 8029da0:	42a8      	cmp	r0, r5
 8029da2:	d806      	bhi.n	8029db2 <GetNextCharacteristicDiscoveryService+0x4e>
 8029da4:	1a28      	subs	r0, r5, r0
 8029da6:	6030      	str	r0, [r6, #0]
 8029da8:	89a1      	ldrh	r1, [r4, #12]
 8029daa:	6960      	ldr	r0, [r4, #20]
 8029dac:	1a69      	subs	r1, r5, r1
 8029dae:	1a40      	subs	r0, r0, r1
 8029db0:	e006      	b.n	8029dc0 <GetNextCharacteristicDiscoveryService+0x5c>
 8029db2:	1a38      	subs	r0, r7, r0
 8029db4:	1c40      	adds	r0, r0, #1
 8029db6:	6070      	str	r0, [r6, #4]
 8029db8:	6961      	ldr	r1, [r4, #20]
 8029dba:	4288      	cmp	r0, r1
 8029dbc:	d900      	bls.n	8029dc0 <GetNextCharacteristicDiscoveryService+0x5c>
 8029dbe:	4608      	mov	r0, r1
 8029dc0:	6070      	str	r0, [r6, #4]
 8029dc2:	89e0      	ldrh	r0, [r4, #14]
 8029dc4:	42b8      	cmp	r0, r7
 8029dc6:	d902      	bls.n	8029dce <GetNextCharacteristicDiscoveryService+0x6a>
 8029dc8:	1b78      	subs	r0, r7, r5
 8029dca:	1c40      	adds	r0, r0, #1
 8029dcc:	e000      	b.n	8029dd0 <GetNextCharacteristicDiscoveryService+0x6c>
 8029dce:	6870      	ldr	r0, [r6, #4]
 8029dd0:	60b0      	str	r0, [r6, #8]
 8029dd2:	e005      	b.n	8029de0 <GetNextCharacteristicDiscoveryService+0x7c>
 8029dd4:	4621      	mov	r1, r4
 8029dd6:	4648      	mov	r0, r9
 8029dd8:	f000 f80f 	bl	8029dfa <GetNextServiceInfoEntry>
 8029ddc:	0004      	movs	r4, r0
 8029dde:	d1cf      	bne.n	8029d80 <GetNextCharacteristicDiscoveryService+0x1c>
 8029de0:	4620      	mov	r0, r4
 8029de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

Disassembly of section i.GetNextConnectionInfoEntry:

08029de6 <GetNextConnectionInfoEntry>:
 8029de6:	4603      	mov	r3, r0
 8029de8:	2218      	movs	r2, #24
 8029dea:	2006      	movs	r0, #6
 8029dec:	f7ee bf78 	b.w	8018ce0 <BSC_GetNextGenericListEntry>

Disassembly of section i.GetNextHandleInfoEntry:

08029df0 <GetNextHandleInfoEntry>:
 8029df0:	4603      	mov	r3, r0
 8029df2:	2210      	movs	r2, #16
 8029df4:	2006      	movs	r0, #6
 8029df6:	f7ee bf73 	b.w	8018ce0 <BSC_GetNextGenericListEntry>

Disassembly of section i.GetNextServiceInfoEntry:

08029dfa <GetNextServiceInfoEntry>:
 8029dfa:	4603      	mov	r3, r0
 8029dfc:	2220      	movs	r2, #32
 8029dfe:	2006      	movs	r0, #6
 8029e00:	f7ee bf6e 	b.w	8018ce0 <BSC_GetNextGenericListEntry>

Disassembly of section i.GetNextTransactionInfoEntry:

08029e04 <GetNextTransactionInfoEntry>:
 8029e04:	4603      	mov	r3, r0
 8029e06:	222c      	movs	r2, #44	; 0x2c
 8029e08:	2006      	movs	r0, #6
 8029e0a:	f7ee bf69 	b.w	8018ce0 <BSC_GetNextGenericListEntry>

Disassembly of section i.GetServiceUUID:

08029e0e <GetServiceUUID>:
 8029e0e:	b510      	push	{r4, lr}
 8029e10:	4614      	mov	r4, r2
 8029e12:	4602      	mov	r2, r0
 8029e14:	2000      	movs	r0, #0
 8029e16:	7853      	ldrb	r3, [r2, #1]
 8029e18:	b919      	cbnz	r1, 8029e22 <GetServiceUUID+0x14>
 8029e1a:	2b02      	cmp	r3, #2
 8029e1c:	d010      	beq.n	8029e40 <GetServiceUUID+0x32>
 8029e1e:	2b03      	cmp	r3, #3
 8029e20:	d00e      	beq.n	8029e40 <GetServiceUUID+0x32>
 8029e22:	b173      	cbz	r3, 8029e42 <GetServiceUUID+0x34>
 8029e24:	2b01      	cmp	r3, #1
 8029e26:	d003      	beq.n	8029e30 <GetServiceUUID+0x22>
 8029e28:	2b02      	cmp	r3, #2
 8029e2a:	d00a      	beq.n	8029e42 <GetServiceUUID+0x34>
 8029e2c:	2b03      	cmp	r3, #3
 8029e2e:	d107      	bne.n	8029e40 <GetServiceUUID+0x32>
 8029e30:	2001      	movs	r0, #1
 8029e32:	7020      	strb	r0, [r4, #0]
 8029e34:	6851      	ldr	r1, [r2, #4]
 8029e36:	2210      	movs	r2, #16
 8029e38:	1c60      	adds	r0, r4, #1
 8029e3a:	f7e9 fb3c 	bl	80134b6 <BTPS_MemCopy>
 8029e3e:	2010      	movs	r0, #16
 8029e40:	bd10      	pop	{r4, pc}
 8029e42:	2000      	movs	r0, #0
 8029e44:	7020      	strb	r0, [r4, #0]
 8029e46:	6851      	ldr	r1, [r2, #4]
 8029e48:	2202      	movs	r2, #2
 8029e4a:	1c60      	adds	r0, r4, #1
 8029e4c:	f7e9 fb33 	bl	80134b6 <BTPS_MemCopy>
 8029e50:	2002      	movs	r0, #2
 8029e52:	bd10      	pop	{r4, pc}

Disassembly of section i.HandleReadRequestEvent:

08029e54 <HandleReadRequestEvent>:
 8029e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029e58:	b087      	sub	sp, #28
 8029e5a:	4605      	mov	r5, r0
 8029e5c:	4698      	mov	r8, r3
 8029e5e:	4617      	mov	r7, r2
 8029e60:	460c      	mov	r4, r1
 8029e62:	f04f 0900 	mov.w	r9, #0
 8029e66:	2014      	movs	r0, #20
 8029e68:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8029e6c:	f7e9 faa6 	bl	80133bc <BTPS_AllocateMemory>
 8029e70:	0006      	movs	r6, r0
 8029e72:	d071      	beq.n	8029f58 <HandleReadRequestEvent+0x104>
 8029e74:	7a20      	ldrb	r0, [r4, #8]
 8029e76:	2804      	cmp	r0, #4
 8029e78:	d06f      	beq.n	8029f5a <HandleReadRequestEvent+0x106>
 8029e7a:	b198      	cbz	r0, 8029ea4 <HandleReadRequestEvent+0x50>
 8029e7c:	2801      	cmp	r0, #1
 8029e7e:	d011      	beq.n	8029ea4 <HandleReadRequestEvent+0x50>
 8029e80:	46ca      	mov	sl, r9
 8029e82:	9600      	str	r6, [sp, #0]
 8029e84:	2201      	movs	r2, #1
 8029e86:	68b8      	ldr	r0, [r7, #8]
 8029e88:	eb02 01c8 	add.w	r1, r2, r8, lsl #3
 8029e8c:	2304      	movs	r3, #4
 8029e8e:	5c42      	ldrb	r2, [r0, r1]
 8029e90:	eb03 01c8 	add.w	r1, r3, r8, lsl #3
 8029e94:	2a07      	cmp	r2, #7
 8029e96:	d26e      	bcs.n	8029f76 <HandleReadRequestEvent+0x122>
 8029e98:	e8df f002 	tbb	[pc, r2]
 8029e9c:	0e0e0e0e 	.word	0x0e0e0e0e
 8029ea0:	0060602e 	.word	0x0060602e
 8029ea4:	7bb8      	ldrb	r0, [r7, #14]
 8029ea6:	7030      	strb	r0, [r6, #0]
 8029ea8:	89f8      	ldrh	r0, [r7, #14]
 8029eaa:	f04f 0a02 	mov.w	sl, #2
 8029eae:	0a00      	lsrs	r0, r0, #8
 8029eb0:	7070      	strb	r0, [r6, #1]
 8029eb2:	1cb0      	adds	r0, r6, #2
 8029eb4:	9000      	str	r0, [sp, #0]
 8029eb6:	e7e5      	b.n	8029e84 <HandleReadRequestEvent+0x30>
 8029eb8:	f04f 0901 	mov.w	r9, #1
 8029ebc:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8029ec0:	aa02      	add	r2, sp, #8
 8029ec2:	4649      	mov	r1, r9
 8029ec4:	f7ff ffa3 	bl	8029e0e <GetServiceUUID>
 8029ec8:	0007      	movs	r7, r0
 8029eca:	d011      	beq.n	8029ef0 <HandleReadRequestEvent+0x9c>
 8029ecc:	7a20      	ldrb	r0, [r4, #8]
 8029ece:	2801      	cmp	r0, #1
 8029ed0:	d006      	beq.n	8029ee0 <HandleReadRequestEvent+0x8c>
 8029ed2:	463a      	mov	r2, r7
 8029ed4:	f10d 0109 	add.w	r1, sp, #9
 8029ed8:	9800      	ldr	r0, [sp, #0]
 8029eda:	f7e9 faec 	bl	80134b6 <BTPS_MemCopy>
 8029ede:	44ba      	add	sl, r7
 8029ee0:	f1bb 0f00 	cmp.w	fp, #0
 8029ee4:	d143      	bne.n	8029f6e <HandleReadRequestEvent+0x11a>
 8029ee6:	6821      	ldr	r1, [r4, #0]
 8029ee8:	4633      	mov	r3, r6
 8029eea:	4652      	mov	r2, sl
 8029eec:	6828      	ldr	r0, [r5, #0]
 8029eee:	e07c      	b.n	8029fea <HandleReadRequestEvent+0x196>
 8029ef0:	6821      	ldr	r1, [r4, #0]
 8029ef2:	230e      	movs	r3, #14
 8029ef4:	6828      	ldr	r0, [r5, #0]
 8029ef6:	e06d      	b.n	8029fd4 <HandleReadRequestEvent+0x180>
 8029ef8:	5840      	ldr	r0, [r0, r1]
 8029efa:	6801      	ldr	r1, [r0, #0]
 8029efc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8029f00:	f000 fd08 	bl	802a914 <SearchServiceInfoEntry>
 8029f04:	0007      	movs	r7, r0
 8029f06:	d068      	beq.n	8029fda <HandleReadRequestEvent+0x186>
 8029f08:	aa02      	add	r2, sp, #8
 8029f0a:	2101      	movs	r1, #1
 8029f0c:	68b8      	ldr	r0, [r7, #8]
 8029f0e:	f7ff ff7e 	bl	8029e0e <GetServiceUUID>
 8029f12:	4682      	mov	sl, r0
 8029f14:	f04f 0901 	mov.w	r9, #1
 8029f18:	f1bb 0f00 	cmp.w	fp, #0
 8029f1c:	d127      	bne.n	8029f6e <HandleReadRequestEvent+0x11a>
 8029f1e:	7b38      	ldrb	r0, [r7, #12]
 8029f20:	7030      	strb	r0, [r6, #0]
 8029f22:	89b8      	ldrh	r0, [r7, #12]
 8029f24:	0a00      	lsrs	r0, r0, #8
 8029f26:	7070      	strb	r0, [r6, #1]
 8029f28:	7bb8      	ldrb	r0, [r7, #14]
 8029f2a:	70b0      	strb	r0, [r6, #2]
 8029f2c:	89f8      	ldrh	r0, [r7, #14]
 8029f2e:	0a00      	lsrs	r0, r0, #8
 8029f30:	70f0      	strb	r0, [r6, #3]
 8029f32:	4650      	mov	r0, sl
 8029f34:	f1ba 0f02 	cmp.w	sl, #2
 8029f38:	d007      	beq.n	8029f4a <HandleReadRequestEvent+0xf6>
 8029f3a:	f04f 0a00 	mov.w	sl, #0
 8029f3e:	6821      	ldr	r1, [r4, #0]
 8029f40:	4633      	mov	r3, r6
 8029f42:	f10a 0204 	add.w	r2, sl, #4
 8029f46:	6828      	ldr	r0, [r5, #0]
 8029f48:	e04f      	b.n	8029fea <HandleReadRequestEvent+0x196>
 8029f4a:	4602      	mov	r2, r0
 8029f4c:	f10d 0109 	add.w	r1, sp, #9
 8029f50:	1d30      	adds	r0, r6, #4
 8029f52:	f7e9 fab0 	bl	80134b6 <BTPS_MemCopy>
 8029f56:	e7f2      	b.n	8029f3e <HandleReadRequestEvent+0xea>
 8029f58:	e04a      	b.n	8029ff0 <HandleReadRequestEvent+0x19c>
 8029f5a:	e02b      	b.n	8029fb4 <HandleReadRequestEvent+0x160>
 8029f5c:	2a05      	cmp	r2, #5
 8029f5e:	d00b      	beq.n	8029f78 <HandleReadRequestEvent+0x124>
 8029f60:	2210      	movs	r2, #16
 8029f62:	4692      	mov	sl, r2
 8029f64:	f04f 0901 	mov.w	r9, #1
 8029f68:	f1bb 0f00 	cmp.w	fp, #0
 8029f6c:	d006      	beq.n	8029f7c <HandleReadRequestEvent+0x128>
 8029f6e:	6821      	ldr	r1, [r4, #0]
 8029f70:	230b      	movs	r3, #11
 8029f72:	6828      	ldr	r0, [r5, #0]
 8029f74:	e02e      	b.n	8029fd4 <HandleReadRequestEvent+0x180>
 8029f76:	e030      	b.n	8029fda <HandleReadRequestEvent+0x186>
 8029f78:	2202      	movs	r2, #2
 8029f7a:	e7f2      	b.n	8029f62 <HandleReadRequestEvent+0x10e>
 8029f7c:	5840      	ldr	r0, [r0, r1]
 8029f7e:	f108 0101 	add.w	r1, r8, #1
 8029f82:	f1ba 0f02 	cmp.w	sl, #2
 8029f86:	f100 0301 	add.w	r3, r0, #1
 8029f8a:	d00f      	beq.n	8029fac <HandleReadRequestEvent+0x158>
 8029f8c:	e9cd a300 	strd	sl, r3, [sp]
 8029f90:	89ba      	ldrh	r2, [r7, #12]
 8029f92:	2300      	movs	r3, #0
 8029f94:	4411      	add	r1, r2
 8029f96:	b28a      	uxth	r2, r1
 8029f98:	7801      	ldrb	r1, [r0, #0]
 8029f9a:	4630      	mov	r0, r6
 8029f9c:	f7fd fe6a 	bl	8027c74 <BuildPacketByteTwoWordsVariable>
 8029fa0:	6821      	ldr	r1, [r4, #0]
 8029fa2:	4633      	mov	r3, r6
 8029fa4:	f10a 0203 	add.w	r2, sl, #3
 8029fa8:	6828      	ldr	r0, [r5, #0]
 8029faa:	e01e      	b.n	8029fea <HandleReadRequestEvent+0x196>
 8029fac:	2202      	movs	r2, #2
 8029fae:	e9cd 2300 	strd	r2, r3, [sp]
 8029fb2:	e7ed      	b.n	8029f90 <HandleReadRequestEvent+0x13c>
 8029fb4:	68b9      	ldr	r1, [r7, #8]
 8029fb6:	f04f 0901 	mov.w	r9, #1
 8029fba:	eb01 00c8 	add.w	r0, r1, r8, lsl #3
 8029fbe:	a902      	add	r1, sp, #8
 8029fc0:	f000 f987 	bl	802a2d2 <ReadAttributeTypeUUID>
 8029fc4:	4602      	mov	r2, r0
 8029fc6:	2802      	cmp	r0, #2
 8029fc8:	d00b      	beq.n	8029fe2 <HandleReadRequestEvent+0x18e>
 8029fca:	2a10      	cmp	r2, #16
 8029fcc:	d009      	beq.n	8029fe2 <HandleReadRequestEvent+0x18e>
 8029fce:	6821      	ldr	r1, [r4, #0]
 8029fd0:	6828      	ldr	r0, [r5, #0]
 8029fd2:	2311      	movs	r3, #17
 8029fd4:	4642      	mov	r2, r8
 8029fd6:	f7ff fa6d 	bl	80294b4 <GATT_Error_Response>
 8029fda:	4630      	mov	r0, r6
 8029fdc:	f7e9 fa08 	bl	80133f0 <BTPS_FreeMemory>
 8029fe0:	e00c      	b.n	8029ffc <HandleReadRequestEvent+0x1a8>
 8029fe2:	6821      	ldr	r1, [r4, #0]
 8029fe4:	f10d 0309 	add.w	r3, sp, #9
 8029fe8:	6828      	ldr	r0, [r5, #0]
 8029fea:	f7ff fc01 	bl	80297f0 <GATT_Read_Response>
 8029fee:	e7f4      	b.n	8029fda <HandleReadRequestEvent+0x186>
 8029ff0:	6821      	ldr	r1, [r4, #0]
 8029ff2:	2311      	movs	r3, #17
 8029ff4:	4642      	mov	r2, r8
 8029ff6:	6828      	ldr	r0, [r5, #0]
 8029ff8:	f7ff fa5c 	bl	80294b4 <GATT_Error_Response>
 8029ffc:	b007      	add	sp, #28
 8029ffe:	4648      	mov	r0, r9
 802a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.IncludeDiscoveryRequest:

0802a004 <IncludeDiscoveryRequest>:
 802a004:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802a006:	460c      	mov	r4, r1
 802a008:	461d      	mov	r5, r3
 802a00a:	6809      	ldr	r1, [r1, #0]
 802a00c:	4b05      	ldr	r3, [pc, #20]	; (802a024 <IncludeDiscoveryRequest+0x20>)
 802a00e:	e9cd 3100 	strd	r3, r1, [sp]
 802a012:	8a93      	ldrh	r3, [r2, #20]
 802a014:	462a      	mov	r2, r5
 802a016:	f7ff fa0f 	bl	8029438 <GATT_Discover_Included_Services>
 802a01a:	2800      	cmp	r0, #0
 802a01c:	dd01      	ble.n	802a022 <IncludeDiscoveryRequest+0x1e>
 802a01e:	6060      	str	r0, [r4, #4]
 802a020:	2000      	movs	r0, #0
 802a022:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 802a024:	08028fe1 	.word	0x08028fe1

Disassembly of section i.IndicationEvent:

0802a028 <IndicationEvent>:
 802a028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a02c:	4698      	mov	r8, r3
 802a02e:	4617      	mov	r7, r2
 802a030:	4689      	mov	r9, r1
 802a032:	4606      	mov	r6, r0
 802a034:	2a03      	cmp	r2, #3
 802a036:	d331      	bcc.n	802a09c <IndicationEvent+0x74>
 802a038:	2300      	movs	r3, #0
 802a03a:	221d      	movs	r2, #29
 802a03c:	210f      	movs	r1, #15
 802a03e:	f109 0014 	add.w	r0, r9, #20
 802a042:	f7fe f87d 	bl	8028140 <CreateNewTransactionInfoEntry>
 802a046:	b1e8      	cbz	r0, 802a084 <IndicationEvent+0x5c>
 802a048:	6934      	ldr	r4, [r6, #16]
 802a04a:	f8b8 a001 	ldrh.w	sl, [r8, #1]
 802a04e:	2105      	movs	r1, #5
 802a050:	7021      	strb	r1, [r4, #0]
 802a052:	2118      	movs	r1, #24
 802a054:	8061      	strh	r1, [r4, #2]
 802a056:	f104 0508 	add.w	r5, r4, #8
 802a05a:	6065      	str	r5, [r4, #4]
 802a05c:	6803      	ldr	r3, [r0, #0]
 802a05e:	4649      	mov	r1, r9
 802a060:	4628      	mov	r0, r5
 802a062:	1eff      	subs	r7, r7, #3
 802a064:	f8d9 2000 	ldr.w	r2, [r9]
 802a068:	f7fe fe75 	bl	8028d56 <FormatTwoIntegersAddress>
 802a06c:	f8a5 a010 	strh.w	sl, [r5, #16]
 802a070:	826f      	strh	r7, [r5, #18]
 802a072:	f108 0003 	add.w	r0, r8, #3
 802a076:	6168      	str	r0, [r5, #20]
 802a078:	4621      	mov	r1, r4
 802a07a:	4630      	mov	r0, r6
 802a07c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a080:	f7fe b9b4 	b.w	80283ec <DispatchConnectionEvent>
 802a084:	68f1      	ldr	r1, [r6, #12]
 802a086:	201e      	movs	r0, #30
 802a088:	2301      	movs	r3, #1
 802a08a:	7308      	strb	r0, [r1, #12]
 802a08c:	68f0      	ldr	r0, [r6, #12]
 802a08e:	2200      	movs	r2, #0
 802a090:	300c      	adds	r0, #12
 802a092:	9000      	str	r0, [sp, #0]
 802a094:	4649      	mov	r1, r9
 802a096:	4630      	mov	r0, r6
 802a098:	f000 f80e 	bl	802a0b8 <L2CAPSendPDU>
 802a09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.InitializeGATTModule:

0802a0a0 <InitializeGATTModule>:
 802a0a0:	4804      	ldr	r0, [pc, #16]	; (802a0b4 <InitializeGATTModule+0x14>)
 802a0a2:	7801      	ldrb	r1, [r0, #0]
 802a0a4:	b919      	cbnz	r1, 802a0ae <InitializeGATTModule+0xe>
 802a0a6:	2100      	movs	r1, #0
 802a0a8:	6141      	str	r1, [r0, #20]
 802a0aa:	2101      	movs	r1, #1
 802a0ac:	7001      	strb	r1, [r0, #0]
 802a0ae:	b2c8      	uxtb	r0, r1
 802a0b0:	4770      	bx	lr
 802a0b2:	0000      	.short	0x0000
 802a0b4:	20000054 	.word	0x20000054

Disassembly of section i.L2CAPSendPDU:

0802a0b8 <L2CAPSendPDU>:
 802a0b8:	b570      	push	{r4, r5, r6, lr}
 802a0ba:	b086      	sub	sp, #24
 802a0bc:	4605      	mov	r5, r0
 802a0be:	480f      	ldr	r0, [pc, #60]	; (802a0fc <L2CAPSendPDU+0x44>)
 802a0c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802a0c2:	b112      	cbz	r2, 802a0ca <L2CAPSendPDU+0x12>
 802a0c4:	6856      	ldr	r6, [r2, #4]
 802a0c6:	b906      	cbnz	r6, 802a0ca <L2CAPSendPDU+0x12>
 802a0c8:	2200      	movs	r2, #0
 802a0ca:	790e      	ldrb	r6, [r1, #4]
 802a0cc:	2e00      	cmp	r6, #0
 802a0ce:	d113      	bne.n	802a0f8 <L2CAPSendPDU+0x40>
 802a0d0:	b298      	uxth	r0, r3
 802a0d2:	e9cd 2000 	strd	r2, r0, [sp]
 802a0d6:	9402      	str	r4, [sp, #8]
 802a0d8:	460c      	mov	r4, r1
 802a0da:	88a8      	ldrh	r0, [r5, #4]
 802a0dc:	f854 1f05 	ldr.w	r1, [r4, #5]!
 802a0e0:	b283      	uxth	r3, r0
 802a0e2:	9103      	str	r1, [sp, #12]
 802a0e4:	88a0      	ldrh	r0, [r4, #4]
 802a0e6:	f8ad 0010 	strh.w	r0, [sp, #16]
 802a0ea:	6828      	ldr	r0, [r5, #0]
 802a0ec:	9a04      	ldr	r2, [sp, #16]
 802a0ee:	f7f8 fc48 	bl	8022982 <L2CA_Enhanced_Fixed_Channel_Data_Write>
 802a0f2:	2800      	cmp	r0, #0
 802a0f4:	dd00      	ble.n	802a0f8 <L2CAPSendPDU+0x40>
 802a0f6:	2000      	movs	r0, #0
 802a0f8:	b006      	add	sp, #24
 802a0fa:	bd70      	pop	{r4, r5, r6, pc}
 802a0fc:	fffffc18 	.word	0xfffffc18

Disassembly of section i.ObtainOutstandingClientTransaction:

0802a100 <ObtainOutstandingClientTransaction>:
 802a100:	b510      	push	{r4, lr}
 802a102:	4604      	mov	r4, r0
 802a104:	2000      	movs	r0, #0
 802a106:	3414      	adds	r4, #20
 802a108:	e002      	b.n	802a110 <ObtainOutstandingClientTransaction+0x10>
 802a10a:	7a01      	ldrb	r1, [r0, #8]
 802a10c:	290f      	cmp	r1, #15
 802a10e:	d105      	bne.n	802a11c <ObtainOutstandingClientTransaction+0x1c>
 802a110:	4601      	mov	r1, r0
 802a112:	4620      	mov	r0, r4
 802a114:	f7ff fe76 	bl	8029e04 <GetNextTransactionInfoEntry>
 802a118:	2800      	cmp	r0, #0
 802a11a:	d1f6      	bne.n	802a10a <ObtainOutstandingClientTransaction+0xa>
 802a11c:	bd10      	pop	{r4, pc}

Disassembly of section i.PrepareWriteRequestResponse:

0802a120 <PrepareWriteRequestResponse>:
 802a120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a124:	4682      	mov	sl, r0
 802a126:	6a90      	ldr	r0, [r2, #40]	; 0x28
 802a128:	4688      	mov	r8, r1
 802a12a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802a12e:	4d25      	ldr	r5, [pc, #148]	; (802a1c4 <PrepareWriteRequestResponse+0xa4>)
 802a130:	461e      	mov	r6, r3
 802a132:	4614      	mov	r4, r2
 802a134:	f100 010c 	add.w	r1, r0, #12
 802a138:	b3f0      	cbz	r0, 802a1b8 <PrepareWriteRequestResponse+0x98>
 802a13a:	6842      	ldr	r2, [r0, #4]
 802a13c:	b3e2      	cbz	r2, 802a1b8 <PrepareWriteRequestResponse+0x98>
 802a13e:	220e      	movs	r2, #14
 802a140:	7222      	strb	r2, [r4, #8]
 802a142:	f1b9 0f00 	cmp.w	r9, #0
 802a146:	d019      	beq.n	802a17c <PrepareWriteRequestResponse+0x5c>
 802a148:	f8b1 7001 	ldrh.w	r7, [r1, #1]
 802a14c:	f10a 0034 	add.w	r0, sl, #52	; 0x34
 802a150:	4639      	mov	r1, r7
 802a152:	f000 fbe9 	bl	802a928 <SearchServiceInfoEntryByHandle>
 802a156:	b378      	cbz	r0, 802a1b8 <PrepareWriteRequestResponse+0x98>
 802a158:	8980      	ldrh	r0, [r0, #12]
 802a15a:	4430      	add	r0, r6
 802a15c:	b286      	uxth	r6, r0
 802a15e:	42b7      	cmp	r7, r6
 802a160:	d12e      	bne.n	802a1c0 <PrepareWriteRequestResponse+0xa0>
 802a162:	f104 0014 	add.w	r0, r4, #20
 802a166:	4631      	mov	r1, r6
 802a168:	4605      	mov	r5, r0
 802a16a:	f000 fbb5 	bl	802a8d8 <SearchHandleInfoEntry>
 802a16e:	0001      	movs	r1, r0
 802a170:	d01b      	beq.n	802a1aa <PrepareWriteRequestResponse+0x8a>
 802a172:	6848      	ldr	r0, [r1, #4]
 802a174:	1e40      	subs	r0, r0, #1
 802a176:	6048      	str	r0, [r1, #4]
 802a178:	d00a      	beq.n	802a190 <PrepareWriteRequestResponse+0x70>
 802a17a:	e016      	b.n	802a1aa <PrepareWriteRequestResponse+0x8a>
 802a17c:	9100      	str	r1, [sp, #0]
 802a17e:	6843      	ldr	r3, [r0, #4]
 802a180:	2200      	movs	r2, #0
 802a182:	4641      	mov	r1, r8
 802a184:	4650      	mov	r0, sl
 802a186:	1c5b      	adds	r3, r3, #1
 802a188:	f7ff ff96 	bl	802a0b8 <L2CAPSendPDU>
 802a18c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a190:	4628      	mov	r0, r5
 802a192:	f7fe f825 	bl	80281e0 <DeleteHandleInfoEntryByEntryPointer>
 802a196:	b108      	cbz	r0, 802a19c <PrepareWriteRequestResponse+0x7c>
 802a198:	f7ee fd9d 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 802a19c:	6960      	ldr	r0, [r4, #20]
 802a19e:	b920      	cbnz	r0, 802a1aa <PrepareWriteRequestResponse+0x8a>
 802a1a0:	f108 0010 	add.w	r0, r8, #16
 802a1a4:	6821      	ldr	r1, [r4, #0]
 802a1a6:	f7fe f807 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802a1aa:	4633      	mov	r3, r6
 802a1ac:	2216      	movs	r2, #22
 802a1ae:	4641      	mov	r1, r8
 802a1b0:	4650      	mov	r0, sl
 802a1b2:	f8cd 9000 	str.w	r9, [sp]
 802a1b6:	e000      	b.n	802a1ba <PrepareWriteRequestResponse+0x9a>
 802a1b8:	e002      	b.n	802a1c0 <PrepareWriteRequestResponse+0xa0>
 802a1ba:	f7fe fe92 	bl	8028ee2 <GATTErrorResponsePDU>
 802a1be:	e7e5      	b.n	802a18c <PrepareWriteRequestResponse+0x6c>
 802a1c0:	4628      	mov	r0, r5
 802a1c2:	e7e3      	b.n	802a18c <PrepareWriteRequestResponse+0x6c>
 802a1c4:	fffffc18 	.word	0xfffffc18

Disassembly of section i.PreprareWriteRequestEvent:

0802a1c8 <PreprareWriteRequestEvent>:
 802a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a1cc:	b085      	sub	sp, #20
 802a1ce:	461e      	mov	r6, r3
 802a1d0:	460d      	mov	r5, r1
 802a1d2:	4683      	mov	fp, r0
 802a1d4:	2a06      	cmp	r2, #6
 802a1d6:	d374      	bcc.n	802a2c2 <PreprareWriteRequestEvent+0xfa>
 802a1d8:	f8b6 a001 	ldrh.w	sl, [r6, #1]
 802a1dc:	f8b6 0003 	ldrh.w	r0, [r6, #3]
 802a1e0:	f8ad 0010 	strh.w	r0, [sp, #16]
 802a1e4:	1f52      	subs	r2, r2, #5
 802a1e6:	f105 0010 	add.w	r0, r5, #16
 802a1ea:	fa1f f982 	uxth.w	r9, r2
 802a1ee:	f04f 0800 	mov.w	r8, #0
 802a1f2:	210e      	movs	r1, #14
 802a1f4:	9003      	str	r0, [sp, #12]
 802a1f6:	f000 fbb1 	bl	802a95c <SearchTransactionInfoEntryByType>
 802a1fa:	0004      	movs	r4, r0
 802a1fc:	d018      	beq.n	802a230 <PreprareWriteRequestEvent+0x68>
 802a1fe:	89af      	ldrh	r7, [r5, #12]
 802a200:	6a60      	ldr	r0, [r4, #36]	; 0x24
 802a202:	370c      	adds	r7, #12
 802a204:	42b8      	cmp	r0, r7
 802a206:	d20d      	bcs.n	802a224 <PreprareWriteRequestEvent+0x5c>
 802a208:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802a20a:	b168      	cbz	r0, 802a228 <PreprareWriteRequestEvent+0x60>
 802a20c:	f7e9 f8f0 	bl	80133f0 <BTPS_FreeMemory>
 802a210:	4638      	mov	r0, r7
 802a212:	6267      	str	r7, [r4, #36]	; 0x24
 802a214:	f7e9 f8d2 	bl	80133bc <BTPS_AllocateMemory>
 802a218:	62a0      	str	r0, [r4, #40]	; 0x28
 802a21a:	b128      	cbz	r0, 802a228 <PreprareWriteRequestEvent+0x60>
 802a21c:	463a      	mov	r2, r7
 802a21e:	2100      	movs	r1, #0
 802a220:	f7e9 f94d 	bl	80134be <BTPS_MemInitialize>
 802a224:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802a226:	b918      	cbnz	r0, 802a230 <PreprareWriteRequestEvent+0x68>
 802a228:	6821      	ldr	r1, [r4, #0]
 802a22a:	9803      	ldr	r0, [sp, #12]
 802a22c:	f7fd ffc4 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802a230:	0022      	movs	r2, r4
 802a232:	d001      	beq.n	802a238 <PreprareWriteRequestEvent+0x70>
 802a234:	f8d2 8000 	ldr.w	r8, [r2]
 802a238:	89a8      	ldrh	r0, [r5, #12]
 802a23a:	270c      	movs	r7, #12
 802a23c:	2116      	movs	r1, #22
 802a23e:	300c      	adds	r0, #12
 802a240:	9700      	str	r7, [sp, #0]
 802a242:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802a246:	4653      	mov	r3, sl
 802a248:	4629      	mov	r1, r5
 802a24a:	4658      	mov	r0, fp
 802a24c:	f7ff fd23 	bl	8029c96 <GenericWriteRequestEvent>
 802a250:	0004      	movs	r4, r0
 802a252:	d02c      	beq.n	802a2ae <PreprareWriteRequestEvent+0xe6>
 802a254:	7227      	strb	r7, [r4, #8]
 802a256:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 802a258:	220d      	movs	r2, #13
 802a25a:	2100      	movs	r1, #0
 802a25c:	4638      	mov	r0, r7
 802a25e:	f7e9 f92e 	bl	80134be <BTPS_MemInitialize>
 802a262:	89a8      	ldrh	r0, [r5, #12]
 802a264:	1d76      	adds	r6, r6, #5
 802a266:	1e40      	subs	r0, r0, #1
 802a268:	60b8      	str	r0, [r7, #8]
 802a26a:	2017      	movs	r0, #23
 802a26c:	7338      	strb	r0, [r7, #12]
 802a26e:	464b      	mov	r3, r9
 802a270:	aa04      	add	r2, sp, #16
 802a272:	4651      	mov	r1, sl
 802a274:	4638      	mov	r0, r7
 802a276:	9600      	str	r6, [sp, #0]
 802a278:	f7fd fd1b 	bl	8027cb2 <BuildRecordTwoWordsVariable>
 802a27c:	4651      	mov	r1, sl
 802a27e:	f104 0014 	add.w	r0, r4, #20
 802a282:	f000 fb29 	bl	802a8d8 <SearchHandleInfoEntry>
 802a286:	0003      	movs	r3, r0
 802a288:	d002      	beq.n	802a290 <PreprareWriteRequestEvent+0xc8>
 802a28a:	6858      	ldr	r0, [r3, #4]
 802a28c:	1c40      	adds	r0, r0, #1
 802a28e:	6058      	str	r0, [r3, #4]
 802a290:	2101      	movs	r1, #1
 802a292:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802a296:	e9cd 2900 	strd	r2, r9, [sp]
 802a29a:	e9cd 6102 	strd	r6, r1, [sp, #8]
 802a29e:	4622      	mov	r2, r4
 802a2a0:	4629      	mov	r1, r5
 802a2a2:	4658      	mov	r0, fp
 802a2a4:	f7fe f916 	bl	80284d4 <DispatchServerWriteRequestEvent>
 802a2a8:	b005      	add	sp, #20
 802a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a2ae:	4641      	mov	r1, r8
 802a2b0:	9803      	ldr	r0, [sp, #12]
 802a2b2:	f000 fb49 	bl	802a948 <SearchTransactionInfoEntry>
 802a2b6:	2800      	cmp	r0, #0
 802a2b8:	d0f6      	beq.n	802a2a8 <PreprareWriteRequestEvent+0xe0>
 802a2ba:	210e      	movs	r1, #14
 802a2bc:	7201      	strb	r1, [r0, #8]
 802a2be:	e7f3      	b.n	802a2a8 <PreprareWriteRequestEvent+0xe0>
 802a2c0:	e7ff      	b.n	802a2c2 <PreprareWriteRequestEvent+0xfa>
 802a2c2:	2004      	movs	r0, #4
 802a2c4:	9000      	str	r0, [sp, #0]
 802a2c6:	2300      	movs	r3, #0
 802a2c8:	2216      	movs	r2, #22
 802a2ca:	4658      	mov	r0, fp
 802a2cc:	f7fe fe09 	bl	8028ee2 <GATTErrorResponsePDU>
 802a2d0:	e7ea      	b.n	802a2a8 <PreprareWriteRequestEvent+0xe0>

Disassembly of section i.ReadAttributeTypeUUID:

0802a2d2 <ReadAttributeTypeUUID>:
 802a2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a2d6:	460b      	mov	r3, r1
 802a2d8:	2400      	movs	r4, #0
 802a2da:	7846      	ldrb	r6, [r0, #1]
 802a2dc:	4601      	mov	r1, r0
 802a2de:	2228      	movs	r2, #40	; 0x28
 802a2e0:	2501      	movs	r5, #1
 802a2e2:	4620      	mov	r0, r4
 802a2e4:	2e0b      	cmp	r6, #11
 802a2e6:	d226      	bcs.n	802a336 <ReadAttributeTypeUUID+0x64>
 802a2e8:	e8df f006 	tbb	[pc, r6]
 802a2ec:	09090606 	.word	0x09090606
 802a2f0:	1712120e 	.word	0x1712120e
 802a2f4:	001e171e 	.word	0x001e171e
 802a2f8:	2402      	movs	r4, #2
 802a2fa:	7018      	strb	r0, [r3, #0]
 802a2fc:	e00b      	b.n	802a316 <ReadAttributeTypeUUID+0x44>
 802a2fe:	7018      	strb	r0, [r3, #0]
 802a300:	2402      	movs	r4, #2
 802a302:	705d      	strb	r5, [r3, #1]
 802a304:	709a      	strb	r2, [r3, #2]
 802a306:	e016      	b.n	802a336 <ReadAttributeTypeUUID+0x64>
 802a308:	2402      	movs	r4, #2
 802a30a:	7018      	strb	r0, [r3, #0]
 802a30c:	4620      	mov	r0, r4
 802a30e:	e002      	b.n	802a316 <ReadAttributeTypeUUID+0x44>
 802a310:	2402      	movs	r4, #2
 802a312:	7018      	strb	r0, [r3, #0]
 802a314:	2003      	movs	r0, #3
 802a316:	7058      	strb	r0, [r3, #1]
 802a318:	e7f4      	b.n	802a304 <ReadAttributeTypeUUID+0x32>
 802a31a:	7018      	strb	r0, [r3, #0]
 802a31c:	6848      	ldr	r0, [r1, #4]
 802a31e:	2402      	movs	r4, #2
 802a320:	8800      	ldrh	r0, [r0, #0]
 802a322:	f8a3 0001 	strh.w	r0, [r3, #1]
 802a326:	e006      	b.n	802a336 <ReadAttributeTypeUUID+0x64>
 802a328:	2410      	movs	r4, #16
 802a32a:	701d      	strb	r5, [r3, #0]
 802a32c:	6849      	ldr	r1, [r1, #4]
 802a32e:	4622      	mov	r2, r4
 802a330:	1c58      	adds	r0, r3, #1
 802a332:	f7e9 fd26 	bl	8013d82 <__aeabi_memcpy>
 802a336:	4620      	mov	r0, r4
 802a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

Disassembly of section i.ReadByUUIDRequestEvent:

0802a33c <ReadByUUIDRequestEvent>:
 802a33c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a340:	b099      	sub	sp, #100	; 0x64
 802a342:	4683      	mov	fp, r0
 802a344:	2004      	movs	r0, #4
 802a346:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802a348:	461d      	mov	r5, r3
 802a34a:	2b04      	cmp	r3, #4
 802a34c:	d002      	beq.n	802a354 <ReadByUUIDRequestEvent+0x18>
 802a34e:	2d01      	cmp	r5, #1
 802a350:	d003      	beq.n	802a35a <ReadByUUIDRequestEvent+0x1e>
 802a352:	e006      	b.n	802a362 <ReadByUUIDRequestEvent+0x26>
 802a354:	2a05      	cmp	r2, #5
 802a356:	d00a      	beq.n	802a36e <ReadByUUIDRequestEvent+0x32>
 802a358:	e003      	b.n	802a362 <ReadByUUIDRequestEvent+0x26>
 802a35a:	2a09      	cmp	r2, #9
 802a35c:	d012      	beq.n	802a384 <ReadByUUIDRequestEvent+0x48>
 802a35e:	2a17      	cmp	r2, #23
 802a360:	d010      	beq.n	802a384 <ReadByUUIDRequestEvent+0x48>
 802a362:	2a07      	cmp	r2, #7
 802a364:	d001      	beq.n	802a36a <ReadByUUIDRequestEvent+0x2e>
 802a366:	2a15      	cmp	r2, #21
 802a368:	d109      	bne.n	802a37e <ReadByUUIDRequestEvent+0x42>
 802a36a:	2d01      	cmp	r5, #1
 802a36c:	d00a      	beq.n	802a384 <ReadByUUIDRequestEvent+0x48>
 802a36e:	1f52      	subs	r2, r2, #5
 802a370:	4614      	mov	r4, r2
 802a372:	2d04      	cmp	r5, #4
 802a374:	d02c      	beq.n	802a3d0 <ReadByUUIDRequestEvent+0x94>
 802a376:	2c02      	cmp	r4, #2
 802a378:	d007      	beq.n	802a38a <ReadByUUIDRequestEvent+0x4e>
 802a37a:	2c10      	cmp	r4, #16
 802a37c:	d005      	beq.n	802a38a <ReadByUUIDRequestEvent+0x4e>
 802a37e:	2300      	movs	r3, #0
 802a380:	9000      	str	r0, [sp, #0]
 802a382:	e0f3      	b.n	802a56c <ReadByUUIDRequestEvent+0x230>
 802a384:	1fd2      	subs	r2, r2, #7
 802a386:	4614      	mov	r4, r2
 802a388:	e7f5      	b.n	802a376 <ReadByUUIDRequestEvent+0x3a>
 802a38a:	2d04      	cmp	r5, #4
 802a38c:	d020      	beq.n	802a3d0 <ReadByUUIDRequestEvent+0x94>
 802a38e:	a80b      	add	r0, sp, #44	; 0x2c
 802a390:	2d01      	cmp	r5, #1
 802a392:	d003      	beq.n	802a39c <ReadByUUIDRequestEvent+0x60>
 802a394:	2c02      	cmp	r4, #2
 802a396:	d014      	beq.n	802a3c2 <ReadByUUIDRequestEvent+0x86>
 802a398:	2101      	movs	r1, #1
 802a39a:	e013      	b.n	802a3c4 <ReadByUUIDRequestEvent+0x88>
 802a39c:	2100      	movs	r1, #0
 802a39e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 802a3a2:	1c40      	adds	r0, r0, #1
 802a3a4:	1d71      	adds	r1, r6, #5
 802a3a6:	f7e9 f886 	bl	80134b6 <BTPS_MemCopy>
 802a3aa:	2c02      	cmp	r4, #2
 802a3ac:	d001      	beq.n	802a3b2 <ReadByUUIDRequestEvent+0x76>
 802a3ae:	2001      	movs	r0, #1
 802a3b0:	e000      	b.n	802a3b4 <ReadByUUIDRequestEvent+0x78>
 802a3b2:	2000      	movs	r0, #0
 802a3b4:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
 802a3b8:	4622      	mov	r2, r4
 802a3ba:	1df1      	adds	r1, r6, #7
 802a3bc:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 802a3c0:	e004      	b.n	802a3cc <ReadByUUIDRequestEvent+0x90>
 802a3c2:	2100      	movs	r1, #0
 802a3c4:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 802a3c8:	1c40      	adds	r0, r0, #1
 802a3ca:	1d71      	adds	r1, r6, #5
 802a3cc:	f7e9 f873 	bl	80134b6 <BTPS_MemCopy>
 802a3d0:	f836 0f01 	ldrh.w	r0, [r6, #1]!
 802a3d4:	9015      	str	r0, [sp, #84]	; 0x54
 802a3d6:	8870      	ldrh	r0, [r6, #2]
 802a3d8:	9016      	str	r0, [sp, #88]	; 0x58
 802a3da:	9815      	ldr	r0, [sp, #84]	; 0x54
 802a3dc:	2800      	cmp	r0, #0
 802a3de:	d06a      	beq.n	802a4b6 <ReadByUUIDRequestEvent+0x17a>
 802a3e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 802a3e2:	2800      	cmp	r0, #0
 802a3e4:	d0fb      	beq.n	802a3de <ReadByUUIDRequestEvent+0xa2>
 802a3e6:	e9dd 0115 	ldrd	r0, r1, [sp, #84]	; 0x54
 802a3ea:	4288      	cmp	r0, r1
 802a3ec:	d863      	bhi.n	802a4b6 <ReadByUUIDRequestEvent+0x17a>
 802a3ee:	f8bb 0008 	ldrh.w	r0, [fp, #8]
 802a3f2:	2604      	movs	r6, #4
 802a3f4:	f040 0101 	orr.w	r1, r0, #1
 802a3f8:	f8ab 1008 	strh.w	r1, [fp, #8]
 802a3fc:	981a      	ldr	r0, [sp, #104]	; 0x68
 802a3fe:	f04f 0900 	mov.w	r9, #0
 802a402:	3010      	adds	r0, #16
 802a404:	9017      	str	r0, [sp, #92]	; 0x5c
 802a406:	f10b 0034 	add.w	r0, fp, #52	; 0x34
 802a40a:	46ca      	mov	sl, r9
 802a40c:	464f      	mov	r7, r9
 802a40e:	9018      	str	r0, [sp, #96]	; 0x60
 802a410:	e076      	b.n	802a500 <ReadByUUIDRequestEvent+0x1c4>
 802a412:	f8d9 0008 	ldr.w	r0, [r9, #8]
 802a416:	9908      	ldr	r1, [sp, #32]
 802a418:	2400      	movs	r4, #0
 802a41a:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
 802a41e:	e054      	b.n	802a4ca <ReadByUUIDRequestEvent+0x18e>
 802a420:	f898 0000 	ldrb.w	r0, [r8]
 802a424:	0740      	lsls	r0, r0, #29
 802a426:	d44d      	bmi.n	802a4c4 <ReadByUUIDRequestEvent+0x188>
 802a428:	a903      	add	r1, sp, #12
 802a42a:	4640      	mov	r0, r8
 802a42c:	f7ff ff51 	bl	802a2d2 <ReadAttributeTypeUUID>
 802a430:	2d04      	cmp	r5, #4
 802a432:	d005      	beq.n	802a440 <ReadByUUIDRequestEvent+0x104>
 802a434:	b3f0      	cbz	r0, 802a4b4 <ReadByUUIDRequestEvent+0x178>
 802a436:	a903      	add	r1, sp, #12
 802a438:	a80b      	add	r0, sp, #44	; 0x2c
 802a43a:	f7fd fde7 	bl	802800c <CompareUUID>
 802a43e:	b3c8      	cbz	r0, 802a4b4 <ReadByUUIDRequestEvent+0x178>
 802a440:	aa03      	add	r2, sp, #12
 802a442:	2100      	movs	r1, #0
 802a444:	4640      	mov	r0, r8
 802a446:	f7ff fce2 	bl	8029e0e <GetServiceUUID>
 802a44a:	b10d      	cbz	r5, 802a450 <ReadByUUIDRequestEvent+0x114>
 802a44c:	2d01      	cmp	r5, #1
 802a44e:	d108      	bne.n	802a462 <ReadByUUIDRequestEvent+0x126>
 802a450:	b380      	cbz	r0, 802a4b4 <ReadByUUIDRequestEvent+0x178>
 802a452:	2d01      	cmp	r5, #1
 802a454:	d105      	bne.n	802a462 <ReadByUUIDRequestEvent+0x126>
 802a456:	b368      	cbz	r0, 802a4b4 <ReadByUUIDRequestEvent+0x178>
 802a458:	a903      	add	r1, sp, #12
 802a45a:	a810      	add	r0, sp, #64	; 0x40
 802a45c:	f7fd fdd6 	bl	802800c <CompareUUID>
 802a460:	b340      	cbz	r0, 802a4b4 <ReadByUUIDRequestEvent+0x178>
 802a462:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 802a466:	9a08      	ldr	r2, [sp, #32]
 802a468:	981a      	ldr	r0, [sp, #104]	; 0x68
 802a46a:	4411      	add	r1, r2
 802a46c:	4421      	add	r1, r4
 802a46e:	8980      	ldrh	r0, [r0, #12]
 802a470:	b289      	uxth	r1, r1
 802a472:	300c      	adds	r0, #12
 802a474:	9100      	str	r1, [sp, #0]
 802a476:	e9cd 5001 	strd	r5, r0, [sp, #4]
 802a47a:	463a      	mov	r2, r7
 802a47c:	4658      	mov	r0, fp
 802a47e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a480:	991a      	ldr	r1, [sp, #104]	; 0x68
 802a482:	f7ff fbab 	bl	8029bdc <GenericReadRequestEvent>
 802a486:	0007      	movs	r7, r0
 802a488:	d02e      	beq.n	802a4e8 <ReadByUUIDRequestEvent+0x1ac>
 802a48a:	f8d7 a000 	ldr.w	sl, [r7]
 802a48e:	0770      	lsls	r0, r6, #29
 802a490:	d518      	bpl.n	802a4c4 <ReadByUUIDRequestEvent+0x188>
 802a492:	2000      	movs	r0, #0
 802a494:	9000      	str	r0, [sp, #0]
 802a496:	9808      	ldr	r0, [sp, #32]
 802a498:	464a      	mov	r2, r9
 802a49a:	4420      	add	r0, r4
 802a49c:	b283      	uxth	r3, r0
 802a49e:	4639      	mov	r1, r7
 802a4a0:	4658      	mov	r0, fp
 802a4a2:	f7ff fcd7 	bl	8029e54 <HandleReadRequestEvent>
 802a4a6:	b158      	cbz	r0, 802a4c0 <ReadByUUIDRequestEvent+0x184>
 802a4a8:	4651      	mov	r1, sl
 802a4aa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802a4ac:	f000 fa4c 	bl	802a948 <SearchTransactionInfoEntry>
 802a4b0:	0007      	movs	r7, r0
 802a4b2:	e001      	b.n	802a4b8 <ReadByUUIDRequestEvent+0x17c>
 802a4b4:	e006      	b.n	802a4c4 <ReadByUUIDRequestEvent+0x188>
 802a4b6:	e05f      	b.n	802a578 <ReadByUUIDRequestEvent+0x23c>
 802a4b8:	d104      	bne.n	802a4c4 <ReadByUUIDRequestEvent+0x188>
 802a4ba:	f046 0602 	orr.w	r6, r6, #2
 802a4be:	e00a      	b.n	802a4d6 <ReadByUUIDRequestEvent+0x19a>
 802a4c0:	f026 0604 	bic.w	r6, r6, #4
 802a4c4:	f108 0808 	add.w	r8, r8, #8
 802a4c8:	1c64      	adds	r4, r4, #1
 802a4ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 802a4cc:	42a0      	cmp	r0, r4
 802a4ce:	d902      	bls.n	802a4d6 <ReadByUUIDRequestEvent+0x19a>
 802a4d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a4d2:	42a0      	cmp	r0, r4
 802a4d4:	d8a4      	bhi.n	802a420 <ReadByUUIDRequestEvent+0xe4>
 802a4d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 802a4d8:	42a0      	cmp	r0, r4
 802a4da:	d102      	bne.n	802a4e2 <ReadByUUIDRequestEvent+0x1a6>
 802a4dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a4de:	4288      	cmp	r0, r1
 802a4e0:	d11c      	bne.n	802a51c <ReadByUUIDRequestEvent+0x1e0>
 802a4e2:	07b0      	lsls	r0, r6, #30
 802a4e4:	d00c      	beq.n	802a500 <ReadByUUIDRequestEvent+0x1c4>
 802a4e6:	e019      	b.n	802a51c <ReadByUUIDRequestEvent+0x1e0>
 802a4e8:	ea5f 000a 	movs.w	r0, sl
 802a4ec:	d003      	beq.n	802a4f6 <ReadByUUIDRequestEvent+0x1ba>
 802a4ee:	4601      	mov	r1, r0
 802a4f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802a4f2:	f7fd fe61 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802a4f6:	f04f 0a00 	mov.w	sl, #0
 802a4fa:	f046 0601 	orr.w	r6, r6, #1
 802a4fe:	e7ea      	b.n	802a4d6 <ReadByUUIDRequestEvent+0x19a>
 802a500:	a908      	add	r1, sp, #32
 802a502:	9816      	ldr	r0, [sp, #88]	; 0x58
 802a504:	e9cd 0100 	strd	r0, r1, [sp]
 802a508:	4649      	mov	r1, r9
 802a50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802a50c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802a50e:	9818      	ldr	r0, [sp, #96]	; 0x60
 802a510:	f7ff fc28 	bl	8029d64 <GetNextCharacteristicDiscoveryService>
 802a514:	ea5f 0900 	movs.w	r9, r0
 802a518:	f47f af7b 	bne.w	802a412 <ReadByUUIDRequestEvent+0xd6>
 802a51c:	f8bb 0008 	ldrh.w	r0, [fp, #8]
 802a520:	f020 0101 	bic.w	r1, r0, #1
 802a524:	f8ab 1008 	strh.w	r1, [fp, #8]
 802a528:	b1df      	cbz	r7, 802a562 <ReadByUUIDRequestEvent+0x226>
 802a52a:	6978      	ldr	r0, [r7, #20]
 802a52c:	b140      	cbz	r0, 802a540 <ReadByUUIDRequestEvent+0x204>
 802a52e:	2300      	movs	r3, #0
 802a530:	463a      	mov	r2, r7
 802a532:	4658      	mov	r0, fp
 802a534:	991a      	ldr	r1, [sp, #104]	; 0x68
 802a536:	f7fd ff90 	bl	802845a <DispatchServerReadRequestEvent>
 802a53a:	b01d      	add	sp, #116	; 0x74
 802a53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802a542:	b148      	cbz	r0, 802a558 <ReadByUUIDRequestEvent+0x21c>
 802a544:	6843      	ldr	r3, [r0, #4]
 802a546:	b13b      	cbz	r3, 802a558 <ReadByUUIDRequestEvent+0x21c>
 802a548:	300c      	adds	r0, #12
 802a54a:	9000      	str	r0, [sp, #0]
 802a54c:	2200      	movs	r2, #0
 802a54e:	4658      	mov	r0, fp
 802a550:	1c5b      	adds	r3, r3, #1
 802a552:	991a      	ldr	r1, [sp, #104]	; 0x68
 802a554:	f7ff fdb0 	bl	802a0b8 <L2CAPSendPDU>
 802a558:	4651      	mov	r1, sl
 802a55a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802a55c:	f7fd fe2c 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802a560:	e7eb      	b.n	802a53a <ReadByUUIDRequestEvent+0x1fe>
 802a562:	07b0      	lsls	r0, r6, #30
 802a564:	d1e9      	bne.n	802a53a <ReadByUUIDRequestEvent+0x1fe>
 802a566:	200a      	movs	r0, #10
 802a568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802a56a:	9000      	str	r0, [sp, #0]
 802a56c:	4658      	mov	r0, fp
 802a56e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802a570:	991a      	ldr	r1, [sp, #104]	; 0x68
 802a572:	f7fe fcb6 	bl	8028ee2 <GATTErrorResponsePDU>
 802a576:	e7e0      	b.n	802a53a <ReadByUUIDRequestEvent+0x1fe>
 802a578:	2001      	movs	r0, #1
 802a57a:	e7f5      	b.n	802a568 <ReadByUUIDRequestEvent+0x22c>

Disassembly of section i.ReadByUUIDRequestResponse:

0802a57c <ReadByUUIDRequestResponse>:
 802a57c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a580:	4682      	mov	sl, r0
 802a582:	b081      	sub	sp, #4
 802a584:	4698      	mov	r8, r3
 802a586:	4615      	mov	r5, r2
 802a588:	2600      	movs	r6, #0
 802a58a:	f102 0014 	add.w	r0, r2, #20
 802a58e:	6951      	ldr	r1, [r2, #20]
 802a590:	f7fd fe26 	bl	80281e0 <DeleteHandleInfoEntryByEntryPointer>
 802a594:	0007      	movs	r7, r0
 802a596:	d07c      	beq.n	802a692 <ReadByUUIDRequestResponse+0x116>
 802a598:	6aac      	ldr	r4, [r5, #40]	; 0x28
 802a59a:	46b3      	mov	fp, r6
 802a59c:	f104 000c 	add.w	r0, r4, #12
 802a5a0:	6861      	ldr	r1, [r4, #4]
 802a5a2:	4681      	mov	r9, r0
 802a5a4:	2201      	movs	r2, #1
 802a5a6:	b961      	cbnz	r1, 802a5c2 <ReadByUUIDRequestResponse+0x46>
 802a5a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 802a5aa:	f8c4 b000 	str.w	fp, [r4]
 802a5ae:	390d      	subs	r1, #13
 802a5b0:	60a1      	str	r1, [r4, #8]
 802a5b2:	7a69      	ldrb	r1, [r5, #9]
 802a5b4:	f041 0101 	orr.w	r1, r1, #1
 802a5b8:	7321      	strb	r1, [r4, #12]
 802a5ba:	7a29      	ldrb	r1, [r5, #8]
 802a5bc:	2901      	cmp	r1, #1
 802a5be:	d000      	beq.n	802a5c2 <ReadByUUIDRequestResponse+0x46>
 802a5c0:	6062      	str	r2, [r4, #4]
 802a5c2:	6861      	ldr	r1, [r4, #4]
 802a5c4:	4643      	mov	r3, r8
 802a5c6:	f108 0c02 	add.w	ip, r8, #2
 802a5ca:	eb01 080c 	add.w	r8, r1, ip
 802a5ce:	f8d4 c008 	ldr.w	ip, [r4, #8]
 802a5d2:	45e0      	cmp	r8, ip
 802a5d4:	d907      	bls.n	802a5e6 <ReadByUUIDRequestResponse+0x6a>
 802a5d6:	6823      	ldr	r3, [r4, #0]
 802a5d8:	b91b      	cbnz	r3, 802a5e2 <ReadByUUIDRequestResponse+0x66>
 802a5da:	ebac 0301 	sub.w	r3, ip, r1
 802a5de:	1e9b      	subs	r3, r3, #2
 802a5e0:	e003      	b.n	802a5ea <ReadByUUIDRequestResponse+0x6e>
 802a5e2:	2601      	movs	r6, #1
 802a5e4:	e01e      	b.n	802a624 <ReadByUUIDRequestResponse+0xa8>
 802a5e6:	6821      	ldr	r1, [r4, #0]
 802a5e8:	b961      	cbnz	r1, 802a604 <ReadByUUIDRequestResponse+0x88>
 802a5ea:	6023      	str	r3, [r4, #0]
 802a5ec:	7a29      	ldrb	r1, [r5, #8]
 802a5ee:	b119      	cbz	r1, 802a5f8 <ReadByUUIDRequestResponse+0x7c>
 802a5f0:	2904      	cmp	r1, #4
 802a5f2:	d003      	beq.n	802a5fc <ReadByUUIDRequestResponse+0x80>
 802a5f4:	2906      	cmp	r1, #6
 802a5f6:	d105      	bne.n	802a604 <ReadByUUIDRequestResponse+0x88>
 802a5f8:	1c99      	adds	r1, r3, #2
 802a5fa:	e002      	b.n	802a602 <ReadByUUIDRequestResponse+0x86>
 802a5fc:	2b02      	cmp	r3, #2
 802a5fe:	d003      	beq.n	802a608 <ReadByUUIDRequestResponse+0x8c>
 802a600:	2102      	movs	r1, #2
 802a602:	7041      	strb	r1, [r0, #1]
 802a604:	b116      	cbz	r6, 802a60c <ReadByUUIDRequestResponse+0x90>
 802a606:	e00d      	b.n	802a624 <ReadByUUIDRequestResponse+0xa8>
 802a608:	7042      	strb	r2, [r0, #1]
 802a60a:	e7fb      	b.n	802a604 <ReadByUUIDRequestResponse+0x88>
 802a60c:	6820      	ldr	r0, [r4, #0]
 802a60e:	4298      	cmp	r0, r3
 802a610:	d1e7      	bne.n	802a5e2 <ReadByUUIDRequestResponse+0x66>
 802a612:	980e      	ldr	r0, [sp, #56]	; 0x38
 802a614:	9000      	str	r0, [sp, #0]
 802a616:	89b9      	ldrh	r1, [r7, #12]
 802a618:	2200      	movs	r2, #0
 802a61a:	4620      	mov	r0, r4
 802a61c:	f7fd fb49 	bl	8027cb2 <BuildRecordTwoWordsVariable>
 802a620:	2800      	cmp	r0, #0
 802a622:	d0de      	beq.n	802a5e2 <ReadByUUIDRequestResponse+0x66>
 802a624:	9902      	ldr	r1, [sp, #8]
 802a626:	6968      	ldr	r0, [r5, #20]
 802a628:	f101 0810 	add.w	r8, r1, #16
 802a62c:	b918      	cbnz	r0, 802a636 <ReadByUUIDRequestResponse+0xba>
 802a62e:	f89a 1008 	ldrb.w	r1, [sl, #8]
 802a632:	07c9      	lsls	r1, r1, #31
 802a634:	d000      	beq.n	802a638 <ReadByUUIDRequestResponse+0xbc>
 802a636:	b156      	cbz	r6, 802a64e <ReadByUUIDRequestResponse+0xd2>
 802a638:	f8cd 9000 	str.w	r9, [sp]
 802a63c:	6863      	ldr	r3, [r4, #4]
 802a63e:	2200      	movs	r2, #0
 802a640:	4650      	mov	r0, sl
 802a642:	1c5b      	adds	r3, r3, #1
 802a644:	9902      	ldr	r1, [sp, #8]
 802a646:	f7ff fd37 	bl	802a0b8 <L2CAPSendPDU>
 802a64a:	4604      	mov	r4, r0
 802a64c:	e01b      	b.n	802a686 <ReadByUUIDRequestResponse+0x10a>
 802a64e:	b118      	cbz	r0, 802a658 <ReadByUUIDRequestResponse+0xdc>
 802a650:	f89a 0008 	ldrb.w	r0, [sl, #8]
 802a654:	07c0      	lsls	r0, r0, #31
 802a656:	d004      	beq.n	802a662 <ReadByUUIDRequestResponse+0xe6>
 802a658:	2400      	movs	r4, #0
 802a65a:	4638      	mov	r0, r7
 802a65c:	f7ee fb3b 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 802a660:	e018      	b.n	802a694 <ReadByUUIDRequestResponse+0x118>
 802a662:	f8cd b000 	str.w	fp, [sp]
 802a666:	2300      	movs	r3, #0
 802a668:	461a      	mov	r2, r3
 802a66a:	4650      	mov	r0, sl
 802a66c:	6829      	ldr	r1, [r5, #0]
 802a66e:	f000 f8cf 	bl	802a810 <ScheduleAsynchronousDispatch>
 802a672:	0004      	movs	r4, r0
 802a674:	d0f1      	beq.n	802a65a <ReadByUUIDRequestResponse+0xde>
 802a676:	2011      	movs	r0, #17
 802a678:	9000      	str	r0, [sp, #0]
 802a67a:	89bb      	ldrh	r3, [r7, #12]
 802a67c:	7a6a      	ldrb	r2, [r5, #9]
 802a67e:	4650      	mov	r0, sl
 802a680:	9902      	ldr	r1, [sp, #8]
 802a682:	f7fe fc2e 	bl	8028ee2 <GATTErrorResponsePDU>
 802a686:	4640      	mov	r0, r8
 802a688:	6829      	ldr	r1, [r5, #0]
 802a68a:	f7fd fd95 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802a68e:	e7e4      	b.n	802a65a <ReadByUUIDRequestResponse+0xde>
 802a690:	e7ff      	b.n	802a692 <ReadByUUIDRequestResponse+0x116>
 802a692:	4c02      	ldr	r4, [pc, #8]	; (802a69c <ReadByUUIDRequestResponse+0x120>)
 802a694:	b005      	add	sp, #20
 802a696:	4620      	mov	r0, r4
 802a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a69c:	fffffc10 	.word	0xfffffc10

Disassembly of section i.ReadMultipleRequestEvent:

0802a6a0 <ReadMultipleRequestEvent>:
 802a6a0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6a4:	4698      	mov	r8, r3
 802a6a6:	460e      	mov	r6, r1
 802a6a8:	4682      	mov	sl, r0
 802a6aa:	2a05      	cmp	r2, #5
 802a6ac:	d32f      	bcc.n	802a70e <ReadMultipleRequestEvent+0x6e>
 802a6ae:	1e52      	subs	r2, r2, #1
 802a6b0:	0857      	lsrs	r7, r2, #1
 802a6b2:	2200      	movs	r2, #0
 802a6b4:	4615      	mov	r5, r2
 802a6b6:	4614      	mov	r4, r2
 802a6b8:	f04f 0908 	mov.w	r9, #8
 802a6bc:	e011      	b.n	802a6e2 <ReadMultipleRequestEvent+0x42>
 802a6be:	eb08 0044 	add.w	r0, r8, r4, lsl #1
 802a6c2:	89b1      	ldrh	r1, [r6, #12]
 802a6c4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
 802a6c8:	9000      	str	r0, [sp, #0]
 802a6ca:	310c      	adds	r1, #12
 802a6cc:	e9cd 9101 	strd	r9, r1, [sp, #4]
 802a6d0:	230e      	movs	r3, #14
 802a6d2:	4631      	mov	r1, r6
 802a6d4:	4650      	mov	r0, sl
 802a6d6:	f7ff fa81 	bl	8029bdc <GenericReadRequestEvent>
 802a6da:	0002      	movs	r2, r0
 802a6dc:	d00d      	beq.n	802a6fa <ReadMultipleRequestEvent+0x5a>
 802a6de:	6815      	ldr	r5, [r2, #0]
 802a6e0:	1c64      	adds	r4, r4, #1
 802a6e2:	42bc      	cmp	r4, r7
 802a6e4:	d3eb      	bcc.n	802a6be <ReadMultipleRequestEvent+0x1e>
 802a6e6:	2a00      	cmp	r2, #0
 802a6e8:	d018      	beq.n	802a71c <ReadMultipleRequestEvent+0x7c>
 802a6ea:	b003      	add	sp, #12
 802a6ec:	4631      	mov	r1, r6
 802a6ee:	4650      	mov	r0, sl
 802a6f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6f4:	2300      	movs	r3, #0
 802a6f6:	f7fd beb0 	b.w	802845a <DispatchServerReadRequestEvent>
 802a6fa:	2d00      	cmp	r5, #0
 802a6fc:	d00e      	beq.n	802a71c <ReadMultipleRequestEvent+0x7c>
 802a6fe:	b003      	add	sp, #12
 802a700:	4629      	mov	r1, r5
 802a702:	f106 0010 	add.w	r0, r6, #16
 802a706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a70a:	f7fd bd55 	b.w	80281b8 <DeleteFreeTransactionInfoEntry>
 802a70e:	2004      	movs	r0, #4
 802a710:	9000      	str	r0, [sp, #0]
 802a712:	2300      	movs	r3, #0
 802a714:	220e      	movs	r2, #14
 802a716:	4650      	mov	r0, sl
 802a718:	f7fe fbe3 	bl	8028ee2 <GATTErrorResponsePDU>
 802a71c:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.ReadMultipleRequestResponse:

0802a720 <ReadMultipleRequestResponse>:
 802a720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a724:	4689      	mov	r9, r1
 802a726:	4682      	mov	sl, r0
 802a728:	461e      	mov	r6, r3
 802a72a:	4615      	mov	r5, r2
 802a72c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802a730:	f102 0014 	add.w	r0, r2, #20
 802a734:	6951      	ldr	r1, [r2, #20]
 802a736:	f7fd fd53 	bl	80281e0 <DeleteHandleInfoEntryByEntryPointer>
 802a73a:	0007      	movs	r7, r0
 802a73c:	d03f      	beq.n	802a7be <ReadMultipleRequestResponse+0x9e>
 802a73e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 802a740:	6860      	ldr	r0, [r4, #4]
 802a742:	b920      	cbnz	r0, 802a74e <ReadMultipleRequestResponse+0x2e>
 802a744:	6a68      	ldr	r0, [r5, #36]	; 0x24
 802a746:	380d      	subs	r0, #13
 802a748:	60a0      	str	r0, [r4, #8]
 802a74a:	200f      	movs	r0, #15
 802a74c:	7320      	strb	r0, [r4, #12]
 802a74e:	6860      	ldr	r0, [r4, #4]
 802a750:	68a1      	ldr	r1, [r4, #8]
 802a752:	1982      	adds	r2, r0, r6
 802a754:	428a      	cmp	r2, r1
 802a756:	d900      	bls.n	802a75a <ReadMultipleRequestResponse+0x3a>
 802a758:	1a0e      	subs	r6, r1, r0
 802a75a:	b166      	cbz	r6, 802a776 <ReadMultipleRequestResponse+0x56>
 802a75c:	f1b8 0f00 	cmp.w	r8, #0
 802a760:	d009      	beq.n	802a776 <ReadMultipleRequestResponse+0x56>
 802a762:	f104 010d 	add.w	r1, r4, #13
 802a766:	4408      	add	r0, r1
 802a768:	4632      	mov	r2, r6
 802a76a:	4641      	mov	r1, r8
 802a76c:	f7e8 fea3 	bl	80134b6 <BTPS_MemCopy>
 802a770:	6860      	ldr	r0, [r4, #4]
 802a772:	4430      	add	r0, r6
 802a774:	6060      	str	r0, [r4, #4]
 802a776:	4603      	mov	r3, r0
 802a778:	68a0      	ldr	r0, [r4, #8]
 802a77a:	f109 0610 	add.w	r6, r9, #16
 802a77e:	4283      	cmp	r3, r0
 802a780:	d013      	beq.n	802a7aa <ReadMultipleRequestResponse+0x8a>
 802a782:	6968      	ldr	r0, [r5, #20]
 802a784:	b188      	cbz	r0, 802a7aa <ReadMultipleRequestResponse+0x8a>
 802a786:	2000      	movs	r0, #0
 802a788:	9000      	str	r0, [sp, #0]
 802a78a:	4603      	mov	r3, r0
 802a78c:	4602      	mov	r2, r0
 802a78e:	4650      	mov	r0, sl
 802a790:	6829      	ldr	r1, [r5, #0]
 802a792:	f000 f83d 	bl	802a810 <ScheduleAsynchronousDispatch>
 802a796:	0004      	movs	r4, r0
 802a798:	d003      	beq.n	802a7a2 <ReadMultipleRequestResponse+0x82>
 802a79a:	4630      	mov	r0, r6
 802a79c:	6829      	ldr	r1, [r5, #0]
 802a79e:	f7fd fd0b 	bl	80281b8 <DeleteFreeTransactionInfoEntry>
 802a7a2:	4638      	mov	r0, r7
 802a7a4:	f7ee fa97 	bl	8018cd6 <BSC_FreeGenericListEntryMemory>
 802a7a8:	e00a      	b.n	802a7c0 <ReadMultipleRequestResponse+0xa0>
 802a7aa:	340c      	adds	r4, #12
 802a7ac:	2200      	movs	r2, #0
 802a7ae:	4649      	mov	r1, r9
 802a7b0:	4650      	mov	r0, sl
 802a7b2:	1c5b      	adds	r3, r3, #1
 802a7b4:	9400      	str	r4, [sp, #0]
 802a7b6:	f7ff fc7f 	bl	802a0b8 <L2CAPSendPDU>
 802a7ba:	4604      	mov	r4, r0
 802a7bc:	e7ed      	b.n	802a79a <ReadMultipleRequestResponse+0x7a>
 802a7be:	4c02      	ldr	r4, [pc, #8]	; (802a7c8 <ReadMultipleRequestResponse+0xa8>)
 802a7c0:	4620      	mov	r0, r4
 802a7c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7c6:	0000      	.short	0x0000
 802a7c8:	fffffc10 	.word	0xfffffc10

Disassembly of section i.ReadResponseEvent:

0802a7cc <ReadResponseEvent>:
 802a7cc:	b51c      	push	{r2, r3, r4, lr}
 802a7ce:	9c04      	ldr	r4, [sp, #16]
 802a7d0:	e9cd 3400 	strd	r3, r4, [sp]
 802a7d4:	2306      	movs	r3, #6
 802a7d6:	f000 f801 	bl	802a7dc <ReadResponseEventHandler>
 802a7da:	bd1c      	pop	{r2, r3, r4, pc}

Disassembly of section i.ReadResponseEventHandler:

0802a7dc <ReadResponseEventHandler>:
 802a7dc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802a7de:	4614      	mov	r4, r2
 802a7e0:	4605      	mov	r5, r0
 802a7e2:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 802a7e6:	2800      	cmp	r0, #0
 802a7e8:	d011      	beq.n	802a80e <ReadResponseEventHandler+0x32>
 802a7ea:	1e40      	subs	r0, r0, #1
 802a7ec:	b280      	uxth	r0, r0
 802a7ee:	1c52      	adds	r2, r2, #1
 802a7f0:	e9cd 0200 	strd	r0, r2, [sp]
 802a7f4:	4622      	mov	r2, r4
 802a7f6:	4628      	mov	r0, r5
 802a7f8:	f7fe fa12 	bl	8028c20 <FormatClientEventWordPointer>
 802a7fc:	0001      	movs	r1, r0
 802a7fe:	d006      	beq.n	802a80e <ReadResponseEventHandler+0x32>
 802a800:	6a22      	ldr	r2, [r4, #32]
 802a802:	6828      	ldr	r0, [r5, #0]
 802a804:	69a3      	ldr	r3, [r4, #24]
 802a806:	b002      	add	sp, #8
 802a808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a80c:	4718      	bx	r3
 802a80e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

Disassembly of section i.ScheduleAsynchronousDispatch:

0802a810 <ScheduleAsynchronousDispatch>:
 802a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a814:	4682      	mov	sl, r0
 802a816:	461f      	mov	r7, r3
 802a818:	4690      	mov	r8, r2
 802a81a:	4689      	mov	r9, r1
 802a81c:	2014      	movs	r0, #20
 802a81e:	9d08      	ldr	r5, [sp, #32]
 802a820:	f7e8 fdcc 	bl	80133bc <BTPS_AllocateMemory>
 802a824:	0004      	movs	r4, r0
 802a826:	f46f 767b 	mvn.w	r6, #1004	; 0x3ec
 802a82a:	d01a      	beq.n	802a862 <ScheduleAsynchronousDispatch+0x52>
 802a82c:	2214      	movs	r2, #20
 802a82e:	2100      	movs	r1, #0
 802a830:	f7e8 fe45 	bl	80134be <BTPS_MemInitialize>
 802a834:	f884 8000 	strb.w	r8, [r4]
 802a838:	e9c4 9701 	strd	r9, r7, [r4, #4]
 802a83c:	b11d      	cbz	r5, 802a846 <ScheduleAsynchronousDispatch+0x36>
 802a83e:	6828      	ldr	r0, [r5, #0]
 802a840:	60e0      	str	r0, [r4, #12]
 802a842:	88a8      	ldrh	r0, [r5, #4]
 802a844:	8220      	strh	r0, [r4, #16]
 802a846:	4622      	mov	r2, r4
 802a848:	4907      	ldr	r1, [pc, #28]	; (802a868 <ScheduleAsynchronousDispatch+0x58>)
 802a84a:	f8da 0000 	ldr.w	r0, [sl]
 802a84e:	f7ee fc5b 	bl	8019108 <BSC_ScheduleAsynchronousCallback>
 802a852:	2800      	cmp	r0, #0
 802a854:	dd02      	ble.n	802a85c <ScheduleAsynchronousDispatch+0x4c>
 802a856:	2000      	movs	r0, #0
 802a858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a85c:	4620      	mov	r0, r4
 802a85e:	f7e8 fdc7 	bl	80133f0 <BTPS_FreeMemory>
 802a862:	4630      	mov	r0, r6
 802a864:	e7f8      	b.n	802a858 <ScheduleAsynchronousDispatch+0x48>
 802a866:	0000      	.short	0x0000
 802a868:	08027be5 	.word	0x08027be5

Disassembly of section i.SearchCharacteristicInfoEntry:

0802a86c <SearchCharacteristicInfoEntry>:
 802a86c:	b503      	push	{r0, r1, lr}
 802a86e:	b081      	sub	sp, #4
 802a870:	2320      	movs	r3, #32
 802a872:	9000      	str	r0, [sp, #0]
 802a874:	2214      	movs	r2, #20
 802a876:	a902      	add	r1, sp, #8
 802a878:	2003      	movs	r0, #3
 802a87a:	f7ee fc5e 	bl	801913a <BSC_SearchGenericListEntry>
 802a87e:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchConnectionInfoEntryByBD_ADDR:

0802a880 <SearchConnectionInfoEntryByBD_ADDR>:
 802a880:	b510      	push	{r4, lr}
 802a882:	6800      	ldr	r0, [r0, #0]
 802a884:	e000      	b.n	802a888 <SearchConnectionInfoEntryByBD_ADDR+0x8>
 802a886:	6980      	ldr	r0, [r0, #24]
 802a888:	2800      	cmp	r0, #0
 802a88a:	d01a      	beq.n	802a8c2 <SearchConnectionInfoEntryByBD_ADDR+0x42>
 802a88c:	7903      	ldrb	r3, [r0, #4]
 802a88e:	428b      	cmp	r3, r1
 802a890:	d1f9      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a892:	7943      	ldrb	r3, [r0, #5]
 802a894:	7814      	ldrb	r4, [r2, #0]
 802a896:	42a3      	cmp	r3, r4
 802a898:	d1f5      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a89a:	7983      	ldrb	r3, [r0, #6]
 802a89c:	7854      	ldrb	r4, [r2, #1]
 802a89e:	42a3      	cmp	r3, r4
 802a8a0:	d1f1      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a8a2:	79c3      	ldrb	r3, [r0, #7]
 802a8a4:	7894      	ldrb	r4, [r2, #2]
 802a8a6:	42a3      	cmp	r3, r4
 802a8a8:	d1ed      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a8aa:	7a03      	ldrb	r3, [r0, #8]
 802a8ac:	78d4      	ldrb	r4, [r2, #3]
 802a8ae:	42a3      	cmp	r3, r4
 802a8b0:	d1e9      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a8b2:	7a43      	ldrb	r3, [r0, #9]
 802a8b4:	7914      	ldrb	r4, [r2, #4]
 802a8b6:	42a3      	cmp	r3, r4
 802a8b8:	d1e5      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a8ba:	7a83      	ldrb	r3, [r0, #10]
 802a8bc:	7954      	ldrb	r4, [r2, #5]
 802a8be:	42a3      	cmp	r3, r4
 802a8c0:	d1e1      	bne.n	802a886 <SearchConnectionInfoEntryByBD_ADDR+0x6>
 802a8c2:	bd10      	pop	{r4, pc}

Disassembly of section i.SearchGATTContextInfoEntry:

0802a8c4 <SearchGATTContextInfoEntry>:
 802a8c4:	b503      	push	{r0, r1, lr}
 802a8c6:	b081      	sub	sp, #4
 802a8c8:	2338      	movs	r3, #56	; 0x38
 802a8ca:	9000      	str	r0, [sp, #0]
 802a8cc:	2200      	movs	r2, #0
 802a8ce:	a902      	add	r1, sp, #8
 802a8d0:	2007      	movs	r0, #7
 802a8d2:	f7ee fc32 	bl	801913a <BSC_SearchGenericListEntry>
 802a8d6:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchHandleInfoEntry:

0802a8d8 <SearchHandleInfoEntry>:
 802a8d8:	b503      	push	{r0, r1, lr}
 802a8da:	b081      	sub	sp, #4
 802a8dc:	2310      	movs	r3, #16
 802a8de:	9000      	str	r0, [sp, #0]
 802a8e0:	220c      	movs	r2, #12
 802a8e2:	a902      	add	r1, sp, #8
 802a8e4:	2003      	movs	r0, #3
 802a8e6:	f7ee fc28 	bl	801913a <BSC_SearchGenericListEntry>
 802a8ea:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchServiceDiscoveryInfoEntry:

0802a8ec <SearchServiceDiscoveryInfoEntry>:
 802a8ec:	b503      	push	{r0, r1, lr}
 802a8ee:	b081      	sub	sp, #4
 802a8f0:	2328      	movs	r3, #40	; 0x28
 802a8f2:	9000      	str	r0, [sp, #0]
 802a8f4:	2200      	movs	r2, #0
 802a8f6:	a902      	add	r1, sp, #8
 802a8f8:	2007      	movs	r0, #7
 802a8fa:	f7ee fc1e 	bl	801913a <BSC_SearchGenericListEntry>
 802a8fe:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchServiceHandleInfoEntry:

0802a900 <SearchServiceHandleInfoEntry>:
 802a900:	b503      	push	{r0, r1, lr}
 802a902:	b081      	sub	sp, #4
 802a904:	2304      	movs	r3, #4
 802a906:	9000      	str	r0, [sp, #0]
 802a908:	2200      	movs	r2, #0
 802a90a:	a902      	add	r1, sp, #8
 802a90c:	2003      	movs	r0, #3
 802a90e:	f7ee fc14 	bl	801913a <BSC_SearchGenericListEntry>
 802a912:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchServiceInfoEntry:

0802a914 <SearchServiceInfoEntry>:
 802a914:	b503      	push	{r0, r1, lr}
 802a916:	b081      	sub	sp, #4
 802a918:	2320      	movs	r3, #32
 802a91a:	9000      	str	r0, [sp, #0]
 802a91c:	2200      	movs	r2, #0
 802a91e:	a902      	add	r1, sp, #8
 802a920:	2007      	movs	r0, #7
 802a922:	f7ee fc0a 	bl	801913a <BSC_SearchGenericListEntry>
 802a926:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchServiceInfoEntryByHandle:

0802a928 <SearchServiceInfoEntryByHandle>:
 802a928:	4602      	mov	r2, r0
 802a92a:	2000      	movs	r0, #0
 802a92c:	2900      	cmp	r1, #0
 802a92e:	d00a      	beq.n	802a946 <SearchServiceInfoEntryByHandle+0x1e>
 802a930:	6810      	ldr	r0, [r2, #0]
 802a932:	e000      	b.n	802a936 <SearchServiceInfoEntryByHandle+0xe>
 802a934:	6a00      	ldr	r0, [r0, #32]
 802a936:	2800      	cmp	r0, #0
 802a938:	d005      	beq.n	802a946 <SearchServiceInfoEntryByHandle+0x1e>
 802a93a:	8982      	ldrh	r2, [r0, #12]
 802a93c:	428a      	cmp	r2, r1
 802a93e:	d8f9      	bhi.n	802a934 <SearchServiceInfoEntryByHandle+0xc>
 802a940:	89c2      	ldrh	r2, [r0, #14]
 802a942:	428a      	cmp	r2, r1
 802a944:	d3f6      	bcc.n	802a934 <SearchServiceInfoEntryByHandle+0xc>
 802a946:	4770      	bx	lr

Disassembly of section i.SearchTransactionInfoEntry:

0802a948 <SearchTransactionInfoEntry>:
 802a948:	b503      	push	{r0, r1, lr}
 802a94a:	b081      	sub	sp, #4
 802a94c:	232c      	movs	r3, #44	; 0x2c
 802a94e:	9000      	str	r0, [sp, #0]
 802a950:	2200      	movs	r2, #0
 802a952:	a902      	add	r1, sp, #8
 802a954:	2007      	movs	r0, #7
 802a956:	f7ee fbf0 	bl	801913a <BSC_SearchGenericListEntry>
 802a95a:	bd0e      	pop	{r1, r2, r3, pc}

Disassembly of section i.SearchTransactionInfoEntryByType:

0802a95c <SearchTransactionInfoEntryByType>:
 802a95c:	6800      	ldr	r0, [r0, #0]
 802a95e:	e000      	b.n	802a962 <SearchTransactionInfoEntryByType+0x6>
 802a960:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 802a962:	2800      	cmp	r0, #0
 802a964:	d002      	beq.n	802a96c <SearchTransactionInfoEntryByType+0x10>
 802a966:	7a02      	ldrb	r2, [r0, #8]
 802a968:	428a      	cmp	r2, r1
 802a96a:	d1f9      	bne.n	802a960 <SearchTransactionInfoEntryByType+0x4>
 802a96c:	4770      	bx	lr

Disassembly of section i.SendNextQueuedClientRequest:

0802a96e <SendNextQueuedClientRequest>:
 802a96e:	b538      	push	{r3, r4, r5, lr}
 802a970:	4605      	mov	r5, r0
 802a972:	460c      	mov	r4, r1
 802a974:	4608      	mov	r0, r1
 802a976:	f7ff fbc3 	bl	802a100 <ObtainOutstandingClientTransaction>
 802a97a:	0002      	movs	r2, r0
 802a97c:	d010      	beq.n	802a9a0 <SendNextQueuedClientRequest+0x32>
 802a97e:	7a90      	ldrb	r0, [r2, #10]
 802a980:	0780      	lsls	r0, r0, #30
 802a982:	d40d      	bmi.n	802a9a0 <SendNextQueuedClientRequest+0x32>
 802a984:	6a90      	ldr	r0, [r2, #40]	; 0x28
 802a986:	2800      	cmp	r0, #0
 802a988:	d00a      	beq.n	802a9a0 <SendNextQueuedClientRequest+0x32>
 802a98a:	7a11      	ldrb	r1, [r2, #8]
 802a98c:	290c      	cmp	r1, #12
 802a98e:	d100      	bne.n	802a992 <SendNextQueuedClientRequest+0x24>
 802a990:	300c      	adds	r0, #12
 802a992:	9000      	str	r0, [sp, #0]
 802a994:	8a10      	ldrh	r0, [r2, #16]
 802a996:	4621      	mov	r1, r4
 802a998:	b283      	uxth	r3, r0
 802a99a:	4628      	mov	r0, r5
 802a99c:	f000 f940 	bl	802ac20 <StartTimerAndSendPDU>
 802a9a0:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.SendNextQueuedServerIndication:

0802a9a2 <SendNextQueuedServerIndication>:
 802a9a2:	b538      	push	{r3, r4, r5, lr}
 802a9a4:	460c      	mov	r4, r1
 802a9a6:	4605      	mov	r5, r0
 802a9a8:	210f      	movs	r1, #15
 802a9aa:	f104 0010 	add.w	r0, r4, #16
 802a9ae:	f7ff ffd5 	bl	802a95c <SearchTransactionInfoEntryByType>
 802a9b2:	0002      	movs	r2, r0
 802a9b4:	d00c      	beq.n	802a9d0 <SendNextQueuedServerIndication+0x2e>
 802a9b6:	7a90      	ldrb	r0, [r2, #10]
 802a9b8:	0780      	lsls	r0, r0, #30
 802a9ba:	d409      	bmi.n	802a9d0 <SendNextQueuedServerIndication+0x2e>
 802a9bc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 802a9be:	2800      	cmp	r0, #0
 802a9c0:	d006      	beq.n	802a9d0 <SendNextQueuedServerIndication+0x2e>
 802a9c2:	9000      	str	r0, [sp, #0]
 802a9c4:	8a10      	ldrh	r0, [r2, #16]
 802a9c6:	4621      	mov	r1, r4
 802a9c8:	b283      	uxth	r3, r0
 802a9ca:	4628      	mov	r0, r5
 802a9cc:	f000 f928 	bl	802ac20 <StartTimerAndSendPDU>
 802a9d0:	bd38      	pop	{r3, r4, r5, pc}

Disassembly of section i.ServiceDiscoveryStateMachine:

0802a9d2 <ServiceDiscoveryStateMachine>:
 802a9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a9d4:	4605      	mov	r5, r0
 802a9d6:	460c      	mov	r4, r1
 802a9d8:	7b08      	ldrb	r0, [r1, #12]
 802a9da:	2102      	movs	r1, #2
 802a9dc:	b1d8      	cbz	r0, 802aa16 <ServiceDiscoveryStateMachine+0x44>
 802a9de:	2801      	cmp	r0, #1
 802a9e0:	d01b      	beq.n	802aa1a <ServiceDiscoveryStateMachine+0x48>
 802a9e2:	2600      	movs	r6, #0
 802a9e4:	2802      	cmp	r0, #2
 802a9e6:	d034      	beq.n	802aa52 <ServiceDiscoveryStateMachine+0x80>
 802a9e8:	2803      	cmp	r0, #3
 802a9ea:	d142      	bne.n	802aa72 <ServiceDiscoveryStateMachine+0xa0>
 802a9ec:	6967      	ldr	r7, [r4, #20]
 802a9ee:	b3c7      	cbz	r7, 802aa62 <ServiceDiscoveryStateMachine+0x90>
 802a9f0:	8af9      	ldrh	r1, [r7, #22]
 802a9f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 802a9f6:	f7ff ff39 	bl	802a86c <SearchCharacteristicInfoEntry>
 802a9fa:	0003      	movs	r3, r0
 802a9fc:	d009      	beq.n	802aa12 <ServiceDiscoveryStateMachine+0x40>
 802a9fe:	6a18      	ldr	r0, [r3, #32]
 802aa00:	b138      	cbz	r0, 802aa12 <ServiceDiscoveryStateMachine+0x40>
 802aa02:	9600      	str	r6, [sp, #0]
 802aa04:	6828      	ldr	r0, [r5, #0]
 802aa06:	463a      	mov	r2, r7
 802aa08:	4621      	mov	r1, r4
 802aa0a:	f7fd f98d 	bl	8027d28 <CharacteristicDescriptorDiscoveryRequest>
 802aa0e:	2800      	cmp	r0, #0
 802aa10:	d12f      	bne.n	802aa72 <ServiceDiscoveryStateMachine+0xa0>
 802aa12:	463a      	mov	r2, r7
 802aa14:	e00d      	b.n	802aa32 <ServiceDiscoveryStateMachine+0x60>
 802aa16:	7321      	strb	r1, [r4, #12]
 802aa18:	e00f      	b.n	802aa3a <ServiceDiscoveryStateMachine+0x68>
 802aa1a:	7321      	strb	r1, [r4, #12]
 802aa1c:	6966      	ldr	r6, [r4, #20]
 802aa1e:	b306      	cbz	r6, 802aa62 <ServiceDiscoveryStateMachine+0x90>
 802aa20:	8a73      	ldrh	r3, [r6, #18]
 802aa22:	4632      	mov	r2, r6
 802aa24:	4621      	mov	r1, r4
 802aa26:	6828      	ldr	r0, [r5, #0]
 802aa28:	f7fd f9c8 	bl	8027dbc <CharacteristicDiscoveryRequest>
 802aa2c:	2800      	cmp	r0, #0
 802aa2e:	da20      	bge.n	802aa72 <ServiceDiscoveryStateMachine+0xa0>
 802aa30:	4632      	mov	r2, r6
 802aa32:	4621      	mov	r1, r4
 802aa34:	4628      	mov	r0, r5
 802aa36:	f7fe f804 	bl	8028a42 <FormatAndDispatchDiscoveryCallback>
 802aa3a:	6962      	ldr	r2, [r4, #20]
 802aa3c:	b18a      	cbz	r2, 802aa62 <ServiceDiscoveryStateMachine+0x90>
 802aa3e:	2001      	movs	r0, #1
 802aa40:	7320      	strb	r0, [r4, #12]
 802aa42:	8a53      	ldrh	r3, [r2, #18]
 802aa44:	6828      	ldr	r0, [r5, #0]
 802aa46:	b001      	add	sp, #4
 802aa48:	4621      	mov	r1, r4
 802aa4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802aa4e:	f7ff bad9 	b.w	802a004 <IncludeDiscoveryRequest>
 802aa52:	2003      	movs	r0, #3
 802aa54:	7320      	strb	r0, [r4, #12]
 802aa56:	6967      	ldr	r7, [r4, #20]
 802aa58:	b11f      	cbz	r7, 802aa62 <ServiceDiscoveryStateMachine+0x90>
 802aa5a:	9600      	str	r6, [sp, #0]
 802aa5c:	2300      	movs	r3, #0
 802aa5e:	6828      	ldr	r0, [r5, #0]
 802aa60:	e7d1      	b.n	802aa06 <ServiceDiscoveryStateMachine+0x34>
 802aa62:	e7ff      	b.n	802aa64 <ServiceDiscoveryStateMachine+0x92>
 802aa64:	4628      	mov	r0, r5
 802aa66:	6821      	ldr	r1, [r4, #0]
 802aa68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802aa6c:	2200      	movs	r2, #0
 802aa6e:	f7fe b8a0 	b.w	8028bb2 <FormatAndDispatchDiscoveryCompleteCallback>
 802aa72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Disassembly of section i.SignedWriteCommandEvent:

0802aa74 <SignedWriteCommandEvent>:
 802aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa78:	b085      	sub	sp, #20
 802aa7a:	461e      	mov	r6, r3
 802aa7c:	468b      	mov	fp, r1
 802aa7e:	4681      	mov	r9, r0
 802aa80:	2a10      	cmp	r2, #16
 802aa82:	d348      	bcc.n	802ab16 <SignedWriteCommandEvent+0xa2>
 802aa84:	f8b6 3001 	ldrh.w	r3, [r6, #1]
 802aa88:	3a0f      	subs	r2, #15
 802aa8a:	b297      	uxth	r7, r2
 802aa8c:	2b00      	cmp	r3, #0
 802aa8e:	d042      	beq.n	802ab16 <SignedWriteCommandEvent+0xa2>
 802aa90:	21d2      	movs	r1, #210	; 0xd2
 802aa92:	220b      	movs	r2, #11
 802aa94:	e9cd 2100 	strd	r2, r1, [sp]
 802aa98:	f04f 0a00 	mov.w	sl, #0
 802aa9c:	f8cd a008 	str.w	sl, [sp, #8]
 802aaa0:	4652      	mov	r2, sl
 802aaa2:	4659      	mov	r1, fp
 802aaa4:	4648      	mov	r0, r9
 802aaa6:	f7ff f8f6 	bl	8029c96 <GenericWriteRequestEvent>
 802aaaa:	ea5f 0800 	movs.w	r8, r0
 802aaae:	d032      	beq.n	802ab16 <SignedWriteCommandEvent+0xa2>
 802aab0:	2100      	movs	r1, #0
 802aab2:	f108 0014 	add.w	r0, r8, #20
 802aab6:	f7ff f99b 	bl	8029df0 <GetNextHandleInfoEntry>
 802aaba:	0004      	movs	r4, r0
 802aabc:	d02b      	beq.n	802ab16 <SignedWriteCommandEvent+0xa2>
 802aabe:	f109 0034 	add.w	r0, r9, #52	; 0x34
 802aac2:	68a1      	ldr	r1, [r4, #8]
 802aac4:	f7ff ff26 	bl	802a914 <SearchServiceInfoEntry>
 802aac8:	0005      	movs	r5, r0
 802aaca:	d024      	beq.n	802ab16 <SignedWriteCommandEvent+0xa2>
 802aacc:	89a2      	ldrh	r2, [r4, #12]
 802aace:	89ab      	ldrh	r3, [r5, #12]
 802aad0:	1cf0      	adds	r0, r6, #3
 802aad2:	1ad2      	subs	r2, r2, r3
 802aad4:	e9cd a003 	strd	sl, r0, [sp, #12]
 802aad8:	b292      	uxth	r2, r2
 802aada:	e9cd 2701 	strd	r2, r7, [sp, #4]
 802aade:	68a0      	ldr	r0, [r4, #8]
 802aae0:	9000      	str	r0, [sp, #0]
 802aae2:	2304      	movs	r3, #4
 802aae4:	4642      	mov	r2, r8
 802aae6:	4659      	mov	r1, fp
 802aae8:	4648      	mov	r0, r9
 802aaea:	f7fe f90f 	bl	8028d0c <FormatServerEventIntegerThreeWordsPointer>
 802aaee:	0004      	movs	r4, r0
 802aaf0:	d011      	beq.n	802ab16 <SignedWriteCommandEvent+0xa2>
 802aaf2:	2028      	movs	r0, #40	; 0x28
 802aaf4:	8060      	strh	r0, [r4, #2]
 802aaf6:	6860      	ldr	r0, [r4, #4]
 802aaf8:	19f1      	adds	r1, r6, r7
 802aafa:	220c      	movs	r2, #12
 802aafc:	301c      	adds	r0, #28
 802aafe:	1cc9      	adds	r1, r1, #3
 802ab00:	f7e8 fcd9 	bl	80134b6 <BTPS_MemCopy>
 802ab04:	69ea      	ldr	r2, [r5, #28]
 802ab06:	f8d9 0000 	ldr.w	r0, [r9]
 802ab0a:	69ab      	ldr	r3, [r5, #24]
 802ab0c:	b005      	add	sp, #20
 802ab0e:	4621      	mov	r1, r4
 802ab10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab14:	4718      	bx	r3
 802ab16:	b005      	add	sp, #20
 802ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section i.StartServiceDiscovery:

0802ab1c <StartServiceDiscovery>:
 802ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab20:	b08f      	sub	sp, #60	; 0x3c
 802ab22:	4688      	mov	r8, r1
 802ab24:	a918      	add	r1, sp, #96	; 0x60
 802ab26:	4681      	mov	r9, r0
 802ab28:	e891 0c80 	ldmia.w	r1, {r7, sl, fp}
 802ab2c:	4601      	mov	r1, r0
 802ab2e:	461d      	mov	r5, r3
 802ab30:	4616      	mov	r6, r2
 802ab32:	a80e      	add	r0, sp, #56	; 0x38
 802ab34:	f7fc ffb2 	bl	8027a9c <AcquireGATTStackInformation>
 802ab38:	0004      	movs	r4, r0
 802ab3a:	d109      	bne.n	802ab50 <StartServiceDiscovery+0x34>
 802ab3c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802ab3e:	4641      	mov	r1, r8
 802ab40:	302c      	adds	r0, #44	; 0x2c
 802ab42:	f7ff fed3 	bl	802a8ec <SearchServiceDiscoveryInfoEntry>
 802ab46:	b138      	cbz	r0, 802ab58 <StartServiceDiscovery+0x3c>
 802ab48:	4c33      	ldr	r4, [pc, #204]	; (802ac18 <StartServiceDiscovery+0xfc>)
 802ab4a:	4648      	mov	r0, r9
 802ab4c:	f7ee fbfa 	bl	8019344 <BSC_UnLockBluetoothStack>
 802ab50:	b00f      	add	sp, #60	; 0x3c
 802ab52:	4620      	mov	r0, r4
 802ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab58:	222c      	movs	r2, #44	; 0x2c
 802ab5a:	2100      	movs	r1, #0
 802ab5c:	a803      	add	r0, sp, #12
 802ab5e:	f7e8 fcae 	bl	80134be <BTPS_MemInitialize>
 802ab62:	f8cd 800c 	str.w	r8, [sp, #12]
 802ab66:	2000      	movs	r0, #0
 802ab68:	e9cd ab0b 	strd	sl, fp, [sp, #44]	; 0x2c
 802ab6c:	f88d 0018 	strb.w	r0, [sp, #24]
 802ab70:	b126      	cbz	r6, 802ab7c <StartServiceDiscovery+0x60>
 802ab72:	8830      	ldrh	r0, [r6, #0]
 802ab74:	f8ad 0014 	strh.w	r0, [sp, #20]
 802ab78:	8870      	ldrh	r0, [r6, #2]
 802ab7a:	e004      	b.n	802ab86 <StartServiceDiscovery+0x6a>
 802ab7c:	2001      	movs	r0, #1
 802ab7e:	f8ad 0014 	strh.w	r0, [sp, #20]
 802ab82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 802ab86:	4c25      	ldr	r4, [pc, #148]	; (802ac1c <StartServiceDiscovery+0x100>)
 802ab88:	f8ad 0016 	strh.w	r0, [sp, #22]
 802ab8c:	f46f 767b 	mvn.w	r6, #1004	; 0x3ec
 802ab90:	b36d      	cbz	r5, 802abee <StartServiceDiscovery+0xd2>
 802ab92:	b367      	cbz	r7, 802abee <StartServiceDiscovery+0xd2>
 802ab94:	46b8      	mov	r8, r7
 802ab96:	eb05 1005 	add.w	r0, r5, r5, lsl #4
 802ab9a:	4607      	mov	r7, r0
 802ab9c:	f7e8 fc0e 	bl	80133bc <BTPS_AllocateMemory>
 802aba0:	900a      	str	r0, [sp, #40]	; 0x28
 802aba2:	b180      	cbz	r0, 802abc6 <StartServiceDiscovery+0xaa>
 802aba4:	463a      	mov	r2, r7
 802aba6:	4641      	mov	r1, r8
 802aba8:	f7e8 fc85 	bl	80134b6 <BTPS_MemCopy>
 802abac:	9803      	ldr	r0, [sp, #12]
 802abae:	9903      	ldr	r1, [sp, #12]
 802abb0:	e9cd 4000 	strd	r4, r0, [sp]
 802abb4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802abb8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802abbc:	9509      	str	r5, [sp, #36]	; 0x24
 802abbe:	4648      	mov	r0, r9
 802abc0:	f7fe fc5a 	bl	8029478 <GATT_Discover_Services>
 802abc4:	e000      	b.n	802abc8 <StartServiceDiscovery+0xac>
 802abc6:	4630      	mov	r0, r6
 802abc8:	1e04      	subs	r4, r0, #0
 802abca:	dd1e      	ble.n	802ac0a <StartServiceDiscovery+0xee>
 802abcc:	9004      	str	r0, [sp, #16]
 802abce:	980e      	ldr	r0, [sp, #56]	; 0x38
 802abd0:	2228      	movs	r2, #40	; 0x28
 802abd2:	302c      	adds	r0, #44	; 0x2c
 802abd4:	e9cd 2000 	strd	r2, r0, [sp]
 802abd8:	a903      	add	r1, sp, #12
 802abda:	232c      	movs	r3, #44	; 0x2c
 802abdc:	9102      	str	r1, [sp, #8]
 802abde:	2200      	movs	r2, #0
 802abe0:	2107      	movs	r1, #7
 802abe2:	4618      	mov	r0, r3
 802abe4:	f7ed ff2e 	bl	8018a44 <BSC_AddGenericListEntry>
 802abe8:	b148      	cbz	r0, 802abfe <StartServiceDiscovery+0xe2>
 802abea:	2400      	movs	r4, #0
 802abec:	e7ad      	b.n	802ab4a <StartServiceDiscovery+0x2e>
 802abee:	e9cd 4800 	strd	r4, r8, [sp]
 802abf2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 802abf6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 802abfa:	4641      	mov	r1, r8
 802abfc:	e7df      	b.n	802abbe <StartServiceDiscovery+0xa2>
 802abfe:	4648      	mov	r0, r9
 802ac00:	9904      	ldr	r1, [sp, #16]
 802ac02:	f7fe f987 	bl	8028f14 <GATT_Cancel_Transaction>
 802ac06:	4634      	mov	r4, r6
 802ac08:	e000      	b.n	802ac0c <StartServiceDiscovery+0xf0>
 802ac0a:	d09e      	beq.n	802ab4a <StartServiceDiscovery+0x2e>
 802ac0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 802ac0e:	2800      	cmp	r0, #0
 802ac10:	d09b      	beq.n	802ab4a <StartServiceDiscovery+0x2e>
 802ac12:	f7e8 fbed 	bl	80133f0 <BTPS_FreeMemory>
 802ac16:	e798      	b.n	802ab4a <StartServiceDiscovery+0x2e>
 802ac18:	fffffc0e 	.word	0xfffffc0e
 802ac1c:	08028fe1 	.word	0x08028fe1

Disassembly of section i.StartTimerAndSendPDU:

0802ac20 <StartTimerAndSendPDU>:
 802ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac24:	4698      	mov	r8, r3
 802ac26:	4614      	mov	r4, r2
 802ac28:	460d      	mov	r5, r1
 802ac2a:	4606      	mov	r6, r0
 802ac2c:	680b      	ldr	r3, [r1, #0]
 802ac2e:	9f08      	ldr	r7, [sp, #32]
 802ac30:	6800      	ldr	r0, [r0, #0]
 802ac32:	4a10      	ldr	r2, [pc, #64]	; (802ac74 <StartTimerAndSendPDU+0x54>)
 802ac34:	f247 5130 	movw	r1, #30000	; 0x7530
 802ac38:	f7ee fb14 	bl	8019264 <BSC_StartTimer>
 802ac3c:	2800      	cmp	r0, #0
 802ac3e:	dd13      	ble.n	802ac68 <StartTimerAndSendPDU+0x48>
 802ac40:	6060      	str	r0, [r4, #4]
 802ac42:	4643      	mov	r3, r8
 802ac44:	2200      	movs	r2, #0
 802ac46:	4629      	mov	r1, r5
 802ac48:	4630      	mov	r0, r6
 802ac4a:	9700      	str	r7, [sp, #0]
 802ac4c:	f7ff fa34 	bl	802a0b8 <L2CAPSendPDU>
 802ac50:	0005      	movs	r5, r0
 802ac52:	d004      	beq.n	802ac5e <StartTimerAndSendPDU+0x3e>
 802ac54:	6861      	ldr	r1, [r4, #4]
 802ac56:	6830      	ldr	r0, [r6, #0]
 802ac58:	f7ee fb4e 	bl	80192f8 <BSC_StopTimer>
 802ac5c:	e006      	b.n	802ac6c <StartTimerAndSendPDU+0x4c>
 802ac5e:	7aa0      	ldrb	r0, [r4, #10]
 802ac60:	f040 0002 	orr.w	r0, r0, #2
 802ac64:	72a0      	strb	r0, [r4, #10]
 802ac66:	e001      	b.n	802ac6c <StartTimerAndSendPDU+0x4c>
 802ac68:	f46f 757b 	mvn.w	r5, #1004	; 0x3ec
 802ac6c:	4628      	mov	r0, r5
 802ac6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ac72:	0000      	.short	0x0000
 802ac74:	080299c1 	.word	0x080299c1

Disassembly of section i.ValidateServiceArray:

0802ac78 <ValidateServiceArray>:
 802ac78:	b570      	push	{r4, r5, r6, lr}
 802ac7a:	2400      	movs	r4, #0
 802ac7c:	784a      	ldrb	r2, [r1, #1]
 802ac7e:	4623      	mov	r3, r4
 802ac80:	b12a      	cbz	r2, 802ac8e <ValidateServiceArray+0x16>
 802ac82:	2a01      	cmp	r2, #1
 802ac84:	d003      	beq.n	802ac8e <ValidateServiceArray+0x16>
 802ac86:	2a02      	cmp	r2, #2
 802ac88:	d001      	beq.n	802ac8e <ValidateServiceArray+0x16>
 802ac8a:	2a03      	cmp	r2, #3
 802ac8c:	d12c      	bne.n	802ace8 <ValidateServiceArray+0x70>
 802ac8e:	780a      	ldrb	r2, [r1, #0]
 802ac90:	2a01      	cmp	r2, #1
 802ac92:	d129      	bne.n	802ace8 <ValidateServiceArray+0x70>
 802ac94:	684a      	ldr	r2, [r1, #4]
 802ac96:	b33a      	cbz	r2, 802ace8 <ValidateServiceArray+0x70>
 802ac98:	2201      	movs	r2, #1
 802ac9a:	3108      	adds	r1, #8
 802ac9c:	e028      	b.n	802acf0 <ValidateServiceArray+0x78>
 802ac9e:	780b      	ldrb	r3, [r1, #0]
 802aca0:	075d      	lsls	r5, r3, #29
 802aca2:	d41f      	bmi.n	802ace4 <ValidateServiceArray+0x6c>
 802aca4:	784d      	ldrb	r5, [r1, #1]
 802aca6:	2d0b      	cmp	r5, #11
 802aca8:	d21d      	bcs.n	802ace6 <ValidateServiceArray+0x6e>
 802acaa:	e8df f005 	tbb	[pc, r5]
 802acae:	1c1c      	.short	0x1c1c
 802acb0:	0b061c1c 	.word	0x0b061c1c
 802acb4:	1919190b 	.word	0x1919190b
 802acb8:	0019      	.short	0x0019
 802acba:	684d      	ldr	r5, [r1, #4]
 802acbc:	b19d      	cbz	r5, 802ace6 <ValidateServiceArray+0x6e>
 802acbe:	2b01      	cmp	r3, #1
 802acc0:	d111      	bne.n	802ace6 <ValidateServiceArray+0x6e>
 802acc2:	e00f      	b.n	802ace4 <ValidateServiceArray+0x6c>
 802acc4:	684d      	ldr	r5, [r1, #4]
 802acc6:	b10d      	cbz	r5, 802accc <ValidateServiceArray+0x54>
 802acc8:	2b01      	cmp	r3, #1
 802acca:	d000      	beq.n	802acce <ValidateServiceArray+0x56>
 802accc:	2401      	movs	r4, #1
 802acce:	1c53      	adds	r3, r2, #1
 802acd0:	4283      	cmp	r3, r0
 802acd2:	d208      	bcs.n	802ace6 <ValidateServiceArray+0x6e>
 802acd4:	7a4b      	ldrb	r3, [r1, #9]
 802acd6:	2b07      	cmp	r3, #7
 802acd8:	d004      	beq.n	802ace4 <ValidateServiceArray+0x6c>
 802acda:	2b08      	cmp	r3, #8
 802acdc:	d103      	bne.n	802ace6 <ValidateServiceArray+0x6e>
 802acde:	e001      	b.n	802ace4 <ValidateServiceArray+0x6c>
 802ace0:	684b      	ldr	r3, [r1, #4]
 802ace2:	b103      	cbz	r3, 802ace6 <ValidateServiceArray+0x6e>
 802ace4:	b114      	cbz	r4, 802acec <ValidateServiceArray+0x74>
 802ace6:	2300      	movs	r3, #0
 802ace8:	4618      	mov	r0, r3
 802acea:	bd70      	pop	{r4, r5, r6, pc}
 802acec:	3108      	adds	r1, #8
 802acee:	1c52      	adds	r2, r2, #1
 802acf0:	4282      	cmp	r2, r0
 802acf2:	d3d4      	bcc.n	802ac9e <ValidateServiceArray+0x26>
 802acf4:	2301      	movs	r3, #1
 802acf6:	e7f7      	b.n	802ace8 <ValidateServiceArray+0x70>

Disassembly of section i.ValidateServiceConnectionType:

0802acf8 <ValidateServiceConnectionType>:
 802acf8:	4602      	mov	r2, r0
 802acfa:	7909      	ldrb	r1, [r1, #4]
 802acfc:	2000      	movs	r0, #0
 802acfe:	b129      	cbz	r1, 802ad0c <ValidateServiceConnectionType+0x14>
 802ad00:	2901      	cmp	r1, #1
 802ad02:	d102      	bne.n	802ad0a <ValidateServiceConnectionType+0x12>
 802ad04:	7911      	ldrb	r1, [r2, #4]
 802ad06:	0789      	lsls	r1, r1, #30
 802ad08:	d403      	bmi.n	802ad12 <ValidateServiceConnectionType+0x1a>
 802ad0a:	4770      	bx	lr
 802ad0c:	7911      	ldrb	r1, [r2, #4]
 802ad0e:	07c9      	lsls	r1, r1, #31
 802ad10:	d0fb      	beq.n	802ad0a <ValidateServiceConnectionType+0x12>
 802ad12:	2001      	movs	r0, #1
 802ad14:	4770      	bx	lr

Disassembly of section i.VerifyNoOutstandingServerRequests:

0802ad16 <VerifyNoOutstandingServerRequests>:
 802ad16:	b570      	push	{r4, r5, r6, lr}
 802ad18:	2401      	movs	r4, #1
 802ad1a:	2100      	movs	r1, #0
 802ad1c:	f100 0510 	add.w	r5, r0, #16
 802ad20:	e00a      	b.n	802ad38 <VerifyNoOutstandingServerRequests+0x22>
 802ad22:	7a0a      	ldrb	r2, [r1, #8]
 802ad24:	2a0e      	cmp	r2, #14
 802ad26:	d007      	beq.n	802ad38 <VerifyNoOutstandingServerRequests+0x22>
 802ad28:	2a0b      	cmp	r2, #11
 802ad2a:	d005      	beq.n	802ad38 <VerifyNoOutstandingServerRequests+0x22>
 802ad2c:	2a0a      	cmp	r2, #10
 802ad2e:	d003      	beq.n	802ad38 <VerifyNoOutstandingServerRequests+0x22>
 802ad30:	2a0f      	cmp	r2, #15
 802ad32:	d001      	beq.n	802ad38 <VerifyNoOutstandingServerRequests+0x22>
 802ad34:	2400      	movs	r4, #0
 802ad36:	e004      	b.n	802ad42 <VerifyNoOutstandingServerRequests+0x2c>
 802ad38:	4628      	mov	r0, r5
 802ad3a:	f7ff f863 	bl	8029e04 <GetNextTransactionInfoEntry>
 802ad3e:	0001      	movs	r1, r0
 802ad40:	d1ef      	bne.n	802ad22 <VerifyNoOutstandingServerRequests+0xc>
 802ad42:	4620      	mov	r0, r4
 802ad44:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section i.WriteRequestEvent:

0802ad46 <WriteRequestEvent>:
 802ad46:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802ad4a:	461c      	mov	r4, r3
 802ad4c:	460f      	mov	r7, r1
 802ad4e:	4680      	mov	r8, r0
 802ad50:	2a04      	cmp	r2, #4
 802ad52:	d321      	bcc.n	802ad98 <WriteRequestEvent+0x52>
 802ad54:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 802ad58:	1ed2      	subs	r2, r2, #3
 802ad5a:	b295      	uxth	r5, r2
 802ad5c:	b1cb      	cbz	r3, 802ad92 <WriteRequestEvent+0x4c>
 802ad5e:	2012      	movs	r0, #18
 802ad60:	2109      	movs	r1, #9
 802ad62:	e9cd 1000 	strd	r1, r0, [sp]
 802ad66:	2600      	movs	r6, #0
 802ad68:	4632      	mov	r2, r6
 802ad6a:	9602      	str	r6, [sp, #8]
 802ad6c:	4639      	mov	r1, r7
 802ad6e:	4640      	mov	r0, r8
 802ad70:	f7fe ff91 	bl	8029c96 <GenericWriteRequestEvent>
 802ad74:	2800      	cmp	r0, #0
 802ad76:	d00a      	beq.n	802ad8e <WriteRequestEvent+0x48>
 802ad78:	1ce4      	adds	r4, r4, #3
 802ad7a:	e9cd 6500 	strd	r6, r5, [sp]
 802ad7e:	e9cd 4602 	strd	r4, r6, [sp, #8]
 802ad82:	4602      	mov	r2, r0
 802ad84:	2300      	movs	r3, #0
 802ad86:	4639      	mov	r1, r7
 802ad88:	4640      	mov	r0, r8
 802ad8a:	f7fd fba3 	bl	80284d4 <DispatchServerWriteRequestEvent>
 802ad8e:	e8bd 81ff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, pc}
 802ad92:	2001      	movs	r0, #1
 802ad94:	9000      	str	r0, [sp, #0]
 802ad96:	e002      	b.n	802ad9e <WriteRequestEvent+0x58>
 802ad98:	2004      	movs	r0, #4
 802ad9a:	2300      	movs	r3, #0
 802ad9c:	9000      	str	r0, [sp, #0]
 802ad9e:	2212      	movs	r2, #18
 802ada0:	4640      	mov	r0, r8
 802ada2:	f7fe f89e 	bl	8028ee2 <GATTErrorResponsePDU>
 802ada6:	e7f2      	b.n	802ad8e <WriteRequestEvent+0x48>

Disassembly of section i.WriteResponseEvent:

0802ada8 <WriteResponseEvent>:
 802ada8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 802adaa:	4614      	mov	r4, r2
 802adac:	4605      	mov	r5, r0
 802adae:	2b01      	cmp	r3, #1
 802adb0:	d10e      	bne.n	802add0 <WriteResponseEvent+0x28>
 802adb2:	6920      	ldr	r0, [r4, #16]
 802adb4:	230a      	movs	r3, #10
 802adb6:	1ec0      	subs	r0, r0, #3
 802adb8:	9001      	str	r0, [sp, #4]
 802adba:	a801      	add	r0, sp, #4
 802adbc:	9000      	str	r0, [sp, #0]
 802adbe:	4628      	mov	r0, r5
 802adc0:	f7fd ff14 	bl	8028bec <FormatClientEventInteger>
 802adc4:	0001      	movs	r1, r0
 802adc6:	d003      	beq.n	802add0 <WriteResponseEvent+0x28>
 802adc8:	69a3      	ldr	r3, [r4, #24]
 802adca:	6a22      	ldr	r2, [r4, #32]
 802adcc:	6828      	ldr	r0, [r5, #0]
 802adce:	4798      	blx	r3
 802add0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
